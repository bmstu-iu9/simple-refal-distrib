// This file automatically generated from 'rsl-decompiler.ref'
// Don't edit! Edit 'rsl-decompiler.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_3467411008_4259852895
#define COOKIE1_ 3467411008U
#define COOKIE2_ 4259852895U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_ArgList = 18,
  efunc_Main = 19,
  efunc_gen_Map_Z1 = 20,
  efunc_SaveFile = 21,
  efunc_Prout = 22,
  efunc_gen_FormatWord_B1 = 23,
  efunc_Type = 24,
  efunc_gen_Map_Z4 = 25,
  efunc_Rev = 26,
  efunc_CleanupBuiltinsm_Aux = 27,
  efunc_gen_Map_Z3 = 28,
  efunc_ListOfBuiltin = 29,
  efunc_gen_Map_Z6 = 30,
  efunc_gen_ProcessFile_A5 = 31,
  efunc_gen_Map_Z5 = 32,
  efunc_gen_Map_Z7 = 33,
  efunc_gen_ProcessFile_A4 = 34,
  efunc_gen_Disassemble_A1 = 35,
  efunc_gen_Disassemble_A1B1 = 36,
  efunc_gen_ProcessFile_A3 = 37,
  efunc_gen_DecodeCommands_Z1 = 38,
  efunc_gen_DecodeStructure_A1 = 39,
  efunc_ReadAsciiz = 40,
  efunc_gen_ProcessFile_A2 = 41,
  efunc_LoadBytes = 42,
  efunc_gen_ProcessFile_A1 = 43,
  efunc_gen_CleanupBuiltinsm_Aux_S1C1 = 44,
  efunc_gen_CleanupBuiltinsm_Aux_S1C1B1 = 45,
  efunc_ReadEntryPoints = 46,
  efunc_gen_DecodeStructure_A10 = 47,
  efunc_ReadWords = 48,
  efunc_gen_DecodeStructure_A9 = 49,
  efunc_ReadExterns = 50,
  efunc_gen_DecodeStructure_A8 = 51,
  efunc_ReadEntries = 52,
  efunc_gen_DecodeStructure_A7 = 53,
  efunc_MakeDWord = 54,
  efunc_gen_DecodeStructure_A6 = 55,
  efunc_gen_ReadDWord_D1 = 56,
  efunc_gen_DecodeStructure_A5 = 57,
  efunc_gen_DecodeStructure_A4 = 58,
  efunc_gen_DecodeStructure_A3 = 59,
  efunc_gen_DecodeStructure_A2 = 60,
  efunc_Chr = 61,
  efunc_Mul = 62,
  efunc_gen_ResolveFunctions_A1 = 63,
  efunc_gen_Disassemble_A7 = 64,
  efunc_gen_DoMapAccum_Z1 = 65,
  efunc_CheckupEntries = 66,
  efunc_gen_Disassemble_A6 = 67,
  efunc_CheckupFunctionStarts = 68,
  efunc_gen_Disassemble_A5 = 69,
  efunc_gen_MakeFunctionTable_A1 = 70,
  efunc_gen_DoMapAccum_Z2 = 71,
  efunc_gen_Disassemble_A4 = 72,
  efunc_SplitByFunctions = 73,
  efunc_gen_Disassemble_A3 = 74,
  efunc_gen_ResolveWords_A1 = 75,
  efunc_gen_DoMapAccum_Z3 = 76,
  efunc_gen_Disassemble_A2 = 77,
  efunc_gen_Disassemble_A1B1S2L1D1 = 78,
  efunc_gen_SplitByFunctions_B1S1C1 = 79,
  efunc_DeclareCommand = 80,
  efunc_gen_SplitByFunctions_C1 = 81,
  efunc_gen_SplitByFunctions_B1 = 82,
  efunc_gen_DoMapAccum_Z4 = 83,
  efunc_gen_MakeFunctionTable_A3 = 84,
  efunc_AddFunctionToTable = 85,
  efunc_gen_AddFunctionToTable_S2A2B1S1C1 = 86,
  efunc_IsObfuscated = 87,
  efunc_Symb = 88,
  efunc_IncName = 89,
  efunc_gen_AddFunctionToTable_S2C1 = 90,
  efunc_gen_AddFunctionToTable_S2A2 = 91,
  efunc_gen_AddFunctionToTable_S2A2B1 = 92,
  efunc_gen_AddFunctionToTable_S3A1B1D2 = 93,
  efunc_gen_AddFunctionToTable_S3A1 = 94,
  efunc_gen_IncName_S1C1 = 95,
  efunc_gen_IsObfuscated_S1C1 = 96,
  efunc_IsObfuscatedm_Tail = 97,
  efunc_gen_IsObfuscatedm_Tail_B1 = 98,
  efunc_ResolveFunctionsm_Body = 99,
  efunc_DecodeCommands = 100,
  efunc_First = 101,
  efunc_gen_DecodeCommands_S28A1 = 102,
  efunc_gen_DecodeCommands_S29A1 = 103,
  efunc_gen_DecodeCommands_S30A1 = 104,
  efunc_Lenw = 105,
  efunc_gen_Len_A1 = 106,
  efunc_AllString = 107,
  efunc_Ord = 108,
  efunc_DoCollectSegments = 109,
  efunc_gen_DecompileFunction_S3A3 = 110,
  efunc_gen_DecompileFunction_S3A3Z1 = 111,
  efunc_gen_DecompileFunction_S3A3Z2 = 112,
  efunc_gen_DecompileFunction_S3A2B1D2 = 113,
  efunc_gen_DecompileFunction_S3A2 = 114,
  efunc_gen_Decompilem_Patternm_Hole_Z1 = 115,
  efunc_gen_DecompileFunction_S3A1 = 116,
  efunc_Decompilem_Patternm_Hole = 117,
  efunc_gen_Decompilem_Patternm_Hole_S7A2 = 118,
  efunc_gen_Decompilem_Patternm_Hole_S8A2 = 119,
  efunc_Decompilem_Patternm_NoHole = 120,
  efunc_gen_Decompilem_Patternm_Hole_S19A2 = 121,
  efunc_gen_Decompilem_Patternm_Hole_S20A2 = 122,
  efunc_gen_Decompilem_Patternm_Hole_S7A1 = 123,
  efunc_gen_Decompilem_Patternm_Hole_S8A1 = 124,
  efunc_gen_Decompilem_Patternm_Hole_S11A1 = 125,
  efunc_gen_Decompilem_Patternm_Hole_S12A1 = 126,
  efunc_gen_Decompilem_Patternm_Hole_S18A1 = 127,
  efunc_gen_Decompilem_Patternm_Hole_S19A1 = 128,
  efunc_gen_Decompilem_Patternm_Hole_S20A1 = 129,
  efunc_gen_Decompilem_Patternm_Hole_S21A1 = 130,
  efunc_gen_Decompilem_Patternm_Hole_S22A1 = 131,
  efunc_gen_Decompilem_Patternm_Hole_S25A1 = 132,
  efunc_gen_Decompilem_Patternm_Hole_S26A1 = 133,
  efunc_gen_Decompilem_Patternm_Hole_S27A1 = 134,
  efunc_Decompilem_Result = 135,
  efunc_gen_Decompilem_Result_S10C1 = 136,
  efunc_gen_Decompilem_Result_S11C1 = 137,
  efunc_gen_Decompilem_Result_S11C2 = 138,
  efunc_gen_Decompilem_Result_S12C1 = 139,
  efunc_gen_Decompilem_Result_S13C1 = 140,
  efunc_gen_Decompilem_Result_S13C2 = 141,
  efunc_gen_Decompilem_Patternm_NoHole_Z1 = 142,
  efunc_DoFormatExpr = 143,
  efunc_gen_DoFormatExpr_Z1 = 144,
  efunc_gen_DoFormatExpr_Z2 = 145,
  efunc_gen_DoFormatExpr_Z3 = 146,
  efunc_gen_DoFormatExpr_S6A1 = 147,
  efunc_gen_DoFormatExpr_S7A1 = 148,
  efunc_gen_DoFormatExpr_S9A1 = 149,
  efunc_gen_EscapeChar_S7A1 = 150,
  efunc_gen_DoFormatExpr_S10A1 = 151,
  efunc_gen_DoFormatExpr_S12A1 = 152,
  efunc_gen_DoFormatExpr_S13A1 = 153,
  efunc_gen_DoFormatExpr_S14A1 = 154,
  efunc_gen_DoFormatExpr_S19A1 = 155,
  efunc_FormatWordm_Ident = 156,
  efunc_gen_Map_Z8 = 157,
  efunc_Divmod = 158,
  efunc_gen_EscapeCharm_Hex_A1 = 159,
  efunc_Compare = 160,
  efunc_gen_EscapeChar_S7B1 = 161,
  efunc_gen_Hex_D16 = 162,
  efunc_Mu = 163,
  efunc_Up = 164,
  efunc_Evm_met = 165,
  efunc_Residue = 166,
  efunc_u_u_Metau_Residue = 167,
  efunc_MapAccum = 168,
  efunc_UnBracket = 169,
  efunc_DelAccumulator = 170,
  efunc_Inc = 171,
  efunc_Dec = 172,
  efunc_Go = 173,
  efunc_ProcessFile = 174,
  efunc_CommentLine = 175,
  efunc_CleanupBuiltins = 176,
  efunc_DecodeStructure = 177,
  efunc_ReadDWord = 178,
  efunc_Disassemble = 179,
  efunc_ResolveWords = 180,
  efunc_MakeFunctionTable = 181,
  efunc_ResolveFunctions = 182,
  efunc_Len = 183,
  efunc_DEBUG = 184,
  efunc_DecompileFunction = 185,
  efunc_CollectSegments = 186,
  efunc_FormatExpr = 187,
  efunc_LIMIT = 188,
  efunc_FormatWord = 189,
  efunc_EscapeChars = 190,
  efunc_EscapeChar = 191,
  efunc_EscapeCharm_Hex = 192,
  efunc_Hex = 193,
  efunc_gen_Apply_Z4 = 194,
  efunc_gen_ProcessFile_D1 = 195,
  efunc_gen_Map_Z0 = 196,
  efunc_gen_ProcessFile_Z0 = 197,
  efunc_gen_Map_Z2 = 198,
  efunc_gen_CommentLine_Z0 = 199,
  efunc_Explode = 200,
  efunc_gen_CleanupBuiltins_L1D1 = 201,
  efunc_gen_CleanupBuiltins_L1Z0 = 202,
  efunc_gen_ProcessFile_A5L1D1 = 203,
  efunc_gen_ProcessFile_A5L1Z0 = 204,
  efunc_gen_ProcessFile_A5L2D1 = 205,
  efunc_gen_ProcessFile_A5L2Z0 = 206,
  efunc_gen_ProcessFile_A5L3D1 = 207,
  efunc_gen_ProcessFile_A5L3Z0 = 208,
  efunc_gen_DecompileFunction_D3 = 209,
  efunc_gen_DecompileFunction_Z0 = 210,
  efunc_gen_DecodeCommands_S28A1Z1 = 211,
  efunc_gen_DecodeCommands_S29A1Z1 = 212,
  efunc_gen_DecodeCommands_S30A1Z1 = 213,
  efunc_gen_DecodeCommands_Z0 = 214,
  efunc_gen_DoMapAccum_S1A1Z1 = 215,
  efunc_gen_ResolveFunctions_A1L1A1 = 216,
  efunc_gen_ResolveFunctions_A1L1D1 = 217,
  efunc_gen_DoMapAccum_Z0 = 218,
  efunc_gen_ResolveFunctions_A1L1Z0 = 219,
  efunc_gen_MakeFunctionTable_A1L1D2 = 220,
  efunc_gen_DoMapAccum_S1A1Z2 = 221,
  efunc_gen_MakeFunctionTable_A1L1Z0 = 222,
  efunc_gen_ResolveWords_A1L1 = 223,
  efunc_gen_DoMapAccum_S1A1Z3 = 224,
  efunc_gen_ResolveWords_A1L1Z0 = 225,
  efunc_gen_DoMapAccum_S1A1Z4 = 226,
  efunc_gen_AddFunctionToTable_Z0 = 227,
  efunc_gen_DecompileFunction_S3A3Z0 = 228,
  efunc_gen_Decompilem_Patternm_Hole_Z2 = 229,
  efunc_gen_Decompilem_Patternm_Hole_S7A1Z1 = 230,
  efunc_gen_Decompilem_Patternm_Hole_S8A1Z1 = 231,
  efunc_gen_Decompilem_Patternm_NoHole_Z2 = 232,
  efunc_gen_Decompilem_Patternm_Hole_S19A1Z1 = 233,
  efunc_gen_Decompilem_Patternm_Hole_S20A1Z1 = 234,
  efunc_gen_Decompilem_Patternm_NoHole_Z3 = 235,
  efunc_gen_Decompilem_Patternm_Hole_Z3 = 236,
  efunc_gen_Decompilem_Patternm_Hole_Z0 = 237,
  efunc_gen_Decompilem_Patternm_Hole_Z4 = 238,
  efunc_gen_Decompilem_Result_Z1 = 239,
  efunc_gen_Decompilem_Patternm_NoHole_Z0 = 240,
  efunc_gen_DoFormatExpr_Z4 = 241,
  efunc_gen_DoFormatExpr_S6A1Z1 = 242,
  efunc_gen_DoFormatExpr_S7A1Z1 = 243,
  efunc_gen_DoFormatExpr_S9A1Z1 = 244,
  efunc_gen_DoFormatExpr_S10A1Z1 = 245,
  efunc_gen_DoFormatExpr_S12A1Z1 = 246,
  efunc_gen_DoFormatExpr_S13A1Z1 = 247,
  efunc_gen_DoFormatExpr_S14A1Z1 = 248,
  efunc_gen_DoFormatExpr_S19A1Z1 = 249,
  efunc_gen_DoFormatExpr_Z0 = 250,
  efunc_gen_DoFormatExpr_S6A1Z2 = 251,
  efunc_gen_DoFormatExpr_S7A1Z2 = 252,
  efunc_gen_DoFormatExpr_S9A1Z2 = 253,
  efunc_gen_DoFormatExpr_S10A1Z2 = 254,
  efunc_gen_DoFormatExpr_S12A1Z2 = 255,
  efunc_gen_DoFormatExpr_S13A1Z2 = 256,
  efunc_gen_DoFormatExpr_S14A1Z2 = 257,
  efunc_gen_DoFormatExpr_S19A1Z2 = 258,
  efunc_gen_DoFormatExpr_S6A1Z3 = 259,
  efunc_gen_DoFormatExpr_S7A1Z3 = 260,
  efunc_gen_DoFormatExpr_S9A1Z3 = 261,
  efunc_gen_DoFormatExpr_S10A1Z3 = 262,
  efunc_gen_DoFormatExpr_S12A1Z3 = 263,
  efunc_gen_DoFormatExpr_S13A1Z3 = 264,
  efunc_gen_DoFormatExpr_S14A1Z3 = 265,
  efunc_gen_DoFormatExpr_S19A1Z3 = 266,
  efunc_gen_EscapeChar_D7 = 267,
  efunc_gen_EscapeChar_Z0 = 268,
  efunc_gen_DecodeCommands_S28A1Z0 = 269,
  efunc_gen_DecodeCommands_S29A1Z0 = 270,
  efunc_gen_DecodeCommands_S30A1Z0 = 271,
  efunc_gen_DoMapAccum_S1A1Z0 = 272,
  efunc_gen_Decompilem_Patternm_Hole_S11A1Z1 = 273,
  efunc_gen_Decompilem_Patternm_Hole_S12A1Z1 = 274,
  efunc_gen_Decompilem_Patternm_Hole_S18A1Z1 = 275,
  efunc_gen_Decompilem_Patternm_Hole_S19A1Z2 = 276,
  efunc_gen_Decompilem_Patternm_Hole_S20A1Z2 = 277,
  efunc_gen_Decompilem_Patternm_Hole_S21A1Z1 = 278,
  efunc_gen_Decompilem_Patternm_Hole_S22A1Z1 = 279,
  efunc_gen_Decompilem_Patternm_NoHole_Z4 = 280,
  efunc_gen_Decompilem_Patternm_Hole_S25A1Z1 = 281,
  efunc_gen_Decompilem_Patternm_Hole_S26A1Z1 = 282,
  efunc_gen_Decompilem_Patternm_Hole_S27A1Z1 = 283,
  efunc_gen_Decompilem_Patternm_Hole_S7A2Z1 = 284,
  efunc_gen_Decompilem_Patternm_Hole_S7A1Z0 = 285,
  efunc_gen_Decompilem_Patternm_Hole_S8A2Z1 = 286,
  efunc_gen_Decompilem_Patternm_Hole_S8A1Z0 = 287,
  efunc_gen_Decompilem_Result_Z2 = 288,
  efunc_gen_Decompilem_Patternm_Hole_S19A1Z0 = 289,
  efunc_gen_Decompilem_Patternm_Hole_S20A1Z0 = 290,
  efunc_gen_Decompilem_Result_Z3 = 291,
  efunc_gen_Decompilem_Patternm_NoHole_Z5 = 292,
  efunc_gen_Decompilem_Patternm_Hole_S19A1Z3 = 293,
  efunc_gen_Decompilem_Patternm_Hole_S20A1Z3 = 294,
  efunc_gen_Decompilem_Patternm_NoHole_Z6 = 295,
  efunc_gen_Decompilem_Patternm_Hole_S11A1Z2 = 296,
  efunc_gen_Decompilem_Patternm_Hole_S12A1Z2 = 297,
  efunc_gen_Decompilem_Patternm_Hole_S18A1Z2 = 298,
  efunc_gen_Decompilem_Patternm_Hole_S19A1Z4 = 299,
  efunc_gen_Decompilem_Patternm_Hole_S20A1Z4 = 300,
  efunc_gen_Decompilem_Patternm_Hole_S21A1Z2 = 301,
  efunc_gen_Decompilem_Patternm_Hole_S22A1Z2 = 302,
  efunc_gen_Decompilem_Patternm_Hole_S25A1Z2 = 303,
  efunc_gen_Decompilem_Patternm_Hole_S26A1Z2 = 304,
  efunc_gen_Decompilem_Patternm_Hole_S27A1Z2 = 305,
  efunc_gen_Decompilem_Result_Z1S10C1 = 306,
  efunc_gen_Decompilem_Result_Z1S11C1 = 307,
  efunc_gen_Decompilem_Result_Z1S11C2 = 308,
  efunc_gen_Decompilem_Result_Z1S12C1 = 309,
  efunc_gen_Decompilem_Result_Z1S13C1 = 310,
  efunc_gen_Decompilem_Result_Z1S13C2 = 311,
  efunc_gen_Decompilem_Result_Z0 = 312,
  efunc_gen_DoFormatExpr_S6A1Z4 = 313,
  efunc_gen_DoFormatExpr_S7A1Z4 = 314,
  efunc_gen_DoFormatExpr_S9A1Z4 = 315,
  efunc_gen_DoFormatExpr_S10A1Z4 = 316,
  efunc_gen_DoFormatExpr_S12A1Z4 = 317,
  efunc_gen_DoFormatExpr_S13A1Z4 = 318,
  efunc_gen_DoFormatExpr_S14A1Z4 = 319,
  efunc_gen_DoFormatExpr_S19A1Z4 = 320,
  efunc_gen_DoFormatExpr_S6A1Z0 = 321,
  efunc_gen_DoFormatExpr_S7A1Z0 = 322,
  efunc_gen_DoFormatExpr_S9A1Z0 = 323,
  efunc_gen_DoFormatExpr_S10A1Z0 = 324,
  efunc_gen_DoFormatExpr_S12A1Z0 = 325,
  efunc_gen_DoFormatExpr_S13A1Z0 = 326,
  efunc_gen_DoFormatExpr_S14A1Z0 = 327,
  efunc_gen_DoFormatExpr_S19A1Z0 = 328,
  efunc_gen_Decompilem_Patternm_Hole_S11A1Z0 = 329,
  efunc_gen_Decompilem_Patternm_Hole_S12A1Z0 = 330,
  efunc_gen_Decompilem_Patternm_Hole_S18A1Z0 = 331,
  efunc_gen_Decompilem_Patternm_Hole_S19A2Z1 = 332,
  efunc_gen_Decompilem_Patternm_Hole_S20A2Z1 = 333,
  efunc_gen_Decompilem_Patternm_Hole_S21A1Z0 = 334,
  efunc_gen_Decompilem_Patternm_Hole_S22A1Z0 = 335,
  efunc_gen_Decompilem_Result_Z4 = 336,
  efunc_gen_Decompilem_Patternm_Hole_S25A1Z0 = 337,
  efunc_gen_Decompilem_Patternm_Hole_S26A1Z0 = 338,
  efunc_gen_Decompilem_Patternm_Hole_S27A1Z0 = 339,
  efunc_gen_Decompilem_Patternm_Hole_S7A2Z0 = 340,
  efunc_gen_Decompilem_Patternm_Hole_S8A2Z0 = 341,
  efunc_gen_Decompilem_Result_Z2S10C1 = 342,
  efunc_gen_Decompilem_Result_Z2S11C1 = 343,
  efunc_gen_Decompilem_Result_Z2S11C2 = 344,
  efunc_gen_Decompilem_Result_Z2S12C1 = 345,
  efunc_gen_Decompilem_Result_Z2S13C1 = 346,
  efunc_gen_Decompilem_Result_Z2S13C2 = 347,
  efunc_gen_Decompilem_Patternm_NoHole_Z7 = 348,
  efunc_gen_Decompilem_Result_Z3S10C1 = 349,
  efunc_gen_Decompilem_Result_Z3S11C1 = 350,
  efunc_gen_Decompilem_Result_Z3S11C2 = 351,
  efunc_gen_Decompilem_Result_Z3S12C1 = 352,
  efunc_gen_Decompilem_Result_Z3S13C1 = 353,
  efunc_gen_Decompilem_Result_Z3S13C2 = 354,
  efunc_gen_Decompilem_Result_Z5 = 355,
  efunc_gen_Decompilem_Result_Z6 = 356,
  efunc_gen_Decompilem_Patternm_Hole_S19A2Z2 = 357,
  efunc_gen_Decompilem_Patternm_Hole_S20A2Z2 = 358,
  efunc_gen_Decompilem_Patternm_Hole_S19A2Z0 = 359,
  efunc_gen_Decompilem_Patternm_Hole_S20A2Z0 = 360,
  efunc_gen_Decompilem_Result_Z4S10C1 = 361,
  efunc_gen_Decompilem_Result_Z4S11C1 = 362,
  efunc_gen_Decompilem_Result_Z4S11C2 = 363,
  efunc_gen_Decompilem_Result_Z4S12C1 = 364,
  efunc_gen_Decompilem_Result_Z4S13C1 = 365,
  efunc_gen_Decompilem_Result_Z4S13C2 = 366,
  efunc_gen_Decompilem_Patternm_Hole_Z5 = 367,
  efunc_gen_Decompilem_Result_Z7 = 368,
  efunc_gen_Decompilem_Result_Z5S10C1 = 369,
  efunc_gen_Decompilem_Result_Z5S11C1 = 370,
  efunc_gen_Decompilem_Result_Z5S11C2 = 371,
  efunc_gen_Decompilem_Result_Z5S12C1 = 372,
  efunc_gen_Decompilem_Result_Z5S13C1 = 373,
  efunc_gen_Decompilem_Result_Z5S13C2 = 374,
  efunc_gen_Decompilem_Result_Z6S10C1 = 375,
  efunc_gen_Decompilem_Result_Z6S11C1 = 376,
  efunc_gen_Decompilem_Result_Z6S11C2 = 377,
  efunc_gen_Decompilem_Result_Z6S12C1 = 378,
  efunc_gen_Decompilem_Result_Z6S13C1 = 379,
  efunc_gen_Decompilem_Result_Z6S13C2 = 380,
  efunc_gen_Decompilem_Patternm_Hole_S11A1Z3 = 381,
  efunc_gen_Decompilem_Patternm_Hole_S12A1Z3 = 382,
  efunc_gen_Decompilem_Patternm_Hole_S18A1Z3 = 383,
  efunc_gen_Decompilem_Patternm_Hole_S19A1Z5 = 384,
  efunc_gen_Decompilem_Patternm_Hole_S20A1Z5 = 385,
  efunc_gen_Decompilem_Patternm_Hole_S21A1Z3 = 386,
  efunc_gen_Decompilem_Patternm_Hole_S22A1Z3 = 387,
  efunc_gen_Decompilem_Patternm_Hole_S25A1Z3 = 388,
  efunc_gen_Decompilem_Patternm_Hole_S26A1Z3 = 389,
  efunc_gen_Decompilem_Patternm_Hole_S27A1Z3 = 390,
  efunc_gen_Decompilem_Result_Z7S10C1 = 391,
  efunc_gen_Decompilem_Result_Z7S11C1 = 392,
  efunc_gen_Decompilem_Result_Z7S11C2 = 393,
  efunc_gen_Decompilem_Result_Z7S12C1 = 394,
  efunc_gen_Decompilem_Result_Z7S13C1 = 395,
  efunc_gen_Decompilem_Result_Z7S13C2 = 396,
  efunc_gen_Decompilem_Patternm_Hole_S19A2Z3 = 397,
  efunc_gen_Decompilem_Patternm_Hole_S20A2Z3 = 398,
};


enum ident {
  ident_ = 0,
  ident_regular = 1,
  ident_Stopd_d_ = 2,
  ident_Impd_d_ = 3,
  ident_int4fabu_1 = 4,
  ident_Ok = 5,
  ident_CSYM = 6,
  ident_CSYMR = 7,
  ident_NCS = 8,
  ident_True = 9,
  ident_E = 10,
  ident_L = 11,
  ident_False = 12,
  ident_LABEL = 13,
  ident_Local = 14,
  ident_Entry = 15,
  ident_Fail = 16,
  ident_ACT1 = 17,
  ident_SYMS = 18,
  ident_SYMSR = 19,
  ident_TEXT = 20,
  ident_ACTu_EXTRN = 21,
  ident_BL = 22,
  ident_BLR = 23,
  ident_BR = 24,
  ident_CL = 25,
  ident_SYM = 26,
  ident_SYMR = 27,
  ident_EMP = 28,
  ident_MULE = 29,
  ident_MULS = 30,
  ident_PLEN = 31,
  ident_PLENS = 32,
  ident_PLENP = 33,
  ident_PS = 34,
  ident_PSR = 35,
  ident_OEXP = 36,
  ident_OEXPR = 37,
  ident_OVSYM = 38,
  ident_OVSYMR = 39,
  ident_TERM = 40,
  ident_TERMR = 41,
  ident_RDY = 42,
  ident_SETB = 43,
  ident_LEN = 44,
  ident_LENS = 45,
  ident_LENP = 46,
  ident_NS = 47,
  ident_TPLE = 48,
  ident_TPLS = 49,
  ident_TRAN = 50,
  ident_VSYM = 51,
  ident_VSYMR = 52,
  ident_OUTEST = 53,
  ident_ECOND = 54,
  ident_POPVF = 55,
  ident_PUSHVF = 56,
  ident_STLEN = 57,
  ident_NSYM = 58,
  ident_NSYMR = 59,
  ident_NNS = 60,
  ident_BUILTu_IN = 61,
  ident_BUILTu_IN1 = 62,
  ident_RawBytes = 63,
  ident_C = 64,
  ident_t = 65,
  ident_e = 66,
  ident_LB = 67,
  ident_RB = 68,
  ident_Hole = 69,
  ident_W = 70,
  ident_N = 71,
  ident_s = 72,
  ident_Restorem_Hole = 73,
  ident_Restorem_NoHole = 74,
  ident_StartBlock = 75,
  ident_EndOfFunction = 76,
  ident_Pattern = 77,
  ident_StartCondition = 78,
  ident_Result = 79,
  ident_EndCondition = 80,
  ident_NextSentence = 81,
  ident_RK = 82,
  ident_Mu = 83,
  ident_Up = 84,
  ident_Evm_met = 85,
  ident_Residue = 86,
  ident_u_u_Metau_Residue = 87,
  ident_Apply = 88,
  ident_Map = 89,
  ident_Reduce = 90,
  ident_Fetch = 91,
  ident_MapAccum = 92,
  ident_DoMapAccum = 93,
  ident_UnBracket = 94,
  ident_DelAccumulator = 95,
  ident_Inc = 96,
  ident_Dec = 97,
  ident_Pipe = 98,
  ident_Go = 99,
  ident_Main = 100,
  ident_ProcessFile = 101,
  ident_CommentLine = 102,
  ident_CleanupBuiltins = 103,
  ident_CleanupBuiltinsm_Aux = 104,
  ident_DecodeStructure = 105,
  ident_ReadAsciiz = 106,
  ident_ReadDWord = 107,
  ident_MakeDWord = 108,
  ident_ReadEntries = 109,
  ident_ReadExterns = 110,
  ident_ReadWords = 111,
  ident_ReadEntryPoints = 112,
  ident_Disassemble = 113,
  ident_ResolveWords = 114,
  ident_SplitByFunctions = 115,
  ident_DeclareCommand = 116,
  ident_MakeFunctionTable = 117,
  ident_AddFunctionToTable = 118,
  ident_IncName = 119,
  ident_IsObfuscated = 120,
  ident_IsObfuscatedm_Tail = 121,
  ident_CheckupFunctionStarts = 122,
  ident_CheckupEntries = 123,
  ident_ResolveFunctions = 124,
  ident_ResolveFunctionsm_Body = 125,
  ident_DecodeCommands = 126,
  ident_Len = 127,
  ident_DEBUG = 128,
  ident_AllString = 129,
  ident_DecompileFunction = 130,
  ident_Decompilem_Patternm_Hole = 131,
  ident_Rev = 132,
  ident_Decompilem_Patternm_NoHole = 133,
  ident_Decompilem_Result = 134,
  ident_CollectSegments = 135,
  ident_DoCollectSegments = 136,
  ident_FormatExpr = 137,
  ident_LIMIT = 138,
  ident_DoFormatExpr = 139,
  ident_FormatWord = 140,
  ident_FormatWordm_Ident = 141,
  ident_EscapeChars = 142,
  ident_EscapeChar = 143,
  ident_EscapeCharm_Hex = 144,
  ident_Hex = 145,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_Go(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Go/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Main/4 HalfReuse: </1 } & ArgList/5 >/6 >/7 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_ArgList]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Go("Go", 0U, 0U, func_Go);


static refalrts::FnResult func_Main(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Main/4 (/7 e.ProgName/5 )/8 e.Sources/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ProgName as range 5
  // closed e.Sources as range 2
  //DEBUG: e.ProgName: 5
  //DEBUG: e.Sources: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Main/4 (/7 e.ProgName/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Map@1/8 AsIs: e.Sources/2 AsIs: >/1 ]] }
  refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Main("Main", COOKIE1_, COOKIE2_, func_Main);


static refalrts::FnResult func_gen_ProcessFile_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & ProcessFile=5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ProcessFile=5/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & ProcessFile=5/4 (/7 e.2/9 '.'/16 'r'/15 's'/14 'l'/13 )/8 e.Lines/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_right( 'l', context[9], context[10] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_right( 's', context[9], context[10] );
    if( ! context[14] )
      continue;
    context[15] = refalrts::char_right( 'r', context[9], context[10] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_right( '.', context[9], context[10] );
    if( ! context[16] )
      continue;
    // closed e.2 as range 9
    // closed e.Lines as range 11
    //DEBUG: e.2: 9
    //DEBUG: e.Lines: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prout/4 HalfReuse: 'D'/7 }"ecompiled \""/17 e.2/9/19".rsl\" to \""/21 Tile{ AsIs: e.2/9 }"-decompiled.ref\""/23 >/25 </26 & SaveFile/27 (/28 e.2/9/29"-decompiled"/31 Tile{ AsIs: '.'/16 AsIs: 'r'/15 Reuse: 'e'/14 Reuse: 'f'/13 AsIs: )/8 AsIs: e.Lines/11 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[17], context[18], "ecompiled \"", 11);
    refalrts::copy_evar(vm, context[19], context[20], context[9], context[10]);
    refalrts::alloc_chars(vm, context[21], context[22], ".rsl\" to \"", 10);
    refalrts::alloc_chars(vm, context[23], context[24], "-decompiled.ref\"", 16);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_SaveFile]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::copy_evar(vm, context[29], context[30], context[9], context[10]);
    refalrts::alloc_chars(vm, context[31], context[32], "-decompiled", 11);
    refalrts::update_name(context[4], functions[efunc_Prout]);
    refalrts::reinit_char(context[7], 'D');
    refalrts::update_char(context[14], 'e');
    refalrts::update_char(context[13], 'f');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[28], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    res = refalrts::splice_evar( res, context[23], context[32] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[17], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ProcessFile=5/4 (/7 e.InputRSLFile/5 )/8 e.Lines/2 >/1
  // closed e.InputRSLFile as range 5
  // closed e.Lines as range 2
  //DEBUG: e.InputRSLFile: 5
  //DEBUG: e.Lines: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Prout/10"Decompiled \""/11 e.InputRSLFile/5/13"\" to \""/15 e.InputRSLFile/5/17".decompiled.ref\""/19 >/21 Tile{ AsIs: </0 Reuse: & SaveFile/4 AsIs: (/7 AsIs: e.InputRSLFile/5 HalfReuse: '.'/8 }"decompiled.ref"/22 )/24 Tile{ AsIs: e.Lines/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Prout]);
  refalrts::alloc_chars(vm, context[11], context[12], "Decompiled \"", 12);
  refalrts::copy_evar(vm, context[13], context[14], context[5], context[6]);
  refalrts::alloc_chars(vm, context[15], context[16], "\" to \"", 6);
  refalrts::copy_evar(vm, context[17], context[18], context[5], context[6]);
  refalrts::alloc_chars(vm, context[19], context[20], ".decompiled.ref\"", 16);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::alloc_chars(vm, context[22], context[23], "decompiled.ref", 14);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_SaveFile]);
  refalrts::reinit_char(context[8], '.');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[24] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[24] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A5("ProcessFile=5", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A5);


static refalrts::FnResult func_gen_ProcessFile_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 74 elems
  refalrts::Iter context[74];
  refalrts::zeros( context, 74 );
  // </0 & ProcessFile=4/4 (/7 e.InputRSLFile/5 )/8 (/11 e.ModuleName/9 )/12 (/15 e.Externs/13 )/16 (/19 e.ASMFunctions/17 )/20 e.RefalFunctions/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.InputRSLFile as range 5
  // closed e.ModuleName as range 9
  // closed e.Externs as range 13
  // closed e.ASMFunctions as range 17
  // closed e.RefalFunctions as range 2
  //DEBUG: e.InputRSLFile: 5
  //DEBUG: e.ModuleName: 9
  //DEBUG: e.Externs: 13
  //DEBUG: e.ASMFunctions: 17
  //DEBUG: e.RefalFunctions: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=5/4 AsIs: (/7 AsIs: e.InputRSLFile/5 AsIs: )/8 AsIs: (/11 }"* Module: "/21 </23 & FormatWord:1/24 </25 & Type/26 Tile{ AsIs: e.ModuleName/9 } >/27 >/28 )/29 (/30 )/31 </32 & Map@4/33 </34 & Rev/35 </36 & CleanupBuiltins-Aux/37 </38 & Map@3/39 </40 & ListOfBuiltin/41 >/42 (/43 0/44 # /45 # regular/46 )/47 (/48 0/49 # Stop$$$$/50 # regular/51 )/52 (/53 0/54 # Imp$$$$/55 # regular/56 )/57 (/58 0/59 # int4fab_1/60 # regular/61 )/62 Tile{ HalfReuse: >/12 AsIs: (/15 AsIs: e.Externs/13 AsIs: )/16 HalfReuse: >/19 } >/63 >/64 (/65 )/66 </67 Tile{ HalfReuse: & Map@5/20 AsIs: e.RefalFunctions/2 AsIs: >/1 } (/68 )/69 </70 & Map@6/71 Tile{ AsIs: e.ASMFunctions/17 } >/72 >/73 Tile{ ]] }
  refalrts::alloc_chars(vm, context[21], context[22], "* Module: ", 10);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_FormatWord_B1]);
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Type]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_name(vm, context[33], functions[efunc_gen_Map_Z4]);
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_Rev]);
  refalrts::alloc_open_call(vm, context[36]);
  refalrts::alloc_name(vm, context[37], functions[efunc_CleanupBuiltinsm_Aux]);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_name(vm, context[39], functions[efunc_gen_Map_Z3]);
  refalrts::alloc_open_call(vm, context[40]);
  refalrts::alloc_name(vm, context[41], functions[efunc_ListOfBuiltin]);
  refalrts::alloc_close_call(vm, context[42]);
  refalrts::alloc_open_bracket(vm, context[43]);
  refalrts::alloc_number(vm, context[44], 0UL);
  refalrts::alloc_ident(vm, context[45], identifiers[ident_]);
  refalrts::alloc_ident(vm, context[46], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[47]);
  refalrts::alloc_open_bracket(vm, context[48]);
  refalrts::alloc_number(vm, context[49], 0UL);
  refalrts::alloc_ident(vm, context[50], identifiers[ident_Stopd_d_]);
  refalrts::alloc_ident(vm, context[51], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[52]);
  refalrts::alloc_open_bracket(vm, context[53]);
  refalrts::alloc_number(vm, context[54], 0UL);
  refalrts::alloc_ident(vm, context[55], identifiers[ident_Impd_d_]);
  refalrts::alloc_ident(vm, context[56], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[57]);
  refalrts::alloc_open_bracket(vm, context[58]);
  refalrts::alloc_number(vm, context[59], 0UL);
  refalrts::alloc_ident(vm, context[60], identifiers[ident_int4fabu_1]);
  refalrts::alloc_ident(vm, context[61], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[62]);
  refalrts::alloc_close_call(vm, context[63]);
  refalrts::alloc_close_call(vm, context[64]);
  refalrts::alloc_open_bracket(vm, context[65]);
  refalrts::alloc_close_bracket(vm, context[66]);
  refalrts::alloc_open_call(vm, context[67]);
  refalrts::alloc_open_bracket(vm, context[68]);
  refalrts::alloc_close_bracket(vm, context[69]);
  refalrts::alloc_open_call(vm, context[70]);
  refalrts::alloc_name(vm, context[71], functions[efunc_gen_Map_Z6]);
  refalrts::alloc_close_call(vm, context[72]);
  refalrts::alloc_close_call(vm, context[73]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A5]);
  refalrts::reinit_close_call(context[12]);
  refalrts::reinit_close_call(context[19]);
  refalrts::reinit_name(context[20], functions[efunc_gen_Map_Z5]);
  refalrts::push_stack( vm, context[73] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[72] );
  refalrts::push_stack( vm, context[70] );
  refalrts::link_brackets( context[68], context[69] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[67] );
  refalrts::link_brackets( context[65], context[66] );
  refalrts::push_stack( vm, context[64] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[63] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[36] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[38] );
  refalrts::link_brackets( context[58], context[62] );
  refalrts::link_brackets( context[53], context[57] );
  refalrts::link_brackets( context[48], context[52] );
  refalrts::link_brackets( context[43], context[47] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[40] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[11], context[29] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[72], context[73] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[68], context[71] );
  res = refalrts::splice_evar( res, context[20], context[1] );
  res = refalrts::splice_evar( res, context[63], context[67] );
  res = refalrts::splice_evar( res, context[12], context[19] );
  res = refalrts::splice_evar( res, context[27], context[62] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[21], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A4("ProcessFile=4", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A4);


static refalrts::FnResult func_gen_ProcessFile_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & ProcessFile=3/4 (/7 e.InputRSLFile/5 )/8 (/11 e.ModuleName/9 )/12 (/15 e.Externs/13 )/16 e.ASMFunctions/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.InputRSLFile as range 5
  // closed e.ModuleName as range 9
  // closed e.Externs as range 13
  // closed e.ASMFunctions as range 2
  //DEBUG: e.InputRSLFile: 5
  //DEBUG: e.ModuleName: 9
  //DEBUG: e.Externs: 13
  //DEBUG: e.ASMFunctions: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=4/4 AsIs: (/7 AsIs: e.InputRSLFile/5 AsIs: )/8 AsIs: (/11 AsIs: e.ModuleName/9 AsIs: )/12 AsIs: (/15 AsIs: e.Externs/13 AsIs: )/16 } (/17 e.ASMFunctions/2/18 )/20 </21 & Map@7/22 Tile{ AsIs: e.ASMFunctions/2 } >/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::copy_evar(vm, context[18], context[19], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z7]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A3("ProcessFile=3", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A3);


static refalrts::FnResult func_gen_ProcessFile_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & ProcessFile=2/4 (/7 e.InputRSLFile/5 )/8 (/11 e.ModuleName/9 )/12 (/15 s.BytecodeSize/33 s.FunctionStarts/34 )/16 (/19 e.Entries/17 )/20 (/23 e.Externs/21 )/24 (/27 e.Words/25 )/28 (/31 e.FunctionStarts/29 )/32 e.Bytecode/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.InputRSLFile as range 5
  // closed e.ModuleName as range 9
  // closed e.Entries as range 17
  // closed e.Externs as range 21
  // closed e.Words as range 25
  // closed e.FunctionStarts as range 29
  // closed e.Bytecode as range 2
  if( ! refalrts::svar_left( context[33], context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[34], context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.InputRSLFile: 5
  //DEBUG: e.ModuleName: 9
  //DEBUG: e.Entries: 17
  //DEBUG: e.Externs: 21
  //DEBUG: e.Words: 25
  //DEBUG: e.FunctionStarts: 29
  //DEBUG: e.Bytecode: 2
  //DEBUG: s.BytecodeSize: 33
  //DEBUG: s.FunctionStarts: 34

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.FunctionStarts/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=3/4 AsIs: (/7 AsIs: e.InputRSLFile/5 AsIs: )/8 AsIs: (/11 AsIs: e.ModuleName/9 AsIs: )/12 AsIs: (/15 } e.Externs/21/35 )/37 </38 & Disassemble=1/39 (/40 Tile{ AsIs: e.Entries/17 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.FunctionStarts/29 } Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.Externs/21 AsIs: )/24 AsIs: (/27 AsIs: e.Words/25 AsIs: )/28 HalfReuse: </31 } & Disassemble=1:1/41 Tile{ AsIs: s.BytecodeSize/33 } </42 Tile{ HalfReuse: & DecodeCommands@1/32 AsIs: e.Bytecode/2 AsIs: >/1 } >/43 >/44 >/45 Tile{ ]] }
  refalrts::copy_evar(vm, context[35], context[36], context[21], context[22]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_name(vm, context[39], functions[efunc_gen_Disassemble_A1]);
  refalrts::alloc_open_bracket(vm, context[40]);
  refalrts::alloc_name(vm, context[41], functions[efunc_gen_Disassemble_A1B1]);
  refalrts::alloc_open_call(vm, context[42]);
  refalrts::alloc_close_call(vm, context[43]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::alloc_close_call(vm, context[45]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A3]);
  refalrts::reinit_open_call(context[31]);
  refalrts::reinit_name(context[32], functions[efunc_gen_DecodeCommands_Z1]);
  refalrts::push_stack( vm, context[45] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[43] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[42] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[40], context[16] );
  refalrts::link_brackets( context[15], context[37] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[43], context[45] );
  res = refalrts::splice_evar( res, context[32], context[1] );
  res = refalrts::splice_elem( res, context[42] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_elem( res, context[41] );
  res = refalrts::splice_evar( res, context[20], context[31] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[37], context[40] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  refalrts::splice_to_freelist_open( vm, context[15], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A2("ProcessFile=2", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A2);


static refalrts::FnResult func_gen_ProcessFile_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & ProcessFile=1/4 (/7 e.InputRSLFile/5 )/8 e.Bytes/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.InputRSLFile as range 5
  // closed e.Bytes as range 2
  //DEBUG: e.InputRSLFile: 5
  //DEBUG: e.Bytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=2/4 AsIs: (/7 AsIs: e.InputRSLFile/5 AsIs: )/8 } </9 & DecodeStructure=1/10 </11 & ReadAsciiz/12 Tile{ AsIs: e.Bytes/2 } >/13 >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DecodeStructure_A1]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_ReadAsciiz]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ProcessFile_A1("ProcessFile=1", COOKIE1_, COOKIE2_, func_gen_ProcessFile_A1);


static refalrts::FnResult func_ProcessFile(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & ProcessFile/4 (/7 e.InputRSLFile/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.InputRSLFile as range 5
  //DEBUG: e.InputRSLFile: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=1/4 AsIs: (/7 AsIs: e.InputRSLFile/5 AsIs: )/8 HalfReuse: </1 } & LoadBytes/9 e.InputRSLFile/5/10 >/12 >/13 Tile{ ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_LoadBytes]);
  refalrts::copy_evar(vm, context[10], context[11], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ProcessFile("ProcessFile", COOKIE1_, COOKIE2_, func_ProcessFile);


static refalrts::FnResult func_CommentLine(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & CommentLine/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CommentLine/4 (/7 e.new1/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  do {
    // </0 & CommentLine/4 (/7 e.Line-B/11 '\n'/15 e.Line-E/13 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = 0;
    context[12] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[13] = context[9];
      context[14] = context[10];
      context[15] = refalrts::char_left( '\n', context[13], context[14] );
      if( ! context[15] )
        continue;
      // closed e.Line-E as range 13
      //DEBUG: e.Line-B: 11
      //DEBUG: e.Line-E: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CommentLine/4 AsIs: (/7 AsIs: e.Line-B/11 Reuse: '\\'/15 } 'n'/16 Tile{ AsIs: e.Line-E/13 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[16], 'n');
      refalrts::update_char(context[15], '\\');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[11], context[12], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CommentLine/4 (/7 e.Line-B/11 '\r'/15 e.Line-E/13 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = 0;
    context[12] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[13] = context[9];
      context[14] = context[10];
      context[15] = refalrts::char_left( '\r', context[13], context[14] );
      if( ! context[15] )
        continue;
      // closed e.Line-E as range 13
      //DEBUG: e.Line-B: 11
      //DEBUG: e.Line-E: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CommentLine/4 AsIs: (/7 AsIs: e.Line-B/11 Reuse: '\\'/15 } 'r'/16 Tile{ AsIs: e.Line-E/13 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[16], 'r');
      refalrts::update_char(context[15], '\\');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[11], context[12], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CommentLine/4 (/7 e.Line/5 )/8 >/1
  // closed e.Line as range 5
  //DEBUG: e.Line: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: '*'/7 AsIs: e.Line/5 AsIs: )/8 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_char(context[7], '*');
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CommentLine("CommentLine", COOKIE1_, COOKIE2_, func_CommentLine);


static refalrts::FnResult func_CleanupBuiltins(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & CleanupBuiltins/4 e.Externs/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Externs as range 2
  //DEBUG: e.Externs: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CleanupBuiltins-Aux/4 } </5 & Map@3/6 </7 & ListOfBuiltin/8 >/9 (/10 0/11 # /12 # regular/13 )/14 (/15 0/16 # Stop$$$$/17 # regular/18 )/19 (/20 0/21 # Imp$$$$/22 # regular/23 )/24 (/25 0/26 # int4fab_1/27 # regular/28 )/29 >/30 (/31 Tile{ AsIs: e.Externs/2 } )/32 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z3]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_ListOfBuiltin]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_number(vm, context[11], 0UL);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_number(vm, context[16], 0UL);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Stopd_d_]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_number(vm, context[21], 0UL);
  refalrts::alloc_ident(vm, context[22], identifiers[ident_Impd_d_]);
  refalrts::alloc_ident(vm, context[23], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_number(vm, context[26], 0UL);
  refalrts::alloc_ident(vm, context[27], identifiers[ident_int4fabu_1]);
  refalrts::alloc_ident(vm, context[28], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::update_name(context[4], functions[efunc_CleanupBuiltinsm_Aux]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[25], context[29] );
  refalrts::link_brackets( context[20], context[24] );
  refalrts::link_brackets( context[15], context[19] );
  refalrts::link_brackets( context[10], context[14] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[31] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupBuiltins("CleanupBuiltins", COOKIE1_, COOKIE2_, func_CleanupBuiltins);


static refalrts::FnResult func_gen_CleanupBuiltinsm_Aux_S1C1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & CleanupBuiltins-Aux$1?1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CleanupBuiltins-Aux$1?1:1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & CleanupBuiltins-Aux$1?1:1/4 (/7 e.Name/9 )/8 e.Builtins-B/13 (/19 e.Name/21 )/20 e.Builtins-E/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Name as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      if( ! refalrts::repeated_evar_left( vm, context[21], context[22], context[9], context[10], context[17], context[18] ) )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.Builtins-E as range 15
      //DEBUG: e.Name: 9
      //DEBUG: e.Builtins-B: 13
      //DEBUG: e.Builtins-E: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CleanupBuiltins-Aux$1?1:1/4 (/7 e.Name/9 )/8 e.Builtins-B/13 (/19 e.Name/21 )/20 e.Builtins-E/15 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CleanupBuiltins-Aux$1?1:1/4 (/7 e.Name/5 )/8 e.Builtins$a/2 >/1
  // closed e.Name as range 5
  // closed e.Builtins$a as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.Builtins$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CleanupBuiltins-Aux$1?1:1/4 {REMOVED TILE} e.Builtins$a/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CleanupBuiltinsm_Aux_S1C1B1("CleanupBuiltins-Aux$1?1:1", COOKIE1_, COOKIE2_, func_gen_CleanupBuiltinsm_Aux_S1C1B1);


static refalrts::FnResult func_CleanupBuiltinsm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & CleanupBuiltins-Aux/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CleanupBuiltins-Aux/4 e.new1/2 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  // closed e.new2 as range 5
  do {
    // </0 & CleanupBuiltins-Aux/4 e.Builtins/9 (/7 (/15 e.Name/13 )/16 e.Externs/11 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.Builtins as range 9
    // closed e.Name as range 13
    // closed e.Externs as range 11
    //DEBUG: e.Builtins: 9
    //DEBUG: e.Name: 13
    //DEBUG: e.Externs: 11
    //9: e.Builtins
    //11: e.Externs
    //13: e.Name
    //23: e.Name
    //26: e.Builtins

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_CleanupBuiltinsm_Aux_S1C1]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_CleanupBuiltinsm_Aux_S1C1B1]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[13], context[14]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::copy_evar(vm, context[26], context[27], context[9], context[10]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[20] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::link_brackets( context[22], context[25] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[17] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </17 & CleanupBuiltins-Aux$1?1/21 e.MaybeName/19 >/18
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::call_left( context[19], context[20], context[17], context[18] );
      // closed e.MaybeName as range 19
      //DEBUG: e.Builtins: 9
      //DEBUG: e.Name: 13
      //DEBUG: e.Externs: 11
      //DEBUG: e.MaybeName: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/15 e.Name/13 )/16 {REMOVED TILE} )/8 </17 & CleanupBuiltins-Aux$1?1/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.MaybeName/19 } Tile{ AsIs: </0 AsIs: & CleanupBuiltins-Aux/4 AsIs: e.Builtins/9 AsIs: (/7 } Tile{ AsIs: e.Externs/11 } Tile{ HalfReuse: )/18 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[17], context[18]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CleanupBuiltins-Aux/4 e.Builtins/2 (/7 )/8 >/1
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Builtins as range 2
  //DEBUG: e.Builtins: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CleanupBuiltins-Aux/4 e.Builtins/2 (/7 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupBuiltinsm_Aux("CleanupBuiltins-Aux", COOKIE1_, COOKIE2_, func_CleanupBuiltinsm_Aux);


static refalrts::FnResult func_gen_DecodeStructure_A10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DecodeStructure=10/4 (/7 e.ModuleName/5 )/8 s.BytecodeSize/13 s.FunctionStarts/14 (/17 e.Entries/15 )/18 (/21 e.Externs/19 )/22 (/25 e.Words/23 )/26 e.FunctionStarts/2 (/11 e.Bytes$ao/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ModuleName as range 5
  // closed e.Bytes$ao as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.Entries as range 15
  // closed e.Externs as range 19
  // closed e.Words as range 23
  // closed e.FunctionStarts as range 2
  //DEBUG: e.ModuleName: 5
  //DEBUG: e.Bytes$ao: 9
  //DEBUG: s.BytecodeSize: 13
  //DEBUG: s.FunctionStarts: 14
  //DEBUG: e.Entries: 15
  //DEBUG: e.Externs: 19
  //DEBUG: e.Words: 23
  //DEBUG: e.FunctionStarts: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.ModuleName/5 AsIs: )/8 } Tile{ HalfReuse: (/4 } Tile{ AsIs: s.BytecodeSize/13 AsIs: s.FunctionStarts/14 } Tile{ AsIs: )/12 } Tile{ AsIs: (/17 AsIs: e.Entries/15 AsIs: )/18 AsIs: (/21 AsIs: e.Externs/19 AsIs: )/22 AsIs: (/25 AsIs: e.Words/23 AsIs: )/26 } Tile{ AsIs: (/11 } Tile{ AsIs: e.FunctionStarts/2 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Bytes$ao/9 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[11], context[1] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[17], context[26] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A10("DecodeStructure=10", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A10);


static refalrts::FnResult func_gen_DecodeStructure_A9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DecodeStructure=9/4 (/7 e.ModuleName/5 )/8 s.BytecodeSize/13 s.FunctionStarts/14 (/17 e.Entries/15 )/18 (/21 e.Externs/19 )/22 e.Words/2 (/11 e.Bytes$i/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ModuleName as range 5
  // closed e.Bytes$i as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Entries as range 15
  // closed e.Externs as range 19
  // closed e.Words as range 2
  //DEBUG: e.ModuleName: 5
  //DEBUG: e.Bytes$i: 9
  //DEBUG: s.BytecodeSize: 13
  //DEBUG: s.FunctionStarts: 14
  //DEBUG: e.Entries: 15
  //DEBUG: e.Externs: 19
  //DEBUG: e.Words: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=10/4 AsIs: (/7 AsIs: e.ModuleName/5 AsIs: )/8 AsIs: s.BytecodeSize/13 AsIs: s.FunctionStarts/14 AsIs: (/17 AsIs: e.Entries/15 AsIs: )/18 AsIs: (/21 AsIs: e.Externs/19 AsIs: )/22 } (/23 Tile{ AsIs: e.Words/2 } )/24 </25 & ReadEntryPoints/26 Tile{ HalfReuse: s.FunctionStarts14 /11 AsIs: e.Bytes$i/9 HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_ReadEntryPoints]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A10]);
  refalrts::reinit_svar( context[11], context[14] );
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[24], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A9("DecodeStructure=9", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A9);


static refalrts::FnResult func_gen_DecodeStructure_A8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DecodeStructure=8/4 (/7 e.ModuleName/5 )/8 s.BytecodeSize/13 s.FunctionStarts/14 (/17 e.Entries/15 )/18 s.Words/19 e.Externs/2 (/11 e.Bytes$h/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ModuleName as range 5
  // closed e.Bytes$h as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.Entries as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Externs as range 2
  //DEBUG: e.ModuleName: 5
  //DEBUG: e.Bytes$h: 9
  //DEBUG: s.BytecodeSize: 13
  //DEBUG: s.FunctionStarts: 14
  //DEBUG: e.Entries: 15
  //DEBUG: s.Words: 19
  //DEBUG: e.Externs: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Words/19 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=9/4 AsIs: (/7 AsIs: e.ModuleName/5 AsIs: )/8 AsIs: s.BytecodeSize/13 AsIs: s.FunctionStarts/14 AsIs: (/17 AsIs: e.Entries/15 AsIs: )/18 } (/20 Tile{ AsIs: e.Externs/2 } )/21 </22 & ReadWords/23 Tile{ HalfReuse: s.Words19 /11 AsIs: e.Bytes$h/9 HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_ReadWords]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A9]);
  refalrts::reinit_svar( context[11], context[19] );
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[21], context[23] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  refalrts::splice_to_freelist_open( vm, context[18], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A8("DecodeStructure=8", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A8);


static refalrts::FnResult func_gen_DecodeStructure_A7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DecodeStructure=7/4 (/7 e.ModuleName/5 )/8 s.BytecodeSize/13 s.FunctionStarts/14 s.Words/15 s.Externs/16 e.Entries/2 (/11 e.Bytes$g/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ModuleName as range 5
  // closed e.Bytes$g as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Entries as range 2
  //DEBUG: e.ModuleName: 5
  //DEBUG: e.Bytes$g: 9
  //DEBUG: s.BytecodeSize: 13
  //DEBUG: s.FunctionStarts: 14
  //DEBUG: s.Words: 15
  //DEBUG: s.Externs: 16
  //DEBUG: e.Entries: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.Externs/16 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=8/4 AsIs: (/7 AsIs: e.ModuleName/5 AsIs: )/8 AsIs: s.BytecodeSize/13 AsIs: s.FunctionStarts/14 } (/17 Tile{ AsIs: e.Entries/2 } )/18 Tile{ AsIs: s.Words/15 } </19 & ReadExterns/20 Tile{ HalfReuse: s.Externs16 /11 AsIs: e.Bytes$g/9 HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_ReadExterns]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A8]);
  refalrts::reinit_svar( context[11], context[16] );
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A7("DecodeStructure=7", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A7);


static refalrts::FnResult func_gen_DecodeStructure_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DecodeStructure=6/4 (/7 e.ModuleName/5 )/8 s.BytecodeSize/9 s.Words/10 s.Externs/11 s.EntryCount/12 s.FunctionStarts/13 e.Bytes$f/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ModuleName as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes$f as range 2
  //DEBUG: e.ModuleName: 5
  //DEBUG: s.BytecodeSize: 9
  //DEBUG: s.Words: 10
  //DEBUG: s.Externs: 11
  //DEBUG: s.EntryCount: 12
  //DEBUG: s.FunctionStarts: 13
  //DEBUG: e.Bytes$f: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=7/4 AsIs: (/7 AsIs: e.ModuleName/5 AsIs: )/8 AsIs: s.BytecodeSize/9 } Tile{ AsIs: s.FunctionStarts/13 } Tile{ AsIs: s.Words/10 AsIs: s.Externs/11 } </14 & ReadEntries/15 Tile{ AsIs: s.EntryCount/12 } Tile{ AsIs: e.Bytes$f/2 } >/16 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_ReadEntries]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A6("DecodeStructure=6", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A6);


static refalrts::FnResult func_gen_DecodeStructure_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DecodeStructure=5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecodeStructure=5/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 s.new5/12 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new6 as range 2
  do {
    // </0 & DecodeStructure=5/4 (/7 e.ModuleName/13 )/8 s.BytecodeSize/9 s.Externs/10 s.EntryCount/11 s.Words/12 s.1/17 s.2/18 s.3/19 s.4/20 e.2/15 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.ModuleName as range 13
    if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[15], context[16] ) )
      continue;
    // closed e.2 as range 15
    //DEBUG: s.BytecodeSize: 9
    //DEBUG: s.Externs: 10
    //DEBUG: s.EntryCount: 11
    //DEBUG: s.Words: 12
    //DEBUG: e.ModuleName: 13
    //DEBUG: s.1: 17
    //DEBUG: s.2: 18
    //DEBUG: s.3: 19
    //DEBUG: s.4: 20
    //DEBUG: e.2: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=6/4 AsIs: (/7 AsIs: e.ModuleName/13 AsIs: )/8 AsIs: s.BytecodeSize/9 } Tile{ AsIs: s.Words/12 } Tile{ AsIs: s.Externs/10 AsIs: s.EntryCount/11 } </21 & MakeDWord/22 Tile{ AsIs: s.1/17 AsIs: s.2/18 AsIs: s.3/19 AsIs: s.4/20 } >/23 Tile{ AsIs: e.2/15 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_MakeDWord]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeStructure=5/4 (/7 e.ModuleName/5 )/8 s.BytecodeSize/9 s.Externs/10 s.EntryCount/11 s.Words/12 e.Bytes$e/2 >/1
  // closed e.ModuleName as range 5
  // closed e.Bytes$e as range 2
  //DEBUG: s.BytecodeSize: 9
  //DEBUG: s.Externs: 10
  //DEBUG: s.EntryCount: 11
  //DEBUG: s.Words: 12
  //DEBUG: e.ModuleName: 5
  //DEBUG: e.Bytes$e: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=6/4 AsIs: (/7 AsIs: e.ModuleName/5 AsIs: )/8 AsIs: s.BytecodeSize/9 } Tile{ AsIs: s.Words/12 } Tile{ AsIs: s.Externs/10 AsIs: s.EntryCount/11 } </13 & ReadDWord*1/14 Tile{ AsIs: e.Bytes$e/2 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_ReadDWord_D1]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A5("DecodeStructure=5", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A5);


static refalrts::FnResult func_gen_DecodeStructure_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & DecodeStructure=4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecodeStructure=4/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & DecodeStructure=4/4 (/7 e.ModuleName/12 )/8 s.BytecodeSize/9 s.EntryCount/10 s.Externs/11 s.1/16 s.2/17 s.3/18 s.4/19 e.2/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.ModuleName as range 12
    if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[14], context[15] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
      continue;
    if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
      continue;
    // closed e.2 as range 14
    //DEBUG: s.BytecodeSize: 9
    //DEBUG: s.EntryCount: 10
    //DEBUG: s.Externs: 11
    //DEBUG: e.ModuleName: 12
    //DEBUG: s.1: 16
    //DEBUG: s.2: 17
    //DEBUG: s.3: 18
    //DEBUG: s.4: 19
    //DEBUG: e.2: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=5/4 AsIs: (/7 AsIs: e.ModuleName/12 AsIs: )/8 AsIs: s.BytecodeSize/9 } Tile{ AsIs: s.Externs/11 } Tile{ AsIs: s.EntryCount/10 } </20 & MakeDWord/21 Tile{ AsIs: s.1/16 AsIs: s.2/17 AsIs: s.3/18 AsIs: s.4/19 } >/22 Tile{ AsIs: e.2/14 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_MakeDWord]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeStructure=4/4 (/7 e.ModuleName/5 )/8 s.BytecodeSize/9 s.EntryCount/10 s.Externs/11 e.Bytes$d/2 >/1
  // closed e.ModuleName as range 5
  // closed e.Bytes$d as range 2
  //DEBUG: s.BytecodeSize: 9
  //DEBUG: s.EntryCount: 10
  //DEBUG: s.Externs: 11
  //DEBUG: e.ModuleName: 5
  //DEBUG: e.Bytes$d: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=5/4 AsIs: (/7 AsIs: e.ModuleName/5 AsIs: )/8 AsIs: s.BytecodeSize/9 } Tile{ AsIs: s.Externs/11 } Tile{ AsIs: s.EntryCount/10 } </12 & ReadDWord*1/13 Tile{ AsIs: e.Bytes$d/2 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_ReadDWord_D1]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A4("DecodeStructure=4", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A4);


static refalrts::FnResult func_gen_DecodeStructure_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DecodeStructure=3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecodeStructure=3/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & DecodeStructure=3/4 (/7 e.ModuleName/11 )/8 s.BytecodeSize/9 s.EntryCount/10 s.1/15 s.2/16 s.3/17 s.4/18 e.2/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.ModuleName as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
      continue;
    // closed e.2 as range 13
    //DEBUG: s.BytecodeSize: 9
    //DEBUG: s.EntryCount: 10
    //DEBUG: e.ModuleName: 11
    //DEBUG: s.1: 15
    //DEBUG: s.2: 16
    //DEBUG: s.3: 17
    //DEBUG: s.4: 18
    //DEBUG: e.2: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=4/4 AsIs: (/7 AsIs: e.ModuleName/11 AsIs: )/8 AsIs: s.BytecodeSize/9 AsIs: s.EntryCount/10 } </19 & MakeDWord/20 Tile{ AsIs: s.1/15 AsIs: s.2/16 AsIs: s.3/17 AsIs: s.4/18 } >/21 Tile{ AsIs: e.2/13 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_MakeDWord]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeStructure=3/4 (/7 e.ModuleName/5 )/8 s.BytecodeSize/9 s.EntryCount/10 e.Bytes$c/2 >/1
  // closed e.ModuleName as range 5
  // closed e.Bytes$c as range 2
  //DEBUG: s.BytecodeSize: 9
  //DEBUG: s.EntryCount: 10
  //DEBUG: e.ModuleName: 5
  //DEBUG: e.Bytes$c: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=4/4 AsIs: (/7 AsIs: e.ModuleName/5 AsIs: )/8 AsIs: s.BytecodeSize/9 AsIs: s.EntryCount/10 } </11 & ReadDWord*1/12 Tile{ AsIs: e.Bytes$c/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_ReadDWord_D1]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A3("DecodeStructure=3", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A3);


static refalrts::FnResult func_gen_DecodeStructure_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DecodeStructure=2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecodeStructure=2/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & DecodeStructure=2/4 (/7 e.ModuleName/10 )/8 s.BytecodeSize/9 s.1/14 s.2/15 s.3/16 s.4/17 e.2/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.ModuleName as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[12], context[13] ) )
      continue;
    // closed e.2 as range 12
    //DEBUG: s.BytecodeSize: 9
    //DEBUG: e.ModuleName: 10
    //DEBUG: s.1: 14
    //DEBUG: s.2: 15
    //DEBUG: s.3: 16
    //DEBUG: s.4: 17
    //DEBUG: e.2: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=3/4 AsIs: (/7 AsIs: e.ModuleName/10 AsIs: )/8 AsIs: s.BytecodeSize/9 } </18 & MakeDWord/19 Tile{ AsIs: s.1/14 AsIs: s.2/15 AsIs: s.3/16 AsIs: s.4/17 } >/20 Tile{ AsIs: e.2/12 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_MakeDWord]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeStructure=2/4 (/7 e.ModuleName/5 )/8 s.BytecodeSize/9 e.Bytes$b/2 >/1
  // closed e.ModuleName as range 5
  // closed e.Bytes$b as range 2
  //DEBUG: s.BytecodeSize: 9
  //DEBUG: e.ModuleName: 5
  //DEBUG: e.Bytes$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=3/4 AsIs: (/7 AsIs: e.ModuleName/5 AsIs: )/8 AsIs: s.BytecodeSize/9 } </10 & ReadDWord*1/11 Tile{ AsIs: e.Bytes$b/2 } >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_ReadDWord_D1]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A2("DecodeStructure=2", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A2);


static refalrts::FnResult func_gen_DecodeStructure_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DecodeStructure=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecodeStructure=1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DecodeStructure=1/4 (/7 e.ModuleName/9 )/8 s.1/13 s.2/14 s.3/15 s.4/16 e.2/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.ModuleName as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[11], context[12] ) )
      continue;
    // closed e.2 as range 11
    //DEBUG: e.ModuleName: 9
    //DEBUG: s.1: 13
    //DEBUG: s.2: 14
    //DEBUG: s.3: 15
    //DEBUG: s.4: 16
    //DEBUG: e.2: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=2/4 AsIs: (/7 AsIs: e.ModuleName/9 AsIs: )/8 } </17 & MakeDWord/18 Tile{ AsIs: s.1/13 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/19 Tile{ AsIs: e.2/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_MakeDWord]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeStructure=1/4 (/7 e.ModuleName/5 )/8 e.Bytes$a/2 >/1
  // closed e.ModuleName as range 5
  // closed e.Bytes$a as range 2
  //DEBUG: e.ModuleName: 5
  //DEBUG: e.Bytes$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeStructure=2/4 AsIs: (/7 AsIs: e.ModuleName/5 AsIs: )/8 } </9 & ReadDWord*1/10 Tile{ AsIs: e.Bytes$a/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_ReadDWord_D1]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_DecodeStructure_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeStructure_A1("DecodeStructure=1", COOKIE1_, COOKIE2_, func_gen_DecodeStructure_A1);


static refalrts::FnResult func_DecodeStructure(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & DecodeStructure/4 e.Bytes/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Bytes as range 2
  //DEBUG: e.Bytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DecodeStructure=1/6 Tile{ AsIs: </0 Reuse: & ReadAsciiz/4 AsIs: e.Bytes/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DecodeStructure_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ReadAsciiz]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DecodeStructure("DecodeStructure", COOKIE1_, COOKIE2_, func_DecodeStructure);


static refalrts::FnResult func_ReadAsciiz(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & ReadAsciiz/4 e.String/5 0/9 e.Tail/7 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[7] = context[2];
    context[8] = context[3];
    context[9] = refalrts::number_left( 0UL, context[7], context[8] );
    if( ! context[9] )
      continue;
    // closed e.Tail as range 7
    //DEBUG: e.String: 5
    //DEBUG: e.Tail: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/10 Tile{ AsIs: </0 Reuse: & Chr/4 AsIs: e.String/5 HalfReuse: >/9 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Tail/7 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_Chr]);
    refalrts::reinit_close_call(context[9]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[10], context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[5], context[6], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_ReadAsciiz("ReadAsciiz", COOKIE1_, COOKIE2_, func_ReadAsciiz);


static refalrts::FnResult func_ReadDWord(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ReadDWord/4 s.1/5 s.2/6 s.3/7 s.4/8 e.Bytes/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes as range 2
  //DEBUG: s.1: 5
  //DEBUG: s.2: 6
  //DEBUG: s.3: 7
  //DEBUG: s.4: 8
  //DEBUG: e.Bytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeDWord/4 AsIs: s.1/5 AsIs: s.2/6 AsIs: s.3/7 AsIs: s.4/8 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Bytes/2 } Tile{ ]] }
  refalrts::update_name(context[4], functions[efunc_MakeDWord]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ReadDWord("ReadDWord", COOKIE1_, COOKIE2_, func_ReadDWord);


static refalrts::FnResult func_MakeDWord(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & MakeDWord/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MakeDWord/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & MakeDWord/4 s.LastByte/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.LastByte: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & MakeDWord/4 s.LastByte/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.LastByte5 /1 ]] }
    refalrts::reinit_svar( context[1], context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeDWord/4 s.LastByte/5 e.Bytes/2 >/1
  // closed e.Bytes as range 2
  //DEBUG: s.LastByte: 5
  //DEBUG: e.Bytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } </6 & Mul/7 </8 & MakeDWord/9 Tile{ AsIs: e.Bytes/2 } >/10 256/11 >/12 Tile{ AsIs: s.LastByte/5 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_Mul]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_MakeDWord]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_number(vm, context[11], 256UL);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeDWord("MakeDWord", COOKIE1_, COOKIE2_, func_MakeDWord);


static refalrts::FnResult func_ReadEntries(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & ReadEntries/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ReadEntries/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & ReadEntries/4 0/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ReadEntries/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Bytes/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[5]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[5], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReadEntries/4 s.N/5 e.Name/6 0/10 s.1/11 s.2/12 s.3/13 s.4/14 e.Bytes/8 >/1
  context[6] = 0;
  context[7] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[8] = context[2];
    context[9] = context[3];
    context[10] = refalrts::number_left( 0UL, context[8], context[9] );
    if( ! context[10] )
      continue;
    if( ! refalrts::svar_left( context[11], context[8], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[8], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[8], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[8], context[9] ) )
      continue;
    // closed e.Bytes as range 8
    //DEBUG: s.N: 5
    //DEBUG: e.Name: 6
    //DEBUG: s.1: 11
    //DEBUG: s.2: 12
    //DEBUG: s.3: 13
    //DEBUG: s.4: 14
    //DEBUG: e.Bytes: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/15 </16 & Chr/17 Tile{ AsIs: e.Name/6 } >/18 </19 Tile{ HalfReuse: & MakeDWord/10 AsIs: s.1/11 AsIs: s.2/12 AsIs: s.3/13 AsIs: s.4/14 } >/20 )/21 </22 & ReadEntries/23 Tile{ AsIs: </0 Reuse: & Sub/4 AsIs: s.N/5 } 1/24 >/25 Tile{ AsIs: e.Bytes/8 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Chr]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_ReadEntries]);
    refalrts::alloc_number(vm, context[24], 1UL);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::reinit_name(context[10], functions[efunc_MakeDWord]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[10], context[14] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[15], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[6], context[7], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_ReadEntries("ReadEntries", COOKIE1_, COOKIE2_, func_ReadEntries);


static refalrts::FnResult func_ReadExterns(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & ReadExterns/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ReadExterns/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & ReadExterns/4 0/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ReadExterns/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Bytes/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[5]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[5], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReadExterns/4 s.N/5 e.Name/6 0/10 e.Bytes/8 >/1
  context[6] = 0;
  context[7] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[8] = context[2];
    context[9] = context[3];
    context[10] = refalrts::number_left( 0UL, context[8], context[9] );
    if( ! context[10] )
      continue;
    // closed e.Bytes as range 8
    //DEBUG: s.N: 5
    //DEBUG: e.Name: 6
    //DEBUG: e.Bytes: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/11 </12 & Chr/13 Tile{ AsIs: e.Name/6 } >/14 )/15 </16 & ReadExterns/17 Tile{ AsIs: </0 Reuse: & Sub/4 AsIs: s.N/5 } 1/18 Tile{ HalfReuse: >/10 AsIs: e.Bytes/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_Chr]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_ReadExterns]);
    refalrts::alloc_number(vm, context[18], 1UL);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[15] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[6], context[7], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_ReadExterns("ReadExterns", COOKIE1_, COOKIE2_, func_ReadExterns);


static refalrts::FnResult func_ReadWords(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & ReadWords/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ReadWords/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & ReadWords/4 0/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ReadWords/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Bytes/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[5]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[5], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReadWords/4 s.N/5 e.Name/6 0/10 e.Bytes/8 >/1
  context[6] = 0;
  context[7] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[8] = context[2];
    context[9] = context[3];
    context[10] = refalrts::number_left( 0UL, context[8], context[9] );
    if( ! context[10] )
      continue;
    // closed e.Bytes as range 8
    //DEBUG: s.N: 5
    //DEBUG: e.Name: 6
    //DEBUG: e.Bytes: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/11 </12 & Sub/13 s.N/5/14 1/15 >/16 </17 & Chr/18 Tile{ AsIs: e.Name/6 } >/19 )/20 </21 & ReadWords/22 Tile{ AsIs: </0 Reuse: & Sub/4 AsIs: s.N/5 } 1/23 Tile{ HalfReuse: >/10 AsIs: e.Bytes/8 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_Sub]);
    refalrts::copy_stvar(vm, context[14], context[5]);
    refalrts::alloc_number(vm, context[15], 1UL);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Chr]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_ReadWords]);
    refalrts::alloc_number(vm, context[23], 1UL);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[11], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[6], context[7], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_ReadWords("ReadWords", COOKIE1_, COOKIE2_, func_ReadWords);


static refalrts::FnResult func_ReadEntryPoints(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & ReadEntryPoints/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ReadEntryPoints/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & ReadEntryPoints/4 0/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ReadEntryPoints/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/5 AsIs: e.Bytes/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[5]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[5], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReadEntryPoints/4 s.N/5 s.1/6 s.2/7 s.3/8 s.4/9 e.Bytes/2 >/1
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes as range 2
  //DEBUG: s.N: 5
  //DEBUG: s.1: 6
  //DEBUG: s.2: 7
  //DEBUG: s.3: 8
  //DEBUG: s.4: 9
  //DEBUG: e.Bytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeDWord/4 } Tile{ AsIs: s.1/6 AsIs: s.2/7 AsIs: s.3/8 AsIs: s.4/9 } >/10 </11 & ReadEntryPoints/12 </13 & Sub/14 Tile{ AsIs: s.N/5 } 1/15 >/16 Tile{ AsIs: e.Bytes/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_ReadEntryPoints]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Sub]);
  refalrts::alloc_number(vm, context[15], 1UL);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_MakeDWord]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[10], context[14] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ReadEntryPoints("ReadEntryPoints", COOKIE1_, COOKIE2_, func_ReadEntryPoints);


static refalrts::FnResult func_gen_Disassemble_A7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Disassemble=7/4 e.Functions$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Functions$b as range 2
  //DEBUG: e.Functions$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Disassemble=7/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Functions$b/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A7("Disassemble=7", COOKIE1_, COOKIE2_, func_gen_Disassemble_A7);


static refalrts::FnResult func_gen_Disassemble_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Disassemble=6/4 (/8 e.Functions$a/6 )/9 (/12 e.FunctionTable/10 )/13 # Ok/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = refalrts::ident_right( identifiers[ident_Ok], context[2], context[3] );
  if( ! context[5] )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Functions$a as range 6
  // closed e.FunctionTable as range 10
  //DEBUG: e.Functions$a: 6
  //DEBUG: e.FunctionTable: 10

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=7/4 HalfReuse: </8 } & ResolveFunctions=1/14 </15 Tile{ HalfReuse: & DoMapAccum@1/9 AsIs: (/12 AsIs: e.FunctionTable/10 AsIs: )/13 HalfReuse: (/5 HalfReuse: )/1 } Tile{ AsIs: e.Functions$a/6 } >/16 >/17 >/18 Tile{ ]] }
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_ResolveFunctions_A1]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A7]);
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[9], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::reinit_open_bracket(context[5]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[5], context[1] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A6("Disassemble=6", COOKIE1_, COOKIE2_, func_gen_Disassemble_A6);


static refalrts::FnResult func_gen_Disassemble_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Disassemble=5/4 (/8 e.Functions$a/6 )/9 (/12 e.FunctionTable/10 )/13 (/16 e.Entries/14 )/17 # Ok/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = refalrts::ident_right( identifiers[ident_Ok], context[2], context[3] );
  if( ! context[5] )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Functions$a as range 6
  // closed e.FunctionTable as range 10
  // closed e.Entries as range 14
  //DEBUG: e.Functions$a: 6
  //DEBUG: e.FunctionTable: 10
  //DEBUG: e.Entries: 14

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=6/4 AsIs: (/8 AsIs: e.Functions$a/6 AsIs: )/9 AsIs: (/12 AsIs: e.FunctionTable/10 AsIs: )/13 HalfReuse: </16 } & CheckupEntries/18 e.FunctionTable/10/19 (/21 Tile{ AsIs: e.Entries/14 } Tile{ AsIs: )/17 HalfReuse: >/5 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[18], functions[efunc_CheckupEntries]);
  refalrts::copy_evar(vm, context[19], context[20], context[10], context[11]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A6]);
  refalrts::reinit_open_call(context[16]);
  refalrts::reinit_close_call(context[5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[21], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A5("Disassemble=5", COOKIE1_, COOKIE2_, func_gen_Disassemble_A5);


static refalrts::FnResult func_gen_Disassemble_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Disassemble=4/4 (/7 e.Entries/5 )/8 (/11 e.FunctionStarts/9 )/12 (/15 e.FunctionTable/13 )/16 e.Functions$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Entries as range 5
  // closed e.FunctionStarts as range 9
  // closed e.FunctionTable as range 13
  // closed e.Functions$a as range 2
  //DEBUG: e.Entries: 5
  //DEBUG: e.FunctionStarts: 9
  //DEBUG: e.FunctionTable: 13
  //DEBUG: e.Functions$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=5/4 AsIs: (/7 } Tile{ AsIs: e.Functions$a/2 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.FunctionTable/13 AsIs: )/16 } (/17 Tile{ AsIs: e.Entries/5 } Tile{ AsIs: )/8 HalfReuse: </11 } & CheckupFunctionStarts/18 e.FunctionTable/13/19 (/21 Tile{ AsIs: e.FunctionStarts/9 } )/22 >/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_CheckupFunctionStarts]);
  refalrts::copy_evar(vm, context[19], context[20], context[13], context[14]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A5]);
  refalrts::reinit_open_call(context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A4("Disassemble=4", COOKIE1_, COOKIE2_, func_gen_Disassemble_A4);


static refalrts::FnResult func_gen_Disassemble_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Disassemble=3/4 (/7 e.Entries/5 )/8 (/11 e.FunctionStarts/9 )/12 (/15 e.Externs/13 )/16 e.Functions/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Entries as range 5
  // closed e.FunctionStarts as range 9
  // closed e.Externs as range 13
  // closed e.Functions as range 2
  //DEBUG: e.Entries: 5
  //DEBUG: e.FunctionStarts: 9
  //DEBUG: e.Externs: 13
  //DEBUG: e.Functions: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=4/4 AsIs: (/7 AsIs: e.Entries/5 AsIs: )/8 AsIs: (/11 AsIs: e.FunctionStarts/9 AsIs: )/12 HalfReuse: </15 } & MakeFunctionTable=1/17 (/18 Tile{ AsIs: e.Externs/13 } )/19 </20 & DoMapAccum@2/21 (/22 )/23 (/24 Tile{ AsIs: )/16 AsIs: e.Functions/2 AsIs: >/1 } >/25 >/26 Tile{ ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_MakeFunctionTable_A1]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A4]);
  refalrts::reinit_open_call(context[15]);
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[24], context[16] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[16], context[1] );
  res = refalrts::splice_evar( res, context[19], context[24] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A3("Disassemble=3", COOKIE1_, COOKIE2_, func_gen_Disassemble_A3);


static refalrts::FnResult func_gen_Disassemble_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Disassemble=2/4 (/7 e.Entries/5 )/8 (/11 e.FunctionStarts/9 )/12 (/15 e.Externs/13 )/16 e.Code$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Entries as range 5
  // closed e.FunctionStarts as range 9
  // closed e.Externs as range 13
  // closed e.Code$a as range 2
  //DEBUG: e.Entries: 5
  //DEBUG: e.FunctionStarts: 9
  //DEBUG: e.Externs: 13
  //DEBUG: e.Code$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=3/4 AsIs: (/7 AsIs: e.Entries/5 AsIs: )/8 AsIs: (/11 AsIs: e.FunctionStarts/9 AsIs: )/12 AsIs: (/15 AsIs: e.Externs/13 AsIs: )/16 } </17 & SplitByFunctions/18 Tile{ AsIs: e.Code$a/2 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_SplitByFunctions]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A2("Disassemble=2", COOKIE1_, COOKIE2_, func_gen_Disassemble_A2);


static refalrts::FnResult func_gen_Disassemble_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Disassemble=1/4 (/7 e.Entries/5 )/8 (/11 e.FunctionStarts/9 )/12 (/15 e.Externs/13 )/16 (/19 e.Words/17 )/20 e.Code/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Entries as range 5
  // closed e.FunctionStarts as range 9
  // closed e.Externs as range 13
  // closed e.Words as range 17
  // closed e.Code as range 2
  //DEBUG: e.Entries: 5
  //DEBUG: e.FunctionStarts: 9
  //DEBUG: e.Externs: 13
  //DEBUG: e.Words: 17
  //DEBUG: e.Code: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=2/4 AsIs: (/7 AsIs: e.Entries/5 AsIs: )/8 AsIs: (/11 AsIs: e.FunctionStarts/9 AsIs: )/12 AsIs: (/15 AsIs: e.Externs/13 AsIs: )/16 HalfReuse: </19 } & ResolveWords=1/21 </22 & DoMapAccum@3/23 (/24 Tile{ AsIs: e.Words/17 } )/25 (/26 Tile{ AsIs: )/20 AsIs: e.Code/2 AsIs: >/1 } >/27 >/28 Tile{ ]] }
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_ResolveWords_A1]);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A2]);
  refalrts::reinit_open_call(context[19]);
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[26], context[20] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[20], context[1] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[21], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A1("Disassemble=1", COOKIE1_, COOKIE2_, func_gen_Disassemble_A1);


static refalrts::FnResult func_gen_Disassemble_A1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Disassemble=1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Disassemble=1:1/4 s.new1/5 e.new2/2 s.new3/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Disassemble=1:1/4 s.BytecodeSize/5 e.Code/7 s.BytecodeSize/6 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::repeated_stvar_term( vm, context[6], context[5] ) )
      continue;
    // closed e.Code as range 7
    //DEBUG: s.BytecodeSize: 5
    //DEBUG: e.Code: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Disassemble=1:1/4 s.BytecodeSize/5 {REMOVED TILE} s.BytecodeSize/6 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Code/7 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Disassemble=1:1/4 s.BytecodeSize/5 e.Code/2 s.OtherBytecodeSize/6 >/1
  // closed e.Code as range 2
  //DEBUG: s.BytecodeSize: 5
  //DEBUG: s.OtherBytecodeSize: 6
  //DEBUG: e.Code: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} e.Code/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=1:1$2\1*1/4 AsIs: s.BytecodeSize/5 } Tile{ AsIs: s.OtherBytecodeSize/6 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A1B1S2L1D1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  refalrts::splice_to_freelist_open( vm, context[5], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Disassemble_A1B1("Disassemble=1:1", COOKIE1_, COOKIE2_, func_gen_Disassemble_A1B1);


static refalrts::FnResult func_Disassemble(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Disassemble/4 (/7 e.Words/5 )/8 (/11 e.FunctionStarts/9 )/12 (/15 e.Entries/13 )/16 (/19 e.Externs/17 )/20 s.BytecodeSize/21 e.Bytes/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Words as range 5
  // closed e.FunctionStarts as range 9
  // closed e.Entries as range 13
  // closed e.Externs as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Bytes as range 2
  //DEBUG: e.Words: 5
  //DEBUG: e.FunctionStarts: 9
  //DEBUG: e.Entries: 13
  //DEBUG: e.Externs: 17
  //DEBUG: s.BytecodeSize: 21
  //DEBUG: e.Bytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Disassemble=1/4 AsIs: (/7 } Tile{ AsIs: e.Entries/13 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.FunctionStarts/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Externs/17 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Words/5 } )/22 </23 Tile{ HalfReuse: & Disassemble=1:1/20 AsIs: s.BytecodeSize/21 } </24 & DecodeCommands@1/25 Tile{ AsIs: e.Bytes/2 } >/26 >/27 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_DecodeCommands_Z1]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::update_name(context[4], functions[efunc_gen_Disassemble_A1]);
  refalrts::reinit_name(context[20], functions[efunc_gen_Disassemble_A1B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[19], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[8], context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Disassemble("Disassemble", COOKIE1_, COOKIE2_, func_Disassemble);


static refalrts::FnResult func_gen_ResolveWords_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ResolveWords=1/4 (/7 e.Words$a/5 )/8 e.Commands$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Words$a as range 5
  // closed e.Commands$a as range 2
  //DEBUG: e.Words$a: 5
  //DEBUG: e.Commands$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ResolveWords=1/4 (/7 e.Words$a/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Commands$a/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveWords_A1("ResolveWords=1", COOKIE1_, COOKIE2_, func_gen_ResolveWords_A1);


static refalrts::FnResult func_gen_ResolveWords_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & ResolveWords=1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ResolveWords=1\1/4 (/7 e.new1/5 )/8 t.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ResolveWords=1\1/4 (/7 e.new6/11 )/8 (/9 s.new3/15 s.new4/16 s.new5/17 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new6 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    do {
      // </0 & ResolveWords=1\1/4 (/7 e.Words-B/20 (/26 s.Id/28 e.Word/24 )/27 e.Words-E/22 )/8 (/9 s.Offset/15 # CSYM/16 s.Id/17 )/10 >/1
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CSYM], context[16] ) )
        continue;
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[18];
        context[23] = context[19];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        if( ! refalrts::repeated_stvar_left( vm, context[28], context[17], context[24], context[25] ) )
          continue;
        // closed e.Word as range 24
        // closed e.Words-E as range 22
        //DEBUG: s.Offset: 15
        //DEBUG: s.Id: 17
        //DEBUG: e.Words-B: 20
        //DEBUG: e.Word: 24
        //DEBUG: e.Words-E: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & ResolveWords=1\1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Id/17 )/10 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: (/26 AsIs: s.Id/28 AsIs: e.Word/24 AsIs: )/27 } Tile{ AsIs: e.Words-B/20 } Tile{ AsIs: e.Words-E/22 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: s.Offset/15 AsIs: # CSYM/16 } e.Word/24/29 Tile{ HalfReuse: )/1 ]] }
        refalrts::copy_evar(vm, context[29], context[30], context[24], context[25]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::link_brackets( context[0], context[8] );
        refalrts::link_brackets( context[26], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[18], context[19] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ResolveWords=1\1/4 (/7 e.Words-B/20 (/26 s.Id/28 e.Word/24 )/27 e.Words-E/22 )/8 (/9 s.Offset/15 # CSYMR/16 s.Id/17 )/10 >/1
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CSYMR], context[16] ) )
        continue;
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[18];
        context[23] = context[19];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        if( ! refalrts::repeated_stvar_left( vm, context[28], context[17], context[24], context[25] ) )
          continue;
        // closed e.Word as range 24
        // closed e.Words-E as range 22
        //DEBUG: s.Offset: 15
        //DEBUG: s.Id: 17
        //DEBUG: e.Words-B: 20
        //DEBUG: e.Word: 24
        //DEBUG: e.Words-E: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & ResolveWords=1\1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Id/17 )/10 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: (/26 AsIs: s.Id/28 AsIs: e.Word/24 AsIs: )/27 } Tile{ AsIs: e.Words-B/20 } Tile{ AsIs: e.Words-E/22 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: s.Offset/15 AsIs: # CSYMR/16 } e.Word/24/29 Tile{ HalfReuse: )/1 ]] }
        refalrts::copy_evar(vm, context[29], context[30], context[24], context[25]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::link_brackets( context[0], context[8] );
        refalrts::link_brackets( context[26], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[18], context[19] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ResolveWords=1\1/4 (/7 e.Words-B/20 (/26 s.Id/28 e.Word/24 )/27 e.Words-E/22 )/8 (/9 s.Offset/15 # NCS/16 s.Id/17 )/10 >/1
    context[18] = context[11];
    context[19] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_NCS], context[16] ) )
      continue;
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[18];
      context[23] = context[19];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      if( ! refalrts::repeated_stvar_left( vm, context[28], context[17], context[24], context[25] ) )
        continue;
      // closed e.Word as range 24
      // closed e.Words-E as range 22
      //DEBUG: s.Offset: 15
      //DEBUG: s.Id: 17
      //DEBUG: e.Words-B: 20
      //DEBUG: e.Word: 24
      //DEBUG: e.Words-E: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & ResolveWords=1\1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Id/17 )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: (/26 AsIs: s.Id/28 AsIs: e.Word/24 AsIs: )/27 } Tile{ AsIs: e.Words-B/20 } Tile{ AsIs: e.Words-E/22 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: s.Offset/15 AsIs: # NCS/16 } e.Word/24/29 Tile{ HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[29], context[30], context[24], context[25]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[18], context[19] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveWords=1\1/4 (/7 e.Words$a/5 )/8 t.Other/9 >/1
  // closed e.Words$a as range 5
  //DEBUG: t.Other: 9
  //DEBUG: e.Words$a: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ResolveWords=1\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Words$a/5 AsIs: )/8 AsIs: t.Other/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveWords_A1L1("ResolveWords=1\\1", COOKIE1_, COOKIE2_, func_gen_ResolveWords_A1L1);


static refalrts::FnResult func_ResolveWords(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & ResolveWords/4 (/7 e.Words/5 )/8 e.Commands/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Words as range 5
  // closed e.Commands as range 2
  //DEBUG: e.Words: 5
  //DEBUG: e.Commands: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & ResolveWords=1/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@3/4 AsIs: (/7 AsIs: e.Words/5 AsIs: )/8 } (/11 )/12 Tile{ AsIs: e.Commands/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_ResolveWords_A1]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveWords("ResolveWords", COOKIE1_, COOKIE2_, func_ResolveWords);


static refalrts::FnResult func_gen_SplitByFunctions_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & SplitByFunctions:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SplitByFunctions:1/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & SplitByFunctions:1/4 t.DeclareCommand/5 e.FuncBody/9 t.NextDeclareCommand/13 e.Code$a/11 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[9] = 0;
    context[10] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[11] = context[7];
      context[12] = context[8];
      context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
      if( ! context[14] )
        continue;
      // closed e.Code$a as range 11
      //DEBUG: t.DeclareCommand: 5
      //DEBUG: e.FuncBody: 9
      //DEBUG: t.NextDeclareCommand: 13
      //DEBUG: e.Code$a: 11
      //5: t.DeclareCommand
      //9: e.FuncBody
      //11: e.Code$a
      //13: t.NextDeclareCommand
      //20: t.NextDeclareCommand

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[17], functions[efunc_gen_SplitByFunctions_B1S1C1]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_DeclareCommand]);
      refalrts::copy_stvar(vm, context[20], context[13]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[15] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[18] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_stvar( res, context[20] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </15 & SplitByFunctions:1$1?1/19 # True/20 >/16
        context[17] = 0;
        context[18] = 0;
        context[19] = refalrts::call_left( context[17], context[18], context[15], context[16] );
        context[20] = refalrts::ident_left( identifiers[ident_True], context[17], context[18] );
        if( ! context[20] )
          continue;
        if( ! refalrts::empty_seq( context[17], context[18] ) )
          continue;
        //DEBUG: t.DeclareCommand: 5
        //DEBUG: e.FuncBody: 9
        //DEBUG: t.NextDeclareCommand: 13
        //DEBUG: e.Code$a: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & SplitByFunctions:1$1?1/19 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/16 } Tile{ AsIs: t.DeclareCommand/5 } Tile{ AsIs: e.FuncBody/9 } Tile{ HalfReuse: )/20 } Tile{ AsIs: </0 Reuse: & SplitByFunctions/4 } Tile{ AsIs: t.NextDeclareCommand/13 AsIs: e.Code$a/11 HalfReuse: >/15 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_close_bracket(context[20]);
        refalrts::update_name(context[4], functions[efunc_SplitByFunctions]);
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[20] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[13], context[15] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_elem( res, context[16] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[15], context[16]);
      continue;
    } while ( refalrts::open_evar_advance( context[9], context[10], context[7], context[8] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SplitByFunctions:1/4 t.DeclareCommand/5 e.FuncBody/2 >/1
  // closed e.FuncBody as range 2
  //DEBUG: t.DeclareCommand: 5
  //DEBUG: e.FuncBody: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: t.DeclareCommand/5 AsIs: e.FuncBody/2 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[4];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SplitByFunctions_B1("SplitByFunctions:1", COOKIE1_, COOKIE2_, func_gen_SplitByFunctions_B1);


static refalrts::FnResult func_SplitByFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & SplitByFunctions/4 t.DeclareCommand/5 e.Code/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Code as range 2
  //DEBUG: t.DeclareCommand: 5
  //DEBUG: e.Code: 2
  //2: e.Code
  //5: t.DeclareCommand
  //12: t.DeclareCommand

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_SplitByFunctions_C1]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_DeclareCommand]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[10] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_stvar( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </7 & SplitByFunctions?1/11 # True/12 >/8
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
    context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    //DEBUG: t.DeclareCommand: 5
    //DEBUG: e.Code: 2

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & SplitByFunctions?1/11 # True/12 >/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SplitByFunctions:1/4 AsIs: t.DeclareCommand/5 AsIs: e.Code/2 HalfReuse: >/7 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_gen_SplitByFunctions_B1]);
    refalrts::reinit_close_call(context[7]);
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[7], context[8]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_SplitByFunctions("SplitByFunctions", COOKIE1_, COOKIE2_, func_SplitByFunctions);


static refalrts::FnResult func_DeclareCommand(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & DeclareCommand/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DeclareCommand/4 t.new1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DeclareCommand/4 (/5 s.new2/9 s.new3/10 e.new4/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[10], context[7], context[8] ) )
      continue;
    // closed e.new4 as range 7
    do {
      // </0 & DeclareCommand/4 (/5 s.Offset/9 # E/10 e.Name/11 )/6 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_E], context[10] ) )
        continue;
      // closed e.Name as range 11
      //DEBUG: s.Offset: 9
      //DEBUG: e.Name: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DeclareCommand/4 (/5 s.Offset/9 # E/10 e.Name/11 )/6 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DeclareCommand/4 (/5 s.Offset/9 # L/10 e.Name/11 )/6 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::ident_term( identifiers[ident_L], context[10] ) )
      continue;
    // closed e.Name as range 11
    //DEBUG: s.Offset: 9
    //DEBUG: e.Name: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DeclareCommand/4 (/5 s.Offset/9 # L/10 e.Name/11 )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DeclareCommand/4 t.Other/5 >/1
  //DEBUG: t.Other: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/4 AsIs: t.Other/5 } Tile{ ]] }
  refalrts::reinit_ident(context[4], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DeclareCommand("DeclareCommand", COOKIE1_, COOKIE2_, func_DeclareCommand);


static refalrts::FnResult func_gen_MakeFunctionTable_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & MakeFunctionTable=3/4 (/7 (/11 e.ForbiddenNames$a/9 )/12 e.Table/5 )/8 e.Functions$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ForbiddenNames$a as range 9
  // closed e.Table as range 5
  // closed e.Functions$b as range 2
  //DEBUG: e.ForbiddenNames$a: 9
  //DEBUG: e.Table: 5
  //DEBUG: e.Functions$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MakeFunctionTable=3/4 (/7 (/11 e.ForbiddenNames$a/9 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/12 AsIs: e.Table/5 AsIs: )/8 } Tile{ AsIs: e.Functions$b/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[12]);
  refalrts::link_brackets( context[12], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeFunctionTable_A3("MakeFunctionTable=3", COOKIE1_, COOKIE2_, func_gen_MakeFunctionTable_A3);


static refalrts::FnResult func_gen_MakeFunctionTable_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & MakeFunctionTable=1/4 (/7 e.Externs/5 )/8 (/11 e.Entries/9 )/12 e.Functions$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Externs as range 5
  // closed e.Entries as range 9
  // closed e.Functions$a as range 2
  //DEBUG: e.Externs: 5
  //DEBUG: e.Entries: 9
  //DEBUG: e.Functions$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeFunctionTable=3/4 HalfReuse: </7 } & DoMapAccum@4/13 (/14 (/15 Tile{ AsIs: e.Externs/5 } Tile{ AsIs: e.Entries/9 } )/16 Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: )/12 AsIs: e.Functions$a/2 AsIs: >/1 } >/17 Tile{ ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_DoMapAccum_Z4]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeFunctionTable_A3]);
  refalrts::reinit_open_call(context[7]);
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[14], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeFunctionTable_A1("MakeFunctionTable=1", COOKIE1_, COOKIE2_, func_gen_MakeFunctionTable_A1);


static refalrts::FnResult func_MakeFunctionTable(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & MakeFunctionTable/4 (/7 e.Externs/5 )/8 e.Functions/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Externs as range 5
  // closed e.Functions as range 2
  //DEBUG: e.Externs: 5
  //DEBUG: e.Functions: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeFunctionTable=1/4 AsIs: (/7 AsIs: e.Externs/5 AsIs: )/8 } </9 & DoMapAccum@2/10 (/11 )/12 (/13 )/14 Tile{ AsIs: e.Functions/2 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeFunctionTable_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeFunctionTable("MakeFunctionTable", COOKIE1_, COOKIE2_, func_MakeFunctionTable);


static refalrts::FnResult func_gen_AddFunctionToTable_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & AddFunctionToTable$2=2/4 (/7 e.ForbiddenNames/5 )/8 (/11 e.Table/9 )/12 s.NameOffset/13 s.CodeOffset/14 (/17 e.Command/15 )/18 (/21 e.Body/19 )/22 e.NewName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.ForbiddenNames as range 5
  // closed e.Table as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Command as range 15
  // closed e.Body as range 19
  // closed e.NewName as range 2
  //DEBUG: e.ForbiddenNames: 5
  //DEBUG: e.Table: 9
  //DEBUG: s.NameOffset: 13
  //DEBUG: s.CodeOffset: 14
  //DEBUG: e.Command: 15
  //DEBUG: e.Body: 19
  //DEBUG: e.NewName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & AddFunctionToTable/4 AsIs: (/7 } Tile{ HalfReuse: (/8 } Tile{ AsIs: e.ForbiddenNames/5 } Tile{ HalfReuse: )/11 AsIs: e.Table/9 AsIs: )/12 } Tile{ AsIs: (/17 } (/23 Tile{ AsIs: s.NameOffset/13 } # L/24 Tile{ AsIs: e.NewName/2 } Tile{ AsIs: )/18 } (/25 Tile{ AsIs: s.CodeOffset/14 } Tile{ AsIs: e.Command/15 } Tile{ HalfReuse: )/21 AsIs: e.Body/19 AsIs: )/22 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_ident(vm, context[24], identifiers[ident_L]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_AddFunctionToTable]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_close_bracket(context[21]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[22] );
  refalrts::link_brackets( context[25], context[21] );
  refalrts::link_brackets( context[23], context[18] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddFunctionToTable_S2A2("AddFunctionToTable$2=2", COOKIE1_, COOKIE2_, func_gen_AddFunctionToTable_S2A2);


static refalrts::FnResult func_gen_AddFunctionToTable_S2A2B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & AddFunctionToTable$2=2:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AddFunctionToTable$2=2:1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & AddFunctionToTable$2=2:1/4 s.CodeOffset/5 e.Body-B/8 (/14 s.Offset/16 # LABEL/17 e.Label/18 '$'/22 e.Suf/20 )/15 e.Body-E/10 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      context[14] = refalrts::brackets_left( context[12], context[13], context[10], context[11] );
      if( ! context[14] )
        continue;
      refalrts::bracket_pointers(context[14], context[15]);
      // closed e.Body-E as range 10
      if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
        continue;
      context[17] = refalrts::ident_left( identifiers[ident_LABEL], context[12], context[13] );
      if( ! context[17] )
        continue;
      context[18] = 0;
      context[19] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[20] = context[12];
        context[21] = context[13];
        context[22] = refalrts::char_left( '$', context[20], context[21] );
        if( ! context[22] )
          continue;
        // closed e.Suf as range 20
        //DEBUG: s.CodeOffset: 5
        //DEBUG: e.Body-B: 8
        //DEBUG: e.Body-E: 10
        //DEBUG: s.Offset: 16
        //DEBUG: e.Label: 18
        //DEBUG: e.Suf: 20
        //5: s.CodeOffset
        //8: e.Body-B
        //10: e.Body-E
        //16: s.Offset
        //18: e.Label
        //20: e.Suf
        //28: e.Label

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_AddFunctionToTable_S2A2B1S1C1]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_IsObfuscated]);
        refalrts::copy_evar(vm, context[28], context[29], context[18], context[19]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[26] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </23 & AddFunctionToTable$2=2:1$1?1/27 # False/28 >/24
          context[25] = 0;
          context[26] = 0;
          context[27] = refalrts::call_left( context[25], context[26], context[23], context[24] );
          context[28] = refalrts::ident_left( identifiers[ident_False], context[25], context[26] );
          if( ! context[28] )
            continue;
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          //DEBUG: s.CodeOffset: 5
          //DEBUG: e.Body-B: 8
          //DEBUG: e.Body-E: 10
          //DEBUG: s.Offset: 16
          //DEBUG: e.Label: 18
          //DEBUG: e.Suf: 20

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & AddFunctionToTable$2=2:1/4 s.CodeOffset/5 e.Body-B/8 (/14 s.Offset/16 # LABEL/17 {REMOVED TILE} '$'/22 e.Suf/20 )/15 e.Body-E/10 </23 & AddFunctionToTable$2=2:1$1?1/27 # False/28 >/24 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: e.Label/18 } Tile{ ]] }
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[18], context[19] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[23], context[24]);
        continue;
      } while ( refalrts::open_evar_advance( context[18], context[19], context[12], context[13] ) );
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddFunctionToTable$2=2:1/4 s.CodeOffset/5 e.Body$a/2 >/1
  // closed e.Body$a as range 2
  //DEBUG: s.CodeOffset: 5
  //DEBUG: e.Body$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Body$a/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } 'F'/6 Tile{ AsIs: </0 Reuse: & Symb/4 AsIs: s.CodeOffset/5 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[6], 'F');
  refalrts::update_name(context[4], functions[efunc_Symb]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddFunctionToTable_S2A2B1("AddFunctionToTable$2=2:1", COOKIE1_, COOKIE2_, func_gen_AddFunctionToTable_S2A2B1);


static refalrts::FnResult func_gen_AddFunctionToTable_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & AddFunctionToTable$3=1/4 (/7 e.ForbiddenNames/5 )/8 (/11 e.Name/9 )/12 (/15 e.Table/13 )/16 s.CodeOffset/17 s.NameOffset/18 s.DeclareCommand/19 (/22 e.Command/20 )/23 (/26 e.Body/24 )/27 s.Type/28 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.ForbiddenNames as range 5
  // closed e.Name as range 9
  // closed e.Table as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.Command as range 20
  // closed e.Body as range 24
  if( ! refalrts::svar_left( context[28], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.ForbiddenNames: 5
  //DEBUG: e.Name: 9
  //DEBUG: e.Table: 13
  //DEBUG: s.CodeOffset: 17
  //DEBUG: s.NameOffset: 18
  //DEBUG: s.DeclareCommand: 19
  //DEBUG: e.Command: 20
  //DEBUG: e.Body: 24
  //DEBUG: s.Type: 28

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.ForbiddenNames/5 } Tile{ AsIs: (/11 AsIs: e.Name/9 AsIs: )/12 HalfReuse: )/15 AsIs: e.Table/13 HalfReuse: (/16 AsIs: s.CodeOffset/17 } Tile{ AsIs: s.Type/28 } e.Name/9/29 Tile{ AsIs: )/23 } Tile{ AsIs: )/8 } Tile{ AsIs: (/22 } Tile{ AsIs: (/7 } Tile{ AsIs: s.NameOffset/18 AsIs: s.DeclareCommand/19 } e.Name/9/31 )/33 (/34 Tile{ HalfReuse: s.CodeOffset17 /1 } Tile{ AsIs: e.Command/20 } Tile{ HalfReuse: )/26 AsIs: e.Body/24 AsIs: )/27 } Tile{ ]] }
  refalrts::copy_evar(vm, context[29], context[30], context[9], context[10]);
  refalrts::copy_evar(vm, context[31], context[32], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_open_bracket(vm, context[34]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::reinit_open_bracket(context[16]);
  refalrts::reinit_svar( context[1], context[17] );
  refalrts::reinit_close_bracket(context[26]);
  refalrts::link_brackets( context[22], context[27] );
  refalrts::link_brackets( context[34], context[26] );
  refalrts::link_brackets( context[7], context[33] );
  refalrts::link_brackets( context[0], context[8] );
  refalrts::link_brackets( context[16], context[23] );
  refalrts::link_brackets( context[4], context[15] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[11], context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddFunctionToTable_S3A1("AddFunctionToTable$3=1", COOKIE1_, COOKIE2_, func_gen_AddFunctionToTable_S3A1);


static refalrts::FnResult func_AddFunctionToTable(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  // </0 & AddFunctionToTable/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AddFunctionToTable/4 (/7 (/11 e.new1/9 )/12 e.new2/5 )/8 (/15 (/19 s.new3/25 s.new4/26 e.new5/17 )/20 (/23 s.new6/27 e.new7/21 )/24 e.new8/13 )/16 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[13], context[14] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[13], context[14] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 9
  // closed e.new2 as range 5
  // closed e.new8 as range 13
  if( ! refalrts::svar_left( context[25], context[17], context[18] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[26], context[17], context[18] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 17
  if( ! refalrts::svar_left( context[27], context[21], context[22] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 21
  do {
    // </0 & AddFunctionToTable/4 (/7 (/11 e.new11/28 )/12 e.new9/30 )/8 (/15 (/19 s.new12/25 # L/26 e.new13/32 )/20 (/23 s.new14/27 e.new15/34 )/24 e.new10/36 )/16 >/1
    context[28] = context[9];
    context[29] = context[10];
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[17];
    context[33] = context[18];
    context[34] = context[21];
    context[35] = context[22];
    context[36] = context[13];
    context[37] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_L], context[26] ) )
      continue;
    // closed e.new11 as range 28
    // closed e.new9 as range 30
    // closed e.new13 as range 32
    // closed e.new15 as range 34
    // closed e.new10 as range 36
    do {
      // </0 & AddFunctionToTable/4 (/7 (/11 e.ForbiddenNames-B/48 (/54 e.Name/56 )/55 e.ForbiddenNames-E/50 )/12 e.Table/40 )/8 (/15 (/19 s.NameOffset/25 # L/26 e.Name/42 )/20 (/23 s.CodeOffset/27 e.Command/44 )/24 e.Body/46 )/16 >/1
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = context[37];
      // closed e.Table as range 40
      // closed e.Name as range 42
      // closed e.Command as range 44
      // closed e.Body as range 46
      context[48] = 0;
      context[49] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[50] = context[38];
        context[51] = context[39];
        context[52] = 0;
        context[53] = 0;
        context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
        if( ! context[54] )
          continue;
        refalrts::bracket_pointers(context[54], context[55]);
        if( ! refalrts::repeated_evar_left( vm, context[56], context[57], context[42], context[43], context[52], context[53] ) )
          continue;
        if( ! refalrts::empty_seq( context[52], context[53] ) )
          continue;
        // closed e.ForbiddenNames-E as range 50
        //DEBUG: s.NameOffset: 25
        //DEBUG: s.CodeOffset: 27
        //DEBUG: e.Table: 40
        //DEBUG: e.Name: 42
        //DEBUG: e.Command: 44
        //DEBUG: e.Body: 46
        //DEBUG: e.ForbiddenNames-B: 48
        //DEBUG: e.ForbiddenNames-E: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & AddFunctionToTable/4 AsIs: (/7 AsIs: (/11 AsIs: e.ForbiddenNames-B/48 AsIs: (/54 AsIs: e.Name/56 AsIs: )/55 AsIs: e.ForbiddenNames-E/50 AsIs: )/12 AsIs: e.Table/40 AsIs: )/8 AsIs: (/15 AsIs: (/19 AsIs: s.NameOffset/25 AsIs: # L/26 } </58 & IncName/59 Tile{ AsIs: e.Name/42 } >/60 Tile{ AsIs: )/20 AsIs: (/23 AsIs: s.CodeOffset/27 AsIs: e.Command/44 AsIs: )/24 AsIs: e.Body/46 AsIs: )/16 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_IncName]);
        refalrts::alloc_close_call(vm, context[60]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::push_stack( vm, context[60] );
        refalrts::push_stack( vm, context[58] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_elem( res, context[60] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[48], context[49], context[38], context[39] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & AddFunctionToTable/4 (/7 (/11 e.ForbiddenNames/38 )/12 e.Table/40 )/8 (/15 (/19 s.NameOffset/25 # L/26 e.Name/42 )/20 (/23 s.CodeOffset/27 e.Command/44 )/24 e.Body/46 )/16 >/1
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = context[37];
      // closed e.ForbiddenNames as range 38
      // closed e.Table as range 40
      // closed e.Name as range 42
      // closed e.Command as range 44
      // closed e.Body as range 46
      //DEBUG: s.NameOffset: 25
      //DEBUG: s.CodeOffset: 27
      //DEBUG: e.ForbiddenNames: 38
      //DEBUG: e.Table: 40
      //DEBUG: e.Name: 42
      //DEBUG: e.Command: 44
      //DEBUG: e.Body: 46
      //25: s.NameOffset
      //27: s.CodeOffset
      //38: e.ForbiddenNames
      //40: e.Table
      //42: e.Name
      //44: e.Command
      //46: e.Body
      //53: e.Name

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[50], functions[efunc_gen_AddFunctionToTable_S2C1]);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_name(vm, context[52], functions[efunc_IsObfuscated]);
      refalrts::copy_evar(vm, context[53], context[54], context[42], context[43]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[48] );
      res = refalrts::splice_elem( res, context[49] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[51] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_elem( res, context[48] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </48 & AddFunctionToTable$2?1/52 # True/53 >/49
        context[50] = 0;
        context[51] = 0;
        context[52] = refalrts::call_left( context[50], context[51], context[48], context[49] );
        context[53] = refalrts::ident_left( identifiers[ident_True], context[50], context[51] );
        if( ! context[53] )
          continue;
        if( ! refalrts::empty_seq( context[50], context[51] ) )
          continue;
        //DEBUG: s.NameOffset: 25
        //DEBUG: s.CodeOffset: 27
        //DEBUG: e.ForbiddenNames: 38
        //DEBUG: e.Table: 40
        //DEBUG: e.Name: 42
        //DEBUG: e.Command: 44
        //DEBUG: e.Body: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.NameOffset/25 # L/26 e.Name/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & AddFunctionToTable$2=2/7 AsIs: (/11 AsIs: e.ForbiddenNames/38 AsIs: )/12 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Table/40 } Tile{ AsIs: )/20 HalfReuse: s.NameOffset25 /23 AsIs: s.CodeOffset/27 } Tile{ AsIs: (/19 } Tile{ AsIs: e.Command/44 } Tile{ AsIs: )/8 } Tile{ HalfReuse: (/24 AsIs: e.Body/46 AsIs: )/16 AsIs: </48 Reuse: & AddFunctionToTable$2=2:1/52 HalfReuse: s.CodeOffset27 /53 } e.Body/46/54 Tile{ AsIs: >/49 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[54], context[55], context[46], context[47]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_AddFunctionToTable_S2A2]);
        refalrts::reinit_svar( context[23], context[25] );
        refalrts::reinit_open_bracket(context[24]);
        refalrts::update_name(context[52], functions[efunc_gen_AddFunctionToTable_S2A2B1]);
        refalrts::reinit_svar( context[53], context[27] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[48] );
        refalrts::link_brackets( context[24], context[16] );
        refalrts::link_brackets( context[19], context[8] );
        refalrts::link_brackets( context[15], context[20] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[49];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[24], context[53] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_evar( res, context[20], context[27] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[4], context[12] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[48], context[49]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & AddFunctionToTable/4 (/7 (/11 e.ForbiddenNames/38 )/12 e.Table/40 )/8 (/15 (/19 s.NameOffset/25 # L/26 e.Name/42 )/20 (/23 s.CodeOffset/27 e.Command/44 )/24 e.Body/46 )/16 >/1
    context[38] = context[28];
    context[39] = context[29];
    context[40] = context[30];
    context[41] = context[31];
    context[42] = context[32];
    context[43] = context[33];
    context[44] = context[34];
    context[45] = context[35];
    context[46] = context[36];
    context[47] = context[37];
    // closed e.ForbiddenNames as range 38
    // closed e.Table as range 40
    // closed e.Name as range 42
    // closed e.Command as range 44
    // closed e.Body as range 46
    //DEBUG: s.NameOffset: 25
    //DEBUG: s.CodeOffset: 27
    //DEBUG: e.ForbiddenNames: 38
    //DEBUG: e.Table: 40
    //DEBUG: e.Name: 42
    //DEBUG: e.Command: 44
    //DEBUG: e.Body: 46

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.ForbiddenNames/38 HalfReuse: (/12 } e.Name/42/48 Tile{ HalfReuse: )/0 HalfReuse: )/4 } Tile{ AsIs: e.Table/40 } (/50 s.CodeOffset/27/51 # Local/52 e.Name/42/53 Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/15 AsIs: (/19 AsIs: s.NameOffset/25 AsIs: # L/26 AsIs: e.Name/42 AsIs: )/20 AsIs: (/23 AsIs: s.CodeOffset/27 AsIs: e.Command/44 AsIs: )/24 AsIs: e.Body/46 AsIs: )/16 } Tile{ ]] }
    refalrts::copy_evar(vm, context[48], context[49], context[42], context[43]);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::copy_stvar(vm, context[51], context[27]);
    refalrts::alloc_ident(vm, context[52], identifiers[ident_Local]);
    refalrts::copy_evar(vm, context[53], context[54], context[42], context[43]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[50], context[1] );
    refalrts::link_brackets( context[11], context[4] );
    refalrts::link_brackets( context[12], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_evar( res, context[50], context[52] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AddFunctionToTable/4 (/7 (/11 e.ForbiddenNames/28 )/12 e.Table/30 )/8 (/15 (/19 s.NameOffset/25 # E/26 e.Name/32 )/20 (/23 s.CodeOffset/27 e.Command/34 )/24 e.Body/36 )/16 >/1
    context[28] = context[9];
    context[29] = context[10];
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[17];
    context[33] = context[18];
    context[34] = context[21];
    context[35] = context[22];
    context[36] = context[13];
    context[37] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_E], context[26] ) )
      continue;
    // closed e.ForbiddenNames as range 28
    // closed e.Table as range 30
    // closed e.Name as range 32
    // closed e.Command as range 34
    // closed e.Body as range 36
    //DEBUG: s.NameOffset: 25
    //DEBUG: s.CodeOffset: 27
    //DEBUG: e.ForbiddenNames: 28
    //DEBUG: e.Table: 30
    //DEBUG: e.Name: 32
    //DEBUG: e.Command: 34
    //DEBUG: e.Body: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.ForbiddenNames/28 HalfReuse: (/12 } e.Name/32/38 Tile{ HalfReuse: )/0 HalfReuse: )/4 } Tile{ AsIs: e.Table/30 } (/40 s.CodeOffset/27/41 # Entry/42 e.Name/32/43 Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/15 AsIs: (/19 AsIs: s.NameOffset/25 AsIs: # E/26 AsIs: e.Name/32 AsIs: )/20 AsIs: (/23 AsIs: s.CodeOffset/27 AsIs: e.Command/34 AsIs: )/24 AsIs: e.Body/36 AsIs: )/16 } Tile{ ]] }
    refalrts::copy_evar(vm, context[38], context[39], context[32], context[33]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::copy_stvar(vm, context[41], context[27]);
    refalrts::alloc_ident(vm, context[42], identifiers[ident_Entry]);
    refalrts::copy_evar(vm, context[43], context[44], context[32], context[33]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[40], context[1] );
    refalrts::link_brackets( context[11], context[4] );
    refalrts::link_brackets( context[12], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[40], context[42] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddFunctionToTable/4 (/7 (/11 e.ForbiddenNames/9 )/12 e.Table/5 )/8 (/15 (/19 s.NameOffset/25 s.DeclareCommand/26 e.Name/17 )/20 (/23 s.CodeOffset/27 e.Command/21 )/24 e.Body/13 )/16 >/1
  // closed e.ForbiddenNames as range 9
  // closed e.Table as range 5
  // closed e.Name as range 17
  // closed e.Command as range 21
  // closed e.Body as range 13
  //DEBUG: s.NameOffset: 25
  //DEBUG: s.DeclareCommand: 26
  //DEBUG: s.CodeOffset: 27
  //DEBUG: e.ForbiddenNames: 9
  //DEBUG: e.Table: 5
  //DEBUG: e.Name: 17
  //DEBUG: e.Command: 21
  //DEBUG: e.Body: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.CodeOffset/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & AddFunctionToTable$3=1/7 AsIs: (/11 AsIs: e.ForbiddenNames/9 AsIs: )/12 } Tile{ HalfReuse: (/0 } Tile{ AsIs: e.Name/17 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Table/5 } Tile{ HalfReuse: )/15 HalfReuse: s.CodeOffset27 /19 AsIs: s.NameOffset/25 AsIs: s.DeclareCommand/26 } (/28 Tile{ AsIs: e.Command/21 } Tile{ AsIs: )/8 } Tile{ HalfReuse: (/24 AsIs: e.Body/13 AsIs: )/16 HalfReuse: </1 } & AddFunctionToTable$3=1:1*2/29 s.DeclareCommand/26/30 >/31 >/32 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_gen_AddFunctionToTable_S3A1B1D2]);
  refalrts::copy_stvar(vm, context[30], context[26]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_AddFunctionToTable_S3A1]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::reinit_svar( context[19], context[27] );
  refalrts::reinit_open_bracket(context[24]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[4] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[24], context[16] );
  refalrts::link_brackets( context[28], context[8] );
  refalrts::link_brackets( context[23], context[15] );
  refalrts::link_brackets( context[0], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[29], context[32] );
  res = refalrts::splice_evar( res, context[24], context[1] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[15], context[26] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AddFunctionToTable("AddFunctionToTable", COOKIE1_, COOKIE2_, func_AddFunctionToTable);


static refalrts::FnResult func_IncName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & IncName/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & IncName/4 e.new1/5 s.new2/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    // closed e.new1 as range 5
    do {
      // </0 & IncName/4 e.Name/8 s.Last/7 >/1
      context[8] = context[5];
      context[9] = context[6];
      // closed e.Name as range 8
      //DEBUG: s.Last: 7
      //DEBUG: e.Name: 8
      //7: s.Last
      //8: e.Name

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[12], functions[efunc_gen_IncName_S1C1]);
      refalrts::alloc_chars(vm, context[13], context[14], "0123456789", 10);
      refalrts::alloc_close_call(vm, context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[10] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_elem( res, context[10] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </10 & IncName$1?1/14 e.Digits-B/15 s.Last/19 s.Next/20 e.Digit-E/17 >/11
        context[12] = 0;
        context[13] = 0;
        context[14] = refalrts::call_left( context[12], context[13], context[10], context[11] );
        context[15] = 0;
        context[16] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[17] = context[12];
          context[18] = context[13];
          if( ! refalrts::repeated_stvar_left( vm, context[19], context[7], context[17], context[18] ) )
            continue;
          if( ! refalrts::svar_left( context[20], context[17], context[18] ) )
            continue;
          // closed e.Digit-E as range 17
          //DEBUG: s.Last: 7
          //DEBUG: e.Name: 8
          //DEBUG: e.Digits-B: 15
          //DEBUG: s.Next: 20
          //DEBUG: e.Digit-E: 17

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & IncName/4 {REMOVED TILE} s.Last/7 </10 & IncName$1?1/14 e.Digits-B/15 s.Last/19 s.Next/20 e.Digit-E/17 >/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/8 } Tile{ HalfReuse: s.Next20 /1 ]] }
          refalrts::reinit_svar( context[1], context[20] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[8], context[9] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[15], context[16], context[12], context[13] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[10], context[11]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IncName/4 e.Name/8 '9'/7 >/1
    context[8] = context[5];
    context[9] = context[6];
    if( ! refalrts::char_term( '9', context[7] ) )
      continue;
    // closed e.Name as range 8
    //DEBUG: e.Name: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & IncName/4 AsIs: e.Name/8 HalfReuse: >/7 HalfReuse: '0'/1 ]] }
    refalrts::reinit_close_call(context[7]);
    refalrts::reinit_char(context[1], '0');
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IncName/4 e.Name/2 >/1
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IncName/4 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: '0'/1 ]] }
  refalrts::reinit_char(context[1], '0');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IncName("IncName", COOKIE1_, COOKIE2_, func_IncName);


static refalrts::FnResult func_IsObfuscated(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & IsObfuscated/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & IsObfuscated/4 e.Name/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Name as range 5
    //DEBUG: e.Name: 5
    //5: e.Name
    //12: e.Name

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_IsObfuscated_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_Type]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & IsObfuscated$1?1/11 'L'/12 s.s/13 s.Init/14 e.Tail/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::char_left( 'L', context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
        continue;
      // closed e.Tail as range 9
      //DEBUG: e.Name: 5
      //DEBUG: s.s: 13
      //DEBUG: s.Init: 14
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Name/5 </7 & IsObfuscated$1?1/11 'L'/12 s.s/13 s.Init/14 {REMOVED TILE} >/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsObfuscated-Tail/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_IsObfuscatedm_Tail]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsObfuscated/4 e.Name/2 >/1
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsObfuscated/4 e.Name/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsObfuscated("IsObfuscated", COOKIE1_, COOKIE2_, func_IsObfuscated);


static refalrts::FnResult func_gen_IsObfuscatedm_Tail_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & IsObfuscated-Tail:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IsObfuscated-Tail:1/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & IsObfuscated-Tail:1/4 s.new4/5 s.new5/6 s.new6/9 e.new7/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    // closed e.new7 as range 7
    do {
      // </0 & IsObfuscated-Tail:1/4 'L'/5 s.s/6 s.Next/9 e.Tail$a/10 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::char_term( 'L', context[5] ) )
        continue;
      // closed e.Tail$a as range 10
      //DEBUG: s.s: 6
      //DEBUG: s.Next: 9
      //DEBUG: e.Tail$a: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} 'L'/5 s.s/6 s.Next/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsObfuscated-Tail/4 } Tile{ AsIs: e.Tail$a/10 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_IsObfuscatedm_Tail]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IsObfuscated-Tail:1/4 'D'/5 s.s/6 s.Next/9 e.Tail$a/10 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::char_term( 'D', context[5] ) )
        continue;
      // closed e.Tail$a as range 10
      //DEBUG: s.s: 6
      //DEBUG: s.Next: 9
      //DEBUG: e.Tail$a: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} 'D'/5 s.s/6 s.Next/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsObfuscated-Tail/4 } Tile{ AsIs: e.Tail$a/10 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_IsObfuscatedm_Tail]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IsObfuscated-Tail:1/4 s.t/5 s.s/6 '-'/9 e.Tail$a/10 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::char_term( '-', context[9] ) )
        continue;
      // closed e.Tail$a as range 10
      //DEBUG: s.t: 5
      //DEBUG: s.s: 6
      //DEBUG: e.Tail$a: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & IsObfuscated-Tail:1/4 s.t/5 s.s/6 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & IsObfuscated-Tail/9 AsIs: e.Tail$a/10 AsIs: >/1 ]] }
      refalrts::reinit_name(context[9], functions[efunc_IsObfuscatedm_Tail]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IsObfuscated-Tail:1/4 s.t/5 s.s/6 '_'/9 e.Tail$a/10 >/1
    context[10] = context[7];
    context[11] = context[8];
    if( ! refalrts::char_term( '_', context[9] ) )
      continue;
    // closed e.Tail$a as range 10
    //DEBUG: s.t: 5
    //DEBUG: s.s: 6
    //DEBUG: e.Tail$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & IsObfuscated-Tail:1/4 s.t/5 s.s/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & IsObfuscated-Tail/9 AsIs: e.Tail$a/10 AsIs: >/1 ]] }
    refalrts::reinit_name(context[9], functions[efunc_IsObfuscatedm_Tail]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & IsObfuscated-Tail:1/4 '*'/5 s.s/6 >/1
    if( ! refalrts::char_term( '*', context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.s: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & IsObfuscated-Tail:1/4 '*'/5 s.s/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsObfuscated-Tail:1/4 s.t/5 s.s/6 e.Tail$a/2 >/1
  // closed e.Tail$a as range 2
  //DEBUG: s.t: 5
  //DEBUG: s.s: 6
  //DEBUG: e.Tail$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsObfuscated-Tail:1/4 s.t/5 s.s/6 e.Tail$a/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsObfuscatedm_Tail_B1("IsObfuscated-Tail:1", COOKIE1_, COOKIE2_, func_gen_IsObfuscatedm_Tail_B1);


static refalrts::FnResult func_IsObfuscatedm_Tail(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & IsObfuscated-Tail/4 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Tail as range 2
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & IsObfuscated-Tail:1/6 Tile{ AsIs: </0 Reuse: & Type/4 AsIs: e.Tail/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_IsObfuscatedm_Tail_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Type]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsObfuscatedm_Tail("IsObfuscated-Tail", COOKIE1_, COOKIE2_, func_IsObfuscatedm_Tail);


static refalrts::FnResult func_CheckupFunctionStarts(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & CheckupFunctionStarts/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckupFunctionStarts/4 e.new1/2 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  // closed e.new2 as range 5
  do {
    // </0 & CheckupFunctionStarts/4 (/15 s.Offset/17 s.Type/18 e.Name/13 )/16 e.Table/9 (/7 e.Offsets-B/19 s.Offset/23 e.Offsets-E/21 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.Table as range 9
    if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
      continue;
    // closed e.Name as range 13
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::repeated_stvar_left( vm, context[23], context[17], context[21], context[22] ) )
        continue;
      // closed e.Offsets-E as range 21
      //DEBUG: e.Table: 9
      //DEBUG: s.Offset: 17
      //DEBUG: s.Type: 18
      //DEBUG: e.Name: 13
      //DEBUG: e.Offsets-B: 19
      //DEBUG: e.Offsets-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/15 s.Offset/17 s.Type/18 e.Name/13 )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckupFunctionStarts/4 } Tile{ AsIs: e.Table/9 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Offsets-B/19 } Tile{ AsIs: e.Offsets-E/21 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckupFunctionStarts/4 (/7 )/8 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckupFunctionStarts/4 (/7 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckupFunctionStarts/4 e.Table/2 (/7 e.Offsets/5 )/8 >/1
  // closed e.Table as range 2
  // closed e.Offsets as range 5
  //DEBUG: e.Table: 2
  //DEBUG: e.Offsets: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckupFunctionStarts/4 e.Table/2 (/7 e.Offsets/5 )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fail/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fail]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckupFunctionStarts("CheckupFunctionStarts", COOKIE1_, COOKIE2_, func_CheckupFunctionStarts);


static refalrts::FnResult func_CheckupEntries(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & CheckupEntries/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckupEntries/4 e.new1/2 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  // closed e.new2 as range 5
  do {
    // </0 & CheckupEntries/4 (/15 s.new3/17 s.new4/18 e.new5/13 )/16 e.new6/9 (/7 e.new7/11 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.new6 as range 9
    // closed e.new7 as range 11
    if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
      continue;
    // closed e.new5 as range 13
    do {
      // </0 & CheckupEntries/4 (/15 s.Offset/17 # Entry/18 e.Name/19 )/16 e.Table/21 (/7 e.Entries-B/25 (/31 e.Name/33 s.Offset/35 )/32 e.Entries-E/27 )/8 >/1
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[9];
      context[22] = context[10];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Entry], context[18] ) )
        continue;
      // closed e.Name as range 19
      // closed e.Table as range 21
      context[25] = 0;
      context[26] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[27] = context[23];
        context[28] = context[24];
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[19], context[20], context[29], context[30] ) )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[35], context[17], context[29], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        // closed e.Entries-E as range 27
        //DEBUG: s.Offset: 17
        //DEBUG: e.Name: 19
        //DEBUG: e.Table: 21
        //DEBUG: e.Entries-B: 25
        //DEBUG: e.Entries-E: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/15 s.Offset/17 # Entry/18 e.Name/19 )/16 {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} e.Name/33 s.Offset/35 )/32 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckupEntries/4 } Tile{ AsIs: e.Table/21 } Tile{ AsIs: (/31 } Tile{ AsIs: e.Entries-B/25 } Tile{ AsIs: e.Entries-E/27 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[31], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckupEntries/4 (/15 s.Offset/17 # Local/18 e.Name/19 )/16 e.Table/21 (/7 e.Entries/23 )/8 >/1
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_Local], context[18] ) )
      continue;
    // closed e.Name as range 19
    // closed e.Table as range 21
    // closed e.Entries as range 23
    //DEBUG: s.Offset: 17
    //DEBUG: e.Name: 19
    //DEBUG: e.Table: 21
    //DEBUG: e.Entries: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & CheckupEntries/4 (/15 s.Offset/17 # Local/18 e.Name/19 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckupEntries/16 AsIs: e.Table/21 AsIs: (/7 AsIs: e.Entries/23 AsIs: )/8 AsIs: >/1 ]] }
    refalrts::reinit_name(context[16], functions[efunc_CheckupEntries]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckupEntries/4 (/7 )/8 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckupEntries/4 (/7 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckupEntries/4 e.Table/2 (/7 e.Entries/5 )/8 >/1
  // closed e.Table as range 2
  // closed e.Entries as range 5
  //DEBUG: e.Table: 2
  //DEBUG: e.Entries: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckupEntries/4 e.Table/2 (/7 e.Entries/5 )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fail/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fail]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckupEntries("CheckupEntries", COOKIE1_, COOKIE2_, func_CheckupEntries);


static refalrts::FnResult func_gen_ResolveFunctions_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ResolveFunctions=1/4 (/7 e.Table$a/5 )/8 e.Code$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Table$a as range 5
  // closed e.Code$a as range 2
  //DEBUG: e.Table$a: 5
  //DEBUG: e.Code$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ResolveFunctions=1/4 (/7 e.Table$a/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Code$a/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveFunctions_A1("ResolveFunctions=1", COOKIE1_, COOKIE2_, func_gen_ResolveFunctions_A1);


static refalrts::FnResult func_gen_ResolveFunctions_A1L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ResolveFunctions=1\1=1/4 e.Function$a/2 (/7 e.Table$b/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Function$a as range 2
  // closed e.Table$b as range 5
  //DEBUG: e.Function$a: 2
  //DEBUG: e.Table$b: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Table$b/5 AsIs: )/8 HalfReuse: (/1 } Tile{ AsIs: e.Function$a/2 } Tile{ HalfReuse: )/4 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[1]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::link_brackets( context[1], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[1] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveFunctions_A1L1A1("ResolveFunctions=1\\1=1", COOKIE1_, COOKIE2_, func_gen_ResolveFunctions_A1L1A1);


static refalrts::FnResult func_ResolveFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & ResolveFunctions/4 e.Code/2 (/7 e.Table/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Code as range 2
  // closed e.Table as range 5
  //DEBUG: e.Code: 2
  //DEBUG: e.Table: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveFunctions=1/4 } </9 & DoMapAccum@1/10 Tile{ AsIs: (/7 AsIs: e.Table/5 AsIs: )/8 HalfReuse: (/1 } )/11 Tile{ AsIs: e.Code/2 } >/12 >/13 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveFunctions_A1]);
  refalrts::reinit_open_bracket(context[1]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[1], context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[7], context[1] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveFunctions("ResolveFunctions", COOKIE1_, COOKIE2_, func_ResolveFunctions);


static refalrts::FnResult func_ResolveFunctionsm_Body(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & ResolveFunctions-Body/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ResolveFunctions-Body/4 e.new1/2 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  // closed e.new2 as range 5
  do {
    // </0 & ResolveFunctions-Body/4 e.Code-B/13 (/21 s.Offset/23 # ACT1/24 s.FuncOffset/25 )/22 e.Code-E/15 (/7 e.Functions-B/26 (/32 s.FuncOffset/34 s.Type/35 e.Name/30 )/33 e.Functions-E/28 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[15], context[16] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.Code-E as range 15
      if( ! refalrts::svar_left( context[23], context[19], context[20] ) )
        continue;
      context[24] = refalrts::ident_left( identifiers[ident_ACT1], context[19], context[20] );
      if( ! context[24] )
        continue;
      if( ! refalrts::svar_left( context[25], context[19], context[20] ) )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      context[26] = 0;
      context[27] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[28] = context[17];
        context[29] = context[18];
        context[30] = 0;
        context[31] = 0;
        context[32] = refalrts::brackets_left( context[30], context[31], context[28], context[29] );
        if( ! context[32] )
          continue;
        refalrts::bracket_pointers(context[32], context[33]);
        if( ! refalrts::repeated_stvar_left( vm, context[34], context[25], context[30], context[31] ) )
          continue;
        // closed e.Functions-E as range 28
        if( ! refalrts::svar_left( context[35], context[30], context[31] ) )
          continue;
        // closed e.Name as range 30
        //DEBUG: e.Code-B: 13
        //DEBUG: e.Code-E: 15
        //DEBUG: s.Offset: 23
        //DEBUG: s.FuncOffset: 25
        //DEBUG: e.Functions-B: 26
        //DEBUG: e.Functions-E: 28
        //DEBUG: s.Type: 35
        //DEBUG: e.Name: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.FuncOffset/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: e.Code-B/13 } Tile{ AsIs: (/21 AsIs: s.Offset/23 AsIs: # ACT1/24 } e.Name/30/36 Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & ResolveFunctions-Body/22 AsIs: e.Code-E/15 AsIs: (/7 } Tile{ AsIs: (/32 AsIs: s.FuncOffset/34 AsIs: s.Type/35 AsIs: e.Name/30 AsIs: )/33 } Tile{ AsIs: e.Functions-B/26 } Tile{ AsIs: e.Functions-E/28 } Tile{ AsIs: )/8 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[36], context[37], context[30], context[31]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_name(context[22], functions[efunc_ResolveFunctionsm_Body]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[32], context[33] );
        refalrts::link_brackets( context[21], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[22], context[7] );
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_elem( res, context[4] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[21], context[24] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[26], context[27], context[17], context[18] ) );
    } while ( refalrts::open_evar_advance( context[13], context[14], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveFunctions-Body/4 e.Code/2 (/7 e.Functions/5 )/8 >/1
  // closed e.Code as range 2
  // closed e.Functions as range 5
  //DEBUG: e.Code: 2
  //DEBUG: e.Functions: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ResolveFunctions-Body/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Code/2 } Tile{ AsIs: (/7 AsIs: e.Functions/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveFunctionsm_Body("ResolveFunctions-Body", COOKIE1_, COOKIE2_, func_ResolveFunctionsm_Body);


static refalrts::FnResult func_gen_DecodeCommands_S28A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DecodeCommands$28=1/4 s.Offset/5 s.Count/6 (/9 e.Chars/7 )/10 e.Bytes$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Chars as range 7
  // closed e.Bytes$a as range 2
  //DEBUG: s.Offset: 5
  //DEBUG: s.Count: 6
  //DEBUG: e.Chars: 7
  //DEBUG: e.Bytes$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/11 s.Offset/5/12 # SYMS/13 Tile{ AsIs: s.Count/6 HalfReuse: </9 } & Chr/14 Tile{ AsIs: e.Chars/7 } >/15 )/16 </17 & DecodeCommands/18 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/5 } </19 & Add/20 2/21 s.Count/6/22 >/23 Tile{ HalfReuse: >/10 AsIs: e.Bytes$a/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_SYMS]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Chr]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_DecodeCommands]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[21], 2UL);
  refalrts::copy_stvar(vm, context[22], context[6]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::reinit_open_call(context[9]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[19], context[23] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeCommands_S28A1("DecodeCommands$28=1", COOKIE1_, COOKIE2_, func_gen_DecodeCommands_S28A1);


static refalrts::FnResult func_gen_DecodeCommands_S29A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DecodeCommands$29=1/4 s.Offset/5 s.Count/6 (/9 e.Chars/7 )/10 e.Bytes$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Chars as range 7
  // closed e.Bytes$a as range 2
  //DEBUG: s.Offset: 5
  //DEBUG: s.Count: 6
  //DEBUG: e.Chars: 7
  //DEBUG: e.Bytes$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/11 s.Offset/5/12 # SYMSR/13 Tile{ AsIs: s.Count/6 HalfReuse: </9 } & Chr/14 Tile{ AsIs: e.Chars/7 } >/15 )/16 </17 & DecodeCommands/18 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/5 } </19 & Add/20 2/21 s.Count/6/22 >/23 Tile{ HalfReuse: >/10 AsIs: e.Bytes$a/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_SYMSR]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Chr]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_DecodeCommands]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[21], 2UL);
  refalrts::copy_stvar(vm, context[22], context[6]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::reinit_open_call(context[9]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[19], context[23] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeCommands_S29A1("DecodeCommands$29=1", COOKIE1_, COOKIE2_, func_gen_DecodeCommands_S29A1);


static refalrts::FnResult func_gen_DecodeCommands_S30A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DecodeCommands$30=1/4 s.Offset/5 s.Count/6 (/9 e.Chars/7 )/10 e.Bytes$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Chars as range 7
  // closed e.Bytes$a as range 2
  //DEBUG: s.Offset: 5
  //DEBUG: s.Count: 6
  //DEBUG: e.Chars: 7
  //DEBUG: e.Bytes$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/11 s.Offset/5/12 # TEXT/13 Tile{ AsIs: s.Count/6 HalfReuse: </9 } & Chr/14 Tile{ AsIs: e.Chars/7 } >/15 )/16 </17 & DecodeCommands/18 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/5 } </19 & Add/20 2/21 s.Count/6/22 >/23 Tile{ HalfReuse: >/10 AsIs: e.Bytes$a/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_TEXT]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Chr]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_DecodeCommands]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[21], 2UL);
  refalrts::copy_stvar(vm, context[22], context[6]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::reinit_open_call(context[9]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[19], context[23] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeCommands_S30A1("DecodeCommands$30=1", COOKIE1_, COOKIE2_, func_gen_DecodeCommands_S30A1);


static refalrts::FnResult func_DecodeCommands(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DecodeCommands/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & DecodeCommands/4 s.new1/7 s.new2/8 e.new3/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    // closed e.new3 as range 5
    do {
      // </0 & DecodeCommands/4 s.Offset/7 1/8 e.Name/11 0/15 e.Bytes/13 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 1UL, context[8] ) )
        continue;
      context[11] = 0;
      context[12] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[13] = context[9];
        context[14] = context[10];
        context[15] = refalrts::number_left( 0UL, context[13], context[14] );
        if( ! context[15] )
          continue;
        // closed e.Bytes as range 13
        //DEBUG: s.Offset: 7
        //DEBUG: e.Name: 11
        //DEBUG: e.Bytes: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/16 s.Offset/7/17 # ACT_EXTRN/18 </19 & Chr/20 Tile{ AsIs: e.Name/11 } >/21 )/22 </23 & DecodeCommands/24 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 Reuse: 5/8 } Tile{ HalfReuse: >/15 AsIs: e.Bytes/13 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[16]);
        refalrts::copy_stvar(vm, context[17], context[7]);
        refalrts::alloc_ident(vm, context[18], identifiers[ident_ACTu_EXTRN]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Chr]);
        refalrts::alloc_close_call(vm, context[21]);
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_DecodeCommands]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 5UL);
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[22] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[21], context[24] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[16], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[11], context[12], context[9], context[10] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 2/8 s.1/11 s.2/12 s.3/13 s.4/14 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 2UL, context[8] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[12], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: s.1: 11
      //DEBUG: s.2: 12
      //DEBUG: s.3: 13
      //DEBUG: s.4: 14
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/15 s.Offset/7/16 # ACT1/17 </18 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/12 AsIs: s.3/13 AsIs: s.4/14 } >/19 )/20 </21 & DecodeCommands/22 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/23 >/24 Tile{ AsIs: e.Bytes/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::copy_stvar(vm, context[16], context[7]);
      refalrts::alloc_ident(vm, context[17], identifiers[ident_ACT1]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[23], 5UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 3/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 3UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # BL/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_BL]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 4/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 4UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # BLR/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_BLR]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 5/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 5UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # BR/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_BR]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 6/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 6UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # CL/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_CL]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new4/7 s.new5/8 s.new6/11 e.new7/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.new7 as range 9
      do {
        // </0 & DecodeCommands/4 s.Offset/7 7/8 s.Char/11 e.Bytes/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 7UL, context[8] ) )
          continue;
        // closed e.Bytes as range 12
        //DEBUG: s.Offset: 7
        //DEBUG: s.Char: 11
        //DEBUG: e.Bytes: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset/7/15 # SYM/16 s.Char/11/17 </18 & Chr/19 Tile{ AsIs: s.Char/11 } >/20 )/21 </22 & DecodeCommands/23 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 Reuse: 2/8 } >/24 Tile{ AsIs: e.Bytes/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[7]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_SYM]);
        refalrts::copy_stvar(vm, context[17], context[11]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_Chr]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[20], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[14], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset/7 8/8 s.Char/11 e.Bytes/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::number_term( 8UL, context[8] ) )
        continue;
      // closed e.Bytes as range 12
      //DEBUG: s.Offset: 7
      //DEBUG: s.Char: 11
      //DEBUG: e.Bytes: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 s.Offset/7/15 # SYMR/16 s.Char/11/17 </18 & Chr/19 Tile{ AsIs: s.Char/11 } >/20 )/21 </22 & DecodeCommands/23 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 Reuse: 2/8 } >/24 Tile{ AsIs: e.Bytes/12 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::copy_stvar(vm, context[15], context[7]);
      refalrts::alloc_ident(vm, context[16], identifiers[ident_SYMR]);
      refalrts::copy_stvar(vm, context[17], context[11]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Chr]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::update_number(context[8], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[20], context[23] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[14], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 10/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 10UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # EMP/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_EMP]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new4/7 s.new5/8 s.new6/11 s.new7/12 s.new8/13 s.new9/14 e.new10/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[12], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
        continue;
      // closed e.new10 as range 9
      do {
        // </0 & DecodeCommands/4 s.Offset/7 13/8 s.1/11 s.2/12 s.3/13 s.4/14 e.Bytes/15 >/1
        context[15] = context[9];
        context[16] = context[10];
        if( ! refalrts::number_term( 13UL, context[8] ) )
          continue;
        // closed e.Bytes as range 15
        //DEBUG: s.Offset: 7
        //DEBUG: s.1: 11
        //DEBUG: s.2: 12
        //DEBUG: s.3: 13
        //DEBUG: s.4: 14
        //DEBUG: e.Bytes: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/17 s.Offset/7/18 # MULE/19 </20 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/12 AsIs: s.3/13 AsIs: s.4/14 } >/21 )/22 </23 & DecodeCommands/24 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/25 >/26 Tile{ AsIs: e.Bytes/15 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[17]);
        refalrts::copy_stvar(vm, context[18], context[7]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_MULE]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_close_call(vm, context[21]);
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[25], 5UL);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[22] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_evar( res, context[21], context[24] );
        res = refalrts::splice_evar( res, context[8], context[14] );
        res = refalrts::splice_evar( res, context[17], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset/7 14/8 s.1/11 s.2/12 s.3/13 s.4/14 e.Bytes/15 >/1
      context[15] = context[9];
      context[16] = context[10];
      if( ! refalrts::number_term( 14UL, context[8] ) )
        continue;
      // closed e.Bytes as range 15
      //DEBUG: s.Offset: 7
      //DEBUG: s.1: 11
      //DEBUG: s.2: 12
      //DEBUG: s.3: 13
      //DEBUG: s.4: 14
      //DEBUG: e.Bytes: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/17 s.Offset/7/18 # MULS/19 </20 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/12 AsIs: s.3/13 AsIs: s.4/14 } >/21 )/22 </23 & DecodeCommands/24 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/25 >/26 Tile{ AsIs: e.Bytes/15 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[17]);
      refalrts::copy_stvar(vm, context[18], context[7]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_MULS]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[25], 5UL);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[22] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[21], context[24] );
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 16/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 16UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # PLEN/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PLEN]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 17/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 17UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # PLENS/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PLENS]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 18/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 18UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # PLENP/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PLENP]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 19/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 19UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # PS/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PS]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 20/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 20UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # PSR/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PSR]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new4/7 s.new5/8 s.new6/11 e.new7/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.new7 as range 9
      do {
        // </0 & DecodeCommands/4 s.Offset/7 23/8 s.No/11 e.Bytes/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 23UL, context[8] ) )
          continue;
        // closed e.Bytes as range 12
        //DEBUG: s.Offset: 7
        //DEBUG: s.No: 11
        //DEBUG: e.Bytes: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset/7/15 # OEXP/16 Tile{ AsIs: s.No/11 } )/17 </18 & DecodeCommands/19 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 Reuse: 2/8 } >/20 Tile{ AsIs: e.Bytes/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[7]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_OEXP]);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[14], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 24/8 s.No/11 e.Bytes/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 24UL, context[8] ) )
          continue;
        // closed e.Bytes as range 12
        //DEBUG: s.Offset: 7
        //DEBUG: s.No: 11
        //DEBUG: e.Bytes: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset/7/15 # OEXPR/16 Tile{ AsIs: s.No/11 } )/17 </18 & DecodeCommands/19 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 Reuse: 2/8 } >/20 Tile{ AsIs: e.Bytes/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[7]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_OEXPR]);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[14], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 25/8 s.No/11 e.Bytes/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 25UL, context[8] ) )
          continue;
        // closed e.Bytes as range 12
        //DEBUG: s.Offset: 7
        //DEBUG: s.No: 11
        //DEBUG: e.Bytes: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset/7/15 # OVSYM/16 Tile{ AsIs: s.No/11 } )/17 </18 & DecodeCommands/19 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 Reuse: 2/8 } >/20 Tile{ AsIs: e.Bytes/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[7]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_OVSYM]);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[14], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset/7 26/8 s.No/11 e.Bytes/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::number_term( 26UL, context[8] ) )
        continue;
      // closed e.Bytes as range 12
      //DEBUG: s.Offset: 7
      //DEBUG: s.No: 11
      //DEBUG: e.Bytes: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 s.Offset/7/15 # OVSYMR/16 Tile{ AsIs: s.No/11 } )/17 </18 & DecodeCommands/19 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 Reuse: 2/8 } >/20 Tile{ AsIs: e.Bytes/12 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::copy_stvar(vm, context[15], context[7]);
      refalrts::alloc_ident(vm, context[16], identifiers[ident_OVSYMR]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::update_number(context[8], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[14], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 27/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 27UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # TERM/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_TERM]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 28/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 28UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # TERMR/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_TERMR]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new4/7 s.new5/8 s.new6/11 e.new7/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.new7 as range 9
      do {
        // </0 & DecodeCommands/4 s.Offset/7 29/8 s.Number/11 e.Bytes/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 29UL, context[8] ) )
          continue;
        // closed e.Bytes as range 12
        //DEBUG: s.Offset: 7
        //DEBUG: s.Number: 11
        //DEBUG: e.Bytes: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset/7/15 # RDY/16 Tile{ AsIs: s.Number/11 } )/17 </18 & DecodeCommands/19 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 Reuse: 2/8 } >/20 Tile{ AsIs: e.Bytes/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[7]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_RDY]);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[14], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset/7 34/8 s.L1/11 s.L2/14 s.L3/15 s.L4/16 s.R1/17 s.R2/18 s.R3/19 s.R4/20 e.Bytes/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::number_term( 34UL, context[8] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[17], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[18], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[19], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[20], context[12], context[13] ) )
        continue;
      // closed e.Bytes as range 12
      //DEBUG: s.Offset: 7
      //DEBUG: s.L1: 11
      //DEBUG: s.L2: 14
      //DEBUG: s.L3: 15
      //DEBUG: s.L4: 16
      //DEBUG: s.R1: 17
      //DEBUG: s.R2: 18
      //DEBUG: s.R3: 19
      //DEBUG: s.R4: 20
      //DEBUG: e.Bytes: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21 s.Offset/7/22 # SETB/23 </24 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.L1/11 AsIs: s.L2/14 AsIs: s.L3/15 AsIs: s.L4/16 } >/25 </26 & MakeDWord/27 Tile{ AsIs: s.R1/17 AsIs: s.R2/18 AsIs: s.R3/19 AsIs: s.R4/20 } >/28 )/29 </30 & DecodeCommands/31 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 9/32 >/33 Tile{ AsIs: e.Bytes/12 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::copy_stvar(vm, context[22], context[7]);
      refalrts::alloc_ident(vm, context[23], identifiers[ident_SETB]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_MakeDWord]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[32], 9UL);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[29] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_evar( res, context[21], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 35/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 35UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # LEN/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_LEN]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 36/8 s.Char/11 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 36UL, context[8] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: s.Char: 11
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/12 s.Offset/7/13 # LENS/14 </15 & Chr/16 Tile{ AsIs: s.Char/11 } >/17 )/18 </19 & DecodeCommands/20 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 Reuse: 2/8 } >/21 Tile{ AsIs: e.Bytes/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::copy_stvar(vm, context[13], context[7]);
      refalrts::alloc_ident(vm, context[14], identifiers[ident_LENS]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Chr]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_DecodeCommands]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::update_number(context[8], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[12], context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[12], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 37/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 37UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # LENP/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_LENP]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.new4/7 s.new5/8 s.new6/11 e.new7/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.new7 as range 9
      do {
        // </0 & DecodeCommands/4 s.Offset/7 39/8 s.Count/11 e.Bytes/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 39UL, context[8] ) )
          continue;
        // closed e.Bytes as range 12
        //DEBUG: s.Offset: 7
        //DEBUG: s.Count: 11
        //DEBUG: e.Bytes: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeCommands$28=1/4 AsIs: s.Offset/7 HalfReuse: s.Count11 /8 } </14 & First/15 Tile{ AsIs: s.Count/11 AsIs: e.Bytes/12 AsIs: >/1 } >/16 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_First]);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::update_name(context[4], functions[efunc_gen_DecodeCommands_S28A1]);
        refalrts::reinit_svar( context[8], context[11] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 40/8 s.Count/11 e.Bytes/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 40UL, context[8] ) )
          continue;
        // closed e.Bytes as range 12
        //DEBUG: s.Offset: 7
        //DEBUG: s.Count: 11
        //DEBUG: e.Bytes: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeCommands$29=1/4 AsIs: s.Offset/7 HalfReuse: s.Count11 /8 } </14 & First/15 Tile{ AsIs: s.Count/11 AsIs: e.Bytes/12 AsIs: >/1 } >/16 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_First]);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::update_name(context[4], functions[efunc_gen_DecodeCommands_S29A1]);
        refalrts::reinit_svar( context[8], context[11] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 41/8 s.Count/11 e.Bytes/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 41UL, context[8] ) )
          continue;
        // closed e.Bytes as range 12
        //DEBUG: s.Offset: 7
        //DEBUG: s.Count: 11
        //DEBUG: e.Bytes: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecodeCommands$30=1/4 AsIs: s.Offset/7 HalfReuse: s.Count11 /8 } </14 & First/15 Tile{ AsIs: s.Count/11 AsIs: e.Bytes/12 AsIs: >/1 } >/16 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_First]);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::update_name(context[4], functions[efunc_gen_DecodeCommands_S30A1]);
        refalrts::reinit_svar( context[8], context[11] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 43/8 s.Char/11 e.Bytes/12 >/1
        context[12] = context[9];
        context[13] = context[10];
        if( ! refalrts::number_term( 43UL, context[8] ) )
          continue;
        // closed e.Bytes as range 12
        //DEBUG: s.Offset: 7
        //DEBUG: s.Char: 11
        //DEBUG: e.Bytes: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/14 s.Offset/7/15 # NS/16 s.Char/11/17 </18 & Chr/19 Tile{ AsIs: s.Char/11 } >/20 )/21 </22 & DecodeCommands/23 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 Reuse: 2/8 } >/24 Tile{ AsIs: e.Bytes/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[14]);
        refalrts::copy_stvar(vm, context[15], context[7]);
        refalrts::alloc_ident(vm, context[16], identifiers[ident_NS]);
        refalrts::copy_stvar(vm, context[17], context[11]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_Chr]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::update_number(context[8], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[20], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[14], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.new8/7 s.new9/8 s.new10/11 s.new11/14 s.new12/15 s.new13/16 e.new14/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
        continue;
      // closed e.new14 as range 12
      do {
        // </0 & DecodeCommands/4 s.Offset/7 45/8 s.1/11 s.2/14 s.3/15 s.4/16 e.Bytes/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 45UL, context[8] ) )
          continue;
        // closed e.Bytes as range 17
        //DEBUG: s.Offset: 7
        //DEBUG: s.1: 11
        //DEBUG: s.2: 14
        //DEBUG: s.3: 15
        //DEBUG: s.4: 16
        //DEBUG: e.Bytes: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset/7/20 # TPLE/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/27 >/28 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[7]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_TPLE]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 46/8 s.1/11 s.2/14 s.3/15 s.4/16 e.Bytes/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 46UL, context[8] ) )
          continue;
        // closed e.Bytes as range 17
        //DEBUG: s.Offset: 7
        //DEBUG: s.1: 11
        //DEBUG: s.2: 14
        //DEBUG: s.3: 15
        //DEBUG: s.4: 16
        //DEBUG: e.Bytes: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset/7/20 # TPLS/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/27 >/28 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[7]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_TPLS]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset/7 47/8 s.1/11 s.2/14 s.3/15 s.4/16 e.Bytes/17 >/1
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::number_term( 47UL, context[8] ) )
        continue;
      // closed e.Bytes as range 17
      //DEBUG: s.Offset: 7
      //DEBUG: s.1: 11
      //DEBUG: s.2: 14
      //DEBUG: s.3: 15
      //DEBUG: s.4: 16
      //DEBUG: e.Bytes: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/19 s.Offset/7/20 # TRAN/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/27 >/28 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::copy_stvar(vm, context[20], context[7]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_TRAN]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[27], 5UL);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 48/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 48UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # VSYM/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_VSYM]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 49/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 49UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # VSYMR/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_VSYMR]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 50/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 50UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # OUTEST/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_OUTEST]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 51/8 s.1/11 s.2/12 s.3/13 s.4/14 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 51UL, context[8] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[12], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: s.1: 11
      //DEBUG: s.2: 12
      //DEBUG: s.3: 13
      //DEBUG: s.4: 14
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/15 s.Offset/7/16 # ECOND/17 </18 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/12 AsIs: s.3/13 AsIs: s.4/14 } >/19 )/20 </21 & DecodeCommands/22 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/23 >/24 Tile{ AsIs: e.Bytes/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::copy_stvar(vm, context[16], context[7]);
      refalrts::alloc_ident(vm, context[17], identifiers[ident_ECOND]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[23], 5UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 52/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 52UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # POPVF/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_POPVF]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 53/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 53UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # PUSHVF/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_PUSHVF]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 54/8 e.Bytes/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::number_term( 54UL, context[8] ) )
        continue;
      // closed e.Bytes as range 9
      //DEBUG: s.Offset: 7
      //DEBUG: e.Bytes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 s.Offset/7/12 # STLEN/13 )/14 </15 & DecodeCommands/16 </17 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.Offset/7 HalfReuse: >/8 AsIs: e.Bytes/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::copy_stvar(vm, context[12], context[7]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_STLEN]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DecodeCommands/4 s.new4/7 s.new5/8 s.new6/11 e.new7/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
      continue;
    // closed e.new7 as range 9
    do {
      // </0 & DecodeCommands/4 s.new8/7 s.new9/8 s.new10/11 s.new11/14 s.new12/15 s.new13/16 e.new14/12 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
        continue;
      // closed e.new14 as range 12
      do {
        // </0 & DecodeCommands/4 s.Offset/7 55/8 s.1/11 s.2/14 s.3/15 s.4/16 e.Bytes/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 55UL, context[8] ) )
          continue;
        // closed e.Bytes as range 17
        //DEBUG: s.Offset: 7
        //DEBUG: s.1: 11
        //DEBUG: s.2: 14
        //DEBUG: s.3: 15
        //DEBUG: s.4: 16
        //DEBUG: e.Bytes: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset/7/20 # CSYM/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/27 >/28 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[7]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_CSYM]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 56/8 s.1/11 s.2/14 s.3/15 s.4/16 e.Bytes/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 56UL, context[8] ) )
          continue;
        // closed e.Bytes as range 17
        //DEBUG: s.Offset: 7
        //DEBUG: s.1: 11
        //DEBUG: s.2: 14
        //DEBUG: s.3: 15
        //DEBUG: s.4: 16
        //DEBUG: e.Bytes: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset/7/20 # CSYMR/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/27 >/28 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[7]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_CSYMR]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 57/8 s.1/11 s.2/14 s.3/15 s.4/16 e.Bytes/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 57UL, context[8] ) )
          continue;
        // closed e.Bytes as range 17
        //DEBUG: s.Offset: 7
        //DEBUG: s.1: 11
        //DEBUG: s.2: 14
        //DEBUG: s.3: 15
        //DEBUG: s.4: 16
        //DEBUG: e.Bytes: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset/7/20 # NSYM/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/27 >/28 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[7]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_NSYM]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 58/8 s.1/11 s.2/14 s.3/15 s.4/16 e.Bytes/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 58UL, context[8] ) )
          continue;
        // closed e.Bytes as range 17
        //DEBUG: s.Offset: 7
        //DEBUG: s.1: 11
        //DEBUG: s.2: 14
        //DEBUG: s.3: 15
        //DEBUG: s.4: 16
        //DEBUG: e.Bytes: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset/7/20 # NSYMR/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/27 >/28 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[7]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_NSYMR]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 59/8 s.1/11 s.2/14 s.3/15 s.4/16 e.Bytes/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 59UL, context[8] ) )
          continue;
        // closed e.Bytes as range 17
        //DEBUG: s.Offset: 7
        //DEBUG: s.1: 11
        //DEBUG: s.2: 14
        //DEBUG: s.3: 15
        //DEBUG: s.4: 16
        //DEBUG: e.Bytes: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset/7/20 # NCS/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/27 >/28 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[7]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_NCS]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands/4 s.Offset/7 60/8 s.1/11 s.2/14 s.3/15 s.4/16 e.Bytes/17 >/1
        context[17] = context[12];
        context[18] = context[13];
        if( ! refalrts::number_term( 60UL, context[8] ) )
          continue;
        // closed e.Bytes as range 17
        //DEBUG: s.Offset: 7
        //DEBUG: s.1: 11
        //DEBUG: s.2: 14
        //DEBUG: s.3: 15
        //DEBUG: s.4: 16
        //DEBUG: e.Bytes: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 s.Offset/7/20 # NNS/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/27 >/28 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::copy_stvar(vm, context[20], context[7]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_NNS]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[27], 5UL);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[19], context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_evar( res, context[23], context[26] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands/4 s.Offset/7 100/8 s.1/11 s.2/14 s.3/15 s.4/16 e.Bytes/17 >/1
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::number_term( 100UL, context[8] ) )
        continue;
      // closed e.Bytes as range 17
      //DEBUG: s.Offset: 7
      //DEBUG: s.1: 11
      //DEBUG: s.2: 14
      //DEBUG: s.3: 15
      //DEBUG: s.4: 16
      //DEBUG: e.Bytes: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/19 s.Offset/7/20 # BUILT_IN/21 </22 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.1/11 AsIs: s.2/14 AsIs: s.3/15 AsIs: s.4/16 } >/23 )/24 </25 & DecodeCommands/26 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 } 5/27 >/28 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::copy_stvar(vm, context[20], context[7]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_BUILTu_IN]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[27], 5UL);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DecodeCommands/4 s.new8/7 s.new9/8 0/11 e.new10/12 >/1
    context[12] = context[9];
    context[13] = context[10];
    if( ! refalrts::number_term( 0UL, context[11] ) )
      continue;
    // closed e.new10 as range 12
    do {
      // </0 & DecodeCommands/4 s.Offset/7 102/8 0/11 e.Name/16 0/20 e.Bytes/18 >/1
      context[14] = context[12];
      context[15] = context[13];
      if( ! refalrts::number_term( 102UL, context[8] ) )
        continue;
      context[16] = 0;
      context[17] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[18] = context[14];
        context[19] = context[15];
        context[20] = refalrts::number_left( 0UL, context[18], context[19] );
        if( ! context[20] )
          continue;
        // closed e.Bytes as range 18
        //DEBUG: s.Offset: 7
        //DEBUG: e.Name: 16
        //DEBUG: e.Bytes: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/21 s.Offset/7/22 # L/23 </24 & Chr/25 Tile{ AsIs: e.Name/16 } >/26 )/27 </28 & DecodeCommands/29 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 HalfReuse: </8 HalfReuse: & Len=1/11 } </30 & Lenw/31 102/32 0/33 e.Name/16/34 >/36 >/37 Tile{ HalfReuse: >/20 AsIs: e.Bytes/18 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[21]);
        refalrts::copy_stvar(vm, context[22], context[7]);
        refalrts::alloc_ident(vm, context[23], identifiers[ident_L]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Chr]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::alloc_close_bracket(vm, context[27]);
        refalrts::alloc_open_call(vm, context[28]);
        refalrts::alloc_name(vm, context[29], functions[efunc_DecodeCommands]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_Lenw]);
        refalrts::alloc_number(vm, context[32], 102UL);
        refalrts::alloc_number(vm, context[33], 0UL);
        refalrts::copy_evar(vm, context[34], context[35], context[16], context[17]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_name(context[11], functions[efunc_gen_Len_A1]);
        refalrts::reinit_close_call(context[20]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[21], context[27] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[24] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_evar( res, context[30], context[37] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_evar( res, context[26], context[29] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[21], context[25] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[16], context[17], context[14], context[15] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands/4 s.Offset/7 103/8 0/11 e.Name/16 0/20 e.Bytes/18 >/1
      context[14] = context[12];
      context[15] = context[13];
      if( ! refalrts::number_term( 103UL, context[8] ) )
        continue;
      context[16] = 0;
      context[17] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[18] = context[14];
        context[19] = context[15];
        context[20] = refalrts::number_left( 0UL, context[18], context[19] );
        if( ! context[20] )
          continue;
        // closed e.Bytes as range 18
        //DEBUG: s.Offset: 7
        //DEBUG: e.Name: 16
        //DEBUG: e.Bytes: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/21 s.Offset/7/22 # E/23 </24 & Chr/25 Tile{ AsIs: e.Name/16 } >/26 )/27 </28 & DecodeCommands/29 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 HalfReuse: </8 HalfReuse: & Len=1/11 } </30 & Lenw/31 103/32 0/33 e.Name/16/34 >/36 >/37 Tile{ HalfReuse: >/20 AsIs: e.Bytes/18 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[21]);
        refalrts::copy_stvar(vm, context[22], context[7]);
        refalrts::alloc_ident(vm, context[23], identifiers[ident_E]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Chr]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::alloc_close_bracket(vm, context[27]);
        refalrts::alloc_open_call(vm, context[28]);
        refalrts::alloc_name(vm, context[29], functions[efunc_DecodeCommands]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_Lenw]);
        refalrts::alloc_number(vm, context[32], 103UL);
        refalrts::alloc_number(vm, context[33], 0UL);
        refalrts::copy_evar(vm, context[34], context[35], context[16], context[17]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_name(context[11], functions[efunc_gen_Len_A1]);
        refalrts::reinit_close_call(context[20]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[21], context[27] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[24] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_evar( res, context[30], context[37] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_evar( res, context[26], context[29] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[21], context[25] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[16], context[17], context[14], context[15] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DecodeCommands/4 s.Offset/7 104/8 0/11 e.Name/16 0/20 e.Bytes/18 >/1
    context[14] = context[12];
    context[15] = context[13];
    if( ! refalrts::number_term( 104UL, context[8] ) )
      continue;
    context[16] = 0;
    context[17] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[18] = context[14];
      context[19] = context[15];
      context[20] = refalrts::number_left( 0UL, context[18], context[19] );
      if( ! context[20] )
        continue;
      // closed e.Bytes as range 18
      //DEBUG: s.Offset: 7
      //DEBUG: e.Name: 16
      //DEBUG: e.Bytes: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21 s.Offset/7/22 # LABEL/23 </24 & Chr/25 Tile{ AsIs: e.Name/16 } >/26 )/27 </28 & DecodeCommands/29 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/7 HalfReuse: </8 HalfReuse: & Len=1/11 } </30 & Lenw/31 103/32 0/33 e.Name/16/34 >/36 >/37 Tile{ HalfReuse: >/20 AsIs: e.Bytes/18 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::copy_stvar(vm, context[22], context[7]);
      refalrts::alloc_ident(vm, context[23], identifiers[ident_LABEL]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_Chr]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_Lenw]);
      refalrts::alloc_number(vm, context[32], 103UL);
      refalrts::alloc_number(vm, context[33], 0UL);
      refalrts::copy_evar(vm, context[34], context[35], context[16], context[17]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[11], functions[efunc_gen_Len_A1]);
      refalrts::reinit_close_call(context[20]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[21], context[27] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[30], context[37] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[26], context[29] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[21], context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[16], context[17], context[14], context[15] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeCommands/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & DecodeCommands/4 s.Offset/5 105/8 s.L1/9 s.L2/10 s.L3/11 s.L4/12 s.R1/13 s.R2/14 s.R3/15 s.R4/16 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = refalrts::number_left( 105UL, context[6], context[7] );
    if( ! context[8] )
      continue;
    if( ! refalrts::svar_left( context[9], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[10], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[6], context[7] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: s.Offset: 5
    //DEBUG: s.L1: 9
    //DEBUG: s.L2: 10
    //DEBUG: s.L3: 11
    //DEBUG: s.L4: 12
    //DEBUG: s.R1: 13
    //DEBUG: s.R2: 14
    //DEBUG: s.R3: 15
    //DEBUG: s.R4: 16
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/17 s.Offset/5/18 # BUILT_IN1/19 </20 Tile{ HalfReuse: & MakeDWord/8 AsIs: s.L1/9 AsIs: s.L2/10 AsIs: s.L3/11 AsIs: s.L4/12 } >/21 </22 & MakeDWord/23 Tile{ AsIs: s.R1/13 AsIs: s.R2/14 AsIs: s.R3/15 AsIs: s.R4/16 } >/24 )/25 </26 & DecodeCommands/27 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.Offset/5 } 9/28 >/29 Tile{ AsIs: e.Bytes/6 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::copy_stvar(vm, context[18], context[5]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_BUILTu_IN1]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_MakeDWord]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_DecodeCommands]);
    refalrts::alloc_number(vm, context[28], 9UL);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::reinit_name(context[8], functions[efunc_MakeDWord]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[25] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[21], context[23] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DecodeCommands/4 s.Offset/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.Offset: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DecodeCommands/4 s.Offset/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Offset5 /1 ]] }
    refalrts::reinit_svar( context[1], context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeCommands/4 s.Offset/5 e.Bytes/2 >/1
  // closed e.Bytes as range 2
  //DEBUG: s.Offset: 5
  //DEBUG: e.Bytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Offset/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: s.Offset5 /4 } # RawBytes/6 Tile{ AsIs: e.Bytes/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[6], identifiers[ident_RawBytes]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_svar( context[4], context[5] );
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DecodeCommands("DecodeCommands", COOKIE1_, COOKIE2_, func_DecodeCommands);


static refalrts::FnResult func_gen_Len_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Len=1/4 s.Len/5 e.String$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.String$a as range 2
  //DEBUG: s.Len: 5
  //DEBUG: e.String$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Len=1/4 s.Len/5 e.String$a/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Len5 /1 ]] }
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Len_A1("Len=1", COOKIE1_, COOKIE2_, func_gen_Len_A1);


static refalrts::FnResult func_Len(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Len/4 e.String/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String as range 2
  //DEBUG: e.String: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Len=1/6 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.String/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Len_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Lenw]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Len("Len", COOKIE1_, COOKIE2_, func_Len);


static refalrts::FnResult func_DEBUG(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DEBUG/4 e.Bytes/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Bytes as range 2
  //DEBUG: e.Bytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Prout/6"all bytes\n"/7 e.Bytes/2/9 >/11 </12 & Prout/13 Tile{ AsIs: </0 Reuse: & Chr/4 AsIs: e.Bytes/2 AsIs: >/1 } >/14 </15 & Prout/16"all strings"/17 >/19 </20 & AllString/21 </22 & Chr/23 e.Bytes/2/24 >/26 >/27 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_Prout]);
  refalrts::alloc_chars(vm, context[7], context[8], "all bytes\n", 10);
  refalrts::copy_evar(vm, context[9], context[10], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_Prout]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_Prout]);
  refalrts::alloc_chars(vm, context[17], context[18], "all strings", 11);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_AllString]);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_Chr]);
  refalrts::copy_evar(vm, context[24], context[25], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::update_name(context[4], functions[efunc_Chr]);
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[27] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DEBUG("DEBUG", COOKIE1_, COOKIE2_, func_DEBUG);


static refalrts::FnResult func_AllString(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & AllString/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & AllString/4 e.String/7 '\000'/11 e.Tail/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = refalrts::char_left( '\000', context[9], context[10] );
      if( ! context[11] )
        continue;
      // closed e.Tail as range 9
      //DEBUG: e.String: 7
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prout/4 AsIs: e.String/7 HalfReuse: >/11 } </12 & Prout/13 </14 & Ord/15 e.String/7/16 >/18 0/19 >/20 </21 & AllString/22 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[12]);
      refalrts::alloc_name(vm, context[13], functions[efunc_Prout]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Ord]);
      refalrts::copy_evar(vm, context[16], context[17], context[7], context[8]);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_number(vm, context[19], 0UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_AllString]);
      refalrts::update_name(context[4], functions[efunc_Prout]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[12], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AllString/4 e.String/2 >/1
  // closed e.String as range 2
  //DEBUG: e.String: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prout/4 AsIs: e.String/2 AsIs: >/1 } </5 & Prout/6 </7 & Ord/8 e.String/2/9 >/11 >/12 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_Prout]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_Ord]);
  refalrts::copy_evar(vm, context[9], context[10], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_Prout]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AllString("AllString", COOKIE1_, COOKIE2_, func_AllString);


static refalrts::FnResult func_gen_DecompileFunction_S3A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DecompileFunction$3=3/4 (/7 e.MaybeEntry/5 )/8 (/11 e.Name/9 )/12 e.Lines/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.MaybeEntry as range 5
  // closed e.Name as range 9
  // closed e.Lines as range 2
  //DEBUG: e.MaybeEntry: 5
  //DEBUG: e.Name: 9
  //DEBUG: e.Lines: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.MaybeEntry/5 HalfReuse: </8 HalfReuse: & FormatWord:1/11 } Tile{ AsIs: </0 } & Type/13 Tile{ AsIs: e.Name/9 } >/14 >/15" {"/16 Tile{ AsIs: )/12 AsIs: e.Lines/2 HalfReuse: (/1 } '}'/18 )/19 )/20 Tile{ ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_Type]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_chars(vm, context[16], context[17], " {", 2);
  refalrts::alloc_char(vm, context[18], '}');
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[11], functions[efunc_gen_FormatWord_B1]);
  refalrts::reinit_open_bracket(context[1]);
  refalrts::link_brackets( context[4], context[20] );
  refalrts::link_brackets( context[1], context[19] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[18], context[20] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[14], context[17] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecompileFunction_S3A3("DecompileFunction$3=3", COOKIE1_, COOKIE2_, func_gen_DecompileFunction_S3A3);


static refalrts::FnResult func_gen_DecompileFunction_S3A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DecompileFunction$3=2/4 (/7 e.Name/5 )/8 (/11 e.Segments/9 )/12 e.MaybeEntry/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Name as range 5
  // closed e.Segments as range 9
  // closed e.MaybeEntry as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.Segments: 9
  //DEBUG: e.MaybeEntry: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecompileFunction$3=3/4 AsIs: (/7 } Tile{ AsIs: e.MaybeEntry/2 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Name/5 } Tile{ AsIs: )/12 } </13 & DoCollectSegments/14 0/15 (/16"  "/17 )/19 Tile{ AsIs: e.Segments/9 } >/20 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_DoCollectSegments]);
  refalrts::alloc_number(vm, context[15], 0UL);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_chars(vm, context[17], context[18], "  ", 2);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_S3A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[16], context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[19] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecompileFunction_S3A2("DecompileFunction$3=2", COOKIE1_, COOKIE2_, func_gen_DecompileFunction_S3A2);


static refalrts::FnResult func_gen_DecompileFunction_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DecompileFunction$3=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecompileFunction$3=1/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & DecompileFunction$3=1/4 (/7 e.Name/10 )/8 # L/9 e.Segments/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_L], context[9] ) )
      continue;
    // closed e.Name as range 10
    // closed e.Segments as range 12
    //DEBUG: e.Name: 10
    //DEBUG: e.Segments: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecompileFunction$3=3@1/4 AsIs: (/7 AsIs: e.Name/10 AsIs: )/8 HalfReuse: </9 } & DoCollectSegments/14 0/15 (/16"  "/17 )/19 Tile{ AsIs: e.Segments/12 } >/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_DoCollectSegments]);
    refalrts::alloc_number(vm, context[15], 0UL);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_chars(vm, context[17], context[18], "  ", 2);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_S3A3Z1]);
    refalrts::reinit_open_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[16], context[19] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[14], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DecompileFunction$3=1/4 (/7 e.Name/10 )/8 # E/9 e.Segments/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_E], context[9] ) )
      continue;
    // closed e.Name as range 10
    // closed e.Segments as range 12
    //DEBUG: e.Name: 10
    //DEBUG: e.Segments: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecompileFunction$3=3@2/4 AsIs: (/7 AsIs: e.Name/10 AsIs: )/8 HalfReuse: </9 } & DoCollectSegments/14 0/15 (/16"  "/17 )/19 Tile{ AsIs: e.Segments/12 } >/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_DoCollectSegments]);
    refalrts::alloc_number(vm, context[15], 0UL);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_chars(vm, context[17], context[18], "  ", 2);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_S3A3Z2]);
    refalrts::reinit_open_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[16], context[19] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[14], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecompileFunction$3=1/4 (/7 e.Name/5 )/8 s.DeclCommand/9 e.Segments/2 >/1
  // closed e.Name as range 5
  // closed e.Segments as range 2
  //DEBUG: s.DeclCommand: 9
  //DEBUG: e.Name: 5
  //DEBUG: e.Segments: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecompileFunction$3=2/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 } (/10 Tile{ AsIs: e.Segments/2 } )/11 </12 & DecompileFunction$3=2:1*2/13 Tile{ AsIs: s.DeclCommand/9 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_DecompileFunction_S3A2B1D2]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_S3A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecompileFunction_S3A1("DecompileFunction$3=1", COOKIE1_, COOKIE2_, func_gen_DecompileFunction_S3A1);


static refalrts::FnResult func_DecompileFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DecompileFunction/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecompileFunction/4 (/7 t.new1/9 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 5
  do {
    // </0 & DecompileFunction/4 (/7 t.new3/9 (/15 e.new4/13 s.new5/19 s.new6/18 s.new7/17 )/16 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_right( context[17], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_right( context[18], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_right( context[19], context[13], context[14] ) )
      continue;
    // closed e.new4 as range 13
    do {
      // </0 & DecompileFunction/4 (/7 t.FuncName/9 (/15 s.Offset/19 # BUILT_IN/18 s.No/17 )/16 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_BUILTu_IN], context[18] ) )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      //DEBUG: t.FuncName: 9
      //DEBUG: s.Offset: 19
      //DEBUG: s.No: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DecompileFunction/4 (/7 t.FuncName/9 (/15 s.Offset/19 # BUILT_IN/18 s.No/17 )/16 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DecompileFunction/4 (/7 t.FuncName/9 (/15 s.Offset/22 # BUILT_IN1/19 s.No1/18 s.No2/17 )/16 )/8 >/1
    context[20] = context[13];
    context[21] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_BUILTu_IN1], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    //DEBUG: t.FuncName: 9
    //DEBUG: s.No1: 18
    //DEBUG: s.No2: 17
    //DEBUG: s.Offset: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DecompileFunction/4 (/7 t.FuncName/9 (/15 s.Offset/22 # BUILT_IN1/19 s.No1/18 s.No2/17 )/16 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecompileFunction/4 (/7 (/9 s.Offset/13 s.DeclCommand/14 e.Name/11 )/10 e.Commands/5 )/8 >/1
  context[11] = 0;
  context[12] = 0;
  if( ! refalrts::brackets_term( context[11], context[12], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Commands as range 5
  if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 11
  //DEBUG: e.Commands: 5
  //DEBUG: s.Offset: 13
  //DEBUG: s.DeclCommand: 14
  //DEBUG: e.Name: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecompileFunction$3=1/4 AsIs: (/7 } Tile{ AsIs: e.Name/11 } )/15 Tile{ AsIs: s.DeclCommand/14 } </16 & Decompile-Pattern-Hole@1/17 Tile{ AsIs: (/9 } 1/18 )/19 (/20 2/21 )/22 (/23 Tile{ AsIs: )/10 AsIs: e.Commands/5 HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_Decompilem_Patternm_Hole_Z1]);
  refalrts::alloc_number(vm, context[18], 1UL);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_number(vm, context[21], 2UL);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_S3A1]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[23], context[10] );
  refalrts::link_brackets( context[20], context[22] );
  refalrts::link_brackets( context[9], context[19] );
  refalrts::link_brackets( context[7], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[18], context[23] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DecompileFunction("DecompileFunction", COOKIE1_, COOKIE2_, func_DecompileFunction);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S7A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Decompile-Pattern-Hole$7=2/4 s.Level/5 s.Top$a/6 (/9 e.Pattern-L/7 )/10 (/13 e.Chars/11 )/14 (/17 e.Pattern-R/15 )/18 (/21 e.Vars/19 )/22 (/25 e.Commands/23 )/26 s.L$a/27 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.Pattern-L as range 7
  // closed e.Chars as range 11
  // closed e.Pattern-R as range 15
  // closed e.Vars as range 19
  // closed e.Commands as range 23
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top$a: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: e.Chars: 11
  //DEBUG: e.Pattern-R: 15
  //DEBUG: e.Vars: 19
  //DEBUG: e.Commands: 23
  //DEBUG: s.L$a: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L$a/27 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 AsIs: s.Top$a/6 AsIs: (/9 AsIs: e.Pattern-L/7 HalfReuse: (/10 HalfReuse: # C/13 AsIs: e.Chars/11 AsIs: )/14 HalfReuse: s.L$a27 /17 } Tile{ AsIs: )/26 } Tile{ AsIs: (/25 } Tile{ AsIs: e.Pattern-R/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.Vars/19 AsIs: )/22 } Tile{ AsIs: e.Commands/23 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_ident(context[13], identifiers[ident_C]);
  refalrts::reinit_svar( context[17], context[27] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[25], context[18] );
  refalrts::link_brackets( context[9], context[26] );
  refalrts::link_brackets( context[10], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_elem( res, context[26] );
  refalrts::splice_to_freelist_open( vm, context[17], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S7A2("Decompile-Pattern-Hole$7=2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S7A2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S7A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Decompile-Pattern-Hole$7=1/4 s.Level/5 (/8 e.Pattern-L/6 )/9 (/12 e.Chars/10 )/13 (/16 e.Pattern-R/14 )/17 (/20 e.Vars/18 )/21 (/24 e.Commands/22 )/25 s.Top$a/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Pattern-L as range 6
  // closed e.Chars as range 10
  // closed e.Pattern-R as range 14
  // closed e.Vars as range 18
  // closed e.Commands as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: e.Pattern-L: 6
  //DEBUG: e.Chars: 10
  //DEBUG: e.Pattern-R: 14
  //DEBUG: e.Vars: 18
  //DEBUG: e.Commands: 22
  //DEBUG: s.Top$a: 26

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$7=2/4 AsIs: s.Level/5 } Tile{ AsIs: s.Top$a/26 } Tile{ AsIs: (/8 AsIs: e.Pattern-L/6 AsIs: )/9 AsIs: (/12 AsIs: e.Chars/10 AsIs: )/13 AsIs: (/16 AsIs: e.Pattern-R/14 AsIs: )/17 AsIs: (/20 AsIs: e.Vars/18 AsIs: )/21 AsIs: (/24 AsIs: e.Commands/22 AsIs: )/25 } </27 & Sub/28 s.Top$a/26/29 1/30 >/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
  refalrts::copy_stvar(vm, context[29], context[26]);
  refalrts::alloc_number(vm, context[30], 1UL);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S7A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[27], context[31] );
  res = refalrts::splice_evar( res, context[8], context[25] );
  res = refalrts::splice_elem( res, context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S7A1("Decompile-Pattern-Hole$7=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S7A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S8A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Decompile-Pattern-Hole$8=2/4 s.Level/5 s.Top$a/6 (/9 e.Pattern-L/7 )/10 (/13 e.Chars/11 )/14 (/17 e.Pattern-R/15 )/18 (/21 e.Vars/19 )/22 (/25 e.Commands/23 )/26 s.R$a/27 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.Pattern-L as range 7
  // closed e.Chars as range 11
  // closed e.Pattern-R as range 15
  // closed e.Vars as range 19
  // closed e.Commands as range 23
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top$a: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: e.Chars: 11
  //DEBUG: e.Pattern-R: 15
  //DEBUG: e.Vars: 19
  //DEBUG: e.Commands: 23
  //DEBUG: s.R$a: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 AsIs: s.Top$a/6 AsIs: (/9 AsIs: e.Pattern-L/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: s.R$a/27 } Tile{ AsIs: (/25 } Tile{ HalfReuse: # C/26 } </28 & Rev/29 Tile{ AsIs: e.Chars/11 } Tile{ HalfReuse: >/14 HalfReuse: )/17 AsIs: e.Pattern-R/15 AsIs: )/18 AsIs: (/21 AsIs: e.Vars/19 AsIs: )/22 } Tile{ AsIs: e.Commands/23 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Rev]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_ident(context[26], identifiers[ident_C]);
  refalrts::reinit_close_call(context[14]);
  refalrts::reinit_close_bracket(context[17]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[25], context[17] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[28] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[14], context[22] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_elem( res, context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S8A2("Decompile-Pattern-Hole$8=2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S8A2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S8A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Decompile-Pattern-Hole$8=1/4 s.Level/5 (/8 e.Pattern-L/6 )/9 (/12 e.Chars/10 )/13 (/16 e.Pattern-R/14 )/17 (/20 e.Vars/18 )/21 (/24 e.Commands/22 )/25 s.Top$a/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Pattern-L as range 6
  // closed e.Chars as range 10
  // closed e.Pattern-R as range 14
  // closed e.Vars as range 18
  // closed e.Commands as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: e.Pattern-L: 6
  //DEBUG: e.Chars: 10
  //DEBUG: e.Pattern-R: 14
  //DEBUG: e.Vars: 18
  //DEBUG: e.Commands: 22
  //DEBUG: s.Top$a: 26

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$8=2/4 AsIs: s.Level/5 } Tile{ AsIs: s.Top$a/26 } Tile{ AsIs: (/8 AsIs: e.Pattern-L/6 AsIs: )/9 AsIs: (/12 AsIs: e.Chars/10 AsIs: )/13 AsIs: (/16 AsIs: e.Pattern-R/14 AsIs: )/17 AsIs: (/20 AsIs: e.Vars/18 AsIs: )/21 AsIs: (/24 AsIs: e.Commands/22 AsIs: )/25 } </27 & Sub/28 s.Top$a/26/29 1/30 >/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
  refalrts::copy_stvar(vm, context[29], context[26]);
  refalrts::alloc_number(vm, context[30], 1UL);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S8A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[27], context[31] );
  res = refalrts::splice_evar( res, context[8], context[25] );
  res = refalrts::splice_elem( res, context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S8A1("Decompile-Pattern-Hole$8=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S8A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S11A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$11=1/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 (/13 e.Pattern-R/11 )/14 (/17 e.Vars/15 )/18 (/21 e.Commands/19 )/22 s.VL/23 s.VR/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Pattern-L as range 7
  // closed e.Pattern-R as range 11
  // closed e.Vars as range 15
  // closed e.Commands as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: e.Pattern-R: 11
  //DEBUG: e.Vars: 15
  //DEBUG: e.Commands: 19
  //DEBUG: s.VL: 23
  //DEBUG: s.VR: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </25 & Add/26 Tile{ AsIs: s.Top/6 HalfReuse: 2/9 } >/27 (/28 Tile{ AsIs: e.Pattern-L/7 } (/29 Tile{ HalfReuse: # t/22 AsIs: s.VL/23 AsIs: s.VR/24 HalfReuse: '='/1 } s.VL/23/30 s.VR/24/31 )/32 s.VR/24/33 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/15 HalfReuse: (/18 HalfReuse: # t/21 } s.VL/23/34 s.VR/24/35 '='/36 s.VL/23/37 s.VR/24/38 )/39 )/40 Tile{ AsIs: e.Commands/19 } >/41 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::copy_stvar(vm, context[30], context[23]);
  refalrts::copy_stvar(vm, context[31], context[24]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::copy_stvar(vm, context[33], context[24]);
  refalrts::copy_stvar(vm, context[34], context[23]);
  refalrts::copy_stvar(vm, context[35], context[24]);
  refalrts::alloc_char(vm, context[36], '=');
  refalrts::copy_stvar(vm, context[37], context[23]);
  refalrts::copy_stvar(vm, context[38], context[24]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_ident(context[22], identifiers[ident_t]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_open_bracket(context[18]);
  refalrts::reinit_ident(context[21], identifiers[ident_t]);
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[40] );
  refalrts::link_brackets( context[18], context[39] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[28], context[10] );
  refalrts::link_brackets( context[29], context[32] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[41] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[34], context[40] );
  res = refalrts::splice_evar( res, context[10], context[21] );
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S11A1("Decompile-Pattern-Hole$11=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S11A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S12A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$12=1/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 (/13 e.Pattern-R/11 )/14 (/17 e.Vars/15 )/18 (/21 e.Commands/19 )/22 s.VL/23 s.VR/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Pattern-L as range 7
  // closed e.Pattern-R as range 11
  // closed e.Vars as range 15
  // closed e.Commands as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: e.Pattern-R: 11
  //DEBUG: e.Vars: 15
  //DEBUG: e.Commands: 19
  //DEBUG: s.VL: 23
  //DEBUG: s.VR: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </25 & Add/26 Tile{ AsIs: s.Top/6 HalfReuse: 2/9 } >/27 (/28 Tile{ AsIs: e.Pattern-L/7 } )/29 (/30 s.VL/23/31 (/32 Tile{ HalfReuse: # t/22 AsIs: s.VL/23 AsIs: s.VR/24 HalfReuse: '='/1 } s.VL/23/33 Tile{ HalfReuse: s.VR24 /10 HalfReuse: )/13 AsIs: e.Pattern-R/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/15 HalfReuse: (/18 HalfReuse: # t/21 } s.VL/23/34 s.VR/24/35 '='/36 s.VL/23/37 s.VR/24/38 )/39 )/40 Tile{ AsIs: e.Commands/19 } >/41 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::copy_stvar(vm, context[31], context[23]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::copy_stvar(vm, context[33], context[23]);
  refalrts::copy_stvar(vm, context[34], context[23]);
  refalrts::copy_stvar(vm, context[35], context[24]);
  refalrts::alloc_char(vm, context[36], '=');
  refalrts::copy_stvar(vm, context[37], context[23]);
  refalrts::copy_stvar(vm, context[38], context[24]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_ident(context[22], identifiers[ident_t]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_svar( context[10], context[24] );
  refalrts::reinit_close_bracket(context[13]);
  refalrts::reinit_open_bracket(context[18]);
  refalrts::reinit_ident(context[21], identifiers[ident_t]);
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[40] );
  refalrts::link_brackets( context[18], context[39] );
  refalrts::link_brackets( context[30], context[14] );
  refalrts::link_brackets( context[32], context[13] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[41] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[34], context[40] );
  res = refalrts::splice_evar( res, context[10], context[21] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_evar( res, context[29], context[32] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S12A1("Decompile-Pattern-Hole$12=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S12A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S18A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & Decompile-Pattern-Hole$18=1/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 (/13 e.Pattern-R/11 )/14 (/17 e.Vars/15 )/18 (/21 e.Commands/19 )/22 s.VL/23 s.VR/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Pattern-L as range 7
  // closed e.Pattern-R as range 11
  // closed e.Vars as range 15
  // closed e.Commands as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: e.Pattern-R: 11
  //DEBUG: e.Vars: 15
  //DEBUG: e.Commands: 19
  //DEBUG: s.VL: 23
  //DEBUG: s.VR: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole/4 AsIs: s.Level/5 } </25 & Add/26 Tile{ AsIs: s.Top/6 HalfReuse: 2/9 } >/27 (/28 Tile{ AsIs: e.Pattern-L/7 } (/29 Tile{ HalfReuse: # e/22 AsIs: s.VL/23 AsIs: s.VR/24 HalfReuse: '='/1 } s.VL/23/30 Tile{ HalfReuse: s.VR24 /10 HalfReuse: )/13 AsIs: e.Pattern-R/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/15 HalfReuse: (/18 HalfReuse: # e/21 } s.VL/23/31 s.VR/24/32 '='/33 s.VL/23/34 s.VR/24/35 )/36 )/37 Tile{ AsIs: e.Commands/19 } >/38 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::copy_stvar(vm, context[30], context[23]);
  refalrts::copy_stvar(vm, context[31], context[23]);
  refalrts::copy_stvar(vm, context[32], context[24]);
  refalrts::alloc_char(vm, context[33], '=');
  refalrts::copy_stvar(vm, context[34], context[23]);
  refalrts::copy_stvar(vm, context[35], context[24]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_close_call(vm, context[38]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_NoHole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_ident(context[22], identifiers[ident_e]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_svar( context[10], context[24] );
  refalrts::reinit_close_bracket(context[13]);
  refalrts::reinit_open_bracket(context[18]);
  refalrts::reinit_ident(context[21], identifiers[ident_e]);
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[37] );
  refalrts::link_brackets( context[18], context[36] );
  refalrts::link_brackets( context[28], context[14] );
  refalrts::link_brackets( context[29], context[13] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[38] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[31], context[37] );
  res = refalrts::splice_evar( res, context[10], context[21] );
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S18A1("Decompile-Pattern-Hole$18=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S18A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$19=2/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 s.Type/11 s.IdL/12 s.IdR/13 (/16 e.Pattern-R/14 )/17 (/20 e.Vars/18 )/21 (/24 e.Commands/22 )/25 s.VL/26 s.VR/27 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Pattern-L as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Pattern-R as range 14
  // closed e.Vars as range 18
  // closed e.Commands as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: s.Type: 11
  //DEBUG: s.IdL: 12
  //DEBUG: s.IdR: 13
  //DEBUG: e.Pattern-R: 14
  //DEBUG: e.Vars: 18
  //DEBUG: e.Commands: 22
  //DEBUG: s.VL: 26
  //DEBUG: s.VR: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </28 & Add/29 Tile{ AsIs: s.Top/6 } 2/30 >/31 Tile{ AsIs: (/9 AsIs: e.Pattern-L/7 HalfReuse: (/10 AsIs: s.Type/11 AsIs: s.IdL/12 AsIs: s.IdR/13 HalfReuse: '='/16 } s.VL/26/32 s.VR/27/33 )/34 s.VR/27/35 )/36 (/37 Tile{ AsIs: e.Pattern-R/14 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.Vars/18 HalfReuse: (/21 HalfReuse: s.Type11 /24 } s.IdL/12/38 s.IdR/13/39 Tile{ HalfReuse: '='/25 AsIs: s.VL/26 AsIs: s.VR/27 HalfReuse: )/1 } )/40 Tile{ AsIs: e.Commands/22 } >/41 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[30], 2UL);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::copy_stvar(vm, context[32], context[26]);
  refalrts::copy_stvar(vm, context[33], context[27]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::copy_stvar(vm, context[35], context[27]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::copy_stvar(vm, context[38], context[12]);
  refalrts::copy_stvar(vm, context[39], context[13]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_char(context[16], '=');
  refalrts::reinit_open_bracket(context[21]);
  refalrts::reinit_svar( context[24], context[11] );
  refalrts::reinit_char(context[25], '=');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[40] );
  refalrts::link_brackets( context[21], context[1] );
  refalrts::link_brackets( context[37], context[17] );
  refalrts::link_brackets( context[9], context[36] );
  refalrts::link_brackets( context[10], context[34] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[41] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_elem( res, context[40] );
  res = refalrts::splice_evar( res, context[25], context[1] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[17], context[24] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[32], context[37] );
  res = refalrts::splice_evar( res, context[9], context[16] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A2("Decompile-Pattern-Hole$19=2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$19=1/4 s.IdR/5 s.Level/6 s.Top/7 (/10 e.Pattern-L/8 )/11 (/14 e.Pattern-R/12 )/15 (/18 e.Vars/16 )/19 (/22 e.Commands/20 )/23 e.Vars-B/24 (/30 s.Type/32 s.IdL/33 s.IdR/34 '='/35 s.VarNoL/36 s.VarNoR/37 )/31 e.Vars-E/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.Pattern-L as range 8
  // closed e.Pattern-R as range 12
  // closed e.Vars as range 16
  // closed e.Commands as range 20
  context[24] = 0;
  context[25] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[26] = context[2];
    context[27] = context[3];
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.Vars-E as range 26
    if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[28], context[29] ) )
      continue;
    if( ! refalrts::repeated_stvar_left( vm, context[34], context[5], context[28], context[29] ) )
      continue;
    context[35] = refalrts::char_left( '=', context[28], context[29] );
    if( ! context[35] )
      continue;
    if( ! refalrts::svar_left( context[36], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[37], context[28], context[29] ) )
      continue;
    if( ! refalrts::empty_seq( context[28], context[29] ) )
      continue;
    //DEBUG: s.IdR: 5
    //DEBUG: s.Level: 6
    //DEBUG: s.Top: 7
    //DEBUG: e.Pattern-L: 8
    //DEBUG: e.Pattern-R: 12
    //DEBUG: e.Vars: 16
    //DEBUG: e.Commands: 20
    //DEBUG: e.Vars-B: 24
    //DEBUG: e.Vars-E: 26
    //DEBUG: s.Type: 32
    //DEBUG: s.IdL: 33
    //DEBUG: s.VarNoL: 36
    //DEBUG: s.VarNoR: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.IdR/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/24 {REMOVED TILE} s.IdR/34 {REMOVED TILE} s.VarNoL/36 s.VarNoR/37 {REMOVED TILE} e.Vars-E/26 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=2/4 } Tile{ AsIs: s.Level/6 AsIs: s.Top/7 AsIs: (/10 } Tile{ AsIs: e.Pattern-L/8 } Tile{ HalfReuse: )/30 AsIs: s.Type/32 AsIs: s.IdL/33 } Tile{ HalfReuse: s.IdR34 /11 AsIs: (/14 AsIs: e.Pattern-R/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars/16 AsIs: )/19 AsIs: (/22 AsIs: e.Commands/20 AsIs: )/23 } Tile{ HalfReuse: s.Top7 /35 } Tile{ HalfReuse: </31 } & Add/38 s.Top/7/39 1/40 >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[38], functions[efunc_Add]);
    refalrts::copy_stvar(vm, context[39], context[7]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A2]);
    refalrts::reinit_close_bracket(context[30]);
    refalrts::reinit_svar( context[11], context[34] );
    refalrts::reinit_svar( context[35], context[7] );
    refalrts::reinit_open_call(context[31]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[10], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[41] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[11], context[23] );
    res = refalrts::splice_evar( res, context[30], context[33] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[6], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[24], context[25], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A1("Decompile-Pattern-Hole$19=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$20=2/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 s.Type/11 s.IdL/12 s.IdR/13 (/16 e.Pattern-R/14 )/17 (/20 e.Vars/18 )/21 (/24 e.Commands/22 )/25 s.VL/26 s.VR/27 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Pattern-L as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Pattern-R as range 14
  // closed e.Vars as range 18
  // closed e.Commands as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: s.Type: 11
  //DEBUG: s.IdL: 12
  //DEBUG: s.IdR: 13
  //DEBUG: e.Pattern-R: 14
  //DEBUG: e.Vars: 18
  //DEBUG: e.Commands: 22
  //DEBUG: s.VL: 26
  //DEBUG: s.VR: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </28 & Add/29 Tile{ AsIs: s.Top/6 HalfReuse: 2/9 } >/30 (/31 Tile{ AsIs: e.Pattern-L/7 } )/32 (/33 s.VL/26/34 Tile{ HalfReuse: (/10 AsIs: s.Type/11 AsIs: s.IdL/12 AsIs: s.IdR/13 } '='/35 s.VL/26/36 s.VR/27/37 Tile{ HalfReuse: )/16 AsIs: e.Pattern-R/14 AsIs: )/17 AsIs: (/20 AsIs: e.Vars/18 HalfReuse: (/21 HalfReuse: s.Type11 /24 } s.IdL/12/38 s.IdR/13/39 Tile{ HalfReuse: '='/25 AsIs: s.VL/26 AsIs: s.VR/27 HalfReuse: )/1 } )/40 Tile{ AsIs: e.Commands/22 } >/41 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_stvar(vm, context[34], context[26]);
  refalrts::alloc_char(vm, context[35], '=');
  refalrts::copy_stvar(vm, context[36], context[26]);
  refalrts::copy_stvar(vm, context[37], context[27]);
  refalrts::copy_stvar(vm, context[38], context[12]);
  refalrts::copy_stvar(vm, context[39], context[13]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_close_bracket(context[16]);
  refalrts::reinit_open_bracket(context[21]);
  refalrts::reinit_svar( context[24], context[11] );
  refalrts::reinit_char(context[25], '=');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[40] );
  refalrts::link_brackets( context[21], context[1] );
  refalrts::link_brackets( context[33], context[17] );
  refalrts::link_brackets( context[10], context[16] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[41] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_elem( res, context[40] );
  res = refalrts::splice_evar( res, context[25], context[1] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[16], context[24] );
  res = refalrts::splice_evar( res, context[35], context[37] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  res = refalrts::splice_evar( res, context[32], context[34] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A2("Decompile-Pattern-Hole$20=2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$20=1/4 s.IdR/5 s.Level/6 s.Top/7 (/10 e.Pattern-L/8 )/11 (/14 e.Pattern-R/12 )/15 (/18 e.Vars/16 )/19 (/22 e.Commands/20 )/23 e.Vars-B/24 (/30 s.Type/32 s.IdL/33 s.IdR/34 '='/35 s.VarNoL/36 s.VarNoR/37 )/31 e.Vars-E/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.Pattern-L as range 8
  // closed e.Pattern-R as range 12
  // closed e.Vars as range 16
  // closed e.Commands as range 20
  context[24] = 0;
  context[25] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[26] = context[2];
    context[27] = context[3];
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.Vars-E as range 26
    if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[28], context[29] ) )
      continue;
    if( ! refalrts::repeated_stvar_left( vm, context[34], context[5], context[28], context[29] ) )
      continue;
    context[35] = refalrts::char_left( '=', context[28], context[29] );
    if( ! context[35] )
      continue;
    if( ! refalrts::svar_left( context[36], context[28], context[29] ) )
      continue;
    if( ! refalrts::svar_left( context[37], context[28], context[29] ) )
      continue;
    if( ! refalrts::empty_seq( context[28], context[29] ) )
      continue;
    //DEBUG: s.IdR: 5
    //DEBUG: s.Level: 6
    //DEBUG: s.Top: 7
    //DEBUG: e.Pattern-L: 8
    //DEBUG: e.Pattern-R: 12
    //DEBUG: e.Vars: 16
    //DEBUG: e.Commands: 20
    //DEBUG: e.Vars-B: 24
    //DEBUG: e.Vars-E: 26
    //DEBUG: s.Type: 32
    //DEBUG: s.IdL: 33
    //DEBUG: s.VarNoL: 36
    //DEBUG: s.VarNoR: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.IdR/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/24 {REMOVED TILE} s.IdR/34 {REMOVED TILE} s.VarNoL/36 s.VarNoR/37 {REMOVED TILE} e.Vars-E/26 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=2/4 } Tile{ AsIs: s.Level/6 AsIs: s.Top/7 AsIs: (/10 } Tile{ AsIs: e.Pattern-L/8 } Tile{ HalfReuse: )/30 AsIs: s.Type/32 AsIs: s.IdL/33 } Tile{ HalfReuse: s.IdR34 /11 AsIs: (/14 AsIs: e.Pattern-R/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars/16 AsIs: )/19 AsIs: (/22 AsIs: e.Commands/20 AsIs: )/23 } Tile{ HalfReuse: s.Top7 /35 } Tile{ HalfReuse: </31 } & Add/38 s.Top/7/39 1/40 >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[38], functions[efunc_Add]);
    refalrts::copy_stvar(vm, context[39], context[7]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A2]);
    refalrts::reinit_close_bracket(context[30]);
    refalrts::reinit_svar( context[11], context[34] );
    refalrts::reinit_svar( context[35], context[7] );
    refalrts::reinit_open_call(context[31]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[10], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[41] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[11], context[23] );
    res = refalrts::splice_evar( res, context[30], context[33] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[6], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[24], context[25], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A1("Decompile-Pattern-Hole$20=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S21A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & Decompile-Pattern-Hole$21=1/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 s.R/11 (/14 e.Pattern-R/12 )/15 (/18 e.Vars/16 )/19 (/22 e.Commands/20 )/23 s.LB/24 s.RB/25 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Pattern-L as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.Pattern-R as range 12
  // closed e.Vars as range 16
  // closed e.Commands as range 20
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: s.R: 11
  //DEBUG: e.Pattern-R: 12
  //DEBUG: e.Vars: 16
  //DEBUG: e.Commands: 20
  //DEBUG: s.LB: 24
  //DEBUG: s.RB: 25

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </26 & Add/27 Tile{ AsIs: s.Top/6 HalfReuse: 2/9 } >/28 (/29 Tile{ AsIs: e.Pattern-L/7 } (/30 # LB/31 Tile{ AsIs: )/23 AsIs: s.LB/24 } )/32 Tile{ AsIs: (/22 } Tile{ AsIs: s.RB/25 } (/33 # RB/34 )/35 (/36 # Hole/37 Tile{ HalfReuse: s.RB25 /10 AsIs: s.R/11 HalfReuse: )/14 AsIs: e.Pattern-R/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars/16 AsIs: )/19 } Tile{ AsIs: e.Commands/20 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_ident(vm, context[31], identifiers[ident_LB]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::alloc_ident(vm, context[34], identifiers[ident_RB]);
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_open_bracket(vm, context[36]);
  refalrts::alloc_ident(vm, context[37], identifiers[ident_Hole]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_svar( context[10], context[25] );
  refalrts::reinit_close_bracket(context[14]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[22], context[15] );
  refalrts::link_brackets( context[36], context[14] );
  refalrts::link_brackets( context[33], context[35] );
  refalrts::link_brackets( context[29], context[32] );
  refalrts::link_brackets( context[30], context[23] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[10], context[19] );
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S21A1("Decompile-Pattern-Hole$21=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S21A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S22A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & Decompile-Pattern-Hole$22=1/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 (/13 e.Pattern-R/11 )/14 (/17 e.Vars/15 )/18 (/21 e.Commands/19 )/22 s.LB/23 s.RB/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Pattern-L as range 7
  // closed e.Pattern-R as range 11
  // closed e.Vars as range 15
  // closed e.Commands as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: e.Pattern-R: 11
  //DEBUG: e.Vars: 15
  //DEBUG: e.Commands: 19
  //DEBUG: s.LB: 23
  //DEBUG: s.RB: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </25 & Add/26 Tile{ AsIs: s.Top/6 HalfReuse: 2/9 } >/27 (/28 Tile{ AsIs: e.Pattern-L/7 } )/29 Tile{ AsIs: (/21 } s.LB/23/30 (/31 # LB/32 )/33 (/34 Tile{ HalfReuse: # Hole/22 AsIs: s.LB/23 AsIs: s.RB/24 HalfReuse: )/1 } (/35 Tile{ HalfReuse: # RB/10 HalfReuse: )/13 AsIs: e.Pattern-R/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/15 AsIs: )/18 } Tile{ AsIs: e.Commands/19 } >/36 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::copy_stvar(vm, context[30], context[23]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_ident(vm, context[32], identifiers[ident_LB]);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_open_bracket(vm, context[34]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_ident(context[22], identifiers[ident_Hole]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::reinit_ident(context[10], identifiers[ident_RB]);
  refalrts::reinit_close_bracket(context[13]);
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[21], context[14] );
  refalrts::link_brackets( context[35], context[13] );
  refalrts::link_brackets( context[34], context[1] );
  refalrts::link_brackets( context[31], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[10], context[18] );
  res = refalrts::splice_elem( res, context[35] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_evar( res, context[30], context[34] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S22A1("Decompile-Pattern-Hole$22=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S22A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S25A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Decompile-Pattern-Hole$25=1/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 (/13 e.Pattern-R/11 )/14 (/17 e.Vars/15 )/18 (/21 e.Commands/19 )/22 s.VL/23 s.VR/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.Pattern-L as range 7
  // closed e.Pattern-R as range 11
  // closed e.Vars as range 15
  // closed e.Commands as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: e.Pattern-R: 11
  //DEBUG: e.Vars: 15
  //DEBUG: e.Commands: 19
  //DEBUG: s.VL: 23
  //DEBUG: s.VR: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </25 & Add/26 Tile{ AsIs: s.Top/6 HalfReuse: 2/9 } >/27 (/28 Tile{ AsIs: e.Pattern-L/7 } (/29 Tile{ HalfReuse: # e/22 AsIs: s.VL/23 AsIs: s.VR/24 HalfReuse: '='/1 } s.VL/23/30 s.VR/24/31 )/32 s.VR/24/33 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/15 HalfReuse: (/18 HalfReuse: # e/21 } s.VL/23/34 s.VR/24/35 '='/36 s.VL/23/37 s.VR/24/38 )/39 )/40 Tile{ AsIs: e.Commands/19 } >/41 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::copy_stvar(vm, context[30], context[23]);
  refalrts::copy_stvar(vm, context[31], context[24]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::copy_stvar(vm, context[33], context[24]);
  refalrts::copy_stvar(vm, context[34], context[23]);
  refalrts::copy_stvar(vm, context[35], context[24]);
  refalrts::alloc_char(vm, context[36], '=');
  refalrts::copy_stvar(vm, context[37], context[23]);
  refalrts::copy_stvar(vm, context[38], context[24]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 2UL);
  refalrts::reinit_ident(context[22], identifiers[ident_e]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_open_bracket(context[18]);
  refalrts::reinit_ident(context[21], identifiers[ident_e]);
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[40] );
  refalrts::link_brackets( context[18], context[39] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[28], context[10] );
  refalrts::link_brackets( context[29], context[32] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[41] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[34], context[40] );
  res = refalrts::splice_evar( res, context[10], context[21] );
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S25A1("Decompile-Pattern-Hole$25=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S25A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S26A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & Decompile-Pattern-Hole$26=1/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 s.Char/11 (/14 e.Pattern-R/12 )/15 (/18 e.Vars/16 )/19 (/22 e.Commands/20 )/23 s.VL/24 s.VR/25 s.CharPos/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Pattern-L as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.Pattern-R as range 12
  // closed e.Vars as range 16
  // closed e.Commands as range 20
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: s.Char: 11
  //DEBUG: e.Pattern-R: 12
  //DEBUG: e.Vars: 16
  //DEBUG: e.Commands: 20
  //DEBUG: s.VL: 24
  //DEBUG: s.VR: 25
  //DEBUG: s.CharPos: 26

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </27 & Add/28 Tile{ AsIs: s.Top/6 } 3/29 >/30 Tile{ AsIs: (/9 AsIs: e.Pattern-L/7 HalfReuse: (/10 } Tile{ HalfReuse: # e/23 AsIs: s.VL/24 AsIs: s.VR/25 } '='/31 s.VL/24/32 s.VR/25/33 )/34 (/35 # C/36 Tile{ AsIs: s.Char/11 } )/37 Tile{ AsIs: s.CharPos/26 } )/38 Tile{ AsIs: (/14 AsIs: e.Pattern-R/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars/16 HalfReuse: (/19 HalfReuse: # e/22 } s.VL/24/39 s.VR/25/40 '='/41 s.VL/24/42 s.VR/25/43 )/44 )/45 Tile{ AsIs: e.Commands/20 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[29], 3UL);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_char(vm, context[31], '=');
  refalrts::copy_stvar(vm, context[32], context[24]);
  refalrts::copy_stvar(vm, context[33], context[25]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::alloc_ident(vm, context[36], identifiers[ident_C]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::copy_stvar(vm, context[39], context[24]);
  refalrts::copy_stvar(vm, context[40], context[25]);
  refalrts::alloc_char(vm, context[41], '=');
  refalrts::copy_stvar(vm, context[42], context[24]);
  refalrts::copy_stvar(vm, context[43], context[25]);
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::alloc_close_bracket(vm, context[45]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_ident(context[23], identifiers[ident_e]);
  refalrts::reinit_open_bracket(context[19]);
  refalrts::reinit_ident(context[22], identifiers[ident_e]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[45] );
  refalrts::link_brackets( context[19], context[44] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[9], context[38] );
  refalrts::link_brackets( context[35], context[37] );
  refalrts::link_brackets( context[10], context[34] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[27] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[39], context[45] );
  res = refalrts::splice_evar( res, context[14], context[22] );
  res = refalrts::splice_elem( res, context[38] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_elem( res, context[37] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[31], context[36] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S26A1("Decompile-Pattern-Hole$26=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S26A1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S27A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & Decompile-Pattern-Hole$27=1/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 s.R/11 (/14 e.Pattern-R/12 )/15 (/18 e.Vars/16 )/19 (/22 e.Commands/20 )/23 s.VL/24 s.VR/25 s.LB/26 s.RB/27 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Pattern-L as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.Pattern-R as range 12
  // closed e.Vars as range 16
  // closed e.Commands as range 20
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: s.R: 11
  //DEBUG: e.Pattern-R: 12
  //DEBUG: e.Vars: 16
  //DEBUG: e.Commands: 20
  //DEBUG: s.VL: 24
  //DEBUG: s.VR: 25
  //DEBUG: s.LB: 26
  //DEBUG: s.RB: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </28 & Add/29 Tile{ AsIs: s.Top/6 HalfReuse: 4/9 } >/30 (/31 Tile{ AsIs: e.Pattern-L/7 } (/32 Tile{ HalfReuse: # e/23 AsIs: s.VL/24 AsIs: s.VR/25 } '='/33 s.VL/24/34 s.VR/25/35 )/36 (/37 # LB/38 )/39 Tile{ AsIs: s.LB/26 } )/40 (/41 Tile{ AsIs: s.RB/27 } (/42 # RB/43 )/44 (/45 # Hole/46 Tile{ HalfReuse: s.RB27 /10 AsIs: s.R/11 HalfReuse: )/14 AsIs: e.Pattern-R/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars/16 HalfReuse: (/19 HalfReuse: # e/22 } s.VL/24/47 s.VR/25/48 '='/49 s.VL/24/50 s.VR/25/51 )/52 )/53 Tile{ AsIs: e.Commands/20 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Add]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_char(vm, context[33], '=');
  refalrts::copy_stvar(vm, context[34], context[24]);
  refalrts::copy_stvar(vm, context[35], context[25]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::alloc_ident(vm, context[38], identifiers[ident_LB]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_open_bracket(vm, context[41]);
  refalrts::alloc_open_bracket(vm, context[42]);
  refalrts::alloc_ident(vm, context[43], identifiers[ident_RB]);
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::alloc_open_bracket(vm, context[45]);
  refalrts::alloc_ident(vm, context[46], identifiers[ident_Hole]);
  refalrts::copy_stvar(vm, context[47], context[24]);
  refalrts::copy_stvar(vm, context[48], context[25]);
  refalrts::alloc_char(vm, context[49], '=');
  refalrts::copy_stvar(vm, context[50], context[24]);
  refalrts::copy_stvar(vm, context[51], context[25]);
  refalrts::alloc_close_bracket(vm, context[52]);
  refalrts::alloc_close_bracket(vm, context[53]);
  refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
  refalrts::reinit_number(context[9], 4UL);
  refalrts::reinit_ident(context[23], identifiers[ident_e]);
  refalrts::reinit_svar( context[10], context[27] );
  refalrts::reinit_close_bracket(context[14]);
  refalrts::reinit_open_bracket(context[19]);
  refalrts::reinit_ident(context[22], identifiers[ident_e]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[53] );
  refalrts::link_brackets( context[19], context[52] );
  refalrts::link_brackets( context[41], context[15] );
  refalrts::link_brackets( context[45], context[14] );
  refalrts::link_brackets( context[42], context[44] );
  refalrts::link_brackets( context[31], context[40] );
  refalrts::link_brackets( context[37], context[39] );
  refalrts::link_brackets( context[32], context[36] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[47], context[53] );
  res = refalrts::splice_evar( res, context[10], context[22] );
  res = refalrts::splice_evar( res, context[42], context[46] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[40], context[41] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[33], context[39] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S27A1("Decompile-Pattern-Hole$27=1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S27A1);


static refalrts::FnResult func_Decompilem_Patternm_Hole(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 81 elems
  refalrts::Iter context[81];
  refalrts::zeros( context, 81 );
  // </0 & Decompile-Pattern-Hole/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new3 as range 7
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole/4 s.new7/5 s.new8/6 (/9 e.new13/19 )/10 (/13 e.new14/21 )/14 (/17 e.new15/23 )/18 (/29 s.new9/31 s.new10/32 e.new11/27 )/30 e.new12/25 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.new13 as range 19
    // closed e.new14 as range 21
    // closed e.new15 as range 23
    // closed e.new12 as range 25
    if( ! refalrts::svar_left( context[31], context[27], context[28] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[27], context[28] ) )
      continue;
    // closed e.new11 as range 27
    do {
      // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/33 s.L/43 )/10 (/13 e.Pattern-R/35 )/14 (/17 e.Vars/37 )/18 (/29 s.Offset/31 # CSYM/32 e.Word/39 )/30 e.Commands/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_CSYM], context[32] ) )
        continue;
      // closed e.Pattern-R as range 35
      // closed e.Vars as range 37
      // closed e.Word as range 39
      // closed e.Commands as range 41
      if( ! refalrts::svar_right( context[43], context[33], context[34] ) )
        continue;
      // closed e.Pattern-L as range 33
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 31
      //DEBUG: e.Pattern-R: 35
      //DEBUG: e.Vars: 37
      //DEBUG: e.Word: 39
      //DEBUG: e.Commands: 41
      //DEBUG: s.L: 43
      //DEBUG: e.Pattern-L: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/43 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </44 & Add/45 1/46 Tile{ AsIs: s.Top/6 HalfReuse: >/9 } (/47 Tile{ AsIs: e.Pattern-L/33 } Tile{ AsIs: (/29 } Tile{ Reuse: # W/32 AsIs: e.Word/39 AsIs: )/30 } s.Top/6/48 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/35 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/37 AsIs: )/18 } Tile{ AsIs: e.Commands/41 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::copy_stvar(vm, context[48], context[6]);
      refalrts::reinit_close_call(context[9]);
      refalrts::update_ident(context[32], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[47], context[10] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[44] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[32], context[30] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      res = refalrts::splice_evar( res, context[44], context[46] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/33 )/10 (/13 s.R/43 e.Pattern-R/35 )/14 (/17 e.Vars/37 )/18 (/29 s.Offset/31 # CSYMR/32 e.Word/39 )/30 e.Commands/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_CSYMR], context[32] ) )
        continue;
      // closed e.Pattern-L as range 33
      // closed e.Vars as range 37
      // closed e.Word as range 39
      // closed e.Commands as range 41
      if( ! refalrts::svar_left( context[43], context[35], context[36] ) )
        continue;
      // closed e.Pattern-R as range 35
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 31
      //DEBUG: e.Pattern-L: 33
      //DEBUG: e.Vars: 37
      //DEBUG: e.Word: 39
      //DEBUG: e.Commands: 41
      //DEBUG: s.R: 43
      //DEBUG: e.Pattern-R: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </44 & Add/45 1/46 Tile{ AsIs: s.Top/6 } >/47 Tile{ AsIs: (/9 AsIs: e.Pattern-L/33 AsIs: )/10 AsIs: (/13 } Tile{ HalfReuse: s.Top6 /14 AsIs: (/17 } Tile{ Reuse: # W/32 } Tile{ AsIs: e.Word/39 } )/48 Tile{ AsIs: e.Pattern-R/35 } Tile{ AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Vars/37 } Tile{ AsIs: )/30 AsIs: e.Commands/41 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::reinit_svar( context[14], context[6] );
      refalrts::update_ident(context[32], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[13], context[18] );
      refalrts::link_brackets( context[17], context[48] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[44] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[18], context[29] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[6] );
      res = refalrts::splice_evar( res, context[44], context[46] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/33 s.L/44 )/10 (/13 e.Pattern-R/35 )/14 (/17 e.Vars/37 )/18 (/29 s.Offset/31 # NSYM/32 s.Number/43 )/30 e.Commands/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_NSYM], context[32] ) )
        continue;
      // closed e.Pattern-R as range 35
      // closed e.Vars as range 37
      // closed e.Commands as range 41
      if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      if( ! refalrts::svar_right( context[44], context[33], context[34] ) )
        continue;
      // closed e.Pattern-L as range 33
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 31
      //DEBUG: e.Pattern-R: 35
      //DEBUG: e.Vars: 37
      //DEBUG: e.Commands: 41
      //DEBUG: s.Number: 43
      //DEBUG: s.L: 44
      //DEBUG: e.Pattern-L: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/44 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </45 & Add/46 1/47 Tile{ AsIs: s.Top/6 HalfReuse: >/9 } (/48 Tile{ AsIs: e.Pattern-L/33 } Tile{ AsIs: (/29 } Tile{ Reuse: # N/32 AsIs: s.Number/43 AsIs: )/30 } s.Top/6/49 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/35 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/37 AsIs: )/18 } Tile{ AsIs: e.Commands/41 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[47], 1UL);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_stvar(vm, context[49], context[6]);
      refalrts::reinit_close_call(context[9]);
      refalrts::update_ident(context[32], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[48], context[10] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[45] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[10], context[18] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_evar( res, context[32], context[30] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      res = refalrts::splice_evar( res, context[45], context[47] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/33 )/10 (/13 s.R/43 e.Pattern-R/35 )/14 (/17 e.Vars/37 )/18 (/29 s.Offset/31 # NSYMR/32 e.Number/39 )/30 e.Commands/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_NSYMR], context[32] ) )
        continue;
      // closed e.Pattern-L as range 33
      // closed e.Vars as range 37
      // closed e.Number as range 39
      // closed e.Commands as range 41
      if( ! refalrts::svar_left( context[43], context[35], context[36] ) )
        continue;
      // closed e.Pattern-R as range 35
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 31
      //DEBUG: e.Pattern-L: 33
      //DEBUG: e.Vars: 37
      //DEBUG: e.Number: 39
      //DEBUG: e.Commands: 41
      //DEBUG: s.R: 43
      //DEBUG: e.Pattern-R: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </44 & Add/45 1/46 Tile{ AsIs: s.Top/6 } >/47 Tile{ AsIs: (/9 AsIs: e.Pattern-L/33 AsIs: )/10 AsIs: (/13 } Tile{ HalfReuse: s.Top6 /14 AsIs: (/17 } Tile{ Reuse: # N/32 } Tile{ AsIs: e.Number/39 } )/48 Tile{ AsIs: e.Pattern-R/35 } Tile{ AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Vars/37 } Tile{ AsIs: )/30 AsIs: e.Commands/41 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::reinit_svar( context[14], context[6] );
      refalrts::update_ident(context[32], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[13], context[18] );
      refalrts::link_brackets( context[17], context[48] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[44] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[18], context[29] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[6] );
      res = refalrts::splice_evar( res, context[44], context[46] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new16/5 s.new17/6 (/9 e.new23/33 )/10 (/13 e.new24/35 )/14 (/17 e.new25/37 )/18 (/29 s.new19/31 s.new20/32 s.new21/43 e.new22/39 )/30 e.new18/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new23 as range 33
      // closed e.new24 as range 35
      // closed e.new25 as range 37
      // closed e.new18 as range 41
      if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
        continue;
      // closed e.new22 as range 39
      do {
        // </0 & Decompile-Pattern-Hole/4 s.new26/5 s.new27/6 (/9 e.new33/44 )/10 (/13 e.new34/46 )/14 (/17 e.new35/48 )/18 (/29 s.new29/31 s.new30/32 s.new31/43 s.new32/54 )/30 e.new28/52 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        // closed e.new33 as range 44
        // closed e.new34 as range 46
        // closed e.new35 as range 48
        // closed e.new28 as range 52
        if( ! refalrts::svar_left( context[54], context[50], context[51] ) )
          continue;
        if( ! refalrts::empty_seq( context[50], context[51] ) )
          continue;
        do {
          // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/55 s.L/63 )/10 (/13 e.Pattern-R/57 )/14 (/17 e.Vars/59 )/18 (/29 s.Offset/31 # SYM/32 s.Code/43 s.Char/54 )/30 e.Commands/61 >/1
          context[55] = context[44];
          context[56] = context[45];
          context[57] = context[46];
          context[58] = context[47];
          context[59] = context[48];
          context[60] = context[49];
          context[61] = context[52];
          context[62] = context[53];
          if( ! refalrts::ident_term( identifiers[ident_SYM], context[32] ) )
            continue;
          // closed e.Pattern-R as range 57
          // closed e.Vars as range 59
          // closed e.Commands as range 61
          if( ! refalrts::svar_right( context[63], context[55], context[56] ) )
            continue;
          // closed e.Pattern-L as range 55
          //DEBUG: s.Level: 5
          //DEBUG: s.Top: 6
          //DEBUG: s.Offset: 31
          //DEBUG: s.Code: 43
          //DEBUG: s.Char: 54
          //DEBUG: e.Pattern-R: 57
          //DEBUG: e.Vars: 59
          //DEBUG: e.Commands: 61
          //DEBUG: s.L: 63
          //DEBUG: e.Pattern-L: 55

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/63 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} s.Code/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </64 & Add/65 1/66 Tile{ AsIs: s.Top/6 HalfReuse: >/9 } Tile{ AsIs: (/29 } Tile{ AsIs: e.Pattern-L/55 } (/67 Tile{ Reuse: # C/32 } Tile{ AsIs: s.Char/54 AsIs: )/30 } s.Top/6/68 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/57 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/59 AsIs: )/18 } Tile{ AsIs: e.Commands/61 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[64]);
          refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[66], 1UL);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::copy_stvar(vm, context[68], context[6]);
          refalrts::reinit_close_call(context[9]);
          refalrts::update_ident(context[32], identifiers[ident_C]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[29], context[10] );
          refalrts::link_brackets( context[67], context[30] );
          refalrts::push_stack( vm, context[9] );
          refalrts::push_stack( vm, context[64] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[10], context[18] );
          res = refalrts::splice_elem( res, context[68] );
          res = refalrts::splice_evar( res, context[54], context[30] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_elem( res, context[67] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_evar( res, context[6], context[9] );
          res = refalrts::splice_evar( res, context[64], context[66] );
          refalrts::splice_to_freelist_open( vm, context[5], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/55 )/10 (/13 s.R/63 e.Pattern-R/57 )/14 (/17 e.Vars/59 )/18 (/29 s.Offset/31 # SYMR/32 s.Code/43 s.Char/54 )/30 e.Commands/61 >/1
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[52];
        context[62] = context[53];
        if( ! refalrts::ident_term( identifiers[ident_SYMR], context[32] ) )
          continue;
        // closed e.Pattern-L as range 55
        // closed e.Vars as range 59
        // closed e.Commands as range 61
        if( ! refalrts::svar_left( context[63], context[57], context[58] ) )
          continue;
        // closed e.Pattern-R as range 57
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 31
        //DEBUG: s.Code: 43
        //DEBUG: s.Char: 54
        //DEBUG: e.Pattern-L: 55
        //DEBUG: e.Vars: 59
        //DEBUG: e.Commands: 61
        //DEBUG: s.R: 63
        //DEBUG: e.Pattern-R: 57

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/63 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} s.Code/43 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </64 & Add/65 1/66 Tile{ AsIs: s.Top/6 } >/67 Tile{ AsIs: (/9 AsIs: e.Pattern-L/55 AsIs: )/10 AsIs: (/13 } Tile{ HalfReuse: s.Top6 /14 AsIs: (/17 } Tile{ Reuse: # C/32 } Tile{ AsIs: s.Char/54 } )/68 Tile{ AsIs: e.Pattern-R/57 } Tile{ AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Vars/59 } Tile{ AsIs: )/30 AsIs: e.Commands/61 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[64]);
        refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[66], 1UL);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::reinit_svar( context[14], context[6] );
        refalrts::update_ident(context[32], identifiers[ident_C]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[13], context[18] );
        refalrts::link_brackets( context[17], context[68] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[64] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[18], context[29] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_elem( res, context[68] );
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_elem( res, context[6] );
        res = refalrts::splice_evar( res, context[64], context[66] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/44 s.L/54 )/10 (/13 e.Pattern-R/46 )/14 (/17 e.Vars/48 )/18 (/29 s.Offset/31 # SYMS/32 s.Len/43 e.Chars/50 )/30 e.Commands/52 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_SYMS], context[32] ) )
          continue;
        // closed e.Pattern-R as range 46
        // closed e.Vars as range 48
        // closed e.Chars as range 50
        // closed e.Commands as range 52
        if( ! refalrts::svar_right( context[54], context[44], context[45] ) )
          continue;
        // closed e.Pattern-L as range 44
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 31
        //DEBUG: s.Len: 43
        //DEBUG: e.Pattern-R: 46
        //DEBUG: e.Vars: 48
        //DEBUG: e.Chars: 50
        //DEBUG: e.Commands: 52
        //DEBUG: s.L: 54
        //DEBUG: e.Pattern-L: 44

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/54 {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$7=1/4 AsIs: s.Level/5 } (/55 Tile{ AsIs: e.Pattern-L/44 } Tile{ AsIs: )/30 } (/56 Tile{ AsIs: e.Chars/50 } Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/46 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/48 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/52 } )/57 </58 Tile{ HalfReuse: & Add/32 AsIs: s.Len/43 } Tile{ AsIs: s.Top/6 HalfReuse: >/9 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S7A1]);
        refalrts::reinit_name(context[32], functions[efunc_Add]);
        refalrts::reinit_close_call(context[9]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[9] );
        refalrts::push_stack( vm, context[58] );
        refalrts::link_brackets( context[29], context[57] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[55], context[30] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[6], context[9] );
        res = refalrts::splice_evar( res, context[32], context[43] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[10], context[29] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[55] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/44 )/10 (/13 s.R/54 e.Pattern-R/46 )/14 (/17 e.Vars/48 )/18 (/29 s.Offset/31 # SYMSR/32 s.Len/43 e.Chars/50 )/30 e.Commands/52 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_SYMSR], context[32] ) )
        continue;
      // closed e.Pattern-L as range 44
      // closed e.Vars as range 48
      // closed e.Chars as range 50
      // closed e.Commands as range 52
      if( ! refalrts::svar_left( context[54], context[46], context[47] ) )
        continue;
      // closed e.Pattern-R as range 46
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 31
      //DEBUG: s.Len: 43
      //DEBUG: e.Pattern-L: 44
      //DEBUG: e.Vars: 48
      //DEBUG: e.Chars: 50
      //DEBUG: e.Commands: 52
      //DEBUG: s.R: 54
      //DEBUG: e.Pattern-R: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/54 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$8=1/4 AsIs: s.Level/5 } Tile{ AsIs: (/9 AsIs: e.Pattern-L/44 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Chars/50 } )/55 (/56 Tile{ AsIs: e.Pattern-R/46 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/48 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/52 } Tile{ AsIs: )/30 } </57 Tile{ HalfReuse: & Add/32 AsIs: s.Len/43 } Tile{ AsIs: s.Top/6 } >/58 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::alloc_open_bracket(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S8A1]);
      refalrts::reinit_name(context[32], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[56], context[14] );
      refalrts::link_brackets( context[13], context[55] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_elem( res, context[6] );
      res = refalrts::splice_evar( res, context[32], context[43] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[14], context[29] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new16/5 s.new17/6 (/9 e.new21/33 )/10 (/13 e.new22/35 )/14 (/17 e.new23/37 )/18 (/29 s.new19/31 s.new20/32 )/30 e.new18/39 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[26];
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.new21 as range 33
      // closed e.new22 as range 35
      // closed e.new23 as range 37
      // closed e.new18 as range 39
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/41 s.L/49 )/10 (/13 e.Pattern-R/43 )/14 (/17 e.Vars/45 )/18 (/29 s.Offset/31 # VSYM/32 )/30 e.Commands/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_VSYM], context[32] ) )
          continue;
        // closed e.Pattern-R as range 43
        // closed e.Vars as range 45
        // closed e.Commands as range 47
        if( ! refalrts::svar_right( context[49], context[41], context[42] ) )
          continue;
        // closed e.Pattern-L as range 41
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 31
        //DEBUG: e.Pattern-R: 43
        //DEBUG: e.Vars: 45
        //DEBUG: e.Commands: 47
        //DEBUG: s.L: 49
        //DEBUG: e.Pattern-L: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/49 {REMOVED TILE} s.Offset/31 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </50 & Add/51 1/52 s.Top/6/53 >/54 (/55 Tile{ AsIs: e.Pattern-L/41 } (/56 # s/57 Tile{ AsIs: s.Top/6 HalfReuse: '='/9 } s.Top/6/58 )/59 s.Top/6/60 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/43 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/45 HalfReuse: (/18 HalfReuse: # s/29 } s.Top/6/61 '='/62 s.Top/6/63 Tile{ HalfReuse: )/32 AsIs: )/30 AsIs: e.Commands/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[52], 1UL);
        refalrts::copy_stvar(vm, context[53], context[6]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::alloc_ident(vm, context[57], identifiers[ident_s]);
        refalrts::copy_stvar(vm, context[58], context[6]);
        refalrts::alloc_close_bracket(vm, context[59]);
        refalrts::copy_stvar(vm, context[60], context[6]);
        refalrts::copy_stvar(vm, context[61], context[6]);
        refalrts::alloc_char(vm, context[62], '=');
        refalrts::copy_stvar(vm, context[63], context[6]);
        refalrts::reinit_char(context[9], '=');
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_ident(context[29], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[30] );
        refalrts::link_brackets( context[18], context[32] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[55], context[10] );
        refalrts::link_brackets( context[56], context[59] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[50] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[32];
        res = refalrts::splice_evar( res, context[61], context[63] );
        res = refalrts::splice_evar( res, context[10], context[29] );
        res = refalrts::splice_evar( res, context[58], context[60] );
        res = refalrts::splice_evar( res, context[6], context[9] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[50], context[55] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/41 )/10 (/13 s.R/49 e.Pattern-R/43 )/14 (/17 e.Vars/45 )/18 (/29 s.Offset/31 # VSYMR/32 )/30 e.Commands/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_VSYMR], context[32] ) )
          continue;
        // closed e.Pattern-L as range 41
        // closed e.Vars as range 45
        // closed e.Commands as range 47
        if( ! refalrts::svar_left( context[49], context[43], context[44] ) )
          continue;
        // closed e.Pattern-R as range 43
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 31
        //DEBUG: e.Pattern-L: 41
        //DEBUG: e.Vars: 45
        //DEBUG: e.Commands: 47
        //DEBUG: s.R: 49
        //DEBUG: e.Pattern-R: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/49 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </50 & Add/51 1/52 Tile{ AsIs: s.Top/6 } >/53 Tile{ AsIs: (/9 AsIs: e.Pattern-L/41 AsIs: )/10 AsIs: (/13 } s.Top/6/54 (/55 # s/56 s.Top/6/57 '='/58 s.Top/6/59 )/60 Tile{ AsIs: e.Pattern-R/43 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/45 HalfReuse: (/18 HalfReuse: # s/29 } s.Top/6/61 '='/62 s.Top/6/63 Tile{ HalfReuse: )/32 AsIs: )/30 AsIs: e.Commands/47 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[52], 1UL);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::copy_stvar(vm, context[54], context[6]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_ident(vm, context[56], identifiers[ident_s]);
        refalrts::copy_stvar(vm, context[57], context[6]);
        refalrts::alloc_char(vm, context[58], '=');
        refalrts::copy_stvar(vm, context[59], context[6]);
        refalrts::alloc_close_bracket(vm, context[60]);
        refalrts::copy_stvar(vm, context[61], context[6]);
        refalrts::alloc_char(vm, context[62], '=');
        refalrts::copy_stvar(vm, context[63], context[6]);
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_ident(context[29], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[30] );
        refalrts::link_brackets( context[18], context[32] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[55], context[60] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[50] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[32];
        res = refalrts::splice_evar( res, context[61], context[63] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[54], context[60] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_elem( res, context[6] );
        res = refalrts::splice_evar( res, context[50], context[52] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/41 s.L/49 )/10 (/13 e.Pattern-R/43 )/14 (/17 e.Vars/45 )/18 (/29 s.Offset/31 # TERM/32 )/30 e.Commands/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_TERM], context[32] ) )
          continue;
        // closed e.Pattern-R as range 43
        // closed e.Vars as range 45
        // closed e.Commands as range 47
        if( ! refalrts::svar_right( context[49], context[41], context[42] ) )
          continue;
        // closed e.Pattern-L as range 41
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 31
        //DEBUG: e.Pattern-R: 43
        //DEBUG: e.Vars: 45
        //DEBUG: e.Commands: 47
        //DEBUG: s.L: 49
        //DEBUG: e.Pattern-L: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/49 {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$11=1/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L/41 } Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/43 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/45 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/47 } Tile{ AsIs: )/30 } Tile{ HalfReuse: s.Top6 /32 } </50 & Add/51 1/52 s.Top/6/53 >/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[52], 1UL);
        refalrts::copy_stvar(vm, context[53], context[6]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S11A1]);
        refalrts::reinit_svar( context[32], context[6] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[50] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[50], context[54] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[10], context[29] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/41 )/10 (/13 s.R/49 e.Pattern-R/43 )/14 (/17 e.Vars/45 )/18 (/29 s.Offset/31 # TERMR/32 )/30 e.Commands/47 >/1
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      if( ! refalrts::ident_term( identifiers[ident_TERMR], context[32] ) )
        continue;
      // closed e.Pattern-L as range 41
      // closed e.Vars as range 45
      // closed e.Commands as range 47
      if( ! refalrts::svar_left( context[49], context[43], context[44] ) )
        continue;
      // closed e.Pattern-R as range 43
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 31
      //DEBUG: e.Pattern-L: 41
      //DEBUG: e.Vars: 45
      //DEBUG: e.Commands: 47
      //DEBUG: s.R: 49
      //DEBUG: e.Pattern-R: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.R/49 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$12=1/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern-L/41 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Pattern-R/43 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/45 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/47 } Tile{ AsIs: )/30 } s.Top/6/50 Tile{ HalfReuse: </32 } & Add/51 1/52 s.Top/6/53 >/54 Tile{ AsIs: >/1 ]] }
      refalrts::copy_stvar(vm, context[50], context[6]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[52], 1UL);
      refalrts::copy_stvar(vm, context[53], context[6]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S12A1]);
      refalrts::reinit_open_call(context[32]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[51], context[54] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[14], context[29] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new16/5 s.new17/6 (/9 e.new23/33 )/10 (/13 e.new24/35 )/14 (/17 e.new25/37 )/18 (/29 s.new19/31 s.new20/32 s.new21/43 e.new22/39 )/30 e.new18/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new23 as range 33
      // closed e.new24 as range 35
      // closed e.new25 as range 37
      // closed e.new18 as range 41
      if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
        continue;
      // closed e.new22 as range 39
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/44 )/10 (/13 e.Pattern-R/46 )/14 (/17 e.Vars/48 )/18 (/29 s.Offset/31 # TRAN/32 s.Jump/43 )/30 e.Commands-B/52 (/58 s.Jump/60 e.Command/56 )/59 e.Commands-E/54 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[41];
        context[51] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[32] ) )
          continue;
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        // closed e.Pattern-L as range 44
        // closed e.Pattern-R as range 46
        // closed e.Vars as range 48
        context[52] = 0;
        context[53] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[54] = context[50];
          context[55] = context[51];
          context[56] = 0;
          context[57] = 0;
          context[58] = refalrts::brackets_left( context[56], context[57], context[54], context[55] );
          if( ! context[58] )
            continue;
          refalrts::bracket_pointers(context[58], context[59]);
          if( ! refalrts::repeated_stvar_left( vm, context[60], context[43], context[56], context[57] ) )
            continue;
          // closed e.Command as range 56
          // closed e.Commands-E as range 54
          //DEBUG: s.Level: 5
          //DEBUG: s.Top: 6
          //DEBUG: s.Offset: 31
          //DEBUG: s.Jump: 43
          //DEBUG: e.Pattern-L: 44
          //DEBUG: e.Pattern-R: 46
          //DEBUG: e.Vars: 48
          //DEBUG: e.Commands-B: 52
          //DEBUG: e.Command: 56
          //DEBUG: e.Commands-E: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} s.Jump/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern-L/44 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/46 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/48 AsIs: )/18 } Tile{ AsIs: e.Commands-B/52 } Tile{ AsIs: (/29 } '@'/61 Tile{ Reuse: # Restore-Hole/32 } s.Level/5/62 s.Top/6/63 (/64 e.Pattern-L/44/65 Tile{ AsIs: )/30 } (/67 e.Pattern-R/46/68 )/70 (/71 e.Vars/48/72 )/74 )/75 Tile{ AsIs: (/58 AsIs: s.Jump/60 AsIs: e.Command/56 AsIs: )/59 AsIs: e.Commands-E/54 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[61], '@');
          refalrts::copy_stvar(vm, context[62], context[5]);
          refalrts::copy_stvar(vm, context[63], context[6]);
          refalrts::alloc_open_bracket(vm, context[64]);
          refalrts::copy_evar(vm, context[65], context[66], context[44], context[45]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::copy_evar(vm, context[68], context[69], context[46], context[47]);
          refalrts::alloc_close_bracket(vm, context[70]);
          refalrts::alloc_open_bracket(vm, context[71]);
          refalrts::copy_evar(vm, context[72], context[73], context[48], context[49]);
          refalrts::alloc_close_bracket(vm, context[74]);
          refalrts::alloc_close_bracket(vm, context[75]);
          refalrts::update_ident(context[32], identifiers[ident_Restorem_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[58], context[59] );
          refalrts::link_brackets( context[29], context[75] );
          refalrts::link_brackets( context[71], context[74] );
          refalrts::link_brackets( context[67], context[70] );
          refalrts::link_brackets( context[64], context[30] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[58];
          res = refalrts::splice_evar( res, context[67], context[75] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_evar( res, context[65], context[66] );
          res = refalrts::splice_evar( res, context[62], context[64] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_elem( res, context[61] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_evar( res, context[52], context[53] );
          refalrts::splice_to_freelist_open( vm, context[18], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[52], context[53], context[50], context[51] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole/4 s.new26/5 s.new27/6 (/9 e.new35/44 )/10 (/13 e.new36/46 )/14 (/17 e.new37/48 )/18 (/29 '@'/31 s.new29/32 s.new30/43 s.new31/62 e.new32/50 (/60 e.new33/58 )/61 (/56 e.new34/54 )/57 )/30 e.new28/52 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        if( ! refalrts::char_term( '@', context[31] ) )
          continue;
        context[54] = 0;
        context[55] = 0;
        context[56] = refalrts::brackets_right( context[54], context[55], context[50], context[51] );
        if( ! context[56] )
          continue;
        refalrts::bracket_pointers(context[56], context[57]);
        context[58] = 0;
        context[59] = 0;
        context[60] = refalrts::brackets_right( context[58], context[59], context[50], context[51] );
        if( ! context[60] )
          continue;
        refalrts::bracket_pointers(context[60], context[61]);
        // closed e.new35 as range 44
        // closed e.new36 as range 46
        // closed e.new37 as range 48
        // closed e.new33 as range 58
        // closed e.new34 as range 54
        // closed e.new28 as range 52
        if( ! refalrts::svar_left( context[62], context[50], context[51] ) )
          continue;
        // closed e.new32 as range 50
        do {
          // </0 & Decompile-Pattern-Hole/4 s.Level1/5 s.Top1/6 (/9 e.Pattern-L1/63 )/10 (/13 e.Pattern-R1/65 )/14 (/17 e.Vars1/67 )/18 (/29 '@'/31 # Restore-Hole/32 s.Level2/43 s.Top2/62 (/79 e.Pattern-L2/77 )/80 (/60 e.Pattern-R2/71 )/61 (/56 e.Vars2/73 )/57 )/30 e.Commands/75 >/1
          context[63] = context[44];
          context[64] = context[45];
          context[65] = context[46];
          context[66] = context[47];
          context[67] = context[48];
          context[68] = context[49];
          context[69] = context[50];
          context[70] = context[51];
          context[71] = context[58];
          context[72] = context[59];
          context[73] = context[54];
          context[74] = context[55];
          context[75] = context[52];
          context[76] = context[53];
          if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[32] ) )
            continue;
          context[77] = 0;
          context[78] = 0;
          context[79] = refalrts::brackets_left( context[77], context[78], context[69], context[70] );
          if( ! context[79] )
            continue;
          refalrts::bracket_pointers(context[79], context[80]);
          if( ! refalrts::empty_seq( context[69], context[70] ) )
            continue;
          // closed e.Pattern-L1 as range 63
          // closed e.Pattern-R1 as range 65
          // closed e.Vars1 as range 67
          // closed e.Pattern-L2 as range 77
          // closed e.Pattern-R2 as range 71
          // closed e.Vars2 as range 73
          // closed e.Commands as range 75
          //DEBUG: s.Level1: 5
          //DEBUG: s.Top1: 6
          //DEBUG: s.Level2: 43
          //DEBUG: s.Top2: 62
          //DEBUG: e.Pattern-L1: 63
          //DEBUG: e.Pattern-R1: 65
          //DEBUG: e.Vars1: 67
          //DEBUG: e.Pattern-L2: 77
          //DEBUG: e.Pattern-R2: 71
          //DEBUG: e.Vars2: 73
          //DEBUG: e.Commands: 75

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole/4 s.Level1/5 s.Top1/6 (/9 e.Pattern-L1/63 )/10 (/13 e.Pattern-R1/65 )/14 (/17 e.Vars1/67 )/18 (/29 {REMOVED TILE} )/30 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 HalfReuse: & Decompile-Pattern-Hole/32 AsIs: s.Level2/43 AsIs: s.Top2/62 AsIs: (/79 AsIs: e.Pattern-L2/77 AsIs: )/80 AsIs: (/60 AsIs: e.Pattern-R2/71 AsIs: )/61 AsIs: (/56 AsIs: e.Vars2/73 AsIs: )/57 } Tile{ AsIs: e.Commands/75 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_call(context[31]);
          refalrts::reinit_name(context[32], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[31] );
          refalrts::link_brackets( context[56], context[57] );
          refalrts::link_brackets( context[60], context[61] );
          refalrts::link_brackets( context[79], context[80] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[75], context[76] );
          res = refalrts::splice_evar( res, context[31], context[57] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole/4 s.Level1/5 s.Top1/6 (/9 e.Pattern-L1/63 )/10 (/13 e.Pattern-R1/65 )/14 (/17 e.Vars1/67 )/18 (/29 '@'/31 # Restore-NoHole/32 s.Level2/43 s.Top2/62 (/60 e.Pattern2/69 )/61 (/56 e.Vars2/71 )/57 )/30 e.Commands/73 >/1
        context[63] = context[44];
        context[64] = context[45];
        context[65] = context[46];
        context[66] = context[47];
        context[67] = context[48];
        context[68] = context[49];
        context[69] = context[58];
        context[70] = context[59];
        context[71] = context[54];
        context[72] = context[55];
        context[73] = context[52];
        context[74] = context[53];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[32] ) )
          continue;
        if( ! refalrts::empty_seq( context[50], context[51] ) )
          continue;
        // closed e.Pattern-L1 as range 63
        // closed e.Pattern-R1 as range 65
        // closed e.Vars1 as range 67
        // closed e.Pattern2 as range 69
        // closed e.Vars2 as range 71
        // closed e.Commands as range 73
        //DEBUG: s.Level1: 5
        //DEBUG: s.Top1: 6
        //DEBUG: s.Level2: 43
        //DEBUG: s.Top2: 62
        //DEBUG: e.Pattern-L1: 63
        //DEBUG: e.Pattern-R1: 65
        //DEBUG: e.Vars1: 67
        //DEBUG: e.Pattern2: 69
        //DEBUG: e.Vars2: 71
        //DEBUG: e.Commands: 73

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole/4 s.Level1/5 s.Top1/6 (/9 e.Pattern-L1/63 )/10 (/13 e.Pattern-R1/65 )/14 (/17 e.Vars1/67 )/18 (/29 {REMOVED TILE} )/30 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 HalfReuse: & Decompile-Pattern-NoHole/32 AsIs: s.Level2/43 AsIs: s.Top2/62 AsIs: (/60 AsIs: e.Pattern2/69 AsIs: )/61 AsIs: (/56 AsIs: e.Vars2/71 AsIs: )/57 } Tile{ AsIs: e.Commands/73 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[31]);
        refalrts::reinit_name(context[32], functions[efunc_Decompilem_Patternm_NoHole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[56], context[57] );
        refalrts::link_brackets( context[60], context[61] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[73], context[74] );
        res = refalrts::splice_evar( res, context[31], context[57] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.new26/5 s.new27/6 (/9 e.new32/44 )/10 (/13 e.new33/46 )/14 (/17 e.new34/48 )/18 (/29 s.new29/31 s.new30/32 s.new31/43 )/30 e.new28/50 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[41];
      context[51] = context[42];
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      // closed e.new32 as range 44
      // closed e.new33 as range 46
      // closed e.new34 as range 48
      // closed e.new28 as range 50
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/52 s.L/60 )/10 (/13 e.Pattern-R/54 )/14 (/17 e.Vars/56 )/18 (/29 s.Offset/31 # OVSYM/32 s.VarNo/43 )/30 e.Commands/58 >/1
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_OVSYM], context[32] ) )
          continue;
        // closed e.Pattern-R as range 54
        // closed e.Vars as range 56
        // closed e.Commands as range 58
        if( ! refalrts::svar_right( context[60], context[52], context[53] ) )
          continue;
        // closed e.Pattern-L as range 52
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 31
        //DEBUG: s.VarNo: 43
        //DEBUG: e.Pattern-R: 54
        //DEBUG: e.Vars: 56
        //DEBUG: e.Commands: 58
        //DEBUG: s.L: 60
        //DEBUG: e.Pattern-L: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/60 {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </61 & Add/62 1/63 s.Top/6/64 >/65 (/66 Tile{ AsIs: e.Pattern-L/52 } (/67 Tile{ Reuse: # s/32 AsIs: s.VarNo/43 } '='/68 Tile{ AsIs: s.Top/6 HalfReuse: )/9 } s.Top/6/69 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/54 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/56 HalfReuse: (/18 HalfReuse: # s/29 } s.VarNo/43/70 '='/71 s.Top/6/72 )/73 Tile{ AsIs: )/30 AsIs: e.Commands/58 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[61]);
        refalrts::alloc_name(vm, context[62], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[63], 1UL);
        refalrts::copy_stvar(vm, context[64], context[6]);
        refalrts::alloc_close_call(vm, context[65]);
        refalrts::alloc_open_bracket(vm, context[66]);
        refalrts::alloc_open_bracket(vm, context[67]);
        refalrts::alloc_char(vm, context[68], '=');
        refalrts::copy_stvar(vm, context[69], context[6]);
        refalrts::copy_stvar(vm, context[70], context[43]);
        refalrts::alloc_char(vm, context[71], '=');
        refalrts::copy_stvar(vm, context[72], context[6]);
        refalrts::alloc_close_bracket(vm, context[73]);
        refalrts::update_ident(context[32], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_ident(context[29], identifiers[ident_s]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[30] );
        refalrts::link_brackets( context[18], context[73] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[66], context[10] );
        refalrts::link_brackets( context[67], context[9] );
        refalrts::push_stack( vm, context[65] );
        refalrts::push_stack( vm, context[61] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[70], context[73] );
        res = refalrts::splice_evar( res, context[10], context[29] );
        res = refalrts::splice_elem( res, context[69] );
        res = refalrts::splice_evar( res, context[6], context[9] );
        res = refalrts::splice_elem( res, context[68] );
        res = refalrts::splice_evar( res, context[32], context[43] );
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[61], context[66] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/52 )/10 (/13 s.R/60 e.Pattern-R/54 )/14 (/17 e.Vars/56 )/18 (/29 s.Offset/31 # OVSYMR/32 s.VarNo/43 )/30 e.Commands/58 >/1
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      context[58] = context[50];
      context[59] = context[51];
      if( ! refalrts::ident_term( identifiers[ident_OVSYMR], context[32] ) )
        continue;
      // closed e.Pattern-L as range 52
      // closed e.Vars as range 56
      // closed e.Commands as range 58
      if( ! refalrts::svar_left( context[60], context[54], context[55] ) )
        continue;
      // closed e.Pattern-R as range 54
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 31
      //DEBUG: s.VarNo: 43
      //DEBUG: e.Pattern-L: 52
      //DEBUG: e.Vars: 56
      //DEBUG: e.Commands: 58
      //DEBUG: s.R: 60
      //DEBUG: e.Pattern-R: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/60 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } </61 & Add/62 1/63 s.Top/6/64 >/65 Tile{ AsIs: (/9 AsIs: e.Pattern-L/52 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: s.Top/6 } (/66 Tile{ Reuse: # s/32 AsIs: s.VarNo/43 } '='/67 s.Top/6/68 )/69 Tile{ AsIs: e.Pattern-R/54 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/56 HalfReuse: (/18 HalfReuse: # s/29 } s.VarNo/43/70 '='/71 s.Top/6/72 )/73 Tile{ AsIs: )/30 AsIs: e.Commands/58 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[61]);
      refalrts::alloc_name(vm, context[62], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[63], 1UL);
      refalrts::copy_stvar(vm, context[64], context[6]);
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::alloc_open_bracket(vm, context[66]);
      refalrts::alloc_char(vm, context[67], '=');
      refalrts::copy_stvar(vm, context[68], context[6]);
      refalrts::alloc_close_bracket(vm, context[69]);
      refalrts::copy_stvar(vm, context[70], context[43]);
      refalrts::alloc_char(vm, context[71], '=');
      refalrts::copy_stvar(vm, context[72], context[6]);
      refalrts::alloc_close_bracket(vm, context[73]);
      refalrts::update_ident(context[32], identifiers[ident_s]);
      refalrts::reinit_open_bracket(context[18]);
      refalrts::reinit_ident(context[29], identifiers[ident_s]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[30] );
      refalrts::link_brackets( context[18], context[73] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[66], context[69] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[61] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_evar( res, context[70], context[73] );
      res = refalrts::splice_evar( res, context[14], context[29] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[32], context[43] );
      res = refalrts::splice_elem( res, context[66] );
      res = refalrts::splice_elem( res, context[6] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      res = refalrts::splice_evar( res, context[61], context[65] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new16/5 s.new17/6 (/9 e.new22/33 s.new23/43 )/10 (/13 e.new24/35 )/14 (/17 e.new25/37 )/18 (/29 s.new19/31 s.new20/32 e.new21/39 )/30 e.new18/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new24 as range 35
      // closed e.new25 as range 37
      // closed e.new21 as range 39
      // closed e.new18 as range 41
      if( ! refalrts::svar_right( context[43], context[33], context[34] ) )
        continue;
      // closed e.new22 as range 33
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/44 s.L/43 )/10 (/13 s.R/52 e.Pattern-R/46 )/14 (/17 e.Vars/48 )/18 (/29 s.Offset/31 # CL/32 )/30 e.Commands/50 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[41];
        context[51] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_CL], context[32] ) )
          continue;
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        // closed e.Pattern-L as range 44
        // closed e.Vars as range 48
        // closed e.Commands as range 50
        if( ! refalrts::svar_left( context[52], context[46], context[47] ) )
          continue;
        // closed e.Pattern-R as range 46
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.L: 43
        //DEBUG: s.Offset: 31
        //DEBUG: e.Pattern-L: 44
        //DEBUG: e.Vars: 48
        //DEBUG: e.Commands: 50
        //DEBUG: s.R: 52
        //DEBUG: e.Pattern-R: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/43 {REMOVED TILE} s.R/52 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$18=1/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L/44 } Tile{ AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Pattern-R/46 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/48 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/50 } Tile{ AsIs: )/30 } s.Top/6/53 Tile{ HalfReuse: </32 } & Add/54 s.Top/6/55 1/56 >/57 Tile{ AsIs: >/1 ]] }
        refalrts::copy_stvar(vm, context[53], context[6]);
        refalrts::alloc_name(vm, context[54], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[55], context[6]);
        refalrts::alloc_number(vm, context[56], 1UL);
        refalrts::alloc_close_call(vm, context[57]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S18A1]);
        refalrts::reinit_open_call(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[54], context[57] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/44 s.L/43 )/10 (/13 e.Pattern-R/46 )/14 (/17 e.Vars/48 )/18 (/29 s.Offset/31 # OEXP/32 s.IdR/54 )/30 e.Commands/52 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_OEXP], context[32] ) )
        continue;
      // closed e.Pattern-L as range 44
      // closed e.Pattern-R as range 46
      // closed e.Vars as range 48
      // closed e.Commands as range 52
      if( ! refalrts::svar_left( context[54], context[50], context[51] ) )
        continue;
      if( ! refalrts::empty_seq( context[50], context[51] ) )
        continue;
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.L: 43
      //DEBUG: s.Offset: 31
      //DEBUG: e.Pattern-L: 44
      //DEBUG: e.Pattern-R: 46
      //DEBUG: e.Vars: 48
      //DEBUG: e.Commands: 52
      //DEBUG: s.IdR: 54

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/43 {REMOVED TILE} s.Offset/31 {REMOVED TILE} s.IdR/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } Tile{ HalfReuse: & Decompile-Pattern-Hole$19=1/0 HalfReuse: s.IdR54 /4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L/44 } Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/46 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/48 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/52 } Tile{ AsIs: )/30 } e.Vars/48/55 Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[55], context[56], context[48], context[49]);
      refalrts::reinit_open_call(context[32]);
      refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1]);
      refalrts::reinit_svar( context[4], context[54] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[10], context[29] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new16/5 s.new17/6 (/9 e.new22/33 )/10 (/13 s.new23/43 e.new24/35 )/14 (/17 e.new25/37 )/18 (/29 s.new19/31 s.new20/32 e.new21/39 )/30 e.new18/41 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[25];
      context[42] = context[26];
      // closed e.new22 as range 33
      // closed e.new25 as range 37
      // closed e.new21 as range 39
      // closed e.new18 as range 41
      if( ! refalrts::svar_left( context[43], context[35], context[36] ) )
        continue;
      // closed e.new24 as range 35
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/44 )/10 (/13 s.R/43 e.Pattern-R/46 )/14 (/17 e.Vars/48 )/18 (/29 s.Offset/31 # OEXPR/32 s.IdR/54 )/30 e.Commands/52 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_OEXPR], context[32] ) )
          continue;
        // closed e.Pattern-L as range 44
        // closed e.Pattern-R as range 46
        // closed e.Vars as range 48
        // closed e.Commands as range 52
        if( ! refalrts::svar_left( context[54], context[50], context[51] ) )
          continue;
        if( ! refalrts::empty_seq( context[50], context[51] ) )
          continue;
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.R: 43
        //DEBUG: s.Offset: 31
        //DEBUG: e.Pattern-L: 44
        //DEBUG: e.Pattern-R: 46
        //DEBUG: e.Vars: 48
        //DEBUG: e.Commands: 52
        //DEBUG: s.IdR: 54

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/43 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} s.IdR/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 } Tile{ HalfReuse: & Decompile-Pattern-Hole$20=1/0 HalfReuse: s.IdR54 /4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern-L/44 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Pattern-R/46 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/48 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/52 } Tile{ AsIs: )/30 } e.Vars/48/55 Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[55], context[56], context[48], context[49]);
        refalrts::reinit_open_call(context[32]);
        refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1]);
        refalrts::reinit_svar( context[4], context[54] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_elem( res, context[32] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole/4 s.new26/5 s.new27/6 (/9 e.new31/44 )/10 (/13 s.new32/43 e.new33/46 )/14 (/17 e.new34/48 )/18 (/29 s.new29/31 s.new30/32 )/30 e.new28/50 >/1
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[41];
        context[51] = context[42];
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        // closed e.new31 as range 44
        // closed e.new33 as range 46
        // closed e.new34 as range 48
        // closed e.new28 as range 50
        do {
          // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/52 s.L/60 )/10 (/13 s.R/43 e.Pattern-R/54 )/14 (/17 e.Vars/56 )/18 (/29 s.Offset/31 # PS/32 )/30 e.Commands/58 >/1
          context[52] = context[44];
          context[53] = context[45];
          context[54] = context[46];
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[49];
          context[58] = context[50];
          context[59] = context[51];
          if( ! refalrts::ident_term( identifiers[ident_PS], context[32] ) )
            continue;
          // closed e.Pattern-R as range 54
          // closed e.Vars as range 56
          // closed e.Commands as range 58
          if( ! refalrts::svar_right( context[60], context[52], context[53] ) )
            continue;
          // closed e.Pattern-L as range 52
          //DEBUG: s.Level: 5
          //DEBUG: s.Top: 6
          //DEBUG: s.R: 43
          //DEBUG: s.Offset: 31
          //DEBUG: e.Pattern-R: 54
          //DEBUG: e.Vars: 56
          //DEBUG: e.Commands: 58
          //DEBUG: s.L: 60
          //DEBUG: e.Pattern-L: 52

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/60 {REMOVED TILE} s.R/43 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$21=1/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L/52 } Tile{ AsIs: )/10 HalfReuse: s.R43 /13 } Tile{ HalfReuse: (/32 } Tile{ AsIs: e.Pattern-R/54 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/56 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/58 } Tile{ AsIs: )/30 } s.Top/6/61 </62 & Add/63 s.Top/6/64 1/65 >/66 Tile{ AsIs: >/1 ]] }
          refalrts::copy_stvar(vm, context[61], context[6]);
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
          refalrts::copy_stvar(vm, context[64], context[6]);
          refalrts::alloc_number(vm, context[65], 1UL);
          refalrts::alloc_close_call(vm, context[66]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S21A1]);
          refalrts::reinit_svar( context[13], context[43] );
          refalrts::reinit_open_bracket(context[32]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[66] );
          refalrts::push_stack( vm, context[62] );
          refalrts::link_brackets( context[29], context[30] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[32], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[61], context[66] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[14], context[29] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_evar( res, context[10], context[13] );
          res = refalrts::splice_evar( res, context[52], context[53] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/52 )/10 (/13 s.R/43 e.Pattern-R/54 )/14 (/17 e.Vars/56 )/18 (/29 s.Offset/31 # PSR/32 )/30 e.Commands/58 >/1
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_PSR], context[32] ) )
          continue;
        // closed e.Pattern-L as range 52
        // closed e.Pattern-R as range 54
        // closed e.Vars as range 56
        // closed e.Commands as range 58
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.R: 43
        //DEBUG: s.Offset: 31
        //DEBUG: e.Pattern-L: 52
        //DEBUG: e.Pattern-R: 54
        //DEBUG: e.Vars: 56
        //DEBUG: e.Commands: 58

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.R/43 {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$22=1/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern-L/52 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Pattern-R/54 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/56 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/58 } Tile{ AsIs: )/30 } s.Top/6/60 Tile{ HalfReuse: </32 } & Add/61 s.Top/6/62 1/63 >/64 Tile{ AsIs: >/1 ]] }
        refalrts::copy_stvar(vm, context[60], context[6]);
        refalrts::alloc_name(vm, context[61], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[62], context[6]);
        refalrts::alloc_number(vm, context[63], 1UL);
        refalrts::alloc_close_call(vm, context[64]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S22A1]);
        refalrts::reinit_open_call(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[64] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[61], context[64] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_elem( res, context[60] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.new26/5 s.new27/6 (/9 e.new32/44 s.new33/54 )/10 (/13 s.new34/43 e.new35/46 )/14 (/17 e.new36/48 )/18 (/29 s.new29/31 s.new30/32 e.new31/50 )/30 e.new28/52 >/1
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      // closed e.new35 as range 46
      // closed e.new36 as range 48
      // closed e.new31 as range 50
      // closed e.new28 as range 52
      if( ! refalrts::svar_right( context[54], context[44], context[45] ) )
        continue;
      // closed e.new32 as range 44
      do {
        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/55 s.L/54 )/10 (/13 s.R/43 e.Pattern-R/57 )/14 (/17 e.Vars/59 )/18 (/29 s.Offset/31 # SETB/32 s.NewL/65 s.NewR/66 )/30 e.Commands/63 >/1
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[50];
        context[62] = context[51];
        context[63] = context[52];
        context[64] = context[53];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[32] ) )
          continue;
        // closed e.Pattern-L as range 55
        // closed e.Pattern-R as range 57
        // closed e.Vars as range 59
        // closed e.Commands as range 63
        if( ! refalrts::svar_left( context[65], context[61], context[62] ) )
          continue;
        if( ! refalrts::svar_left( context[66], context[61], context[62] ) )
          continue;
        if( ! refalrts::empty_seq( context[61], context[62] ) )
          continue;
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.L: 54
        //DEBUG: s.R: 43
        //DEBUG: s.Offset: 31
        //DEBUG: e.Pattern-L: 55
        //DEBUG: e.Pattern-R: 57
        //DEBUG: e.Vars: 59
        //DEBUG: e.Commands: 63
        //DEBUG: s.NewL: 65
        //DEBUG: s.NewR: 66

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L/55 } (/67 Tile{ HalfReuse: # Hole/10 HalfReuse: s.L54 /13 AsIs: s.R/43 } )/68 Tile{ AsIs: e.Pattern-R/57 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/59 AsIs: )/18 AsIs: (/29 AsIs: s.Offset/31 AsIs: # SETB/32 AsIs: s.NewL/65 AsIs: s.NewR/66 AsIs: )/30 AsIs: e.Commands/63 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[67]);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_NoHole]);
        refalrts::reinit_ident(context[10], identifiers[ident_Hole]);
        refalrts::reinit_svar( context[13], context[54] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::link_brackets( context[67], context[68] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_elem( res, context[68] );
        res = refalrts::splice_evar( res, context[10], context[43] );
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/55 s.L/54 )/10 (/13 s.R/43 e.Pattern-R/57 )/14 (/17 e.Vars/59 )/18 (/29 s.Offset/31 # EMP/32 )/30 e.Commands/61 >/1
      context[55] = context[44];
      context[56] = context[45];
      context[57] = context[46];
      context[58] = context[47];
      context[59] = context[48];
      context[60] = context[49];
      context[61] = context[52];
      context[62] = context[53];
      if( ! refalrts::ident_term( identifiers[ident_EMP], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[50], context[51] ) )
        continue;
      // closed e.Pattern-L as range 55
      // closed e.Pattern-R as range 57
      // closed e.Vars as range 59
      // closed e.Commands as range 61
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.L: 54
      //DEBUG: s.R: 43
      //DEBUG: s.Offset: 31
      //DEBUG: e.Pattern-L: 55
      //DEBUG: e.Pattern-R: 57
      //DEBUG: e.Vars: 59
      //DEBUG: e.Commands: 61

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/54 )/10 (/13 s.R/43 {REMOVED TILE} {REMOVED TILE} (/29 s.Offset/31 # EMP/32 )/30 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L/55 } Tile{ AsIs: e.Pattern-R/57 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/59 AsIs: )/18 } Tile{ AsIs: e.Commands/61 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[14], context[18] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole/4 s.new16/5 s.new17/6 (/9 e.new21/33 )/10 (/13 e.new22/35 )/14 (/17 e.new23/37 )/18 (/29 s.new19/31 s.new20/32 )/30 e.new18/39 >/1
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      context[40] = context[26];
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.new21 as range 33
      // closed e.new22 as range 35
      // closed e.new23 as range 37
      // closed e.new18 as range 39
      do {
        // </0 & Decompile-Pattern-Hole/4 s.new24/5 s.new25/6 (/9 e.new32/41 s.new33/53 )/10 (/13 e.new34/43 )/14 (/17 e.new35/45 )/18 (/29 s.new30/31 s.new31/32 )/30 (/51 e.new26/49 s.new27/55 s.new28/54 )/52 e.new29/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = 0;
        context[50] = 0;
        context[51] = refalrts::brackets_left( context[49], context[50], context[47], context[48] );
        if( ! context[51] )
          continue;
        refalrts::bracket_pointers(context[51], context[52]);
        // closed e.new34 as range 43
        // closed e.new35 as range 45
        // closed e.new29 as range 47
        if( ! refalrts::svar_right( context[53], context[41], context[42] ) )
          continue;
        // closed e.new32 as range 41
        if( ! refalrts::svar_right( context[54], context[49], context[50] ) )
          continue;
        if( ! refalrts::svar_right( context[55], context[49], context[50] ) )
          continue;
        // closed e.new26 as range 49
        do {
          // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/56 s.L/53 )/10 (/13 e.Pattern-R/58 )/14 (/17 e.Vars/60 )/18 (/29 s.Offset1/31 # PLEN/32 )/30 (/51 s.Offset2/55 # LEN/54 )/52 e.Commands/62 >/1
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[46];
          context[62] = context[47];
          context[63] = context[48];
          if( ! refalrts::ident_term( identifiers[ident_PLEN], context[32] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LEN], context[54] ) )
            continue;
          if( ! refalrts::empty_seq( context[49], context[50] ) )
            continue;
          // closed e.Pattern-L as range 56
          // closed e.Pattern-R as range 58
          // closed e.Vars as range 60
          // closed e.Commands as range 62
          //DEBUG: s.Level: 5
          //DEBUG: s.Top: 6
          //DEBUG: s.L: 53
          //DEBUG: s.Offset1: 31
          //DEBUG: s.Offset2: 55
          //DEBUG: e.Pattern-L: 56
          //DEBUG: e.Pattern-R: 58
          //DEBUG: e.Vars: 60
          //DEBUG: e.Commands: 62

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 {REMOVED TILE} s.Offset1/31 {REMOVED TILE} {REMOVED TILE} s.Offset2/55 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$25=1/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L/56 } Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/58 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/60 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/62 } Tile{ AsIs: )/30 HalfReuse: s.Top6 /51 } Tile{ HalfReuse: </32 } Tile{ HalfReuse: & Add/54 HalfReuse: s.Top6 /52 } 1/64 >/65 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[64], 1UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S25A1]);
          refalrts::reinit_svar( context[51], context[6] );
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[54], functions[efunc_Add]);
          refalrts::reinit_svar( context[52], context[6] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[29], context[30] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_evar( res, context[54], context[52] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_evar( res, context[30], context[51] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_evar( res, context[10], context[29] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/56 s.L/53 )/10 (/13 e.Pattern-R/58 )/14 (/17 e.Vars/60 )/18 (/29 s.Offset1/31 # PLENS/32 )/30 (/51 s.Offset2/66 # LENS/55 s.Char/54 )/52 e.Commands/64 >/1
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[46];
          context[62] = context[49];
          context[63] = context[50];
          context[64] = context[47];
          context[65] = context[48];
          if( ! refalrts::ident_term( identifiers[ident_PLENS], context[32] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LENS], context[55] ) )
            continue;
          // closed e.Pattern-L as range 56
          // closed e.Pattern-R as range 58
          // closed e.Vars as range 60
          // closed e.Commands as range 64
          if( ! refalrts::svar_left( context[66], context[62], context[63] ) )
            continue;
          if( ! refalrts::empty_seq( context[62], context[63] ) )
            continue;
          //DEBUG: s.Level: 5
          //DEBUG: s.Top: 6
          //DEBUG: s.L: 53
          //DEBUG: s.Offset1: 31
          //DEBUG: s.Char: 54
          //DEBUG: e.Pattern-L: 56
          //DEBUG: e.Pattern-R: 58
          //DEBUG: e.Vars: 60
          //DEBUG: e.Commands: 64
          //DEBUG: s.Offset2: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 {REMOVED TILE} s.Offset1/31 {REMOVED TILE} {REMOVED TILE} s.Offset2/66 {REMOVED TILE} s.Char/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$26=1/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L/56 } Tile{ AsIs: )/52 } Tile{ HalfReuse: s.Char54 /10 AsIs: (/13 AsIs: e.Pattern-R/58 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/60 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/64 } Tile{ AsIs: )/30 HalfReuse: s.Top6 /51 } Tile{ HalfReuse: </55 } Tile{ HalfReuse: & Add/32 } s.Top/6/67 1/68 >/69 </70 & Add/71 s.Top/6/72 2/73 >/74 Tile{ AsIs: >/1 ]] }
          refalrts::copy_stvar(vm, context[67], context[6]);
          refalrts::alloc_number(vm, context[68], 1UL);
          refalrts::alloc_close_call(vm, context[69]);
          refalrts::alloc_open_call(vm, context[70]);
          refalrts::alloc_name(vm, context[71], functions[efunc_Add]);
          refalrts::copy_stvar(vm, context[72], context[6]);
          refalrts::alloc_number(vm, context[73], 2UL);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S26A1]);
          refalrts::reinit_svar( context[10], context[54] );
          refalrts::reinit_svar( context[51], context[6] );
          refalrts::reinit_open_call(context[55]);
          refalrts::reinit_name(context[32], functions[efunc_Add]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[70] );
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[55] );
          refalrts::link_brackets( context[29], context[30] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[52] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[67], context[74] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_elem( res, context[55] );
          res = refalrts::splice_evar( res, context[30], context[51] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_evar( res, context[10], context[29] );
          res = refalrts::splice_elem( res, context[52] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/56 s.L/53 )/10 (/13 s.R/64 e.Pattern-R/58 )/14 (/17 e.Vars/60 )/18 (/29 s.Offset1/31 # PLENP/32 )/30 (/51 s.Offset2/55 # LENP/54 )/52 e.Commands/62 >/1
        context[56] = context[41];
        context[57] = context[42];
        context[58] = context[43];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        context[63] = context[48];
        if( ! refalrts::ident_term( identifiers[ident_PLENP], context[32] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_LENP], context[54] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        // closed e.Pattern-L as range 56
        // closed e.Vars as range 60
        // closed e.Commands as range 62
        if( ! refalrts::svar_left( context[64], context[58], context[59] ) )
          continue;
        // closed e.Pattern-R as range 58
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.L: 53
        //DEBUG: s.Offset1: 31
        //DEBUG: s.Offset2: 55
        //DEBUG: e.Pattern-L: 56
        //DEBUG: e.Vars: 60
        //DEBUG: e.Commands: 62
        //DEBUG: s.R: 64
        //DEBUG: e.Pattern-R: 58

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 {REMOVED TILE} s.R/64 {REMOVED TILE} {REMOVED TILE} s.Offset1/31 {REMOVED TILE} s.Offset2/55 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$27=1/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L/56 } Tile{ HalfReuse: )/32 HalfReuse: s.R64 /30 AsIs: (/51 } Tile{ AsIs: e.Pattern-R/58 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Vars/60 AsIs: )/18 AsIs: (/29 } Tile{ AsIs: e.Commands/62 } Tile{ AsIs: )/10 HalfReuse: s.Top6 /13 } </65 & Add/66 Tile{ HalfReuse: s.Top6 /54 HalfReuse: 1/52 } >/67 </68 & Add/69 s.Top/6/70 2/71 >/72 </73 & Add/74 s.Top/6/75 3/76 >/77 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[65]);
        refalrts::alloc_name(vm, context[66], functions[efunc_Add]);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_open_call(vm, context[68]);
        refalrts::alloc_name(vm, context[69], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[70], context[6]);
        refalrts::alloc_number(vm, context[71], 2UL);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_open_call(vm, context[73]);
        refalrts::alloc_name(vm, context[74], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[75], context[6]);
        refalrts::alloc_number(vm, context[76], 3UL);
        refalrts::alloc_close_call(vm, context[77]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S27A1]);
        refalrts::reinit_close_bracket(context[32]);
        refalrts::reinit_svar( context[30], context[64] );
        refalrts::reinit_svar( context[13], context[6] );
        refalrts::reinit_svar( context[54], context[6] );
        refalrts::reinit_number(context[52], 1UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[77] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[68] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[65] );
        refalrts::link_brackets( context[29], context[10] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[51], context[14] );
        refalrts::link_brackets( context[9], context[32] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[67], context[77] );
        res = refalrts::splice_evar( res, context[54], context[52] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[32], context[51] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/41 )/10 (/13 e.Pattern-R/43 )/14 (/17 e.Vars/45 )/18 (/29 s.Offset/31 # STLEN/32 )/30 e.Commands/47 >/1
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      if( ! refalrts::ident_term( identifiers[ident_STLEN], context[32] ) )
        continue;
      // closed e.Pattern-L as range 41
      // closed e.Pattern-R as range 43
      // closed e.Vars as range 45
      // closed e.Commands as range 47
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 31
      //DEBUG: e.Pattern-L: 41
      //DEBUG: e.Pattern-R: 43
      //DEBUG: e.Vars: 45
      //DEBUG: e.Commands: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/29 } Tile{ Reuse: # StartBlock/32 AsIs: )/30 } Tile{ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 } </49 & Add/50 1/51 Tile{ AsIs: s.Level/5 } >/52 Tile{ AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern-L/41 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/43 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/45 AsIs: )/18 } Tile{ AsIs: e.Commands/47 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[51], 1UL);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::update_ident(context[32], identifiers[ident_StartBlock]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[6], context[18] );
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[49], context[51] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[32], context[30] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/33 )/10 (/13 e.Pattern-R/35 )/14 (/17 e.Vars/37 )/18 (/29 s.Offset/31 # LABEL/32 e.BlockName/39 )/30 e.Commands/41 >/1
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[24];
    context[39] = context[27];
    context[40] = context[28];
    context[41] = context[25];
    context[42] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[32] ) )
      continue;
    // closed e.Pattern-L as range 33
    // closed e.Pattern-R as range 35
    // closed e.Vars as range 37
    // closed e.BlockName as range 39
    // closed e.Commands as range 41
    //DEBUG: s.Level: 5
    //DEBUG: s.Top: 6
    //DEBUG: s.Offset: 31
    //DEBUG: e.Pattern-L: 33
    //DEBUG: e.Pattern-R: 35
    //DEBUG: e.Vars: 37
    //DEBUG: e.BlockName: 39
    //DEBUG: e.Commands: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/29 s.Offset/31 # LABEL/32 e.BlockName/39 )/30 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern-L/33 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/35 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/37 AsIs: )/18 } Tile{ AsIs: e.Commands/41 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    refalrts::splice_to_freelist_open( vm, context[18], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 s.L/23 )/10 (/13 s.R/24 )/14 (/17 )/18 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::svar_left( context[23], context[19], context[20] ) )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
      continue;
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    //DEBUG: s.Level: 5
    //DEBUG: s.Top: 6
    //DEBUG: s.L: 23
    //DEBUG: s.R: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 s.L/23 )/10 (/13 s.R/24 )/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/17 HalfReuse: # EndOfFunction/18 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[18], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[17], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/7 )/10 (/13 e.Pattern-R/11 )/14 (/17 e.Vars/15 )/18 e.Commands/2 >/1
  // closed e.Pattern-L as range 7
  // closed e.Pattern-R as range 11
  // closed e.Vars as range 15
  // closed e.Commands as range 2
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern-L: 7
  //DEBUG: e.Pattern-R: 11
  //DEBUG: e.Vars: 15
  //DEBUG: e.Commands: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/19 '='/20 Tile{ HalfReuse: 'A'/0 HalfReuse: ' '/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern-L/7 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars/15 AsIs: )/18 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Commands/2 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_char(vm, context[20], '=');
  refalrts::reinit_char(context[0], 'A');
  refalrts::reinit_char(context[4], ' ');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[19], context[1] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[0], context[18] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Decompilem_Patternm_Hole("Decompile-Pattern-Hole", COOKIE1_, COOKIE2_, func_Decompilem_Patternm_Hole);


static refalrts::FnResult func_Rev(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Rev/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Rev/4 t.First/7 e.Middle/5 t.Last/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    context[10] = refalrts::tvar_right( context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    // closed e.Middle as range 5
    //DEBUG: t.First: 7
    //DEBUG: t.Last: 9
    //DEBUG: e.Middle: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Last/9 } Tile{ AsIs: </0 AsIs: & Rev/4 } Tile{ AsIs: e.Middle/5 } Tile{ AsIs: >/1 } Tile{ AsIs: t.First/7 } Tile{ ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Rev/4 e.ZeroOrOne/2 >/1
  // closed e.ZeroOrOne as range 2
  //DEBUG: e.ZeroOrOne: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Rev/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.ZeroOrOne/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Rev("Rev", COOKIE1_, COOKIE2_, func_Rev);


static refalrts::FnResult func_Decompilem_Patternm_NoHole(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 69 elems
  refalrts::Iter context[69];
  refalrts::zeros( context, 69 );
  // </0 & Decompile-Pattern-NoHole/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-NoHole/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 (/13 e.new4/11 )/14 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new3 as range 7
  // closed e.new4 as range 11
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Pattern-NoHole/4 s.new6/5 s.new7/6 (/9 e.new12/15 )/10 (/13 e.new13/17 )/14 (/23 s.new8/25 s.new9/26 e.new10/21 )/24 e.new11/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new12 as range 15
    // closed e.new13 as range 17
    // closed e.new11 as range 19
    if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
      continue;
    // closed e.new10 as range 21
    do {
      // </0 & Decompile-Pattern-NoHole/4 s.new14/5 s.new15/6 (/9 e.new21/27 )/10 (/13 e.new22/29 )/14 (/23 s.new17/25 s.new18/26 e.new19/31 s.new20/35 )/24 e.new16/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new21 as range 27
      // closed e.new22 as range 29
      // closed e.new16 as range 33
      if( ! refalrts::svar_right( context[35], context[31], context[32] ) )
        continue;
      // closed e.new19 as range 31
      do {
        // </0 & Decompile-Pattern-NoHole/4 s.Level/5 s.Top/6 (/9 e.Pattern-L/45 (/51 # Hole/53 s.L/54 s.R/55 )/52 e.Pattern-R/47 )/10 (/13 e.Vars/38 )/14 (/23 s.Offset/25 # SETB/26 s.L/44 s.R/35 )/24 e.Commands/42 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[26] ) )
          continue;
        // closed e.Vars as range 38
        // closed e.Commands as range 42
        if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
          continue;
        if( ! refalrts::empty_seq( context[40], context[41] ) )
          continue;
        context[45] = 0;
        context[46] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[47] = context[36];
          context[48] = context[37];
          context[49] = 0;
          context[50] = 0;
          context[51] = refalrts::brackets_left( context[49], context[50], context[47], context[48] );
          if( ! context[51] )
            continue;
          refalrts::bracket_pointers(context[51], context[52]);
          context[53] = refalrts::ident_left( identifiers[ident_Hole], context[49], context[50] );
          if( ! context[53] )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[54], context[44], context[49], context[50] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[55], context[35], context[49], context[50] ) )
            continue;
          if( ! refalrts::empty_seq( context[49], context[50] ) )
            continue;
          // closed e.Pattern-R as range 47
          //DEBUG: s.Level: 5
          //DEBUG: s.Top: 6
          //DEBUG: s.Offset: 25
          //DEBUG: s.R: 35
          //DEBUG: e.Vars: 38
          //DEBUG: e.Commands: 42
          //DEBUG: s.L: 44
          //DEBUG: e.Pattern-L: 45
          //DEBUG: e.Pattern-R: 47

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.L/54 s.R/55 {REMOVED TILE} {REMOVED TILE} s.Offset/25 # SETB/26 s.L/44 s.R/35 )/24 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern-L/45 HalfReuse: s.L54 /51 HalfReuse: )/53 } Tile{ AsIs: (/23 } Tile{ HalfReuse: s.R55 /52 AsIs: e.Pattern-R/47 AsIs: )/10 AsIs: (/13 AsIs: e.Vars/38 AsIs: )/14 } Tile{ AsIs: e.Commands/42 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::reinit_svar( context[51], context[54] );
          refalrts::reinit_close_bracket(context[53]);
          refalrts::reinit_svar( context[52], context[55] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[23], context[10] );
          refalrts::link_brackets( context[9], context[53] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[52], context[14] );
          res = refalrts::splice_elem( res, context[23] );
          refalrts::splice_to_freelist_open( vm, context[53], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[45], context[46], context[36], context[37] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole/4 s.Level/5 s.Top/6 (/9 e.Pattern/36 )/10 (/13 e.Vars/38 )/14 (/23 s.Offset/25 # RDY/26 0/35 )/24 e.Commands/40 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[33];
      context[41] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_RDY], context[26] ) )
        continue;
      if( ! refalrts::number_term( 0UL, context[35] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      // closed e.Pattern as range 36
      // closed e.Vars as range 38
      // closed e.Commands as range 40
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 25
      //DEBUG: e.Pattern: 36
      //DEBUG: e.Vars: 38
      //DEBUG: e.Commands: 40

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 } Tile{ HalfReuse: # Pattern/23 } s.Level/5/42 Tile{ AsIs: e.Pattern/36 } Tile{ AsIs: )/14 } Tile{ AsIs: </0 Reuse: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Vars/38 } Tile{ AsIs: )/10 } Tile{ HalfReuse: (/26 HalfReuse: '$'/35 AsIs: )/24 AsIs: e.Commands/40 AsIs: >/1 ]] }
      refalrts::copy_stvar(vm, context[42], context[5]);
      refalrts::reinit_ident(context[23], identifiers[ident_Pattern]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Result]);
      refalrts::reinit_open_bracket(context[26]);
      refalrts::reinit_char(context[35], '$');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[24] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole/4 s.Level/5 s.Top/6 (/9 e.Pattern/27 )/10 (/13 e.Vars/29 )/14 (/23 s.Offset/25 # PUSHVF/26 )/24 e.Commands/31 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_PUSHVF], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Pattern as range 27
      // closed e.Vars as range 29
      // closed e.Commands as range 31
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 25
      //DEBUG: e.Pattern: 27
      //DEBUG: e.Vars: 29
      //DEBUG: e.Commands: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
      //RESULT: Tile{ [[ } (/33 # Pattern/34 s.Level/5/35 Tile{ AsIs: e.Pattern/27 } Tile{ AsIs: )/10 AsIs: (/13 } # StartCondition/36 )/37 Tile{ AsIs: </0 Reuse: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 } Tile{ AsIs: e.Vars/29 } Tile{ AsIs: )/14 AsIs: (/23 } Tile{ HalfReuse: '$'/26 AsIs: )/24 AsIs: e.Commands/31 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_Pattern]);
      refalrts::copy_stvar(vm, context[35], context[5]);
      refalrts::alloc_ident(vm, context[36], identifiers[ident_StartCondition]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Result]);
      refalrts::reinit_char(context[26], '$');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::link_brackets( context[13], context[37] );
      refalrts::link_brackets( context[33], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[14], context[23] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[33], context[35] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole/4 s.new14/5 s.new15/6 (/9 e.new21/27 )/10 (/13 e.new22/29 )/14 (/23 s.new17/25 s.new18/26 s.new19/35 e.new20/31 )/24 e.new16/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new21 as range 27
      // closed e.new22 as range 29
      // closed e.new16 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      // closed e.new20 as range 31
      do {
        // </0 & Decompile-Pattern-NoHole/4 s.Level/5 s.Top/6 (/9 e.Pattern/36 )/10 (/13 e.Vars/38 )/14 (/23 s.Offset/25 # TRAN/26 s.Jump/35 )/24 e.Commands-B/42 (/48 s.Jump/50 e.Command/46 )/49 e.Commands-E/44 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[26] ) )
          continue;
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.Pattern as range 36
        // closed e.Vars as range 38
        context[42] = 0;
        context[43] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[44] = context[40];
          context[45] = context[41];
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::brackets_left( context[46], context[47], context[44], context[45] );
          if( ! context[48] )
            continue;
          refalrts::bracket_pointers(context[48], context[49]);
          if( ! refalrts::repeated_stvar_left( vm, context[50], context[35], context[46], context[47] ) )
            continue;
          // closed e.Command as range 46
          // closed e.Commands-E as range 44
          //DEBUG: s.Level: 5
          //DEBUG: s.Top: 6
          //DEBUG: s.Offset: 25
          //DEBUG: s.Jump: 35
          //DEBUG: e.Pattern: 36
          //DEBUG: e.Vars: 38
          //DEBUG: e.Commands-B: 42
          //DEBUG: e.Command: 46
          //DEBUG: e.Commands-E: 44

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE} s.Jump/35 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern/36 AsIs: )/10 AsIs: (/13 AsIs: e.Vars/38 AsIs: )/14 } Tile{ AsIs: e.Commands-B/42 } Tile{ AsIs: (/23 } '@'/51 Tile{ Reuse: # Restore-NoHole/26 } s.Level/5/52 s.Top/6/53 (/54 e.Pattern/36/55 Tile{ AsIs: )/24 } (/57 e.Vars/38/58 )/60 )/61 Tile{ AsIs: (/48 AsIs: s.Jump/50 AsIs: e.Command/46 AsIs: )/49 AsIs: e.Commands-E/44 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[51], '@');
          refalrts::copy_stvar(vm, context[52], context[5]);
          refalrts::copy_stvar(vm, context[53], context[6]);
          refalrts::alloc_open_bracket(vm, context[54]);
          refalrts::copy_evar(vm, context[55], context[56], context[36], context[37]);
          refalrts::alloc_open_bracket(vm, context[57]);
          refalrts::copy_evar(vm, context[58], context[59], context[38], context[39]);
          refalrts::alloc_close_bracket(vm, context[60]);
          refalrts::alloc_close_bracket(vm, context[61]);
          refalrts::update_ident(context[26], identifiers[ident_Restorem_NoHole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::link_brackets( context[23], context[61] );
          refalrts::link_brackets( context[57], context[60] );
          refalrts::link_brackets( context[54], context[24] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[48];
          res = refalrts::splice_evar( res, context[57], context[61] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[52], context[54] );
          res = refalrts::splice_elem( res, context[26] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[42], context[43], context[40], context[41] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole/4 s.new23/5 s.new24/6 (/9 e.new32/36 )/10 (/13 e.new33/38 )/14 (/23 '@'/25 s.new26/26 s.new27/35 s.new28/52 e.new29/40 (/50 e.new30/48 )/51 (/46 e.new31/44 )/47 )/24 e.new25/42 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      if( ! refalrts::char_term( '@', context[25] ) )
        continue;
      context[44] = 0;
      context[45] = 0;
      context[46] = refalrts::brackets_right( context[44], context[45], context[40], context[41] );
      if( ! context[46] )
        continue;
      refalrts::bracket_pointers(context[46], context[47]);
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_right( context[48], context[49], context[40], context[41] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      // closed e.new32 as range 36
      // closed e.new33 as range 38
      // closed e.new30 as range 48
      // closed e.new31 as range 44
      // closed e.new25 as range 42
      if( ! refalrts::svar_left( context[52], context[40], context[41] ) )
        continue;
      // closed e.new29 as range 40
      do {
        // </0 & Decompile-Pattern-NoHole/4 s.Level1/5 s.Top1/6 (/9 e.Pattern1/53 )/10 (/13 e.Vars1/55 )/14 (/23 '@'/25 # Restore-Hole/26 s.Level2/35 s.Top2/52 (/67 e.Pattern-L2/65 )/68 (/50 e.Pattern-R2/59 )/51 (/46 e.Vars2/61 )/47 )/24 e.Commands/63 >/1
        context[53] = context[36];
        context[54] = context[37];
        context[55] = context[38];
        context[56] = context[39];
        context[57] = context[40];
        context[58] = context[41];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[44];
        context[62] = context[45];
        context[63] = context[42];
        context[64] = context[43];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[26] ) )
          continue;
        context[65] = 0;
        context[66] = 0;
        context[67] = refalrts::brackets_left( context[65], context[66], context[57], context[58] );
        if( ! context[67] )
          continue;
        refalrts::bracket_pointers(context[67], context[68]);
        if( ! refalrts::empty_seq( context[57], context[58] ) )
          continue;
        // closed e.Pattern1 as range 53
        // closed e.Vars1 as range 55
        // closed e.Pattern-L2 as range 65
        // closed e.Pattern-R2 as range 59
        // closed e.Vars2 as range 61
        // closed e.Commands as range 63
        //DEBUG: s.Level1: 5
        //DEBUG: s.Top1: 6
        //DEBUG: s.Level2: 35
        //DEBUG: s.Top2: 52
        //DEBUG: e.Pattern1: 53
        //DEBUG: e.Vars1: 55
        //DEBUG: e.Pattern-L2: 65
        //DEBUG: e.Pattern-R2: 59
        //DEBUG: e.Vars2: 61
        //DEBUG: e.Commands: 63

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole/4 s.Level1/5 s.Top1/6 (/9 e.Pattern1/53 )/10 (/13 e.Vars1/55 )/14 (/23 {REMOVED TILE} )/24 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & Decompile-Pattern-Hole/26 AsIs: s.Level2/35 AsIs: s.Top2/52 AsIs: (/67 AsIs: e.Pattern-L2/65 AsIs: )/68 AsIs: (/50 AsIs: e.Pattern-R2/59 AsIs: )/51 AsIs: (/46 AsIs: e.Vars2/61 AsIs: )/47 } Tile{ AsIs: e.Commands/63 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[25]);
        refalrts::reinit_name(context[26], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[25] );
        refalrts::link_brackets( context[46], context[47] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[67], context[68] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[63], context[64] );
        res = refalrts::splice_evar( res, context[25], context[47] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole/4 s.Level1/5 s.Top1/6 (/9 e.Pattern1/53 )/10 (/13 e.Vars1/55 )/14 (/23 '@'/25 # Restore-NoHole/26 s.Level2/35 s.Top2/52 (/50 e.Pattern2/57 )/51 (/46 e.Vars2/59 )/47 )/24 e.Commands/61 >/1
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[38];
      context[56] = context[39];
      context[57] = context[48];
      context[58] = context[49];
      context[59] = context[44];
      context[60] = context[45];
      context[61] = context[42];
      context[62] = context[43];
      if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      // closed e.Pattern1 as range 53
      // closed e.Vars1 as range 55
      // closed e.Pattern2 as range 57
      // closed e.Vars2 as range 59
      // closed e.Commands as range 61
      //DEBUG: s.Level1: 5
      //DEBUG: s.Top1: 6
      //DEBUG: s.Level2: 35
      //DEBUG: s.Top2: 52
      //DEBUG: e.Pattern1: 53
      //DEBUG: e.Vars1: 55
      //DEBUG: e.Pattern2: 57
      //DEBUG: e.Vars2: 59
      //DEBUG: e.Commands: 61

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole/4 s.Level1/5 s.Top1/6 (/9 e.Pattern1/53 )/10 (/13 e.Vars1/55 )/14 (/23 {REMOVED TILE} )/24 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </25 HalfReuse: & Decompile-Pattern-NoHole/26 AsIs: s.Level2/35 AsIs: s.Top2/52 AsIs: (/50 AsIs: e.Pattern2/57 AsIs: )/51 AsIs: (/46 AsIs: e.Vars2/59 AsIs: )/47 } Tile{ AsIs: e.Commands/61 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[25]);
      refalrts::reinit_name(context[26], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[46], context[47] );
      refalrts::link_brackets( context[50], context[51] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[25], context[47] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-NoHole/4 s.Level/5 s.Top/6 (/9 e.Pattern/27 )/10 (/13 e.Vars/29 )/14 (/23 s.Offset/25 # LABEL/26 e.BlockName/31 )/24 e.Commands/33 >/1
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[19];
    context[34] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[26] ) )
      continue;
    // closed e.Pattern as range 27
    // closed e.Vars as range 29
    // closed e.BlockName as range 31
    // closed e.Commands as range 33
    //DEBUG: s.Level: 5
    //DEBUG: s.Top: 6
    //DEBUG: s.Offset: 25
    //DEBUG: e.Pattern: 27
    //DEBUG: e.Vars: 29
    //DEBUG: e.BlockName: 31
    //DEBUG: e.Commands: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/23 s.Offset/25 # LABEL/26 e.BlockName/31 )/24 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern/27 AsIs: )/10 AsIs: (/13 AsIs: e.Vars/29 AsIs: )/14 } Tile{ AsIs: e.Commands/33 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[33], context[34] );
    refalrts::splice_to_freelist_open( vm, context[14], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole/4 s.Level/5 s.Top/6 (/9 )/10 (/13 )/14 >/1
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.Level: 5
    //DEBUG: s.Top: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole/4 s.Level/5 s.Top/6 (/9 )/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/13 HalfReuse: # EndOfFunction/14 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[14], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[13], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-NoHole/4 s.Level/5 s.Top/6 (/9 e.Pattern/7 )/10 (/13 e.Vars/11 )/14 e.Commands/2 >/1
  // closed e.Pattern as range 7
  // closed e.Vars as range 11
  // closed e.Commands as range 2
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Pattern: 7
  //DEBUG: e.Vars: 11
  //DEBUG: e.Commands: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/15 Tile{ HalfReuse: '='/1 } Tile{ HalfReuse: 'B'/0 HalfReuse: ' '/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Pattern/7 AsIs: )/10 AsIs: (/13 AsIs: e.Vars/11 AsIs: )/14 } )/16 Tile{ AsIs: e.Commands/2 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_char(context[0], 'B');
  refalrts::reinit_char(context[4], ' ');
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[0], context[14] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Decompilem_Patternm_NoHole("Decompile-Pattern-NoHole", COOKIE1_, COOKIE2_, func_Decompilem_Patternm_NoHole);


static refalrts::FnResult func_Decompilem_Result(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & Decompile-Result/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Result/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 (/13 t.new4/15 e.new5/11 )/14 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new3 as range 7
  // closed e.new6 as range 2
  context[16] = refalrts::tvar_left( context[15], context[11], context[12] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 11
  do {
    // </0 & Decompile-Result/4 s.new7/5 s.new8/6 (/9 e.new13/17 )/10 (/13 t.new14/15 e.new15/19 )/14 (/25 s.new9/27 s.new10/28 e.new11/23 )/26 e.new12/21 >/1
    context[17] = context[7];
    context[18] = context[8];
    context[19] = context[11];
    context[20] = context[12];
    context[21] = context[2];
    context[22] = context[3];
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    // closed e.new13 as range 17
    // closed e.new15 as range 19
    // closed e.new12 as range 21
    if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
      continue;
    if( ! refalrts::svar_left( context[28], context[23], context[24] ) )
      continue;
    // closed e.new11 as range 23
    do {
      // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/29 )/10 (/13 t.MB/15 e.Result/31 )/14 (/25 s.Offset/27 # NCS/28 e.Word/33 )/26 e.Commands/35 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[21];
      context[36] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_NCS], context[28] ) )
        continue;
      // closed e.Vars as range 29
      // closed e.Result as range 31
      // closed e.Word as range 33
      // closed e.Commands as range 35
      //DEBUG: t.MB: 15
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 27
      //DEBUG: e.Vars: 29
      //DEBUG: e.Result: 31
      //DEBUG: e.Word: 33
      //DEBUG: e.Commands: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/29 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/31 HalfReuse: (/14 HalfReuse: # W/25 } Tile{ AsIs: e.Word/33 } Tile{ HalfReuse: )/28 } Tile{ AsIs: )/26 AsIs: e.Commands/35 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[25], identifiers[ident_W]);
      refalrts::reinit_close_bracket(context[28]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[26] );
      refalrts::link_brackets( context[14], context[28] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result/4 s.new16/5 s.new17/6 (/9 e.new23/29 )/10 (/13 t.new24/15 e.new25/31 )/14 (/25 s.new19/27 s.new20/28 s.new21/37 e.new22/33 )/26 e.new18/35 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[21];
      context[36] = context[22];
      // closed e.new23 as range 29
      // closed e.new25 as range 31
      // closed e.new18 as range 35
      if( ! refalrts::svar_left( context[37], context[33], context[34] ) )
        continue;
      // closed e.new22 as range 33
      do {
        // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/38 )/10 (/13 t.MB/15 e.Result/40 )/14 (/25 s.Offset/27 # NNS/28 s.Number/37 )/26 e.Commands/42 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_NNS], context[28] ) )
          continue;
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.Vars as range 38
        // closed e.Result as range 40
        // closed e.Commands as range 42
        //DEBUG: t.MB: 15
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 27
        //DEBUG: s.Number: 37
        //DEBUG: e.Vars: 38
        //DEBUG: e.Result: 40
        //DEBUG: e.Commands: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/40 HalfReuse: (/14 HalfReuse: # N/25 } Tile{ AsIs: s.Number/37 } Tile{ HalfReuse: )/28 } Tile{ AsIs: )/26 AsIs: e.Commands/42 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[25], identifiers[ident_N]);
        refalrts::reinit_close_bracket(context[28]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::link_brackets( context[14], context[28] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_elem( res, context[37] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/38 )/10 (/13 t.MB/15 e.Result/40 )/14 (/25 s.Offset/27 # NS/28 s.Code/37 s.Char/46 )/26 e.Commands/44 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        context[44] = context[35];
        context[45] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_NS], context[28] ) )
          continue;
        // closed e.Vars as range 38
        // closed e.Result as range 40
        // closed e.Commands as range 44
        if( ! refalrts::svar_left( context[46], context[42], context[43] ) )
          continue;
        if( ! refalrts::empty_seq( context[42], context[43] ) )
          continue;
        //DEBUG: t.MB: 15
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 27
        //DEBUG: s.Code: 37
        //DEBUG: e.Vars: 38
        //DEBUG: e.Result: 40
        //DEBUG: e.Commands: 44
        //DEBUG: s.Char: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/27 {REMOVED TILE} s.Code/37 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/40 HalfReuse: (/14 HalfReuse: # C/25 } Tile{ AsIs: s.Char/46 } Tile{ HalfReuse: )/28 } Tile{ AsIs: )/26 AsIs: e.Commands/44 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[25], identifiers[ident_C]);
        refalrts::reinit_close_bracket(context[28]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::link_brackets( context[14], context[28] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_elem( res, context[46] );
        refalrts::splice_to_freelist_open( vm, context[25], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/38 )/10 (/13 t.MB/15 e.Result/40 )/14 (/25 s.Offset/27 # TEXT/28 s.Count/37 e.Chars/42 )/26 e.Commands/44 >/1
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      context[44] = context[35];
      context[45] = context[36];
      if( ! refalrts::ident_term( identifiers[ident_TEXT], context[28] ) )
        continue;
      // closed e.Vars as range 38
      // closed e.Result as range 40
      // closed e.Chars as range 42
      // closed e.Commands as range 44
      //DEBUG: t.MB: 15
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 27
      //DEBUG: s.Count: 37
      //DEBUG: e.Vars: 38
      //DEBUG: e.Result: 40
      //DEBUG: e.Chars: 42
      //DEBUG: e.Commands: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/27 {REMOVED TILE} s.Count/37 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/40 HalfReuse: (/14 HalfReuse: # C/25 } Tile{ AsIs: e.Chars/42 } Tile{ HalfReuse: )/28 } Tile{ AsIs: )/26 AsIs: e.Commands/44 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[25], identifiers[ident_C]);
      refalrts::reinit_close_bracket(context[28]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[26] );
      refalrts::link_brackets( context[14], context[28] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result/4 s.new16/5 s.new17/6 (/9 e.new21/29 )/10 (/13 t.new22/15 e.new23/31 )/14 (/25 s.new19/27 s.new20/28 )/26 e.new18/33 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      context[34] = context[22];
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.new21 as range 29
      // closed e.new23 as range 31
      // closed e.new18 as range 33
      do {
        // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/35 )/10 (/13 t.MB/15 e.Result/37 )/14 (/25 s.Offset/27 # BL/28 )/26 e.Commands/39 >/1
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_BL], context[28] ) )
          continue;
        // closed e.Vars as range 35
        // closed e.Result as range 37
        // closed e.Commands as range 39
        //DEBUG: t.MB: 15
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 27
        //DEBUG: e.Vars: 35
        //DEBUG: e.Result: 37
        //DEBUG: e.Commands: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} s.Offset/27 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/35 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: (/25 } Tile{ AsIs: t.MB/15 } Tile{ AsIs: e.Result/37 } Tile{ HalfReuse: )/28 AsIs: )/26 AsIs: e.Commands/39 AsIs: >/1 ]] }
        refalrts::reinit_close_bracket(context[28]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::link_brackets( context[25], context[28] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_elem( res, context[25] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/35 )/10 (/13 (/15 t.MB/43 e.Result/41 )/16 e.Nested/37 )/14 (/25 s.Offset/27 # BR/28 )/26 e.Commands/39 >/1
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = context[34];
        context[41] = 0;
        context[42] = 0;
        if( ! refalrts::brackets_term( context[41], context[42], context[15] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_BR], context[28] ) )
          continue;
        // closed e.Vars as range 35
        // closed e.Nested as range 37
        // closed e.Commands as range 39
        context[44] = refalrts::tvar_left( context[43], context[41], context[42] );
        if( ! context[44] )
          continue;
        // closed e.Result as range 41
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 27
        //DEBUG: e.Vars: 35
        //DEBUG: e.Nested: 37
        //DEBUG: e.Commands: 39
        //DEBUG: t.MB: 43
        //DEBUG: e.Result: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/15 {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} s.Offset/27 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/35 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: t.MB/43 AsIs: e.Result/41 HalfReuse: (/16 } Tile{ HalfReuse: '*'/25 } Tile{ AsIs: e.Nested/37 } Tile{ HalfReuse: )/28 AsIs: )/26 AsIs: e.Commands/39 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_char(context[25], '*');
        refalrts::reinit_close_bracket(context[28]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::link_brackets( context[16], context[28] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[43], context[16] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/35 )/10 (/13 t.MB/15 e.Result/37 )/14 (/25 s.Offset/27 # BLR/28 )/26 e.Commands/39 >/1
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_BLR], context[28] ) )
        continue;
      // closed e.Vars as range 35
      // closed e.Result as range 37
      // closed e.Commands as range 39
      //DEBUG: t.MB: 15
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 27
      //DEBUG: e.Vars: 35
      //DEBUG: e.Result: 37
      //DEBUG: e.Commands: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/27 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/35 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/37 HalfReuse: (/14 HalfReuse: '*'/25 } Tile{ HalfReuse: )/28 AsIs: )/26 AsIs: e.Commands/39 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_char(context[25], '*');
      refalrts::reinit_close_bracket(context[28]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[26] );
      refalrts::link_brackets( context[14], context[28] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result/4 s.new16/5 s.new17/6 (/9 e.new22/29 )/10 (/13 t.new23/15 e.new24/31 (/39 '*'/41 e.new25/37 )/40 )/14 (/25 s.new19/27 s.new20/28 e.new21/33 )/26 e.new18/35 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_right( context[37], context[38], context[31], context[32] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      context[41] = refalrts::char_left( '*', context[37], context[38] );
      if( ! context[41] )
        continue;
      // closed e.new22 as range 29
      // closed e.new24 as range 31
      // closed e.new25 as range 37
      // closed e.new21 as range 33
      // closed e.new18 as range 35
      do {
        // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/42 )/10 (/13 t.MB/15 e.Result/44 (/39 '*'/41 e.Inner/46 )/40 )/14 (/25 s.Offset/27 # ACT1/28 e.Name/48 )/26 e.Commands/50 >/1
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        context[45] = context[32];
        context[46] = context[37];
        context[47] = context[38];
        context[48] = context[33];
        context[49] = context[34];
        context[50] = context[35];
        context[51] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_ACT1], context[28] ) )
          continue;
        // closed e.Vars as range 42
        // closed e.Result as range 44
        // closed e.Inner as range 46
        // closed e.Name as range 48
        // closed e.Commands as range 50
        //DEBUG: t.MB: 15
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 27
        //DEBUG: e.Vars: 42
        //DEBUG: e.Result: 44
        //DEBUG: e.Inner: 46
        //DEBUG: e.Name: 48
        //DEBUG: e.Commands: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/27 # ACT1/28 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/42 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/44 AsIs: (/39 Reuse: '!'/41 } Tile{ AsIs: (/25 } Tile{ AsIs: e.Name/48 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Inner/46 } Tile{ AsIs: )/40 } Tile{ AsIs: )/26 AsIs: e.Commands/50 AsIs: >/1 ]] }
        refalrts::update_char(context[41], '!');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[25], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        res = refalrts::splice_elem( res, context[25] );
        refalrts::splice_to_freelist_open( vm, context[41], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/42 )/10 (/13 t.MB/15 e.Result/44 (/39 '*'/41 e.Inner/46 )/40 )/14 (/25 s.Offset/27 # ACT_EXTRN/28 e.Name/48 )/26 e.Commands/50 >/1
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[32];
      context[46] = context[37];
      context[47] = context[38];
      context[48] = context[33];
      context[49] = context[34];
      context[50] = context[35];
      context[51] = context[36];
      if( ! refalrts::ident_term( identifiers[ident_ACTu_EXTRN], context[28] ) )
        continue;
      // closed e.Vars as range 42
      // closed e.Result as range 44
      // closed e.Inner as range 46
      // closed e.Name as range 48
      // closed e.Commands as range 50
      //DEBUG: t.MB: 15
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset: 27
      //DEBUG: e.Vars: 42
      //DEBUG: e.Result: 44
      //DEBUG: e.Inner: 46
      //DEBUG: e.Name: 48
      //DEBUG: e.Commands: 50

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/27 # ACT_EXTRN/28 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/42 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/44 AsIs: (/39 Reuse: '!'/41 } Tile{ AsIs: (/25 } Tile{ AsIs: e.Name/48 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Inner/46 } Tile{ AsIs: )/40 } Tile{ AsIs: )/26 AsIs: e.Commands/50 AsIs: >/1 ]] }
      refalrts::update_char(context[41], '!');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[26] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[25], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::splice_to_freelist_open( vm, context[41], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result/4 s.new16/5 s.new17/6 (/9 e.new22/29 )/10 (/13 t.new23/15 e.new24/31 )/14 (/25 s.new19/27 s.new20/28 s.new21/37 )/26 e.new18/35 >/1
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[21];
      context[36] = context[22];
      // closed e.new22 as range 29
      // closed e.new24 as range 31
      // closed e.new18 as range 35
      if( ! refalrts::svar_left( context[37], context[33], context[34] ) )
        continue;
      if( ! refalrts::empty_seq( context[33], context[34] ) )
        continue;
      do {
        // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/38 )/10 (/13 t.MB/15 e.Result/40 )/14 (/25 s.Offset/27 # TPLS/28 s.Copy/37 )/26 e.Commands/42 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_TPLS], context[28] ) )
          continue;
        // closed e.Vars as range 38
        // closed e.Result as range 40
        // closed e.Commands as range 42
        //DEBUG: t.MB: 15
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 27
        //DEBUG: s.Copy: 37
        //DEBUG: e.Vars: 38
        //DEBUG: e.Result: 40
        //DEBUG: e.Commands: 42
        //5: s.Level
        //6: s.Top
        //15: t.MB
        //27: s.Offset
        //37: s.Copy
        //38: e.Vars
        //40: e.Result
        //42: e.Commands
        //47: e.Vars

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_Decompilem_Result_S10C1]);
        refalrts::copy_evar(vm, context[47], context[48], context[38], context[39]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[44] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </44 & Decompile-Result$10?1/48 e.Vars-B/49 (/55 # s/57 s.Id/60 '='/59 s.Copy/58 )/56 e.Vars-E/51 >/45
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
          context[49] = 0;
          context[50] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[51] = context[46];
            context[52] = context[47];
            context[53] = 0;
            context[54] = 0;
            context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
            if( ! context[55] )
              continue;
            refalrts::bracket_pointers(context[55], context[56]);
            context[57] = refalrts::ident_left( identifiers[ident_s], context[53], context[54] );
            if( ! context[57] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[58], context[37], context[53], context[54] ) )
              continue;
            context[59] = refalrts::char_right( '=', context[53], context[54] );
            if( ! context[59] )
              continue;
            // closed e.Vars-E as range 51
            if( ! refalrts::svar_left( context[60], context[53], context[54] ) )
              continue;
            if( ! refalrts::empty_seq( context[53], context[54] ) )
              continue;
            //DEBUG: t.MB: 15
            //DEBUG: s.Level: 5
            //DEBUG: s.Top: 6
            //DEBUG: s.Offset: 27
            //DEBUG: s.Copy: 37
            //DEBUG: e.Vars: 38
            //DEBUG: e.Result: 40
            //DEBUG: e.Commands: 42
            //DEBUG: e.Vars-B: 49
            //DEBUG: e.Vars-E: 51
            //DEBUG: s.Id: 60

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/27 # TPLS/28 s.Copy/37 {REMOVED TILE} & Decompile-Result$10?1/48 e.Vars-B/49 (/55 # s/57 {REMOVED TILE} e.Vars-E/51 >/45 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/40 HalfReuse: (/14 HalfReuse: # s/25 } Tile{ AsIs: s.Id/60 AsIs: '='/59 AsIs: s.Copy/58 AsIs: )/56 } Tile{ AsIs: )/26 AsIs: e.Commands/42 HalfReuse: >/44 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[25], identifiers[ident_s]);
            refalrts::reinit_close_call(context[44]);
            refalrts::push_stack( vm, context[44] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[13], context[26] );
            refalrts::link_brackets( context[14], context[56] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[26], context[44] );
            res = refalrts::splice_evar( res, context[60], context[56] );
            refalrts::splice_to_freelist_open( vm, context[25], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[49], context[50], context[46], context[47] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[44], context[45]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/38 )/10 (/13 t.MB/15 e.Result/40 )/14 (/25 s.Offset/27 # TPLE/28 s.CopyR/37 )/26 e.Commands/42 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_TPLE], context[28] ) )
          continue;
        // closed e.Vars as range 38
        // closed e.Result as range 40
        // closed e.Commands as range 42
        //DEBUG: t.MB: 15
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 27
        //DEBUG: s.CopyR: 37
        //DEBUG: e.Vars: 38
        //DEBUG: e.Result: 40
        //DEBUG: e.Commands: 42
        //5: s.Level
        //6: s.Top
        //15: t.MB
        //27: s.Offset
        //37: s.CopyR
        //38: e.Vars
        //40: e.Result
        //42: e.Commands
        //47: e.Vars

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_Decompilem_Result_S11C1]);
        refalrts::copy_evar(vm, context[47], context[48], context[38], context[39]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[44] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </44 & Decompile-Result$11?1/48 e.Vars-B/49 (/55 s.Type/58 s.IdL/59 s.IdR/60 '='/61 s.CopyL/62 s.CopyR/57 )/56 e.Vars-E/51 >/45
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
          context[49] = 0;
          context[50] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[51] = context[46];
            context[52] = context[47];
            context[53] = 0;
            context[54] = 0;
            context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
            if( ! context[55] )
              continue;
            refalrts::bracket_pointers(context[55], context[56]);
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[37], context[53], context[54] ) )
              continue;
            // closed e.Vars-E as range 51
            if( ! refalrts::svar_left( context[58], context[53], context[54] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[53], context[54] ) )
              continue;
            if( ! refalrts::svar_left( context[60], context[53], context[54] ) )
              continue;
            context[61] = refalrts::char_left( '=', context[53], context[54] );
            if( ! context[61] )
              continue;
            if( ! refalrts::svar_left( context[62], context[53], context[54] ) )
              continue;
            if( ! refalrts::empty_seq( context[53], context[54] ) )
              continue;
            //DEBUG: t.MB: 15
            //DEBUG: s.Level: 5
            //DEBUG: s.Top: 6
            //DEBUG: s.Offset: 27
            //DEBUG: s.CopyR: 37
            //DEBUG: e.Vars: 38
            //DEBUG: e.Result: 40
            //DEBUG: e.Commands: 42
            //DEBUG: e.Vars-B: 49
            //DEBUG: e.Vars-E: 51
            //DEBUG: s.Type: 58
            //DEBUG: s.IdL: 59
            //DEBUG: s.IdR: 60
            //DEBUG: s.CopyL: 62
            //5: s.Level
            //6: s.Top
            //15: t.MB
            //27: s.Offset
            //37: s.CopyR
            //38: e.Vars
            //40: e.Result
            //42: e.Commands
            //49: e.Vars-B
            //51: e.Vars-E
            //57: s.CopyR
            //58: s.Type
            //59: s.IdL
            //60: s.IdR
            //62: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[63]);
            refalrts::alloc_name(vm, context[65], functions[efunc_gen_Decompilem_Result_S11C2]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[67], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[64]);
            refalrts::push_stack( vm, context[64] );
            refalrts::push_stack( vm, context[63] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[67] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[63] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </63 & Decompile-Result$11?2/67 e.B/68 s.Type/72 e.E/70 >/64
              context[65] = 0;
              context[66] = 0;
              context[67] = refalrts::call_left( context[65], context[66], context[63], context[64] );
              context[68] = 0;
              context[69] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[70] = context[65];
                context[71] = context[66];
                if( ! refalrts::repeated_stvar_left( vm, context[72], context[58], context[70], context[71] ) )
                  continue;
                // closed e.E as range 70
                //DEBUG: t.MB: 15
                //DEBUG: s.Level: 5
                //DEBUG: s.Top: 6
                //DEBUG: s.Offset: 27
                //DEBUG: s.CopyR: 37
                //DEBUG: e.Vars: 38
                //DEBUG: e.Result: 40
                //DEBUG: e.Commands: 42
                //DEBUG: e.Vars-B: 49
                //DEBUG: e.Vars-E: 51
                //DEBUG: s.Type: 58
                //DEBUG: s.IdL: 59
                //DEBUG: s.IdR: 60
                //DEBUG: s.CopyL: 62
                //DEBUG: e.B: 68
                //DEBUG: e.E: 70

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/27 # TPLE/28 s.CopyR/37 {REMOVED TILE} & Decompile-Result$11?1/48 e.Vars-B/49 (/55 s.Type/58 {REMOVED TILE} e.Vars-E/51 >/45 </63 & Decompile-Result$11?2/67 e.B/68 s.Type/72 e.E/70 >/64 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/40 HalfReuse: (/14 HalfReuse: s.Type72 /25 } Tile{ AsIs: s.IdL/59 AsIs: s.IdR/60 AsIs: '='/61 AsIs: s.CopyL/62 AsIs: s.CopyR/57 AsIs: )/56 } Tile{ AsIs: )/26 AsIs: e.Commands/42 HalfReuse: >/44 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[14]);
                refalrts::reinit_svar( context[25], context[72] );
                refalrts::reinit_close_call(context[44]);
                refalrts::push_stack( vm, context[44] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[13], context[26] );
                refalrts::link_brackets( context[14], context[56] );
                refalrts::link_brackets( context[9], context[10] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[26], context[44] );
                res = refalrts::splice_evar( res, context[59], context[56] );
                refalrts::splice_to_freelist_open( vm, context[25], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[68], context[69], context[65], context[66] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[63], context[64]);
            continue;
          } while ( refalrts::open_evar_advance( context[49], context[50], context[46], context[47] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[44], context[45]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/38 )/10 (/13 t.MB/15 e.Result/40 )/14 (/25 s.Offset/27 # MULS/28 s.Copy/37 )/26 e.Commands/42 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_MULS], context[28] ) )
          continue;
        // closed e.Vars as range 38
        // closed e.Result as range 40
        // closed e.Commands as range 42
        //DEBUG: t.MB: 15
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 27
        //DEBUG: s.Copy: 37
        //DEBUG: e.Vars: 38
        //DEBUG: e.Result: 40
        //DEBUG: e.Commands: 42
        //5: s.Level
        //6: s.Top
        //15: t.MB
        //27: s.Offset
        //37: s.Copy
        //38: e.Vars
        //40: e.Result
        //42: e.Commands
        //47: e.Vars

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_Decompilem_Result_S12C1]);
        refalrts::copy_evar(vm, context[47], context[48], context[38], context[39]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[44] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </44 & Decompile-Result$12?1/48 e.Vars-B/49 (/55 # s/57 s.Id/60 '='/59 s.Copy/58 )/56 e.Vars-E/51 >/45
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
          context[49] = 0;
          context[50] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[51] = context[46];
            context[52] = context[47];
            context[53] = 0;
            context[54] = 0;
            context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
            if( ! context[55] )
              continue;
            refalrts::bracket_pointers(context[55], context[56]);
            context[57] = refalrts::ident_left( identifiers[ident_s], context[53], context[54] );
            if( ! context[57] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[58], context[37], context[53], context[54] ) )
              continue;
            context[59] = refalrts::char_right( '=', context[53], context[54] );
            if( ! context[59] )
              continue;
            // closed e.Vars-E as range 51
            if( ! refalrts::svar_left( context[60], context[53], context[54] ) )
              continue;
            if( ! refalrts::empty_seq( context[53], context[54] ) )
              continue;
            //DEBUG: t.MB: 15
            //DEBUG: s.Level: 5
            //DEBUG: s.Top: 6
            //DEBUG: s.Offset: 27
            //DEBUG: s.Copy: 37
            //DEBUG: e.Vars: 38
            //DEBUG: e.Result: 40
            //DEBUG: e.Commands: 42
            //DEBUG: e.Vars-B: 49
            //DEBUG: e.Vars-E: 51
            //DEBUG: s.Id: 60

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/27 # MULS/28 s.Copy/37 {REMOVED TILE} & Decompile-Result$12?1/48 e.Vars-B/49 (/55 # s/57 {REMOVED TILE} e.Vars-E/51 >/45 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/40 HalfReuse: (/14 HalfReuse: # s/25 } Tile{ AsIs: s.Id/60 AsIs: '='/59 AsIs: s.Copy/58 AsIs: )/56 } Tile{ AsIs: )/26 AsIs: e.Commands/42 HalfReuse: >/44 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[25], identifiers[ident_s]);
            refalrts::reinit_close_call(context[44]);
            refalrts::push_stack( vm, context[44] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[13], context[26] );
            refalrts::link_brackets( context[14], context[56] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[26], context[44] );
            res = refalrts::splice_evar( res, context[60], context[56] );
            refalrts::splice_to_freelist_open( vm, context[25], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[49], context[50], context[46], context[47] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[44], context[45]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/38 )/10 (/13 t.MB/15 e.Result/40 )/14 (/25 s.Offset/27 # MULE/28 s.CopyR/37 )/26 e.Commands/42 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_MULE], context[28] ) )
          continue;
        // closed e.Vars as range 38
        // closed e.Result as range 40
        // closed e.Commands as range 42
        //DEBUG: t.MB: 15
        //DEBUG: s.Level: 5
        //DEBUG: s.Top: 6
        //DEBUG: s.Offset: 27
        //DEBUG: s.CopyR: 37
        //DEBUG: e.Vars: 38
        //DEBUG: e.Result: 40
        //DEBUG: e.Commands: 42
        //5: s.Level
        //6: s.Top
        //15: t.MB
        //27: s.Offset
        //37: s.CopyR
        //38: e.Vars
        //40: e.Result
        //42: e.Commands
        //47: e.Vars

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_Decompilem_Result_S13C1]);
        refalrts::copy_evar(vm, context[47], context[48], context[38], context[39]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[44] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </44 & Decompile-Result$13?1/48 e.Vars-B/49 (/55 s.Type/58 s.IdL/59 s.IdR/60 '='/61 s.CopyL/62 s.CopyR/57 )/56 e.Vars-E/51 >/45
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
          context[49] = 0;
          context[50] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[51] = context[46];
            context[52] = context[47];
            context[53] = 0;
            context[54] = 0;
            context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
            if( ! context[55] )
              continue;
            refalrts::bracket_pointers(context[55], context[56]);
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[37], context[53], context[54] ) )
              continue;
            // closed e.Vars-E as range 51
            if( ! refalrts::svar_left( context[58], context[53], context[54] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[53], context[54] ) )
              continue;
            if( ! refalrts::svar_left( context[60], context[53], context[54] ) )
              continue;
            context[61] = refalrts::char_left( '=', context[53], context[54] );
            if( ! context[61] )
              continue;
            if( ! refalrts::svar_left( context[62], context[53], context[54] ) )
              continue;
            if( ! refalrts::empty_seq( context[53], context[54] ) )
              continue;
            //DEBUG: t.MB: 15
            //DEBUG: s.Level: 5
            //DEBUG: s.Top: 6
            //DEBUG: s.Offset: 27
            //DEBUG: s.CopyR: 37
            //DEBUG: e.Vars: 38
            //DEBUG: e.Result: 40
            //DEBUG: e.Commands: 42
            //DEBUG: e.Vars-B: 49
            //DEBUG: e.Vars-E: 51
            //DEBUG: s.Type: 58
            //DEBUG: s.IdL: 59
            //DEBUG: s.IdR: 60
            //DEBUG: s.CopyL: 62
            //5: s.Level
            //6: s.Top
            //15: t.MB
            //27: s.Offset
            //37: s.CopyR
            //38: e.Vars
            //40: e.Result
            //42: e.Commands
            //49: e.Vars-B
            //51: e.Vars-E
            //57: s.CopyR
            //58: s.Type
            //59: s.IdL
            //60: s.IdR
            //62: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[63]);
            refalrts::alloc_name(vm, context[65], functions[efunc_gen_Decompilem_Result_S13C2]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[67], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[64]);
            refalrts::push_stack( vm, context[64] );
            refalrts::push_stack( vm, context[63] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[67] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[63] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </63 & Decompile-Result$13?2/67 e.B/68 s.Type/72 e.E/70 >/64
              context[65] = 0;
              context[66] = 0;
              context[67] = refalrts::call_left( context[65], context[66], context[63], context[64] );
              context[68] = 0;
              context[69] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[70] = context[65];
                context[71] = context[66];
                if( ! refalrts::repeated_stvar_left( vm, context[72], context[58], context[70], context[71] ) )
                  continue;
                // closed e.E as range 70
                //DEBUG: t.MB: 15
                //DEBUG: s.Level: 5
                //DEBUG: s.Top: 6
                //DEBUG: s.Offset: 27
                //DEBUG: s.CopyR: 37
                //DEBUG: e.Vars: 38
                //DEBUG: e.Result: 40
                //DEBUG: e.Commands: 42
                //DEBUG: e.Vars-B: 49
                //DEBUG: e.Vars-E: 51
                //DEBUG: s.Type: 58
                //DEBUG: s.IdL: 59
                //DEBUG: s.IdR: 60
                //DEBUG: s.CopyL: 62
                //DEBUG: e.B: 68
                //DEBUG: e.E: 70

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/27 # MULE/28 s.CopyR/37 {REMOVED TILE} & Decompile-Result$13?1/48 e.Vars-B/49 (/55 s.Type/58 {REMOVED TILE} e.Vars-E/51 >/45 </63 & Decompile-Result$13?2/67 e.B/68 s.Type/72 e.E/70 >/64 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/38 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/40 HalfReuse: (/14 HalfReuse: s.Type72 /25 } Tile{ AsIs: s.IdL/59 AsIs: s.IdR/60 AsIs: '='/61 AsIs: s.CopyL/62 AsIs: s.CopyR/57 AsIs: )/56 } Tile{ AsIs: )/26 AsIs: e.Commands/42 HalfReuse: >/44 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[14]);
                refalrts::reinit_svar( context[25], context[72] );
                refalrts::reinit_close_call(context[44]);
                refalrts::push_stack( vm, context[44] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[13], context[26] );
                refalrts::link_brackets( context[14], context[56] );
                refalrts::link_brackets( context[9], context[10] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[26], context[44] );
                res = refalrts::splice_evar( res, context[59], context[56] );
                refalrts::splice_to_freelist_open( vm, context[25], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[68], context[69], context[65], context[66] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[63], context[64]);
            continue;
          } while ( refalrts::open_evar_advance( context[49], context[50], context[46], context[47] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[44], context[45]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/38 )/10 (/13 '$'/15 e.Result/40 )/14 (/25 s.Offset1/27 # ECOND/28 s.Offset3/37 )/26 (/46 s.Offset2/54 # LABEL/55 e.Name/44 )/47 (/50 s.Offset3/53 # POPVF/52 )/51 e.Commands/42 >/1
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[35];
      context[43] = context[36];
      if( ! refalrts::char_term( '$', context[15] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_ECOND], context[28] ) )
        continue;
      context[44] = 0;
      context[45] = 0;
      context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
      if( ! context[46] )
        continue;
      refalrts::bracket_pointers(context[46], context[47]);
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_left( context[48], context[49], context[42], context[43] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      context[52] = refalrts::ident_right( identifiers[ident_POPVF], context[48], context[49] );
      if( ! context[52] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[53], context[37], context[48], context[49] ) )
        continue;
      if( ! refalrts::empty_seq( context[48], context[49] ) )
        continue;
      // closed e.Vars as range 38
      // closed e.Result as range 40
      // closed e.Commands as range 42
      if( ! refalrts::svar_left( context[54], context[44], context[45] ) )
        continue;
      context[55] = refalrts::ident_left( identifiers[ident_LABEL], context[44], context[45] );
      if( ! context[55] )
        continue;
      // closed e.Name as range 44
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset1: 27
      //DEBUG: s.Offset3: 37
      //DEBUG: e.Vars: 38
      //DEBUG: e.Result: 40
      //DEBUG: e.Commands: 42
      //DEBUG: s.Offset2: 54
      //DEBUG: e.Name: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1/27 {REMOVED TILE} s.Offset3/37 {REMOVED TILE} s.Offset2/54 {REMOVED TILE} s.Offset3/53 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 HalfReuse: # Result/15 AsIs: e.Result/40 AsIs: )/14 AsIs: (/25 } Tile{ Reuse: # EndCondition/55 AsIs: e.Name/44 AsIs: )/47 HalfReuse: </50 } Tile{ Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level/5 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Add/28 } Tile{ AsIs: s.Top/6 HalfReuse: 3/9 } >/56 (/57 </58 Tile{ HalfReuse: & Add/52 } s.Top/6/59 1/60 >/61 Tile{ AsIs: )/26 AsIs: (/46 } </62 & Add/63 s.Top/6/64 2/65 >/66 Tile{ AsIs: )/10 } (/67 Tile{ AsIs: e.Vars/38 } Tile{ AsIs: )/51 AsIs: e.Commands/42 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::copy_stvar(vm, context[59], context[6]);
      refalrts::alloc_number(vm, context[60], 1UL);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
      refalrts::copy_stvar(vm, context[64], context[6]);
      refalrts::alloc_number(vm, context[65], 2UL);
      refalrts::alloc_close_call(vm, context[66]);
      refalrts::alloc_open_bracket(vm, context[67]);
      refalrts::reinit_ident(context[15], identifiers[ident_Result]);
      refalrts::update_ident(context[55], identifiers[ident_EndCondition]);
      refalrts::reinit_open_call(context[50]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_name(context[28], functions[efunc_Add]);
      refalrts::reinit_number(context[9], 3UL);
      refalrts::reinit_name(context[52], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[50] );
      refalrts::link_brackets( context[67], context[51] );
      refalrts::link_brackets( context[46], context[10] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[62] );
      refalrts::link_brackets( context[57], context[26] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[47] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[51];
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[62], context[66] );
      res = refalrts::splice_evar( res, context[26], context[46] );
      res = refalrts::splice_evar( res, context[59], context[61] );
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_evar( res, context[56], context[58] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[4], context[5] );
      res = refalrts::splice_evar( res, context[55], context[50] );
      res = refalrts::splice_evar( res, context[13], context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result/4 s.new16/5 s.new17/6 (/9 e.new20/29 )/10 (/13 '$'/15 e.new21/31 )/14 (/25 s.new19/27 # OUTEST/28 )/26 e.new18/33 >/1
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[21];
    context[34] = context[22];
    if( ! refalrts::char_term( '$', context[15] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_OUTEST], context[28] ) )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.new20 as range 29
    // closed e.new21 as range 31
    // closed e.new18 as range 33
    do {
      // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/35 )/10 (/13 '$'/15 e.Result/37 )/14 (/25 s.Offset1/27 # OUTEST/28 )/26 (/43 s.Offset2/46 # OUTEST/45 )/44 e.Commands/39 >/1
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = context[34];
      context[41] = 0;
      context[42] = 0;
      context[43] = refalrts::brackets_left( context[41], context[42], context[39], context[40] );
      if( ! context[43] )
        continue;
      refalrts::bracket_pointers(context[43], context[44]);
      context[45] = refalrts::ident_right( identifiers[ident_OUTEST], context[41], context[42] );
      if( ! context[45] )
        continue;
      // closed e.Vars as range 35
      // closed e.Result as range 37
      // closed e.Commands as range 39
      if( ! refalrts::svar_left( context[46], context[41], context[42] ) )
        continue;
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      //DEBUG: s.Level: 5
      //DEBUG: s.Top: 6
      //DEBUG: s.Offset1: 27
      //DEBUG: e.Vars: 35
      //DEBUG: e.Result: 37
      //DEBUG: e.Commands: 39
      //DEBUG: s.Offset2: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Top/6 {REMOVED TILE} e.Vars/35 {REMOVED TILE} {REMOVED TILE} s.Offset1/27 {REMOVED TILE} s.Offset2/46 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 HalfReuse: # Result/15 AsIs: e.Result/37 AsIs: )/14 AsIs: (/25 } Tile{ Reuse: # NextSentence/28 AsIs: )/26 AsIs: (/43 } # NextSentence/47 Tile{ AsIs: )/10 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@1/4 AsIs: s.Level/5 } Tile{ AsIs: (/9 } )/48 Tile{ HalfReuse: (/45 AsIs: )/44 AsIs: e.Commands/39 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[47], identifiers[ident_NextSentence]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::reinit_ident(context[15], identifiers[ident_Result]);
      refalrts::update_ident(context[28], identifiers[ident_NextSentence]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z1]);
      refalrts::reinit_open_bracket(context[45]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[45], context[44] );
      refalrts::link_brackets( context[9], context[48] );
      refalrts::link_brackets( context[43], context[10] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[45];
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[28], context[43] );
      res = refalrts::splice_evar( res, context[13], context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/35 )/10 (/13 '$'/15 e.Result/37 )/14 (/25 s.Offset/27 # OUTEST/28 )/26 e.Commands/39 >/1
    context[35] = context[29];
    context[36] = context[30];
    context[37] = context[31];
    context[38] = context[32];
    context[39] = context[33];
    context[40] = context[34];
    // closed e.Vars as range 35
    // closed e.Result as range 37
    // closed e.Commands as range 39
    //DEBUG: s.Level: 5
    //DEBUG: s.Top: 6
    //DEBUG: s.Offset: 27
    //DEBUG: e.Vars: 35
    //DEBUG: e.Result: 37
    //DEBUG: e.Commands: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Top/6 {REMOVED TILE} e.Vars/35 {REMOVED TILE} {REMOVED TILE} s.Offset/27 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/13 HalfReuse: # Result/15 AsIs: e.Result/37 AsIs: )/14 AsIs: (/25 } # NextSentence/41 Tile{ AsIs: )/10 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@1/4 AsIs: s.Level/5 } Tile{ AsIs: (/9 } )/42 Tile{ HalfReuse: (/28 AsIs: )/26 AsIs: e.Commands/39 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[41], identifiers[ident_NextSentence]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::reinit_ident(context[15], identifiers[ident_Result]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z1]);
    refalrts::reinit_open_bracket(context[28]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[28], context[26] );
    refalrts::link_brackets( context[9], context[42] );
    refalrts::link_brackets( context[25], context[10] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[13], context[25] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Result/4 s.Level/5 s.Top/6 (/9 e.Vars/7 )/10 (/13 t.MB/15 e.Result/11 )/14 e.Commands/2 >/1
  // closed e.Vars as range 7
  // closed e.Result as range 11
  // closed e.Commands as range 2
  //DEBUG: t.MB: 15
  //DEBUG: s.Level: 5
  //DEBUG: s.Top: 6
  //DEBUG: e.Vars: 7
  //DEBUG: e.Result: 11
  //DEBUG: e.Commands: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/17 Tile{ HalfReuse: '='/1 } Tile{ HalfReuse: 'C'/0 HalfReuse: ' '/4 AsIs: s.Level/5 AsIs: s.Top/6 AsIs: (/9 AsIs: e.Vars/7 AsIs: )/10 AsIs: (/13 AsIs: t.MB/15 AsIs: e.Result/11 AsIs: )/14 } )/18 Tile{ AsIs: e.Commands/2 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::reinit_char(context[1], '=');
  refalrts::reinit_char(context[0], 'C');
  refalrts::reinit_char(context[4], ' ');
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[0], context[14] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Decompilem_Result("Decompile-Result", COOKIE1_, COOKIE2_, func_Decompilem_Result);


static refalrts::FnResult func_CollectSegments(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & CollectSegments/4 e.Segments/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Segments as range 2
  //DEBUG: e.Segments: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoCollectSegments/6 0/7 (/8 ' '/9 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: e.Segments/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_DoCollectSegments]);
  refalrts::alloc_number(vm, context[7], 0UL);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_char(vm, context[9], ' ');
  refalrts::reinit_char(context[0], ' ');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[8], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CollectSegments("CollectSegments", COOKIE1_, COOKIE2_, func_CollectSegments);


static refalrts::FnResult func_DoCollectSegments(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 101 elems
  refalrts::Iter context[101];
  refalrts::zeros( context, 101 );
  // </0 & DoCollectSegments/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCollectSegments/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & DoCollectSegments/4 s.new4/5 (/8 e.new8/10 )/9 (/16 s.new5/18 e.new6/14 )/17 e.new7/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.new8 as range 10
    // closed e.new7 as range 12
    if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
      continue;
    // closed e.new6 as range 14
    do {
      // </0 & DoCollectSegments/4 s.new9/5 (/8 e.new13/19 )/9 (/16 # Pattern/18 s.new11/25 e.new12/21 )/17 e.new10/23 >/1
      context[19] = context[10];
      context[20] = context[11];
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[12];
      context[24] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_Pattern], context[18] ) )
        continue;
      // closed e.new13 as range 19
      // closed e.new10 as range 23
      if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
        continue;
      // closed e.new12 as range 21
      do {
        // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/26 )/9 (/16 # Pattern/18 s.Level/25 )/17 e.Segments/28 >/1
        context[26] = context[19];
        context[27] = context[20];
        context[28] = context[23];
        context[29] = context[24];
        if( ! refalrts::repeated_stvar_term( vm, context[25], context[5] ) )
          continue;
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 26
        // closed e.Segments as range 28
        //DEBUG: s.Level: 5
        //DEBUG: e.Indent: 26
        //DEBUG: e.Segments: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/16 } e.Indent/26/30 Tile{ HalfReuse: '/'/18 }"*empty*/"/32 Tile{ AsIs: )/17 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/26 AsIs: )/9 } Tile{ AsIs: e.Segments/28 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[30], context[31], context[26], context[27]);
        refalrts::alloc_chars(vm, context[32], context[33], "*empty*/", 8);
        refalrts::reinit_char(context[18], '/');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_elem( res, context[16] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/26 )/9 (/16 # Pattern/18 s.Level/25 ';'/32 )/17 e.Segments/30 >/1
        context[26] = context[19];
        context[27] = context[20];
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        if( ! refalrts::repeated_stvar_term( vm, context[25], context[5] ) )
          continue;
        context[32] = refalrts::char_left( ';', context[28], context[29] );
        if( ! context[32] )
          continue;
        if( ! refalrts::empty_seq( context[28], context[29] ) )
          continue;
        // closed e.Indent as range 26
        // closed e.Segments as range 30
        //DEBUG: s.Level: 5
        //DEBUG: e.Indent: 26
        //DEBUG: e.Segments: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/16 } e.Indent/26/33 '/'/35 Tile{ HalfReuse: '*'/18 }"empty*/"/36 Tile{ AsIs: ';'/32 AsIs: )/17 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/26 AsIs: )/9 } Tile{ AsIs: e.Segments/30 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[33], context[34], context[26], context[27]);
        refalrts::alloc_char(vm, context[35], '/');
        refalrts::alloc_chars(vm, context[36], context[37], "empty*/", 7);
        refalrts::reinit_char(context[18], '*');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[32], context[17] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_elem( res, context[16] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/26 )/9 (/16 # Pattern/18 s.Level/25 e.Pattern/28 )/17 e.Segments/30 >/1
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[23];
      context[31] = context[24];
      if( ! refalrts::repeated_stvar_term( vm, context[25], context[5] ) )
        continue;
      // closed e.Indent as range 26
      // closed e.Pattern as range 28
      // closed e.Segments as range 30
      //DEBUG: s.Level: 5
      //DEBUG: e.Indent: 26
      //DEBUG: e.Pattern: 28
      //DEBUG: e.Segments: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </32 & DoFormatExpr/33 Tile{ AsIs: (/16 HalfReuse: 60/18 } Tile{ AsIs: )/17 } (/34 e.Indent/26/35 )/37 (/38 e.Indent/26/39 )/41 (/42 )/43 Tile{ AsIs: e.Pattern/28 } >/44 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/26 AsIs: )/9 } Tile{ AsIs: e.Segments/30 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_DoFormatExpr]);
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::copy_evar(vm, context[35], context[36], context[26], context[27]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::copy_evar(vm, context[39], context[40], context[26], context[27]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::reinit_number(context[18], 60UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[38], context[41] );
      refalrts::link_brackets( context[34], context[37] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[34], context[43] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[16], context[18] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoCollectSegments/4 s.new9/5 (/8 e.new15/19 )/9 (/16 s.new13/18 e.new14/21 )/17 (/27 s.new10/29 e.new11/25 )/28 e.new12/23 >/1
      context[19] = context[10];
      context[20] = context[11];
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[12];
      context[24] = context[13];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      // closed e.new15 as range 19
      // closed e.new14 as range 21
      // closed e.new12 as range 23
      if( ! refalrts::svar_left( context[29], context[25], context[26] ) )
        continue;
      // closed e.new11 as range 25
      do {
        // </0 & DoCollectSegments/4 s.new16/5 (/8 e.new21/30 )/9 (/16 s.new20/18 )/17 (/27 s.new18/29 e.new19/32 )/28 e.new17/34 >/1
        context[30] = context[19];
        context[31] = context[20];
        context[32] = context[25];
        context[33] = context[26];
        context[34] = context[23];
        context[35] = context[24];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.new21 as range 30
        // closed e.new19 as range 32
        // closed e.new17 as range 34
        do {
          // </0 & DoCollectSegments/4 s.new22/5 (/8 e.new28/36 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 e.new27/38 )/28 (/44 # EndCondition/46 e.new23/42 )/45 (/49 s.new24/51 e.new25/47 )/50 e.new26/40 >/1
          context[36] = context[30];
          context[37] = context[31];
          context[38] = context[32];
          context[39] = context[33];
          context[40] = context[34];
          context[41] = context[35];
          if( ! refalrts::ident_term( identifiers[ident_StartCondition], context[18] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_Result], context[29] ) )
            continue;
          context[42] = 0;
          context[43] = 0;
          context[44] = refalrts::brackets_left( context[42], context[43], context[40], context[41] );
          if( ! context[44] )
            continue;
          refalrts::bracket_pointers(context[44], context[45]);
          context[46] = refalrts::ident_left( identifiers[ident_EndCondition], context[42], context[43] );
          if( ! context[46] )
            continue;
          context[47] = 0;
          context[48] = 0;
          context[49] = refalrts::brackets_left( context[47], context[48], context[40], context[41] );
          if( ! context[49] )
            continue;
          refalrts::bracket_pointers(context[49], context[50]);
          // closed e.new28 as range 36
          // closed e.new27 as range 38
          // closed e.new23 as range 42
          // closed e.new26 as range 40
          if( ! refalrts::svar_left( context[51], context[47], context[48] ) )
            continue;
          // closed e.new25 as range 47
          do {
            // </0 & DoCollectSegments/4 s.new29/5 (/8 e.new35/52 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 e.new34/54 )/28 (/44 # EndCondition/46 e.new31/56 )/45 (/49 # Pattern/51 s.new32/62 e.new33/58 )/50 e.new30/60 >/1
            context[52] = context[36];
            context[53] = context[37];
            context[54] = context[38];
            context[55] = context[39];
            context[56] = context[42];
            context[57] = context[43];
            context[58] = context[47];
            context[59] = context[48];
            context[60] = context[40];
            context[61] = context[41];
            if( ! refalrts::ident_term( identifiers[ident_Pattern], context[51] ) )
              continue;
            // closed e.new35 as range 52
            // closed e.new34 as range 54
            // closed e.new31 as range 56
            // closed e.new30 as range 60
            if( ! refalrts::svar_left( context[62], context[58], context[59] ) )
              continue;
            // closed e.new33 as range 58
            do {
              // </0 & DoCollectSegments/4 s.new36/5 (/8 e.new41/63 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 )/28 (/44 # EndCondition/46 e.new38/65 )/45 (/49 # Pattern/51 s.new39/62 e.new40/67 )/50 e.new37/69 >/1
              context[63] = context[52];
              context[64] = context[53];
              context[65] = context[56];
              context[66] = context[57];
              context[67] = context[58];
              context[68] = context[59];
              context[69] = context[60];
              context[70] = context[61];
              if( ! refalrts::empty_seq( context[54], context[55] ) )
                continue;
              // closed e.new41 as range 63
              // closed e.new38 as range 65
              // closed e.new40 as range 67
              // closed e.new37 as range 69
              do {
                // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/71 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 )/28 (/44 # EndCondition/46 e.Name/73 )/45 (/49 # Pattern/51 s.Level/62 )/50 e.Segments/75 >/1
                context[71] = context[63];
                context[72] = context[64];
                context[73] = context[65];
                context[74] = context[66];
                context[75] = context[69];
                context[76] = context[70];
                if( ! refalrts::repeated_stvar_term( vm, context[62], context[5] ) )
                  continue;
                if( ! refalrts::empty_seq( context[67], context[68] ) )
                  continue;
                // closed e.Indent as range 71
                // closed e.Name as range 73
                // closed e.Segments as range 75
                //DEBUG: s.Level: 5
                //DEBUG: e.Indent: 71
                //DEBUG: e.Name: 73
                //DEBUG: e.Segments: 75

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ } (/77 '*'/78 e.Indent/71/79 Tile{ HalfReuse: ' '/18 HalfReuse: ' '/17 HalfReuse: ' '/27 HalfReuse: </29 HalfReuse: & FormatWord:1/28 HalfReuse: </44 HalfReuse: & Type/46 AsIs: e.Name/73 HalfReuse: >/45 HalfReuse: >/49 HalfReuse: )/51 } Tile{ AsIs: (/16 } e.Indent/71/81"  , /*empty*/"/83 Tile{ AsIs: )/50 } (/85 e.Indent/71/86"  : /*empty*/"/88 )/90 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/71 AsIs: )/9 } Tile{ AsIs: e.Segments/75 } Tile{ AsIs: >/1 ]] }
                refalrts::alloc_open_bracket(vm, context[77]);
                refalrts::alloc_char(vm, context[78], '*');
                refalrts::copy_evar(vm, context[79], context[80], context[71], context[72]);
                refalrts::copy_evar(vm, context[81], context[82], context[71], context[72]);
                refalrts::alloc_chars(vm, context[83], context[84], "  , /*empty*/", 13);
                refalrts::alloc_open_bracket(vm, context[85]);
                refalrts::copy_evar(vm, context[86], context[87], context[71], context[72]);
                refalrts::alloc_chars(vm, context[88], context[89], "  : /*empty*/", 13);
                refalrts::alloc_close_bracket(vm, context[90]);
                refalrts::reinit_char(context[18], ' ');
                refalrts::reinit_char(context[17], ' ');
                refalrts::reinit_char(context[27], ' ');
                refalrts::reinit_open_call(context[29]);
                refalrts::reinit_name(context[28], functions[efunc_gen_FormatWord_B1]);
                refalrts::reinit_open_call(context[44]);
                refalrts::reinit_name(context[46], functions[efunc_Type]);
                refalrts::reinit_close_call(context[45]);
                refalrts::reinit_close_call(context[49]);
                refalrts::reinit_close_bracket(context[51]);
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::link_brackets( context[85], context[90] );
                refalrts::link_brackets( context[16], context[50] );
                refalrts::link_brackets( context[77], context[51] );
                refalrts::push_stack( vm, context[49] );
                refalrts::push_stack( vm, context[29] );
                refalrts::push_stack( vm, context[45] );
                refalrts::push_stack( vm, context[44] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = context[1];
                res = refalrts::splice_evar( res, context[75], context[76] );
                res = refalrts::splice_evar( res, context[0], context[9] );
                res = refalrts::splice_evar( res, context[85], context[90] );
                res = refalrts::splice_elem( res, context[50] );
                res = refalrts::splice_evar( res, context[83], context[84] );
                res = refalrts::splice_evar( res, context[81], context[82] );
                res = refalrts::splice_elem( res, context[16] );
                res = refalrts::splice_evar( res, context[18], context[51] );
                res = refalrts::splice_evar( res, context[79], context[80] );
                res = refalrts::splice_evar( res, context[77], context[78] );
                refalrts::splice_to_freelist_open( vm, trash_prev, res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              do {
                // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/71 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 )/28 (/44 # EndCondition/46 e.Name/73 )/45 (/49 # Pattern/51 s.Level/62 ';'/79 )/50 e.Segments/77 >/1
                context[71] = context[63];
                context[72] = context[64];
                context[73] = context[65];
                context[74] = context[66];
                context[75] = context[67];
                context[76] = context[68];
                context[77] = context[69];
                context[78] = context[70];
                if( ! refalrts::repeated_stvar_term( vm, context[62], context[5] ) )
                  continue;
                context[79] = refalrts::char_left( ';', context[75], context[76] );
                if( ! context[79] )
                  continue;
                if( ! refalrts::empty_seq( context[75], context[76] ) )
                  continue;
                // closed e.Indent as range 71
                // closed e.Name as range 73
                // closed e.Segments as range 77
                //DEBUG: s.Level: 5
                //DEBUG: e.Indent: 71
                //DEBUG: e.Name: 73
                //DEBUG: e.Segments: 77

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ } (/80 '*'/81 e.Indent/71/82 Tile{ HalfReuse: ' '/18 HalfReuse: ' '/17 HalfReuse: ' '/27 HalfReuse: </29 HalfReuse: & FormatWord:1/28 HalfReuse: </44 HalfReuse: & Type/46 AsIs: e.Name/73 HalfReuse: >/45 HalfReuse: >/49 HalfReuse: )/51 } Tile{ AsIs: (/16 } e.Indent/71/84"  , /*empty*/"/86 )/88 (/89 e.Indent/71/90"  : /*empty*/"/92 Tile{ AsIs: ';'/79 AsIs: )/50 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/71 AsIs: )/9 } Tile{ AsIs: e.Segments/77 } Tile{ AsIs: >/1 ]] }
                refalrts::alloc_open_bracket(vm, context[80]);
                refalrts::alloc_char(vm, context[81], '*');
                refalrts::copy_evar(vm, context[82], context[83], context[71], context[72]);
                refalrts::copy_evar(vm, context[84], context[85], context[71], context[72]);
                refalrts::alloc_chars(vm, context[86], context[87], "  , /*empty*/", 13);
                refalrts::alloc_close_bracket(vm, context[88]);
                refalrts::alloc_open_bracket(vm, context[89]);
                refalrts::copy_evar(vm, context[90], context[91], context[71], context[72]);
                refalrts::alloc_chars(vm, context[92], context[93], "  : /*empty*/", 13);
                refalrts::reinit_char(context[18], ' ');
                refalrts::reinit_char(context[17], ' ');
                refalrts::reinit_char(context[27], ' ');
                refalrts::reinit_open_call(context[29]);
                refalrts::reinit_name(context[28], functions[efunc_gen_FormatWord_B1]);
                refalrts::reinit_open_call(context[44]);
                refalrts::reinit_name(context[46], functions[efunc_Type]);
                refalrts::reinit_close_call(context[45]);
                refalrts::reinit_close_call(context[49]);
                refalrts::reinit_close_bracket(context[51]);
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::link_brackets( context[89], context[50] );
                refalrts::link_brackets( context[16], context[88] );
                refalrts::link_brackets( context[80], context[51] );
                refalrts::push_stack( vm, context[49] );
                refalrts::push_stack( vm, context[29] );
                refalrts::push_stack( vm, context[45] );
                refalrts::push_stack( vm, context[44] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = context[1];
                res = refalrts::splice_evar( res, context[77], context[78] );
                res = refalrts::splice_evar( res, context[0], context[9] );
                res = refalrts::splice_evar( res, context[79], context[50] );
                res = refalrts::splice_evar( res, context[86], context[93] );
                res = refalrts::splice_evar( res, context[84], context[85] );
                res = refalrts::splice_elem( res, context[16] );
                res = refalrts::splice_evar( res, context[18], context[51] );
                res = refalrts::splice_evar( res, context[82], context[83] );
                res = refalrts::splice_evar( res, context[80], context[81] );
                refalrts::splice_to_freelist_open( vm, trash_prev, res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/71 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 )/28 (/44 # EndCondition/46 e.Name/73 )/45 (/49 # Pattern/51 s.Level/62 e.Pattern/75 )/50 e.Segments/77 >/1
              context[71] = context[63];
              context[72] = context[64];
              context[73] = context[65];
              context[74] = context[66];
              context[75] = context[67];
              context[76] = context[68];
              context[77] = context[69];
              context[78] = context[70];
              if( ! refalrts::repeated_stvar_term( vm, context[62], context[5] ) )
                continue;
              // closed e.Indent as range 71
              // closed e.Name as range 73
              // closed e.Pattern as range 75
              // closed e.Segments as range 77
              //DEBUG: s.Level: 5
              //DEBUG: e.Indent: 71
              //DEBUG: e.Name: 73
              //DEBUG: e.Pattern: 75
              //DEBUG: e.Segments: 77

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } (/79 '*'/80 e.Indent/71/81 Tile{ HalfReuse: ' '/18 HalfReuse: ' '/17 HalfReuse: ' '/27 HalfReuse: </29 HalfReuse: & FormatWord:1/28 HalfReuse: </44 HalfReuse: & Type/46 AsIs: e.Name/73 HalfReuse: >/45 HalfReuse: >/49 HalfReuse: )/51 } Tile{ AsIs: (/16 } e.Indent/71/83"  , /*empty*/"/85 Tile{ AsIs: )/50 } </87 & DoFormatExpr@1/88 (/89 60/90 )/91 (/92 e.Indent/71/93 )/95 (/96 )/97 Tile{ AsIs: e.Pattern/75 } >/98 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/71 AsIs: )/9 } Tile{ AsIs: e.Segments/77 } Tile{ AsIs: >/1 ]] }
              refalrts::alloc_open_bracket(vm, context[79]);
              refalrts::alloc_char(vm, context[80], '*');
              refalrts::copy_evar(vm, context[81], context[82], context[71], context[72]);
              refalrts::copy_evar(vm, context[83], context[84], context[71], context[72]);
              refalrts::alloc_chars(vm, context[85], context[86], "  , /*empty*/", 13);
              refalrts::alloc_open_call(vm, context[87]);
              refalrts::alloc_name(vm, context[88], functions[efunc_gen_DoFormatExpr_Z1]);
              refalrts::alloc_open_bracket(vm, context[89]);
              refalrts::alloc_number(vm, context[90], 60UL);
              refalrts::alloc_close_bracket(vm, context[91]);
              refalrts::alloc_open_bracket(vm, context[92]);
              refalrts::copy_evar(vm, context[93], context[94], context[71], context[72]);
              refalrts::alloc_close_bracket(vm, context[95]);
              refalrts::alloc_open_bracket(vm, context[96]);
              refalrts::alloc_close_bracket(vm, context[97]);
              refalrts::alloc_close_call(vm, context[98]);
              refalrts::reinit_char(context[18], ' ');
              refalrts::reinit_char(context[17], ' ');
              refalrts::reinit_char(context[27], ' ');
              refalrts::reinit_open_call(context[29]);
              refalrts::reinit_name(context[28], functions[efunc_gen_FormatWord_B1]);
              refalrts::reinit_open_call(context[44]);
              refalrts::reinit_name(context[46], functions[efunc_Type]);
              refalrts::reinit_close_call(context[45]);
              refalrts::reinit_close_call(context[49]);
              refalrts::reinit_close_bracket(context[51]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[8], context[9] );
              refalrts::push_stack( vm, context[98] );
              refalrts::push_stack( vm, context[87] );
              refalrts::link_brackets( context[96], context[97] );
              refalrts::link_brackets( context[92], context[95] );
              refalrts::link_brackets( context[89], context[91] );
              refalrts::link_brackets( context[16], context[50] );
              refalrts::link_brackets( context[79], context[51] );
              refalrts::push_stack( vm, context[49] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[45] );
              refalrts::push_stack( vm, context[44] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_evar( res, context[77], context[78] );
              res = refalrts::splice_evar( res, context[0], context[9] );
              res = refalrts::splice_elem( res, context[98] );
              res = refalrts::splice_evar( res, context[75], context[76] );
              res = refalrts::splice_evar( res, context[87], context[97] );
              res = refalrts::splice_elem( res, context[50] );
              res = refalrts::splice_evar( res, context[85], context[86] );
              res = refalrts::splice_evar( res, context[83], context[84] );
              res = refalrts::splice_elem( res, context[16] );
              res = refalrts::splice_evar( res, context[18], context[51] );
              res = refalrts::splice_evar( res, context[81], context[82] );
              res = refalrts::splice_evar( res, context[79], context[80] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & DoCollectSegments/4 s.new36/5 (/8 e.new41/63 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 ';'/73 )/28 (/44 # EndCondition/46 e.new38/67 )/45 (/49 # Pattern/51 s.new39/62 e.new40/69 )/50 e.new37/71 >/1
              context[63] = context[52];
              context[64] = context[53];
              context[65] = context[54];
              context[66] = context[55];
              context[67] = context[56];
              context[68] = context[57];
              context[69] = context[58];
              context[70] = context[59];
              context[71] = context[60];
              context[72] = context[61];
              context[73] = refalrts::char_left( ';', context[65], context[66] );
              if( ! context[73] )
                continue;
              if( ! refalrts::empty_seq( context[65], context[66] ) )
                continue;
              // closed e.new41 as range 63
              // closed e.new38 as range 67
              // closed e.new40 as range 69
              // closed e.new37 as range 71
              do {
                // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/74 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 ';'/73 )/28 (/44 # EndCondition/46 e.Name/76 )/45 (/49 # Pattern/51 s.Level/62 )/50 e.Segments/78 >/1
                context[74] = context[63];
                context[75] = context[64];
                context[76] = context[67];
                context[77] = context[68];
                context[78] = context[71];
                context[79] = context[72];
                if( ! refalrts::repeated_stvar_term( vm, context[62], context[5] ) )
                  continue;
                if( ! refalrts::empty_seq( context[69], context[70] ) )
                  continue;
                // closed e.Indent as range 74
                // closed e.Name as range 76
                // closed e.Segments as range 78
                //DEBUG: s.Level: 5
                //DEBUG: e.Indent: 74
                //DEBUG: e.Name: 76
                //DEBUG: e.Segments: 78

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ } (/80 '*'/81 e.Indent/74/82"   "/84 </86 & FormatWord:1/87 </88 Tile{ HalfReuse: & Type/46 AsIs: e.Name/76 HalfReuse: >/45 HalfReuse: >/49 HalfReuse: )/51 } (/89 e.Indent/74/90"  , /*em"/92 Tile{ HalfReuse: 'p'/16 HalfReuse: 't'/18 HalfReuse: 'y'/17 HalfReuse: '*'/27 HalfReuse: '/'/29 AsIs: ';'/73 AsIs: )/28 AsIs: (/44 } e.Indent/74/94"  : /*empty*/"/96 Tile{ AsIs: )/50 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/74 AsIs: )/9 } Tile{ AsIs: e.Segments/78 } Tile{ AsIs: >/1 ]] }
                refalrts::alloc_open_bracket(vm, context[80]);
                refalrts::alloc_char(vm, context[81], '*');
                refalrts::copy_evar(vm, context[82], context[83], context[74], context[75]);
                refalrts::alloc_chars(vm, context[84], context[85], "   ", 3);
                refalrts::alloc_open_call(vm, context[86]);
                refalrts::alloc_name(vm, context[87], functions[efunc_gen_FormatWord_B1]);
                refalrts::alloc_open_call(vm, context[88]);
                refalrts::alloc_open_bracket(vm, context[89]);
                refalrts::copy_evar(vm, context[90], context[91], context[74], context[75]);
                refalrts::alloc_chars(vm, context[92], context[93], "  , /*em", 8);
                refalrts::copy_evar(vm, context[94], context[95], context[74], context[75]);
                refalrts::alloc_chars(vm, context[96], context[97], "  : /*empty*/", 13);
                refalrts::reinit_name(context[46], functions[efunc_Type]);
                refalrts::reinit_close_call(context[45]);
                refalrts::reinit_close_call(context[49]);
                refalrts::reinit_close_bracket(context[51]);
                refalrts::reinit_char(context[16], 'p');
                refalrts::reinit_char(context[18], 't');
                refalrts::reinit_char(context[17], 'y');
                refalrts::reinit_char(context[27], '*');
                refalrts::reinit_char(context[29], '/');
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::link_brackets( context[44], context[50] );
                refalrts::link_brackets( context[89], context[28] );
                refalrts::link_brackets( context[80], context[51] );
                refalrts::push_stack( vm, context[49] );
                refalrts::push_stack( vm, context[86] );
                refalrts::push_stack( vm, context[45] );
                refalrts::push_stack( vm, context[88] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = context[1];
                res = refalrts::splice_evar( res, context[78], context[79] );
                res = refalrts::splice_evar( res, context[0], context[9] );
                res = refalrts::splice_elem( res, context[50] );
                res = refalrts::splice_evar( res, context[96], context[97] );
                res = refalrts::splice_evar( res, context[94], context[95] );
                res = refalrts::splice_evar( res, context[16], context[44] );
                res = refalrts::splice_evar( res, context[89], context[93] );
                res = refalrts::splice_evar( res, context[46], context[51] );
                res = refalrts::splice_evar( res, context[80], context[88] );
                refalrts::splice_to_freelist_open( vm, trash_prev, res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              do {
                // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/74 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 ';'/73 )/28 (/44 # EndCondition/46 e.Name/76 )/45 (/49 # Pattern/51 s.Level/62 ';'/82 )/50 e.Segments/80 >/1
                context[74] = context[63];
                context[75] = context[64];
                context[76] = context[67];
                context[77] = context[68];
                context[78] = context[69];
                context[79] = context[70];
                context[80] = context[71];
                context[81] = context[72];
                if( ! refalrts::repeated_stvar_term( vm, context[62], context[5] ) )
                  continue;
                context[82] = refalrts::char_left( ';', context[78], context[79] );
                if( ! context[82] )
                  continue;
                if( ! refalrts::empty_seq( context[78], context[79] ) )
                  continue;
                // closed e.Indent as range 74
                // closed e.Name as range 76
                // closed e.Segments as range 80
                //DEBUG: s.Level: 5
                //DEBUG: e.Indent: 74
                //DEBUG: e.Name: 76
                //DEBUG: e.Segments: 80

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ } (/83 '*'/84 e.Indent/74/85"   "/87 </89 & FormatWord:1/90 </91 Tile{ HalfReuse: & Type/46 AsIs: e.Name/76 HalfReuse: >/45 HalfReuse: >/49 HalfReuse: )/51 } (/92 e.Indent/74/93"  , /*em"/95 Tile{ HalfReuse: 'p'/16 HalfReuse: 't'/18 HalfReuse: 'y'/17 HalfReuse: '*'/27 HalfReuse: '/'/29 AsIs: ';'/73 AsIs: )/28 AsIs: (/44 } e.Indent/74/97"  : /*empty*/"/99 Tile{ AsIs: ';'/82 AsIs: )/50 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/74 AsIs: )/9 } Tile{ AsIs: e.Segments/80 } Tile{ AsIs: >/1 ]] }
                refalrts::alloc_open_bracket(vm, context[83]);
                refalrts::alloc_char(vm, context[84], '*');
                refalrts::copy_evar(vm, context[85], context[86], context[74], context[75]);
                refalrts::alloc_chars(vm, context[87], context[88], "   ", 3);
                refalrts::alloc_open_call(vm, context[89]);
                refalrts::alloc_name(vm, context[90], functions[efunc_gen_FormatWord_B1]);
                refalrts::alloc_open_call(vm, context[91]);
                refalrts::alloc_open_bracket(vm, context[92]);
                refalrts::copy_evar(vm, context[93], context[94], context[74], context[75]);
                refalrts::alloc_chars(vm, context[95], context[96], "  , /*em", 8);
                refalrts::copy_evar(vm, context[97], context[98], context[74], context[75]);
                refalrts::alloc_chars(vm, context[99], context[100], "  : /*empty*/", 13);
                refalrts::reinit_name(context[46], functions[efunc_Type]);
                refalrts::reinit_close_call(context[45]);
                refalrts::reinit_close_call(context[49]);
                refalrts::reinit_close_bracket(context[51]);
                refalrts::reinit_char(context[16], 'p');
                refalrts::reinit_char(context[18], 't');
                refalrts::reinit_char(context[17], 'y');
                refalrts::reinit_char(context[27], '*');
                refalrts::reinit_char(context[29], '/');
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::link_brackets( context[44], context[50] );
                refalrts::link_brackets( context[92], context[28] );
                refalrts::link_brackets( context[83], context[51] );
                refalrts::push_stack( vm, context[49] );
                refalrts::push_stack( vm, context[89] );
                refalrts::push_stack( vm, context[45] );
                refalrts::push_stack( vm, context[91] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = context[1];
                res = refalrts::splice_evar( res, context[80], context[81] );
                res = refalrts::splice_evar( res, context[0], context[9] );
                res = refalrts::splice_evar( res, context[82], context[50] );
                res = refalrts::splice_evar( res, context[99], context[100] );
                res = refalrts::splice_evar( res, context[97], context[98] );
                res = refalrts::splice_evar( res, context[16], context[44] );
                res = refalrts::splice_evar( res, context[92], context[96] );
                res = refalrts::splice_evar( res, context[46], context[51] );
                res = refalrts::splice_evar( res, context[83], context[91] );
                refalrts::splice_to_freelist_open( vm, trash_prev, res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/74 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 ';'/73 )/28 (/44 # EndCondition/46 e.Name/76 )/45 (/49 # Pattern/51 s.Level/62 e.Pattern/78 )/50 e.Segments/80 >/1
              context[74] = context[63];
              context[75] = context[64];
              context[76] = context[67];
              context[77] = context[68];
              context[78] = context[69];
              context[79] = context[70];
              context[80] = context[71];
              context[81] = context[72];
              if( ! refalrts::repeated_stvar_term( vm, context[62], context[5] ) )
                continue;
              // closed e.Indent as range 74
              // closed e.Name as range 76
              // closed e.Pattern as range 78
              // closed e.Segments as range 80
              //DEBUG: s.Level: 5
              //DEBUG: e.Indent: 74
              //DEBUG: e.Name: 76
              //DEBUG: e.Pattern: 78
              //DEBUG: e.Segments: 80

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } (/82 '*'/83 e.Indent/74/84 Tile{ HalfReuse: ' '/17 HalfReuse: ' '/27 HalfReuse: ' '/29 HalfReuse: </73 HalfReuse: & FormatWord:1/28 HalfReuse: </44 HalfReuse: & Type/46 AsIs: e.Name/76 HalfReuse: >/45 HalfReuse: >/49 HalfReuse: )/51 } (/86 e.Indent/74/87"  , /*empty*/;"/89 Tile{ AsIs: )/50 } </91 & DoFormatExpr@1/92 Tile{ AsIs: (/16 HalfReuse: 60/18 } )/93 (/94 e.Indent/74/95 )/97 (/98 )/99 Tile{ AsIs: e.Pattern/78 } >/100 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/74 AsIs: )/9 } Tile{ AsIs: e.Segments/80 } Tile{ AsIs: >/1 ]] }
              refalrts::alloc_open_bracket(vm, context[82]);
              refalrts::alloc_char(vm, context[83], '*');
              refalrts::copy_evar(vm, context[84], context[85], context[74], context[75]);
              refalrts::alloc_open_bracket(vm, context[86]);
              refalrts::copy_evar(vm, context[87], context[88], context[74], context[75]);
              refalrts::alloc_chars(vm, context[89], context[90], "  , /*empty*/;", 14);
              refalrts::alloc_open_call(vm, context[91]);
              refalrts::alloc_name(vm, context[92], functions[efunc_gen_DoFormatExpr_Z1]);
              refalrts::alloc_close_bracket(vm, context[93]);
              refalrts::alloc_open_bracket(vm, context[94]);
              refalrts::copy_evar(vm, context[95], context[96], context[74], context[75]);
              refalrts::alloc_close_bracket(vm, context[97]);
              refalrts::alloc_open_bracket(vm, context[98]);
              refalrts::alloc_close_bracket(vm, context[99]);
              refalrts::alloc_close_call(vm, context[100]);
              refalrts::reinit_char(context[17], ' ');
              refalrts::reinit_char(context[27], ' ');
              refalrts::reinit_char(context[29], ' ');
              refalrts::reinit_open_call(context[73]);
              refalrts::reinit_name(context[28], functions[efunc_gen_FormatWord_B1]);
              refalrts::reinit_open_call(context[44]);
              refalrts::reinit_name(context[46], functions[efunc_Type]);
              refalrts::reinit_close_call(context[45]);
              refalrts::reinit_close_call(context[49]);
              refalrts::reinit_close_bracket(context[51]);
              refalrts::reinit_number(context[18], 60UL);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[8], context[9] );
              refalrts::push_stack( vm, context[100] );
              refalrts::push_stack( vm, context[91] );
              refalrts::link_brackets( context[98], context[99] );
              refalrts::link_brackets( context[94], context[97] );
              refalrts::link_brackets( context[16], context[93] );
              refalrts::link_brackets( context[86], context[50] );
              refalrts::link_brackets( context[82], context[51] );
              refalrts::push_stack( vm, context[49] );
              refalrts::push_stack( vm, context[73] );
              refalrts::push_stack( vm, context[45] );
              refalrts::push_stack( vm, context[44] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_evar( res, context[80], context[81] );
              res = refalrts::splice_evar( res, context[0], context[9] );
              res = refalrts::splice_elem( res, context[100] );
              res = refalrts::splice_evar( res, context[78], context[79] );
              res = refalrts::splice_evar( res, context[93], context[99] );
              res = refalrts::splice_evar( res, context[16], context[18] );
              res = refalrts::splice_evar( res, context[91], context[92] );
              res = refalrts::splice_elem( res, context[50] );
              res = refalrts::splice_evar( res, context[86], context[90] );
              res = refalrts::splice_evar( res, context[17], context[51] );
              res = refalrts::splice_evar( res, context[84], context[85] );
              res = refalrts::splice_evar( res, context[82], context[83] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/63 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 e.Result/65 )/28 (/44 # EndCondition/46 e.Name/67 )/45 (/49 # Pattern/51 s.Level/62 )/50 e.Segments/69 >/1
              context[63] = context[52];
              context[64] = context[53];
              context[65] = context[54];
              context[66] = context[55];
              context[67] = context[56];
              context[68] = context[57];
              context[69] = context[60];
              context[70] = context[61];
              if( ! refalrts::repeated_stvar_term( vm, context[62], context[5] ) )
                continue;
              if( ! refalrts::empty_seq( context[58], context[59] ) )
                continue;
              // closed e.Indent as range 63
              // closed e.Result as range 65
              // closed e.Name as range 67
              // closed e.Segments as range 69
              //DEBUG: s.Level: 5
              //DEBUG: e.Indent: 63
              //DEBUG: e.Result: 65
              //DEBUG: e.Name: 67
              //DEBUG: e.Segments: 69

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: (/16 HalfReuse: '*'/18 } e.Indent/63/71"   "/73 </75 & FormatWord:1/76 </77 Tile{ HalfReuse: & Type/46 AsIs: e.Name/67 HalfReuse: >/45 HalfReuse: >/49 HalfReuse: )/51 } </78 & DoFormatExpr@2/79 (/80 60/81 )/82 (/83 e.Indent/63/84 Tile{ AsIs: )/17 AsIs: (/27 HalfReuse: )/29 AsIs: e.Result/65 HalfReuse: >/28 AsIs: (/44 } e.Indent/63/86"  : /*empty*/"/88 Tile{ AsIs: )/50 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/63 AsIs: )/9 } Tile{ AsIs: e.Segments/69 } Tile{ AsIs: >/1 ]] }
              refalrts::copy_evar(vm, context[71], context[72], context[63], context[64]);
              refalrts::alloc_chars(vm, context[73], context[74], "   ", 3);
              refalrts::alloc_open_call(vm, context[75]);
              refalrts::alloc_name(vm, context[76], functions[efunc_gen_FormatWord_B1]);
              refalrts::alloc_open_call(vm, context[77]);
              refalrts::alloc_open_call(vm, context[78]);
              refalrts::alloc_name(vm, context[79], functions[efunc_gen_DoFormatExpr_Z2]);
              refalrts::alloc_open_bracket(vm, context[80]);
              refalrts::alloc_number(vm, context[81], 60UL);
              refalrts::alloc_close_bracket(vm, context[82]);
              refalrts::alloc_open_bracket(vm, context[83]);
              refalrts::copy_evar(vm, context[84], context[85], context[63], context[64]);
              refalrts::copy_evar(vm, context[86], context[87], context[63], context[64]);
              refalrts::alloc_chars(vm, context[88], context[89], "  : /*empty*/", 13);
              refalrts::reinit_char(context[18], '*');
              refalrts::reinit_name(context[46], functions[efunc_Type]);
              refalrts::reinit_close_call(context[45]);
              refalrts::reinit_close_call(context[49]);
              refalrts::reinit_close_bracket(context[51]);
              refalrts::reinit_close_bracket(context[29]);
              refalrts::reinit_close_call(context[28]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[8], context[9] );
              refalrts::link_brackets( context[44], context[50] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[78] );
              refalrts::link_brackets( context[27], context[29] );
              refalrts::link_brackets( context[83], context[17] );
              refalrts::link_brackets( context[80], context[82] );
              refalrts::link_brackets( context[16], context[51] );
              refalrts::push_stack( vm, context[49] );
              refalrts::push_stack( vm, context[75] );
              refalrts::push_stack( vm, context[45] );
              refalrts::push_stack( vm, context[77] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_evar( res, context[69], context[70] );
              res = refalrts::splice_evar( res, context[0], context[9] );
              res = refalrts::splice_elem( res, context[50] );
              res = refalrts::splice_evar( res, context[88], context[89] );
              res = refalrts::splice_evar( res, context[86], context[87] );
              res = refalrts::splice_evar( res, context[17], context[44] );
              res = refalrts::splice_evar( res, context[84], context[85] );
              res = refalrts::splice_evar( res, context[78], context[83] );
              res = refalrts::splice_evar( res, context[46], context[51] );
              res = refalrts::splice_evar( res, context[73], context[77] );
              res = refalrts::splice_evar( res, context[71], context[72] );
              res = refalrts::splice_evar( res, context[16], context[18] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/63 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 e.Result/65 )/28 (/44 # EndCondition/46 e.Name/67 )/45 (/49 # Pattern/51 s.Level/62 ';'/73 )/50 e.Segments/71 >/1
              context[63] = context[52];
              context[64] = context[53];
              context[65] = context[54];
              context[66] = context[55];
              context[67] = context[56];
              context[68] = context[57];
              context[69] = context[58];
              context[70] = context[59];
              context[71] = context[60];
              context[72] = context[61];
              if( ! refalrts::repeated_stvar_term( vm, context[62], context[5] ) )
                continue;
              context[73] = refalrts::char_left( ';', context[69], context[70] );
              if( ! context[73] )
                continue;
              if( ! refalrts::empty_seq( context[69], context[70] ) )
                continue;
              // closed e.Indent as range 63
              // closed e.Result as range 65
              // closed e.Name as range 67
              // closed e.Segments as range 71
              //DEBUG: s.Level: 5
              //DEBUG: e.Indent: 63
              //DEBUG: e.Result: 65
              //DEBUG: e.Name: 67
              //DEBUG: e.Segments: 71

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: (/16 HalfReuse: '*'/18 } e.Indent/63/74"   "/76 </78 & FormatWord:1/79 </80 Tile{ HalfReuse: & Type/46 AsIs: e.Name/67 HalfReuse: >/45 HalfReuse: >/49 HalfReuse: )/51 } </81 & DoFormatExpr@2/82 (/83 60/84 )/85 (/86 e.Indent/63/87 Tile{ AsIs: )/17 AsIs: (/27 HalfReuse: )/29 AsIs: e.Result/65 HalfReuse: >/28 AsIs: (/44 } e.Indent/63/89"  : /*empty*/"/91 Tile{ AsIs: ';'/73 AsIs: )/50 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/63 AsIs: )/9 } Tile{ AsIs: e.Segments/71 } Tile{ AsIs: >/1 ]] }
              refalrts::copy_evar(vm, context[74], context[75], context[63], context[64]);
              refalrts::alloc_chars(vm, context[76], context[77], "   ", 3);
              refalrts::alloc_open_call(vm, context[78]);
              refalrts::alloc_name(vm, context[79], functions[efunc_gen_FormatWord_B1]);
              refalrts::alloc_open_call(vm, context[80]);
              refalrts::alloc_open_call(vm, context[81]);
              refalrts::alloc_name(vm, context[82], functions[efunc_gen_DoFormatExpr_Z2]);
              refalrts::alloc_open_bracket(vm, context[83]);
              refalrts::alloc_number(vm, context[84], 60UL);
              refalrts::alloc_close_bracket(vm, context[85]);
              refalrts::alloc_open_bracket(vm, context[86]);
              refalrts::copy_evar(vm, context[87], context[88], context[63], context[64]);
              refalrts::copy_evar(vm, context[89], context[90], context[63], context[64]);
              refalrts::alloc_chars(vm, context[91], context[92], "  : /*empty*/", 13);
              refalrts::reinit_char(context[18], '*');
              refalrts::reinit_name(context[46], functions[efunc_Type]);
              refalrts::reinit_close_call(context[45]);
              refalrts::reinit_close_call(context[49]);
              refalrts::reinit_close_bracket(context[51]);
              refalrts::reinit_close_bracket(context[29]);
              refalrts::reinit_close_call(context[28]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[8], context[9] );
              refalrts::link_brackets( context[44], context[50] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[81] );
              refalrts::link_brackets( context[27], context[29] );
              refalrts::link_brackets( context[86], context[17] );
              refalrts::link_brackets( context[83], context[85] );
              refalrts::link_brackets( context[16], context[51] );
              refalrts::push_stack( vm, context[49] );
              refalrts::push_stack( vm, context[78] );
              refalrts::push_stack( vm, context[45] );
              refalrts::push_stack( vm, context[80] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_evar( res, context[71], context[72] );
              res = refalrts::splice_evar( res, context[0], context[9] );
              res = refalrts::splice_evar( res, context[73], context[50] );
              res = refalrts::splice_evar( res, context[91], context[92] );
              res = refalrts::splice_evar( res, context[89], context[90] );
              res = refalrts::splice_evar( res, context[17], context[44] );
              res = refalrts::splice_evar( res, context[87], context[88] );
              res = refalrts::splice_evar( res, context[81], context[86] );
              res = refalrts::splice_evar( res, context[46], context[51] );
              res = refalrts::splice_evar( res, context[76], context[80] );
              res = refalrts::splice_evar( res, context[74], context[75] );
              res = refalrts::splice_evar( res, context[16], context[18] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/63 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 e.Result/65 )/28 (/44 # EndCondition/46 e.Name/67 )/45 (/49 # Pattern/51 s.Level/62 e.Pattern/69 )/50 e.Segments/71 >/1
            context[63] = context[52];
            context[64] = context[53];
            context[65] = context[54];
            context[66] = context[55];
            context[67] = context[56];
            context[68] = context[57];
            context[69] = context[58];
            context[70] = context[59];
            context[71] = context[60];
            context[72] = context[61];
            if( ! refalrts::repeated_stvar_term( vm, context[62], context[5] ) )
              continue;
            // closed e.Indent as range 63
            // closed e.Result as range 65
            // closed e.Name as range 67
            // closed e.Pattern as range 69
            // closed e.Segments as range 71
            //DEBUG: s.Level: 5
            //DEBUG: e.Indent: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Name: 67
            //DEBUG: e.Pattern: 69
            //DEBUG: e.Segments: 71

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Level/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } (/73 '*'/74 e.Indent/63/75"   "/77 </79 & FormatWord:1/80 </81 & Type/82 Tile{ AsIs: e.Name/67 } >/83 >/84 )/85 </86 & DoFormatExpr@2/87 (/88 60/89 Tile{ AsIs: )/50 } (/90 e.Indent/63/91 Tile{ AsIs: )/17 AsIs: (/27 HalfReuse: )/29 AsIs: e.Result/65 HalfReuse: >/28 HalfReuse: </44 HalfReuse: & DoFormatExpr@1/46 } Tile{ AsIs: (/16 HalfReuse: 60/18 } )/93 (/94 e.Indent/63/95 Tile{ AsIs: )/45 AsIs: (/49 HalfReuse: )/51 } Tile{ AsIs: e.Pattern/69 } >/97 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/63 AsIs: )/9 } Tile{ AsIs: e.Segments/71 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_bracket(vm, context[73]);
            refalrts::alloc_char(vm, context[74], '*');
            refalrts::copy_evar(vm, context[75], context[76], context[63], context[64]);
            refalrts::alloc_chars(vm, context[77], context[78], "   ", 3);
            refalrts::alloc_open_call(vm, context[79]);
            refalrts::alloc_name(vm, context[80], functions[efunc_gen_FormatWord_B1]);
            refalrts::alloc_open_call(vm, context[81]);
            refalrts::alloc_name(vm, context[82], functions[efunc_Type]);
            refalrts::alloc_close_call(vm, context[83]);
            refalrts::alloc_close_call(vm, context[84]);
            refalrts::alloc_close_bracket(vm, context[85]);
            refalrts::alloc_open_call(vm, context[86]);
            refalrts::alloc_name(vm, context[87], functions[efunc_gen_DoFormatExpr_Z2]);
            refalrts::alloc_open_bracket(vm, context[88]);
            refalrts::alloc_number(vm, context[89], 60UL);
            refalrts::alloc_open_bracket(vm, context[90]);
            refalrts::copy_evar(vm, context[91], context[92], context[63], context[64]);
            refalrts::alloc_close_bracket(vm, context[93]);
            refalrts::alloc_open_bracket(vm, context[94]);
            refalrts::copy_evar(vm, context[95], context[96], context[63], context[64]);
            refalrts::alloc_close_call(vm, context[97]);
            refalrts::reinit_close_bracket(context[29]);
            refalrts::reinit_close_call(context[28]);
            refalrts::reinit_open_call(context[44]);
            refalrts::reinit_name(context[46], functions[efunc_gen_DoFormatExpr_Z1]);
            refalrts::reinit_number(context[18], 60UL);
            refalrts::reinit_close_bracket(context[51]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::push_stack( vm, context[97] );
            refalrts::push_stack( vm, context[44] );
            refalrts::link_brackets( context[49], context[51] );
            refalrts::link_brackets( context[94], context[45] );
            refalrts::link_brackets( context[16], context[93] );
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[86] );
            refalrts::link_brackets( context[27], context[29] );
            refalrts::link_brackets( context[90], context[17] );
            refalrts::link_brackets( context[88], context[50] );
            refalrts::link_brackets( context[73], context[85] );
            refalrts::push_stack( vm, context[84] );
            refalrts::push_stack( vm, context[79] );
            refalrts::push_stack( vm, context[83] );
            refalrts::push_stack( vm, context[81] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[71], context[72] );
            res = refalrts::splice_evar( res, context[0], context[9] );
            res = refalrts::splice_elem( res, context[97] );
            res = refalrts::splice_evar( res, context[69], context[70] );
            res = refalrts::splice_evar( res, context[45], context[51] );
            res = refalrts::splice_evar( res, context[95], context[96] );
            res = refalrts::splice_evar( res, context[93], context[94] );
            res = refalrts::splice_evar( res, context[16], context[18] );
            res = refalrts::splice_evar( res, context[17], context[46] );
            res = refalrts::splice_evar( res, context[91], context[92] );
            res = refalrts::splice_elem( res, context[90] );
            res = refalrts::splice_elem( res, context[50] );
            res = refalrts::splice_evar( res, context[83], context[89] );
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_evar( res, context[73], context[82] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoCollectSegments/4 s.new29/5 (/8 e.new33/52 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 e.new32/54 )/28 (/44 # EndCondition/46 e.new31/56 )/45 (/49 # StartBlock/51 )/50 e.new30/58 >/1
          context[52] = context[36];
          context[53] = context[37];
          context[54] = context[38];
          context[55] = context[39];
          context[56] = context[42];
          context[57] = context[43];
          context[58] = context[40];
          context[59] = context[41];
          if( ! refalrts::ident_term( identifiers[ident_StartBlock], context[51] ) )
            continue;
          if( ! refalrts::empty_seq( context[47], context[48] ) )
            continue;
          // closed e.new33 as range 52
          // closed e.new32 as range 54
          // closed e.new31 as range 56
          // closed e.new30 as range 58
          do {
            // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/60 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 )/28 (/44 # EndCondition/46 e.Name/62 )/45 (/49 # StartBlock/51 )/50 e.Segments/64 >/1
            context[60] = context[52];
            context[61] = context[53];
            context[62] = context[56];
            context[63] = context[57];
            context[64] = context[58];
            context[65] = context[59];
            if( ! refalrts::empty_seq( context[54], context[55] ) )
              continue;
            // closed e.Indent as range 60
            // closed e.Name as range 62
            // closed e.Segments as range 64
            //DEBUG: s.Level: 5
            //DEBUG: e.Indent: 60
            //DEBUG: e.Name: 62
            //DEBUG: e.Segments: 64

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } (/66 '*'/67 e.Indent/60/68"   "/70 </72 & FormatWord:1/73 </74 & Type/75 Tile{ AsIs: e.Name/62 } >/76 >/77 )/78 Tile{ AsIs: (/8 AsIs: e.Indent/60 HalfReuse: ' '/9 HalfReuse: ' '/16 HalfReuse: ','/18 HalfReuse: ' '/17 HalfReuse: '/'/27 HalfReuse: '*'/29 HalfReuse: 'e'/28 HalfReuse: 'm'/44 HalfReuse: 'p'/46 }"ty*/"/79 )/81 (/82 e.Indent/60/83"  : {"/85 )/87 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 } </88 & Add/89 1/90 Tile{ AsIs: s.Level/5 } >/91 (/92 e.Indent/60/93"   "/95 Tile{ HalfReuse: ' '/45 HalfReuse: ' '/49 HalfReuse: ' '/51 AsIs: )/50 AsIs: e.Segments/64 AsIs: >/1 ]] }
            refalrts::alloc_open_bracket(vm, context[66]);
            refalrts::alloc_char(vm, context[67], '*');
            refalrts::copy_evar(vm, context[68], context[69], context[60], context[61]);
            refalrts::alloc_chars(vm, context[70], context[71], "   ", 3);
            refalrts::alloc_open_call(vm, context[72]);
            refalrts::alloc_name(vm, context[73], functions[efunc_gen_FormatWord_B1]);
            refalrts::alloc_open_call(vm, context[74]);
            refalrts::alloc_name(vm, context[75], functions[efunc_Type]);
            refalrts::alloc_close_call(vm, context[76]);
            refalrts::alloc_close_call(vm, context[77]);
            refalrts::alloc_close_bracket(vm, context[78]);
            refalrts::alloc_chars(vm, context[79], context[80], "ty*/", 4);
            refalrts::alloc_close_bracket(vm, context[81]);
            refalrts::alloc_open_bracket(vm, context[82]);
            refalrts::copy_evar(vm, context[83], context[84], context[60], context[61]);
            refalrts::alloc_chars(vm, context[85], context[86], "  : {", 5);
            refalrts::alloc_close_bracket(vm, context[87]);
            refalrts::alloc_open_call(vm, context[88]);
            refalrts::alloc_name(vm, context[89], functions[efunc_Add]);
            refalrts::alloc_number(vm, context[90], 1UL);
            refalrts::alloc_close_call(vm, context[91]);
            refalrts::alloc_open_bracket(vm, context[92]);
            refalrts::copy_evar(vm, context[93], context[94], context[60], context[61]);
            refalrts::alloc_chars(vm, context[95], context[96], "   ", 3);
            refalrts::reinit_char(context[9], ' ');
            refalrts::reinit_char(context[16], ' ');
            refalrts::reinit_char(context[18], ',');
            refalrts::reinit_char(context[17], ' ');
            refalrts::reinit_char(context[27], '/');
            refalrts::reinit_char(context[29], '*');
            refalrts::reinit_char(context[28], 'e');
            refalrts::reinit_char(context[44], 'm');
            refalrts::reinit_char(context[46], 'p');
            refalrts::reinit_char(context[45], ' ');
            refalrts::reinit_char(context[49], ' ');
            refalrts::reinit_char(context[51], ' ');
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[92], context[50] );
            refalrts::push_stack( vm, context[91] );
            refalrts::push_stack( vm, context[88] );
            refalrts::link_brackets( context[82], context[87] );
            refalrts::link_brackets( context[8], context[81] );
            refalrts::link_brackets( context[66], context[78] );
            refalrts::push_stack( vm, context[77] );
            refalrts::push_stack( vm, context[72] );
            refalrts::push_stack( vm, context[76] );
            refalrts::push_stack( vm, context[74] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[45];
            res = refalrts::splice_evar( res, context[91], context[96] );
            res = refalrts::splice_elem( res, context[5] );
            res = refalrts::splice_evar( res, context[88], context[90] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[79], context[87] );
            res = refalrts::splice_evar( res, context[8], context[46] );
            res = refalrts::splice_evar( res, context[76], context[78] );
            res = refalrts::splice_evar( res, context[62], context[63] );
            res = refalrts::splice_evar( res, context[66], context[75] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/60 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 ';'/68 )/28 (/44 # EndCondition/46 e.Name/64 )/45 (/49 # StartBlock/51 )/50 e.Segments/66 >/1
            context[60] = context[52];
            context[61] = context[53];
            context[62] = context[54];
            context[63] = context[55];
            context[64] = context[56];
            context[65] = context[57];
            context[66] = context[58];
            context[67] = context[59];
            context[68] = refalrts::char_left( ';', context[62], context[63] );
            if( ! context[68] )
              continue;
            if( ! refalrts::empty_seq( context[62], context[63] ) )
              continue;
            // closed e.Indent as range 60
            // closed e.Name as range 64
            // closed e.Segments as range 66
            //DEBUG: s.Level: 5
            //DEBUG: e.Indent: 60
            //DEBUG: e.Name: 64
            //DEBUG: e.Segments: 66

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } (/69 '*'/70 e.Indent/60/71"   "/73 </75 & FormatWord:1/76 </77 & Type/78 Tile{ AsIs: e.Name/64 } >/79 >/80 )/81 Tile{ AsIs: (/8 AsIs: e.Indent/60 HalfReuse: ' '/9 HalfReuse: ' '/16 HalfReuse: ','/18 HalfReuse: ' '/17 HalfReuse: '/'/27 HalfReuse: '*'/29 Reuse: 'e'/68 HalfReuse: 'm'/28 HalfReuse: 'p'/44 HalfReuse: 't'/46 }"y*/;"/82 )/84 (/85 e.Indent/60/86"  : {"/88 )/90 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 } </91 & Add/92 1/93 Tile{ AsIs: s.Level/5 } >/94 (/95 e.Indent/60/96"   "/98 Tile{ HalfReuse: ' '/45 HalfReuse: ' '/49 HalfReuse: ' '/51 AsIs: )/50 AsIs: e.Segments/66 AsIs: >/1 ]] }
            refalrts::alloc_open_bracket(vm, context[69]);
            refalrts::alloc_char(vm, context[70], '*');
            refalrts::copy_evar(vm, context[71], context[72], context[60], context[61]);
            refalrts::alloc_chars(vm, context[73], context[74], "   ", 3);
            refalrts::alloc_open_call(vm, context[75]);
            refalrts::alloc_name(vm, context[76], functions[efunc_gen_FormatWord_B1]);
            refalrts::alloc_open_call(vm, context[77]);
            refalrts::alloc_name(vm, context[78], functions[efunc_Type]);
            refalrts::alloc_close_call(vm, context[79]);
            refalrts::alloc_close_call(vm, context[80]);
            refalrts::alloc_close_bracket(vm, context[81]);
            refalrts::alloc_chars(vm, context[82], context[83], "y*/;", 4);
            refalrts::alloc_close_bracket(vm, context[84]);
            refalrts::alloc_open_bracket(vm, context[85]);
            refalrts::copy_evar(vm, context[86], context[87], context[60], context[61]);
            refalrts::alloc_chars(vm, context[88], context[89], "  : {", 5);
            refalrts::alloc_close_bracket(vm, context[90]);
            refalrts::alloc_open_call(vm, context[91]);
            refalrts::alloc_name(vm, context[92], functions[efunc_Add]);
            refalrts::alloc_number(vm, context[93], 1UL);
            refalrts::alloc_close_call(vm, context[94]);
            refalrts::alloc_open_bracket(vm, context[95]);
            refalrts::copy_evar(vm, context[96], context[97], context[60], context[61]);
            refalrts::alloc_chars(vm, context[98], context[99], "   ", 3);
            refalrts::reinit_char(context[9], ' ');
            refalrts::reinit_char(context[16], ' ');
            refalrts::reinit_char(context[18], ',');
            refalrts::reinit_char(context[17], ' ');
            refalrts::reinit_char(context[27], '/');
            refalrts::reinit_char(context[29], '*');
            refalrts::update_char(context[68], 'e');
            refalrts::reinit_char(context[28], 'm');
            refalrts::reinit_char(context[44], 'p');
            refalrts::reinit_char(context[46], 't');
            refalrts::reinit_char(context[45], ' ');
            refalrts::reinit_char(context[49], ' ');
            refalrts::reinit_char(context[51], ' ');
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[95], context[50] );
            refalrts::push_stack( vm, context[94] );
            refalrts::push_stack( vm, context[91] );
            refalrts::link_brackets( context[85], context[90] );
            refalrts::link_brackets( context[8], context[84] );
            refalrts::link_brackets( context[69], context[81] );
            refalrts::push_stack( vm, context[80] );
            refalrts::push_stack( vm, context[75] );
            refalrts::push_stack( vm, context[79] );
            refalrts::push_stack( vm, context[77] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[45];
            res = refalrts::splice_evar( res, context[94], context[99] );
            res = refalrts::splice_elem( res, context[5] );
            res = refalrts::splice_evar( res, context[91], context[93] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[82], context[90] );
            res = refalrts::splice_evar( res, context[8], context[46] );
            res = refalrts::splice_evar( res, context[79], context[81] );
            res = refalrts::splice_evar( res, context[64], context[65] );
            res = refalrts::splice_evar( res, context[69], context[78] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/60 )/9 (/16 # StartCondition/18 )/17 (/27 # Result/29 e.Result/62 )/28 (/44 # EndCondition/46 e.Name/64 )/45 (/49 # StartBlock/51 )/50 e.Segments/66 >/1
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          // closed e.Indent as range 60
          // closed e.Result as range 62
          // closed e.Name as range 64
          // closed e.Segments as range 66
          //DEBUG: s.Level: 5
          //DEBUG: e.Indent: 60
          //DEBUG: e.Result: 62
          //DEBUG: e.Name: 64
          //DEBUG: e.Segments: 66

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/68 '*'/69 e.Indent/60/70"   "/72 </74 Tile{ HalfReuse: & FormatWord:1/46 } </75 & Type/76 Tile{ AsIs: e.Name/64 } >/77 >/78 )/79 </80 & DoFormatExpr@2/81 (/82 60/83 )/84 (/85 e.Indent/60/86 Tile{ AsIs: )/17 AsIs: (/27 HalfReuse: )/29 AsIs: e.Result/62 HalfReuse: >/28 AsIs: (/44 } e.Indent/60/88"  : {"/90 )/92 Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 } </93 & Add/94 1/95 Tile{ AsIs: s.Level/5 } >/96 Tile{ AsIs: (/8 AsIs: e.Indent/60 HalfReuse: ' '/9 HalfReuse: ' '/16 HalfReuse: ' '/18 } Tile{ HalfReuse: ' '/45 HalfReuse: ' '/49 HalfReuse: ' '/51 AsIs: )/50 AsIs: e.Segments/66 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[68]);
          refalrts::alloc_char(vm, context[69], '*');
          refalrts::copy_evar(vm, context[70], context[71], context[60], context[61]);
          refalrts::alloc_chars(vm, context[72], context[73], "   ", 3);
          refalrts::alloc_open_call(vm, context[74]);
          refalrts::alloc_open_call(vm, context[75]);
          refalrts::alloc_name(vm, context[76], functions[efunc_Type]);
          refalrts::alloc_close_call(vm, context[77]);
          refalrts::alloc_close_call(vm, context[78]);
          refalrts::alloc_close_bracket(vm, context[79]);
          refalrts::alloc_open_call(vm, context[80]);
          refalrts::alloc_name(vm, context[81], functions[efunc_gen_DoFormatExpr_Z2]);
          refalrts::alloc_open_bracket(vm, context[82]);
          refalrts::alloc_number(vm, context[83], 60UL);
          refalrts::alloc_close_bracket(vm, context[84]);
          refalrts::alloc_open_bracket(vm, context[85]);
          refalrts::copy_evar(vm, context[86], context[87], context[60], context[61]);
          refalrts::copy_evar(vm, context[88], context[89], context[60], context[61]);
          refalrts::alloc_chars(vm, context[90], context[91], "  : {", 5);
          refalrts::alloc_close_bracket(vm, context[92]);
          refalrts::alloc_open_call(vm, context[93]);
          refalrts::alloc_name(vm, context[94], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[95], 1UL);
          refalrts::alloc_close_call(vm, context[96]);
          refalrts::reinit_name(context[46], functions[efunc_gen_FormatWord_B1]);
          refalrts::reinit_close_bracket(context[29]);
          refalrts::reinit_close_call(context[28]);
          refalrts::reinit_char(context[9], ' ');
          refalrts::reinit_char(context[16], ' ');
          refalrts::reinit_char(context[18], ' ');
          refalrts::reinit_char(context[45], ' ');
          refalrts::reinit_char(context[49], ' ');
          refalrts::reinit_char(context[51], ' ');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[50] );
          refalrts::push_stack( vm, context[96] );
          refalrts::push_stack( vm, context[93] );
          refalrts::link_brackets( context[44], context[92] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[80] );
          refalrts::link_brackets( context[27], context[29] );
          refalrts::link_brackets( context[85], context[17] );
          refalrts::link_brackets( context[82], context[84] );
          refalrts::link_brackets( context[68], context[79] );
          refalrts::push_stack( vm, context[78] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[77] );
          refalrts::push_stack( vm, context[75] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[45];
          res = refalrts::splice_evar( res, context[8], context[18] );
          res = refalrts::splice_elem( res, context[96] );
          res = refalrts::splice_elem( res, context[5] );
          res = refalrts::splice_evar( res, context[93], context[95] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[90], context[92] );
          res = refalrts::splice_evar( res, context[88], context[89] );
          res = refalrts::splice_evar( res, context[17], context[44] );
          res = refalrts::splice_evar( res, context[86], context[87] );
          res = refalrts::splice_evar( res, context[77], context[85] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_evar( res, context[75], context[76] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[68], context[74] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/36 )/9 (/16 # Result/18 )/17 (/27 # NextSentence/29 )/28 e.Segments/38 >/1
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[34];
        context[39] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_Result], context[18] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_NextSentence], context[29] ) )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        // closed e.Indent as range 36
        // closed e.Segments as range 38
        //DEBUG: s.Level: 5
        //DEBUG: e.Indent: 36
        //DEBUG: e.Segments: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/40 e.Indent/36/41 ' '/43 Tile{ HalfReuse: ' '/28 }"= /*empty*"/44 Tile{ HalfReuse: '/'/16 HalfReuse: ';'/18 AsIs: )/17 AsIs: (/27 HalfReuse: )/29 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/36 AsIs: )/9 } Tile{ AsIs: e.Segments/38 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::copy_evar(vm, context[41], context[42], context[36], context[37]);
        refalrts::alloc_char(vm, context[43], ' ');
        refalrts::alloc_chars(vm, context[44], context[45], "= /*empty*", 10);
        refalrts::reinit_char(context[28], ' ');
        refalrts::reinit_char(context[16], '/');
        refalrts::reinit_char(context[18], ';');
        refalrts::reinit_close_bracket(context[29]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::link_brackets( context[27], context[29] );
        refalrts::link_brackets( context[40], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[16], context[29] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[40], context[43] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/30 )/9 (/16 # Result/18 e.Result/32 )/17 (/27 # NextSentence/29 )/28 e.Segments/34 >/1
      context[30] = context[19];
      context[31] = context[20];
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_Result], context[18] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_NextSentence], context[29] ) )
        continue;
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      // closed e.Indent as range 30
      // closed e.Result as range 32
      // closed e.Segments as range 34
      //DEBUG: s.Level: 5
      //DEBUG: e.Indent: 30
      //DEBUG: e.Result: 32
      //DEBUG: e.Segments: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoFormatExpr@3/37 (/38 60/39 )/40 Tile{ AsIs: (/8 AsIs: e.Indent/30 AsIs: )/9 AsIs: (/16 HalfReuse: )/18 AsIs: e.Result/32 HalfReuse: ';'/17 HalfReuse: >/27 HalfReuse: (/29 AsIs: )/28 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 } (/41 e.Indent/30/42 )/44 Tile{ AsIs: e.Segments/34 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_gen_DoFormatExpr_Z3]);
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_number(vm, context[39], 60UL);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::copy_evar(vm, context[42], context[43], context[30], context[31]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::reinit_char(context[17], ';');
      refalrts::reinit_close_call(context[27]);
      refalrts::reinit_open_bracket(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[41], context[44] );
      refalrts::link_brackets( context[29], context[28] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[16], context[18] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[38], context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[41], context[44] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[8], context[28] );
      res = refalrts::splice_evar( res, context[36], context[40] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoCollectSegments/4 s.new9/5 (/8 e.new13/19 ' '/26 ' '/25 )/9 (/16 s.new11/18 e.new12/21 )/17 e.new10/23 >/1
      context[19] = context[10];
      context[20] = context[11];
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[12];
      context[24] = context[13];
      context[25] = refalrts::char_right( ' ', context[19], context[20] );
      if( ! context[25] )
        continue;
      context[26] = refalrts::char_right( ' ', context[19], context[20] );
      if( ! context[26] )
        continue;
      // closed e.new13 as range 19
      // closed e.new12 as range 21
      // closed e.new10 as range 23
      do {
        // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/27 ' '/36 ' '/35 ' '/34 ' '/33 ' '/26 ' '/25 )/9 (/16 # Pattern/18 s.PatternLevel/37 e.Pattern/29 )/17 e.Segments/31 >/1
        context[27] = context[19];
        context[28] = context[20];
        context[29] = context[21];
        context[30] = context[22];
        context[31] = context[23];
        context[32] = context[24];
        if( ! refalrts::ident_term( identifiers[ident_Pattern], context[18] ) )
          continue;
        context[33] = refalrts::char_right( ' ', context[27], context[28] );
        if( ! context[33] )
          continue;
        context[34] = refalrts::char_right( ' ', context[27], context[28] );
        if( ! context[34] )
          continue;
        context[35] = refalrts::char_right( ' ', context[27], context[28] );
        if( ! context[35] )
          continue;
        context[36] = refalrts::char_right( ' ', context[27], context[28] );
        if( ! context[36] )
          continue;
        // closed e.Indent as range 27
        // closed e.Segments as range 31
        if( ! refalrts::svar_left( context[37], context[29], context[30] ) )
          continue;
        // closed e.Pattern as range 29
        //DEBUG: s.Level: 5
        //DEBUG: e.Indent: 27
        //DEBUG: e.Segments: 31
        //DEBUG: s.PatternLevel: 37
        //DEBUG: e.Pattern: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.Indent/27 AsIs: ' '/36 AsIs: ' '/35 AsIs: ' '/34 AsIs: ' '/33 Reuse: '}'/26 Reuse: ';'/25 AsIs: )/9 AsIs: (/16 HalfReuse: )/18 } </38 & DoCollectSegments/39 Tile{ AsIs: </0 Reuse: & Sub/4 AsIs: s.Level/5 } 1/40 >/41 (/42 e.Indent/27/43 )/45 (/46 # Pattern/47 Tile{ AsIs: s.PatternLevel/37 AsIs: e.Pattern/29 AsIs: )/17 AsIs: e.Segments/31 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_DoCollectSegments]);
        refalrts::alloc_number(vm, context[40], 1UL);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::alloc_open_bracket(vm, context[42]);
        refalrts::copy_evar(vm, context[43], context[44], context[27], context[28]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_open_bracket(vm, context[46]);
        refalrts::alloc_ident(vm, context[47], identifiers[ident_Pattern]);
        refalrts::update_char(context[26], '}');
        refalrts::update_char(context[25], ';');
        refalrts::reinit_close_bracket(context[18]);
        refalrts::update_name(context[4], functions[efunc_Sub]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[46], context[17] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[18] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[37];
        res = refalrts::splice_evar( res, context[40], context[47] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[8], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoCollectSegments/4 s.new14/5 (/8 e.new15/27 ' '/26 ' '/25 )/9 (/16 # EndOfFunction/18 )/17 >/1
      context[27] = context[19];
      context[28] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_EndOfFunction], context[18] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.new15 as range 27
      do {
        // </0 & DoCollectSegments/4 0/5 (/8 ' '/26 ' '/25 )/9 (/16 # EndOfFunction/18 )/17 >/1
        if( ! refalrts::number_term( 0UL, context[5] ) )
          continue;
        if( ! refalrts::empty_seq( context[27], context[28] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & DoCollectSegments/4 0/5 (/8 ' '/26 ' '/25 )/9 (/16 # EndOfFunction/18 )/17 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ ]] }
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/29 ' '/34 ' '/33 ' '/32 ' '/31 ' '/26 ' '/25 )/9 (/16 # EndOfFunction/18 )/17 >/1
      context[29] = context[27];
      context[30] = context[28];
      context[31] = refalrts::char_right( ' ', context[29], context[30] );
      if( ! context[31] )
        continue;
      context[32] = refalrts::char_right( ' ', context[29], context[30] );
      if( ! context[32] )
        continue;
      context[33] = refalrts::char_right( ' ', context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = refalrts::char_right( ' ', context[29], context[30] );
      if( ! context[34] )
        continue;
      // closed e.Indent as range 29
      //DEBUG: s.Level: 5
      //DEBUG: e.Indent: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.Indent/29 AsIs: ' '/34 AsIs: ' '/33 AsIs: ' '/32 AsIs: ' '/31 Reuse: '}'/26 Reuse: ';'/25 AsIs: )/9 HalfReuse: </16 HalfReuse: & DoCollectSegments/18 HalfReuse: </17 HalfReuse: & Sub/1 } Tile{ AsIs: s.Level/5 } Tile{ HalfReuse: 1/0 HalfReuse: >/4 } (/35 e.Indent/29/36 )/38 (/39 # EndOfFunction/40 )/41 >/42 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::copy_evar(vm, context[36], context[37], context[29], context[30]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_ident(vm, context[40], identifiers[ident_EndOfFunction]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::update_char(context[26], '}');
      refalrts::update_char(context[25], ';');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[18], functions[efunc_DoCollectSegments]);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[1], functions[efunc_Sub]);
      refalrts::reinit_number(context[0], 1UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[39], context[41] );
      refalrts::link_brackets( context[35], context[38] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[35], context[42] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/19 )/9 (/16 # NextSentence/18 )/17 e.Segments/21 >/1
    context[19] = context[10];
    context[20] = context[11];
    context[21] = context[12];
    context[22] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_NextSentence], context[18] ) )
      continue;
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    // closed e.Indent as range 19
    // closed e.Segments as range 21
    //DEBUG: s.Level: 5
    //DEBUG: e.Indent: 19
    //DEBUG: e.Segments: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/23"* unexpected OUTEST comma"/24 Tile{ HalfReuse: 'n'/16 HalfReuse: 'd'/18 AsIs: )/17 } Tile{ AsIs: </0 AsIs: & DoCollectSegments/4 AsIs: s.Level/5 AsIs: (/8 AsIs: e.Indent/19 AsIs: )/9 } Tile{ AsIs: e.Segments/21 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "* unexpected OUTEST comma", 25);
    refalrts::reinit_char(context[16], 'n');
    refalrts::reinit_char(context[18], 'd');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[23], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCollectSegments/4 s.Level/5 (/8 e.Indent/6 )/9 e.Segments/2 >/1
  // closed e.Indent as range 6
  // closed e.Segments as range 2
  //DEBUG: s.Level: 5
  //DEBUG: e.Indent: 6
  //DEBUG: e.Segments: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Level/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '*'/4 }" WT"/10 Tile{ HalfReuse: 'F'/1 }"!!!!"/12 )/14 (/15 Tile{ HalfReuse: '\"'/8 AsIs: e.Indent/6 HalfReuse: '\"'/9 } )/16 Tile{ AsIs: e.Segments/2 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[10], context[11], " WT", 3);
  refalrts::alloc_chars(vm, context[12], context[13], "!!!!", 4);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_char(context[4], '*');
  refalrts::reinit_char(context[1], 'F');
  refalrts::reinit_char(context[8], '\"');
  refalrts::reinit_char(context[9], '\"');
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[0], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoCollectSegments("DoCollectSegments", COOKIE1_, COOKIE2_, func_DoCollectSegments);


static refalrts::FnResult func_FormatExpr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & FormatExpr/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FormatExpr/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & FormatExpr/4 (/7 e.Prefix/13 )/8 (/11 e.Indent/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Prefix as range 13
    // closed e.Indent as range 15
    //DEBUG: e.Prefix: 13
    //DEBUG: e.Indent: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Indent/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Prefix/13 HalfReuse: '/'/8 HalfReuse: '*'/11 } Tile{ HalfReuse: 'e'/0 HalfReuse: 'm'/4 }"pty*"/17 Tile{ HalfReuse: '/'/12 HalfReuse: )/1 ]] }
    refalrts::alloc_chars(vm, context[17], context[18], "pty*", 4);
    refalrts::reinit_char(context[8], '/');
    refalrts::reinit_char(context[11], '*');
    refalrts::reinit_char(context[0], 'e');
    refalrts::reinit_char(context[4], 'm');
    refalrts::reinit_char(context[12], '/');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FormatExpr/4 (/7 e.Prefix/13 )/8 (/11 e.Indent/15 )/12 ';'/19 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = refalrts::char_left( ';', context[17], context[18] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.Prefix as range 13
    // closed e.Indent as range 15
    //DEBUG: e.Prefix: 13
    //DEBUG: e.Indent: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Indent/15 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Prefix/13 HalfReuse: '/'/8 HalfReuse: '*'/11 } Tile{ HalfReuse: 'e'/0 HalfReuse: 'm'/4 }"pty*"/20 Tile{ HalfReuse: '/'/12 AsIs: ';'/19 HalfReuse: )/1 ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "pty*", 4);
    refalrts::reinit_char(context[8], '/');
    refalrts::reinit_char(context[11], '*');
    refalrts::reinit_char(context[0], 'e');
    refalrts::reinit_char(context[4], 'm');
    refalrts::reinit_char(context[12], '/');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FormatExpr/4 (/7 e.Prefix/5 )/8 (/11 e.Indent/9 )/12 e.Expr/2 >/1
  // closed e.Prefix as range 5
  // closed e.Indent as range 9
  // closed e.Expr as range 2
  //DEBUG: e.Prefix: 5
  //DEBUG: e.Indent: 9
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoFormatExpr/14 (/15 Tile{ HalfReuse: 60/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Prefix/5 AsIs: )/8 AsIs: (/11 AsIs: e.Indent/9 AsIs: )/12 } (/16 )/17 Tile{ AsIs: e.Expr/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_DoFormatExpr]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::reinit_number(context[0], 60UL);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[15], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[0], context[12] );
  res = refalrts::splice_evar( res, context[13], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FormatExpr("FormatExpr", COOKIE1_, COOKIE2_, func_FormatExpr);


static refalrts::FnResult func_LIMIT(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & LIMIT/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & LIMIT/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 60/1 ]] }
  refalrts::reinit_number(context[1], 60UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_LIMIT("LIMIT", COOKIE1_, COOKIE2_, func_LIMIT);


static refalrts::FnResult func_gen_DoFormatExpr_S6A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoFormatExpr$6=1/4 s.Limit/5 (/8 e.Prefix/6 )/9 (/12 e.Indent/10 )/13 (/16 e.Result/14 )/17 (/20 e.Tail/18 )/21 s.Len/22 e.WordRep/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Prefix as range 6
  // closed e.Indent as range 10
  // closed e.Result as range 14
  // closed e.Tail as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.WordRep as range 2
  //DEBUG: s.Limit: 5
  //DEBUG: e.Prefix: 6
  //DEBUG: e.Indent: 10
  //DEBUG: e.Result: 14
  //DEBUG: e.Tail: 18
  //DEBUG: s.Len: 22
  //DEBUG: e.WordRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/20 } </23 & Sub/24 Tile{ HalfReuse: s.Limit5 /21 AsIs: s.Len/22 } >/25 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result/14 } Tile{ AsIs: e.WordRep/2 } )/26 Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[21], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_elem( res, context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S6A1("DoFormatExpr$6=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S6A1);


static refalrts::FnResult func_gen_DoFormatExpr_S7A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoFormatExpr$7=1/4 s.Limit/5 (/8 e.Prefix/6 )/9 (/12 e.Indent/10 )/13 (/16 e.Result/14 )/17 (/20 e.Tail/18 )/21 s.Len/22 e.NumberRep/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Prefix as range 6
  // closed e.Indent as range 10
  // closed e.Result as range 14
  // closed e.Tail as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NumberRep as range 2
  //DEBUG: s.Limit: 5
  //DEBUG: e.Prefix: 6
  //DEBUG: e.Indent: 10
  //DEBUG: e.Result: 14
  //DEBUG: e.Tail: 18
  //DEBUG: s.Len: 22
  //DEBUG: e.NumberRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/20 } </23 & Sub/24 Tile{ HalfReuse: s.Limit5 /21 AsIs: s.Len/22 } >/25 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result/14 } Tile{ AsIs: e.NumberRep/2 } )/26 Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[21], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_elem( res, context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S7A1("DoFormatExpr$7=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S7A1);


static refalrts::FnResult func_gen_DoFormatExpr_S9A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoFormatExpr$9=1/4 s.Limit/5 (/8 e.Prefix/6 )/9 (/12 e.Indent/10 )/13 (/16 e.Result/14 )/17 (/20 e.Chars/18 )/21 (/24 e.Tail/22 )/25 s.Len/26 e.CharRep/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Prefix as range 6
  // closed e.Indent as range 10
  // closed e.Result as range 14
  // closed e.Chars as range 18
  // closed e.Tail as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.CharRep as range 2
  //DEBUG: s.Limit: 5
  //DEBUG: e.Prefix: 6
  //DEBUG: e.Indent: 10
  //DEBUG: e.Result: 14
  //DEBUG: e.Chars: 18
  //DEBUG: e.Tail: 22
  //DEBUG: s.Len: 26
  //DEBUG: e.CharRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/24 } </27 & Sub/28 Tile{ HalfReuse: s.Limit5 /25 AsIs: s.Len/26 } >/29 )/30 Tile{ AsIs: (/8 AsIs: e.Prefix/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result/14 } Tile{ AsIs: e.CharRep/2 } '\''/31 )/32 Tile{ HalfReuse: (/17 HalfReuse: # C/20 AsIs: e.Chars/18 AsIs: )/21 } Tile{ AsIs: e.Tail/22 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_char(vm, context[31], '\'');
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[25], context[5] );
  refalrts::reinit_open_bracket(context[17]);
  refalrts::reinit_ident(context[20], identifiers[ident_C]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[21] );
  refalrts::link_brackets( context[16], context[32] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[24], context[30] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[17], context[21] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_elem( res, context[24] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S9A1("DoFormatExpr$9=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S9A1);


static refalrts::FnResult func_gen_DoFormatExpr_S10A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & DoFormatExpr$10=1/4 s.Limit/5 (/8 e.Prefix/6 )/9 (/12 e.Indent/10 )/13 (/16 e.Result/14 )/17 (/20 e.Chars/18 )/21 (/24 e.Tail/22 )/25 s.Len/26 e.CharRep/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Prefix as range 6
  // closed e.Indent as range 10
  // closed e.Result as range 14
  // closed e.Chars as range 18
  // closed e.Tail as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.CharRep as range 2
  //DEBUG: s.Limit: 5
  //DEBUG: e.Prefix: 6
  //DEBUG: e.Indent: 10
  //DEBUG: e.Result: 14
  //DEBUG: e.Chars: 18
  //DEBUG: e.Tail: 22
  //DEBUG: s.Len: 26
  //DEBUG: e.CharRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/24 } </27 & Sub/28 Tile{ HalfReuse: s.Limit5 /25 AsIs: s.Len/26 } >/29 )/30 Tile{ AsIs: (/8 AsIs: e.Prefix/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result/14 } Tile{ AsIs: e.CharRep/2 } )/31 Tile{ HalfReuse: (/17 HalfReuse: # C/20 AsIs: e.Chars/18 AsIs: )/21 } Tile{ AsIs: e.Tail/22 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[25], context[5] );
  refalrts::reinit_open_bracket(context[17]);
  refalrts::reinit_ident(context[20], identifiers[ident_C]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[21] );
  refalrts::link_brackets( context[16], context[31] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[24], context[30] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[17], context[21] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_elem( res, context[24] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S10A1("DoFormatExpr$10=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S10A1);


static refalrts::FnResult func_gen_DoFormatExpr_S12A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoFormatExpr$12=1/4 s.Limit/5 (/8 e.Prefix/6 )/9 (/12 e.Indent/10 )/13 (/16 e.Result/14 )/17 (/20 e.Tail/18 )/21 s.Len/22 e.VarRep/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Prefix as range 6
  // closed e.Indent as range 10
  // closed e.Result as range 14
  // closed e.Tail as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.VarRep as range 2
  //DEBUG: s.Limit: 5
  //DEBUG: e.Prefix: 6
  //DEBUG: e.Indent: 10
  //DEBUG: e.Result: 14
  //DEBUG: e.Tail: 18
  //DEBUG: s.Len: 22
  //DEBUG: e.VarRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/20 } </23 & Sub/24 Tile{ HalfReuse: s.Limit5 /21 AsIs: s.Len/22 } >/25 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result/14 } Tile{ AsIs: e.VarRep/2 } )/26 Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[21], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_elem( res, context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S12A1("DoFormatExpr$12=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S12A1);


static refalrts::FnResult func_gen_DoFormatExpr_S13A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoFormatExpr$13=1/4 s.Limit/5 (/8 e.Prefix/6 )/9 (/12 e.Indent/10 )/13 (/16 e.Result/14 )/17 (/20 e.Tail/18 )/21 s.Len/22 e.VarRep/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Prefix as range 6
  // closed e.Indent as range 10
  // closed e.Result as range 14
  // closed e.Tail as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.VarRep as range 2
  //DEBUG: s.Limit: 5
  //DEBUG: e.Prefix: 6
  //DEBUG: e.Indent: 10
  //DEBUG: e.Result: 14
  //DEBUG: e.Tail: 18
  //DEBUG: s.Len: 22
  //DEBUG: e.VarRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/20 } </23 & Sub/24 Tile{ HalfReuse: s.Limit5 /21 AsIs: s.Len/22 } >/25 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result/14 } Tile{ AsIs: e.VarRep/2 } )/26 Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[21], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_elem( res, context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S13A1("DoFormatExpr$13=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S13A1);


static refalrts::FnResult func_gen_DoFormatExpr_S14A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoFormatExpr$14=1/4 s.Limit/5 (/8 e.Prefix/6 )/9 (/12 e.Indent/10 )/13 (/16 e.Result/14 )/17 (/20 e.Tail/18 )/21 s.Len/22 e.VarRep/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Prefix as range 6
  // closed e.Indent as range 10
  // closed e.Result as range 14
  // closed e.Tail as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.VarRep as range 2
  //DEBUG: s.Limit: 5
  //DEBUG: e.Prefix: 6
  //DEBUG: e.Indent: 10
  //DEBUG: e.Result: 14
  //DEBUG: e.Tail: 18
  //DEBUG: s.Len: 22
  //DEBUG: e.VarRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } Tile{ AsIs: (/20 } </23 & Sub/24 Tile{ HalfReuse: s.Limit5 /21 AsIs: s.Len/22 } >/25 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result/14 } Tile{ AsIs: e.VarRep/2 } )/26 Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[21], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[20], context[17] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_elem( res, context[20] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S14A1("DoFormatExpr$14=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S14A1);


static refalrts::FnResult func_gen_DoFormatExpr_S19A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & DoFormatExpr$19=1/4 s.Limit/5 (/8 e.Prefix/6 )/9 (/12 e.Indent/10 )/13 (/16 e.Result/14 )/17 (/20 e.Inner/18 )/21 (/24 e.Tail/22 )/25 s.Len/26 e.CallRep/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Prefix as range 6
  // closed e.Indent as range 10
  // closed e.Result as range 14
  // closed e.Inner as range 18
  // closed e.Tail as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.CallRep as range 2
  //DEBUG: s.Limit: 5
  //DEBUG: e.Prefix: 6
  //DEBUG: e.Indent: 10
  //DEBUG: e.Result: 14
  //DEBUG: e.Inner: 18
  //DEBUG: e.Tail: 22
  //DEBUG: s.Len: 26
  //DEBUG: e.CallRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Limit/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr/4 } (/27 </28 & Sub/29 Tile{ HalfReuse: s.Limit5 /25 AsIs: s.Len/26 } >/30 Tile{ AsIs: )/17 } Tile{ AsIs: (/8 AsIs: e.Prefix/6 AsIs: )/9 AsIs: (/12 AsIs: e.Indent/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Result/14 } Tile{ AsIs: e.CallRep/2 } Tile{ HalfReuse: )/20 AsIs: e.Inner/18 HalfReuse: (/21 HalfReuse: # RK/24 } )/31 Tile{ AsIs: e.Tail/22 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Sub]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_DoFormatExpr]);
  refalrts::reinit_svar( context[25], context[5] );
  refalrts::reinit_close_bracket(context[20]);
  refalrts::reinit_open_bracket(context[21]);
  refalrts::reinit_ident(context[24], identifiers[ident_RK]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[31] );
  refalrts::link_brackets( context[16], context[20] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[27], context[17] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[20], context[24] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[27], context[29] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S19A1("DoFormatExpr$19=1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S19A1);


static refalrts::FnResult func_DoFormatExpr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 78 elems
  refalrts::Iter context[78];
  refalrts::zeros( context, 78 );
  // </0 & DoFormatExpr/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr/4 (/7 e.new6/21 )/8 (/11 e.new7/23 )/12 (/15 e.new8/25 )/16 (/19 e.new9/27 )/20 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.new6 as range 21
    // closed e.new7 as range 23
    // closed e.new8 as range 25
    // closed e.new9 as range 27
    do {
      // </0 & DoFormatExpr/4 (/7 e.Limit/29 )/8 (/11 e.Prefix/31 )/12 (/15 e.Indent/33 )/16 (/19 e.Result/35 ' '/37 )/20 >/1
      context[29] = context[21];
      context[30] = context[22];
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = context[27];
      context[36] = context[28];
      context[37] = refalrts::char_right( ' ', context[35], context[36] );
      if( ! context[37] )
        continue;
      // closed e.Limit as range 29
      // closed e.Prefix as range 31
      // closed e.Indent as range 33
      // closed e.Result as range 35
      //DEBUG: e.Limit: 29
      //DEBUG: e.Prefix: 31
      //DEBUG: e.Indent: 33
      //DEBUG: e.Result: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoFormatExpr/4 (/7 e.Limit/29 )/8 (/11 {REMOVED TILE} )/12 (/15 e.Indent/33 )/16 (/19 {REMOVED TILE} ' '/37 )/20 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Prefix/31 } Tile{ AsIs: e.Result/35 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 e.Limit/29 )/8 (/11 e.Prefix/31 )/12 (/15 e.Indent/33 )/16 (/19 e.Result/35 )/20 >/1
    context[29] = context[21];
    context[30] = context[22];
    context[31] = context[23];
    context[32] = context[24];
    context[33] = context[25];
    context[34] = context[26];
    context[35] = context[27];
    context[36] = context[28];
    // closed e.Limit as range 29
    // closed e.Prefix as range 31
    // closed e.Indent as range 33
    // closed e.Result as range 35
    //DEBUG: e.Limit: 29
    //DEBUG: e.Prefix: 31
    //DEBUG: e.Indent: 33
    //DEBUG: e.Result: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoFormatExpr/4 (/7 e.Limit/29 )/8 (/11 {REMOVED TILE} )/12 (/15 e.Indent/33 )/16 (/19 {REMOVED TILE} )/20 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Prefix/31 } Tile{ AsIs: e.Result/35 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 e.new6/21 )/8 (/11 e.new7/23 )/12 (/15 e.new8/25 )/16 (/19 e.new9/27 )/20 ';'/31 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    context[31] = refalrts::char_left( ';', context[29], context[30] );
    if( ! context[31] )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    // closed e.new6 as range 21
    // closed e.new7 as range 23
    // closed e.new8 as range 25
    // closed e.new9 as range 27
    do {
      // </0 & DoFormatExpr/4 (/7 e.Limit/32 )/8 (/11 e.Prefix/34 )/12 (/15 e.Indent/36 )/16 (/19 e.Result/38 ' '/40 )/20 ';'/31 >/1
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = refalrts::char_right( ' ', context[38], context[39] );
      if( ! context[40] )
        continue;
      // closed e.Limit as range 32
      // closed e.Prefix as range 34
      // closed e.Indent as range 36
      // closed e.Result as range 38
      //DEBUG: e.Limit: 32
      //DEBUG: e.Prefix: 34
      //DEBUG: e.Indent: 36
      //DEBUG: e.Result: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoFormatExpr/4 (/7 e.Limit/32 )/8 (/11 {REMOVED TILE} )/12 (/15 e.Indent/36 )/16 (/19 {REMOVED TILE} ' '/40 )/20 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Prefix/34 } Tile{ AsIs: e.Result/38 } Tile{ AsIs: ';'/31 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 e.Limit/32 )/8 (/11 e.Prefix/34 )/12 (/15 e.Indent/36 )/16 (/19 e.Result/38 )/20 ';'/31 >/1
    context[32] = context[21];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[24];
    context[36] = context[25];
    context[37] = context[26];
    context[38] = context[27];
    context[39] = context[28];
    // closed e.Limit as range 32
    // closed e.Prefix as range 34
    // closed e.Indent as range 36
    // closed e.Result as range 38
    //DEBUG: e.Limit: 32
    //DEBUG: e.Prefix: 34
    //DEBUG: e.Indent: 36
    //DEBUG: e.Result: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoFormatExpr/4 (/7 e.Limit/32 )/8 (/11 {REMOVED TILE} )/12 (/15 e.Indent/36 )/16 (/19 {REMOVED TILE} )/20 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Prefix/34 } Tile{ AsIs: e.Result/38 } Tile{ AsIs: ';'/31 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[31];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr/4 (/7 e.new7/5 s.new8/21 )/8 (/11 e.new9/9 )/12 (/15 e.new10/13 )/16 (/19 e.new11/17 )/20 e.new6/2 >/1
  // closed e.new9 as range 9
  // closed e.new10 as range 13
  // closed e.new11 as range 17
  // closed e.new6 as range 2
  if( ! refalrts::svar_right( context[21], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 5
  do {
    // </0 & DoFormatExpr/4 (/7 '-'/32 s.Limit/21 )/8 (/11 e.Prefix/24 )/12 (/15 e.Indent/26 )/16 (/19 e.Result/28 )/20 e.Tail/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[13];
    context[27] = context[14];
    context[28] = context[17];
    context[29] = context[18];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = refalrts::char_left( '-', context[22], context[23] );
    if( ! context[32] )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    // closed e.Prefix as range 24
    // closed e.Indent as range 26
    // closed e.Result as range 28
    // closed e.Tail as range 30
    //DEBUG: s.Limit: 21
    //DEBUG: e.Prefix: 24
    //DEBUG: e.Indent: 26
    //DEBUG: e.Result: 28
    //DEBUG: e.Tail: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/33 Tile{ AsIs: e.Prefix/24 } Tile{ AsIs: e.Result/28 } )/34 Tile{ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 HalfReuse: 60/32 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Indent/26 AsIs: )/16 AsIs: (/19 } e.Indent/26/35 Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: )/20 AsIs: e.Tail/30 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::copy_evar(vm, context[35], context[36], context[26], context[27]);
    refalrts::reinit_number(context[32], 60UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::link_brackets( context[19], context[8] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_evar( res, context[0], context[32] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[33] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr/4 (/7 s.new15/21 )/8 (/11 e.new16/9 )/12 (/15 e.new17/13 )/16 (/19 e.new18/17 )/20 (/24 s.new12/26 e.new13/22 )/25 e.new14/2 >/1
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new16 as range 9
  // closed e.new17 as range 13
  // closed e.new18 as range 17
  // closed e.new14 as range 2
  if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new13 as range 22
  do {
    // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/27 )/12 (/15 e.Indent/29 )/16 (/19 e.Result/31 )/20 (/24 # W/26 e.Word/33 )/25 e.Tail/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_W], context[26] ) )
      continue;
    // closed e.Prefix as range 27
    // closed e.Indent as range 29
    // closed e.Result as range 31
    // closed e.Word as range 33
    // closed e.Tail as range 35
    //DEBUG: s.Limit: 21
    //DEBUG: e.Prefix: 27
    //DEBUG: e.Indent: 29
    //DEBUG: e.Result: 31
    //DEBUG: e.Word: 33
    //DEBUG: e.Tail: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$6=1/4 } Tile{ HalfReuse: s.Limit21 /8 AsIs: (/11 AsIs: e.Prefix/27 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/29 AsIs: )/16 AsIs: (/19 AsIs: e.Result/31 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Tail/35 } Tile{ HalfReuse: )/7 } </37 & Lenw/38 </39 & FormatWord:1/40 </41 Tile{ HalfReuse: & Type/26 AsIs: e.Word/33 HalfReuse: >/25 } >/42 ' '/43 >/44 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_Lenw]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_FormatWord_B1]);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_char(vm, context[43], ' ');
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S6A1]);
    refalrts::reinit_svar( context[8], context[21] );
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_name(context[26], functions[efunc_Type]);
    refalrts::reinit_close_call(context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[41] );
    refalrts::link_brackets( context[24], context[7] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[44] );
    res = refalrts::splice_evar( res, context[26], context[25] );
    res = refalrts::splice_evar( res, context[37], context[41] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[8], context[24] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/27 )/12 (/15 e.Indent/29 )/16 (/19 e.Result/31 )/20 (/24 # N/26 s.Number/37 )/25 e.Tail/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_N], context[26] ) )
      continue;
    // closed e.Prefix as range 27
    // closed e.Indent as range 29
    // closed e.Result as range 31
    // closed e.Tail as range 35
    if( ! refalrts::svar_left( context[37], context[33], context[34] ) )
      continue;
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    //DEBUG: s.Limit: 21
    //DEBUG: e.Prefix: 27
    //DEBUG: e.Indent: 29
    //DEBUG: e.Result: 31
    //DEBUG: e.Tail: 35
    //DEBUG: s.Number: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$7=1/4 } Tile{ HalfReuse: s.Limit21 /8 AsIs: (/11 AsIs: e.Prefix/27 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/29 AsIs: )/16 AsIs: (/19 AsIs: e.Result/31 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Tail/35 } Tile{ HalfReuse: )/7 } </38 & Lenw/39 </40 Tile{ HalfReuse: & Symb/26 AsIs: s.Number/37 HalfReuse: >/25 } ' '/41 >/42 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Lenw]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_char(vm, context[41], ' ');
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S7A1]);
    refalrts::reinit_svar( context[8], context[21] );
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_name(context[26], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[40] );
    refalrts::link_brackets( context[24], context[7] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[26], context[25] );
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[8], context[24] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.new21/21 )/8 (/11 e.new22/27 )/12 (/15 e.new23/29 )/16 (/19 e.new24/31 )/20 (/24 # C/26 e.new20/33 )/25 e.new19/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_C], context[26] ) )
      continue;
    // closed e.new22 as range 27
    // closed e.new23 as range 29
    // closed e.new24 as range 31
    // closed e.new20 as range 33
    // closed e.new19 as range 35
    do {
      // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/37 )/12 (/15 e.Indent/39 )/16 (/19 e.Result/41 )/20 (/24 # C/26 e.Chars1/43 )/25 (/49 # C/51 e.Chars2/47 )/50 e.Tail/45 >/1
      context[37] = context[27];
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[45], context[46] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = refalrts::ident_left( identifiers[ident_C], context[47], context[48] );
      if( ! context[51] )
        continue;
      // closed e.Prefix as range 37
      // closed e.Indent as range 39
      // closed e.Result as range 41
      // closed e.Chars1 as range 43
      // closed e.Chars2 as range 47
      // closed e.Tail as range 45
      //DEBUG: s.Limit: 21
      //DEBUG: e.Prefix: 37
      //DEBUG: e.Indent: 39
      //DEBUG: e.Result: 41
      //DEBUG: e.Chars1: 43
      //DEBUG: e.Chars2: 47
      //DEBUG: e.Tail: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} )/25 (/49 # C/51 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 AsIs: s.Limit/21 AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/37 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/39 AsIs: )/16 AsIs: (/19 AsIs: e.Result/41 AsIs: )/20 AsIs: (/24 AsIs: # C/26 } Tile{ AsIs: e.Chars1/43 } Tile{ AsIs: e.Chars2/47 } Tile{ AsIs: )/50 AsIs: e.Tail/45 AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[50] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[50];
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      refalrts::splice_to_freelist_open( vm, context[26], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr/4 (/7 s.new28/21 )/8 (/11 e.new29/37 )/12 (/15 e.new30/39 )/16 (/19 e.new31/41 )/20 (/24 # C/26 s.new26/47 e.new27/43 )/25 e.new25/45 >/1
      context[37] = context[27];
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      // closed e.new29 as range 37
      // closed e.new30 as range 39
      // closed e.new31 as range 41
      // closed e.new25 as range 45
      if( ! refalrts::svar_left( context[47], context[43], context[44] ) )
        continue;
      // closed e.new27 as range 43
      do {
        // </0 & DoFormatExpr/4 (/7 s.new35/21 )/8 (/11 e.new36/48 )/12 (/15 e.new37/50 )/16 (/19 e.new38/52 '\''/58 )/20 (/24 # C/26 s.new33/47 e.new34/54 )/25 e.new32/56 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = refalrts::char_right( '\'', context[52], context[53] );
        if( ! context[58] )
          continue;
        // closed e.new36 as range 48
        // closed e.new37 as range 50
        // closed e.new38 as range 52
        // closed e.new34 as range 54
        // closed e.new32 as range 56
        do {
          // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/59 )/12 (/15 e.Indent/61 )/16 (/19 e.Result/63 '\''/58 )/20 (/24 # C/26 '\\'/47 e.Chars/65 )/25 e.Tail/67 >/1
          context[59] = context[48];
          context[60] = context[49];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[52];
          context[64] = context[53];
          context[65] = context[54];
          context[66] = context[55];
          context[67] = context[56];
          context[68] = context[57];
          if( ! refalrts::char_term( '\\', context[47] ) )
            continue;
          // closed e.Prefix as range 59
          // closed e.Indent as range 61
          // closed e.Result as range 63
          // closed e.Chars as range 65
          // closed e.Tail as range 67
          //DEBUG: s.Limit: 21
          //DEBUG: e.Prefix: 59
          //DEBUG: e.Indent: 61
          //DEBUG: e.Result: 63
          //DEBUG: e.Chars: 65
          //DEBUG: e.Tail: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </69 & Sub/70 Tile{ AsIs: s.Limit/21 } 2/71 >/72 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/59 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/61 AsIs: )/16 AsIs: (/19 AsIs: e.Result/63 Reuse: '\\'/58 HalfReuse: '\\'/20 HalfReuse: '\''/24 HalfReuse: )/26 HalfReuse: (/47 } # C/73 Tile{ AsIs: e.Chars/65 } Tile{ AsIs: )/25 AsIs: e.Tail/67 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[69]);
          refalrts::alloc_name(vm, context[70], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[71], 2UL);
          refalrts::alloc_close_call(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_C]);
          refalrts::update_char(context[58], '\\');
          refalrts::reinit_char(context[20], '\\');
          refalrts::reinit_char(context[24], '\'');
          refalrts::reinit_close_bracket(context[26]);
          refalrts::reinit_open_bracket(context[47]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[47], context[25] );
          refalrts::link_brackets( context[19], context[26] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[69] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[25];
          res = refalrts::splice_evar( res, context[65], context[66] );
          res = refalrts::splice_elem( res, context[73] );
          res = refalrts::splice_evar( res, context[8], context[47] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/59 )/12 (/15 e.Indent/61 )/16 (/19 e.Result/63 '\''/58 )/20 (/24 # C/26 '\''/47 e.Chars/65 )/25 e.Tail/67 >/1
          context[59] = context[48];
          context[60] = context[49];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[52];
          context[64] = context[53];
          context[65] = context[54];
          context[66] = context[55];
          context[67] = context[56];
          context[68] = context[57];
          if( ! refalrts::char_term( '\'', context[47] ) )
            continue;
          // closed e.Prefix as range 59
          // closed e.Indent as range 61
          // closed e.Result as range 63
          // closed e.Chars as range 65
          // closed e.Tail as range 67
          //DEBUG: s.Limit: 21
          //DEBUG: e.Prefix: 59
          //DEBUG: e.Indent: 61
          //DEBUG: e.Result: 63
          //DEBUG: e.Chars: 65
          //DEBUG: e.Tail: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </69 & Sub/70 Tile{ AsIs: s.Limit/21 } 2/71 >/72 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/59 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/61 AsIs: )/16 AsIs: (/19 AsIs: e.Result/63 Reuse: '\\'/58 HalfReuse: '\''/20 HalfReuse: '\''/24 HalfReuse: )/26 HalfReuse: (/47 } # C/73 Tile{ AsIs: e.Chars/65 } Tile{ AsIs: )/25 AsIs: e.Tail/67 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[69]);
          refalrts::alloc_name(vm, context[70], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[71], 2UL);
          refalrts::alloc_close_call(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_C]);
          refalrts::update_char(context[58], '\\');
          refalrts::reinit_char(context[20], '\'');
          refalrts::reinit_char(context[24], '\'');
          refalrts::reinit_close_bracket(context[26]);
          refalrts::reinit_open_bracket(context[47]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[47], context[25] );
          refalrts::link_brackets( context[19], context[26] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[69] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[25];
          res = refalrts::splice_evar( res, context[65], context[66] );
          res = refalrts::splice_elem( res, context[73] );
          res = refalrts::splice_evar( res, context[8], context[47] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/59 )/12 (/15 e.Indent/61 )/16 (/19 e.Result/63 '\''/58 )/20 (/24 # C/26 '\"'/47 e.Chars/65 )/25 e.Tail/67 >/1
          context[59] = context[48];
          context[60] = context[49];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[52];
          context[64] = context[53];
          context[65] = context[54];
          context[66] = context[55];
          context[67] = context[56];
          context[68] = context[57];
          if( ! refalrts::char_term( '\"', context[47] ) )
            continue;
          // closed e.Prefix as range 59
          // closed e.Indent as range 61
          // closed e.Result as range 63
          // closed e.Chars as range 65
          // closed e.Tail as range 67
          //DEBUG: s.Limit: 21
          //DEBUG: e.Prefix: 59
          //DEBUG: e.Indent: 61
          //DEBUG: e.Result: 63
          //DEBUG: e.Chars: 65
          //DEBUG: e.Tail: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </69 & Sub/70 Tile{ AsIs: s.Limit/21 } 2/71 >/72 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/59 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/61 AsIs: )/16 AsIs: (/19 AsIs: e.Result/63 Reuse: '\\'/58 HalfReuse: '\"'/20 HalfReuse: '\''/24 HalfReuse: )/26 HalfReuse: (/47 } # C/73 Tile{ AsIs: e.Chars/65 } Tile{ AsIs: )/25 AsIs: e.Tail/67 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[69]);
          refalrts::alloc_name(vm, context[70], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[71], 2UL);
          refalrts::alloc_close_call(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_C]);
          refalrts::update_char(context[58], '\\');
          refalrts::reinit_char(context[20], '\"');
          refalrts::reinit_char(context[24], '\'');
          refalrts::reinit_close_bracket(context[26]);
          refalrts::reinit_open_bracket(context[47]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[47], context[25] );
          refalrts::link_brackets( context[19], context[26] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[69] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[25];
          res = refalrts::splice_evar( res, context[65], context[66] );
          res = refalrts::splice_elem( res, context[73] );
          res = refalrts::splice_evar( res, context[8], context[47] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/59 )/12 (/15 e.Indent/61 )/16 (/19 e.Result/63 '\''/58 )/20 (/24 # C/26 '\n'/47 e.Chars/65 )/25 e.Tail/67 >/1
          context[59] = context[48];
          context[60] = context[49];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[52];
          context[64] = context[53];
          context[65] = context[54];
          context[66] = context[55];
          context[67] = context[56];
          context[68] = context[57];
          if( ! refalrts::char_term( '\n', context[47] ) )
            continue;
          // closed e.Prefix as range 59
          // closed e.Indent as range 61
          // closed e.Result as range 63
          // closed e.Chars as range 65
          // closed e.Tail as range 67
          //DEBUG: s.Limit: 21
          //DEBUG: e.Prefix: 59
          //DEBUG: e.Indent: 61
          //DEBUG: e.Result: 63
          //DEBUG: e.Chars: 65
          //DEBUG: e.Tail: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </69 & Sub/70 Tile{ AsIs: s.Limit/21 } 2/71 >/72 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/59 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/61 AsIs: )/16 AsIs: (/19 AsIs: e.Result/63 Reuse: '\\'/58 HalfReuse: 'n'/20 HalfReuse: '\''/24 HalfReuse: )/26 HalfReuse: (/47 } # C/73 Tile{ AsIs: e.Chars/65 } Tile{ AsIs: )/25 AsIs: e.Tail/67 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[69]);
          refalrts::alloc_name(vm, context[70], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[71], 2UL);
          refalrts::alloc_close_call(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_C]);
          refalrts::update_char(context[58], '\\');
          refalrts::reinit_char(context[20], 'n');
          refalrts::reinit_char(context[24], '\'');
          refalrts::reinit_close_bracket(context[26]);
          refalrts::reinit_open_bracket(context[47]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[47], context[25] );
          refalrts::link_brackets( context[19], context[26] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[69] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[25];
          res = refalrts::splice_evar( res, context[65], context[66] );
          res = refalrts::splice_elem( res, context[73] );
          res = refalrts::splice_evar( res, context[8], context[47] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/59 )/12 (/15 e.Indent/61 )/16 (/19 e.Result/63 '\''/58 )/20 (/24 # C/26 '\t'/47 e.Chars/65 )/25 e.Tail/67 >/1
          context[59] = context[48];
          context[60] = context[49];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[52];
          context[64] = context[53];
          context[65] = context[54];
          context[66] = context[55];
          context[67] = context[56];
          context[68] = context[57];
          if( ! refalrts::char_term( '\t', context[47] ) )
            continue;
          // closed e.Prefix as range 59
          // closed e.Indent as range 61
          // closed e.Result as range 63
          // closed e.Chars as range 65
          // closed e.Tail as range 67
          //DEBUG: s.Limit: 21
          //DEBUG: e.Prefix: 59
          //DEBUG: e.Indent: 61
          //DEBUG: e.Result: 63
          //DEBUG: e.Chars: 65
          //DEBUG: e.Tail: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </69 & Sub/70 Tile{ AsIs: s.Limit/21 } 2/71 >/72 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/59 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/61 AsIs: )/16 AsIs: (/19 AsIs: e.Result/63 Reuse: '\\'/58 HalfReuse: 't'/20 HalfReuse: '\''/24 HalfReuse: )/26 HalfReuse: (/47 } # C/73 Tile{ AsIs: e.Chars/65 } Tile{ AsIs: )/25 AsIs: e.Tail/67 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[69]);
          refalrts::alloc_name(vm, context[70], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[71], 2UL);
          refalrts::alloc_close_call(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_C]);
          refalrts::update_char(context[58], '\\');
          refalrts::reinit_char(context[20], 't');
          refalrts::reinit_char(context[24], '\'');
          refalrts::reinit_close_bracket(context[26]);
          refalrts::reinit_open_bracket(context[47]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[47], context[25] );
          refalrts::link_brackets( context[19], context[26] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[69] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[25];
          res = refalrts::splice_evar( res, context[65], context[66] );
          res = refalrts::splice_elem( res, context[73] );
          res = refalrts::splice_evar( res, context[8], context[47] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/59 )/12 (/15 e.Indent/61 )/16 (/19 e.Result/63 '\''/58 )/20 (/24 # C/26 '\r'/47 e.Chars/65 )/25 e.Tail/67 >/1
          context[59] = context[48];
          context[60] = context[49];
          context[61] = context[50];
          context[62] = context[51];
          context[63] = context[52];
          context[64] = context[53];
          context[65] = context[54];
          context[66] = context[55];
          context[67] = context[56];
          context[68] = context[57];
          if( ! refalrts::char_term( '\r', context[47] ) )
            continue;
          // closed e.Prefix as range 59
          // closed e.Indent as range 61
          // closed e.Result as range 63
          // closed e.Chars as range 65
          // closed e.Tail as range 67
          //DEBUG: s.Limit: 21
          //DEBUG: e.Prefix: 59
          //DEBUG: e.Indent: 61
          //DEBUG: e.Result: 63
          //DEBUG: e.Chars: 65
          //DEBUG: e.Tail: 67

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </69 & Sub/70 Tile{ AsIs: s.Limit/21 } 2/71 >/72 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/59 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/61 AsIs: )/16 AsIs: (/19 AsIs: e.Result/63 Reuse: '\\'/58 HalfReuse: 'r'/20 HalfReuse: '\''/24 HalfReuse: )/26 HalfReuse: (/47 } # C/73 Tile{ AsIs: e.Chars/65 } Tile{ AsIs: )/25 AsIs: e.Tail/67 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[69]);
          refalrts::alloc_name(vm, context[70], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[71], 2UL);
          refalrts::alloc_close_call(vm, context[72]);
          refalrts::alloc_ident(vm, context[73], identifiers[ident_C]);
          refalrts::update_char(context[58], '\\');
          refalrts::reinit_char(context[20], 'r');
          refalrts::reinit_char(context[24], '\'');
          refalrts::reinit_close_bracket(context[26]);
          refalrts::reinit_open_bracket(context[47]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[47], context[25] );
          refalrts::link_brackets( context[19], context[26] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[69] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[25];
          res = refalrts::splice_evar( res, context[65], context[66] );
          res = refalrts::splice_elem( res, context[73] );
          res = refalrts::splice_evar( res, context[8], context[47] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/59 )/12 (/15 e.Indent/61 )/16 (/19 e.Result/63 '\''/58 )/20 (/24 # C/26 s.Char/47 e.Chars/65 )/25 e.Tail/67 >/1
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[50];
        context[62] = context[51];
        context[63] = context[52];
        context[64] = context[53];
        context[65] = context[54];
        context[66] = context[55];
        context[67] = context[56];
        context[68] = context[57];
        // closed e.Prefix as range 59
        // closed e.Indent as range 61
        // closed e.Result as range 63
        // closed e.Chars as range 65
        // closed e.Tail as range 67
        //DEBUG: s.Limit: 21
        //DEBUG: s.Char: 47
        //DEBUG: e.Prefix: 59
        //DEBUG: e.Indent: 61
        //DEBUG: e.Result: 63
        //DEBUG: e.Chars: 65
        //DEBUG: e.Tail: 67

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$9=1/4 } Tile{ HalfReuse: s.Limit21 /8 AsIs: (/11 AsIs: e.Prefix/59 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/61 AsIs: )/16 AsIs: (/19 AsIs: e.Result/63 HalfReuse: )/58 HalfReuse: (/20 } Tile{ AsIs: e.Chars/65 } )/69 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/67 } Tile{ AsIs: )/25 } </70 & Lenw/71 Tile{ HalfReuse: </24 HalfReuse: & EscapeChar$7=1/26 AsIs: s.Char/47 } </72 & Ord/73 s.Char/47/74 >/75 >/76 >/77 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[69]);
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_Lenw]);
        refalrts::alloc_open_call(vm, context[72]);
        refalrts::alloc_name(vm, context[73], functions[efunc_Ord]);
        refalrts::copy_stvar(vm, context[74], context[47]);
        refalrts::alloc_close_call(vm, context[75]);
        refalrts::alloc_close_call(vm, context[76]);
        refalrts::alloc_close_call(vm, context[77]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S9A1]);
        refalrts::reinit_svar( context[8], context[21] );
        refalrts::reinit_close_bracket(context[58]);
        refalrts::reinit_open_bracket(context[20]);
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[26], functions[efunc_gen_EscapeChar_S7A1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[77] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[76] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[75] );
        refalrts::push_stack( vm, context[72] );
        refalrts::link_brackets( context[7], context[25] );
        refalrts::link_brackets( context[20], context[69] );
        refalrts::link_brackets( context[19], context[58] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[77] );
        res = refalrts::splice_evar( res, context[24], context[47] );
        res = refalrts::splice_evar( res, context[70], context[71] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[67], context[68] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[69] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[8], context[20] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/48 )/12 (/15 e.Indent/50 )/16 (/19 e.Result/52 )/20 (/24 # C/26 '\\'/47 e.Chars/54 )/25 e.Tail/56 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        if( ! refalrts::char_term( '\\', context[47] ) )
          continue;
        // closed e.Prefix as range 48
        // closed e.Indent as range 50
        // closed e.Result as range 52
        // closed e.Chars as range 54
        // closed e.Tail as range 56
        //DEBUG: s.Limit: 21
        //DEBUG: e.Prefix: 48
        //DEBUG: e.Indent: 50
        //DEBUG: e.Result: 52
        //DEBUG: e.Chars: 54
        //DEBUG: e.Tail: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </58 & Sub/59 Tile{ AsIs: s.Limit/21 } 4/60 >/61 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/48 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/50 AsIs: )/16 AsIs: (/19 AsIs: e.Result/52 HalfReuse: '\''/20 HalfReuse: '\\'/24 HalfReuse: '\\'/26 Reuse: '\''/47 } )/62 (/63 # C/64 Tile{ AsIs: e.Chars/54 } Tile{ AsIs: )/25 AsIs: e.Tail/56 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_Sub]);
        refalrts::alloc_number(vm, context[60], 4UL);
        refalrts::alloc_close_call(vm, context[61]);
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_ident(vm, context[64], identifiers[ident_C]);
        refalrts::reinit_char(context[20], '\'');
        refalrts::reinit_char(context[24], '\\');
        refalrts::reinit_char(context[26], '\\');
        refalrts::update_char(context[47], '\'');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[63], context[25] );
        refalrts::link_brackets( context[19], context[62] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[61] );
        refalrts::push_stack( vm, context[58] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[62], context[64] );
        res = refalrts::splice_evar( res, context[8], context[47] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/48 )/12 (/15 e.Indent/50 )/16 (/19 e.Result/52 )/20 (/24 # C/26 '\''/47 e.Chars/54 )/25 e.Tail/56 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        if( ! refalrts::char_term( '\'', context[47] ) )
          continue;
        // closed e.Prefix as range 48
        // closed e.Indent as range 50
        // closed e.Result as range 52
        // closed e.Chars as range 54
        // closed e.Tail as range 56
        //DEBUG: s.Limit: 21
        //DEBUG: e.Prefix: 48
        //DEBUG: e.Indent: 50
        //DEBUG: e.Result: 52
        //DEBUG: e.Chars: 54
        //DEBUG: e.Tail: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </58 & Sub/59 Tile{ AsIs: s.Limit/21 } 4/60 >/61 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/48 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/50 AsIs: )/16 AsIs: (/19 AsIs: e.Result/52 HalfReuse: '\''/20 HalfReuse: '\\'/24 HalfReuse: '\''/26 AsIs: '\''/47 } )/62 (/63 # C/64 Tile{ AsIs: e.Chars/54 } Tile{ AsIs: )/25 AsIs: e.Tail/56 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_Sub]);
        refalrts::alloc_number(vm, context[60], 4UL);
        refalrts::alloc_close_call(vm, context[61]);
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_ident(vm, context[64], identifiers[ident_C]);
        refalrts::reinit_char(context[20], '\'');
        refalrts::reinit_char(context[24], '\\');
        refalrts::reinit_char(context[26], '\'');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[63], context[25] );
        refalrts::link_brackets( context[19], context[62] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[61] );
        refalrts::push_stack( vm, context[58] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[62], context[64] );
        res = refalrts::splice_evar( res, context[8], context[47] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/48 )/12 (/15 e.Indent/50 )/16 (/19 e.Result/52 )/20 (/24 # C/26 '\"'/47 e.Chars/54 )/25 e.Tail/56 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        if( ! refalrts::char_term( '\"', context[47] ) )
          continue;
        // closed e.Prefix as range 48
        // closed e.Indent as range 50
        // closed e.Result as range 52
        // closed e.Chars as range 54
        // closed e.Tail as range 56
        //DEBUG: s.Limit: 21
        //DEBUG: e.Prefix: 48
        //DEBUG: e.Indent: 50
        //DEBUG: e.Result: 52
        //DEBUG: e.Chars: 54
        //DEBUG: e.Tail: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </58 & Sub/59 Tile{ AsIs: s.Limit/21 } 4/60 >/61 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/48 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/50 AsIs: )/16 AsIs: (/19 AsIs: e.Result/52 HalfReuse: '\''/20 HalfReuse: '\\'/24 HalfReuse: '\"'/26 Reuse: '\''/47 } )/62 (/63 # C/64 Tile{ AsIs: e.Chars/54 } Tile{ AsIs: )/25 AsIs: e.Tail/56 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_Sub]);
        refalrts::alloc_number(vm, context[60], 4UL);
        refalrts::alloc_close_call(vm, context[61]);
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_ident(vm, context[64], identifiers[ident_C]);
        refalrts::reinit_char(context[20], '\'');
        refalrts::reinit_char(context[24], '\\');
        refalrts::reinit_char(context[26], '\"');
        refalrts::update_char(context[47], '\'');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[63], context[25] );
        refalrts::link_brackets( context[19], context[62] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[61] );
        refalrts::push_stack( vm, context[58] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[62], context[64] );
        res = refalrts::splice_evar( res, context[8], context[47] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/48 )/12 (/15 e.Indent/50 )/16 (/19 e.Result/52 )/20 (/24 # C/26 '\n'/47 e.Chars/54 )/25 e.Tail/56 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        if( ! refalrts::char_term( '\n', context[47] ) )
          continue;
        // closed e.Prefix as range 48
        // closed e.Indent as range 50
        // closed e.Result as range 52
        // closed e.Chars as range 54
        // closed e.Tail as range 56
        //DEBUG: s.Limit: 21
        //DEBUG: e.Prefix: 48
        //DEBUG: e.Indent: 50
        //DEBUG: e.Result: 52
        //DEBUG: e.Chars: 54
        //DEBUG: e.Tail: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </58 & Sub/59 Tile{ AsIs: s.Limit/21 } 4/60 >/61 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/48 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/50 AsIs: )/16 AsIs: (/19 AsIs: e.Result/52 HalfReuse: '\''/20 HalfReuse: '\\'/24 HalfReuse: 'n'/26 Reuse: '\''/47 } )/62 (/63 # C/64 Tile{ AsIs: e.Chars/54 } Tile{ AsIs: )/25 AsIs: e.Tail/56 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_Sub]);
        refalrts::alloc_number(vm, context[60], 4UL);
        refalrts::alloc_close_call(vm, context[61]);
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_ident(vm, context[64], identifiers[ident_C]);
        refalrts::reinit_char(context[20], '\'');
        refalrts::reinit_char(context[24], '\\');
        refalrts::reinit_char(context[26], 'n');
        refalrts::update_char(context[47], '\'');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[63], context[25] );
        refalrts::link_brackets( context[19], context[62] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[61] );
        refalrts::push_stack( vm, context[58] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[62], context[64] );
        res = refalrts::splice_evar( res, context[8], context[47] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/48 )/12 (/15 e.Indent/50 )/16 (/19 e.Result/52 )/20 (/24 # C/26 '\t'/47 e.Chars/54 )/25 e.Tail/56 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        if( ! refalrts::char_term( '\t', context[47] ) )
          continue;
        // closed e.Prefix as range 48
        // closed e.Indent as range 50
        // closed e.Result as range 52
        // closed e.Chars as range 54
        // closed e.Tail as range 56
        //DEBUG: s.Limit: 21
        //DEBUG: e.Prefix: 48
        //DEBUG: e.Indent: 50
        //DEBUG: e.Result: 52
        //DEBUG: e.Chars: 54
        //DEBUG: e.Tail: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </58 & Sub/59 Tile{ AsIs: s.Limit/21 } 4/60 >/61 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/48 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/50 AsIs: )/16 AsIs: (/19 AsIs: e.Result/52 HalfReuse: '\''/20 HalfReuse: '\\'/24 HalfReuse: 't'/26 Reuse: '\''/47 } )/62 (/63 # C/64 Tile{ AsIs: e.Chars/54 } Tile{ AsIs: )/25 AsIs: e.Tail/56 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_Sub]);
        refalrts::alloc_number(vm, context[60], 4UL);
        refalrts::alloc_close_call(vm, context[61]);
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_ident(vm, context[64], identifiers[ident_C]);
        refalrts::reinit_char(context[20], '\'');
        refalrts::reinit_char(context[24], '\\');
        refalrts::reinit_char(context[26], 't');
        refalrts::update_char(context[47], '\'');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[63], context[25] );
        refalrts::link_brackets( context[19], context[62] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[61] );
        refalrts::push_stack( vm, context[58] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[62], context[64] );
        res = refalrts::splice_evar( res, context[8], context[47] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/48 )/12 (/15 e.Indent/50 )/16 (/19 e.Result/52 )/20 (/24 # C/26 '\r'/47 e.Chars/54 )/25 e.Tail/56 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        if( ! refalrts::char_term( '\r', context[47] ) )
          continue;
        // closed e.Prefix as range 48
        // closed e.Indent as range 50
        // closed e.Result as range 52
        // closed e.Chars as range 54
        // closed e.Tail as range 56
        //DEBUG: s.Limit: 21
        //DEBUG: e.Prefix: 48
        //DEBUG: e.Indent: 50
        //DEBUG: e.Result: 52
        //DEBUG: e.Chars: 54
        //DEBUG: e.Tail: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </58 & Sub/59 Tile{ AsIs: s.Limit/21 } 4/60 >/61 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/48 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/50 AsIs: )/16 AsIs: (/19 AsIs: e.Result/52 HalfReuse: '\''/20 HalfReuse: '\\'/24 HalfReuse: 'r'/26 Reuse: '\''/47 } )/62 (/63 # C/64 Tile{ AsIs: e.Chars/54 } Tile{ AsIs: )/25 AsIs: e.Tail/56 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_Sub]);
        refalrts::alloc_number(vm, context[60], 4UL);
        refalrts::alloc_close_call(vm, context[61]);
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_ident(vm, context[64], identifiers[ident_C]);
        refalrts::reinit_char(context[20], '\'');
        refalrts::reinit_char(context[24], '\\');
        refalrts::reinit_char(context[26], 'r');
        refalrts::update_char(context[47], '\'');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[63], context[25] );
        refalrts::link_brackets( context[19], context[62] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[61] );
        refalrts::push_stack( vm, context[58] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[62], context[64] );
        res = refalrts::splice_evar( res, context[8], context[47] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/48 )/12 (/15 e.Indent/50 )/16 (/19 e.Result/52 )/20 (/24 # C/26 s.Char/47 e.Chars/54 )/25 e.Tail/56 >/1
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      context[54] = context[43];
      context[55] = context[44];
      context[56] = context[45];
      context[57] = context[46];
      // closed e.Prefix as range 48
      // closed e.Indent as range 50
      // closed e.Result as range 52
      // closed e.Chars as range 54
      // closed e.Tail as range 56
      //DEBUG: s.Limit: 21
      //DEBUG: s.Char: 47
      //DEBUG: e.Prefix: 48
      //DEBUG: e.Indent: 50
      //DEBUG: e.Result: 52
      //DEBUG: e.Chars: 54
      //DEBUG: e.Tail: 56

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$10=1/4 } Tile{ HalfReuse: s.Limit21 /8 AsIs: (/11 AsIs: e.Prefix/48 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/50 AsIs: )/16 AsIs: (/19 AsIs: e.Result/52 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Chars/54 } )/58 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/56 } Tile{ AsIs: )/25 } </59 & Lenw/60 '\''/61 </62 Tile{ HalfReuse: & EscapeChar$7=1/26 AsIs: s.Char/47 } </63 & Ord/64 s.Char/47/65 >/66 >/67 '\''/68 >/69 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_open_call(vm, context[59]);
      refalrts::alloc_name(vm, context[60], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[61], '\'');
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_open_call(vm, context[63]);
      refalrts::alloc_name(vm, context[64], functions[efunc_Ord]);
      refalrts::copy_stvar(vm, context[65], context[47]);
      refalrts::alloc_close_call(vm, context[66]);
      refalrts::alloc_close_call(vm, context[67]);
      refalrts::alloc_char(vm, context[68], '\'');
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S10A1]);
      refalrts::reinit_svar( context[8], context[21] );
      refalrts::reinit_name(context[26], functions[efunc_gen_EscapeChar_S7A1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[67] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[63] );
      refalrts::link_brackets( context[7], context[25] );
      refalrts::link_brackets( context[24], context[58] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[63], context[69] );
      res = refalrts::splice_evar( res, context[26], context[47] );
      res = refalrts::splice_evar( res, context[59], context[62] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[8], context[24] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/37 )/12 (/15 e.Indent/39 )/16 (/19 e.Result/41 )/20 (/24 # C/26 )/25 e.Tail/43 >/1
    context[37] = context[27];
    context[38] = context[28];
    context[39] = context[29];
    context[40] = context[30];
    context[41] = context[31];
    context[42] = context[32];
    context[43] = context[35];
    context[44] = context[36];
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    // closed e.Prefix as range 37
    // closed e.Indent as range 39
    // closed e.Result as range 41
    // closed e.Tail as range 43
    //DEBUG: s.Limit: 21
    //DEBUG: e.Prefix: 37
    //DEBUG: e.Indent: 39
    //DEBUG: e.Result: 41
    //DEBUG: e.Tail: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } Tile{ HalfReuse: </26 HalfReuse: & Sub/25 } Tile{ AsIs: s.Limit/21 } 1/45 >/46 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/37 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/39 AsIs: )/16 AsIs: (/19 AsIs: e.Result/41 HalfReuse: ' '/20 HalfReuse: )/24 } Tile{ AsIs: e.Tail/43 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::reinit_open_call(context[26]);
    refalrts::reinit_name(context[25], functions[efunc_Sub]);
    refalrts::reinit_char(context[20], ' ');
    refalrts::reinit_close_bracket(context[24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[24] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[8], context[24] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[26], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.new25/21 )/8 (/11 e.new26/27 )/12 (/15 e.new27/29 )/16 (/19 e.new28/31 )/20 (/24 s.new20/26 e.new21/33 s.new22/39 s.new23/38 s.new24/37 )/25 e.new19/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.new26 as range 27
    // closed e.new27 as range 29
    // closed e.new28 as range 31
    // closed e.new19 as range 35
    if( ! refalrts::svar_right( context[37], context[33], context[34] ) )
      continue;
    if( ! refalrts::svar_right( context[38], context[33], context[34] ) )
      continue;
    if( ! refalrts::svar_right( context[39], context[33], context[34] ) )
      continue;
    // closed e.new21 as range 33
    do {
      // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/40 )/12 (/15 e.Indent/42 )/16 (/19 e.Result/44 )/20 (/24 # s/26 s.Id/39 '='/38 s.Copy/37 )/25 e.Tail/46 >/1
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[32];
      context[46] = context[35];
      context[47] = context[36];
      if( ! refalrts::char_term( '=', context[38] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_s], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[33], context[34] ) )
        continue;
      // closed e.Prefix as range 40
      // closed e.Indent as range 42
      // closed e.Result as range 44
      // closed e.Tail as range 46
      //DEBUG: s.Limit: 21
      //DEBUG: s.Id: 39
      //DEBUG: s.Copy: 37
      //DEBUG: e.Prefix: 40
      //DEBUG: e.Indent: 42
      //DEBUG: e.Result: 44
      //DEBUG: e.Tail: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/21 {REMOVED TILE} {REMOVED TILE} s.Copy/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$12=1/4 } Tile{ HalfReuse: s.Limit21 /8 AsIs: (/11 AsIs: e.Prefix/40 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/42 AsIs: )/16 AsIs: (/19 AsIs: e.Result/44 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Tail/46 } Tile{ AsIs: )/25 } Tile{ HalfReuse: </7 } & Lenw/48"s."/49 </51 Tile{ HalfReuse: & Symb/26 AsIs: s.Id/39 HalfReuse: >/38 } ' '/52 >/53 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[48], functions[efunc_Lenw]);
      refalrts::alloc_chars(vm, context[49], context[50], "s.", 2);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_char(vm, context[52], ' ');
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S12A1]);
      refalrts::reinit_svar( context[8], context[21] );
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[26], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[38]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[51] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[26], context[38] );
      res = refalrts::splice_evar( res, context[48], context[51] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[8], context[24] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 s.new35/21 )/8 (/11 e.new36/40 )/12 (/15 e.new37/42 )/16 (/19 e.new38/44 )/20 (/24 s.new30/26 s.new33/50 s.new34/51 '='/39 s.new32/38 s.new31/37 )/25 e.new29/48 >/1
    context[40] = context[27];
    context[41] = context[28];
    context[42] = context[29];
    context[43] = context[30];
    context[44] = context[31];
    context[45] = context[32];
    context[46] = context[33];
    context[47] = context[34];
    context[48] = context[35];
    context[49] = context[36];
    if( ! refalrts::char_term( '=', context[39] ) )
      continue;
    // closed e.new36 as range 40
    // closed e.new37 as range 42
    // closed e.new38 as range 44
    // closed e.new29 as range 48
    if( ! refalrts::svar_left( context[50], context[46], context[47] ) )
      continue;
    if( ! refalrts::svar_left( context[51], context[46], context[47] ) )
      continue;
    if( ! refalrts::empty_seq( context[46], context[47] ) )
      continue;
    do {
      // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/52 )/12 (/15 e.Indent/54 )/16 (/19 e.Result/56 )/20 (/24 # t/26 s.IdL/50 s.IdR/51 '='/39 s.CopyL/38 s.CopyR/37 )/25 e.Tail/58 >/1
      context[52] = context[40];
      context[53] = context[41];
      context[54] = context[42];
      context[55] = context[43];
      context[56] = context[44];
      context[57] = context[45];
      context[58] = context[48];
      context[59] = context[49];
      if( ! refalrts::ident_term( identifiers[ident_t], context[26] ) )
        continue;
      // closed e.Prefix as range 52
      // closed e.Indent as range 54
      // closed e.Result as range 56
      // closed e.Tail as range 58
      //DEBUG: s.Limit: 21
      //DEBUG: s.IdL: 50
      //DEBUG: s.IdR: 51
      //DEBUG: s.CopyL: 38
      //DEBUG: s.CopyR: 37
      //DEBUG: e.Prefix: 52
      //DEBUG: e.Indent: 54
      //DEBUG: e.Result: 56
      //DEBUG: e.Tail: 58

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/21 {REMOVED TILE} {REMOVED TILE} s.IdR/51 {REMOVED TILE} s.CopyL/38 s.CopyR/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$13=1/4 } Tile{ HalfReuse: s.Limit21 /8 AsIs: (/11 AsIs: e.Prefix/52 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/54 AsIs: )/16 AsIs: (/19 AsIs: e.Result/56 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Tail/58 } Tile{ AsIs: )/25 } Tile{ HalfReuse: </7 } & Lenw/60 Tile{ Reuse: 't'/39 } '.'/61 </62 Tile{ HalfReuse: & Symb/26 AsIs: s.IdL/50 } >/63 ' '/64 >/65 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[60], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[61], '.');
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_close_call(vm, context[63]);
      refalrts::alloc_char(vm, context[64], ' ');
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S13A1]);
      refalrts::reinit_svar( context[8], context[21] );
      refalrts::reinit_open_call(context[7]);
      refalrts::update_char(context[39], 't');
      refalrts::reinit_name(context[26], functions[efunc_Symb]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[63] );
      refalrts::push_stack( vm, context[62] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[63], context[65] );
      res = refalrts::splice_evar( res, context[26], context[50] );
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[60] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[8], context[24] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/52 )/12 (/15 e.Indent/54 )/16 (/19 e.Result/56 )/20 (/24 # e/26 s.IdL/50 s.IdR/51 '='/39 s.CopyL/38 s.CopyR/37 )/25 e.Tail/58 >/1
    context[52] = context[40];
    context[53] = context[41];
    context[54] = context[42];
    context[55] = context[43];
    context[56] = context[44];
    context[57] = context[45];
    context[58] = context[48];
    context[59] = context[49];
    if( ! refalrts::ident_term( identifiers[ident_e], context[26] ) )
      continue;
    // closed e.Prefix as range 52
    // closed e.Indent as range 54
    // closed e.Result as range 56
    // closed e.Tail as range 58
    //DEBUG: s.Limit: 21
    //DEBUG: s.IdL: 50
    //DEBUG: s.IdR: 51
    //DEBUG: s.CopyL: 38
    //DEBUG: s.CopyR: 37
    //DEBUG: e.Prefix: 52
    //DEBUG: e.Indent: 54
    //DEBUG: e.Result: 56
    //DEBUG: e.Tail: 58

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/21 {REMOVED TILE} {REMOVED TILE} s.IdR/51 {REMOVED TILE} s.CopyL/38 s.CopyR/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$14=1/4 } Tile{ HalfReuse: s.Limit21 /8 AsIs: (/11 AsIs: e.Prefix/52 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/54 AsIs: )/16 AsIs: (/19 AsIs: e.Result/56 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Tail/58 } Tile{ AsIs: )/25 } Tile{ HalfReuse: </7 } & Lenw/60 Tile{ Reuse: 'e'/39 } '.'/61 </62 Tile{ HalfReuse: & Symb/26 AsIs: s.IdL/50 } >/63 ' '/64 >/65 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[60], functions[efunc_Lenw]);
    refalrts::alloc_char(vm, context[61], '.');
    refalrts::alloc_open_call(vm, context[62]);
    refalrts::alloc_close_call(vm, context[63]);
    refalrts::alloc_char(vm, context[64], ' ');
    refalrts::alloc_close_call(vm, context[65]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S14A1]);
    refalrts::reinit_svar( context[8], context[21] );
    refalrts::reinit_open_call(context[7]);
    refalrts::update_char(context[39], 'e');
    refalrts::reinit_name(context[26], functions[efunc_Symb]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[65] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[63] );
    refalrts::push_stack( vm, context[62] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[63], context[65] );
    res = refalrts::splice_evar( res, context[26], context[50] );
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_elem( res, context[60] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[8], context[24] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.new21/21 )/8 (/11 e.new22/27 )/12 (/15 e.new23/29 )/16 (/19 e.new24/31 )/20 (/24 s.new20/26 )/25 e.new19/33 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[2];
    context[34] = context[3];
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    // closed e.new22 as range 27
    // closed e.new23 as range 29
    // closed e.new24 as range 31
    // closed e.new19 as range 33
    do {
      // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/35 )/12 (/15 e.Indent/37 )/16 (/19 e.Result/39 )/20 (/24 # LB/26 )/25 e.Tail/41 >/1
      context[35] = context[27];
      context[36] = context[28];
      context[37] = context[29];
      context[38] = context[30];
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_LB], context[26] ) )
        continue;
      // closed e.Prefix as range 35
      // closed e.Indent as range 37
      // closed e.Result as range 39
      // closed e.Tail as range 41
      //DEBUG: s.Limit: 21
      //DEBUG: e.Prefix: 35
      //DEBUG: e.Indent: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Tail: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } Tile{ HalfReuse: </26 HalfReuse: & Sub/25 } Tile{ AsIs: s.Limit/21 } 1/43 >/44 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/35 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/37 AsIs: )/16 AsIs: (/19 AsIs: e.Result/39 HalfReuse: '('/20 HalfReuse: )/24 } Tile{ AsIs: e.Tail/41 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[43], 1UL);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::reinit_open_call(context[26]);
      refalrts::reinit_name(context[25], functions[efunc_Sub]);
      refalrts::reinit_char(context[20], '(');
      refalrts::reinit_close_bracket(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[24] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[8], context[24] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[26], context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 s.new26/21 )/8 (/11 e.new27/35 )/12 (/15 e.new28/37 )/16 (/19 e.new29/39 )/20 (/24 # RB/26 )/25 e.new25/41 >/1
    context[35] = context[27];
    context[36] = context[28];
    context[37] = context[29];
    context[38] = context[30];
    context[39] = context[31];
    context[40] = context[32];
    context[41] = context[33];
    context[42] = context[34];
    if( ! refalrts::ident_term( identifiers[ident_RB], context[26] ) )
      continue;
    // closed e.new27 as range 35
    // closed e.new28 as range 37
    // closed e.new29 as range 39
    // closed e.new25 as range 41
    do {
      // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/43 )/12 (/15 e.Indent/45 )/16 (/19 e.Result/47 ' '/51 )/20 (/24 # RB/26 )/25 e.Tail/49 >/1
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[41];
      context[50] = context[42];
      context[51] = refalrts::char_right( ' ', context[47], context[48] );
      if( ! context[51] )
        continue;
      // closed e.Prefix as range 43
      // closed e.Indent as range 45
      // closed e.Result as range 47
      // closed e.Tail as range 49
      //DEBUG: s.Limit: 21
      //DEBUG: e.Prefix: 43
      //DEBUG: e.Indent: 45
      //DEBUG: e.Result: 47
      //DEBUG: e.Tail: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </52 & Add/53 1/54 Tile{ AsIs: s.Limit/21 } Tile{ HalfReuse: >/25 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/43 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/45 AsIs: )/16 AsIs: (/19 AsIs: e.Result/47 HalfReuse: )/51 HalfReuse: (/20 HalfReuse: # RB/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail/49 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[52]);
      refalrts::alloc_name(vm, context[53], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[54], 1UL);
      refalrts::reinit_close_call(context[25]);
      refalrts::reinit_close_bracket(context[51]);
      refalrts::reinit_open_bracket(context[20]);
      refalrts::reinit_ident(context[24], identifiers[ident_RB]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[26] );
      refalrts::link_brackets( context[19], context[51] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[52] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[8], context[26] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[52], context[54] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/43 )/12 (/15 e.Indent/45 )/16 (/19 e.Result/47 )/20 (/24 # RB/26 )/25 e.Tail/49 >/1
    context[43] = context[35];
    context[44] = context[36];
    context[45] = context[37];
    context[46] = context[38];
    context[47] = context[39];
    context[48] = context[40];
    context[49] = context[41];
    context[50] = context[42];
    // closed e.Prefix as range 43
    // closed e.Indent as range 45
    // closed e.Result as range 47
    // closed e.Tail as range 49
    //DEBUG: s.Limit: 21
    //DEBUG: e.Prefix: 43
    //DEBUG: e.Indent: 45
    //DEBUG: e.Result: 47
    //DEBUG: e.Tail: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </51 & Sub/52 Tile{ AsIs: s.Limit/21 } 2/53 Tile{ HalfReuse: >/25 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/43 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/45 AsIs: )/16 AsIs: (/19 AsIs: e.Result/47 HalfReuse: ')'/20 HalfReuse: ' '/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail/49 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_Sub]);
    refalrts::alloc_number(vm, context[53], 2UL);
    refalrts::reinit_close_call(context[25]);
    refalrts::reinit_char(context[20], ')');
    refalrts::reinit_char(context[24], ' ');
    refalrts::reinit_close_bracket(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[26] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[51] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[8], context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/27 )/12 (/15 e.Indent/29 )/16 (/19 e.Result/31 )/20 (/24 '*'/26 e.Inner/33 )/25 e.Tail/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::char_term( '*', context[26] ) )
      continue;
    // closed e.Prefix as range 27
    // closed e.Indent as range 29
    // closed e.Result as range 31
    // closed e.Inner as range 33
    // closed e.Tail as range 35
    //DEBUG: s.Limit: 21
    //DEBUG: e.Prefix: 27
    //DEBUG: e.Indent: 29
    //DEBUG: e.Result: 31
    //DEBUG: e.Inner: 33
    //DEBUG: e.Tail: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 AsIs: s.Limit/21 AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/27 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/29 AsIs: )/16 AsIs: (/19 AsIs: e.Result/31 AsIs: )/20 AsIs: (/24 HalfReuse: # LB/26 } )/37 Tile{ AsIs: e.Inner/33 } (/38 # RB/39 Tile{ AsIs: )/25 AsIs: e.Tail/35 AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_ident(vm, context[39], identifiers[ident_RB]);
    refalrts::reinit_ident(context[26], identifiers[ident_LB]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[38], context[25] );
    refalrts::link_brackets( context[24], context[37] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/27 )/12 (/15 e.Indent/29 )/16 (/19 e.Result/31 )/20 (/24 '!'/26 (/39 e.Name/37 )/40 e.Inner/33 )/25 e.Tail/35 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::char_term( '!', context[26] ) )
      continue;
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::brackets_left( context[37], context[38], context[33], context[34] );
    if( ! context[39] )
      continue;
    refalrts::bracket_pointers(context[39], context[40]);
    // closed e.Prefix as range 27
    // closed e.Indent as range 29
    // closed e.Result as range 31
    // closed e.Name as range 37
    // closed e.Inner as range 33
    // closed e.Tail as range 35
    //DEBUG: s.Limit: 21
    //DEBUG: e.Prefix: 27
    //DEBUG: e.Indent: 29
    //DEBUG: e.Result: 31
    //DEBUG: e.Name: 37
    //DEBUG: e.Inner: 33
    //DEBUG: e.Tail: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$19=1/4 } Tile{ HalfReuse: s.Limit21 /8 AsIs: (/11 AsIs: e.Prefix/27 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/29 AsIs: )/16 AsIs: (/19 AsIs: e.Result/31 AsIs: )/20 AsIs: (/24 } Tile{ AsIs: e.Inner/33 } Tile{ AsIs: )/25 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/35 } )/41 </42 & Lenw/43 '<'/44 </45 & FormatWord:1/46 Tile{ HalfReuse: </26 HalfReuse: & Type/39 AsIs: e.Name/37 HalfReuse: >/40 } >/47 ' '/48 >/49 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_Lenw]);
    refalrts::alloc_char(vm, context[44], '<');
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_FormatWord_B1]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_char(vm, context[48], ' ');
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S19A1]);
    refalrts::reinit_svar( context[8], context[21] );
    refalrts::reinit_open_call(context[26]);
    refalrts::reinit_name(context[39], functions[efunc_Type]);
    refalrts::reinit_close_call(context[40]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[7], context[41] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[49] );
    res = refalrts::splice_evar( res, context[26], context[40] );
    res = refalrts::splice_evar( res, context[41], context[46] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[8], context[24] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr/4 (/7 s.new20/21 )/8 (/11 e.new21/9 )/12 (/15 e.new22/13 )/16 (/19 e.new23/17 )/20 (/24 # RK/26 )/25 e.new19/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_RK], context[26] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[22], context[23] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new21 as range 9
  // closed e.new22 as range 13
  // closed e.new23 as range 17
  // closed e.new19 as range 2
  do {
    // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/27 )/12 (/15 e.Indent/29 )/16 (/19 e.Result/31 ' '/35 )/20 (/24 # RK/26 )/25 e.Tail/33 >/1
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[2];
    context[34] = context[3];
    context[35] = refalrts::char_right( ' ', context[31], context[32] );
    if( ! context[35] )
      continue;
    // closed e.Prefix as range 27
    // closed e.Indent as range 29
    // closed e.Result as range 31
    // closed e.Tail as range 33
    //DEBUG: s.Limit: 21
    //DEBUG: e.Prefix: 27
    //DEBUG: e.Indent: 29
    //DEBUG: e.Result: 31
    //DEBUG: e.Tail: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </36 & Add/37 1/38 Tile{ AsIs: s.Limit/21 } Tile{ HalfReuse: >/25 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/27 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/29 AsIs: )/16 AsIs: (/19 AsIs: e.Result/31 HalfReuse: )/35 HalfReuse: (/20 HalfReuse: # RK/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail/33 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[38], 1UL);
    refalrts::reinit_close_call(context[25]);
    refalrts::reinit_close_bracket(context[35]);
    refalrts::reinit_open_bracket(context[20]);
    refalrts::reinit_ident(context[24], identifiers[ident_RK]);
    refalrts::reinit_close_bracket(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[20], context[26] );
    refalrts::link_brackets( context[19], context[35] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[8], context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[36], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr/4 (/7 s.Limit/21 )/8 (/11 e.Prefix/9 )/12 (/15 e.Indent/13 )/16 (/19 e.Result/17 )/20 (/24 # RK/26 )/25 e.Tail/2 >/1
  // closed e.Prefix as range 9
  // closed e.Indent as range 13
  // closed e.Result as range 17
  // closed e.Tail as range 2
  //DEBUG: s.Limit: 21
  //DEBUG: e.Prefix: 9
  //DEBUG: e.Indent: 13
  //DEBUG: e.Result: 17
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr/4 AsIs: (/7 } </27 & Sub/28 Tile{ AsIs: s.Limit/21 } 2/29 Tile{ HalfReuse: >/25 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Prefix/9 AsIs: )/12 AsIs: (/15 AsIs: e.Indent/13 AsIs: )/16 AsIs: (/19 AsIs: e.Result/17 HalfReuse: '>'/20 HalfReuse: ' '/24 HalfReuse: )/26 } Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
  refalrts::alloc_number(vm, context[29], 2UL);
  refalrts::reinit_close_call(context[25]);
  refalrts::reinit_char(context[20], '>');
  refalrts::reinit_char(context[24], ' ');
  refalrts::reinit_close_bracket(context[26]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[26] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[27] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[26] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoFormatExpr("DoFormatExpr", COOKIE1_, COOKIE2_, func_DoFormatExpr);


static refalrts::FnResult func_gen_FormatWord_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & FormatWord:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FormatWord:1/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & FormatWord:1/4 'L'/5 s._/6 s.First/9 e.Tail/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::char_term( 'L', context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    // closed e.Tail as range 7
    //DEBUG: s._: 6
    //DEBUG: s.First: 9
    //DEBUG: e.Tail: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s._/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FormatWord-Ident/4 HalfReuse: (/5 } Tile{ AsIs: s.First/9 } )/10 </11 & Type/12 Tile{ AsIs: e.Tail/7 } >/13 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_FormatWordm_Ident]);
    refalrts::reinit_open_bracket(context[5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[5], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[10], context[12] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::splice_to_freelist_open( vm, context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FormatWord:1/4 s.Type/5 s.SubType/6 e.Word$a/2 >/1
  // closed e.Word$a as range 2
  //DEBUG: s.Type: 5
  //DEBUG: s.SubType: 6
  //DEBUG: e.Word$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Type/5 s.SubType/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: </4 } & Map@8/7 Tile{ AsIs: e.Word$a/2 } >/8 Tile{ HalfReuse: '\"'/1 ]] }
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Map_Z8]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::reinit_char(context[0], '\"');
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_char(context[1], '\"');
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FormatWord_B1("FormatWord:1", COOKIE1_, COOKIE2_, func_gen_FormatWord_B1);


static refalrts::FnResult func_FormatWord(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & FormatWord/4 e.Word/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Word as range 2
  //DEBUG: e.Word: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & FormatWord:1/6 Tile{ AsIs: </0 Reuse: & Type/4 AsIs: e.Word/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_FormatWord_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Type]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FormatWord("FormatWord", COOKIE1_, COOKIE2_, func_FormatWord);


static refalrts::FnResult func_FormatWordm_Ident(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & FormatWord-Ident/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FormatWord-Ident/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & FormatWord-Ident/4 (/7 e.Ident/11 )/8 '*'/9 s._/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    if( ! refalrts::char_term( '*', context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Ident as range 11
    //DEBUG: s._: 10
    //DEBUG: e.Ident: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & FormatWord-Ident/4 (/7 {REMOVED TILE} )/8 '*'/9 s._/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Ident/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FormatWord-Ident/4 (/7 e.new9/11 )/8 s.new5/9 s.new6/10 s.new7/15 e.new8/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new9 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new8 as range 13
    do {
      // </0 & FormatWord-Ident/4 (/7 e.Prefix/16 )/8 'L'/9 s._/10 s.Next/15 e.Tail/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::char_term( 'L', context[9] ) )
        continue;
      // closed e.Prefix as range 16
      // closed e.Tail as range 18
      //DEBUG: s._: 10
      //DEBUG: s.Next: 15
      //DEBUG: e.Prefix: 16
      //DEBUG: e.Tail: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s._/10 s.Next/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & FormatWord-Ident/4 AsIs: (/7 AsIs: e.Prefix/16 HalfReuse: s.Next15 /8 HalfReuse: )/9 } </20 & Type/21 Tile{ AsIs: e.Tail/18 } >/22 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::reinit_svar( context[8], context[15] );
      refalrts::reinit_close_bracket(context[9]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[7], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & FormatWord-Ident/4 (/7 e.Prefix/16 )/8 'D'/9 s._/10 s.Next/15 e.Tail/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::char_term( 'D', context[9] ) )
        continue;
      // closed e.Prefix as range 16
      // closed e.Tail as range 18
      //DEBUG: s._: 10
      //DEBUG: s.Next: 15
      //DEBUG: e.Prefix: 16
      //DEBUG: e.Tail: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s._/10 s.Next/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & FormatWord-Ident/4 AsIs: (/7 AsIs: e.Prefix/16 HalfReuse: s.Next15 /8 HalfReuse: )/9 } </20 & Type/21 Tile{ AsIs: e.Tail/18 } >/22 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::reinit_svar( context[8], context[15] );
      refalrts::reinit_close_bracket(context[9]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[7], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & FormatWord-Ident/4 (/7 e.Prefix/16 )/8 s.Type/9 s.SubType/10 '-'/15 e.Tail/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::char_term( '-', context[15] ) )
        continue;
      // closed e.Prefix as range 16
      // closed e.Tail as range 18
      //DEBUG: s.Type: 9
      //DEBUG: s.SubType: 10
      //DEBUG: e.Prefix: 16
      //DEBUG: e.Tail: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Type/9 s.SubType/10 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & FormatWord-Ident/4 AsIs: (/7 AsIs: e.Prefix/16 HalfReuse: '-'/8 } )/20 </21 Tile{ HalfReuse: & Type/15 AsIs: e.Tail/18 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::reinit_char(context[8], '-');
      refalrts::reinit_name(context[15], functions[efunc_Type]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & FormatWord-Ident/4 (/7 e.Prefix/16 )/8 s.Type/9 s.SubType/10 '_'/15 e.Tail/18 >/1
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    context[19] = context[14];
    if( ! refalrts::char_term( '_', context[15] ) )
      continue;
    // closed e.Prefix as range 16
    // closed e.Tail as range 18
    //DEBUG: s.Type: 9
    //DEBUG: s.SubType: 10
    //DEBUG: e.Prefix: 16
    //DEBUG: e.Tail: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Type/9 s.SubType/10 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & FormatWord-Ident/4 AsIs: (/7 AsIs: e.Prefix/16 HalfReuse: '_'/8 } )/20 </21 Tile{ HalfReuse: & Type/15 AsIs: e.Tail/18 AsIs: >/1 } >/22 Tile{ ]] }
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::reinit_char(context[8], '_');
    refalrts::reinit_name(context[15], functions[efunc_Type]);
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[7], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FormatWord-Ident/4 (/7 e.Prefix/5 )/8 s.Type/9 s.SubType/10 e.Suffix/2 >/1
  // closed e.Prefix as range 5
  // closed e.Suffix as range 2
  //DEBUG: s.Type: 9
  //DEBUG: s.SubType: 10
  //DEBUG: e.Prefix: 5
  //DEBUG: e.Suffix: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type/9 s.SubType/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: </4 HalfReuse: & Map@8/7 } Tile{ AsIs: e.Prefix/5 } Tile{ AsIs: e.Suffix/2 } Tile{ HalfReuse: >/8 } Tile{ HalfReuse: '\"'/1 ]] }
  refalrts::reinit_char(context[0], '\"');
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z8]);
  refalrts::reinit_close_call(context[8]);
  refalrts::reinit_char(context[1], '\"');
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FormatWordm_Ident("FormatWord-Ident", COOKIE1_, COOKIE2_, func_FormatWordm_Ident);


static refalrts::FnResult func_EscapeChars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & EscapeChars/4 e.Chars/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Chars as range 2
  //DEBUG: e.Chars: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@8/4 AsIs: e.Chars/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_EscapeChars("EscapeChars", COOKIE1_, COOKIE2_, func_EscapeChars);


static refalrts::FnResult func_gen_EscapeChar_S7B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & EscapeChar$7:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & EscapeChar$7:1/4 s.new1/5 s.new2/6 s.new3/7 s.new4/8 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & EscapeChar$7:1/4 s.Char/5 s.Code/6 '-'/7 '-'/8 >/1
    if( ! refalrts::char_term( '-', context[7] ) )
      continue;
    if( ! refalrts::char_term( '-', context[8] ) )
      continue;
    //DEBUG: s.Char: 5
    //DEBUG: s.Code: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar$7:1/4 s.Char/5 s.Code/6 '-'/7 '-'/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Char5 /1 ]] }
    refalrts::reinit_svar( context[1], context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EscapeChar$7:1/4 s.Char/5 s.Code/6 s.Cmp1/7 s.Cmp2/8 >/1
  //DEBUG: s.Char: 5
  //DEBUG: s.Code: 6
  //DEBUG: s.Cmp1: 7
  //DEBUG: s.Cmp2: 8

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Char/5 {REMOVED TILE} s.Cmp1/7 s.Cmp2/8 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar-Hex=1/4 } </9 & Divmod/10 Tile{ AsIs: s.Code/6 } 16/11 >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[11], 16UL);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_EscapeCharm_Hex_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EscapeChar_S7B1("EscapeChar$7:1", COOKIE1_, COOKIE2_, func_gen_EscapeChar_S7B1);


static refalrts::FnResult func_gen_EscapeChar_S7A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & EscapeChar$7=1/4 s.Char/5 s.Code/6 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Char: 5
  //DEBUG: s.Code: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar$7:1/4 AsIs: s.Char/5 AsIs: s.Code/6 HalfReuse: </1 } & Compare/7 31/8 s.Code/6/9 >/10 </11 & Compare/12 s.Code/6/13 127/14 >/15 >/16 Tile{ ]] }
  refalrts::alloc_name(vm, context[7], functions[efunc_Compare]);
  refalrts::alloc_number(vm, context[8], 31UL);
  refalrts::copy_stvar(vm, context[9], context[6]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Compare]);
  refalrts::copy_stvar(vm, context[13], context[6]);
  refalrts::alloc_number(vm, context[14], 127UL);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_EscapeChar_S7B1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EscapeChar_S7A1("EscapeChar$7=1", COOKIE1_, COOKIE2_, func_gen_EscapeChar_S7A1);


static refalrts::FnResult func_EscapeChar(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & EscapeChar/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & EscapeChar/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & EscapeChar/4 '\\'/5 >/1
    if( ! refalrts::char_term( '\\', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: '\\'/5 HalfReuse: '\\'/1 ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar/4 '\''/5 >/1
    if( ! refalrts::char_term( '\'', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: '\\'/5 HalfReuse: '\''/1 ]] }
    refalrts::update_char(context[5], '\\');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar/4 '\"'/5 >/1
    if( ! refalrts::char_term( '\"', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: '\\'/5 HalfReuse: '\"'/1 ]] }
    refalrts::update_char(context[5], '\\');
    refalrts::reinit_char(context[1], '\"');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar/4 '\n'/5 >/1
    if( ! refalrts::char_term( '\n', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: '\\'/5 HalfReuse: 'n'/1 ]] }
    refalrts::update_char(context[5], '\\');
    refalrts::reinit_char(context[1], 'n');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar/4 '\t'/5 >/1
    if( ! refalrts::char_term( '\t', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: '\\'/5 HalfReuse: 't'/1 ]] }
    refalrts::update_char(context[5], '\\');
    refalrts::reinit_char(context[1], 't');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar/4 '\r'/5 >/1
    if( ! refalrts::char_term( '\r', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & EscapeChar/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: '\\'/5 HalfReuse: 'r'/1 ]] }
    refalrts::update_char(context[5], '\\');
    refalrts::reinit_char(context[1], 'r');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EscapeChar/4 s.Char/5 >/1
  //DEBUG: s.Char: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar$7=1/4 AsIs: s.Char/5 HalfReuse: </1 } & Ord/6 s.Char/5/7 >/8 >/9 Tile{ ]] }
  refalrts::alloc_name(vm, context[6], functions[efunc_Ord]);
  refalrts::copy_stvar(vm, context[7], context[5]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_EscapeChar_S7A1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_EscapeChar("EscapeChar", COOKIE1_, COOKIE2_, func_EscapeChar);


static refalrts::FnResult func_gen_EscapeCharm_Hex_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & EscapeChar-Hex=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & EscapeChar-Hex=1/4 (/9 s.new1/11 )/10 s.new2/12 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 s.new3/12 >/1
      if( ! refalrts::number_term( 0UL, context[11] ) )
        continue;
      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 0/12 >/1
        if( ! refalrts::number_term( 0UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: '0'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], '0');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 1/12 >/1
        if( ! refalrts::number_term( 1UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: '1'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], '1');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 2/12 >/1
        if( ! refalrts::number_term( 2UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: '2'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], '2');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 3/12 >/1
        if( ! refalrts::number_term( 3UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: '3'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], '3');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 4/12 >/1
        if( ! refalrts::number_term( 4UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: '4'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], '4');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 5/12 >/1
        if( ! refalrts::number_term( 5UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: '5'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], '5');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 6/12 >/1
        if( ! refalrts::number_term( 6UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: '6'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], '6');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 7/12 >/1
        if( ! refalrts::number_term( 7UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: '7'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], '7');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 8/12 >/1
        if( ! refalrts::number_term( 8UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: '8'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], '8');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 9/12 >/1
        if( ! refalrts::number_term( 9UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: '9'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], '9');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 10/12 >/1
        if( ! refalrts::number_term( 10UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: 'A'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], 'A');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 11/12 >/1
        if( ! refalrts::number_term( 11UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: 'B'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], 'B');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 12/12 >/1
        if( ! refalrts::number_term( 12UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: 'C'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], 'C');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 13/12 >/1
        if( ! refalrts::number_term( 13UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: 'D'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], 'D');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 14/12 >/1
        if( ! refalrts::number_term( 14UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: 'E'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], 'E');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 15/12 >/1
        if( ! refalrts::number_term( 15UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '0'/12 HalfReuse: 'F'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '0');
        refalrts::reinit_char(context[1], 'F');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EscapeChar-Hex=1/4 (/9 0/11 )/10 s.Lo/12 >/1
      //DEBUG: s.Lo: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: '0'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '\\');
      refalrts::reinit_char(context[4], 'x');
      refalrts::reinit_char(context[9], '0');
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 s.new3/12 >/1
      if( ! refalrts::number_term( 1UL, context[11] ) )
        continue;
      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 0/12 >/1
        if( ! refalrts::number_term( 0UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: '0'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], '0');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 1/12 >/1
        if( ! refalrts::number_term( 1UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: '1'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], '1');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 2/12 >/1
        if( ! refalrts::number_term( 2UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: '2'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], '2');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 3/12 >/1
        if( ! refalrts::number_term( 3UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: '3'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], '3');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 4/12 >/1
        if( ! refalrts::number_term( 4UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: '4'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], '4');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 5/12 >/1
        if( ! refalrts::number_term( 5UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: '5'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], '5');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 6/12 >/1
        if( ! refalrts::number_term( 6UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: '6'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], '6');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 7/12 >/1
        if( ! refalrts::number_term( 7UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: '7'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], '7');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 8/12 >/1
        if( ! refalrts::number_term( 8UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: '8'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], '8');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 9/12 >/1
        if( ! refalrts::number_term( 9UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: '9'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], '9');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 10/12 >/1
        if( ! refalrts::number_term( 10UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: 'A'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], 'A');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 11/12 >/1
        if( ! refalrts::number_term( 11UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: 'B'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], 'B');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 12/12 >/1
        if( ! refalrts::number_term( 12UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: 'C'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], 'C');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 13/12 >/1
        if( ! refalrts::number_term( 13UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: 'D'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], 'D');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 14/12 >/1
        if( ! refalrts::number_term( 14UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: 'E'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], 'E');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 15/12 >/1
        if( ! refalrts::number_term( 15UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '1'/12 HalfReuse: 'F'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '1');
        refalrts::reinit_char(context[1], 'F');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EscapeChar-Hex=1/4 (/9 1/11 )/10 s.Lo/12 >/1
      //DEBUG: s.Lo: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: '1'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '\\');
      refalrts::reinit_char(context[4], 'x');
      refalrts::reinit_char(context[9], '1');
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 s.new3/12 >/1
    if( ! refalrts::number_term( 2UL, context[11] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 0/12 >/1
      if( ! refalrts::number_term( 0UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: '0'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], '0');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 1/12 >/1
      if( ! refalrts::number_term( 1UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: '1'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], '1');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 2/12 >/1
      if( ! refalrts::number_term( 2UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: '2'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], '2');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 3/12 >/1
      if( ! refalrts::number_term( 3UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: '3'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], '3');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 4/12 >/1
      if( ! refalrts::number_term( 4UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: '4'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], '4');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 5/12 >/1
      if( ! refalrts::number_term( 5UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: '5'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], '5');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 6/12 >/1
      if( ! refalrts::number_term( 6UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: '6'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], '6');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 7/12 >/1
      if( ! refalrts::number_term( 7UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: '7'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], '7');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 8/12 >/1
      if( ! refalrts::number_term( 8UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: '8'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], '8');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 9/12 >/1
      if( ! refalrts::number_term( 9UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: '9'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], '9');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 10/12 >/1
      if( ! refalrts::number_term( 10UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: 'A'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], 'A');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 11/12 >/1
      if( ! refalrts::number_term( 11UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: 'B'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], 'B');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 12/12 >/1
      if( ! refalrts::number_term( 12UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: 'C'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], 'C');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 13/12 >/1
      if( ! refalrts::number_term( 13UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: 'D'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], 'D');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 14/12 >/1
      if( ! refalrts::number_term( 14UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: 'E'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], 'E');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 15/12 >/1
      if( ! refalrts::number_term( 15UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '2'/12 HalfReuse: 'F'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '2');
      refalrts::reinit_char(context[1], 'F');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/9 2/11 )/10 s.Lo/12 >/1
    //DEBUG: s.Lo: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: '2'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
    refalrts::reinit_char(context[0], '\\');
    refalrts::reinit_char(context[4], 'x');
    refalrts::reinit_char(context[9], '2');
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/9 s.new1/11 )/10 s.new2/12 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 s.new3/12 >/1
      if( ! refalrts::number_term( 3UL, context[11] ) )
        continue;
      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 0/12 >/1
        if( ! refalrts::number_term( 0UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: '0'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], '0');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 1/12 >/1
        if( ! refalrts::number_term( 1UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: '1'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], '1');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 2/12 >/1
        if( ! refalrts::number_term( 2UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: '2'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], '2');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 3/12 >/1
        if( ! refalrts::number_term( 3UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: '3'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], '3');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 4/12 >/1
        if( ! refalrts::number_term( 4UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: '4'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], '4');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 5/12 >/1
        if( ! refalrts::number_term( 5UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: '5'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], '5');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 6/12 >/1
        if( ! refalrts::number_term( 6UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: '6'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], '6');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 7/12 >/1
        if( ! refalrts::number_term( 7UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: '7'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], '7');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 8/12 >/1
        if( ! refalrts::number_term( 8UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: '8'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], '8');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 9/12 >/1
        if( ! refalrts::number_term( 9UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: '9'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], '9');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 10/12 >/1
        if( ! refalrts::number_term( 10UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: 'A'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], 'A');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 11/12 >/1
        if( ! refalrts::number_term( 11UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: 'B'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], 'B');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 12/12 >/1
        if( ! refalrts::number_term( 12UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: 'C'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], 'C');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 13/12 >/1
        if( ! refalrts::number_term( 13UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: 'D'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], 'D');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 14/12 >/1
        if( ! refalrts::number_term( 14UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: 'E'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], 'E');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 15/12 >/1
        if( ! refalrts::number_term( 15UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '3'/12 HalfReuse: 'F'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '3');
        refalrts::reinit_char(context[1], 'F');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EscapeChar-Hex=1/4 (/9 3/11 )/10 s.Lo/12 >/1
      //DEBUG: s.Lo: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: '3'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '\\');
      refalrts::reinit_char(context[4], 'x');
      refalrts::reinit_char(context[9], '3');
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 s.new3/12 >/1
      if( ! refalrts::number_term( 4UL, context[11] ) )
        continue;
      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 0/12 >/1
        if( ! refalrts::number_term( 0UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: '0'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], '0');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 1/12 >/1
        if( ! refalrts::number_term( 1UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: '1'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], '1');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 2/12 >/1
        if( ! refalrts::number_term( 2UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: '2'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], '2');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 3/12 >/1
        if( ! refalrts::number_term( 3UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: '3'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], '3');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 4/12 >/1
        if( ! refalrts::number_term( 4UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: '4'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], '4');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 5/12 >/1
        if( ! refalrts::number_term( 5UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: '5'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], '5');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 6/12 >/1
        if( ! refalrts::number_term( 6UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: '6'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], '6');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 7/12 >/1
        if( ! refalrts::number_term( 7UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: '7'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], '7');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 8/12 >/1
        if( ! refalrts::number_term( 8UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: '8'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], '8');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 9/12 >/1
        if( ! refalrts::number_term( 9UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: '9'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], '9');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 10/12 >/1
        if( ! refalrts::number_term( 10UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: 'A'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], 'A');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 11/12 >/1
        if( ! refalrts::number_term( 11UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: 'B'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], 'B');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 12/12 >/1
        if( ! refalrts::number_term( 12UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: 'C'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], 'C');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 13/12 >/1
        if( ! refalrts::number_term( 13UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: 'D'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], 'D');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 14/12 >/1
        if( ! refalrts::number_term( 14UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: 'E'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], 'E');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 15/12 >/1
        if( ! refalrts::number_term( 15UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '4'/12 HalfReuse: 'F'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '4');
        refalrts::reinit_char(context[1], 'F');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EscapeChar-Hex=1/4 (/9 4/11 )/10 s.Lo/12 >/1
      //DEBUG: s.Lo: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: '4'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '\\');
      refalrts::reinit_char(context[4], 'x');
      refalrts::reinit_char(context[9], '4');
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 s.new3/12 >/1
    if( ! refalrts::number_term( 5UL, context[11] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 0/12 >/1
      if( ! refalrts::number_term( 0UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: '0'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], '0');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 1/12 >/1
      if( ! refalrts::number_term( 1UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: '1'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], '1');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 2/12 >/1
      if( ! refalrts::number_term( 2UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: '2'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], '2');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 3/12 >/1
      if( ! refalrts::number_term( 3UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: '3'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], '3');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 4/12 >/1
      if( ! refalrts::number_term( 4UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: '4'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], '4');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 5/12 >/1
      if( ! refalrts::number_term( 5UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: '5'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], '5');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 6/12 >/1
      if( ! refalrts::number_term( 6UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: '6'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], '6');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 7/12 >/1
      if( ! refalrts::number_term( 7UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: '7'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], '7');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 8/12 >/1
      if( ! refalrts::number_term( 8UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: '8'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], '8');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 9/12 >/1
      if( ! refalrts::number_term( 9UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: '9'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], '9');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 10/12 >/1
      if( ! refalrts::number_term( 10UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: 'A'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], 'A');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 11/12 >/1
      if( ! refalrts::number_term( 11UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: 'B'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], 'B');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 12/12 >/1
      if( ! refalrts::number_term( 12UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: 'C'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], 'C');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 13/12 >/1
      if( ! refalrts::number_term( 13UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: 'D'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], 'D');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 14/12 >/1
      if( ! refalrts::number_term( 14UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: 'E'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], 'E');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 15/12 >/1
      if( ! refalrts::number_term( 15UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '5'/12 HalfReuse: 'F'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '5');
      refalrts::reinit_char(context[1], 'F');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/9 5/11 )/10 s.Lo/12 >/1
    //DEBUG: s.Lo: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: '5'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
    refalrts::reinit_char(context[0], '\\');
    refalrts::reinit_char(context[4], 'x');
    refalrts::reinit_char(context[9], '5');
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/9 s.new1/11 )/10 s.new2/12 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 s.new3/12 >/1
      if( ! refalrts::number_term( 6UL, context[11] ) )
        continue;
      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 0/12 >/1
        if( ! refalrts::number_term( 0UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: '0'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], '0');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 1/12 >/1
        if( ! refalrts::number_term( 1UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: '1'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], '1');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 2/12 >/1
        if( ! refalrts::number_term( 2UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: '2'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], '2');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 3/12 >/1
        if( ! refalrts::number_term( 3UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: '3'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], '3');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 4/12 >/1
        if( ! refalrts::number_term( 4UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: '4'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], '4');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 5/12 >/1
        if( ! refalrts::number_term( 5UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: '5'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], '5');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 6/12 >/1
        if( ! refalrts::number_term( 6UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: '6'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], '6');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 7/12 >/1
        if( ! refalrts::number_term( 7UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: '7'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], '7');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 8/12 >/1
        if( ! refalrts::number_term( 8UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: '8'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], '8');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 9/12 >/1
        if( ! refalrts::number_term( 9UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: '9'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], '9');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 10/12 >/1
        if( ! refalrts::number_term( 10UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: 'A'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], 'A');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 11/12 >/1
        if( ! refalrts::number_term( 11UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: 'B'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], 'B');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 12/12 >/1
        if( ! refalrts::number_term( 12UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: 'C'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], 'C');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 13/12 >/1
        if( ! refalrts::number_term( 13UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: 'D'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], 'D');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 14/12 >/1
        if( ! refalrts::number_term( 14UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: 'E'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], 'E');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 15/12 >/1
        if( ! refalrts::number_term( 15UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '6'/12 HalfReuse: 'F'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '6');
        refalrts::reinit_char(context[1], 'F');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EscapeChar-Hex=1/4 (/9 6/11 )/10 s.Lo/12 >/1
      //DEBUG: s.Lo: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: '6'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '\\');
      refalrts::reinit_char(context[4], 'x');
      refalrts::reinit_char(context[9], '6');
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 s.new3/12 >/1
      if( ! refalrts::number_term( 7UL, context[11] ) )
        continue;
      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 0/12 >/1
        if( ! refalrts::number_term( 0UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: '0'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], '0');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 1/12 >/1
        if( ! refalrts::number_term( 1UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: '1'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], '1');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 2/12 >/1
        if( ! refalrts::number_term( 2UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: '2'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], '2');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 3/12 >/1
        if( ! refalrts::number_term( 3UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: '3'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], '3');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 4/12 >/1
        if( ! refalrts::number_term( 4UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: '4'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], '4');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 5/12 >/1
        if( ! refalrts::number_term( 5UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: '5'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], '5');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 6/12 >/1
        if( ! refalrts::number_term( 6UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: '6'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], '6');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 7/12 >/1
        if( ! refalrts::number_term( 7UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: '7'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], '7');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 8/12 >/1
        if( ! refalrts::number_term( 8UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: '8'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], '8');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 9/12 >/1
        if( ! refalrts::number_term( 9UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: '9'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], '9');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 10/12 >/1
        if( ! refalrts::number_term( 10UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: 'A'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], 'A');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 11/12 >/1
        if( ! refalrts::number_term( 11UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: 'B'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], 'B');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 12/12 >/1
        if( ! refalrts::number_term( 12UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: 'C'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], 'C');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 13/12 >/1
        if( ! refalrts::number_term( 13UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: 'D'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], 'D');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 14/12 >/1
        if( ! refalrts::number_term( 14UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: 'E'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], 'E');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 15/12 >/1
        if( ! refalrts::number_term( 15UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '7'/12 HalfReuse: 'F'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '7');
        refalrts::reinit_char(context[1], 'F');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EscapeChar-Hex=1/4 (/9 7/11 )/10 s.Lo/12 >/1
      //DEBUG: s.Lo: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: '7'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '\\');
      refalrts::reinit_char(context[4], 'x');
      refalrts::reinit_char(context[9], '7');
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 s.new3/12 >/1
    if( ! refalrts::number_term( 8UL, context[11] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 0/12 >/1
      if( ! refalrts::number_term( 0UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: '0'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], '0');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 1/12 >/1
      if( ! refalrts::number_term( 1UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: '1'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], '1');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 2/12 >/1
      if( ! refalrts::number_term( 2UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: '2'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], '2');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 3/12 >/1
      if( ! refalrts::number_term( 3UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: '3'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], '3');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 4/12 >/1
      if( ! refalrts::number_term( 4UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: '4'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], '4');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 5/12 >/1
      if( ! refalrts::number_term( 5UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: '5'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], '5');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 6/12 >/1
      if( ! refalrts::number_term( 6UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: '6'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], '6');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 7/12 >/1
      if( ! refalrts::number_term( 7UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: '7'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], '7');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 8/12 >/1
      if( ! refalrts::number_term( 8UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: '8'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], '8');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 9/12 >/1
      if( ! refalrts::number_term( 9UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: '9'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], '9');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 10/12 >/1
      if( ! refalrts::number_term( 10UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: 'A'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], 'A');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 11/12 >/1
      if( ! refalrts::number_term( 11UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: 'B'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], 'B');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 12/12 >/1
      if( ! refalrts::number_term( 12UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: 'C'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], 'C');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 13/12 >/1
      if( ! refalrts::number_term( 13UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: 'D'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], 'D');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 14/12 >/1
      if( ! refalrts::number_term( 14UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: 'E'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], 'E');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 15/12 >/1
      if( ! refalrts::number_term( 15UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '8'/12 HalfReuse: 'F'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], '8');
      refalrts::reinit_char(context[1], 'F');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/9 8/11 )/10 s.Lo/12 >/1
    //DEBUG: s.Lo: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: '8'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
    refalrts::reinit_char(context[0], '\\');
    refalrts::reinit_char(context[4], 'x');
    refalrts::reinit_char(context[9], '8');
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/9 s.new1/11 )/10 s.new2/12 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 s.new3/12 >/1
      if( ! refalrts::number_term( 9UL, context[11] ) )
        continue;
      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 0/12 >/1
        if( ! refalrts::number_term( 0UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: '0'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], '0');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 1/12 >/1
        if( ! refalrts::number_term( 1UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: '1'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], '1');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 2/12 >/1
        if( ! refalrts::number_term( 2UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: '2'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], '2');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 3/12 >/1
        if( ! refalrts::number_term( 3UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: '3'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], '3');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 4/12 >/1
        if( ! refalrts::number_term( 4UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: '4'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], '4');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 5/12 >/1
        if( ! refalrts::number_term( 5UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: '5'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], '5');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 6/12 >/1
        if( ! refalrts::number_term( 6UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: '6'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], '6');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 7/12 >/1
        if( ! refalrts::number_term( 7UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: '7'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], '7');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 8/12 >/1
        if( ! refalrts::number_term( 8UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: '8'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], '8');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 9/12 >/1
        if( ! refalrts::number_term( 9UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: '9'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], '9');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 10/12 >/1
        if( ! refalrts::number_term( 10UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: 'A'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], 'A');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 11/12 >/1
        if( ! refalrts::number_term( 11UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: 'B'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], 'B');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 12/12 >/1
        if( ! refalrts::number_term( 12UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: 'C'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], 'C');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 13/12 >/1
        if( ! refalrts::number_term( 13UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: 'D'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], 'D');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 14/12 >/1
        if( ! refalrts::number_term( 14UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: 'E'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], 'E');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 15/12 >/1
        if( ! refalrts::number_term( 15UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: '9'/12 HalfReuse: 'F'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], '9');
        refalrts::reinit_char(context[1], 'F');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EscapeChar-Hex=1/4 (/9 9/11 )/10 s.Lo/12 >/1
      //DEBUG: s.Lo: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: '9'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '\\');
      refalrts::reinit_char(context[4], 'x');
      refalrts::reinit_char(context[9], '9');
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 s.new3/12 >/1
      if( ! refalrts::number_term( 10UL, context[11] ) )
        continue;
      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 0/12 >/1
        if( ! refalrts::number_term( 0UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: '0'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], '0');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 1/12 >/1
        if( ! refalrts::number_term( 1UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: '1'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], '1');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 2/12 >/1
        if( ! refalrts::number_term( 2UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: '2'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], '2');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 3/12 >/1
        if( ! refalrts::number_term( 3UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: '3'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], '3');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 4/12 >/1
        if( ! refalrts::number_term( 4UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: '4'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], '4');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 5/12 >/1
        if( ! refalrts::number_term( 5UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: '5'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], '5');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 6/12 >/1
        if( ! refalrts::number_term( 6UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: '6'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], '6');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 7/12 >/1
        if( ! refalrts::number_term( 7UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: '7'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], '7');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 8/12 >/1
        if( ! refalrts::number_term( 8UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: '8'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], '8');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 9/12 >/1
        if( ! refalrts::number_term( 9UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: '9'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], '9');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 10/12 >/1
        if( ! refalrts::number_term( 10UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: 'A'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], 'A');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 11/12 >/1
        if( ! refalrts::number_term( 11UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: 'B'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], 'B');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 12/12 >/1
        if( ! refalrts::number_term( 12UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: 'C'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], 'C');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 13/12 >/1
        if( ! refalrts::number_term( 13UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: 'D'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], 'D');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 14/12 >/1
        if( ! refalrts::number_term( 14UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: 'E'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], 'E');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 15/12 >/1
        if( ! refalrts::number_term( 15UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'A'/12 HalfReuse: 'F'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'A');
        refalrts::reinit_char(context[1], 'F');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EscapeChar-Hex=1/4 (/9 10/11 )/10 s.Lo/12 >/1
      //DEBUG: s.Lo: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: 'A'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '\\');
      refalrts::reinit_char(context[4], 'x');
      refalrts::reinit_char(context[9], 'A');
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 s.new3/12 >/1
    if( ! refalrts::number_term( 11UL, context[11] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 0/12 >/1
      if( ! refalrts::number_term( 0UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: '0'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], '0');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 1/12 >/1
      if( ! refalrts::number_term( 1UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: '1'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], '1');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 2/12 >/1
      if( ! refalrts::number_term( 2UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: '2'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], '2');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 3/12 >/1
      if( ! refalrts::number_term( 3UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: '3'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], '3');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 4/12 >/1
      if( ! refalrts::number_term( 4UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: '4'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], '4');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 5/12 >/1
      if( ! refalrts::number_term( 5UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: '5'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], '5');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 6/12 >/1
      if( ! refalrts::number_term( 6UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: '6'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], '6');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 7/12 >/1
      if( ! refalrts::number_term( 7UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: '7'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], '7');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 8/12 >/1
      if( ! refalrts::number_term( 8UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: '8'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], '8');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 9/12 >/1
      if( ! refalrts::number_term( 9UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: '9'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], '9');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 10/12 >/1
      if( ! refalrts::number_term( 10UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: 'A'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], 'A');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 11/12 >/1
      if( ! refalrts::number_term( 11UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: 'B'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], 'B');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 12/12 >/1
      if( ! refalrts::number_term( 12UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: 'C'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], 'C');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 13/12 >/1
      if( ! refalrts::number_term( 13UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: 'D'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], 'D');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 14/12 >/1
      if( ! refalrts::number_term( 14UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: 'E'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], 'E');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 15/12 >/1
      if( ! refalrts::number_term( 15UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'B'/12 HalfReuse: 'F'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'B');
      refalrts::reinit_char(context[1], 'F');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/9 11/11 )/10 s.Lo/12 >/1
    //DEBUG: s.Lo: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: 'B'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
    refalrts::reinit_char(context[0], '\\');
    refalrts::reinit_char(context[4], 'x');
    refalrts::reinit_char(context[9], 'B');
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/9 s.new1/11 )/10 s.new2/12 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 s.new3/12 >/1
      if( ! refalrts::number_term( 12UL, context[11] ) )
        continue;
      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 0/12 >/1
        if( ! refalrts::number_term( 0UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: '0'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], '0');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 1/12 >/1
        if( ! refalrts::number_term( 1UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: '1'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], '1');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 2/12 >/1
        if( ! refalrts::number_term( 2UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: '2'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], '2');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 3/12 >/1
        if( ! refalrts::number_term( 3UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: '3'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], '3');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 4/12 >/1
        if( ! refalrts::number_term( 4UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: '4'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], '4');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 5/12 >/1
        if( ! refalrts::number_term( 5UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: '5'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], '5');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 6/12 >/1
        if( ! refalrts::number_term( 6UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: '6'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], '6');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 7/12 >/1
        if( ! refalrts::number_term( 7UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: '7'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], '7');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 8/12 >/1
        if( ! refalrts::number_term( 8UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: '8'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], '8');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 9/12 >/1
        if( ! refalrts::number_term( 9UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: '9'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], '9');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 10/12 >/1
        if( ! refalrts::number_term( 10UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: 'A'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], 'A');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 11/12 >/1
        if( ! refalrts::number_term( 11UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: 'B'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], 'B');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 12/12 >/1
        if( ! refalrts::number_term( 12UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: 'C'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], 'C');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 13/12 >/1
        if( ! refalrts::number_term( 13UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: 'D'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], 'D');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 14/12 >/1
        if( ! refalrts::number_term( 14UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: 'E'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], 'E');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 15/12 >/1
        if( ! refalrts::number_term( 15UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'C'/12 HalfReuse: 'F'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'C');
        refalrts::reinit_char(context[1], 'F');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EscapeChar-Hex=1/4 (/9 12/11 )/10 s.Lo/12 >/1
      //DEBUG: s.Lo: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: 'C'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '\\');
      refalrts::reinit_char(context[4], 'x');
      refalrts::reinit_char(context[9], 'C');
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 s.new3/12 >/1
      if( ! refalrts::number_term( 13UL, context[11] ) )
        continue;
      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 0/12 >/1
        if( ! refalrts::number_term( 0UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: '0'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], '0');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 1/12 >/1
        if( ! refalrts::number_term( 1UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: '1'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], '1');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 2/12 >/1
        if( ! refalrts::number_term( 2UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: '2'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], '2');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 3/12 >/1
        if( ! refalrts::number_term( 3UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: '3'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], '3');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 4/12 >/1
        if( ! refalrts::number_term( 4UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: '4'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], '4');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 5/12 >/1
        if( ! refalrts::number_term( 5UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: '5'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], '5');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 6/12 >/1
        if( ! refalrts::number_term( 6UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: '6'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], '6');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 7/12 >/1
        if( ! refalrts::number_term( 7UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: '7'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], '7');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 8/12 >/1
        if( ! refalrts::number_term( 8UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: '8'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], '8');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 9/12 >/1
        if( ! refalrts::number_term( 9UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: '9'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], '9');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 10/12 >/1
        if( ! refalrts::number_term( 10UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: 'A'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], 'A');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 11/12 >/1
        if( ! refalrts::number_term( 11UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: 'B'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], 'B');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 12/12 >/1
        if( ! refalrts::number_term( 12UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: 'C'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], 'C');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 13/12 >/1
        if( ! refalrts::number_term( 13UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: 'D'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], 'D');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 14/12 >/1
        if( ! refalrts::number_term( 14UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: 'E'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], 'E');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 15/12 >/1
        if( ! refalrts::number_term( 15UL, context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'D'/12 HalfReuse: 'F'/1 ]] }
        refalrts::reinit_char(context[11], '\\');
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[12], 'D');
        refalrts::reinit_char(context[1], 'F');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[11];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & EscapeChar-Hex=1/4 (/9 13/11 )/10 s.Lo/12 >/1
      //DEBUG: s.Lo: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: 'D'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '\\');
      refalrts::reinit_char(context[4], 'x');
      refalrts::reinit_char(context[9], 'D');
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 s.new3/12 >/1
    if( ! refalrts::number_term( 14UL, context[11] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 0/12 >/1
      if( ! refalrts::number_term( 0UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: '0'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], '0');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 1/12 >/1
      if( ! refalrts::number_term( 1UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: '1'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], '1');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 2/12 >/1
      if( ! refalrts::number_term( 2UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: '2'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], '2');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 3/12 >/1
      if( ! refalrts::number_term( 3UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: '3'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], '3');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 4/12 >/1
      if( ! refalrts::number_term( 4UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: '4'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], '4');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 5/12 >/1
      if( ! refalrts::number_term( 5UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: '5'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], '5');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 6/12 >/1
      if( ! refalrts::number_term( 6UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: '6'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], '6');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 7/12 >/1
      if( ! refalrts::number_term( 7UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: '7'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], '7');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 8/12 >/1
      if( ! refalrts::number_term( 8UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: '8'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], '8');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 9/12 >/1
      if( ! refalrts::number_term( 9UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: '9'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], '9');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 10/12 >/1
      if( ! refalrts::number_term( 10UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: 'A'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], 'A');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 11/12 >/1
      if( ! refalrts::number_term( 11UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: 'B'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], 'B');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 12/12 >/1
      if( ! refalrts::number_term( 12UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: 'C'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], 'C');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 13/12 >/1
      if( ! refalrts::number_term( 13UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: 'D'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], 'D');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 14/12 >/1
      if( ! refalrts::number_term( 14UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: 'E'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], 'E');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 15/12 >/1
      if( ! refalrts::number_term( 15UL, context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/11 HalfReuse: 'x'/10 HalfReuse: 'E'/12 HalfReuse: 'F'/1 ]] }
      refalrts::reinit_char(context[11], '\\');
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[12], 'E');
      refalrts::reinit_char(context[1], 'F');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/9 14/11 )/10 s.Lo/12 >/1
    //DEBUG: s.Lo: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: 'E'/9 HalfReuse: </11 HalfReuse: & Hex*16/10 AsIs: s.Lo/12 AsIs: >/1 ]] }
    refalrts::reinit_char(context[0], '\\');
    refalrts::reinit_char(context[4], 'x');
    refalrts::reinit_char(context[9], 'E');
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[10], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EscapeChar-Hex=1/4 (/7 s.new1/9 )/8 s.new2/10 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 s.new3/10 >/1
    if( ! refalrts::number_term( 15UL, context[9] ) )
      continue;
    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 0/10 >/1
      if( ! refalrts::number_term( 0UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: '0'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], '0');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 1/10 >/1
      if( ! refalrts::number_term( 1UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: '1'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], '1');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 2/10 >/1
      if( ! refalrts::number_term( 2UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: '2'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], '2');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 3/10 >/1
      if( ! refalrts::number_term( 3UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: '3'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], '3');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 4/10 >/1
      if( ! refalrts::number_term( 4UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: '4'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], '4');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 5/10 >/1
      if( ! refalrts::number_term( 5UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: '5'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], '5');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 6/10 >/1
      if( ! refalrts::number_term( 6UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: '6'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], '6');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 7/10 >/1
      if( ! refalrts::number_term( 7UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: '7'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], '7');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 8/10 >/1
      if( ! refalrts::number_term( 8UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: '8'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], '8');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 9/10 >/1
      if( ! refalrts::number_term( 9UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: '9'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], '9');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 10/10 >/1
      if( ! refalrts::number_term( 10UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: 'A'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], 'A');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 11/10 >/1
      if( ! refalrts::number_term( 11UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: 'B'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], 'B');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 12/10 >/1
      if( ! refalrts::number_term( 12UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: 'C'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], 'C');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 13/10 >/1
      if( ! refalrts::number_term( 13UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: 'D'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], 'D');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 14/10 >/1
      if( ! refalrts::number_term( 14UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: 'E'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], 'E');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 15/10 >/1
      if( ! refalrts::number_term( 15UL, context[10] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & EscapeChar-Hex=1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/9 HalfReuse: 'x'/8 HalfReuse: 'F'/10 HalfReuse: 'F'/1 ]] }
      refalrts::reinit_char(context[9], '\\');
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_char(context[1], 'F');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & EscapeChar-Hex=1/4 (/7 15/9 )/8 s.Lo/10 >/1
    //DEBUG: s.Lo: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: 'F'/7 HalfReuse: </9 HalfReuse: & Hex*16/8 AsIs: s.Lo/10 AsIs: >/1 ]] }
    refalrts::reinit_char(context[0], '\\');
    refalrts::reinit_char(context[4], 'x');
    refalrts::reinit_char(context[7], 'F');
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[8], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[9] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 0/10 >/1
    if( ! refalrts::number_term( 0UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: '0'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], '0');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 1/10 >/1
    if( ! refalrts::number_term( 1UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: '1'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], '1');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 2/10 >/1
    if( ! refalrts::number_term( 2UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: '2'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], '2');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 3/10 >/1
    if( ! refalrts::number_term( 3UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: '3'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], '3');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 4/10 >/1
    if( ! refalrts::number_term( 4UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: '4'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], '4');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 5/10 >/1
    if( ! refalrts::number_term( 5UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: '5'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], '5');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 6/10 >/1
    if( ! refalrts::number_term( 6UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: '6'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], '6');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 7/10 >/1
    if( ! refalrts::number_term( 7UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: '7'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], '7');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 8/10 >/1
    if( ! refalrts::number_term( 8UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: '8'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], '8');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 9/10 >/1
    if( ! refalrts::number_term( 9UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: '9'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], '9');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 10/10 >/1
    if( ! refalrts::number_term( 10UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: 'A'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], 'A');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 11/10 >/1
    if( ! refalrts::number_term( 11UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: 'B'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], 'B');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 12/10 >/1
    if( ! refalrts::number_term( 12UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: 'C'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], 'C');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 13/10 >/1
    if( ! refalrts::number_term( 13UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: 'D'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], 'D');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 14/10 >/1
    if( ! refalrts::number_term( 14UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: 'E'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], 'E');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 15/10 >/1
    if( ! refalrts::number_term( 15UL, context[10] ) )
      continue;
    //DEBUG: s.Hi: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\\'/1 } Tile{ HalfReuse: 'x'/0 HalfReuse: </4 HalfReuse: & Hex*16/7 AsIs: s.Hi/9 HalfReuse: >/8 HalfReuse: 'F'/10 } Tile{ ]] }
    refalrts::reinit_char(context[1], '\\');
    refalrts::reinit_char(context[0], 'x');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_char(context[10], 'F');
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & EscapeChar-Hex=1/4 (/7 s.Hi/9 )/8 s.Lo/10 >/1
  //DEBUG: s.Hi: 9
  //DEBUG: s.Lo: 10

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '\\'/0 HalfReuse: 'x'/4 HalfReuse: </7 } & Hex*16/11 Tile{ AsIs: s.Hi/9 } >/12 </13 Tile{ HalfReuse: & Hex*16/8 AsIs: s.Lo/10 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Hex_D16]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_char(context[0], '\\');
  refalrts::reinit_char(context[4], 'x');
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_Hex_D16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_EscapeCharm_Hex_A1("EscapeChar-Hex=1", COOKIE1_, COOKIE2_, func_gen_EscapeCharm_Hex_A1);


static refalrts::FnResult func_EscapeCharm_Hex(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & EscapeChar-Hex/4 s.Code/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Code: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & EscapeChar-Hex=1/7 Tile{ AsIs: </0 Reuse: & Divmod/4 AsIs: s.Code/5 HalfReuse: 16/1 } >/8 >/9 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_EscapeCharm_Hex_A1]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_Divmod]);
  refalrts::reinit_number(context[1], 16UL);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_EscapeCharm_Hex("EscapeChar-Hex", COOKIE1_, COOKIE2_, func_EscapeCharm_Hex);


static refalrts::FnResult func_Hex(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Hex/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Hex/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Hex/4 0/5 >/1
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 0/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '0'/1 ]] }
    refalrts::reinit_char(context[1], '0');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 1/5 >/1
    if( ! refalrts::number_term( 1UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '1'/1 ]] }
    refalrts::reinit_char(context[1], '1');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 2/5 >/1
    if( ! refalrts::number_term( 2UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 2/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '2'/1 ]] }
    refalrts::reinit_char(context[1], '2');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 3/5 >/1
    if( ! refalrts::number_term( 3UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 3/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '3'/1 ]] }
    refalrts::reinit_char(context[1], '3');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 4/5 >/1
    if( ! refalrts::number_term( 4UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 4/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '4'/1 ]] }
    refalrts::reinit_char(context[1], '4');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 5/5 >/1
    if( ! refalrts::number_term( 5UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 5/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '5'/1 ]] }
    refalrts::reinit_char(context[1], '5');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 6/5 >/1
    if( ! refalrts::number_term( 6UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 6/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '6'/1 ]] }
    refalrts::reinit_char(context[1], '6');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 7/5 >/1
    if( ! refalrts::number_term( 7UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 7/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '7'/1 ]] }
    refalrts::reinit_char(context[1], '7');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 8/5 >/1
    if( ! refalrts::number_term( 8UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 8/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '8'/1 ]] }
    refalrts::reinit_char(context[1], '8');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 9/5 >/1
    if( ! refalrts::number_term( 9UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 9/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '9'/1 ]] }
    refalrts::reinit_char(context[1], '9');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 10/5 >/1
    if( ! refalrts::number_term( 10UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 10/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'A'/1 ]] }
    refalrts::reinit_char(context[1], 'A');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 11/5 >/1
    if( ! refalrts::number_term( 11UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 11/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'B'/1 ]] }
    refalrts::reinit_char(context[1], 'B');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 12/5 >/1
    if( ! refalrts::number_term( 12UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 12/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'C'/1 ]] }
    refalrts::reinit_char(context[1], 'C');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 13/5 >/1
    if( ! refalrts::number_term( 13UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 13/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'D'/1 ]] }
    refalrts::reinit_char(context[1], 'D');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 14/5 >/1
    if( ! refalrts::number_term( 14UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 14/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'E'/1 ]] }
    refalrts::reinit_char(context[1], 'E');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Hex/4 15/5 >/1
  if( ! refalrts::number_term( 15UL, context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Hex/4 15/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 'F'/1 ]] }
  refalrts::reinit_char(context[1], 'F');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Hex("Hex", COOKIE1_, COOKIE2_, func_Hex);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Map@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@1/4 (/7 e./11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e. as range 11
      // closed e.Tail as range 9
      //DEBUG: e.: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=1/4 AsIs: (/7 AsIs: e./11 AsIs: )/8 } </13 & LoadBytes/14 e./11/15 >/17 >/18 </19 & Map@1/20 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_LoadBytes]);
      refalrts::copy_evar(vm, context[15], context[16], context[11], context[12]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z1]);
      refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[13], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile*1/4 AsIs: t.Next/7 } >/11 </12 & Map@1/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ProcessFile@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@2/4 t.Next/7 e.Tail/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail as range 5
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CommentLine/4 AsIs: t.Next/7 } >/9 </10 & Map@2/11 Tile{ AsIs: e.Tail/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_CommentLine]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CommentLine@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CommentLine_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@3/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@3/4 (/7 s.No/13 s.Func/14 s.Type/15 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      //DEBUG: e.Tail: 9
      //DEBUG: s.No: 13
      //DEBUG: s.Func: 14
      //DEBUG: s.Type: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.No/13 s.Func/14 s.Type/15 {REMOVED TILE}
      //RESULT: Tile{ [[ } (/16 Tile{ AsIs: </0 Reuse: & Explode/4 HalfReuse: s.Func14 /7 } >/17 )/18 </19 Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_Explode]);
      refalrts::reinit_svar( context[7], context[14] );
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[16], context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CleanupBuiltins\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@3/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z3]);
    refalrts::update_name(context[4], functions[efunc_gen_CleanupBuiltins_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CleanupBuiltins\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CleanupBuiltins_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Map@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@4/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@4/4 (/7 e./11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e. as range 11
      // closed e.Tail as range 9
      //DEBUG: e.: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/13"$EXTERN "/14 Tile{ AsIs: </0 Reuse: & FormatWord:1/4 HalfReuse: </7 } & Type/16 Tile{ AsIs: e./11 } >/17 >/18 ';'/19 )/20 </21 Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[13]);
      refalrts::alloc_chars(vm, context[14], context[15], "$EXTERN ", 8);
      refalrts::alloc_name(vm, context[16], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_char(vm, context[19], ';');
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_FormatWord_B1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[13], context[20] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[17], context[21] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[13], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=5\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@4/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A5L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ProcessFile=5\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A5L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@5/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@5/4 (/7 e./11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e. as range 11
      // closed e.Tail as range 9
      //DEBUG: e.: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e./11 } Tile{ AsIs: (/7 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@5/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z5]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=5\2*1/4 AsIs: t.Next/7 } >/11 </12 & Map@5/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z5]);
    refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A5L2D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ProcessFile=5\2@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A5L2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@6/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@6/4 (/7 e./11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e. as range 11
      // closed e.Tail as range 9
      //DEBUG: e.: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@2/4 } Tile{ AsIs: e./11 } Tile{ HalfReuse: >/7 } </13 Tile{ HalfReuse: & Map@6/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ProcessFile=5\3*1/4 AsIs: t.Next/7 } >/11 </12 & Map@6/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z6]);
    refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A5L3D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ProcessFile=5\3@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ProcessFile_A5L3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_Map_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & Map@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@7/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@7/4 (/7 t.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
      if( ! context[14] )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@7/4 (/7 t.new6/13 (/21 e.new7/19 s.new8/25 s.new9/24 s.new10/23 )/22 )/8 e.new11/17 >/1
        context[15] = context[11];
        context[16] = context[12];
        context[17] = context[9];
        context[18] = context[10];
        context[19] = 0;
        context[20] = 0;
        context[21] = refalrts::brackets_left( context[19], context[20], context[15], context[16] );
        if( ! context[21] )
          continue;
        refalrts::bracket_pointers(context[21], context[22]);
        if( ! refalrts::empty_seq( context[15], context[16] ) )
          continue;
        // closed e.new11 as range 17
        if( ! refalrts::svar_right( context[23], context[19], context[20] ) )
          continue;
        if( ! refalrts::svar_right( context[24], context[19], context[20] ) )
          continue;
        if( ! refalrts::svar_right( context[25], context[19], context[20] ) )
          continue;
        // closed e.new7 as range 19
        do {
          // </0 & Map@7/4 (/7 t./13 (/21 s.Offset/25 # BUILT_IN/24 s.No/23 )/22 )/8 e.Tail/26 >/1
          context[26] = context[17];
          context[27] = context[18];
          if( ! refalrts::ident_term( identifiers[ident_BUILTu_IN], context[24] ) )
            continue;
          if( ! refalrts::empty_seq( context[19], context[20] ) )
            continue;
          // closed e.Tail as range 26
          //DEBUG: t.: 13
          //DEBUG: s.Offset: 25
          //DEBUG: s.No: 23
          //DEBUG: e.Tail: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Map@7/4 (/7 t./13 (/21 s.Offset/25 # BUILT_IN/24 s.No/23 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </22 HalfReuse: & Map@7/8 AsIs: e.Tail/26 AsIs: >/1 ]] }
          refalrts::reinit_open_call(context[22]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z7]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[22];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@7/4 (/7 t./13 (/21 s.Offset/30 # BUILT_IN1/25 s.No1/24 s.No2/23 )/22 )/8 e.Tail/28 >/1
        context[26] = context[19];
        context[27] = context[20];
        context[28] = context[17];
        context[29] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_BUILTu_IN1], context[25] ) )
          continue;
        // closed e.Tail as range 28
        if( ! refalrts::svar_left( context[30], context[26], context[27] ) )
          continue;
        if( ! refalrts::empty_seq( context[26], context[27] ) )
          continue;
        //DEBUG: t.: 13
        //DEBUG: s.No1: 24
        //DEBUG: s.No2: 23
        //DEBUG: e.Tail: 28
        //DEBUG: s.Offset: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Map@7/4 (/7 t./13 (/21 s.Offset/30 # BUILT_IN1/25 s.No1/24 s.No2/23 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </22 HalfReuse: & Map@7/8 AsIs: e.Tail/28 AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[22]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z7]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[22];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@7/4 (/7 (/13 s.Offset/21 s.DeclCommand/22 e.3/19 )/14 e.0/15 )/8 e.Tail/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[9];
      context[18] = context[10];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.0 as range 15
      // closed e.Tail as range 17
      if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
        continue;
      if( ! refalrts::svar_left( context[22], context[19], context[20] ) )
        continue;
      // closed e.3 as range 19
      //DEBUG: e.0: 15
      //DEBUG: e.Tail: 17
      //DEBUG: s.Offset: 21
      //DEBUG: s.DeclCommand: 22
      //DEBUG: e.3: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecompileFunction$3=1/4 AsIs: (/7 } Tile{ AsIs: e.3/19 } Tile{ AsIs: )/14 } Tile{ AsIs: s.DeclCommand/22 } </23 & Decompile-Pattern-Hole@1/24 Tile{ AsIs: (/13 } 1/25 )/26 (/27 2/28 )/29 (/30 )/31 Tile{ AsIs: e.0/15 } >/32 >/33 </34 Tile{ HalfReuse: & Map@7/8 AsIs: e.Tail/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_gen_Decompilem_Patternm_Hole_Z1]);
      refalrts::alloc_number(vm, context[25], 1UL);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_number(vm, context[28], 2UL);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_S3A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[27], context[29] );
      refalrts::link_brackets( context[13], context[26] );
      refalrts::link_brackets( context[7], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[25], context[31] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@7/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DecompileFunction*3/4 AsIs: t.Next/7 } >/11 </12 & Map@7/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z7]);
    refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_D3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@7/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@7/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@7/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & DecompileFunction@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DecompileFunction_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z7("Map@7", COOKIE1_, COOKIE2_, func_gen_Map_Z7);


static refalrts::FnResult func_gen_DecodeCommands_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DecodeCommands@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & DecodeCommands@1/4 s.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & DecodeCommands@1/4 1/7 e.Name/10 0/14 e.Bytes/12 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 1UL, context[7] ) )
        continue;
      context[10] = 0;
      context[11] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[12] = context[8];
        context[13] = context[9];
        context[14] = refalrts::number_left( 0UL, context[12], context[13] );
        if( ! context[14] )
          continue;
        // closed e.Bytes as range 12
        //DEBUG: e.Name: 10
        //DEBUG: e.Bytes: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: # ACT_EXTRN/7 } </15 & Chr/16 Tile{ AsIs: e.Name/10 } >/17 )/18 </19 & DecodeCommands/20 Tile{ Reuse: 5/14 AsIs: e.Bytes/12 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[15]);
        refalrts::alloc_name(vm, context[16], functions[efunc_Chr]);
        refalrts::alloc_close_call(vm, context[17]);
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_DecodeCommands]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_ident(context[7], identifiers[ident_ACTu_EXTRN]);
        refalrts::update_number(context[14], 5UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[0], context[18] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[17], context[20] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[10], context[11], context[8], context[9] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 2/7 s.1/10 s.2/11 s.3/12 s.4/13 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 2UL, context[7] ) )
        continue;
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[8], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[12], context[8], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[13], context[8], context[9] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: s.1: 10
      //DEBUG: s.2: 11
      //DEBUG: s.3: 12
      //DEBUG: s.4: 13
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 0/15 Tile{ HalfReuse: # ACT1/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/11 AsIs: s.3/12 AsIs: s.4/13 } >/16 )/17 </18 & DecodeCommands/19 5/20 Tile{ AsIs: e.Bytes/8 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::alloc_number(vm, context[15], 0UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[20], 5UL);
      refalrts::reinit_ident(context[0], identifiers[ident_ACT1]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[14], context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[16], context[20] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 3/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 3UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # BL/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_BL]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 4/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 4UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # BLR/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_BLR]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 5/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 5UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # BR/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_BR]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 6/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 6UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # CL/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_CL]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 s.new3/7 s.new4/10 e.new5/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      // closed e.new5 as range 8
      do {
        // </0 & DecodeCommands@1/4 7/7 s.Char/10 e.Bytes/11 >/1
        context[11] = context[8];
        context[12] = context[9];
        if( ! refalrts::number_term( 7UL, context[7] ) )
          continue;
        // closed e.Bytes as range 11
        //DEBUG: s.Char: 10
        //DEBUG: e.Bytes: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: # SYM/7 AsIs: s.Char/10 } </13 & Chr/14 s.Char/10/15 >/16 )/17 </18 & DecodeCommands/19 2/20 Tile{ AsIs: e.Bytes/11 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[13]);
        refalrts::alloc_name(vm, context[14], functions[efunc_Chr]);
        refalrts::copy_stvar(vm, context[15], context[10]);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[20], 2UL);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_ident(context[7], identifiers[ident_SYM]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[0], context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[13], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands@1/4 8/7 s.Char/10 e.Bytes/11 >/1
      context[11] = context[8];
      context[12] = context[9];
      if( ! refalrts::number_term( 8UL, context[7] ) )
        continue;
      // closed e.Bytes as range 11
      //DEBUG: s.Char: 10
      //DEBUG: e.Bytes: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: # SYMR/7 AsIs: s.Char/10 } </13 & Chr/14 s.Char/10/15 >/16 )/17 </18 & DecodeCommands/19 2/20 Tile{ AsIs: e.Bytes/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Chr]);
      refalrts::copy_stvar(vm, context[15], context[10]);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[20], 2UL);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 0UL);
      refalrts::reinit_ident(context[7], identifiers[ident_SYMR]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[0], context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 10/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 10UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # EMP/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_EMP]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 s.new3/7 s.new4/10 s.new5/11 s.new6/12 s.new7/13 e.new8/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[8], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[12], context[8], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[13], context[8], context[9] ) )
        continue;
      // closed e.new8 as range 8
      do {
        // </0 & DecodeCommands@1/4 13/7 s.1/10 s.2/11 s.3/12 s.4/13 e.Bytes/14 >/1
        context[14] = context[8];
        context[15] = context[9];
        if( ! refalrts::number_term( 13UL, context[7] ) )
          continue;
        // closed e.Bytes as range 14
        //DEBUG: s.1: 10
        //DEBUG: s.2: 11
        //DEBUG: s.3: 12
        //DEBUG: s.4: 13
        //DEBUG: e.Bytes: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/16 0/17 Tile{ HalfReuse: # MULE/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/11 AsIs: s.3/12 AsIs: s.4/13 } >/18 )/19 </20 & DecodeCommands/21 5/22 Tile{ AsIs: e.Bytes/14 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[16]);
        refalrts::alloc_number(vm, context[17], 0UL);
        refalrts::alloc_close_call(vm, context[18]);
        refalrts::alloc_close_bracket(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[22], 5UL);
        refalrts::reinit_ident(context[0], identifiers[ident_MULE]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[16], context[19] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[14], context[15] );
        res = refalrts::splice_evar( res, context[18], context[22] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands@1/4 14/7 s.1/10 s.2/11 s.3/12 s.4/13 e.Bytes/14 >/1
      context[14] = context[8];
      context[15] = context[9];
      if( ! refalrts::number_term( 14UL, context[7] ) )
        continue;
      // closed e.Bytes as range 14
      //DEBUG: s.1: 10
      //DEBUG: s.2: 11
      //DEBUG: s.3: 12
      //DEBUG: s.4: 13
      //DEBUG: e.Bytes: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/16 0/17 Tile{ HalfReuse: # MULS/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/11 AsIs: s.3/12 AsIs: s.4/13 } >/18 )/19 </20 & DecodeCommands/21 5/22 Tile{ AsIs: e.Bytes/14 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_number(vm, context[17], 0UL);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[22], 5UL);
      refalrts::reinit_ident(context[0], identifiers[ident_MULS]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[16], context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 16/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 16UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # PLEN/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_PLEN]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 17/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 17UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # PLENS/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_PLENS]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 18/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 18UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # PLENP/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_PLENP]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 19/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 19UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # PS/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_PS]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 20/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 20UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # PSR/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_PSR]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 s.new3/7 s.new4/10 e.new5/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      // closed e.new5 as range 8
      do {
        // </0 & DecodeCommands@1/4 23/7 s.No/10 e.Bytes/11 >/1
        context[11] = context[8];
        context[12] = context[9];
        if( ! refalrts::number_term( 23UL, context[7] ) )
          continue;
        // closed e.Bytes as range 11
        //DEBUG: s.No: 10
        //DEBUG: e.Bytes: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: # OEXP/7 AsIs: s.No/10 } )/13 </14 & DecodeCommands/15 2/16 Tile{ AsIs: e.Bytes/11 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[13]);
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[16], 2UL);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_ident(context[7], identifiers[ident_OEXP]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::link_brackets( context[0], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[13], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 24/7 s.No/10 e.Bytes/11 >/1
        context[11] = context[8];
        context[12] = context[9];
        if( ! refalrts::number_term( 24UL, context[7] ) )
          continue;
        // closed e.Bytes as range 11
        //DEBUG: s.No: 10
        //DEBUG: e.Bytes: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: # OEXPR/7 AsIs: s.No/10 } )/13 </14 & DecodeCommands/15 2/16 Tile{ AsIs: e.Bytes/11 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[13]);
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[16], 2UL);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_ident(context[7], identifiers[ident_OEXPR]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::link_brackets( context[0], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[13], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 25/7 s.No/10 e.Bytes/11 >/1
        context[11] = context[8];
        context[12] = context[9];
        if( ! refalrts::number_term( 25UL, context[7] ) )
          continue;
        // closed e.Bytes as range 11
        //DEBUG: s.No: 10
        //DEBUG: e.Bytes: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: # OVSYM/7 AsIs: s.No/10 } )/13 </14 & DecodeCommands/15 2/16 Tile{ AsIs: e.Bytes/11 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[13]);
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[16], 2UL);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_ident(context[7], identifiers[ident_OVSYM]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::link_brackets( context[0], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[13], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands@1/4 26/7 s.No/10 e.Bytes/11 >/1
      context[11] = context[8];
      context[12] = context[9];
      if( ! refalrts::number_term( 26UL, context[7] ) )
        continue;
      // closed e.Bytes as range 11
      //DEBUG: s.No: 10
      //DEBUG: e.Bytes: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: # OVSYMR/7 AsIs: s.No/10 } )/13 </14 & DecodeCommands/15 2/16 Tile{ AsIs: e.Bytes/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[16], 2UL);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 0UL);
      refalrts::reinit_ident(context[7], identifiers[ident_OVSYMR]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[14] );
      refalrts::link_brackets( context[0], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 27/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 27UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # TERM/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_TERM]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 28/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 28UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # TERMR/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_TERMR]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 s.new3/7 s.new4/10 e.new5/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      // closed e.new5 as range 8
      do {
        // </0 & DecodeCommands@1/4 29/7 s.Number/10 e.Bytes/11 >/1
        context[11] = context[8];
        context[12] = context[9];
        if( ! refalrts::number_term( 29UL, context[7] ) )
          continue;
        // closed e.Bytes as range 11
        //DEBUG: s.Number: 10
        //DEBUG: e.Bytes: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: # RDY/7 AsIs: s.Number/10 } )/13 </14 & DecodeCommands/15 2/16 Tile{ AsIs: e.Bytes/11 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[13]);
        refalrts::alloc_open_call(vm, context[14]);
        refalrts::alloc_name(vm, context[15], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[16], 2UL);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_ident(context[7], identifiers[ident_RDY]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::link_brackets( context[0], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[13], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands@1/4 34/7 s.L1/10 s.L2/13 s.L3/14 s.L4/15 s.R1/16 s.R2/17 s.R3/18 s.R4/19 e.Bytes/11 >/1
      context[11] = context[8];
      context[12] = context[9];
      if( ! refalrts::number_term( 34UL, context[7] ) )
        continue;
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[16], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[17], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[19], context[11], context[12] ) )
        continue;
      // closed e.Bytes as range 11
      //DEBUG: s.L1: 10
      //DEBUG: s.L2: 13
      //DEBUG: s.L3: 14
      //DEBUG: s.L4: 15
      //DEBUG: s.R1: 16
      //DEBUG: s.R2: 17
      //DEBUG: s.R3: 18
      //DEBUG: s.R4: 19
      //DEBUG: e.Bytes: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/20 0/21 Tile{ HalfReuse: # SETB/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.L1/10 AsIs: s.L2/13 AsIs: s.L3/14 AsIs: s.L4/15 } >/22 </23 & MakeDWord/24 Tile{ AsIs: s.R1/16 AsIs: s.R2/17 AsIs: s.R3/18 AsIs: s.R4/19 } >/25 )/26 </27 & DecodeCommands/28 9/29 Tile{ AsIs: e.Bytes/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_number(vm, context[21], 0UL);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_MakeDWord]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[29], 9UL);
      refalrts::reinit_ident(context[0], identifiers[ident_SETB]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[20], context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[25], context[29] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[0], context[15] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 35/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 35UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # LEN/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_LEN]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 36/7 s.Char/10 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 36UL, context[7] ) )
        continue;
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: s.Char: 10
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 0/12 # LENS/13 </14 & Chr/15 Tile{ AsIs: s.Char/10 } >/16 )/17 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 2/7 } Tile{ AsIs: e.Bytes/8 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::alloc_number(vm, context[12], 0UL);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_LENS]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Chr]);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[11], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 37/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 37UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # LENP/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_LENP]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 s.new3/7 s.new4/10 e.new5/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      // closed e.new5 as range 8
      do {
        // </0 & DecodeCommands@1/4 39/7 s.Count/10 e.Bytes/11 >/1
        context[11] = context[8];
        context[12] = context[9];
        if( ! refalrts::number_term( 39UL, context[7] ) )
          continue;
        // closed e.Bytes as range 11
        //DEBUG: s.Count: 10
        //DEBUG: e.Bytes: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </13 & DecodeCommands$28=1@1/14 Tile{ HalfReuse: s.Count10 /0 HalfReuse: </4 HalfReuse: & First/7 AsIs: s.Count/10 AsIs: e.Bytes/11 AsIs: >/1 } >/15 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[13]);
        refalrts::alloc_name(vm, context[14], functions[efunc_gen_DecodeCommands_S28A1Z1]);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::reinit_svar( context[0], context[10] );
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_First]);
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 40/7 s.Count/10 e.Bytes/11 >/1
        context[11] = context[8];
        context[12] = context[9];
        if( ! refalrts::number_term( 40UL, context[7] ) )
          continue;
        // closed e.Bytes as range 11
        //DEBUG: s.Count: 10
        //DEBUG: e.Bytes: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </13 & DecodeCommands$29=1@1/14 Tile{ HalfReuse: s.Count10 /0 HalfReuse: </4 HalfReuse: & First/7 AsIs: s.Count/10 AsIs: e.Bytes/11 AsIs: >/1 } >/15 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[13]);
        refalrts::alloc_name(vm, context[14], functions[efunc_gen_DecodeCommands_S29A1Z1]);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::reinit_svar( context[0], context[10] );
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_First]);
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 41/7 s.Count/10 e.Bytes/11 >/1
        context[11] = context[8];
        context[12] = context[9];
        if( ! refalrts::number_term( 41UL, context[7] ) )
          continue;
        // closed e.Bytes as range 11
        //DEBUG: s.Count: 10
        //DEBUG: e.Bytes: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </13 & DecodeCommands$30=1@1/14 Tile{ HalfReuse: s.Count10 /0 HalfReuse: </4 HalfReuse: & First/7 AsIs: s.Count/10 AsIs: e.Bytes/11 AsIs: >/1 } >/15 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[13]);
        refalrts::alloc_name(vm, context[14], functions[efunc_gen_DecodeCommands_S30A1Z1]);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::reinit_svar( context[0], context[10] );
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_First]);
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 43/7 s.Char/10 e.Bytes/11 >/1
        context[11] = context[8];
        context[12] = context[9];
        if( ! refalrts::number_term( 43UL, context[7] ) )
          continue;
        // closed e.Bytes as range 11
        //DEBUG: s.Char: 10
        //DEBUG: e.Bytes: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: # NS/7 AsIs: s.Char/10 } </13 & Chr/14 s.Char/10/15 >/16 )/17 </18 & DecodeCommands/19 2/20 Tile{ AsIs: e.Bytes/11 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[13]);
        refalrts::alloc_name(vm, context[14], functions[efunc_Chr]);
        refalrts::copy_stvar(vm, context[15], context[10]);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_open_call(vm, context[18]);
        refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[20], 2UL);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_ident(context[7], identifiers[ident_NS]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[0], context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[13], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands@1/4 s.new6/7 s.new7/10 s.new8/13 s.new9/14 s.new10/15 e.new11/11 >/1
      context[11] = context[8];
      context[12] = context[9];
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      // closed e.new11 as range 11
      do {
        // </0 & DecodeCommands@1/4 45/7 s.1/10 s.2/13 s.3/14 s.4/15 e.Bytes/16 >/1
        context[16] = context[11];
        context[17] = context[12];
        if( ! refalrts::number_term( 45UL, context[7] ) )
          continue;
        // closed e.Bytes as range 16
        //DEBUG: s.1: 10
        //DEBUG: s.2: 13
        //DEBUG: s.3: 14
        //DEBUG: s.4: 15
        //DEBUG: e.Bytes: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 0/19 Tile{ HalfReuse: # TPLE/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/13 AsIs: s.3/14 AsIs: s.4/15 } >/20 )/21 </22 & DecodeCommands/23 5/24 Tile{ AsIs: e.Bytes/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_number(vm, context[19], 0UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[24], 5UL);
        refalrts::reinit_ident(context[0], identifiers[ident_TPLE]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::link_brackets( context[18], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[24] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 46/7 s.1/10 s.2/13 s.3/14 s.4/15 e.Bytes/16 >/1
        context[16] = context[11];
        context[17] = context[12];
        if( ! refalrts::number_term( 46UL, context[7] ) )
          continue;
        // closed e.Bytes as range 16
        //DEBUG: s.1: 10
        //DEBUG: s.2: 13
        //DEBUG: s.3: 14
        //DEBUG: s.4: 15
        //DEBUG: e.Bytes: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 0/19 Tile{ HalfReuse: # TPLS/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/13 AsIs: s.3/14 AsIs: s.4/15 } >/20 )/21 </22 & DecodeCommands/23 5/24 Tile{ AsIs: e.Bytes/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_number(vm, context[19], 0UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[24], 5UL);
        refalrts::reinit_ident(context[0], identifiers[ident_TPLS]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::link_brackets( context[18], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[24] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands@1/4 47/7 s.1/10 s.2/13 s.3/14 s.4/15 e.Bytes/16 >/1
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::number_term( 47UL, context[7] ) )
        continue;
      // closed e.Bytes as range 16
      //DEBUG: s.1: 10
      //DEBUG: s.2: 13
      //DEBUG: s.3: 14
      //DEBUG: s.4: 15
      //DEBUG: e.Bytes: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/18 0/19 Tile{ HalfReuse: # TRAN/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/13 AsIs: s.3/14 AsIs: s.4/15 } >/20 )/21 </22 & DecodeCommands/23 5/24 Tile{ AsIs: e.Bytes/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_number(vm, context[19], 0UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[24], 5UL);
      refalrts::reinit_ident(context[0], identifiers[ident_TRAN]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[18], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_evar( res, context[0], context[15] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 48/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 48UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # VSYM/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_VSYM]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 49/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 49UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # VSYMR/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_VSYMR]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 50/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 50UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # OUTEST/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_OUTEST]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 51/7 s.1/10 s.2/11 s.3/12 s.4/13 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 51UL, context[7] ) )
        continue;
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[8], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[12], context[8], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[13], context[8], context[9] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: s.1: 10
      //DEBUG: s.2: 11
      //DEBUG: s.3: 12
      //DEBUG: s.4: 13
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 0/15 Tile{ HalfReuse: # ECOND/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/11 AsIs: s.3/12 AsIs: s.4/13 } >/16 )/17 </18 & DecodeCommands/19 5/20 Tile{ AsIs: e.Bytes/8 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::alloc_number(vm, context[15], 0UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[20], 5UL);
      refalrts::reinit_ident(context[0], identifiers[ident_ECOND]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[14], context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[16], context[20] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 52/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 52UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # POPVF/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_POPVF]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 53/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 53UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # PUSHVF/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_PUSHVF]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 54/7 e.Bytes/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 54UL, context[7] ) )
        continue;
      // closed e.Bytes as range 8
      //DEBUG: e.Bytes: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/10 0/11 # STLEN/12 )/13 Tile{ AsIs: </0 Reuse: & DecodeCommands/4 Reuse: 1/7 AsIs: e.Bytes/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[10]);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_STLEN]);
      refalrts::alloc_close_bracket(vm, context[13]);
      refalrts::update_name(context[4], functions[efunc_DecodeCommands]);
      refalrts::update_number(context[7], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DecodeCommands@1/4 s.new3/7 s.new4/10 e.new5/8 >/1
    context[8] = context[5];
    context[9] = context[6];
    if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
      continue;
    // closed e.new5 as range 8
    do {
      // </0 & DecodeCommands@1/4 s.new6/7 s.new7/10 s.new8/13 s.new9/14 s.new10/15 e.new11/11 >/1
      context[11] = context[8];
      context[12] = context[9];
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      // closed e.new11 as range 11
      do {
        // </0 & DecodeCommands@1/4 55/7 s.1/10 s.2/13 s.3/14 s.4/15 e.Bytes/16 >/1
        context[16] = context[11];
        context[17] = context[12];
        if( ! refalrts::number_term( 55UL, context[7] ) )
          continue;
        // closed e.Bytes as range 16
        //DEBUG: s.1: 10
        //DEBUG: s.2: 13
        //DEBUG: s.3: 14
        //DEBUG: s.4: 15
        //DEBUG: e.Bytes: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 0/19 Tile{ HalfReuse: # CSYM/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/13 AsIs: s.3/14 AsIs: s.4/15 } >/20 )/21 </22 & DecodeCommands/23 5/24 Tile{ AsIs: e.Bytes/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_number(vm, context[19], 0UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[24], 5UL);
        refalrts::reinit_ident(context[0], identifiers[ident_CSYM]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::link_brackets( context[18], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[24] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 56/7 s.1/10 s.2/13 s.3/14 s.4/15 e.Bytes/16 >/1
        context[16] = context[11];
        context[17] = context[12];
        if( ! refalrts::number_term( 56UL, context[7] ) )
          continue;
        // closed e.Bytes as range 16
        //DEBUG: s.1: 10
        //DEBUG: s.2: 13
        //DEBUG: s.3: 14
        //DEBUG: s.4: 15
        //DEBUG: e.Bytes: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 0/19 Tile{ HalfReuse: # CSYMR/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/13 AsIs: s.3/14 AsIs: s.4/15 } >/20 )/21 </22 & DecodeCommands/23 5/24 Tile{ AsIs: e.Bytes/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_number(vm, context[19], 0UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[24], 5UL);
        refalrts::reinit_ident(context[0], identifiers[ident_CSYMR]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::link_brackets( context[18], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[24] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 57/7 s.1/10 s.2/13 s.3/14 s.4/15 e.Bytes/16 >/1
        context[16] = context[11];
        context[17] = context[12];
        if( ! refalrts::number_term( 57UL, context[7] ) )
          continue;
        // closed e.Bytes as range 16
        //DEBUG: s.1: 10
        //DEBUG: s.2: 13
        //DEBUG: s.3: 14
        //DEBUG: s.4: 15
        //DEBUG: e.Bytes: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 0/19 Tile{ HalfReuse: # NSYM/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/13 AsIs: s.3/14 AsIs: s.4/15 } >/20 )/21 </22 & DecodeCommands/23 5/24 Tile{ AsIs: e.Bytes/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_number(vm, context[19], 0UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[24], 5UL);
        refalrts::reinit_ident(context[0], identifiers[ident_NSYM]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::link_brackets( context[18], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[24] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 58/7 s.1/10 s.2/13 s.3/14 s.4/15 e.Bytes/16 >/1
        context[16] = context[11];
        context[17] = context[12];
        if( ! refalrts::number_term( 58UL, context[7] ) )
          continue;
        // closed e.Bytes as range 16
        //DEBUG: s.1: 10
        //DEBUG: s.2: 13
        //DEBUG: s.3: 14
        //DEBUG: s.4: 15
        //DEBUG: e.Bytes: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 0/19 Tile{ HalfReuse: # NSYMR/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/13 AsIs: s.3/14 AsIs: s.4/15 } >/20 )/21 </22 & DecodeCommands/23 5/24 Tile{ AsIs: e.Bytes/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_number(vm, context[19], 0UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[24], 5UL);
        refalrts::reinit_ident(context[0], identifiers[ident_NSYMR]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::link_brackets( context[18], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[24] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 59/7 s.1/10 s.2/13 s.3/14 s.4/15 e.Bytes/16 >/1
        context[16] = context[11];
        context[17] = context[12];
        if( ! refalrts::number_term( 59UL, context[7] ) )
          continue;
        // closed e.Bytes as range 16
        //DEBUG: s.1: 10
        //DEBUG: s.2: 13
        //DEBUG: s.3: 14
        //DEBUG: s.4: 15
        //DEBUG: e.Bytes: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 0/19 Tile{ HalfReuse: # NCS/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/13 AsIs: s.3/14 AsIs: s.4/15 } >/20 )/21 </22 & DecodeCommands/23 5/24 Tile{ AsIs: e.Bytes/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_number(vm, context[19], 0UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[24], 5UL);
        refalrts::reinit_ident(context[0], identifiers[ident_NCS]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::link_brackets( context[18], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[24] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DecodeCommands@1/4 60/7 s.1/10 s.2/13 s.3/14 s.4/15 e.Bytes/16 >/1
        context[16] = context[11];
        context[17] = context[12];
        if( ! refalrts::number_term( 60UL, context[7] ) )
          continue;
        // closed e.Bytes as range 16
        //DEBUG: s.1: 10
        //DEBUG: s.2: 13
        //DEBUG: s.3: 14
        //DEBUG: s.4: 15
        //DEBUG: e.Bytes: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 0/19 Tile{ HalfReuse: # NNS/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/13 AsIs: s.3/14 AsIs: s.4/15 } >/20 )/21 </22 & DecodeCommands/23 5/24 Tile{ AsIs: e.Bytes/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_number(vm, context[19], 0UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
        refalrts::alloc_number(vm, context[24], 5UL);
        refalrts::reinit_ident(context[0], identifiers[ident_NNS]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::link_brackets( context[18], context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[24] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DecodeCommands@1/4 100/7 s.1/10 s.2/13 s.3/14 s.4/15 e.Bytes/16 >/1
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::number_term( 100UL, context[7] ) )
        continue;
      // closed e.Bytes as range 16
      //DEBUG: s.1: 10
      //DEBUG: s.2: 13
      //DEBUG: s.3: 14
      //DEBUG: s.4: 15
      //DEBUG: e.Bytes: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/18 0/19 Tile{ HalfReuse: # BUILT_IN/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.1/10 AsIs: s.2/13 AsIs: s.3/14 AsIs: s.4/15 } >/20 )/21 </22 & DecodeCommands/23 5/24 Tile{ AsIs: e.Bytes/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_number(vm, context[19], 0UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_DecodeCommands]);
      refalrts::alloc_number(vm, context[24], 5UL);
      refalrts::reinit_ident(context[0], identifiers[ident_BUILTu_IN]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[18], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_evar( res, context[0], context[15] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DecodeCommands@1/4 s.new6/7 0/10 e.new7/11 >/1
    context[11] = context[8];
    context[12] = context[9];
    if( ! refalrts::number_term( 0UL, context[10] ) )
      continue;
    // closed e.new7 as range 11
    do {
      // </0 & DecodeCommands@1/4 102/7 0/10 e.Name/15 0/19 e.Bytes/17 >/1
      context[13] = context[11];
      context[14] = context[12];
      if( ! refalrts::number_term( 102UL, context[7] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[17] = context[13];
        context[18] = context[14];
        context[19] = refalrts::number_left( 0UL, context[17], context[18] );
        if( ! context[19] )
          continue;
        // closed e.Bytes as range 17
        //DEBUG: e.Name: 15
        //DEBUG: e.Bytes: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/20 0/21 # L/22 </23 & Chr/24 e.Name/15/25 >/27 )/28 </29 & DecodeCommands/30 </31 & Add/32 0/33 </34 & Len=1/35 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: 102/7 AsIs: 0/10 AsIs: e.Name/15 HalfReuse: >/19 } >/36 >/37 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_number(vm, context[21], 0UL);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_L]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_Chr]);
        refalrts::copy_evar(vm, context[25], context[26], context[15], context[16]);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::alloc_open_call(vm, context[29]);
        refalrts::alloc_name(vm, context[30], functions[efunc_DecodeCommands]);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[33], 0UL);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_gen_Len_A1]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::update_name(context[4], functions[efunc_Lenw]);
        refalrts::reinit_close_call(context[19]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[20], context[28] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[20], context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[15], context[16], context[13], context[14] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DecodeCommands@1/4 103/7 0/10 e.Name/15 0/19 e.Bytes/17 >/1
      context[13] = context[11];
      context[14] = context[12];
      if( ! refalrts::number_term( 103UL, context[7] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[17] = context[13];
        context[18] = context[14];
        context[19] = refalrts::number_left( 0UL, context[17], context[18] );
        if( ! context[19] )
          continue;
        // closed e.Bytes as range 17
        //DEBUG: e.Name: 15
        //DEBUG: e.Bytes: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/20 0/21 # E/22 </23 & Chr/24 e.Name/15/25 >/27 )/28 </29 & DecodeCommands/30 </31 & Add/32 0/33 </34 & Len=1/35 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: 103/7 AsIs: 0/10 AsIs: e.Name/15 HalfReuse: >/19 } >/36 >/37 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_number(vm, context[21], 0UL);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_E]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_Chr]);
        refalrts::copy_evar(vm, context[25], context[26], context[15], context[16]);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::alloc_open_call(vm, context[29]);
        refalrts::alloc_name(vm, context[30], functions[efunc_DecodeCommands]);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[33], 0UL);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_gen_Len_A1]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::update_name(context[4], functions[efunc_Lenw]);
        refalrts::reinit_close_call(context[19]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[20], context[28] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[20], context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[15], context[16], context[13], context[14] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DecodeCommands@1/4 104/7 0/10 e.Name/15 0/19 e.Bytes/17 >/1
    context[13] = context[11];
    context[14] = context[12];
    if( ! refalrts::number_term( 104UL, context[7] ) )
      continue;
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::number_left( 0UL, context[17], context[18] );
      if( ! context[19] )
        continue;
      // closed e.Bytes as range 17
      //DEBUG: e.Name: 15
      //DEBUG: e.Bytes: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/20 0/21 # LABEL/22 </23 & Chr/24 e.Name/15/25 >/27 )/28 </29 & DecodeCommands/30 </31 & Add/32 0/33 </34 & Len=1/35 Tile{ AsIs: </0 Reuse: & Lenw/4 Reuse: 103/7 AsIs: 0/10 AsIs: e.Name/15 HalfReuse: >/19 } >/36 >/37 Tile{ AsIs: e.Bytes/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_number(vm, context[21], 0UL);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_LABEL]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Chr]);
      refalrts::copy_evar(vm, context[25], context[26], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::alloc_close_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_DecodeCommands]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[33], 0UL);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Len_A1]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::update_name(context[4], functions[efunc_Lenw]);
      refalrts::update_number(context[7], 103UL);
      refalrts::reinit_close_call(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[28] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[20], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[15], context[16], context[13], context[14] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DecodeCommands@1/4 105/7 s.L1/8 s.L2/9 s.L3/10 s.L4/11 s.R1/12 s.R2/13 s.R3/14 s.R4/15 e.Bytes/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::number_left( 105UL, context[5], context[6] );
    if( ! context[7] )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[5], context[6] ) )
      continue;
    // closed e.Bytes as range 5
    //DEBUG: s.L1: 8
    //DEBUG: s.L2: 9
    //DEBUG: s.L3: 10
    //DEBUG: s.L4: 11
    //DEBUG: s.R1: 12
    //DEBUG: s.R2: 13
    //DEBUG: s.R3: 14
    //DEBUG: s.R4: 15
    //DEBUG: e.Bytes: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/16 0/17 Tile{ HalfReuse: # BUILT_IN1/0 HalfReuse: </4 HalfReuse: & MakeDWord/7 AsIs: s.L1/8 AsIs: s.L2/9 AsIs: s.L3/10 AsIs: s.L4/11 } >/18 </19 & MakeDWord/20 Tile{ AsIs: s.R1/12 AsIs: s.R2/13 AsIs: s.R3/14 AsIs: s.R4/15 } >/21 )/22 </23 & DecodeCommands/24 9/25 Tile{ AsIs: e.Bytes/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_number(vm, context[17], 0UL);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_MakeDWord]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_DecodeCommands]);
    refalrts::alloc_number(vm, context[25], 9UL);
    refalrts::reinit_ident(context[0], identifiers[ident_BUILTu_IN1]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_MakeDWord]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[16], context[22] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[21], context[25] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DecodeCommands@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DecodeCommands@1/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DecodeCommands@1/4 e.Bytes/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Bytes as range 5
    //DEBUG: e.Bytes: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/7 Tile{ HalfReuse: 0/0 HalfReuse: # RawBytes/4 AsIs: e.Bytes/5 HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[7]);
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_ident(context[4], identifiers[ident_RawBytes]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeCommands@1/4 e.dyn0/2 >/1
  // closed e.dyn0 as range 2
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & DecodeCommands@0/0 HalfReuse: 0/4 AsIs: e.dyn0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DecodeCommands_Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeCommands_Z1("DecodeCommands@1", COOKIE1_, COOKIE2_, func_gen_DecodeCommands_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@1/4 (/5 e./21 )/6 (/9 e.Scanned/17 )/10 (/15 e.0/23 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e. as range 21
      // closed e.Scanned as range 17
      // closed e.0 as range 23
      // closed e.Tail as range 19
      //DEBUG: e.: 21
      //DEBUG: e.Scanned: 17
      //DEBUG: e.0: 23
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } )/25 </26 Tile{ Reuse: & ResolveFunctions=1\1=1/4 HalfReuse: </5 } & ResolveFunctions-Body/27 Tile{ AsIs: e.0/23 } (/28 Tile{ AsIs: e./21 } Tile{ AsIs: )/16 } >/29 >/30 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_ResolveFunctionsm_Body]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
      refalrts::update_name(context[4], functions[efunc_gen_ResolveFunctions_A1L1A1]);
      refalrts::reinit_open_call(context[5]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[5] );
      refalrts::link_brackets( context[28], context[16] );
      refalrts::link_brackets( context[15], context[25] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[4], context[5] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[6], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & ResolveFunctions=1\1*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_ResolveFunctions_A1L1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & ResolveFunctions=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DoMapAccum@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@2/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@2/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@2/4 (/5 e.new8/21 )/6 (/9 e.new11/17 )/10 (/15 e.new9/23 )/16 e.new10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new11 as range 17
      // closed e.new9 as range 23
      // closed e.new10 as range 19
      do {
        // </0 & DoMapAccum@2/4 (/5 e./25 )/6 (/9 e.Scanned/27 )/10 (/15 (/35 s.Offset/37 # E/38 e.4/33 )/36 e.1/29 )/16 e.Tail/31 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[17];
        context[28] = context[18];
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[19];
        context[32] = context[20];
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[29], context[30] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        // closed e. as range 25
        // closed e.Scanned as range 27
        // closed e.1 as range 29
        // closed e.Tail as range 31
        if( ! refalrts::svar_left( context[37], context[33], context[34] ) )
          continue;
        context[38] = refalrts::ident_left( identifiers[ident_E], context[33], context[34] );
        if( ! context[38] )
          continue;
        // closed e.4 as range 33
        //DEBUG: e.: 25
        //DEBUG: e.Scanned: 27
        //DEBUG: e.1: 29
        //DEBUG: e.Tail: 31
        //DEBUG: s.Offset: 37
        //DEBUG: e.4: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@2/4 AsIs: (/5 AsIs: e./25 HalfReuse: (/6 } e.4/33/39 )/41 Tile{ AsIs: )/10 } Tile{ AsIs: (/9 } Tile{ AsIs: e.Scanned/27 } Tile{ AsIs: (/15 AsIs: (/35 AsIs: s.Offset/37 AsIs: # E/38 AsIs: e.4/33 AsIs: )/36 AsIs: e.1/29 AsIs: )/16 } )/42 Tile{ AsIs: e.Tail/31 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[39], context[40], context[33], context[34]);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::reinit_open_bracket(context[6]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[42] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[5], context[10] );
        refalrts::link_brackets( context[6], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@2/4 (/5 e./25 )/6 (/9 e.Scanned/27 )/10 (/15 e.0/29 )/16 e.Tail/31 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[17];
      context[28] = context[18];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[19];
      context[32] = context[20];
      // closed e. as range 25
      // closed e.Scanned as range 27
      // closed e.0 as range 29
      // closed e.Tail as range 31
      //DEBUG: e.: 25
      //DEBUG: e.Scanned: 27
      //DEBUG: e.0: 29
      //DEBUG: e.Tail: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@2/4 AsIs: (/5 AsIs: e./25 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned/27 HalfReuse: (/10 } Tile{ AsIs: e.0/29 } Tile{ HalfReuse: )/15 } Tile{ AsIs: )/16 AsIs: e.Tail/31 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[16] );
      refalrts::link_brackets( context[10], context[15] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & MakeFunctionTable=1\1*2/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_MakeFunctionTable_A1L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@2/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@2/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & MakeFunctionTable=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeFunctionTable_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z2("DoMapAccum@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@3/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@3/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & ResolveWords=1\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_ResolveWords_A1L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@3/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@3/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & ResolveWords=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveWords_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z3("DoMapAccum@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z3);


static refalrts::FnResult func_gen_DoMapAccum_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@4/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@4/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & AddFunctionToTable/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_AddFunctionToTable]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@4/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@4/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@4/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & AddFunctionToTable@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_AddFunctionToTable_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z4("DoMapAccum@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z4);


static refalrts::FnResult func_gen_DecompileFunction_S3A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & DecompileFunction$3=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecompileFunction$3=3@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DecompileFunction$3=3@1/4 (/7 e.Name0/9 )/8 e.Lines/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Name0 as range 9
    // closed e.Lines as range 11
    //DEBUG: e.Name0: 9
    //DEBUG: e.Lines: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/13 (/14 </15 Tile{ HalfReuse: & FormatWord:1/0 HalfReuse: </4 HalfReuse: & Type/7 AsIs: e.Name0/9 HalfReuse: >/8 } >/16" {"/17 )/19 Tile{ AsIs: e.Lines/11 } (/20 '}'/21 )/22 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_chars(vm, context[17], context[18], " {", 2);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_char(vm, context[21], '}');
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::reinit_name(context[0], functions[efunc_gen_FormatWord_B1]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_Type]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[13], context[1] );
    refalrts::link_brackets( context[20], context[22] );
    refalrts::link_brackets( context[14], context[19] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[20], context[22] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecompileFunction$3=3@1/4 (/7 e.Name0/5 )/8 e.dyn/2 >/1
  // closed e.Name0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Name0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DecompileFunction$3=3@0/10 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Name0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DecompileFunction_S3A3Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecompileFunction_S3A3Z1("DecompileFunction$3=3@1", COOKIE1_, COOKIE2_, func_gen_DecompileFunction_S3A3Z1);


static refalrts::FnResult func_gen_DecompileFunction_S3A3Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & DecompileFunction$3=3@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecompileFunction$3=3@2/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DecompileFunction$3=3@2/4 (/7 e.Name0/9 )/8 e.Lines/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Name0 as range 9
    // closed e.Lines as range 11
    //DEBUG: e.Name0: 9
    //DEBUG: e.Lines: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/13 (/14"$ENTRY "/15 </17 Tile{ HalfReuse: & FormatWord:1/0 HalfReuse: </4 HalfReuse: & Type/7 AsIs: e.Name0/9 HalfReuse: >/8 } >/18" {"/19 )/21 Tile{ AsIs: e.Lines/11 } (/22 '}'/23 )/24 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_chars(vm, context[15], context[16], "$ENTRY ", 7);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_chars(vm, context[19], context[20], " {", 2);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_char(vm, context[23], '}');
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_name(context[0], functions[efunc_gen_FormatWord_B1]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_Type]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[13], context[1] );
    refalrts::link_brackets( context[22], context[24] );
    refalrts::link_brackets( context[14], context[21] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecompileFunction$3=3@2/4 (/7 e.Name0/5 )/8 e.dyn/2 >/1
  // closed e.Name0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Name0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DecompileFunction$3=3@0/10 (/11"$ENTRY"/12 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Name0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DecompileFunction_S3A3Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_chars(vm, context[12], context[13], "$ENTRY", 6);
  refalrts::reinit_char(context[0], ' ');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecompileFunction_S3A3Z2("DecompileFunction$3=3@2", COOKIE1_, COOKIE2_, func_gen_DecompileFunction_S3A3Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 86 elems
  refalrts::Iter context[86];
  refalrts::zeros( context, 86 );
  // </0 & Decompile-Pattern-Hole@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new9/17 )/8 (/11 e.new10/19 )/12 (/15 e.new11/21 )/16 (/27 s.new5/29 s.new6/30 e.new7/25 )/28 e.new8/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.new9 as range 17
    // closed e.new10 as range 19
    // closed e.new11 as range 21
    // closed e.new8 as range 23
    if( ! refalrts::svar_left( context[29], context[25], context[26] ) )
      continue;
    if( ! refalrts::svar_left( context[30], context[25], context[26] ) )
      continue;
    // closed e.new7 as range 25
    do {
      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/31 s.L/41 )/8 (/11 e.Pattern-R/33 )/12 (/15 e.Vars/35 )/16 (/27 s.Offset/29 # CSYM/30 e.Word/37 )/28 e.Commands/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_CSYM], context[30] ) )
        continue;
      // closed e.Pattern-R as range 33
      // closed e.Vars as range 35
      // closed e.Word as range 37
      // closed e.Commands as range 39
      if( ! refalrts::svar_right( context[41], context[31], context[32] ) )
        continue;
      // closed e.Pattern-L as range 31
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-R: 33
      //DEBUG: e.Vars: 35
      //DEBUG: e.Word: 37
      //DEBUG: e.Commands: 39
      //DEBUG: s.L: 41
      //DEBUG: e.Pattern-L: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/41 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 HalfReuse: 4/7 } (/42 Tile{ AsIs: e.Pattern-L/31 } Tile{ AsIs: (/27 } Tile{ Reuse: # W/30 AsIs: e.Word/37 AsIs: )/28 } 3/43 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/33 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/35 AsIs: )/16 } Tile{ AsIs: e.Commands/39 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::alloc_number(vm, context[43], 3UL);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
      refalrts::reinit_number(context[7], 4UL);
      refalrts::update_ident(context[30], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[42], context[8] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[30], context[28] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[42] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/31 )/8 (/11 s.R/41 e.Pattern-R/33 )/12 (/15 e.Vars/35 )/16 (/27 s.Offset/29 # CSYMR/30 e.Word/37 )/28 e.Commands/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_CSYMR], context[30] ) )
        continue;
      // closed e.Pattern-L as range 31
      // closed e.Vars as range 35
      // closed e.Word as range 37
      // closed e.Commands as range 39
      if( ! refalrts::svar_left( context[41], context[33], context[34] ) )
        continue;
      // closed e.Pattern-R as range 33
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 31
      //DEBUG: e.Vars: 35
      //DEBUG: e.Word: 37
      //DEBUG: e.Commands: 39
      //DEBUG: s.R: 41
      //DEBUG: e.Pattern-R: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </42 Tile{ HalfReuse: & Decompile-Pattern-Hole@2/0 HalfReuse: 4/4 AsIs: (/7 AsIs: e.Pattern-L/31 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: 3/12 AsIs: (/15 } Tile{ Reuse: # W/30 } Tile{ AsIs: e.Word/37 } )/43 Tile{ AsIs: e.Pattern-R/33 } Tile{ AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Vars/35 } Tile{ AsIs: )/28 AsIs: e.Commands/39 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
      refalrts::reinit_number(context[4], 4UL);
      refalrts::reinit_number(context[12], 3UL);
      refalrts::update_ident(context[30], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[42] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[11], context[16] );
      refalrts::link_brackets( context[15], context[43] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[16], context[27] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_elem( res, context[42] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/31 s.L/42 )/8 (/11 e.Pattern-R/33 )/12 (/15 e.Vars/35 )/16 (/27 s.Offset/29 # NSYM/30 s.Number/41 )/28 e.Commands/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_NSYM], context[30] ) )
        continue;
      // closed e.Pattern-R as range 33
      // closed e.Vars as range 35
      // closed e.Commands as range 39
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_right( context[42], context[31], context[32] ) )
        continue;
      // closed e.Pattern-L as range 31
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-R: 33
      //DEBUG: e.Vars: 35
      //DEBUG: e.Commands: 39
      //DEBUG: s.Number: 41
      //DEBUG: s.L: 42
      //DEBUG: e.Pattern-L: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 HalfReuse: 4/7 } (/43 Tile{ AsIs: e.Pattern-L/31 } Tile{ AsIs: (/27 } Tile{ Reuse: # N/30 AsIs: s.Number/41 AsIs: )/28 } 3/44 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/33 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/35 AsIs: )/16 } Tile{ AsIs: e.Commands/39 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_number(vm, context[44], 3UL);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
      refalrts::reinit_number(context[7], 4UL);
      refalrts::update_ident(context[30], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[43], context[8] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[30], context[28] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/31 )/8 (/11 s.R/41 e.Pattern-R/33 )/12 (/15 e.Vars/35 )/16 (/27 s.Offset/29 # NSYMR/30 e.Number/37 )/28 e.Commands/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_NSYMR], context[30] ) )
        continue;
      // closed e.Pattern-L as range 31
      // closed e.Vars as range 35
      // closed e.Number as range 37
      // closed e.Commands as range 39
      if( ! refalrts::svar_left( context[41], context[33], context[34] ) )
        continue;
      // closed e.Pattern-R as range 33
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 31
      //DEBUG: e.Vars: 35
      //DEBUG: e.Number: 37
      //DEBUG: e.Commands: 39
      //DEBUG: s.R: 41
      //DEBUG: e.Pattern-R: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </42 Tile{ HalfReuse: & Decompile-Pattern-Hole@2/0 HalfReuse: 4/4 AsIs: (/7 AsIs: e.Pattern-L/31 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: 3/12 AsIs: (/15 } Tile{ Reuse: # N/30 } Tile{ AsIs: e.Number/37 } )/43 Tile{ AsIs: e.Pattern-R/33 } Tile{ AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Vars/35 } Tile{ AsIs: )/28 AsIs: e.Commands/39 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
      refalrts::reinit_number(context[4], 4UL);
      refalrts::reinit_number(context[12], 3UL);
      refalrts::update_ident(context[30], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[42] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[11], context[16] );
      refalrts::link_brackets( context[15], context[43] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[16], context[27] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_elem( res, context[42] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new17/31 )/8 (/11 e.new18/33 )/12 (/15 e.new19/35 )/16 (/27 s.new13/29 s.new14/30 s.new15/41 e.new16/37 )/28 e.new12/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      // closed e.new17 as range 31
      // closed e.new18 as range 33
      // closed e.new19 as range 35
      // closed e.new12 as range 39
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      // closed e.new16 as range 37
      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new25/42 )/8 (/11 e.new26/44 )/12 (/15 e.new27/46 )/16 (/27 s.new21/29 s.new22/30 s.new23/41 s.new24/52 )/28 e.new20/50 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        // closed e.new25 as range 42
        // closed e.new26 as range 44
        // closed e.new27 as range 46
        // closed e.new20 as range 50
        if( ! refalrts::svar_left( context[52], context[48], context[49] ) )
          continue;
        if( ! refalrts::empty_seq( context[48], context[49] ) )
          continue;
        do {
          // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/53 s.L/61 )/8 (/11 e.Pattern-R/55 )/12 (/15 e.Vars/57 )/16 (/27 s.Offset/29 # SYM/30 s.Code/41 s.Char/52 )/28 e.Commands/59 >/1
          context[53] = context[42];
          context[54] = context[43];
          context[55] = context[44];
          context[56] = context[45];
          context[57] = context[46];
          context[58] = context[47];
          context[59] = context[50];
          context[60] = context[51];
          if( ! refalrts::ident_term( identifiers[ident_SYM], context[30] ) )
            continue;
          // closed e.Pattern-R as range 55
          // closed e.Vars as range 57
          // closed e.Commands as range 59
          if( ! refalrts::svar_right( context[61], context[53], context[54] ) )
            continue;
          // closed e.Pattern-L as range 53
          //DEBUG: s.Offset: 29
          //DEBUG: s.Code: 41
          //DEBUG: s.Char: 52
          //DEBUG: e.Pattern-R: 55
          //DEBUG: e.Vars: 57
          //DEBUG: e.Commands: 59
          //DEBUG: s.L: 61
          //DEBUG: e.Pattern-L: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/61 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} s.Code/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 HalfReuse: 4/7 } (/62 Tile{ AsIs: e.Pattern-L/53 } Tile{ AsIs: (/27 } Tile{ Reuse: # C/30 } Tile{ AsIs: s.Char/52 AsIs: )/28 } 3/63 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/55 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/57 AsIs: )/16 } Tile{ AsIs: e.Commands/59 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[62]);
          refalrts::alloc_number(vm, context[63], 3UL);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
          refalrts::reinit_number(context[7], 4UL);
          refalrts::update_ident(context[30], identifiers[ident_C]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[62], context[8] );
          refalrts::link_brackets( context[27], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_evar( res, context[8], context[16] );
          res = refalrts::splice_elem( res, context[63] );
          res = refalrts::splice_evar( res, context[52], context[28] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_elem( res, context[62] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/53 )/8 (/11 s.R/61 e.Pattern-R/55 )/12 (/15 e.Vars/57 )/16 (/27 s.Offset/29 # SYMR/30 s.Code/41 s.Char/52 )/28 e.Commands/59 >/1
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[50];
        context[60] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_SYMR], context[30] ) )
          continue;
        // closed e.Pattern-L as range 53
        // closed e.Vars as range 57
        // closed e.Commands as range 59
        if( ! refalrts::svar_left( context[61], context[55], context[56] ) )
          continue;
        // closed e.Pattern-R as range 55
        //DEBUG: s.Offset: 29
        //DEBUG: s.Code: 41
        //DEBUG: s.Char: 52
        //DEBUG: e.Pattern-L: 53
        //DEBUG: e.Vars: 57
        //DEBUG: e.Commands: 59
        //DEBUG: s.R: 61
        //DEBUG: e.Pattern-R: 55

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/61 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} s.Code/41 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </62 Tile{ HalfReuse: & Decompile-Pattern-Hole@2/0 HalfReuse: 4/4 AsIs: (/7 AsIs: e.Pattern-L/53 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: 3/12 AsIs: (/15 } Tile{ Reuse: # C/30 } Tile{ AsIs: s.Char/52 } )/63 Tile{ AsIs: e.Pattern-R/55 } Tile{ AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Vars/57 } Tile{ AsIs: )/28 AsIs: e.Commands/59 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[62]);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
        refalrts::reinit_number(context[4], 4UL);
        refalrts::reinit_number(context[12], 3UL);
        refalrts::update_ident(context[30], identifiers[ident_C]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[62] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[11], context[16] );
        refalrts::link_brackets( context[15], context[63] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[16], context[27] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_elem( res, context[63] );
        res = refalrts::splice_elem( res, context[52] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[12], context[15] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[62] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/42 s.L/52 )/8 (/11 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # SYMS/30 s.Len/41 e.Chars/48 )/28 e.Commands/50 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_SYMS], context[30] ) )
          continue;
        // closed e.Pattern-R as range 44
        // closed e.Vars as range 46
        // closed e.Chars as range 48
        // closed e.Commands as range 50
        if( ! refalrts::svar_right( context[52], context[42], context[43] ) )
          continue;
        // closed e.Pattern-L as range 42
        //DEBUG: s.Offset: 29
        //DEBUG: s.Len: 41
        //DEBUG: e.Pattern-R: 44
        //DEBUG: e.Vars: 46
        //DEBUG: e.Chars: 48
        //DEBUG: e.Commands: 50
        //DEBUG: s.L: 52
        //DEBUG: e.Pattern-L: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$7=1@1/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/42 } )/53 (/54 Tile{ AsIs: e.Chars/48 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/44 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/50 } Tile{ AsIs: )/28 } </55 Tile{ HalfReuse: & Add/30 AsIs: s.Len/41 } 3/56 >/57 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_open_call(vm, context[55]);
        refalrts::alloc_number(vm, context[56], 3UL);
        refalrts::alloc_close_call(vm, context[57]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S7A1Z1]);
        refalrts::reinit_name(context[30], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[55] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[54], context[8] );
        refalrts::link_brackets( context[7], context[53] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[30], context[41] );
        res = refalrts::splice_elem( res, context[55] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/42 )/8 (/11 s.R/52 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # SYMSR/30 s.Len/41 e.Chars/48 )/28 e.Commands/50 >/1
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      if( ! refalrts::ident_term( identifiers[ident_SYMSR], context[30] ) )
        continue;
      // closed e.Pattern-L as range 42
      // closed e.Vars as range 46
      // closed e.Chars as range 48
      // closed e.Commands as range 50
      if( ! refalrts::svar_left( context[52], context[44], context[45] ) )
        continue;
      // closed e.Pattern-R as range 44
      //DEBUG: s.Offset: 29
      //DEBUG: s.Len: 41
      //DEBUG: e.Pattern-L: 42
      //DEBUG: e.Vars: 46
      //DEBUG: e.Chars: 48
      //DEBUG: e.Commands: 50
      //DEBUG: s.R: 52
      //DEBUG: e.Pattern-R: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.R/52 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$8=1@1/4 AsIs: (/7 AsIs: e.Pattern-L/42 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Chars/48 } )/53 (/54 Tile{ AsIs: e.Pattern-R/44 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/50 } Tile{ AsIs: )/28 } </55 Tile{ HalfReuse: & Add/30 AsIs: s.Len/41 } 3/56 >/57 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_number(vm, context[56], 3UL);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S8A1Z1]);
      refalrts::reinit_name(context[30], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[55] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[54], context[12] );
      refalrts::link_brackets( context[11], context[53] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[30], context[41] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[12], context[27] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new15/31 )/8 (/11 e.new16/33 )/12 (/15 e.new17/35 )/16 (/27 s.new13/29 s.new14/30 )/28 e.new12/37 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      // closed e.new15 as range 31
      // closed e.new16 as range 33
      // closed e.new17 as range 35
      // closed e.new12 as range 37
      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/39 s.L/47 )/8 (/11 e.Pattern-R/41 )/12 (/15 e.Vars/43 )/16 (/27 s.Offset/29 # VSYM/30 )/28 e.Commands/45 >/1
        context[39] = context[31];
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_VSYM], context[30] ) )
          continue;
        // closed e.Pattern-R as range 41
        // closed e.Vars as range 43
        // closed e.Commands as range 45
        if( ! refalrts::svar_right( context[47], context[39], context[40] ) )
          continue;
        // closed e.Pattern-L as range 39
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-R: 41
        //DEBUG: e.Vars: 43
        //DEBUG: e.Commands: 45
        //DEBUG: s.L: 47
        //DEBUG: e.Pattern-L: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/47 {REMOVED TILE} s.Offset/29 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 HalfReuse: 4/7 } (/48 Tile{ AsIs: e.Pattern-L/39 } (/49 # s/50 3/51 '='/52 3/53 )/54 3/55 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/41 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/43 HalfReuse: (/16 HalfReuse: # s/27 } 3/56 '='/57 3/58 Tile{ HalfReuse: )/30 AsIs: )/28 AsIs: e.Commands/45 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[48]);
        refalrts::alloc_open_bracket(vm, context[49]);
        refalrts::alloc_ident(vm, context[50], identifiers[ident_s]);
        refalrts::alloc_number(vm, context[51], 3UL);
        refalrts::alloc_char(vm, context[52], '=');
        refalrts::alloc_number(vm, context[53], 3UL);
        refalrts::alloc_close_bracket(vm, context[54]);
        refalrts::alloc_number(vm, context[55], 3UL);
        refalrts::alloc_number(vm, context[56], 3UL);
        refalrts::alloc_char(vm, context[57], '=');
        refalrts::alloc_number(vm, context[58], 3UL);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
        refalrts::reinit_number(context[7], 4UL);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[27], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[28] );
        refalrts::link_brackets( context[16], context[30] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[48], context[8] );
        refalrts::link_brackets( context[49], context[54] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[56], context[58] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        res = refalrts::splice_evar( res, context[49], context[55] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_elem( res, context[48] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/39 )/8 (/11 s.R/47 e.Pattern-R/41 )/12 (/15 e.Vars/43 )/16 (/27 s.Offset/29 # VSYMR/30 )/28 e.Commands/45 >/1
        context[39] = context[31];
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_VSYMR], context[30] ) )
          continue;
        // closed e.Pattern-L as range 39
        // closed e.Vars as range 43
        // closed e.Commands as range 45
        if( ! refalrts::svar_left( context[47], context[41], context[42] ) )
          continue;
        // closed e.Pattern-R as range 41
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-L: 39
        //DEBUG: e.Vars: 43
        //DEBUG: e.Commands: 45
        //DEBUG: s.R: 47
        //DEBUG: e.Pattern-R: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/47 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE}
        //RESULT: Tile{ [[ } </48 Tile{ HalfReuse: & Decompile-Pattern-Hole@2/0 HalfReuse: 4/4 AsIs: (/7 AsIs: e.Pattern-L/39 AsIs: )/8 AsIs: (/11 } 3/49 (/50 # s/51 3/52 '='/53 3/54 )/55 Tile{ AsIs: e.Pattern-R/41 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/43 HalfReuse: (/16 HalfReuse: # s/27 } 3/56 '='/57 3/58 Tile{ HalfReuse: )/30 AsIs: )/28 AsIs: e.Commands/45 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_number(vm, context[49], 3UL);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_ident(vm, context[51], identifiers[ident_s]);
        refalrts::alloc_number(vm, context[52], 3UL);
        refalrts::alloc_char(vm, context[53], '=');
        refalrts::alloc_number(vm, context[54], 3UL);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_number(vm, context[56], 3UL);
        refalrts::alloc_char(vm, context[57], '=');
        refalrts::alloc_number(vm, context[58], 3UL);
        refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
        refalrts::reinit_number(context[4], 4UL);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[27], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[48] );
        refalrts::link_brackets( context[15], context[28] );
        refalrts::link_brackets( context[16], context[30] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[50], context[55] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[56], context[58] );
        res = refalrts::splice_evar( res, context[12], context[27] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[49], context[55] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[48] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/39 s.L/47 )/8 (/11 e.Pattern-R/41 )/12 (/15 e.Vars/43 )/16 (/27 s.Offset/29 # TERM/30 )/28 e.Commands/45 >/1
        context[39] = context[31];
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_TERM], context[30] ) )
          continue;
        // closed e.Pattern-R as range 41
        // closed e.Vars as range 43
        // closed e.Commands as range 45
        if( ! refalrts::svar_right( context[47], context[39], context[40] ) )
          continue;
        // closed e.Pattern-L as range 39
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-R: 41
        //DEBUG: e.Vars: 43
        //DEBUG: e.Commands: 45
        //DEBUG: s.L: 47
        //DEBUG: e.Pattern-L: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/47 {REMOVED TILE} s.Offset/29 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 HalfReuse: 5/7 } (/48 Tile{ AsIs: e.Pattern-L/39 } (/49 # t/50 3/51 4/52 '='/53 3/54 4/55 )/56 4/57 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/41 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/43 HalfReuse: (/16 HalfReuse: # t/27 } 3/58 4/59 '='/60 3/61 4/62 Tile{ HalfReuse: )/30 AsIs: )/28 AsIs: e.Commands/45 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[48]);
        refalrts::alloc_open_bracket(vm, context[49]);
        refalrts::alloc_ident(vm, context[50], identifiers[ident_t]);
        refalrts::alloc_number(vm, context[51], 3UL);
        refalrts::alloc_number(vm, context[52], 4UL);
        refalrts::alloc_char(vm, context[53], '=');
        refalrts::alloc_number(vm, context[54], 3UL);
        refalrts::alloc_number(vm, context[55], 4UL);
        refalrts::alloc_close_bracket(vm, context[56]);
        refalrts::alloc_number(vm, context[57], 4UL);
        refalrts::alloc_number(vm, context[58], 3UL);
        refalrts::alloc_number(vm, context[59], 4UL);
        refalrts::alloc_char(vm, context[60], '=');
        refalrts::alloc_number(vm, context[61], 3UL);
        refalrts::alloc_number(vm, context[62], 4UL);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
        refalrts::reinit_number(context[7], 5UL);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[27], identifiers[ident_t]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[28] );
        refalrts::link_brackets( context[16], context[30] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[48], context[8] );
        refalrts::link_brackets( context[49], context[56] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[58], context[62] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        res = refalrts::splice_evar( res, context[49], context[57] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_elem( res, context[48] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/39 )/8 (/11 s.R/47 e.Pattern-R/41 )/12 (/15 e.Vars/43 )/16 (/27 s.Offset/29 # TERMR/30 )/28 e.Commands/45 >/1
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_TERMR], context[30] ) )
        continue;
      // closed e.Pattern-L as range 39
      // closed e.Vars as range 43
      // closed e.Commands as range 45
      if( ! refalrts::svar_left( context[47], context[41], context[42] ) )
        continue;
      // closed e.Pattern-R as range 41
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 39
      //DEBUG: e.Vars: 43
      //DEBUG: e.Commands: 45
      //DEBUG: s.R: 47
      //DEBUG: e.Pattern-R: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/47 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE}
      //RESULT: Tile{ [[ } </48 Tile{ HalfReuse: & Decompile-Pattern-Hole@2/0 HalfReuse: 5/4 AsIs: (/7 AsIs: e.Pattern-L/39 AsIs: )/8 AsIs: (/11 } 3/49 (/50 # t/51 3/52 4/53 '='/54 3/55 4/56 )/57 Tile{ AsIs: e.Pattern-R/41 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/43 HalfReuse: (/16 HalfReuse: # t/27 } 3/58 4/59 '='/60 3/61 4/62 Tile{ HalfReuse: )/30 AsIs: )/28 AsIs: e.Commands/45 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_number(vm, context[49], 3UL);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::alloc_ident(vm, context[51], identifiers[ident_t]);
      refalrts::alloc_number(vm, context[52], 3UL);
      refalrts::alloc_number(vm, context[53], 4UL);
      refalrts::alloc_char(vm, context[54], '=');
      refalrts::alloc_number(vm, context[55], 3UL);
      refalrts::alloc_number(vm, context[56], 4UL);
      refalrts::alloc_close_bracket(vm, context[57]);
      refalrts::alloc_number(vm, context[58], 3UL);
      refalrts::alloc_number(vm, context[59], 4UL);
      refalrts::alloc_char(vm, context[60], '=');
      refalrts::alloc_number(vm, context[61], 3UL);
      refalrts::alloc_number(vm, context[62], 4UL);
      refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
      refalrts::reinit_number(context[4], 5UL);
      refalrts::reinit_open_bracket(context[16]);
      refalrts::reinit_ident(context[27], identifiers[ident_t]);
      refalrts::reinit_close_bracket(context[30]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[15], context[28] );
      refalrts::link_brackets( context[16], context[30] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[50], context[57] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[30];
      res = refalrts::splice_evar( res, context[58], context[62] );
      res = refalrts::splice_evar( res, context[12], context[27] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[49], context[57] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_elem( res, context[48] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new17/31 )/8 (/11 e.new18/33 )/12 (/15 e.new19/35 )/16 (/27 s.new13/29 s.new14/30 s.new15/41 e.new16/37 )/28 e.new12/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      // closed e.new17 as range 31
      // closed e.new18 as range 33
      // closed e.new19 as range 35
      // closed e.new12 as range 39
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      // closed e.new16 as range 37
      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/42 )/8 (/11 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # TRAN/30 s.Jump/41 )/28 e.Commands-B/50 (/56 s.Jump/58 e.Command/54 )/57 e.Commands-E/52 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[39];
        context[49] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        // closed e.Pattern-L as range 42
        // closed e.Pattern-R as range 44
        // closed e.Vars as range 46
        context[50] = 0;
        context[51] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[52] = context[48];
          context[53] = context[49];
          context[54] = 0;
          context[55] = 0;
          context[56] = refalrts::brackets_left( context[54], context[55], context[52], context[53] );
          if( ! context[56] )
            continue;
          refalrts::bracket_pointers(context[56], context[57]);
          if( ! refalrts::repeated_stvar_left( vm, context[58], context[41], context[54], context[55] ) )
            continue;
          // closed e.Command as range 54
          // closed e.Commands-E as range 52
          //DEBUG: s.Offset: 29
          //DEBUG: s.Jump: 41
          //DEBUG: e.Pattern-L: 42
          //DEBUG: e.Pattern-R: 44
          //DEBUG: e.Vars: 46
          //DEBUG: e.Commands-B: 50
          //DEBUG: e.Command: 54
          //DEBUG: e.Commands-E: 52

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} s.Jump/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole@1/4 AsIs: (/7 AsIs: e.Pattern-L/42 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/44 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 } Tile{ AsIs: e.Commands-B/50 } Tile{ AsIs: (/27 } '@'/59 Tile{ Reuse: # Restore-Hole/30 } 0/60 3/61 (/62 e.Pattern-L/42/63 Tile{ AsIs: )/28 } (/65 e.Pattern-R/44/66 )/68 (/69 e.Vars/46/70 )/72 )/73 Tile{ AsIs: (/56 AsIs: s.Jump/58 AsIs: e.Command/54 AsIs: )/57 AsIs: e.Commands-E/52 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[59], '@');
          refalrts::alloc_number(vm, context[60], 0UL);
          refalrts::alloc_number(vm, context[61], 3UL);
          refalrts::alloc_open_bracket(vm, context[62]);
          refalrts::copy_evar(vm, context[63], context[64], context[42], context[43]);
          refalrts::alloc_open_bracket(vm, context[65]);
          refalrts::copy_evar(vm, context[66], context[67], context[44], context[45]);
          refalrts::alloc_close_bracket(vm, context[68]);
          refalrts::alloc_open_bracket(vm, context[69]);
          refalrts::copy_evar(vm, context[70], context[71], context[46], context[47]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_close_bracket(vm, context[73]);
          refalrts::update_ident(context[30], identifiers[ident_Restorem_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[56], context[57] );
          refalrts::link_brackets( context[27], context[73] );
          refalrts::link_brackets( context[69], context[72] );
          refalrts::link_brackets( context[65], context[68] );
          refalrts::link_brackets( context[62], context[28] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[56];
          res = refalrts::splice_evar( res, context[65], context[73] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[60], context[62] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_elem( res, context[59] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_evar( res, context[50], context[51] );
          refalrts::splice_to_freelist_open( vm, context[16], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[50], context[51], context[48], context[49] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new27/42 )/8 (/11 e.new28/44 )/12 (/15 e.new29/46 )/16 (/27 '@'/29 s.new21/30 s.new22/41 s.new23/60 e.new24/48 (/58 e.new25/56 )/59 (/54 e.new26/52 )/55 )/28 e.new20/50 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        if( ! refalrts::char_term( '@', context[29] ) )
          continue;
        context[52] = 0;
        context[53] = 0;
        context[54] = refalrts::brackets_right( context[52], context[53], context[48], context[49] );
        if( ! context[54] )
          continue;
        refalrts::bracket_pointers(context[54], context[55]);
        context[56] = 0;
        context[57] = 0;
        context[58] = refalrts::brackets_right( context[56], context[57], context[48], context[49] );
        if( ! context[58] )
          continue;
        refalrts::bracket_pointers(context[58], context[59]);
        // closed e.new27 as range 42
        // closed e.new28 as range 44
        // closed e.new29 as range 46
        // closed e.new25 as range 56
        // closed e.new26 as range 52
        // closed e.new20 as range 50
        if( ! refalrts::svar_left( context[60], context[48], context[49] ) )
          continue;
        // closed e.new24 as range 48
        do {
          // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L1/61 )/8 (/11 e.Pattern-R1/63 )/12 (/15 e.Vars1/65 )/16 (/27 '@'/29 # Restore-Hole/30 s.Level2/41 s.Top2/60 (/77 e.Pattern-L2/75 )/78 (/58 e.Pattern-R2/69 )/59 (/54 e.Vars2/71 )/55 )/28 e.Commands/73 >/1
          context[61] = context[42];
          context[62] = context[43];
          context[63] = context[44];
          context[64] = context[45];
          context[65] = context[46];
          context[66] = context[47];
          context[67] = context[48];
          context[68] = context[49];
          context[69] = context[56];
          context[70] = context[57];
          context[71] = context[52];
          context[72] = context[53];
          context[73] = context[50];
          context[74] = context[51];
          if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[30] ) )
            continue;
          context[75] = 0;
          context[76] = 0;
          context[77] = refalrts::brackets_left( context[75], context[76], context[67], context[68] );
          if( ! context[77] )
            continue;
          refalrts::bracket_pointers(context[77], context[78]);
          if( ! refalrts::empty_seq( context[67], context[68] ) )
            continue;
          // closed e.Pattern-L1 as range 61
          // closed e.Pattern-R1 as range 63
          // closed e.Vars1 as range 65
          // closed e.Pattern-L2 as range 75
          // closed e.Pattern-R2 as range 69
          // closed e.Vars2 as range 71
          // closed e.Commands as range 73
          //DEBUG: s.Level2: 41
          //DEBUG: s.Top2: 60
          //DEBUG: e.Pattern-L1: 61
          //DEBUG: e.Pattern-R1: 63
          //DEBUG: e.Vars1: 65
          //DEBUG: e.Pattern-L2: 75
          //DEBUG: e.Pattern-R2: 69
          //DEBUG: e.Vars2: 71
          //DEBUG: e.Commands: 73

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L1/61 )/8 (/11 e.Pattern-R1/63 )/12 (/15 e.Vars1/65 )/16 (/27 {REMOVED TILE} )/28 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & Decompile-Pattern-Hole/30 AsIs: s.Level2/41 AsIs: s.Top2/60 AsIs: (/77 AsIs: e.Pattern-L2/75 AsIs: )/78 AsIs: (/58 AsIs: e.Pattern-R2/69 AsIs: )/59 AsIs: (/54 AsIs: e.Vars2/71 AsIs: )/55 } Tile{ AsIs: e.Commands/73 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_call(context[29]);
          refalrts::reinit_name(context[30], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[29] );
          refalrts::link_brackets( context[54], context[55] );
          refalrts::link_brackets( context[58], context[59] );
          refalrts::link_brackets( context[77], context[78] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[73], context[74] );
          res = refalrts::splice_evar( res, context[29], context[55] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L1/61 )/8 (/11 e.Pattern-R1/63 )/12 (/15 e.Vars1/65 )/16 (/27 '@'/29 # Restore-NoHole/30 s.Level2/41 s.Top2/60 (/58 e.Pattern2/67 )/59 (/54 e.Vars2/69 )/55 )/28 e.Commands/71 >/1
        context[61] = context[42];
        context[62] = context[43];
        context[63] = context[44];
        context[64] = context[45];
        context[65] = context[46];
        context[66] = context[47];
        context[67] = context[56];
        context[68] = context[57];
        context[69] = context[52];
        context[70] = context[53];
        context[71] = context[50];
        context[72] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[48], context[49] ) )
          continue;
        // closed e.Pattern-L1 as range 61
        // closed e.Pattern-R1 as range 63
        // closed e.Vars1 as range 65
        // closed e.Pattern2 as range 67
        // closed e.Vars2 as range 69
        // closed e.Commands as range 71
        //DEBUG: s.Level2: 41
        //DEBUG: s.Top2: 60
        //DEBUG: e.Pattern-L1: 61
        //DEBUG: e.Pattern-R1: 63
        //DEBUG: e.Vars1: 65
        //DEBUG: e.Pattern2: 67
        //DEBUG: e.Vars2: 69
        //DEBUG: e.Commands: 71

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L1/61 )/8 (/11 e.Pattern-R1/63 )/12 (/15 e.Vars1/65 )/16 (/27 {REMOVED TILE} )/28 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & Decompile-Pattern-NoHole/30 AsIs: s.Level2/41 AsIs: s.Top2/60 AsIs: (/58 AsIs: e.Pattern2/67 AsIs: )/59 AsIs: (/54 AsIs: e.Vars2/69 AsIs: )/55 } Tile{ AsIs: e.Commands/71 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[29]);
        refalrts::reinit_name(context[30], functions[efunc_Decompilem_Patternm_NoHole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::link_brackets( context[58], context[59] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[71], context[72] );
        res = refalrts::splice_evar( res, context[29], context[55] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new24/42 )/8 (/11 e.new25/44 )/12 (/15 e.new26/46 )/16 (/27 s.new21/29 s.new22/30 s.new23/41 )/28 e.new20/48 >/1
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[39];
      context[49] = context[40];
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      // closed e.new24 as range 42
      // closed e.new25 as range 44
      // closed e.new26 as range 46
      // closed e.new20 as range 48
      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/50 s.L/58 )/8 (/11 e.Pattern-R/52 )/12 (/15 e.Vars/54 )/16 (/27 s.Offset/29 # OVSYM/30 s.VarNo/41 )/28 e.Commands/56 >/1
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        if( ! refalrts::ident_term( identifiers[ident_OVSYM], context[30] ) )
          continue;
        // closed e.Pattern-R as range 52
        // closed e.Vars as range 54
        // closed e.Commands as range 56
        if( ! refalrts::svar_right( context[58], context[50], context[51] ) )
          continue;
        // closed e.Pattern-L as range 50
        //DEBUG: s.Offset: 29
        //DEBUG: s.VarNo: 41
        //DEBUG: e.Pattern-R: 52
        //DEBUG: e.Vars: 54
        //DEBUG: e.Commands: 56
        //DEBUG: s.L: 58
        //DEBUG: e.Pattern-L: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/58 {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 HalfReuse: 4/7 } (/59 Tile{ AsIs: e.Pattern-L/50 } (/60 Tile{ Reuse: # s/30 AsIs: s.VarNo/41 } '='/61 3/62 )/63 3/64 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/52 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/54 HalfReuse: (/16 HalfReuse: # s/27 } s.VarNo/41/65 '='/66 3/67 )/68 Tile{ AsIs: )/28 AsIs: e.Commands/56 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[59]);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::alloc_char(vm, context[61], '=');
        refalrts::alloc_number(vm, context[62], 3UL);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::alloc_number(vm, context[64], 3UL);
        refalrts::copy_stvar(vm, context[65], context[41]);
        refalrts::alloc_char(vm, context[66], '=');
        refalrts::alloc_number(vm, context[67], 3UL);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
        refalrts::reinit_number(context[7], 4UL);
        refalrts::update_ident(context[30], identifiers[ident_s]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[27], identifiers[ident_s]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[28] );
        refalrts::link_brackets( context[16], context[68] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[59], context[8] );
        refalrts::link_brackets( context[60], context[63] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[65], context[68] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        res = refalrts::splice_evar( res, context[61], context[64] );
        res = refalrts::splice_evar( res, context[30], context[41] );
        res = refalrts::splice_elem( res, context[60] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_elem( res, context[59] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/50 )/8 (/11 s.R/58 e.Pattern-R/52 )/12 (/15 e.Vars/54 )/16 (/27 s.Offset/29 # OVSYMR/30 s.VarNo/41 )/28 e.Commands/56 >/1
      context[50] = context[42];
      context[51] = context[43];
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      if( ! refalrts::ident_term( identifiers[ident_OVSYMR], context[30] ) )
        continue;
      // closed e.Pattern-L as range 50
      // closed e.Vars as range 54
      // closed e.Commands as range 56
      if( ! refalrts::svar_left( context[58], context[52], context[53] ) )
        continue;
      // closed e.Pattern-R as range 52
      //DEBUG: s.Offset: 29
      //DEBUG: s.VarNo: 41
      //DEBUG: e.Pattern-L: 50
      //DEBUG: e.Vars: 54
      //DEBUG: e.Commands: 56
      //DEBUG: s.R: 58
      //DEBUG: e.Pattern-R: 52

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/58 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </59 Tile{ HalfReuse: & Decompile-Pattern-Hole@2/0 HalfReuse: 4/4 AsIs: (/7 AsIs: e.Pattern-L/50 AsIs: )/8 AsIs: (/11 } 3/60 (/61 Tile{ Reuse: # s/30 AsIs: s.VarNo/41 } '='/62 3/63 )/64 Tile{ AsIs: e.Pattern-R/52 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/54 HalfReuse: (/16 HalfReuse: # s/27 } s.VarNo/41/65 '='/66 3/67 )/68 Tile{ AsIs: )/28 AsIs: e.Commands/56 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[59]);
      refalrts::alloc_number(vm, context[60], 3UL);
      refalrts::alloc_open_bracket(vm, context[61]);
      refalrts::alloc_char(vm, context[62], '=');
      refalrts::alloc_number(vm, context[63], 3UL);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::copy_stvar(vm, context[65], context[41]);
      refalrts::alloc_char(vm, context[66], '=');
      refalrts::alloc_number(vm, context[67], 3UL);
      refalrts::alloc_close_bracket(vm, context[68]);
      refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
      refalrts::reinit_number(context[4], 4UL);
      refalrts::update_ident(context[30], identifiers[ident_s]);
      refalrts::reinit_open_bracket(context[16]);
      refalrts::reinit_ident(context[27], identifiers[ident_s]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[59] );
      refalrts::link_brackets( context[15], context[28] );
      refalrts::link_brackets( context[16], context[68] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[61], context[64] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[65], context[68] );
      res = refalrts::splice_evar( res, context[12], context[27] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[62], context[64] );
      res = refalrts::splice_evar( res, context[30], context[41] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_elem( res, context[59] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new16/31 s.new17/41 )/8 (/11 e.new18/33 )/12 (/15 e.new19/35 )/16 (/27 s.new13/29 s.new14/30 e.new15/37 )/28 e.new12/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      // closed e.new18 as range 33
      // closed e.new19 as range 35
      // closed e.new15 as range 37
      // closed e.new12 as range 39
      if( ! refalrts::svar_right( context[41], context[31], context[32] ) )
        continue;
      // closed e.new16 as range 31
      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/42 s.L/41 )/8 (/11 s.R/50 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # CL/30 )/28 e.Commands/48 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[39];
        context[49] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_CL], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        // closed e.Pattern-L as range 42
        // closed e.Vars as range 46
        // closed e.Commands as range 48
        if( ! refalrts::svar_left( context[50], context[44], context[45] ) )
          continue;
        // closed e.Pattern-R as range 44
        //DEBUG: s.L: 41
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-L: 42
        //DEBUG: e.Vars: 46
        //DEBUG: e.Commands: 48
        //DEBUG: s.R: 50
        //DEBUG: e.Pattern-R: 44

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/41 {REMOVED TILE} {REMOVED TILE} s.R/50 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@2/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/42 } Tile{ AsIs: (/11 } # e/51 3/52 4/53 '='/54 3/55 4/56 Tile{ AsIs: )/8 } Tile{ AsIs: e.Pattern-R/44 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 HalfReuse: (/16 HalfReuse: # e/27 } 3/57 4/58 '='/59 3/60 4/61 Tile{ HalfReuse: )/30 AsIs: )/28 AsIs: e.Commands/48 AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[51], identifiers[ident_e]);
        refalrts::alloc_number(vm, context[52], 3UL);
        refalrts::alloc_number(vm, context[53], 4UL);
        refalrts::alloc_char(vm, context[54], '=');
        refalrts::alloc_number(vm, context[55], 3UL);
        refalrts::alloc_number(vm, context[56], 4UL);
        refalrts::alloc_number(vm, context[57], 3UL);
        refalrts::alloc_number(vm, context[58], 4UL);
        refalrts::alloc_char(vm, context[59], '=');
        refalrts::alloc_number(vm, context[60], 3UL);
        refalrts::alloc_number(vm, context[61], 4UL);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z2]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[27], identifiers[ident_e]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[28] );
        refalrts::link_brackets( context[16], context[30] );
        refalrts::link_brackets( context[7], context[12] );
        refalrts::link_brackets( context[11], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[57], context[61] );
        res = refalrts::splice_evar( res, context[12], context[27] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[51], context[56] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/42 s.L/41 )/8 (/11 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # OEXP/30 s.IdR/52 )/28 e.Commands/50 >/1
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      if( ! refalrts::ident_term( identifiers[ident_OEXP], context[30] ) )
        continue;
      // closed e.Pattern-L as range 42
      // closed e.Pattern-R as range 44
      // closed e.Vars as range 46
      // closed e.Commands as range 50
      if( ! refalrts::svar_left( context[52], context[48], context[49] ) )
        continue;
      if( ! refalrts::empty_seq( context[48], context[49] ) )
        continue;
      //DEBUG: s.L: 41
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 42
      //DEBUG: e.Pattern-R: 44
      //DEBUG: e.Vars: 46
      //DEBUG: e.Commands: 50
      //DEBUG: s.IdR: 52

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/41 {REMOVED TILE} s.Offset/29 {REMOVED TILE} s.IdR/52 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=1@1/4 HalfReuse: s.IdR52 /7 } Tile{ HalfReuse: (/30 } Tile{ AsIs: e.Pattern-L/42 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/44 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/50 } Tile{ AsIs: )/28 } e.Vars/46/53 Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[53], context[54], context[46], context[47]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1Z1]);
      refalrts::reinit_svar( context[7], context[52] );
      refalrts::reinit_open_bracket(context[30]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[30], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[8], context[27] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new16/31 )/8 (/11 s.new17/41 e.new18/33 )/12 (/15 e.new19/35 )/16 (/27 s.new13/29 s.new14/30 e.new15/37 )/28 e.new12/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      // closed e.new16 as range 31
      // closed e.new19 as range 35
      // closed e.new15 as range 37
      // closed e.new12 as range 39
      if( ! refalrts::svar_left( context[41], context[33], context[34] ) )
        continue;
      // closed e.new18 as range 33
      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/42 )/8 (/11 s.R/41 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # OEXPR/30 s.IdR/52 )/28 e.Commands/50 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_OEXPR], context[30] ) )
          continue;
        // closed e.Pattern-L as range 42
        // closed e.Pattern-R as range 44
        // closed e.Vars as range 46
        // closed e.Commands as range 50
        if( ! refalrts::svar_left( context[52], context[48], context[49] ) )
          continue;
        if( ! refalrts::empty_seq( context[48], context[49] ) )
          continue;
        //DEBUG: s.R: 41
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-L: 42
        //DEBUG: e.Pattern-R: 44
        //DEBUG: e.Vars: 46
        //DEBUG: e.Commands: 50
        //DEBUG: s.IdR: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/41 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} s.IdR/52 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </30 } Tile{ HalfReuse: & Decompile-Pattern-Hole$20=1@1/0 HalfReuse: s.IdR52 /4 AsIs: (/7 AsIs: e.Pattern-L/42 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Pattern-R/44 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/50 } Tile{ AsIs: )/28 } e.Vars/46/53 Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[53], context[54], context[46], context[47]);
        refalrts::reinit_open_call(context[30]);
        refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1Z1]);
        refalrts::reinit_svar( context[4], context[52] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[12], context[27] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[30] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new23/42 )/8 (/11 s.new24/41 e.new25/44 )/12 (/15 e.new26/46 )/16 (/27 s.new21/29 s.new22/30 )/28 e.new20/48 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[39];
        context[49] = context[40];
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        // closed e.new23 as range 42
        // closed e.new25 as range 44
        // closed e.new26 as range 46
        // closed e.new20 as range 48
        do {
          // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/50 s.L/58 )/8 (/11 s.R/41 e.Pattern-R/52 )/12 (/15 e.Vars/54 )/16 (/27 s.Offset/29 # PS/30 )/28 e.Commands/56 >/1
          context[50] = context[42];
          context[51] = context[43];
          context[52] = context[44];
          context[53] = context[45];
          context[54] = context[46];
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[49];
          if( ! refalrts::ident_term( identifiers[ident_PS], context[30] ) )
            continue;
          // closed e.Pattern-R as range 52
          // closed e.Vars as range 54
          // closed e.Commands as range 56
          if( ! refalrts::svar_right( context[58], context[50], context[51] ) )
            continue;
          // closed e.Pattern-L as range 50
          //DEBUG: s.R: 41
          //DEBUG: s.Offset: 29
          //DEBUG: e.Pattern-R: 52
          //DEBUG: e.Vars: 54
          //DEBUG: e.Commands: 56
          //DEBUG: s.L: 58
          //DEBUG: e.Pattern-L: 50

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/58 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 HalfReuse: 5/7 } (/59 Tile{ AsIs: e.Pattern-L/50 } (/60 # LB/61 )/62 3/63 Tile{ AsIs: )/12 AsIs: (/15 } 4/64 (/65 Tile{ Reuse: # RB/30 } Tile{ AsIs: )/16 AsIs: (/27 } # Hole/66 4/67 Tile{ AsIs: s.R/41 } )/68 Tile{ AsIs: e.Pattern-R/52 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Vars/54 } Tile{ AsIs: )/28 AsIs: e.Commands/56 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[59]);
          refalrts::alloc_open_bracket(vm, context[60]);
          refalrts::alloc_ident(vm, context[61], identifiers[ident_LB]);
          refalrts::alloc_close_bracket(vm, context[62]);
          refalrts::alloc_number(vm, context[63], 3UL);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_open_bracket(vm, context[65]);
          refalrts::alloc_ident(vm, context[66], identifiers[ident_Hole]);
          refalrts::alloc_number(vm, context[67], 4UL);
          refalrts::alloc_close_bracket(vm, context[68]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
          refalrts::reinit_number(context[7], 5UL);
          refalrts::update_ident(context[30], identifiers[ident_RB]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[11], context[28] );
          refalrts::link_brackets( context[15], context[8] );
          refalrts::link_brackets( context[27], context[68] );
          refalrts::link_brackets( context[65], context[16] );
          refalrts::link_brackets( context[59], context[12] );
          refalrts::link_brackets( context[60], context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[28];
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[8], context[11] );
          res = refalrts::splice_evar( res, context[52], context[53] );
          res = refalrts::splice_elem( res, context[68] );
          res = refalrts::splice_elem( res, context[41] );
          res = refalrts::splice_evar( res, context[66], context[67] );
          res = refalrts::splice_evar( res, context[16], context[27] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_evar( res, context[12], context[15] );
          res = refalrts::splice_evar( res, context[60], context[63] );
          res = refalrts::splice_evar( res, context[50], context[51] );
          res = refalrts::splice_elem( res, context[59] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/50 )/8 (/11 s.R/41 e.Pattern-R/52 )/12 (/15 e.Vars/54 )/16 (/27 s.Offset/29 # PSR/30 )/28 e.Commands/56 >/1
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        if( ! refalrts::ident_term( identifiers[ident_PSR], context[30] ) )
          continue;
        // closed e.Pattern-L as range 50
        // closed e.Pattern-R as range 52
        // closed e.Vars as range 54
        // closed e.Commands as range 56
        //DEBUG: s.R: 41
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-L: 50
        //DEBUG: e.Pattern-R: 52
        //DEBUG: e.Vars: 54
        //DEBUG: e.Commands: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </58 Tile{ HalfReuse: & Decompile-Pattern-Hole@2/0 HalfReuse: 5/4 AsIs: (/7 AsIs: e.Pattern-L/50 AsIs: )/8 AsIs: (/11 } 3/59 (/60 # LB/61 Tile{ AsIs: )/12 AsIs: (/15 } # Hole/62 3/63 4/64 Tile{ AsIs: )/16 AsIs: (/27 } Tile{ Reuse: # RB/30 } )/65 Tile{ AsIs: e.Pattern-R/52 } )/66 (/67 Tile{ AsIs: e.Vars/54 } Tile{ AsIs: )/28 AsIs: e.Commands/56 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_number(vm, context[59], 3UL);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::alloc_ident(vm, context[61], identifiers[ident_LB]);
        refalrts::alloc_ident(vm, context[62], identifiers[ident_Hole]);
        refalrts::alloc_number(vm, context[63], 3UL);
        refalrts::alloc_number(vm, context[64], 4UL);
        refalrts::alloc_close_bracket(vm, context[65]);
        refalrts::alloc_close_bracket(vm, context[66]);
        refalrts::alloc_open_bracket(vm, context[67]);
        refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
        refalrts::reinit_number(context[4], 5UL);
        refalrts::update_ident(context[30], identifiers[ident_RB]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[58] );
        refalrts::link_brackets( context[67], context[28] );
        refalrts::link_brackets( context[11], context[66] );
        refalrts::link_brackets( context[27], context[65] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[60], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[66], context[67] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_elem( res, context[65] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[16], context[27] );
        res = refalrts::splice_evar( res, context[62], context[64] );
        res = refalrts::splice_evar( res, context[12], context[15] );
        res = refalrts::splice_evar( res, context[59], context[61] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[58] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new24/42 s.new25/52 )/8 (/11 s.new26/41 e.new27/44 )/12 (/15 e.new28/46 )/16 (/27 s.new21/29 s.new22/30 e.new23/48 )/28 e.new20/50 >/1
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      // closed e.new27 as range 44
      // closed e.new28 as range 46
      // closed e.new23 as range 48
      // closed e.new20 as range 50
      if( ! refalrts::svar_right( context[52], context[42], context[43] ) )
        continue;
      // closed e.new24 as range 42
      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/53 s.L/52 )/8 (/11 s.R/41 e.Pattern-R/55 )/12 (/15 e.Vars/57 )/16 (/27 s.Offset/29 # SETB/30 s.NewL/63 s.NewR/64 )/28 e.Commands/61 >/1
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[50];
        context[62] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[30] ) )
          continue;
        // closed e.Pattern-L as range 53
        // closed e.Pattern-R as range 55
        // closed e.Vars as range 57
        // closed e.Commands as range 61
        if( ! refalrts::svar_left( context[63], context[59], context[60] ) )
          continue;
        if( ! refalrts::svar_left( context[64], context[59], context[60] ) )
          continue;
        if( ! refalrts::empty_seq( context[59], context[60] ) )
          continue;
        //DEBUG: s.L: 52
        //DEBUG: s.R: 41
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-L: 53
        //DEBUG: e.Pattern-R: 55
        //DEBUG: e.Vars: 57
        //DEBUG: e.Commands: 61
        //DEBUG: s.NewL: 63
        //DEBUG: s.NewR: 64

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@3/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/53 } (/65 Tile{ HalfReuse: # Hole/8 HalfReuse: s.L52 /11 AsIs: s.R/41 } )/66 Tile{ AsIs: e.Pattern-R/55 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/57 AsIs: )/16 AsIs: (/27 AsIs: s.Offset/29 AsIs: # SETB/30 AsIs: s.NewL/63 AsIs: s.NewR/64 AsIs: )/28 AsIs: e.Commands/61 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[65]);
        refalrts::alloc_close_bracket(vm, context[66]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z3]);
        refalrts::reinit_ident(context[8], identifiers[ident_Hole]);
        refalrts::reinit_svar( context[11], context[52] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[7], context[12] );
        refalrts::link_brackets( context[65], context[66] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[12];
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_elem( res, context[66] );
        res = refalrts::splice_evar( res, context[8], context[41] );
        res = refalrts::splice_elem( res, context[65] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/53 s.L/52 )/8 (/11 s.R/41 e.Pattern-R/55 )/12 (/15 e.Vars/57 )/16 (/27 s.Offset/29 # EMP/30 )/28 e.Commands/59 >/1
      context[53] = context[42];
      context[54] = context[43];
      context[55] = context[44];
      context[56] = context[45];
      context[57] = context[46];
      context[58] = context[47];
      context[59] = context[50];
      context[60] = context[51];
      if( ! refalrts::ident_term( identifiers[ident_EMP], context[30] ) )
        continue;
      if( ! refalrts::empty_seq( context[48], context[49] ) )
        continue;
      // closed e.Pattern-L as range 53
      // closed e.Pattern-R as range 55
      // closed e.Vars as range 57
      // closed e.Commands as range 59
      //DEBUG: s.L: 52
      //DEBUG: s.R: 41
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 53
      //DEBUG: e.Pattern-R: 55
      //DEBUG: e.Vars: 57
      //DEBUG: e.Commands: 59

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 )/8 (/11 s.R/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/16 (/27 s.Offset/29 # EMP/30 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@3/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/53 } Tile{ AsIs: e.Pattern-R/55 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Vars/57 } Tile{ AsIs: )/28 AsIs: e.Commands/59 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[28] );
      refalrts::link_brackets( context[7], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new15/31 )/8 (/11 e.new16/33 )/12 (/15 e.new17/35 )/16 (/27 s.new13/29 s.new14/30 )/28 e.new12/37 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      // closed e.new15 as range 31
      // closed e.new16 as range 33
      // closed e.new17 as range 35
      // closed e.new12 as range 37
      do {
        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.new24/39 s.new25/51 )/8 (/11 e.new26/41 )/12 (/15 e.new27/43 )/16 (/27 s.new22/29 s.new23/30 )/28 (/49 e.new18/47 s.new19/53 s.new20/52 )/50 e.new21/45 >/1
        context[39] = context[31];
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = 0;
        context[48] = 0;
        context[49] = refalrts::brackets_left( context[47], context[48], context[45], context[46] );
        if( ! context[49] )
          continue;
        refalrts::bracket_pointers(context[49], context[50]);
        // closed e.new26 as range 41
        // closed e.new27 as range 43
        // closed e.new21 as range 45
        if( ! refalrts::svar_right( context[51], context[39], context[40] ) )
          continue;
        // closed e.new24 as range 39
        if( ! refalrts::svar_right( context[52], context[47], context[48] ) )
          continue;
        if( ! refalrts::svar_right( context[53], context[47], context[48] ) )
          continue;
        // closed e.new18 as range 47
        do {
          // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/54 s.L/51 )/8 (/11 e.Pattern-R/56 )/12 (/15 e.Vars/58 )/16 (/27 s.Offset1/29 # PLEN/30 )/28 (/49 s.Offset2/53 # LEN/52 )/50 e.Commands/60 >/1
          context[54] = context[39];
          context[55] = context[40];
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[46];
          if( ! refalrts::ident_term( identifiers[ident_PLEN], context[30] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LEN], context[52] ) )
            continue;
          if( ! refalrts::empty_seq( context[47], context[48] ) )
            continue;
          // closed e.Pattern-L as range 54
          // closed e.Pattern-R as range 56
          // closed e.Vars as range 58
          // closed e.Commands as range 60
          //DEBUG: s.L: 51
          //DEBUG: s.Offset1: 29
          //DEBUG: s.Offset2: 53
          //DEBUG: e.Pattern-L: 54
          //DEBUG: e.Pattern-R: 56
          //DEBUG: e.Vars: 58
          //DEBUG: e.Commands: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/51 {REMOVED TILE} s.Offset1/29 {REMOVED TILE} s.Offset2/53 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 HalfReuse: 5/7 } (/62 Tile{ AsIs: e.Pattern-L/54 } (/63 # e/64 3/65 4/66 '='/67 3/68 Tile{ HalfReuse: 4/30 AsIs: )/28 HalfReuse: 4/49 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/56 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/58 HalfReuse: (/16 HalfReuse: # e/27 } 3/69 4/70 '='/71 3/72 4/73 Tile{ HalfReuse: )/52 AsIs: )/50 AsIs: e.Commands/60 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[62]);
          refalrts::alloc_open_bracket(vm, context[63]);
          refalrts::alloc_ident(vm, context[64], identifiers[ident_e]);
          refalrts::alloc_number(vm, context[65], 3UL);
          refalrts::alloc_number(vm, context[66], 4UL);
          refalrts::alloc_char(vm, context[67], '=');
          refalrts::alloc_number(vm, context[68], 3UL);
          refalrts::alloc_number(vm, context[69], 3UL);
          refalrts::alloc_number(vm, context[70], 4UL);
          refalrts::alloc_char(vm, context[71], '=');
          refalrts::alloc_number(vm, context[72], 3UL);
          refalrts::alloc_number(vm, context[73], 4UL);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
          refalrts::reinit_number(context[7], 5UL);
          refalrts::reinit_number(context[30], 4UL);
          refalrts::reinit_number(context[49], 4UL);
          refalrts::reinit_open_bracket(context[16]);
          refalrts::reinit_ident(context[27], identifiers[ident_e]);
          refalrts::reinit_close_bracket(context[52]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[15], context[50] );
          refalrts::link_brackets( context[16], context[52] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[62], context[8] );
          refalrts::link_brackets( context[63], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[52];
          res = refalrts::splice_evar( res, context[69], context[73] );
          res = refalrts::splice_evar( res, context[8], context[27] );
          res = refalrts::splice_evar( res, context[30], context[49] );
          res = refalrts::splice_evar( res, context[63], context[68] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_elem( res, context[62] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/54 s.L/51 )/8 (/11 e.Pattern-R/56 )/12 (/15 e.Vars/58 )/16 (/27 s.Offset1/29 # PLENS/30 )/28 (/49 s.Offset2/64 # LENS/53 s.Char/52 )/50 e.Commands/62 >/1
          context[54] = context[39];
          context[55] = context[40];
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[47];
          context[61] = context[48];
          context[62] = context[45];
          context[63] = context[46];
          if( ! refalrts::ident_term( identifiers[ident_PLENS], context[30] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LENS], context[53] ) )
            continue;
          // closed e.Pattern-L as range 54
          // closed e.Pattern-R as range 56
          // closed e.Vars as range 58
          // closed e.Commands as range 62
          if( ! refalrts::svar_left( context[64], context[60], context[61] ) )
            continue;
          if( ! refalrts::empty_seq( context[60], context[61] ) )
            continue;
          //DEBUG: s.L: 51
          //DEBUG: s.Offset1: 29
          //DEBUG: s.Char: 52
          //DEBUG: e.Pattern-L: 54
          //DEBUG: e.Pattern-R: 56
          //DEBUG: e.Vars: 58
          //DEBUG: e.Commands: 62
          //DEBUG: s.Offset2: 64

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/51 {REMOVED TILE} s.Offset1/29 {REMOVED TILE} s.Offset2/64 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 HalfReuse: 6/7 } (/65 Tile{ AsIs: e.Pattern-L/54 } (/66 # e/67 3/68 4/69 '='/70 3/71 Tile{ HalfReuse: 4/30 AsIs: )/28 AsIs: (/49 } Tile{ Reuse: # C/53 AsIs: s.Char/52 } )/72 5/73 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/56 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/58 HalfReuse: (/16 HalfReuse: # e/27 } 3/74 4/75 '='/76 3/77 4/78 )/79 Tile{ AsIs: )/50 AsIs: e.Commands/62 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[65]);
          refalrts::alloc_open_bracket(vm, context[66]);
          refalrts::alloc_ident(vm, context[67], identifiers[ident_e]);
          refalrts::alloc_number(vm, context[68], 3UL);
          refalrts::alloc_number(vm, context[69], 4UL);
          refalrts::alloc_char(vm, context[70], '=');
          refalrts::alloc_number(vm, context[71], 3UL);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_number(vm, context[73], 5UL);
          refalrts::alloc_number(vm, context[74], 3UL);
          refalrts::alloc_number(vm, context[75], 4UL);
          refalrts::alloc_char(vm, context[76], '=');
          refalrts::alloc_number(vm, context[77], 3UL);
          refalrts::alloc_number(vm, context[78], 4UL);
          refalrts::alloc_close_bracket(vm, context[79]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
          refalrts::reinit_number(context[7], 6UL);
          refalrts::reinit_number(context[30], 4UL);
          refalrts::update_ident(context[53], identifiers[ident_C]);
          refalrts::reinit_open_bracket(context[16]);
          refalrts::reinit_ident(context[27], identifiers[ident_e]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[15], context[50] );
          refalrts::link_brackets( context[16], context[79] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[65], context[8] );
          refalrts::link_brackets( context[49], context[72] );
          refalrts::link_brackets( context[66], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[50];
          res = refalrts::splice_evar( res, context[74], context[79] );
          res = refalrts::splice_evar( res, context[8], context[27] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_evar( res, context[53], context[52] );
          res = refalrts::splice_evar( res, context[30], context[49] );
          res = refalrts::splice_evar( res, context[66], context[71] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_elem( res, context[65] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/54 s.L/51 )/8 (/11 s.R/62 e.Pattern-R/56 )/12 (/15 e.Vars/58 )/16 (/27 s.Offset1/29 # PLENP/30 )/28 (/49 s.Offset2/53 # LENP/52 )/50 e.Commands/60 >/1
        context[54] = context[39];
        context[55] = context[40];
        context[56] = context[41];
        context[57] = context[42];
        context[58] = context[43];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        if( ! refalrts::ident_term( identifiers[ident_PLENP], context[30] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_LENP], context[52] ) )
          continue;
        if( ! refalrts::empty_seq( context[47], context[48] ) )
          continue;
        // closed e.Pattern-L as range 54
        // closed e.Vars as range 58
        // closed e.Commands as range 60
        if( ! refalrts::svar_left( context[62], context[56], context[57] ) )
          continue;
        // closed e.Pattern-R as range 56
        //DEBUG: s.L: 51
        //DEBUG: s.Offset1: 29
        //DEBUG: s.Offset2: 53
        //DEBUG: e.Pattern-L: 54
        //DEBUG: e.Vars: 58
        //DEBUG: e.Commands: 60
        //DEBUG: s.R: 62
        //DEBUG: e.Pattern-R: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/51 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1/29 {REMOVED TILE} s.Offset2/53 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 HalfReuse: 7/7 } (/63 Tile{ AsIs: e.Pattern-L/54 } (/64 # e/65 3/66 4/67 '='/68 3/69 4/70 Tile{ AsIs: )/8 AsIs: (/11 } # LB/71 )/72 5/73 )/74 (/75 6/76 (/77 Tile{ Reuse: # RB/30 AsIs: )/28 AsIs: (/49 } # Hole/78 6/79 Tile{ AsIs: s.R/62 } )/80 Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/58 HalfReuse: (/16 HalfReuse: # e/27 } 3/81 4/82 '='/83 3/84 4/85 Tile{ HalfReuse: )/52 AsIs: )/50 AsIs: e.Commands/60 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::alloc_ident(vm, context[65], identifiers[ident_e]);
        refalrts::alloc_number(vm, context[66], 3UL);
        refalrts::alloc_number(vm, context[67], 4UL);
        refalrts::alloc_char(vm, context[68], '=');
        refalrts::alloc_number(vm, context[69], 3UL);
        refalrts::alloc_number(vm, context[70], 4UL);
        refalrts::alloc_ident(vm, context[71], identifiers[ident_LB]);
        refalrts::alloc_close_bracket(vm, context[72]);
        refalrts::alloc_number(vm, context[73], 5UL);
        refalrts::alloc_close_bracket(vm, context[74]);
        refalrts::alloc_open_bracket(vm, context[75]);
        refalrts::alloc_number(vm, context[76], 6UL);
        refalrts::alloc_open_bracket(vm, context[77]);
        refalrts::alloc_ident(vm, context[78], identifiers[ident_Hole]);
        refalrts::alloc_number(vm, context[79], 6UL);
        refalrts::alloc_close_bracket(vm, context[80]);
        refalrts::alloc_number(vm, context[81], 3UL);
        refalrts::alloc_number(vm, context[82], 4UL);
        refalrts::alloc_char(vm, context[83], '=');
        refalrts::alloc_number(vm, context[84], 3UL);
        refalrts::alloc_number(vm, context[85], 4UL);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
        refalrts::reinit_number(context[7], 7UL);
        refalrts::update_ident(context[30], identifiers[ident_RB]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[27], identifiers[ident_e]);
        refalrts::reinit_close_bracket(context[52]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[50] );
        refalrts::link_brackets( context[16], context[52] );
        refalrts::link_brackets( context[75], context[12] );
        refalrts::link_brackets( context[49], context[80] );
        refalrts::link_brackets( context[77], context[28] );
        refalrts::link_brackets( context[63], context[74] );
        refalrts::link_brackets( context[11], context[72] );
        refalrts::link_brackets( context[64], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[52];
        res = refalrts::splice_evar( res, context[81], context[85] );
        res = refalrts::splice_evar( res, context[12], context[27] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_elem( res, context[80] );
        res = refalrts::splice_elem( res, context[62] );
        res = refalrts::splice_evar( res, context[78], context[79] );
        res = refalrts::splice_evar( res, context[30], context[49] );
        res = refalrts::splice_evar( res, context[71], context[77] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_evar( res, context[64], context[70] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_elem( res, context[63] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/39 )/8 (/11 e.Pattern-R/41 )/12 (/15 e.Vars/43 )/16 (/27 s.Offset/29 # STLEN/30 )/28 e.Commands/45 >/1
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_STLEN], context[30] ) )
        continue;
      // closed e.Pattern-L as range 39
      // closed e.Pattern-R as range 41
      // closed e.Vars as range 43
      // closed e.Commands as range 45
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 39
      //DEBUG: e.Pattern-R: 41
      //DEBUG: e.Vars: 43
      //DEBUG: e.Commands: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/27 } Tile{ Reuse: # StartBlock/30 AsIs: )/28 } </47 Tile{ HalfReuse: & Decompile-Pattern-Hole@3/0 HalfReuse: 1/4 AsIs: (/7 AsIs: e.Pattern-L/39 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/41 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/43 AsIs: )/16 } Tile{ AsIs: e.Commands/45 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::update_ident(context[30], identifiers[ident_StartBlock]);
      refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z3]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[47] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[0], context[16] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[30], context[28] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/31 )/8 (/11 e.Pattern-R/33 )/12 (/15 e.Vars/35 )/16 (/27 s.Offset/29 # LABEL/30 e.BlockName/37 )/28 e.Commands/39 >/1
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[23];
    context[40] = context[24];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[30] ) )
      continue;
    // closed e.Pattern-L as range 31
    // closed e.Pattern-R as range 33
    // closed e.Vars as range 35
    // closed e.BlockName as range 37
    // closed e.Commands as range 39
    //DEBUG: s.Offset: 29
    //DEBUG: e.Pattern-L: 31
    //DEBUG: e.Pattern-R: 33
    //DEBUG: e.Vars: 35
    //DEBUG: e.BlockName: 37
    //DEBUG: e.Commands: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/27 s.Offset/29 # LABEL/30 e.BlockName/37 )/28 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole@1/4 AsIs: (/7 AsIs: e.Pattern-L/31 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/33 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/35 AsIs: )/16 } Tile{ AsIs: e.Commands/39 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::splice_to_freelist_open( vm, context[16], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole@1/4 (/7 s.L/21 )/8 (/11 s.R/22 )/12 (/15 )/16 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
      continue;
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    if( ! refalrts::svar_left( context[22], context[19], context[20] ) )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    //DEBUG: s.L: 21
    //DEBUG: s.R: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@1/4 (/7 s.L/21 )/8 (/11 s.R/22 )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/15 HalfReuse: # EndOfFunction/16 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[16], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[15], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole@1/4 (/7 e.Pattern-L/17 )/8 (/11 e.Pattern-R/19 )/12 (/15 e.Vars/21 )/16 e.Commands/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Pattern-L as range 17
    // closed e.Pattern-R as range 19
    // closed e.Vars as range 21
    // closed e.Commands as range 23
    //DEBUG: e.Pattern-L: 17
    //DEBUG: e.Pattern-R: 19
    //DEBUG: e.Vars: 21
    //DEBUG: e.Commands: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 }"=A "/25 Tile{ HalfReuse: 0/0 HalfReuse: 3/4 AsIs: (/7 AsIs: e.Pattern-L/17 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/19 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/21 AsIs: )/16 } )/27 Tile{ AsIs: e.Commands/23 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[25], context[26], "=A ", 3);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_number(context[4], 3UL);
    refalrts::link_brackets( context[1], context[27] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[0], context[16] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole@1/4 (/7 e.dyn0/5 )/8 (/11 e.dyn1/9 )/12 (/15 e.dyn2/13 )/16 e.dyn3/2 >/1
  // closed e.dyn0 as range 5
  // closed e.dyn1 as range 9
  // closed e.dyn2 as range 13
  // closed e.dyn3 as range 2
  //DEBUG: e.dyn0: 5
  //DEBUG: e.dyn1: 9
  //DEBUG: e.dyn2: 13
  //DEBUG: e.dyn3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & Decompile-Pattern-Hole@0/18 Tile{ HalfReuse: 0/0 HalfReuse: 3/4 AsIs: (/7 AsIs: e.dyn0/5 AsIs: )/8 AsIs: (/11 AsIs: e.dyn1/9 AsIs: )/12 AsIs: (/15 AsIs: e.dyn2/13 AsIs: )/16 AsIs: e.dyn3/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Decompilem_Patternm_Hole_Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_Z1("Decompile-Pattern-Hole@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_NoHole_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 68 elems
  refalrts::Iter context[68];
  refalrts::zeros( context, 68 );
  // </0 & Decompile-Pattern-NoHole@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-NoHole@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & Decompile-Pattern-NoHole@1/4 s.new5/5 (/8 e.new10/14 )/9 (/12 e.new11/16 )/13 (/22 s.new6/24 s.new7/25 e.new8/20 )/23 e.new9/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.new10 as range 14
    // closed e.new11 as range 16
    // closed e.new9 as range 18
    if( ! refalrts::svar_left( context[24], context[20], context[21] ) )
      continue;
    if( ! refalrts::svar_left( context[25], context[20], context[21] ) )
      continue;
    // closed e.new8 as range 20
    do {
      // </0 & Decompile-Pattern-NoHole@1/4 s.new12/5 (/8 e.new18/26 )/9 (/12 e.new19/28 )/13 (/22 s.new14/24 s.new15/25 e.new16/30 s.new17/34 )/23 e.new13/32 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[18];
      context[33] = context[19];
      // closed e.new18 as range 26
      // closed e.new19 as range 28
      // closed e.new13 as range 32
      if( ! refalrts::svar_right( context[34], context[30], context[31] ) )
        continue;
      // closed e.new16 as range 30
      do {
        // </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.Pattern-L/44 (/50 # Hole/52 s.L/53 s.R/54 )/51 e.Pattern-R/46 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # SETB/25 s.L/43 s.R/34 )/23 e.Commands/41 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[25] ) )
          continue;
        // closed e.Vars as range 37
        // closed e.Commands as range 41
        if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
          continue;
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        context[44] = 0;
        context[45] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[46] = context[35];
          context[47] = context[36];
          context[48] = 0;
          context[49] = 0;
          context[50] = refalrts::brackets_left( context[48], context[49], context[46], context[47] );
          if( ! context[50] )
            continue;
          refalrts::bracket_pointers(context[50], context[51]);
          context[52] = refalrts::ident_left( identifiers[ident_Hole], context[48], context[49] );
          if( ! context[52] )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[53], context[43], context[48], context[49] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[54], context[34], context[48], context[49] ) )
            continue;
          if( ! refalrts::empty_seq( context[48], context[49] ) )
            continue;
          // closed e.Pattern-R as range 46
          //DEBUG: s.Level0: 5
          //DEBUG: s.Offset: 24
          //DEBUG: s.R: 34
          //DEBUG: e.Vars: 37
          //DEBUG: e.Commands: 41
          //DEBUG: s.L: 43
          //DEBUG: e.Pattern-L: 44
          //DEBUG: e.Pattern-R: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.L/53 s.R/54 {REMOVED TILE} {REMOVED TILE} s.Offset/24 # SETB/25 s.L/43 s.R/34 )/23 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@4/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Pattern-L/44 HalfReuse: s.L53 /50 HalfReuse: )/52 } Tile{ AsIs: (/22 } Tile{ HalfReuse: s.R54 /51 AsIs: e.Pattern-R/46 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/37 AsIs: )/13 } Tile{ AsIs: e.Commands/41 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z4]);
          refalrts::reinit_svar( context[50], context[53] );
          refalrts::reinit_close_bracket(context[52]);
          refalrts::reinit_svar( context[51], context[54] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[22], context[9] );
          refalrts::link_brackets( context[8], context[52] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[51], context[13] );
          res = refalrts::splice_elem( res, context[22] );
          refalrts::splice_to_freelist_open( vm, context[52], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[44], context[45], context[35], context[36] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.Pattern/35 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # RDY/25 0/34 )/23 e.Commands/39 >/1
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[32];
      context[40] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_RDY], context[25] ) )
        continue;
      if( ! refalrts::number_term( 0UL, context[34] ) )
        continue;
      if( ! refalrts::empty_seq( context[30], context[31] ) )
        continue;
      // closed e.Pattern as range 35
      // closed e.Vars as range 37
      // closed e.Commands as range 39
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 24
      //DEBUG: e.Pattern: 35
      //DEBUG: e.Vars: 37
      //DEBUG: e.Commands: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/12 } Tile{ HalfReuse: # Pattern/22 } s.Level0/5/41 Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/13 } Tile{ AsIs: </0 Reuse: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Vars/37 } Tile{ AsIs: )/9 } Tile{ HalfReuse: '$'/25 HalfReuse: (/34 AsIs: )/23 AsIs: e.Commands/39 AsIs: >/1 ]] }
      refalrts::copy_stvar(vm, context[41], context[5]);
      refalrts::reinit_ident(context[22], identifiers[ident_Pattern]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Result_Z1]);
      refalrts::reinit_char(context[25], '$');
      refalrts::reinit_open_bracket(context[34]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[34], context[23] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.Pattern/26 )/9 (/12 e.Vars/28 )/13 (/22 s.Offset/24 # PUSHVF/25 )/23 e.Commands/30 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_PUSHVF], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      // closed e.Pattern as range 26
      // closed e.Vars as range 28
      // closed e.Commands as range 30
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 24
      //DEBUG: e.Pattern: 26
      //DEBUG: e.Vars: 28
      //DEBUG: e.Commands: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Pattern/4 AsIs: s.Level0/5 } Tile{ AsIs: e.Pattern/26 } )/32 Tile{ AsIs: (/8 } # StartCondition/33 )/34 </35 & Decompile-Result@1/36 Tile{ HalfReuse: s.Level05 /9 AsIs: (/12 AsIs: e.Vars/28 AsIs: )/13 HalfReuse: '$'/22 } Tile{ HalfReuse: (/25 AsIs: )/23 AsIs: e.Commands/30 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_ident(vm, context[33], identifiers[ident_StartCondition]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_gen_Decompilem_Result_Z1]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::reinit_char(context[22], '$');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[35] );
      refalrts::link_brackets( context[25], context[23] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[34] );
      refalrts::link_brackets( context[0], context[32] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_evar( res, context[9], context[22] );
      res = refalrts::splice_evar( res, context[33], context[36] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@1/4 s.new12/5 (/8 e.new18/26 )/9 (/12 e.new19/28 )/13 (/22 s.new14/24 s.new15/25 s.new16/34 e.new17/30 )/23 e.new13/32 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[18];
      context[33] = context[19];
      // closed e.new18 as range 26
      // closed e.new19 as range 28
      // closed e.new13 as range 32
      if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
        continue;
      // closed e.new17 as range 30
      do {
        // </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.Pattern/35 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # TRAN/25 s.Jump/34 )/23 e.Commands-B/41 (/47 s.Jump/49 e.Command/45 )/48 e.Commands-E/43 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[32];
        context[40] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[30], context[31] ) )
          continue;
        // closed e.Pattern as range 35
        // closed e.Vars as range 37
        context[41] = 0;
        context[42] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[43] = context[39];
          context[44] = context[40];
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::brackets_left( context[45], context[46], context[43], context[44] );
          if( ! context[47] )
            continue;
          refalrts::bracket_pointers(context[47], context[48]);
          if( ! refalrts::repeated_stvar_left( vm, context[49], context[34], context[45], context[46] ) )
            continue;
          // closed e.Command as range 45
          // closed e.Commands-E as range 43
          //DEBUG: s.Level0: 5
          //DEBUG: s.Offset: 24
          //DEBUG: s.Jump: 34
          //DEBUG: e.Pattern: 35
          //DEBUG: e.Vars: 37
          //DEBUG: e.Commands-B: 41
          //DEBUG: e.Command: 45
          //DEBUG: e.Commands-E: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE} s.Jump/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Pattern/35 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/37 AsIs: )/13 } Tile{ AsIs: e.Commands-B/41 } Tile{ AsIs: (/22 } '@'/50 Tile{ Reuse: # Restore-NoHole/25 } s.Level0/5/51 '*'/52 (/53 e.Pattern/35/54 Tile{ AsIs: )/23 } (/56 e.Vars/37/57 )/59 )/60 Tile{ AsIs: (/47 AsIs: s.Jump/49 AsIs: e.Command/45 AsIs: )/48 AsIs: e.Commands-E/43 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[50], '@');
          refalrts::copy_stvar(vm, context[51], context[5]);
          refalrts::alloc_char(vm, context[52], '*');
          refalrts::alloc_open_bracket(vm, context[53]);
          refalrts::copy_evar(vm, context[54], context[55], context[35], context[36]);
          refalrts::alloc_open_bracket(vm, context[56]);
          refalrts::copy_evar(vm, context[57], context[58], context[37], context[38]);
          refalrts::alloc_close_bracket(vm, context[59]);
          refalrts::alloc_close_bracket(vm, context[60]);
          refalrts::update_ident(context[25], identifiers[ident_Restorem_NoHole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[47], context[48] );
          refalrts::link_brackets( context[22], context[60] );
          refalrts::link_brackets( context[56], context[59] );
          refalrts::link_brackets( context[53], context[23] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[47];
          res = refalrts::splice_evar( res, context[56], context[60] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[51], context[53] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_elem( res, context[50] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[41], context[42], context[39], context[40] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@1/4 s.new20/5 (/8 e.new28/35 )/9 (/12 e.new29/37 )/13 (/22 '@'/24 s.new22/25 s.new23/34 s.new24/51 e.new25/39 (/49 e.new26/47 )/50 (/45 e.new27/43 )/46 )/23 e.new21/41 >/1
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      if( ! refalrts::char_term( '@', context[24] ) )
        continue;
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_right( context[43], context[44], context[39], context[40] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_right( context[47], context[48], context[39], context[40] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      // closed e.new28 as range 35
      // closed e.new29 as range 37
      // closed e.new26 as range 47
      // closed e.new27 as range 43
      // closed e.new21 as range 41
      if( ! refalrts::svar_left( context[51], context[39], context[40] ) )
        continue;
      // closed e.new25 as range 39
      do {
        // </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 '@'/24 # Restore-Hole/25 s.Level2/34 s.Top2/51 (/66 e.Pattern-L2/64 )/67 (/49 e.Pattern-R2/58 )/50 (/45 e.Vars2/60 )/46 )/23 e.Commands/62 >/1
        context[52] = context[35];
        context[53] = context[36];
        context[54] = context[37];
        context[55] = context[38];
        context[56] = context[39];
        context[57] = context[40];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[43];
        context[61] = context[44];
        context[62] = context[41];
        context[63] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[25] ) )
          continue;
        context[64] = 0;
        context[65] = 0;
        context[66] = refalrts::brackets_left( context[64], context[65], context[56], context[57] );
        if( ! context[66] )
          continue;
        refalrts::bracket_pointers(context[66], context[67]);
        if( ! refalrts::empty_seq( context[56], context[57] ) )
          continue;
        // closed e.Pattern1 as range 52
        // closed e.Vars1 as range 54
        // closed e.Pattern-L2 as range 64
        // closed e.Pattern-R2 as range 58
        // closed e.Vars2 as range 60
        // closed e.Commands as range 62
        //DEBUG: s.Level0: 5
        //DEBUG: s.Level2: 34
        //DEBUG: s.Top2: 51
        //DEBUG: e.Pattern1: 52
        //DEBUG: e.Vars1: 54
        //DEBUG: e.Pattern-L2: 64
        //DEBUG: e.Pattern-R2: 58
        //DEBUG: e.Vars2: 60
        //DEBUG: e.Commands: 62

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 {REMOVED TILE} )/23 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & Decompile-Pattern-Hole/25 AsIs: s.Level2/34 AsIs: s.Top2/51 AsIs: (/66 AsIs: e.Pattern-L2/64 AsIs: )/67 AsIs: (/49 AsIs: e.Pattern-R2/58 AsIs: )/50 AsIs: (/45 AsIs: e.Vars2/60 AsIs: )/46 } Tile{ AsIs: e.Commands/62 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[25], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[45], context[46] );
        refalrts::link_brackets( context[49], context[50] );
        refalrts::link_brackets( context[66], context[67] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[24], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 '@'/24 # Restore-NoHole/25 s.Level2/34 s.Top2/51 (/49 e.Pattern2/56 )/50 (/45 e.Vars2/58 )/46 )/23 e.Commands/60 >/1
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[38];
      context[56] = context[47];
      context[57] = context[48];
      context[58] = context[43];
      context[59] = context[44];
      context[60] = context[41];
      context[61] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      // closed e.Pattern1 as range 52
      // closed e.Vars1 as range 54
      // closed e.Pattern2 as range 56
      // closed e.Vars2 as range 58
      // closed e.Commands as range 60
      //DEBUG: s.Level0: 5
      //DEBUG: s.Level2: 34
      //DEBUG: s.Top2: 51
      //DEBUG: e.Pattern1: 52
      //DEBUG: e.Vars1: 54
      //DEBUG: e.Pattern2: 56
      //DEBUG: e.Vars2: 58
      //DEBUG: e.Commands: 60

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 {REMOVED TILE} )/23 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & Decompile-Pattern-NoHole/25 AsIs: s.Level2/34 AsIs: s.Top2/51 AsIs: (/49 AsIs: e.Pattern2/56 AsIs: )/50 AsIs: (/45 AsIs: e.Vars2/58 AsIs: )/46 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[25], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[49], context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[24], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.Pattern/26 )/9 (/12 e.Vars/28 )/13 (/22 s.Offset/24 # LABEL/25 e.BlockName/30 )/23 e.Commands/32 >/1
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[18];
    context[33] = context[19];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[25] ) )
      continue;
    // closed e.Pattern as range 26
    // closed e.Vars as range 28
    // closed e.BlockName as range 30
    // closed e.Commands as range 32
    //DEBUG: s.Level0: 5
    //DEBUG: s.Offset: 24
    //DEBUG: e.Pattern: 26
    //DEBUG: e.Vars: 28
    //DEBUG: e.BlockName: 30
    //DEBUG: e.Commands: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/22 s.Offset/24 # LABEL/25 e.BlockName/30 )/23 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Pattern/26 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/28 AsIs: )/13 } Tile{ AsIs: e.Commands/32 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[32], context[33] );
    refalrts::splice_to_freelist_open( vm, context[13], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 )/9 (/12 )/13 >/1
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.Level0: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 )/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/12 HalfReuse: # EndOfFunction/13 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[13], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[12], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.Pattern/14 )/9 (/12 e.Vars/16 )/13 e.Commands/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Pattern as range 14
    // closed e.Vars as range 16
    // closed e.Commands as range 18
    //DEBUG: s.Level0: 5
    //DEBUG: e.Pattern: 14
    //DEBUG: e.Vars: 16
    //DEBUG: e.Commands: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '='/4 }"B "/20 Tile{ AsIs: s.Level0/5 } '*'/22 Tile{ AsIs: (/8 AsIs: e.Pattern/14 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/16 AsIs: )/13 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Commands/18 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "B ", 2);
    refalrts::alloc_char(vm, context[22], '*');
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_char(context[4], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-NoHole@1/4 s.Level0/5 (/8 e.dyn0/6 )/9 (/12 e.dyn1/10 )/13 e.dyn2/2 >/1
  // closed e.dyn0 as range 6
  // closed e.dyn1 as range 10
  // closed e.dyn2 as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: e.dyn0: 6
  //DEBUG: e.dyn1: 10
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@0/4 AsIs: s.Level0/5 } '*'/14 Tile{ AsIs: (/8 AsIs: e.dyn0/6 AsIs: )/9 AsIs: (/12 AsIs: e.dyn1/10 AsIs: )/13 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[14], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_NoHole_Z1("Decompile-Pattern-NoHole@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_NoHole_Z1);


static refalrts::FnResult func_gen_DoFormatExpr_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 80 elems
  refalrts::Iter context[80];
  refalrts::zeros( context, 80 );
  // </0 & DoFormatExpr@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoFormatExpr@1/4 (/7 e.new5/17 )/8 (/11 e.new6/19 )/12 (/15 e.new7/21 )/16 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.new5 as range 17
    // closed e.new6 as range 19
    // closed e.new7 as range 21
    do {
      // </0 & DoFormatExpr@1/4 (/7 e.Limit/23 )/8 (/11 e.Indent0/25 )/12 (/15 e.Result/27 ' '/29 )/16 >/1
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = context[22];
      context[29] = refalrts::char_right( ' ', context[27], context[28] );
      if( ! context[29] )
        continue;
      // closed e.Limit as range 23
      // closed e.Indent0 as range 25
      // closed e.Result as range 27
      //DEBUG: e.Limit: 23
      //DEBUG: e.Indent0: 25
      //DEBUG: e.Result: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DoFormatExpr@1/4 (/7 e.Limit/23 )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/25 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: ':'/16 } Tile{ AsIs: ' '/29 } Tile{ AsIs: e.Result/27 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_char(context[12], ' ');
      refalrts::reinit_char(context[15], ' ');
      refalrts::reinit_char(context[16], ':');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[11], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[11], context[15] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@1/4 (/7 e.Limit/23 )/8 (/11 e.Indent0/25 )/12 (/15 e.Result/27 )/16 >/1
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    context[28] = context[22];
    // closed e.Limit as range 23
    // closed e.Indent0 as range 25
    // closed e.Result as range 27
    //DEBUG: e.Limit: 23
    //DEBUG: e.Indent0: 25
    //DEBUG: e.Result: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} e.Limit/23 )/8 {REMOVED TILE} {REMOVED TILE} )/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/25 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: ':'/4 HalfReuse: ' '/7 } Tile{ AsIs: e.Result/27 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_char(context[12], ' ');
    refalrts::reinit_char(context[15], ' ');
    refalrts::reinit_char(context[4], ':');
    refalrts::reinit_char(context[7], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr@1/4 (/7 e.new5/17 )/8 (/11 e.new6/19 )/12 (/15 e.new7/21 )/16 ';'/25 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = refalrts::char_left( ';', context[23], context[24] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.new5 as range 17
    // closed e.new6 as range 19
    // closed e.new7 as range 21
    do {
      // </0 & DoFormatExpr@1/4 (/7 e.Limit/26 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 ' '/32 )/16 ';'/25 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = refalrts::char_right( ' ', context[30], context[31] );
      if( ! context[32] )
        continue;
      // closed e.Limit as range 26
      // closed e.Indent0 as range 28
      // closed e.Result as range 30
      //DEBUG: e.Limit: 26
      //DEBUG: e.Indent0: 28
      //DEBUG: e.Result: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoFormatExpr@1/4 (/7 e.Limit/26 )/8 (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Indent0/28 } Tile{ Reuse: ' '/25 HalfReuse: ' '/1 } Tile{ HalfReuse: ':'/12 HalfReuse: ' '/15 AsIs: e.Result/30 Reuse: ';'/32 AsIs: )/16 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_char(context[25], ' ');
      refalrts::reinit_char(context[1], ' ');
      refalrts::reinit_char(context[12], ':');
      refalrts::reinit_char(context[15], ' ');
      refalrts::update_char(context[32], ';');
      refalrts::link_brackets( context[0], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[12], context[16] );
      res = refalrts::splice_evar( res, context[25], context[1] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@1/4 (/7 e.Limit/26 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 )/16 ';'/25 >/1
    context[26] = context[17];
    context[27] = context[18];
    context[28] = context[19];
    context[29] = context[20];
    context[30] = context[21];
    context[31] = context[22];
    // closed e.Limit as range 26
    // closed e.Indent0 as range 28
    // closed e.Result as range 30
    //DEBUG: e.Limit: 26
    //DEBUG: e.Indent0: 28
    //DEBUG: e.Result: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} e.Limit/26 )/8 {REMOVED TILE} {REMOVED TILE} )/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/28 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: ':'/4 HalfReuse: ' '/7 } Tile{ AsIs: e.Result/30 } Tile{ AsIs: ';'/25 HalfReuse: )/1 ]] }
    refalrts::reinit_char(context[12], ' ');
    refalrts::reinit_char(context[15], ' ');
    refalrts::reinit_char(context[4], ':');
    refalrts::reinit_char(context[7], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr@1/4 (/7 e.new6/17 s.new7/25 )/8 (/11 e.new8/19 )/12 (/15 e.new9/21 )/16 e.new5/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.new8 as range 19
    // closed e.new9 as range 21
    // closed e.new5 as range 23
    if( ! refalrts::svar_right( context[25], context[17], context[18] ) )
      continue;
    // closed e.new6 as range 17
    do {
      // </0 & DoFormatExpr@1/4 (/7 '-'/34 s.Limit/25 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 )/16 e.Tail/32 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[24];
      context[34] = refalrts::char_left( '-', context[26], context[27] );
      if( ! context[34] )
        continue;
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.Indent0 as range 28
      // closed e.Result as range 30
      // closed e.Tail as range 32
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 28
      //DEBUG: e.Result: 30
      //DEBUG: e.Tail: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/35 e.Indent0/28/36"  : "/38 Tile{ AsIs: e.Result/30 } )/40 Tile{ AsIs: </0 Reuse: & DoFormatExpr@4/4 AsIs: (/7 HalfReuse: 60/34 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/28 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: )/16 AsIs: e.Tail/32 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::copy_evar(vm, context[36], context[37], context[28], context[29]);
      refalrts::alloc_chars(vm, context[38], context[39], "  : ", 4);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
      refalrts::reinit_number(context[34], 60UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[35], context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_evar( res, context[0], context[34] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[35], context[39] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@1/4 (/7 s.new13/25 )/8 (/11 e.new14/26 )/12 (/15 e.new15/28 )/16 (/34 s.new10/36 e.new11/32 )/35 e.new12/30 >/1
    context[26] = context[19];
    context[27] = context[20];
    context[28] = context[21];
    context[29] = context[22];
    context[30] = context[23];
    context[31] = context[24];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.new14 as range 26
    // closed e.new15 as range 28
    // closed e.new12 as range 30
    if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
      continue;
    // closed e.new11 as range 32
    do {
      // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 # W/36 e.Word/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_W], context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Word as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Word: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$6=1@1/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/43 } Tile{ HalfReuse: )/7 } </45 & Lenw/46 </47 & FormatWord:1/48 </49 Tile{ HalfReuse: & Type/36 AsIs: e.Word/41 HalfReuse: >/35 } >/50 ' '/51 >/52 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_Lenw]);
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::alloc_name(vm, context[48], functions[efunc_gen_FormatWord_B1]);
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_char(vm, context[51], ' ');
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S6A1Z1]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_name(context[36], functions[efunc_Type]);
      refalrts::reinit_close_call(context[35]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[34], context[7] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[50], context[52] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      res = refalrts::splice_evar( res, context[45], context[49] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 # N/36 s.Number/45 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_N], context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Tail as range 43
      if( ! refalrts::svar_left( context[45], context[41], context[42] ) )
        continue;
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Tail: 43
      //DEBUG: s.Number: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$7=1@1/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/43 } Tile{ HalfReuse: )/7 } </46 & Lenw/47 </48 Tile{ HalfReuse: & Symb/36 AsIs: s.Number/45 HalfReuse: >/35 } ' '/49 >/50 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Lenw]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_char(vm, context[49], ' ');
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S7A1Z1]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_name(context[36], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[35]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[34], context[7] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@1/4 (/7 s.new18/25 )/8 (/11 e.new19/37 )/12 (/15 e.new20/39 )/16 (/34 # C/36 e.new17/41 )/35 e.new16/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_C], context[36] ) )
        continue;
      // closed e.new19 as range 37
      // closed e.new20 as range 39
      // closed e.new17 as range 41
      // closed e.new16 as range 43
      do {
        // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/45 )/12 (/15 e.Result/47 )/16 (/34 # C/36 e.Chars1/49 )/35 (/55 # C/57 e.Chars2/53 )/56 e.Tail/51 >/1
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = 0;
        context[54] = 0;
        context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
        if( ! context[55] )
          continue;
        refalrts::bracket_pointers(context[55], context[56]);
        context[57] = refalrts::ident_left( identifiers[ident_C], context[53], context[54] );
        if( ! context[57] )
          continue;
        // closed e.Indent0 as range 45
        // closed e.Result as range 47
        // closed e.Chars1 as range 49
        // closed e.Chars2 as range 53
        // closed e.Tail as range 51
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 45
        //DEBUG: e.Result: 47
        //DEBUG: e.Chars1: 49
        //DEBUG: e.Chars2: 53
        //DEBUG: e.Tail: 51

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/35 (/55 # C/57 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 AsIs: s.Limit/25 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/45 AsIs: )/12 AsIs: (/15 AsIs: e.Result/47 AsIs: )/16 AsIs: (/34 AsIs: # C/36 } Tile{ AsIs: e.Chars1/49 } Tile{ AsIs: e.Chars2/53 } Tile{ AsIs: )/56 AsIs: e.Tail/51 AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[34], context[56] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[56];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, context[36], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoFormatExpr@1/4 (/7 s.new24/25 )/8 (/11 e.new25/45 )/12 (/15 e.new26/47 )/16 (/34 # C/36 s.new22/53 e.new23/49 )/35 e.new21/51 >/1
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        // closed e.new25 as range 45
        // closed e.new26 as range 47
        // closed e.new21 as range 51
        if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
          continue;
        // closed e.new23 as range 49
        do {
          // </0 & DoFormatExpr@1/4 (/7 s.new30/25 )/8 (/11 e.new31/54 )/12 (/15 e.new32/56 '\''/62 )/16 (/34 # C/36 s.new28/53 e.new29/58 )/35 e.new27/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          context[62] = refalrts::char_right( '\'', context[56], context[57] );
          if( ! context[62] )
            continue;
          // closed e.new31 as range 54
          // closed e.new32 as range 56
          // closed e.new29 as range 58
          // closed e.new27 as range 60
          do {
            // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\\'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\\', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\\'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\\');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\''/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\'', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\''/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\'');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\"'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\"', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\"'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\"');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\n'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\n', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 'n'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 'n');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\t'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\t', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 't'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 't');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\r'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\r', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 'r'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 'r');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 s.Char/53 e.Chars/67 )/35 e.Tail/69 >/1
          context[63] = context[54];
          context[64] = context[55];
          context[65] = context[56];
          context[66] = context[57];
          context[67] = context[58];
          context[68] = context[59];
          context[69] = context[60];
          context[70] = context[61];
          // closed e.Indent0 as range 63
          // closed e.Result as range 65
          // closed e.Chars as range 67
          // closed e.Tail as range 69
          //DEBUG: s.Limit: 25
          //DEBUG: s.Char: 53
          //DEBUG: e.Indent0: 63
          //DEBUG: e.Result: 65
          //DEBUG: e.Chars: 67
          //DEBUG: e.Tail: 69

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$9=1@1/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 HalfReuse: )/62 HalfReuse: (/16 } Tile{ AsIs: e.Chars/67 } )/71 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/69 } Tile{ AsIs: )/35 } </72 & Lenw/73 Tile{ HalfReuse: </34 HalfReuse: & EscapeChar$7=1/36 AsIs: s.Char/53 } </74 & Ord/75 s.Char/53/76 >/77 >/78 >/79 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[71]);
          refalrts::alloc_open_call(vm, context[72]);
          refalrts::alloc_name(vm, context[73], functions[efunc_Lenw]);
          refalrts::alloc_open_call(vm, context[74]);
          refalrts::alloc_name(vm, context[75], functions[efunc_Ord]);
          refalrts::copy_stvar(vm, context[76], context[53]);
          refalrts::alloc_close_call(vm, context[77]);
          refalrts::alloc_close_call(vm, context[78]);
          refalrts::alloc_close_call(vm, context[79]);
          refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S9A1Z1]);
          refalrts::reinit_svar( context[8], context[25] );
          refalrts::reinit_close_bracket(context[62]);
          refalrts::reinit_open_bracket(context[16]);
          refalrts::reinit_open_call(context[34]);
          refalrts::reinit_name(context[36], functions[efunc_gen_EscapeChar_S7A1]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[79] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[78] );
          refalrts::push_stack( vm, context[34] );
          refalrts::push_stack( vm, context[77] );
          refalrts::push_stack( vm, context[74] );
          refalrts::link_brackets( context[7], context[35] );
          refalrts::link_brackets( context[16], context[71] );
          refalrts::link_brackets( context[15], context[62] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[74], context[79] );
          res = refalrts::splice_evar( res, context[34], context[53] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_elem( res, context[7] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[8], context[16] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\\'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\\', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\\'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\\');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\''/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\'', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\''/36 AsIs: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\"'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\"', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\"'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\"');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\n'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\n', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 'n'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 'n');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\t'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\t', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 't'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 't');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\r'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\r', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 'r'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 'r');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 s.Char/53 e.Chars/58 )/35 e.Tail/60 >/1
        context[54] = context[45];
        context[55] = context[46];
        context[56] = context[47];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[50];
        context[60] = context[51];
        context[61] = context[52];
        // closed e.Indent0 as range 54
        // closed e.Result as range 56
        // closed e.Chars as range 58
        // closed e.Tail as range 60
        //DEBUG: s.Limit: 25
        //DEBUG: s.Char: 53
        //DEBUG: e.Indent0: 54
        //DEBUG: e.Result: 56
        //DEBUG: e.Chars: 58
        //DEBUG: e.Tail: 60

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$10=1@1/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Chars/58 } )/62 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/60 } Tile{ AsIs: )/35 } </63 & Lenw/64 '\''/65 </66 Tile{ HalfReuse: & EscapeChar$7=1/36 AsIs: s.Char/53 } </67 & Ord/68 s.Char/53/69 >/70 >/71 '\''/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
        refalrts::alloc_char(vm, context[65], '\'');
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_open_call(vm, context[67]);
        refalrts::alloc_name(vm, context[68], functions[efunc_Ord]);
        refalrts::copy_stvar(vm, context[69], context[53]);
        refalrts::alloc_close_call(vm, context[70]);
        refalrts::alloc_close_call(vm, context[71]);
        refalrts::alloc_char(vm, context[72], '\'');
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S10A1Z1]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_name(context[36], functions[efunc_gen_EscapeChar_S7A1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[71] );
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[67] );
        refalrts::link_brackets( context[7], context[35] );
        refalrts::link_brackets( context[34], context[62] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[67], context[73] );
        res = refalrts::splice_evar( res, context[36], context[53] );
        res = refalrts::splice_evar( res, context[63], context[66] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[62] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/45 )/12 (/15 e.Result/47 )/16 (/34 # C/36 )/35 e.Tail/49 >/1
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[43];
      context[50] = context[44];
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      // closed e.Indent0 as range 45
      // closed e.Result as range 47
      // closed e.Tail as range 49
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 45
      //DEBUG: e.Result: 47
      //DEBUG: e.Tail: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } Tile{ HalfReuse: </36 HalfReuse: & Sub/35 } Tile{ AsIs: s.Limit/25 } 1/51 >/52 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/45 AsIs: )/12 AsIs: (/15 AsIs: e.Result/47 HalfReuse: ' '/16 HalfReuse: )/34 } Tile{ AsIs: e.Tail/49 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[51], 1UL);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::reinit_open_call(context[36]);
      refalrts::reinit_name(context[35], functions[efunc_Sub]);
      refalrts::reinit_char(context[16], ' ');
      refalrts::reinit_close_bracket(context[34]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[36] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@1/4 (/7 s.new22/25 )/8 (/11 e.new23/37 )/12 (/15 e.new24/39 )/16 (/34 s.new17/36 e.new18/41 s.new19/47 s.new20/46 s.new21/45 )/35 e.new16/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      // closed e.new23 as range 37
      // closed e.new24 as range 39
      // closed e.new16 as range 43
      if( ! refalrts::svar_right( context[45], context[41], context[42] ) )
        continue;
      if( ! refalrts::svar_right( context[46], context[41], context[42] ) )
        continue;
      if( ! refalrts::svar_right( context[47], context[41], context[42] ) )
        continue;
      // closed e.new18 as range 41
      do {
        // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/48 )/12 (/15 e.Result/50 )/16 (/34 # s/36 s.Id/47 '='/46 s.Copy/45 )/35 e.Tail/52 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[43];
        context[53] = context[44];
        if( ! refalrts::char_term( '=', context[46] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_s], context[36] ) )
          continue;
        if( ! refalrts::empty_seq( context[41], context[42] ) )
          continue;
        // closed e.Indent0 as range 48
        // closed e.Result as range 50
        // closed e.Tail as range 52
        //DEBUG: s.Limit: 25
        //DEBUG: s.Id: 47
        //DEBUG: s.Copy: 45
        //DEBUG: e.Indent0: 48
        //DEBUG: e.Result: 50
        //DEBUG: e.Tail: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.Copy/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$12=1@1/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/48 AsIs: )/12 AsIs: (/15 AsIs: e.Result/50 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/52 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/54"s."/55 </57 Tile{ HalfReuse: & Symb/36 AsIs: s.Id/47 HalfReuse: >/46 } ' '/58 >/59 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[54], functions[efunc_Lenw]);
        refalrts::alloc_chars(vm, context[55], context[56], "s.", 2);
        refalrts::alloc_open_call(vm, context[57]);
        refalrts::alloc_char(vm, context[58], ' ');
        refalrts::alloc_close_call(vm, context[59]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S12A1Z1]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[36], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[46]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[59] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[57] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[36], context[46] );
        res = refalrts::splice_evar( res, context[54], context[57] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@1/4 (/7 s.new31/25 )/8 (/11 e.new32/48 )/12 (/15 e.new33/50 )/16 (/34 s.new26/36 s.new29/56 s.new30/57 '='/47 s.new28/46 s.new27/45 )/35 e.new25/54 >/1
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      context[54] = context[43];
      context[55] = context[44];
      if( ! refalrts::char_term( '=', context[47] ) )
        continue;
      // closed e.new32 as range 48
      // closed e.new33 as range 50
      // closed e.new25 as range 54
      if( ! refalrts::svar_left( context[56], context[52], context[53] ) )
        continue;
      if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
        continue;
      if( ! refalrts::empty_seq( context[52], context[53] ) )
        continue;
      do {
        // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/58 )/12 (/15 e.Result/60 )/16 (/34 # t/36 s.IdL/56 s.IdR/57 '='/47 s.CopyL/46 s.CopyR/45 )/35 e.Tail/62 >/1
        context[58] = context[48];
        context[59] = context[49];
        context[60] = context[50];
        context[61] = context[51];
        context[62] = context[54];
        context[63] = context[55];
        if( ! refalrts::ident_term( identifiers[ident_t], context[36] ) )
          continue;
        // closed e.Indent0 as range 58
        // closed e.Result as range 60
        // closed e.Tail as range 62
        //DEBUG: s.Limit: 25
        //DEBUG: s.IdL: 56
        //DEBUG: s.IdR: 57
        //DEBUG: s.CopyL: 46
        //DEBUG: s.CopyR: 45
        //DEBUG: e.Indent0: 58
        //DEBUG: e.Result: 60
        //DEBUG: e.Tail: 62

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.IdR/57 {REMOVED TILE} s.CopyL/46 s.CopyR/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$13=1@1/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/58 AsIs: )/12 AsIs: (/15 AsIs: e.Result/60 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/62 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/64 Tile{ Reuse: 't'/47 } '.'/65 </66 Tile{ HalfReuse: & Symb/36 AsIs: s.IdL/56 } >/67 ' '/68 >/69 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
        refalrts::alloc_char(vm, context[65], '.');
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_char(vm, context[68], ' ');
        refalrts::alloc_close_call(vm, context[69]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S13A1Z1]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_open_call(context[7]);
        refalrts::update_char(context[47], 't');
        refalrts::reinit_name(context[36], functions[efunc_Symb]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[69] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[66] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[67], context[69] );
        res = refalrts::splice_evar( res, context[36], context[56] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_elem( res, context[64] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/58 )/12 (/15 e.Result/60 )/16 (/34 # e/36 s.IdL/56 s.IdR/57 '='/47 s.CopyL/46 s.CopyR/45 )/35 e.Tail/62 >/1
      context[58] = context[48];
      context[59] = context[49];
      context[60] = context[50];
      context[61] = context[51];
      context[62] = context[54];
      context[63] = context[55];
      if( ! refalrts::ident_term( identifiers[ident_e], context[36] ) )
        continue;
      // closed e.Indent0 as range 58
      // closed e.Result as range 60
      // closed e.Tail as range 62
      //DEBUG: s.Limit: 25
      //DEBUG: s.IdL: 56
      //DEBUG: s.IdR: 57
      //DEBUG: s.CopyL: 46
      //DEBUG: s.CopyR: 45
      //DEBUG: e.Indent0: 58
      //DEBUG: e.Result: 60
      //DEBUG: e.Tail: 62

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.IdR/57 {REMOVED TILE} s.CopyL/46 s.CopyR/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$14=1@1/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/58 AsIs: )/12 AsIs: (/15 AsIs: e.Result/60 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/62 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/64 Tile{ Reuse: 'e'/47 } '.'/65 </66 Tile{ HalfReuse: & Symb/36 AsIs: s.IdL/56 } >/67 ' '/68 >/69 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[65], '.');
      refalrts::alloc_open_call(vm, context[66]);
      refalrts::alloc_close_call(vm, context[67]);
      refalrts::alloc_char(vm, context[68], ' ');
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S14A1Z1]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_open_call(context[7]);
      refalrts::update_char(context[47], 'e');
      refalrts::reinit_name(context[36], functions[efunc_Symb]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[67] );
      refalrts::push_stack( vm, context[66] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[36], context[56] );
      res = refalrts::splice_evar( res, context[65], context[66] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[64] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@1/4 (/7 s.new18/25 )/8 (/11 e.new19/37 )/12 (/15 e.new20/39 )/16 (/34 s.new17/36 )/35 e.new16/41 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      // closed e.new19 as range 37
      // closed e.new20 as range 39
      // closed e.new16 as range 41
      do {
        // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 )/16 (/34 # LB/36 )/35 e.Tail/47 >/1
        context[43] = context[37];
        context[44] = context[38];
        context[45] = context[39];
        context[46] = context[40];
        context[47] = context[41];
        context[48] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_LB], context[36] ) )
          continue;
        // closed e.Indent0 as range 43
        // closed e.Result as range 45
        // closed e.Tail as range 47
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 43
        //DEBUG: e.Result: 45
        //DEBUG: e.Tail: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } Tile{ HalfReuse: </36 HalfReuse: & Sub/35 } Tile{ AsIs: s.Limit/25 } 1/49 >/50 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: '('/16 HalfReuse: )/34 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[49], 1UL);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::reinit_open_call(context[36]);
        refalrts::reinit_name(context[35], functions[efunc_Sub]);
        refalrts::reinit_char(context[16], '(');
        refalrts::reinit_close_bracket(context[34]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[34] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[36] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[36], context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@1/4 (/7 s.new22/25 )/8 (/11 e.new23/43 )/12 (/15 e.new24/45 )/16 (/34 # RB/36 )/35 e.new21/47 >/1
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      context[48] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_RB], context[36] ) )
        continue;
      // closed e.new23 as range 43
      // closed e.new24 as range 45
      // closed e.new21 as range 47
      do {
        // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/49 )/12 (/15 e.Result/51 ' '/55 )/16 (/34 # RB/36 )/35 e.Tail/53 >/1
        context[49] = context[43];
        context[50] = context[44];
        context[51] = context[45];
        context[52] = context[46];
        context[53] = context[47];
        context[54] = context[48];
        context[55] = refalrts::char_right( ' ', context[51], context[52] );
        if( ! context[55] )
          continue;
        // closed e.Indent0 as range 49
        // closed e.Result as range 51
        // closed e.Tail as range 53
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 49
        //DEBUG: e.Result: 51
        //DEBUG: e.Tail: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </56 & Add/57 1/58 Tile{ AsIs: s.Limit/25 } Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/49 AsIs: )/12 AsIs: (/15 AsIs: e.Result/51 HalfReuse: )/55 HalfReuse: (/16 HalfReuse: # RB/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/53 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_name(vm, context[57], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[58], 1UL);
        refalrts::reinit_close_call(context[35]);
        refalrts::reinit_close_bracket(context[55]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[34], identifiers[ident_RB]);
        refalrts::reinit_close_bracket(context[36]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[36] );
        refalrts::link_brackets( context[15], context[55] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[56] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[8], context[36] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[56], context[58] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/49 )/12 (/15 e.Result/51 )/16 (/34 # RB/36 )/35 e.Tail/53 >/1
      context[49] = context[43];
      context[50] = context[44];
      context[51] = context[45];
      context[52] = context[46];
      context[53] = context[47];
      context[54] = context[48];
      // closed e.Indent0 as range 49
      // closed e.Result as range 51
      // closed e.Tail as range 53
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 49
      //DEBUG: e.Result: 51
      //DEBUG: e.Tail: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </55 & Sub/56 Tile{ AsIs: s.Limit/25 } 2/57 Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/49 AsIs: )/12 AsIs: (/15 AsIs: e.Result/51 HalfReuse: ')'/16 HalfReuse: ' '/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/53 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_name(vm, context[56], functions[efunc_Sub]);
      refalrts::alloc_number(vm, context[57], 2UL);
      refalrts::reinit_close_call(context[35]);
      refalrts::reinit_char(context[16], ')');
      refalrts::reinit_char(context[34], ' ');
      refalrts::reinit_close_bracket(context[36]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[36] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[55] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[8], context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 '*'/36 e.Inner/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::char_term( '*', context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Inner as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Inner: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 AsIs: s.Limit/25 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 HalfReuse: # LB/36 } )/45 Tile{ AsIs: e.Inner/41 } (/46 # RB/47 Tile{ AsIs: )/35 AsIs: e.Tail/43 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_RB]);
      refalrts::reinit_ident(context[36], identifiers[ident_LB]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[46], context[35] );
      refalrts::link_brackets( context[34], context[45] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[35];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[45] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 '!'/36 (/47 e.Name/45 )/48 e.Inner/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::char_term( '!', context[36] ) )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[41], context[42] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Name as range 45
      // closed e.Inner as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Name: 45
      //DEBUG: e.Inner: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$19=1@1/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Inner/41 } Tile{ AsIs: )/35 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/43 } )/49 </50 & Lenw/51 '<'/52 </53 & FormatWord:1/54 Tile{ HalfReuse: </36 HalfReuse: & Type/47 AsIs: e.Name/45 HalfReuse: >/48 } >/55 ' '/56 >/57 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[52], '<');
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_FormatWord_B1]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_char(vm, context[56], ' ');
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S19A1Z1]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_open_call(context[36]);
      refalrts::reinit_name(context[47], functions[efunc_Type]);
      refalrts::reinit_close_call(context[48]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[7], context[49] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[55], context[57] );
      res = refalrts::splice_evar( res, context[36], context[48] );
      res = refalrts::splice_evar( res, context[49], context[54] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@1/4 (/7 s.new17/25 )/8 (/11 e.new18/37 )/12 (/15 e.new19/39 )/16 (/34 # RK/36 )/35 e.new16/41 >/1
    context[37] = context[26];
    context[38] = context[27];
    context[39] = context[28];
    context[40] = context[29];
    context[41] = context[30];
    context[42] = context[31];
    if( ! refalrts::ident_term( identifiers[ident_RK], context[36] ) )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    // closed e.new18 as range 37
    // closed e.new19 as range 39
    // closed e.new16 as range 41
    do {
      // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 ' '/49 )/16 (/34 # RK/36 )/35 e.Tail/47 >/1
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      context[48] = context[42];
      context[49] = refalrts::char_right( ' ', context[45], context[46] );
      if( ! context[49] )
        continue;
      // closed e.Indent0 as range 43
      // closed e.Result as range 45
      // closed e.Tail as range 47
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 43
      //DEBUG: e.Result: 45
      //DEBUG: e.Tail: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </50 & Add/51 1/52 Tile{ AsIs: s.Limit/25 } Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: )/49 HalfReuse: (/16 HalfReuse: # RK/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[52], 1UL);
      refalrts::reinit_close_call(context[35]);
      refalrts::reinit_close_bracket(context[49]);
      refalrts::reinit_open_bracket(context[16]);
      refalrts::reinit_ident(context[34], identifiers[ident_RK]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[36] );
      refalrts::link_brackets( context[15], context[49] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[8], context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[50], context[52] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@1/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 )/16 (/34 # RK/36 )/35 e.Tail/47 >/1
    context[43] = context[37];
    context[44] = context[38];
    context[45] = context[39];
    context[46] = context[40];
    context[47] = context[41];
    context[48] = context[42];
    // closed e.Indent0 as range 43
    // closed e.Result as range 45
    // closed e.Tail as range 47
    //DEBUG: s.Limit: 25
    //DEBUG: e.Indent0: 43
    //DEBUG: e.Result: 45
    //DEBUG: e.Tail: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@1/4 AsIs: (/7 } </49 & Sub/50 Tile{ AsIs: s.Limit/25 } 2/51 Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: '>'/16 HalfReuse: ' '/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_Sub]);
    refalrts::alloc_number(vm, context[51], 2UL);
    refalrts::reinit_close_call(context[35]);
    refalrts::reinit_char(context[16], '>');
    refalrts::reinit_char(context[34], ' ');
    refalrts::reinit_close_bracket(context[36]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[36] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[49] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[8], context[36] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr@1/4 (/7 e.dyn0/5 )/8 (/11 e.Indent0/9 )/12 (/15 e.dyn3/13 )/16 e.dyn4/2 >/1
  // closed e.dyn0 as range 5
  // closed e.Indent0 as range 9
  // closed e.dyn3 as range 13
  // closed e.dyn4 as range 2
  //DEBUG: e.dyn0: 5
  //DEBUG: e.Indent0: 9
  //DEBUG: e.dyn3: 13
  //DEBUG: e.dyn4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@0/4 AsIs: (/7 AsIs: e.dyn0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/9 HalfReuse: ' '/12 HalfReuse: ' '/15 }": "/17 )/19 (/20 e.Indent0/9/21"    "/23 )/25 (/26 Tile{ AsIs: e.dyn3/13 } Tile{ AsIs: )/16 AsIs: e.dyn4/2 AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[17], context[18], ": ", 2);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::copy_evar(vm, context[21], context[22], context[9], context[10]);
  refalrts::alloc_chars(vm, context[23], context[24], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z0]);
  refalrts::reinit_char(context[12], ' ');
  refalrts::reinit_char(context[15], ' ');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[26], context[16] );
  refalrts::link_brackets( context[20], context[25] );
  refalrts::link_brackets( context[11], context[19] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_Z1("DoFormatExpr@1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_Z1);


static refalrts::FnResult func_gen_DoFormatExpr_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 80 elems
  refalrts::Iter context[80];
  refalrts::zeros( context, 80 );
  // </0 & DoFormatExpr@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoFormatExpr@2/4 (/7 e.new5/17 )/8 (/11 e.new6/19 )/12 (/15 e.new7/21 )/16 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.new5 as range 17
    // closed e.new6 as range 19
    // closed e.new7 as range 21
    do {
      // </0 & DoFormatExpr@2/4 (/7 e.Limit/23 )/8 (/11 e.Indent0/25 )/12 (/15 e.Result/27 ' '/29 )/16 >/1
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = context[22];
      context[29] = refalrts::char_right( ' ', context[27], context[28] );
      if( ! context[29] )
        continue;
      // closed e.Limit as range 23
      // closed e.Indent0 as range 25
      // closed e.Result as range 27
      //DEBUG: e.Limit: 23
      //DEBUG: e.Indent0: 25
      //DEBUG: e.Result: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DoFormatExpr@2/4 (/7 e.Limit/23 )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/25 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: ','/16 } Tile{ AsIs: ' '/29 } Tile{ AsIs: e.Result/27 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_char(context[12], ' ');
      refalrts::reinit_char(context[15], ' ');
      refalrts::reinit_char(context[16], ',');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[11], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[11], context[15] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@2/4 (/7 e.Limit/23 )/8 (/11 e.Indent0/25 )/12 (/15 e.Result/27 )/16 >/1
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    context[28] = context[22];
    // closed e.Limit as range 23
    // closed e.Indent0 as range 25
    // closed e.Result as range 27
    //DEBUG: e.Limit: 23
    //DEBUG: e.Indent0: 25
    //DEBUG: e.Result: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} e.Limit/23 )/8 {REMOVED TILE} {REMOVED TILE} )/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/25 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: ','/4 HalfReuse: ' '/7 } Tile{ AsIs: e.Result/27 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_char(context[12], ' ');
    refalrts::reinit_char(context[15], ' ');
    refalrts::reinit_char(context[4], ',');
    refalrts::reinit_char(context[7], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr@2/4 (/7 e.new5/17 )/8 (/11 e.new6/19 )/12 (/15 e.new7/21 )/16 ';'/25 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = refalrts::char_left( ';', context[23], context[24] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.new5 as range 17
    // closed e.new6 as range 19
    // closed e.new7 as range 21
    do {
      // </0 & DoFormatExpr@2/4 (/7 e.Limit/26 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 ' '/32 )/16 ';'/25 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = refalrts::char_right( ' ', context[30], context[31] );
      if( ! context[32] )
        continue;
      // closed e.Limit as range 26
      // closed e.Indent0 as range 28
      // closed e.Result as range 30
      //DEBUG: e.Limit: 26
      //DEBUG: e.Indent0: 28
      //DEBUG: e.Result: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoFormatExpr@2/4 (/7 e.Limit/26 )/8 (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Indent0/28 } Tile{ Reuse: ' '/25 HalfReuse: ' '/1 } Tile{ HalfReuse: ','/12 HalfReuse: ' '/15 AsIs: e.Result/30 Reuse: ';'/32 AsIs: )/16 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_char(context[25], ' ');
      refalrts::reinit_char(context[1], ' ');
      refalrts::reinit_char(context[12], ',');
      refalrts::reinit_char(context[15], ' ');
      refalrts::update_char(context[32], ';');
      refalrts::link_brackets( context[0], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[12], context[16] );
      res = refalrts::splice_evar( res, context[25], context[1] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@2/4 (/7 e.Limit/26 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 )/16 ';'/25 >/1
    context[26] = context[17];
    context[27] = context[18];
    context[28] = context[19];
    context[29] = context[20];
    context[30] = context[21];
    context[31] = context[22];
    // closed e.Limit as range 26
    // closed e.Indent0 as range 28
    // closed e.Result as range 30
    //DEBUG: e.Limit: 26
    //DEBUG: e.Indent0: 28
    //DEBUG: e.Result: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} e.Limit/26 )/8 {REMOVED TILE} {REMOVED TILE} )/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/28 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: ','/4 HalfReuse: ' '/7 } Tile{ AsIs: e.Result/30 } Tile{ AsIs: ';'/25 HalfReuse: )/1 ]] }
    refalrts::reinit_char(context[12], ' ');
    refalrts::reinit_char(context[15], ' ');
    refalrts::reinit_char(context[4], ',');
    refalrts::reinit_char(context[7], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr@2/4 (/7 e.new6/17 s.new7/25 )/8 (/11 e.new8/19 )/12 (/15 e.new9/21 )/16 e.new5/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.new8 as range 19
    // closed e.new9 as range 21
    // closed e.new5 as range 23
    if( ! refalrts::svar_right( context[25], context[17], context[18] ) )
      continue;
    // closed e.new6 as range 17
    do {
      // </0 & DoFormatExpr@2/4 (/7 '-'/34 s.Limit/25 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 )/16 e.Tail/32 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[24];
      context[34] = refalrts::char_left( '-', context[26], context[27] );
      if( ! context[34] )
        continue;
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.Indent0 as range 28
      // closed e.Result as range 30
      // closed e.Tail as range 32
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 28
      //DEBUG: e.Result: 30
      //DEBUG: e.Tail: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/35 e.Indent0/28/36"  , "/38 Tile{ AsIs: e.Result/30 } )/40 Tile{ AsIs: </0 Reuse: & DoFormatExpr@4/4 AsIs: (/7 HalfReuse: 60/34 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/28 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: )/16 AsIs: e.Tail/32 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::copy_evar(vm, context[36], context[37], context[28], context[29]);
      refalrts::alloc_chars(vm, context[38], context[39], "  , ", 4);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
      refalrts::reinit_number(context[34], 60UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[35], context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_evar( res, context[0], context[34] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[35], context[39] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@2/4 (/7 s.new13/25 )/8 (/11 e.new14/26 )/12 (/15 e.new15/28 )/16 (/34 s.new10/36 e.new11/32 )/35 e.new12/30 >/1
    context[26] = context[19];
    context[27] = context[20];
    context[28] = context[21];
    context[29] = context[22];
    context[30] = context[23];
    context[31] = context[24];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.new14 as range 26
    // closed e.new15 as range 28
    // closed e.new12 as range 30
    if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
      continue;
    // closed e.new11 as range 32
    do {
      // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 # W/36 e.Word/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_W], context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Word as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Word: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$6=1@2/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/43 } Tile{ HalfReuse: )/7 } </45 & Lenw/46 </47 & FormatWord:1/48 </49 Tile{ HalfReuse: & Type/36 AsIs: e.Word/41 HalfReuse: >/35 } >/50 ' '/51 >/52 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_Lenw]);
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::alloc_name(vm, context[48], functions[efunc_gen_FormatWord_B1]);
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_char(vm, context[51], ' ');
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S6A1Z2]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_name(context[36], functions[efunc_Type]);
      refalrts::reinit_close_call(context[35]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[34], context[7] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[50], context[52] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      res = refalrts::splice_evar( res, context[45], context[49] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 # N/36 s.Number/45 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_N], context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Tail as range 43
      if( ! refalrts::svar_left( context[45], context[41], context[42] ) )
        continue;
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Tail: 43
      //DEBUG: s.Number: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$7=1@2/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/43 } Tile{ HalfReuse: )/7 } </46 & Lenw/47 </48 Tile{ HalfReuse: & Symb/36 AsIs: s.Number/45 HalfReuse: >/35 } ' '/49 >/50 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Lenw]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_char(vm, context[49], ' ');
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S7A1Z2]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_name(context[36], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[35]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[34], context[7] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@2/4 (/7 s.new18/25 )/8 (/11 e.new19/37 )/12 (/15 e.new20/39 )/16 (/34 # C/36 e.new17/41 )/35 e.new16/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_C], context[36] ) )
        continue;
      // closed e.new19 as range 37
      // closed e.new20 as range 39
      // closed e.new17 as range 41
      // closed e.new16 as range 43
      do {
        // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/45 )/12 (/15 e.Result/47 )/16 (/34 # C/36 e.Chars1/49 )/35 (/55 # C/57 e.Chars2/53 )/56 e.Tail/51 >/1
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = 0;
        context[54] = 0;
        context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
        if( ! context[55] )
          continue;
        refalrts::bracket_pointers(context[55], context[56]);
        context[57] = refalrts::ident_left( identifiers[ident_C], context[53], context[54] );
        if( ! context[57] )
          continue;
        // closed e.Indent0 as range 45
        // closed e.Result as range 47
        // closed e.Chars1 as range 49
        // closed e.Chars2 as range 53
        // closed e.Tail as range 51
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 45
        //DEBUG: e.Result: 47
        //DEBUG: e.Chars1: 49
        //DEBUG: e.Chars2: 53
        //DEBUG: e.Tail: 51

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/35 (/55 # C/57 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 AsIs: s.Limit/25 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/45 AsIs: )/12 AsIs: (/15 AsIs: e.Result/47 AsIs: )/16 AsIs: (/34 AsIs: # C/36 } Tile{ AsIs: e.Chars1/49 } Tile{ AsIs: e.Chars2/53 } Tile{ AsIs: )/56 AsIs: e.Tail/51 AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[34], context[56] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[56];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, context[36], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoFormatExpr@2/4 (/7 s.new24/25 )/8 (/11 e.new25/45 )/12 (/15 e.new26/47 )/16 (/34 # C/36 s.new22/53 e.new23/49 )/35 e.new21/51 >/1
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        // closed e.new25 as range 45
        // closed e.new26 as range 47
        // closed e.new21 as range 51
        if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
          continue;
        // closed e.new23 as range 49
        do {
          // </0 & DoFormatExpr@2/4 (/7 s.new30/25 )/8 (/11 e.new31/54 )/12 (/15 e.new32/56 '\''/62 )/16 (/34 # C/36 s.new28/53 e.new29/58 )/35 e.new27/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          context[62] = refalrts::char_right( '\'', context[56], context[57] );
          if( ! context[62] )
            continue;
          // closed e.new31 as range 54
          // closed e.new32 as range 56
          // closed e.new29 as range 58
          // closed e.new27 as range 60
          do {
            // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\\'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\\', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\\'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\\');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\''/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\'', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\''/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\'');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\"'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\"', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\"'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\"');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\n'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\n', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 'n'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 'n');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\t'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\t', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 't'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 't');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\r'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\r', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 'r'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 'r');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 s.Char/53 e.Chars/67 )/35 e.Tail/69 >/1
          context[63] = context[54];
          context[64] = context[55];
          context[65] = context[56];
          context[66] = context[57];
          context[67] = context[58];
          context[68] = context[59];
          context[69] = context[60];
          context[70] = context[61];
          // closed e.Indent0 as range 63
          // closed e.Result as range 65
          // closed e.Chars as range 67
          // closed e.Tail as range 69
          //DEBUG: s.Limit: 25
          //DEBUG: s.Char: 53
          //DEBUG: e.Indent0: 63
          //DEBUG: e.Result: 65
          //DEBUG: e.Chars: 67
          //DEBUG: e.Tail: 69

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$9=1@2/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 HalfReuse: )/62 HalfReuse: (/16 } Tile{ AsIs: e.Chars/67 } )/71 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/69 } Tile{ AsIs: )/35 } </72 & Lenw/73 Tile{ HalfReuse: </34 HalfReuse: & EscapeChar$7=1/36 AsIs: s.Char/53 } </74 & Ord/75 s.Char/53/76 >/77 >/78 >/79 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[71]);
          refalrts::alloc_open_call(vm, context[72]);
          refalrts::alloc_name(vm, context[73], functions[efunc_Lenw]);
          refalrts::alloc_open_call(vm, context[74]);
          refalrts::alloc_name(vm, context[75], functions[efunc_Ord]);
          refalrts::copy_stvar(vm, context[76], context[53]);
          refalrts::alloc_close_call(vm, context[77]);
          refalrts::alloc_close_call(vm, context[78]);
          refalrts::alloc_close_call(vm, context[79]);
          refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S9A1Z2]);
          refalrts::reinit_svar( context[8], context[25] );
          refalrts::reinit_close_bracket(context[62]);
          refalrts::reinit_open_bracket(context[16]);
          refalrts::reinit_open_call(context[34]);
          refalrts::reinit_name(context[36], functions[efunc_gen_EscapeChar_S7A1]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[79] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[78] );
          refalrts::push_stack( vm, context[34] );
          refalrts::push_stack( vm, context[77] );
          refalrts::push_stack( vm, context[74] );
          refalrts::link_brackets( context[7], context[35] );
          refalrts::link_brackets( context[16], context[71] );
          refalrts::link_brackets( context[15], context[62] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[74], context[79] );
          res = refalrts::splice_evar( res, context[34], context[53] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_elem( res, context[7] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[8], context[16] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\\'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\\', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\\'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\\');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\''/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\'', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\''/36 AsIs: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\"'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\"', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\"'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\"');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\n'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\n', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 'n'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 'n');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\t'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\t', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 't'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 't');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\r'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\r', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 'r'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 'r');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 s.Char/53 e.Chars/58 )/35 e.Tail/60 >/1
        context[54] = context[45];
        context[55] = context[46];
        context[56] = context[47];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[50];
        context[60] = context[51];
        context[61] = context[52];
        // closed e.Indent0 as range 54
        // closed e.Result as range 56
        // closed e.Chars as range 58
        // closed e.Tail as range 60
        //DEBUG: s.Limit: 25
        //DEBUG: s.Char: 53
        //DEBUG: e.Indent0: 54
        //DEBUG: e.Result: 56
        //DEBUG: e.Chars: 58
        //DEBUG: e.Tail: 60

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$10=1@2/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Chars/58 } )/62 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/60 } Tile{ AsIs: )/35 } </63 & Lenw/64 '\''/65 </66 Tile{ HalfReuse: & EscapeChar$7=1/36 AsIs: s.Char/53 } </67 & Ord/68 s.Char/53/69 >/70 >/71 '\''/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
        refalrts::alloc_char(vm, context[65], '\'');
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_open_call(vm, context[67]);
        refalrts::alloc_name(vm, context[68], functions[efunc_Ord]);
        refalrts::copy_stvar(vm, context[69], context[53]);
        refalrts::alloc_close_call(vm, context[70]);
        refalrts::alloc_close_call(vm, context[71]);
        refalrts::alloc_char(vm, context[72], '\'');
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S10A1Z2]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_name(context[36], functions[efunc_gen_EscapeChar_S7A1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[71] );
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[67] );
        refalrts::link_brackets( context[7], context[35] );
        refalrts::link_brackets( context[34], context[62] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[67], context[73] );
        res = refalrts::splice_evar( res, context[36], context[53] );
        res = refalrts::splice_evar( res, context[63], context[66] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[62] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/45 )/12 (/15 e.Result/47 )/16 (/34 # C/36 )/35 e.Tail/49 >/1
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[43];
      context[50] = context[44];
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      // closed e.Indent0 as range 45
      // closed e.Result as range 47
      // closed e.Tail as range 49
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 45
      //DEBUG: e.Result: 47
      //DEBUG: e.Tail: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } Tile{ HalfReuse: </36 HalfReuse: & Sub/35 } Tile{ AsIs: s.Limit/25 } 1/51 >/52 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/45 AsIs: )/12 AsIs: (/15 AsIs: e.Result/47 HalfReuse: ' '/16 HalfReuse: )/34 } Tile{ AsIs: e.Tail/49 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[51], 1UL);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::reinit_open_call(context[36]);
      refalrts::reinit_name(context[35], functions[efunc_Sub]);
      refalrts::reinit_char(context[16], ' ');
      refalrts::reinit_close_bracket(context[34]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[36] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@2/4 (/7 s.new22/25 )/8 (/11 e.new23/37 )/12 (/15 e.new24/39 )/16 (/34 s.new17/36 e.new18/41 s.new19/47 s.new20/46 s.new21/45 )/35 e.new16/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      // closed e.new23 as range 37
      // closed e.new24 as range 39
      // closed e.new16 as range 43
      if( ! refalrts::svar_right( context[45], context[41], context[42] ) )
        continue;
      if( ! refalrts::svar_right( context[46], context[41], context[42] ) )
        continue;
      if( ! refalrts::svar_right( context[47], context[41], context[42] ) )
        continue;
      // closed e.new18 as range 41
      do {
        // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/48 )/12 (/15 e.Result/50 )/16 (/34 # s/36 s.Id/47 '='/46 s.Copy/45 )/35 e.Tail/52 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[43];
        context[53] = context[44];
        if( ! refalrts::char_term( '=', context[46] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_s], context[36] ) )
          continue;
        if( ! refalrts::empty_seq( context[41], context[42] ) )
          continue;
        // closed e.Indent0 as range 48
        // closed e.Result as range 50
        // closed e.Tail as range 52
        //DEBUG: s.Limit: 25
        //DEBUG: s.Id: 47
        //DEBUG: s.Copy: 45
        //DEBUG: e.Indent0: 48
        //DEBUG: e.Result: 50
        //DEBUG: e.Tail: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.Copy/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$12=1@2/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/48 AsIs: )/12 AsIs: (/15 AsIs: e.Result/50 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/52 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/54"s."/55 </57 Tile{ HalfReuse: & Symb/36 AsIs: s.Id/47 HalfReuse: >/46 } ' '/58 >/59 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[54], functions[efunc_Lenw]);
        refalrts::alloc_chars(vm, context[55], context[56], "s.", 2);
        refalrts::alloc_open_call(vm, context[57]);
        refalrts::alloc_char(vm, context[58], ' ');
        refalrts::alloc_close_call(vm, context[59]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S12A1Z2]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[36], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[46]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[59] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[57] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[36], context[46] );
        res = refalrts::splice_evar( res, context[54], context[57] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@2/4 (/7 s.new31/25 )/8 (/11 e.new32/48 )/12 (/15 e.new33/50 )/16 (/34 s.new26/36 s.new29/56 s.new30/57 '='/47 s.new28/46 s.new27/45 )/35 e.new25/54 >/1
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      context[54] = context[43];
      context[55] = context[44];
      if( ! refalrts::char_term( '=', context[47] ) )
        continue;
      // closed e.new32 as range 48
      // closed e.new33 as range 50
      // closed e.new25 as range 54
      if( ! refalrts::svar_left( context[56], context[52], context[53] ) )
        continue;
      if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
        continue;
      if( ! refalrts::empty_seq( context[52], context[53] ) )
        continue;
      do {
        // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/58 )/12 (/15 e.Result/60 )/16 (/34 # t/36 s.IdL/56 s.IdR/57 '='/47 s.CopyL/46 s.CopyR/45 )/35 e.Tail/62 >/1
        context[58] = context[48];
        context[59] = context[49];
        context[60] = context[50];
        context[61] = context[51];
        context[62] = context[54];
        context[63] = context[55];
        if( ! refalrts::ident_term( identifiers[ident_t], context[36] ) )
          continue;
        // closed e.Indent0 as range 58
        // closed e.Result as range 60
        // closed e.Tail as range 62
        //DEBUG: s.Limit: 25
        //DEBUG: s.IdL: 56
        //DEBUG: s.IdR: 57
        //DEBUG: s.CopyL: 46
        //DEBUG: s.CopyR: 45
        //DEBUG: e.Indent0: 58
        //DEBUG: e.Result: 60
        //DEBUG: e.Tail: 62

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.IdR/57 {REMOVED TILE} s.CopyL/46 s.CopyR/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$13=1@2/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/58 AsIs: )/12 AsIs: (/15 AsIs: e.Result/60 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/62 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/64 Tile{ Reuse: 't'/47 } '.'/65 </66 Tile{ HalfReuse: & Symb/36 AsIs: s.IdL/56 } >/67 ' '/68 >/69 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
        refalrts::alloc_char(vm, context[65], '.');
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_char(vm, context[68], ' ');
        refalrts::alloc_close_call(vm, context[69]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S13A1Z2]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_open_call(context[7]);
        refalrts::update_char(context[47], 't');
        refalrts::reinit_name(context[36], functions[efunc_Symb]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[69] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[66] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[67], context[69] );
        res = refalrts::splice_evar( res, context[36], context[56] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_elem( res, context[64] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/58 )/12 (/15 e.Result/60 )/16 (/34 # e/36 s.IdL/56 s.IdR/57 '='/47 s.CopyL/46 s.CopyR/45 )/35 e.Tail/62 >/1
      context[58] = context[48];
      context[59] = context[49];
      context[60] = context[50];
      context[61] = context[51];
      context[62] = context[54];
      context[63] = context[55];
      if( ! refalrts::ident_term( identifiers[ident_e], context[36] ) )
        continue;
      // closed e.Indent0 as range 58
      // closed e.Result as range 60
      // closed e.Tail as range 62
      //DEBUG: s.Limit: 25
      //DEBUG: s.IdL: 56
      //DEBUG: s.IdR: 57
      //DEBUG: s.CopyL: 46
      //DEBUG: s.CopyR: 45
      //DEBUG: e.Indent0: 58
      //DEBUG: e.Result: 60
      //DEBUG: e.Tail: 62

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.IdR/57 {REMOVED TILE} s.CopyL/46 s.CopyR/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$14=1@2/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/58 AsIs: )/12 AsIs: (/15 AsIs: e.Result/60 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/62 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/64 Tile{ Reuse: 'e'/47 } '.'/65 </66 Tile{ HalfReuse: & Symb/36 AsIs: s.IdL/56 } >/67 ' '/68 >/69 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[65], '.');
      refalrts::alloc_open_call(vm, context[66]);
      refalrts::alloc_close_call(vm, context[67]);
      refalrts::alloc_char(vm, context[68], ' ');
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S14A1Z2]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_open_call(context[7]);
      refalrts::update_char(context[47], 'e');
      refalrts::reinit_name(context[36], functions[efunc_Symb]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[67] );
      refalrts::push_stack( vm, context[66] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[36], context[56] );
      res = refalrts::splice_evar( res, context[65], context[66] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[64] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@2/4 (/7 s.new18/25 )/8 (/11 e.new19/37 )/12 (/15 e.new20/39 )/16 (/34 s.new17/36 )/35 e.new16/41 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      // closed e.new19 as range 37
      // closed e.new20 as range 39
      // closed e.new16 as range 41
      do {
        // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 )/16 (/34 # LB/36 )/35 e.Tail/47 >/1
        context[43] = context[37];
        context[44] = context[38];
        context[45] = context[39];
        context[46] = context[40];
        context[47] = context[41];
        context[48] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_LB], context[36] ) )
          continue;
        // closed e.Indent0 as range 43
        // closed e.Result as range 45
        // closed e.Tail as range 47
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 43
        //DEBUG: e.Result: 45
        //DEBUG: e.Tail: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } Tile{ HalfReuse: </36 HalfReuse: & Sub/35 } Tile{ AsIs: s.Limit/25 } 1/49 >/50 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: '('/16 HalfReuse: )/34 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[49], 1UL);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::reinit_open_call(context[36]);
        refalrts::reinit_name(context[35], functions[efunc_Sub]);
        refalrts::reinit_char(context[16], '(');
        refalrts::reinit_close_bracket(context[34]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[34] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[36] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[36], context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@2/4 (/7 s.new22/25 )/8 (/11 e.new23/43 )/12 (/15 e.new24/45 )/16 (/34 # RB/36 )/35 e.new21/47 >/1
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      context[48] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_RB], context[36] ) )
        continue;
      // closed e.new23 as range 43
      // closed e.new24 as range 45
      // closed e.new21 as range 47
      do {
        // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/49 )/12 (/15 e.Result/51 ' '/55 )/16 (/34 # RB/36 )/35 e.Tail/53 >/1
        context[49] = context[43];
        context[50] = context[44];
        context[51] = context[45];
        context[52] = context[46];
        context[53] = context[47];
        context[54] = context[48];
        context[55] = refalrts::char_right( ' ', context[51], context[52] );
        if( ! context[55] )
          continue;
        // closed e.Indent0 as range 49
        // closed e.Result as range 51
        // closed e.Tail as range 53
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 49
        //DEBUG: e.Result: 51
        //DEBUG: e.Tail: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </56 & Add/57 1/58 Tile{ AsIs: s.Limit/25 } Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/49 AsIs: )/12 AsIs: (/15 AsIs: e.Result/51 HalfReuse: )/55 HalfReuse: (/16 HalfReuse: # RB/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/53 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_name(vm, context[57], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[58], 1UL);
        refalrts::reinit_close_call(context[35]);
        refalrts::reinit_close_bracket(context[55]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[34], identifiers[ident_RB]);
        refalrts::reinit_close_bracket(context[36]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[36] );
        refalrts::link_brackets( context[15], context[55] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[56] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[8], context[36] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[56], context[58] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/49 )/12 (/15 e.Result/51 )/16 (/34 # RB/36 )/35 e.Tail/53 >/1
      context[49] = context[43];
      context[50] = context[44];
      context[51] = context[45];
      context[52] = context[46];
      context[53] = context[47];
      context[54] = context[48];
      // closed e.Indent0 as range 49
      // closed e.Result as range 51
      // closed e.Tail as range 53
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 49
      //DEBUG: e.Result: 51
      //DEBUG: e.Tail: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </55 & Sub/56 Tile{ AsIs: s.Limit/25 } 2/57 Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/49 AsIs: )/12 AsIs: (/15 AsIs: e.Result/51 HalfReuse: ')'/16 HalfReuse: ' '/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/53 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_name(vm, context[56], functions[efunc_Sub]);
      refalrts::alloc_number(vm, context[57], 2UL);
      refalrts::reinit_close_call(context[35]);
      refalrts::reinit_char(context[16], ')');
      refalrts::reinit_char(context[34], ' ');
      refalrts::reinit_close_bracket(context[36]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[36] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[55] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[8], context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 '*'/36 e.Inner/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::char_term( '*', context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Inner as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Inner: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 AsIs: s.Limit/25 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 HalfReuse: # LB/36 } )/45 Tile{ AsIs: e.Inner/41 } (/46 # RB/47 Tile{ AsIs: )/35 AsIs: e.Tail/43 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_RB]);
      refalrts::reinit_ident(context[36], identifiers[ident_LB]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[46], context[35] );
      refalrts::link_brackets( context[34], context[45] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[35];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[45] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 '!'/36 (/47 e.Name/45 )/48 e.Inner/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::char_term( '!', context[36] ) )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[41], context[42] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Name as range 45
      // closed e.Inner as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Name: 45
      //DEBUG: e.Inner: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$19=1@2/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Inner/41 } Tile{ AsIs: )/35 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/43 } )/49 </50 & Lenw/51 '<'/52 </53 & FormatWord:1/54 Tile{ HalfReuse: </36 HalfReuse: & Type/47 AsIs: e.Name/45 HalfReuse: >/48 } >/55 ' '/56 >/57 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[52], '<');
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_FormatWord_B1]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_char(vm, context[56], ' ');
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S19A1Z2]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_open_call(context[36]);
      refalrts::reinit_name(context[47], functions[efunc_Type]);
      refalrts::reinit_close_call(context[48]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[7], context[49] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[55], context[57] );
      res = refalrts::splice_evar( res, context[36], context[48] );
      res = refalrts::splice_evar( res, context[49], context[54] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@2/4 (/7 s.new17/25 )/8 (/11 e.new18/37 )/12 (/15 e.new19/39 )/16 (/34 # RK/36 )/35 e.new16/41 >/1
    context[37] = context[26];
    context[38] = context[27];
    context[39] = context[28];
    context[40] = context[29];
    context[41] = context[30];
    context[42] = context[31];
    if( ! refalrts::ident_term( identifiers[ident_RK], context[36] ) )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    // closed e.new18 as range 37
    // closed e.new19 as range 39
    // closed e.new16 as range 41
    do {
      // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 ' '/49 )/16 (/34 # RK/36 )/35 e.Tail/47 >/1
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      context[48] = context[42];
      context[49] = refalrts::char_right( ' ', context[45], context[46] );
      if( ! context[49] )
        continue;
      // closed e.Indent0 as range 43
      // closed e.Result as range 45
      // closed e.Tail as range 47
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 43
      //DEBUG: e.Result: 45
      //DEBUG: e.Tail: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </50 & Add/51 1/52 Tile{ AsIs: s.Limit/25 } Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: )/49 HalfReuse: (/16 HalfReuse: # RK/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[52], 1UL);
      refalrts::reinit_close_call(context[35]);
      refalrts::reinit_close_bracket(context[49]);
      refalrts::reinit_open_bracket(context[16]);
      refalrts::reinit_ident(context[34], identifiers[ident_RK]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[36] );
      refalrts::link_brackets( context[15], context[49] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[8], context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[50], context[52] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@2/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 )/16 (/34 # RK/36 )/35 e.Tail/47 >/1
    context[43] = context[37];
    context[44] = context[38];
    context[45] = context[39];
    context[46] = context[40];
    context[47] = context[41];
    context[48] = context[42];
    // closed e.Indent0 as range 43
    // closed e.Result as range 45
    // closed e.Tail as range 47
    //DEBUG: s.Limit: 25
    //DEBUG: e.Indent0: 43
    //DEBUG: e.Result: 45
    //DEBUG: e.Tail: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@2/4 AsIs: (/7 } </49 & Sub/50 Tile{ AsIs: s.Limit/25 } 2/51 Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: '>'/16 HalfReuse: ' '/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_Sub]);
    refalrts::alloc_number(vm, context[51], 2UL);
    refalrts::reinit_close_call(context[35]);
    refalrts::reinit_char(context[16], '>');
    refalrts::reinit_char(context[34], ' ');
    refalrts::reinit_close_bracket(context[36]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[36] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[49] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[8], context[36] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr@2/4 (/7 e.dyn0/5 )/8 (/11 e.Indent0/9 )/12 (/15 e.dyn3/13 )/16 e.dyn4/2 >/1
  // closed e.dyn0 as range 5
  // closed e.Indent0 as range 9
  // closed e.dyn3 as range 13
  // closed e.dyn4 as range 2
  //DEBUG: e.dyn0: 5
  //DEBUG: e.Indent0: 9
  //DEBUG: e.dyn3: 13
  //DEBUG: e.dyn4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@0/4 AsIs: (/7 AsIs: e.dyn0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/9 HalfReuse: ' '/12 HalfReuse: ' '/15 }", "/17 )/19 (/20 e.Indent0/9/21"    "/23 )/25 (/26 Tile{ AsIs: e.dyn3/13 } Tile{ AsIs: )/16 AsIs: e.dyn4/2 AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[17], context[18], ", ", 2);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::copy_evar(vm, context[21], context[22], context[9], context[10]);
  refalrts::alloc_chars(vm, context[23], context[24], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z0]);
  refalrts::reinit_char(context[12], ' ');
  refalrts::reinit_char(context[15], ' ');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[26], context[16] );
  refalrts::link_brackets( context[20], context[25] );
  refalrts::link_brackets( context[11], context[19] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_Z2("DoFormatExpr@2", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_Z2);


static refalrts::FnResult func_gen_DoFormatExpr_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 80 elems
  refalrts::Iter context[80];
  refalrts::zeros( context, 80 );
  // </0 & DoFormatExpr@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoFormatExpr@3/4 (/7 e.new5/17 )/8 (/11 e.new6/19 )/12 (/15 e.new7/21 )/16 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.new5 as range 17
    // closed e.new6 as range 19
    // closed e.new7 as range 21
    do {
      // </0 & DoFormatExpr@3/4 (/7 e.Limit/23 )/8 (/11 e.Indent0/25 )/12 (/15 e.Result/27 ' '/29 )/16 >/1
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = context[22];
      context[29] = refalrts::char_right( ' ', context[27], context[28] );
      if( ! context[29] )
        continue;
      // closed e.Limit as range 23
      // closed e.Indent0 as range 25
      // closed e.Result as range 27
      //DEBUG: e.Limit: 23
      //DEBUG: e.Indent0: 25
      //DEBUG: e.Result: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DoFormatExpr@3/4 (/7 e.Limit/23 )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/25 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: '='/16 } Tile{ AsIs: ' '/29 } Tile{ AsIs: e.Result/27 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_char(context[12], ' ');
      refalrts::reinit_char(context[15], ' ');
      refalrts::reinit_char(context[16], '=');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[11], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[11], context[15] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@3/4 (/7 e.Limit/23 )/8 (/11 e.Indent0/25 )/12 (/15 e.Result/27 )/16 >/1
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    context[28] = context[22];
    // closed e.Limit as range 23
    // closed e.Indent0 as range 25
    // closed e.Result as range 27
    //DEBUG: e.Limit: 23
    //DEBUG: e.Indent0: 25
    //DEBUG: e.Result: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} e.Limit/23 )/8 {REMOVED TILE} {REMOVED TILE} )/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/25 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: '='/4 HalfReuse: ' '/7 } Tile{ AsIs: e.Result/27 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_char(context[12], ' ');
    refalrts::reinit_char(context[15], ' ');
    refalrts::reinit_char(context[4], '=');
    refalrts::reinit_char(context[7], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr@3/4 (/7 e.new5/17 )/8 (/11 e.new6/19 )/12 (/15 e.new7/21 )/16 ';'/25 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = refalrts::char_left( ';', context[23], context[24] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.new5 as range 17
    // closed e.new6 as range 19
    // closed e.new7 as range 21
    do {
      // </0 & DoFormatExpr@3/4 (/7 e.Limit/26 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 ' '/32 )/16 ';'/25 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = refalrts::char_right( ' ', context[30], context[31] );
      if( ! context[32] )
        continue;
      // closed e.Limit as range 26
      // closed e.Indent0 as range 28
      // closed e.Result as range 30
      //DEBUG: e.Limit: 26
      //DEBUG: e.Indent0: 28
      //DEBUG: e.Result: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoFormatExpr@3/4 (/7 e.Limit/26 )/8 (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Indent0/28 } Tile{ Reuse: ' '/25 HalfReuse: ' '/1 } Tile{ HalfReuse: '='/12 HalfReuse: ' '/15 AsIs: e.Result/30 Reuse: ';'/32 AsIs: )/16 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_char(context[25], ' ');
      refalrts::reinit_char(context[1], ' ');
      refalrts::reinit_char(context[12], '=');
      refalrts::reinit_char(context[15], ' ');
      refalrts::update_char(context[32], ';');
      refalrts::link_brackets( context[0], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[12], context[16] );
      res = refalrts::splice_evar( res, context[25], context[1] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@3/4 (/7 e.Limit/26 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 )/16 ';'/25 >/1
    context[26] = context[17];
    context[27] = context[18];
    context[28] = context[19];
    context[29] = context[20];
    context[30] = context[21];
    context[31] = context[22];
    // closed e.Limit as range 26
    // closed e.Indent0 as range 28
    // closed e.Result as range 30
    //DEBUG: e.Limit: 26
    //DEBUG: e.Indent0: 28
    //DEBUG: e.Result: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} e.Limit/26 )/8 {REMOVED TILE} {REMOVED TILE} )/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/28 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: '='/4 HalfReuse: ' '/7 } Tile{ AsIs: e.Result/30 } Tile{ AsIs: ';'/25 HalfReuse: )/1 ]] }
    refalrts::reinit_char(context[12], ' ');
    refalrts::reinit_char(context[15], ' ');
    refalrts::reinit_char(context[4], '=');
    refalrts::reinit_char(context[7], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr@3/4 (/7 e.new6/17 s.new7/25 )/8 (/11 e.new8/19 )/12 (/15 e.new9/21 )/16 e.new5/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.new8 as range 19
    // closed e.new9 as range 21
    // closed e.new5 as range 23
    if( ! refalrts::svar_right( context[25], context[17], context[18] ) )
      continue;
    // closed e.new6 as range 17
    do {
      // </0 & DoFormatExpr@3/4 (/7 '-'/34 s.Limit/25 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 )/16 e.Tail/32 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[24];
      context[34] = refalrts::char_left( '-', context[26], context[27] );
      if( ! context[34] )
        continue;
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.Indent0 as range 28
      // closed e.Result as range 30
      // closed e.Tail as range 32
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 28
      //DEBUG: e.Result: 30
      //DEBUG: e.Tail: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/35 e.Indent0/28/36"  = "/38 Tile{ AsIs: e.Result/30 } )/40 Tile{ AsIs: </0 Reuse: & DoFormatExpr@4/4 AsIs: (/7 HalfReuse: 60/34 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/28 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: )/16 AsIs: e.Tail/32 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::copy_evar(vm, context[36], context[37], context[28], context[29]);
      refalrts::alloc_chars(vm, context[38], context[39], "  = ", 4);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
      refalrts::reinit_number(context[34], 60UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[35], context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_evar( res, context[0], context[34] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[35], context[39] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@3/4 (/7 s.new13/25 )/8 (/11 e.new14/26 )/12 (/15 e.new15/28 )/16 (/34 s.new10/36 e.new11/32 )/35 e.new12/30 >/1
    context[26] = context[19];
    context[27] = context[20];
    context[28] = context[21];
    context[29] = context[22];
    context[30] = context[23];
    context[31] = context[24];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.new14 as range 26
    // closed e.new15 as range 28
    // closed e.new12 as range 30
    if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
      continue;
    // closed e.new11 as range 32
    do {
      // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 # W/36 e.Word/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_W], context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Word as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Word: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$6=1@3/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/43 } Tile{ HalfReuse: )/7 } </45 & Lenw/46 </47 & FormatWord:1/48 </49 Tile{ HalfReuse: & Type/36 AsIs: e.Word/41 HalfReuse: >/35 } >/50 ' '/51 >/52 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_Lenw]);
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::alloc_name(vm, context[48], functions[efunc_gen_FormatWord_B1]);
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_char(vm, context[51], ' ');
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S6A1Z3]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_name(context[36], functions[efunc_Type]);
      refalrts::reinit_close_call(context[35]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[34], context[7] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[50], context[52] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      res = refalrts::splice_evar( res, context[45], context[49] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 # N/36 s.Number/45 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_N], context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Tail as range 43
      if( ! refalrts::svar_left( context[45], context[41], context[42] ) )
        continue;
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Tail: 43
      //DEBUG: s.Number: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$7=1@3/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/43 } Tile{ HalfReuse: )/7 } </46 & Lenw/47 </48 Tile{ HalfReuse: & Symb/36 AsIs: s.Number/45 HalfReuse: >/35 } ' '/49 >/50 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Lenw]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_char(vm, context[49], ' ');
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S7A1Z3]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_name(context[36], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[35]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[34], context[7] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@3/4 (/7 s.new18/25 )/8 (/11 e.new19/37 )/12 (/15 e.new20/39 )/16 (/34 # C/36 e.new17/41 )/35 e.new16/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_C], context[36] ) )
        continue;
      // closed e.new19 as range 37
      // closed e.new20 as range 39
      // closed e.new17 as range 41
      // closed e.new16 as range 43
      do {
        // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/45 )/12 (/15 e.Result/47 )/16 (/34 # C/36 e.Chars1/49 )/35 (/55 # C/57 e.Chars2/53 )/56 e.Tail/51 >/1
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = 0;
        context[54] = 0;
        context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
        if( ! context[55] )
          continue;
        refalrts::bracket_pointers(context[55], context[56]);
        context[57] = refalrts::ident_left( identifiers[ident_C], context[53], context[54] );
        if( ! context[57] )
          continue;
        // closed e.Indent0 as range 45
        // closed e.Result as range 47
        // closed e.Chars1 as range 49
        // closed e.Chars2 as range 53
        // closed e.Tail as range 51
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 45
        //DEBUG: e.Result: 47
        //DEBUG: e.Chars1: 49
        //DEBUG: e.Chars2: 53
        //DEBUG: e.Tail: 51

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/35 (/55 # C/57 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 AsIs: s.Limit/25 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/45 AsIs: )/12 AsIs: (/15 AsIs: e.Result/47 AsIs: )/16 AsIs: (/34 AsIs: # C/36 } Tile{ AsIs: e.Chars1/49 } Tile{ AsIs: e.Chars2/53 } Tile{ AsIs: )/56 AsIs: e.Tail/51 AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[34], context[56] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[56];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, context[36], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoFormatExpr@3/4 (/7 s.new24/25 )/8 (/11 e.new25/45 )/12 (/15 e.new26/47 )/16 (/34 # C/36 s.new22/53 e.new23/49 )/35 e.new21/51 >/1
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        // closed e.new25 as range 45
        // closed e.new26 as range 47
        // closed e.new21 as range 51
        if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
          continue;
        // closed e.new23 as range 49
        do {
          // </0 & DoFormatExpr@3/4 (/7 s.new30/25 )/8 (/11 e.new31/54 )/12 (/15 e.new32/56 '\''/62 )/16 (/34 # C/36 s.new28/53 e.new29/58 )/35 e.new27/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          context[62] = refalrts::char_right( '\'', context[56], context[57] );
          if( ! context[62] )
            continue;
          // closed e.new31 as range 54
          // closed e.new32 as range 56
          // closed e.new29 as range 58
          // closed e.new27 as range 60
          do {
            // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\\'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\\', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\\'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\\');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\''/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\'', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\''/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\'');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\"'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\"', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\"'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\"');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\n'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\n', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 'n'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 'n');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\t'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\t', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 't'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 't');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\r'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\r', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 'r'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 'r');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 s.Char/53 e.Chars/67 )/35 e.Tail/69 >/1
          context[63] = context[54];
          context[64] = context[55];
          context[65] = context[56];
          context[66] = context[57];
          context[67] = context[58];
          context[68] = context[59];
          context[69] = context[60];
          context[70] = context[61];
          // closed e.Indent0 as range 63
          // closed e.Result as range 65
          // closed e.Chars as range 67
          // closed e.Tail as range 69
          //DEBUG: s.Limit: 25
          //DEBUG: s.Char: 53
          //DEBUG: e.Indent0: 63
          //DEBUG: e.Result: 65
          //DEBUG: e.Chars: 67
          //DEBUG: e.Tail: 69

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$9=1@3/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 HalfReuse: )/62 HalfReuse: (/16 } Tile{ AsIs: e.Chars/67 } )/71 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/69 } Tile{ AsIs: )/35 } </72 & Lenw/73 Tile{ HalfReuse: </34 HalfReuse: & EscapeChar$7=1/36 AsIs: s.Char/53 } </74 & Ord/75 s.Char/53/76 >/77 >/78 >/79 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[71]);
          refalrts::alloc_open_call(vm, context[72]);
          refalrts::alloc_name(vm, context[73], functions[efunc_Lenw]);
          refalrts::alloc_open_call(vm, context[74]);
          refalrts::alloc_name(vm, context[75], functions[efunc_Ord]);
          refalrts::copy_stvar(vm, context[76], context[53]);
          refalrts::alloc_close_call(vm, context[77]);
          refalrts::alloc_close_call(vm, context[78]);
          refalrts::alloc_close_call(vm, context[79]);
          refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S9A1Z3]);
          refalrts::reinit_svar( context[8], context[25] );
          refalrts::reinit_close_bracket(context[62]);
          refalrts::reinit_open_bracket(context[16]);
          refalrts::reinit_open_call(context[34]);
          refalrts::reinit_name(context[36], functions[efunc_gen_EscapeChar_S7A1]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[79] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[78] );
          refalrts::push_stack( vm, context[34] );
          refalrts::push_stack( vm, context[77] );
          refalrts::push_stack( vm, context[74] );
          refalrts::link_brackets( context[7], context[35] );
          refalrts::link_brackets( context[16], context[71] );
          refalrts::link_brackets( context[15], context[62] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[74], context[79] );
          res = refalrts::splice_evar( res, context[34], context[53] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_elem( res, context[7] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[8], context[16] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\\'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\\', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\\'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\\');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\''/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\'', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\''/36 AsIs: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\"'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\"', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\"'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\"');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\n'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\n', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 'n'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 'n');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\t'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\t', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 't'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 't');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\r'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\r', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 'r'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 'r');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 s.Char/53 e.Chars/58 )/35 e.Tail/60 >/1
        context[54] = context[45];
        context[55] = context[46];
        context[56] = context[47];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[50];
        context[60] = context[51];
        context[61] = context[52];
        // closed e.Indent0 as range 54
        // closed e.Result as range 56
        // closed e.Chars as range 58
        // closed e.Tail as range 60
        //DEBUG: s.Limit: 25
        //DEBUG: s.Char: 53
        //DEBUG: e.Indent0: 54
        //DEBUG: e.Result: 56
        //DEBUG: e.Chars: 58
        //DEBUG: e.Tail: 60

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$10=1@3/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Chars/58 } )/62 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/60 } Tile{ AsIs: )/35 } </63 & Lenw/64 '\''/65 </66 Tile{ HalfReuse: & EscapeChar$7=1/36 AsIs: s.Char/53 } </67 & Ord/68 s.Char/53/69 >/70 >/71 '\''/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
        refalrts::alloc_char(vm, context[65], '\'');
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_open_call(vm, context[67]);
        refalrts::alloc_name(vm, context[68], functions[efunc_Ord]);
        refalrts::copy_stvar(vm, context[69], context[53]);
        refalrts::alloc_close_call(vm, context[70]);
        refalrts::alloc_close_call(vm, context[71]);
        refalrts::alloc_char(vm, context[72], '\'');
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S10A1Z3]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_name(context[36], functions[efunc_gen_EscapeChar_S7A1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[71] );
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[67] );
        refalrts::link_brackets( context[7], context[35] );
        refalrts::link_brackets( context[34], context[62] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[67], context[73] );
        res = refalrts::splice_evar( res, context[36], context[53] );
        res = refalrts::splice_evar( res, context[63], context[66] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[62] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/45 )/12 (/15 e.Result/47 )/16 (/34 # C/36 )/35 e.Tail/49 >/1
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[43];
      context[50] = context[44];
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      // closed e.Indent0 as range 45
      // closed e.Result as range 47
      // closed e.Tail as range 49
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 45
      //DEBUG: e.Result: 47
      //DEBUG: e.Tail: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } Tile{ HalfReuse: </36 HalfReuse: & Sub/35 } Tile{ AsIs: s.Limit/25 } 1/51 >/52 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/45 AsIs: )/12 AsIs: (/15 AsIs: e.Result/47 HalfReuse: ' '/16 HalfReuse: )/34 } Tile{ AsIs: e.Tail/49 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[51], 1UL);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::reinit_open_call(context[36]);
      refalrts::reinit_name(context[35], functions[efunc_Sub]);
      refalrts::reinit_char(context[16], ' ');
      refalrts::reinit_close_bracket(context[34]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[36] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@3/4 (/7 s.new22/25 )/8 (/11 e.new23/37 )/12 (/15 e.new24/39 )/16 (/34 s.new17/36 e.new18/41 s.new19/47 s.new20/46 s.new21/45 )/35 e.new16/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      // closed e.new23 as range 37
      // closed e.new24 as range 39
      // closed e.new16 as range 43
      if( ! refalrts::svar_right( context[45], context[41], context[42] ) )
        continue;
      if( ! refalrts::svar_right( context[46], context[41], context[42] ) )
        continue;
      if( ! refalrts::svar_right( context[47], context[41], context[42] ) )
        continue;
      // closed e.new18 as range 41
      do {
        // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/48 )/12 (/15 e.Result/50 )/16 (/34 # s/36 s.Id/47 '='/46 s.Copy/45 )/35 e.Tail/52 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[43];
        context[53] = context[44];
        if( ! refalrts::char_term( '=', context[46] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_s], context[36] ) )
          continue;
        if( ! refalrts::empty_seq( context[41], context[42] ) )
          continue;
        // closed e.Indent0 as range 48
        // closed e.Result as range 50
        // closed e.Tail as range 52
        //DEBUG: s.Limit: 25
        //DEBUG: s.Id: 47
        //DEBUG: s.Copy: 45
        //DEBUG: e.Indent0: 48
        //DEBUG: e.Result: 50
        //DEBUG: e.Tail: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.Copy/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$12=1@3/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/48 AsIs: )/12 AsIs: (/15 AsIs: e.Result/50 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/52 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/54"s."/55 </57 Tile{ HalfReuse: & Symb/36 AsIs: s.Id/47 HalfReuse: >/46 } ' '/58 >/59 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[54], functions[efunc_Lenw]);
        refalrts::alloc_chars(vm, context[55], context[56], "s.", 2);
        refalrts::alloc_open_call(vm, context[57]);
        refalrts::alloc_char(vm, context[58], ' ');
        refalrts::alloc_close_call(vm, context[59]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S12A1Z3]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[36], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[46]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[59] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[57] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[36], context[46] );
        res = refalrts::splice_evar( res, context[54], context[57] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@3/4 (/7 s.new31/25 )/8 (/11 e.new32/48 )/12 (/15 e.new33/50 )/16 (/34 s.new26/36 s.new29/56 s.new30/57 '='/47 s.new28/46 s.new27/45 )/35 e.new25/54 >/1
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      context[54] = context[43];
      context[55] = context[44];
      if( ! refalrts::char_term( '=', context[47] ) )
        continue;
      // closed e.new32 as range 48
      // closed e.new33 as range 50
      // closed e.new25 as range 54
      if( ! refalrts::svar_left( context[56], context[52], context[53] ) )
        continue;
      if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
        continue;
      if( ! refalrts::empty_seq( context[52], context[53] ) )
        continue;
      do {
        // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/58 )/12 (/15 e.Result/60 )/16 (/34 # t/36 s.IdL/56 s.IdR/57 '='/47 s.CopyL/46 s.CopyR/45 )/35 e.Tail/62 >/1
        context[58] = context[48];
        context[59] = context[49];
        context[60] = context[50];
        context[61] = context[51];
        context[62] = context[54];
        context[63] = context[55];
        if( ! refalrts::ident_term( identifiers[ident_t], context[36] ) )
          continue;
        // closed e.Indent0 as range 58
        // closed e.Result as range 60
        // closed e.Tail as range 62
        //DEBUG: s.Limit: 25
        //DEBUG: s.IdL: 56
        //DEBUG: s.IdR: 57
        //DEBUG: s.CopyL: 46
        //DEBUG: s.CopyR: 45
        //DEBUG: e.Indent0: 58
        //DEBUG: e.Result: 60
        //DEBUG: e.Tail: 62

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.IdR/57 {REMOVED TILE} s.CopyL/46 s.CopyR/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$13=1@3/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/58 AsIs: )/12 AsIs: (/15 AsIs: e.Result/60 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/62 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/64 Tile{ Reuse: 't'/47 } '.'/65 </66 Tile{ HalfReuse: & Symb/36 AsIs: s.IdL/56 } >/67 ' '/68 >/69 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
        refalrts::alloc_char(vm, context[65], '.');
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_char(vm, context[68], ' ');
        refalrts::alloc_close_call(vm, context[69]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S13A1Z3]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_open_call(context[7]);
        refalrts::update_char(context[47], 't');
        refalrts::reinit_name(context[36], functions[efunc_Symb]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[69] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[66] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[67], context[69] );
        res = refalrts::splice_evar( res, context[36], context[56] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_elem( res, context[64] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/58 )/12 (/15 e.Result/60 )/16 (/34 # e/36 s.IdL/56 s.IdR/57 '='/47 s.CopyL/46 s.CopyR/45 )/35 e.Tail/62 >/1
      context[58] = context[48];
      context[59] = context[49];
      context[60] = context[50];
      context[61] = context[51];
      context[62] = context[54];
      context[63] = context[55];
      if( ! refalrts::ident_term( identifiers[ident_e], context[36] ) )
        continue;
      // closed e.Indent0 as range 58
      // closed e.Result as range 60
      // closed e.Tail as range 62
      //DEBUG: s.Limit: 25
      //DEBUG: s.IdL: 56
      //DEBUG: s.IdR: 57
      //DEBUG: s.CopyL: 46
      //DEBUG: s.CopyR: 45
      //DEBUG: e.Indent0: 58
      //DEBUG: e.Result: 60
      //DEBUG: e.Tail: 62

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.IdR/57 {REMOVED TILE} s.CopyL/46 s.CopyR/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$14=1@3/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/58 AsIs: )/12 AsIs: (/15 AsIs: e.Result/60 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/62 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/64 Tile{ Reuse: 'e'/47 } '.'/65 </66 Tile{ HalfReuse: & Symb/36 AsIs: s.IdL/56 } >/67 ' '/68 >/69 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[65], '.');
      refalrts::alloc_open_call(vm, context[66]);
      refalrts::alloc_close_call(vm, context[67]);
      refalrts::alloc_char(vm, context[68], ' ');
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S14A1Z3]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_open_call(context[7]);
      refalrts::update_char(context[47], 'e');
      refalrts::reinit_name(context[36], functions[efunc_Symb]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[67] );
      refalrts::push_stack( vm, context[66] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[36], context[56] );
      res = refalrts::splice_evar( res, context[65], context[66] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[64] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@3/4 (/7 s.new18/25 )/8 (/11 e.new19/37 )/12 (/15 e.new20/39 )/16 (/34 s.new17/36 )/35 e.new16/41 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      // closed e.new19 as range 37
      // closed e.new20 as range 39
      // closed e.new16 as range 41
      do {
        // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 )/16 (/34 # LB/36 )/35 e.Tail/47 >/1
        context[43] = context[37];
        context[44] = context[38];
        context[45] = context[39];
        context[46] = context[40];
        context[47] = context[41];
        context[48] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_LB], context[36] ) )
          continue;
        // closed e.Indent0 as range 43
        // closed e.Result as range 45
        // closed e.Tail as range 47
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 43
        //DEBUG: e.Result: 45
        //DEBUG: e.Tail: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } Tile{ HalfReuse: </36 HalfReuse: & Sub/35 } Tile{ AsIs: s.Limit/25 } 1/49 >/50 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: '('/16 HalfReuse: )/34 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[49], 1UL);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::reinit_open_call(context[36]);
        refalrts::reinit_name(context[35], functions[efunc_Sub]);
        refalrts::reinit_char(context[16], '(');
        refalrts::reinit_close_bracket(context[34]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[34] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[36] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[36], context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@3/4 (/7 s.new22/25 )/8 (/11 e.new23/43 )/12 (/15 e.new24/45 )/16 (/34 # RB/36 )/35 e.new21/47 >/1
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      context[48] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_RB], context[36] ) )
        continue;
      // closed e.new23 as range 43
      // closed e.new24 as range 45
      // closed e.new21 as range 47
      do {
        // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/49 )/12 (/15 e.Result/51 ' '/55 )/16 (/34 # RB/36 )/35 e.Tail/53 >/1
        context[49] = context[43];
        context[50] = context[44];
        context[51] = context[45];
        context[52] = context[46];
        context[53] = context[47];
        context[54] = context[48];
        context[55] = refalrts::char_right( ' ', context[51], context[52] );
        if( ! context[55] )
          continue;
        // closed e.Indent0 as range 49
        // closed e.Result as range 51
        // closed e.Tail as range 53
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 49
        //DEBUG: e.Result: 51
        //DEBUG: e.Tail: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </56 & Add/57 1/58 Tile{ AsIs: s.Limit/25 } Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/49 AsIs: )/12 AsIs: (/15 AsIs: e.Result/51 HalfReuse: )/55 HalfReuse: (/16 HalfReuse: # RB/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/53 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_name(vm, context[57], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[58], 1UL);
        refalrts::reinit_close_call(context[35]);
        refalrts::reinit_close_bracket(context[55]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[34], identifiers[ident_RB]);
        refalrts::reinit_close_bracket(context[36]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[36] );
        refalrts::link_brackets( context[15], context[55] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[56] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[8], context[36] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[56], context[58] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/49 )/12 (/15 e.Result/51 )/16 (/34 # RB/36 )/35 e.Tail/53 >/1
      context[49] = context[43];
      context[50] = context[44];
      context[51] = context[45];
      context[52] = context[46];
      context[53] = context[47];
      context[54] = context[48];
      // closed e.Indent0 as range 49
      // closed e.Result as range 51
      // closed e.Tail as range 53
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 49
      //DEBUG: e.Result: 51
      //DEBUG: e.Tail: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </55 & Sub/56 Tile{ AsIs: s.Limit/25 } 2/57 Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/49 AsIs: )/12 AsIs: (/15 AsIs: e.Result/51 HalfReuse: ')'/16 HalfReuse: ' '/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/53 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_name(vm, context[56], functions[efunc_Sub]);
      refalrts::alloc_number(vm, context[57], 2UL);
      refalrts::reinit_close_call(context[35]);
      refalrts::reinit_char(context[16], ')');
      refalrts::reinit_char(context[34], ' ');
      refalrts::reinit_close_bracket(context[36]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[36] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[55] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[8], context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 '*'/36 e.Inner/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::char_term( '*', context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Inner as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Inner: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 AsIs: s.Limit/25 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 HalfReuse: # LB/36 } )/45 Tile{ AsIs: e.Inner/41 } (/46 # RB/47 Tile{ AsIs: )/35 AsIs: e.Tail/43 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_RB]);
      refalrts::reinit_ident(context[36], identifiers[ident_LB]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[46], context[35] );
      refalrts::link_brackets( context[34], context[45] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[35];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[45] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 '!'/36 (/47 e.Name/45 )/48 e.Inner/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::char_term( '!', context[36] ) )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[41], context[42] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Name as range 45
      // closed e.Inner as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Name: 45
      //DEBUG: e.Inner: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$19=1@3/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Inner/41 } Tile{ AsIs: )/35 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/43 } )/49 </50 & Lenw/51 '<'/52 </53 & FormatWord:1/54 Tile{ HalfReuse: </36 HalfReuse: & Type/47 AsIs: e.Name/45 HalfReuse: >/48 } >/55 ' '/56 >/57 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[52], '<');
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_FormatWord_B1]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_char(vm, context[56], ' ');
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S19A1Z3]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_open_call(context[36]);
      refalrts::reinit_name(context[47], functions[efunc_Type]);
      refalrts::reinit_close_call(context[48]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[7], context[49] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[55], context[57] );
      res = refalrts::splice_evar( res, context[36], context[48] );
      res = refalrts::splice_evar( res, context[49], context[54] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@3/4 (/7 s.new17/25 )/8 (/11 e.new18/37 )/12 (/15 e.new19/39 )/16 (/34 # RK/36 )/35 e.new16/41 >/1
    context[37] = context[26];
    context[38] = context[27];
    context[39] = context[28];
    context[40] = context[29];
    context[41] = context[30];
    context[42] = context[31];
    if( ! refalrts::ident_term( identifiers[ident_RK], context[36] ) )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    // closed e.new18 as range 37
    // closed e.new19 as range 39
    // closed e.new16 as range 41
    do {
      // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 ' '/49 )/16 (/34 # RK/36 )/35 e.Tail/47 >/1
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      context[48] = context[42];
      context[49] = refalrts::char_right( ' ', context[45], context[46] );
      if( ! context[49] )
        continue;
      // closed e.Indent0 as range 43
      // closed e.Result as range 45
      // closed e.Tail as range 47
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 43
      //DEBUG: e.Result: 45
      //DEBUG: e.Tail: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </50 & Add/51 1/52 Tile{ AsIs: s.Limit/25 } Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: )/49 HalfReuse: (/16 HalfReuse: # RK/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[52], 1UL);
      refalrts::reinit_close_call(context[35]);
      refalrts::reinit_close_bracket(context[49]);
      refalrts::reinit_open_bracket(context[16]);
      refalrts::reinit_ident(context[34], identifiers[ident_RK]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[36] );
      refalrts::link_brackets( context[15], context[49] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[8], context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[50], context[52] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@3/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 )/16 (/34 # RK/36 )/35 e.Tail/47 >/1
    context[43] = context[37];
    context[44] = context[38];
    context[45] = context[39];
    context[46] = context[40];
    context[47] = context[41];
    context[48] = context[42];
    // closed e.Indent0 as range 43
    // closed e.Result as range 45
    // closed e.Tail as range 47
    //DEBUG: s.Limit: 25
    //DEBUG: e.Indent0: 43
    //DEBUG: e.Result: 45
    //DEBUG: e.Tail: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@3/4 AsIs: (/7 } </49 & Sub/50 Tile{ AsIs: s.Limit/25 } 2/51 Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: '>'/16 HalfReuse: ' '/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_Sub]);
    refalrts::alloc_number(vm, context[51], 2UL);
    refalrts::reinit_close_call(context[35]);
    refalrts::reinit_char(context[16], '>');
    refalrts::reinit_char(context[34], ' ');
    refalrts::reinit_close_bracket(context[36]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[36] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[49] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[8], context[36] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr@3/4 (/7 e.dyn0/5 )/8 (/11 e.Indent0/9 )/12 (/15 e.dyn3/13 )/16 e.dyn4/2 >/1
  // closed e.dyn0 as range 5
  // closed e.Indent0 as range 9
  // closed e.dyn3 as range 13
  // closed e.dyn4 as range 2
  //DEBUG: e.dyn0: 5
  //DEBUG: e.Indent0: 9
  //DEBUG: e.dyn3: 13
  //DEBUG: e.dyn4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@0/4 AsIs: (/7 AsIs: e.dyn0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/9 HalfReuse: ' '/12 HalfReuse: ' '/15 }"= "/17 )/19 (/20 e.Indent0/9/21"    "/23 )/25 (/26 Tile{ AsIs: e.dyn3/13 } Tile{ AsIs: )/16 AsIs: e.dyn4/2 AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[17], context[18], "= ", 2);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::copy_evar(vm, context[21], context[22], context[9], context[10]);
  refalrts::alloc_chars(vm, context[23], context[24], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z0]);
  refalrts::reinit_char(context[12], ' ');
  refalrts::reinit_char(context[15], ' ');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[26], context[16] );
  refalrts::link_brackets( context[20], context[25] );
  refalrts::link_brackets( context[11], context[19] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_Z3("DoFormatExpr@3", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_Z3);


static refalrts::FnResult func_gen_Map_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@8/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@8/4 s.new3/7 e.new4/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_term( context[7], context[7] ) )
        continue;
      // closed e.new4 as range 9
      do {
        // </0 & Map@8/4 '\\'/7 e.Tail/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::char_term( '\\', context[7] ) )
          continue;
        // closed e.Tail as range 11
        //DEBUG: e.Tail: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } '\\'/13 Tile{ HalfReuse: '\\'/0 HalfReuse: </4 HalfReuse: & Map@8/7 AsIs: e.Tail/11 AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[13], '\\');
        refalrts::reinit_char(context[0], '\\');
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_elem( res, context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 '\''/7 e.Tail/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::char_term( '\'', context[7] ) )
          continue;
        // closed e.Tail as range 11
        //DEBUG: e.Tail: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } '\\'/13 Tile{ HalfReuse: '\''/0 HalfReuse: </4 HalfReuse: & Map@8/7 AsIs: e.Tail/11 AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[13], '\\');
        refalrts::reinit_char(context[0], '\'');
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_elem( res, context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 '\"'/7 e.Tail/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::char_term( '\"', context[7] ) )
          continue;
        // closed e.Tail as range 11
        //DEBUG: e.Tail: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } '\\'/13 Tile{ HalfReuse: '\"'/0 HalfReuse: </4 HalfReuse: & Map@8/7 AsIs: e.Tail/11 AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[13], '\\');
        refalrts::reinit_char(context[0], '\"');
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_elem( res, context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 '\n'/7 e.Tail/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::char_term( '\n', context[7] ) )
          continue;
        // closed e.Tail as range 11
        //DEBUG: e.Tail: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } '\\'/13 Tile{ HalfReuse: 'n'/0 HalfReuse: </4 HalfReuse: & Map@8/7 AsIs: e.Tail/11 AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[13], '\\');
        refalrts::reinit_char(context[0], 'n');
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_elem( res, context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 '\t'/7 e.Tail/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::char_term( '\t', context[7] ) )
          continue;
        // closed e.Tail as range 11
        //DEBUG: e.Tail: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } '\\'/13 Tile{ HalfReuse: 't'/0 HalfReuse: </4 HalfReuse: & Map@8/7 AsIs: e.Tail/11 AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[13], '\\');
        refalrts::reinit_char(context[0], 't');
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_elem( res, context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 '\r'/7 e.Tail/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::char_term( '\r', context[7] ) )
          continue;
        // closed e.Tail as range 11
        //DEBUG: e.Tail: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } '\\'/13 Tile{ HalfReuse: 'r'/0 HalfReuse: </4 HalfReuse: & Map@8/7 AsIs: e.Tail/11 AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[13], '\\');
        refalrts::reinit_char(context[0], 'r');
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_elem( res, context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@8/4 s.Char/7 e.Tail/11 >/1
      context[11] = context[9];
      context[12] = context[10];
      // closed e.Tail as range 11
      //DEBUG: s.Char: 7
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar$7=1/4 AsIs: s.Char/7 } </13 & Ord/14 s.Char/7/15 >/16 >/17 </18 & Map@8/19 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Ord]);
      refalrts::copy_stvar(vm, context[15], context[7]);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_gen_Map_Z8]);
      refalrts::update_name(context[4], functions[efunc_gen_EscapeChar_S7A1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@8/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EscapeChar*7/4 AsIs: t.Next/7 } >/11 </12 & Map@8/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z8]);
    refalrts::update_name(context[4], functions[efunc_gen_EscapeChar_D7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@8/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@8/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@8/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & EscapeChar@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_EscapeChar_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z8("Map@8", COOKIE1_, COOKIE2_, func_gen_Map_Z8);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_DecodeCommands_S28A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DecodeCommands$28=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecodeCommands$28=1@1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & DecodeCommands$28=1@1/4 s.Count0/5 (/10 e.Chars/8 )/11 e.Bytes$a/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[6], context[7] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    // closed e.Chars as range 8
    // closed e.Bytes$a as range 6
    //DEBUG: s.Count0: 5
    //DEBUG: e.Chars: 8
    //DEBUG: e.Bytes$a: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/12 Tile{ HalfReuse: 0/0 HalfReuse: # SYMS/4 AsIs: s.Count0/5 HalfReuse: </10 } & Chr/13 Tile{ AsIs: e.Chars/8 } >/14 )/15 </16 & DecodeCommands/17 </18 & Add/19 2/20 s.Count0/5/21 Tile{ HalfReuse: >/11 AsIs: e.Bytes$a/6 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_Chr]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_DecodeCommands]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[20], 2UL);
    refalrts::copy_stvar(vm, context[21], context[5]);
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_ident(context[4], identifiers[ident_SYMS]);
    refalrts::reinit_open_call(context[10]);
    refalrts::reinit_close_call(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[12], context[15] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    res = refalrts::splice_evar( res, context[14], context[21] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeCommands$28=1@1/4 s.Count0/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.Count0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 Tile{ HalfReuse: & DecodeCommands$28=1@0/0 HalfReuse: 0/4 AsIs: s.Count0/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DecodeCommands_S28A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeCommands_S28A1Z1("DecodeCommands$28=1@1", COOKIE1_, COOKIE2_, func_gen_DecodeCommands_S28A1Z1);


static refalrts::FnResult func_gen_DecodeCommands_S29A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DecodeCommands$29=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecodeCommands$29=1@1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & DecodeCommands$29=1@1/4 s.Count0/5 (/10 e.Chars/8 )/11 e.Bytes$a/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[6], context[7] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    // closed e.Chars as range 8
    // closed e.Bytes$a as range 6
    //DEBUG: s.Count0: 5
    //DEBUG: e.Chars: 8
    //DEBUG: e.Bytes$a: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/12 Tile{ HalfReuse: 0/0 HalfReuse: # SYMSR/4 AsIs: s.Count0/5 HalfReuse: </10 } & Chr/13 Tile{ AsIs: e.Chars/8 } >/14 )/15 </16 & DecodeCommands/17 </18 & Add/19 2/20 s.Count0/5/21 Tile{ HalfReuse: >/11 AsIs: e.Bytes$a/6 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_Chr]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_DecodeCommands]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[20], 2UL);
    refalrts::copy_stvar(vm, context[21], context[5]);
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_ident(context[4], identifiers[ident_SYMSR]);
    refalrts::reinit_open_call(context[10]);
    refalrts::reinit_close_call(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[12], context[15] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    res = refalrts::splice_evar( res, context[14], context[21] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeCommands$29=1@1/4 s.Count0/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.Count0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 Tile{ HalfReuse: & DecodeCommands$29=1@0/0 HalfReuse: 0/4 AsIs: s.Count0/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DecodeCommands_S29A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeCommands_S29A1Z1("DecodeCommands$29=1@1", COOKIE1_, COOKIE2_, func_gen_DecodeCommands_S29A1Z1);


static refalrts::FnResult func_gen_DecodeCommands_S30A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DecodeCommands$30=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecodeCommands$30=1@1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & DecodeCommands$30=1@1/4 s.Count0/5 (/10 e.Chars/8 )/11 e.Bytes$a/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[6], context[7] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    // closed e.Chars as range 8
    // closed e.Bytes$a as range 6
    //DEBUG: s.Count0: 5
    //DEBUG: e.Chars: 8
    //DEBUG: e.Bytes$a: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/12 Tile{ HalfReuse: 0/0 HalfReuse: # TEXT/4 AsIs: s.Count0/5 HalfReuse: </10 } & Chr/13 Tile{ AsIs: e.Chars/8 } >/14 )/15 </16 & DecodeCommands/17 </18 & Add/19 2/20 s.Count0/5/21 Tile{ HalfReuse: >/11 AsIs: e.Bytes$a/6 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_Chr]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_DecodeCommands]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[20], 2UL);
    refalrts::copy_stvar(vm, context[21], context[5]);
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_ident(context[4], identifiers[ident_TEXT]);
    refalrts::reinit_open_call(context[10]);
    refalrts::reinit_close_call(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[12], context[15] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    res = refalrts::splice_evar( res, context[14], context[21] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecodeCommands$30=1@1/4 s.Count0/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.Count0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 Tile{ HalfReuse: & DecodeCommands$30=1@0/0 HalfReuse: 0/4 AsIs: s.Count0/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DecodeCommands_S30A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DecodeCommands_S30A1Z1("DecodeCommands$30=1@1", COOKIE1_, COOKIE2_, func_gen_DecodeCommands_S30A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & ResolveFunctions=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@2/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & MakeFunctionTable=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeFunctionTable_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z2("DoMapAccum$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@3/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & ResolveWords=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveWords_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z3("DoMapAccum$1=1@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@4/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@4/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & AddFunctionToTable@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_AddFunctionToTable_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z4("DoMapAccum$1=1@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z4);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 80 elems
  refalrts::Iter context[80];
  refalrts::zeros( context, 80 );
  // </0 & Decompile-Pattern-Hole@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Pattern-Hole@2/4 s.new6/5 (/8 e.new11/18 )/9 (/12 e.new12/20 )/13 (/16 e.new13/22 )/17 (/28 s.new7/30 s.new8/31 e.new9/26 )/29 e.new10/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.new11 as range 18
    // closed e.new12 as range 20
    // closed e.new13 as range 22
    // closed e.new10 as range 24
    if( ! refalrts::svar_left( context[30], context[26], context[27] ) )
      continue;
    if( ! refalrts::svar_left( context[31], context[26], context[27] ) )
      continue;
    // closed e.new9 as range 26
    do {
      // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/32 s.L/42 )/9 (/12 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # CSYM/31 e.Word/38 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_CSYM], context[31] ) )
        continue;
      // closed e.Pattern-R as range 34
      // closed e.Vars as range 36
      // closed e.Word as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_right( context[42], context[32], context[33] ) )
        continue;
      // closed e.Pattern-L as range 32
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-R: 34
      //DEBUG: e.Vars: 36
      //DEBUG: e.Word: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.L: 42
      //DEBUG: e.Pattern-L: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } 0/43 </44 & Add/45 1/46 Tile{ AsIs: s.X/5 HalfReuse: >/8 } (/47 Tile{ AsIs: e.Pattern-L/32 } Tile{ AsIs: (/28 } Tile{ Reuse: # W/31 AsIs: e.Word/38 AsIs: )/29 } s.X/5/48 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/34 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/36 AsIs: )/17 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[43], 0UL);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::copy_stvar(vm, context[48], context[5]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_close_call(context[8]);
      refalrts::update_ident(context[31], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[47], context[9] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[44] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[9], context[17] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[31], context[29] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[5], context[8] );
      res = refalrts::splice_evar( res, context[43], context[46] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/32 )/9 (/12 s.R/42 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # CSYMR/31 e.Word/38 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_CSYMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 32
      // closed e.Vars as range 36
      // closed e.Word as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[42], context[34], context[35] ) )
        continue;
      // closed e.Pattern-R as range 34
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 32
      //DEBUG: e.Vars: 36
      //DEBUG: e.Word: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.R: 42
      //DEBUG: e.Pattern-R: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } 0/43 </44 & Add/45 1/46 Tile{ AsIs: s.X/5 } >/47 Tile{ AsIs: (/8 AsIs: e.Pattern-L/32 AsIs: )/9 AsIs: (/12 } Tile{ HalfReuse: s.X5 /13 AsIs: (/16 } Tile{ Reuse: # W/31 } Tile{ AsIs: e.Word/38 } )/48 Tile{ AsIs: e.Pattern-R/34 } Tile{ AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Vars/36 } Tile{ AsIs: )/29 AsIs: e.Commands/40 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[43], 0UL);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_svar( context[13], context[5] );
      refalrts::update_ident(context[31], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[12], context[17] );
      refalrts::link_brackets( context[16], context[48] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[44] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[17], context[28] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      res = refalrts::splice_evar( res, context[8], context[12] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[43], context[46] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/32 s.L/43 )/9 (/12 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # NSYM/31 s.Number/42 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_NSYM], context[31] ) )
        continue;
      // closed e.Pattern-R as range 34
      // closed e.Vars as range 36
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
        continue;
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      if( ! refalrts::svar_right( context[43], context[32], context[33] ) )
        continue;
      // closed e.Pattern-L as range 32
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-R: 34
      //DEBUG: e.Vars: 36
      //DEBUG: e.Commands: 40
      //DEBUG: s.Number: 42
      //DEBUG: s.L: 43
      //DEBUG: e.Pattern-L: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/43 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } 0/44 </45 & Add/46 1/47 Tile{ AsIs: s.X/5 HalfReuse: >/8 } (/48 Tile{ AsIs: e.Pattern-L/32 } Tile{ AsIs: (/28 } Tile{ Reuse: # N/31 AsIs: s.Number/42 AsIs: )/29 } s.X/5/49 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/34 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/36 AsIs: )/17 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[44], 0UL);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[47], 1UL);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_stvar(vm, context[49], context[5]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_close_call(context[8]);
      refalrts::update_ident(context[31], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[48], context[9] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[45] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[9], context[17] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_evar( res, context[31], context[29] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[5], context[8] );
      res = refalrts::splice_evar( res, context[44], context[47] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/32 )/9 (/12 s.R/42 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # NSYMR/31 e.Number/38 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_NSYMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 32
      // closed e.Vars as range 36
      // closed e.Number as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[42], context[34], context[35] ) )
        continue;
      // closed e.Pattern-R as range 34
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 32
      //DEBUG: e.Vars: 36
      //DEBUG: e.Number: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.R: 42
      //DEBUG: e.Pattern-R: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } 0/43 </44 & Add/45 1/46 Tile{ AsIs: s.X/5 } >/47 Tile{ AsIs: (/8 AsIs: e.Pattern-L/32 AsIs: )/9 AsIs: (/12 } Tile{ HalfReuse: s.X5 /13 AsIs: (/16 } Tile{ Reuse: # N/31 } Tile{ AsIs: e.Number/38 } )/48 Tile{ AsIs: e.Pattern-R/34 } Tile{ AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Vars/36 } Tile{ AsIs: )/29 AsIs: e.Commands/40 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[43], 0UL);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_svar( context[13], context[5] );
      refalrts::update_ident(context[31], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[12], context[17] );
      refalrts::link_brackets( context[16], context[48] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[44] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[17], context[28] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      res = refalrts::splice_evar( res, context[8], context[12] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[43], context[46] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@2/4 s.new14/5 (/8 e.new20/32 )/9 (/12 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 s.new18/42 e.new19/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new20 as range 32
      // closed e.new21 as range 34
      // closed e.new22 as range 36
      // closed e.new15 as range 40
      if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
        continue;
      // closed e.new19 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.new23/5 (/8 e.new29/43 )/9 (/12 e.new30/45 )/13 (/16 e.new31/47 )/17 (/28 s.new25/30 s.new26/31 s.new27/42 s.new28/53 )/29 e.new24/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        // closed e.new29 as range 43
        // closed e.new30 as range 45
        // closed e.new31 as range 47
        // closed e.new24 as range 51
        if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        do {
          // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/54 s.L/62 )/9 (/12 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # SYM/31 s.Code/42 s.Char/53 )/29 e.Commands/60 >/1
          context[54] = context[43];
          context[55] = context[44];
          context[56] = context[45];
          context[57] = context[46];
          context[58] = context[47];
          context[59] = context[48];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::ident_term( identifiers[ident_SYM], context[31] ) )
            continue;
          // closed e.Pattern-R as range 56
          // closed e.Vars as range 58
          // closed e.Commands as range 60
          if( ! refalrts::svar_right( context[62], context[54], context[55] ) )
            continue;
          // closed e.Pattern-L as range 54
          //DEBUG: s.X: 5
          //DEBUG: s.Offset: 30
          //DEBUG: s.Code: 42
          //DEBUG: s.Char: 53
          //DEBUG: e.Pattern-R: 56
          //DEBUG: e.Vars: 58
          //DEBUG: e.Commands: 60
          //DEBUG: s.L: 62
          //DEBUG: e.Pattern-L: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/62 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.Code/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } 0/63 </64 & Add/65 1/66 Tile{ AsIs: s.X/5 HalfReuse: >/8 } (/67 Tile{ AsIs: e.Pattern-L/54 } Tile{ AsIs: (/28 } Tile{ Reuse: # C/31 } Tile{ AsIs: s.Char/53 AsIs: )/29 } s.X/5/68 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/56 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/58 AsIs: )/17 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[63], 0UL);
          refalrts::alloc_open_call(vm, context[64]);
          refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[66], 1UL);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::copy_stvar(vm, context[68], context[5]);
          refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::reinit_close_call(context[8]);
          refalrts::update_ident(context[31], identifiers[ident_C]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[67], context[9] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[64] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[60], context[61] );
          res = refalrts::splice_evar( res, context[9], context[17] );
          res = refalrts::splice_elem( res, context[68] );
          res = refalrts::splice_evar( res, context[53], context[29] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_elem( res, context[67] );
          res = refalrts::splice_evar( res, context[5], context[8] );
          res = refalrts::splice_evar( res, context[63], context[66] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/54 )/9 (/12 s.R/62 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # SYMR/31 s.Code/42 s.Char/53 )/29 e.Commands/60 >/1
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[51];
        context[61] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_SYMR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 54
        // closed e.Vars as range 58
        // closed e.Commands as range 60
        if( ! refalrts::svar_left( context[62], context[56], context[57] ) )
          continue;
        // closed e.Pattern-R as range 56
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: s.Code: 42
        //DEBUG: s.Char: 53
        //DEBUG: e.Pattern-L: 54
        //DEBUG: e.Vars: 58
        //DEBUG: e.Commands: 60
        //DEBUG: s.R: 62
        //DEBUG: e.Pattern-R: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.Code/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } 0/63 </64 & Add/65 1/66 Tile{ AsIs: s.X/5 } >/67 Tile{ AsIs: (/8 AsIs: e.Pattern-L/54 AsIs: )/9 AsIs: (/12 } Tile{ HalfReuse: s.X5 /13 AsIs: (/16 } Tile{ Reuse: # C/31 } Tile{ AsIs: s.Char/53 } )/68 Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Vars/58 } Tile{ AsIs: )/29 AsIs: e.Commands/60 AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[63], 0UL);
        refalrts::alloc_open_call(vm, context[64]);
        refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[66], 1UL);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_svar( context[13], context[5] );
        refalrts::update_ident(context[31], identifiers[ident_C]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[12], context[17] );
        refalrts::link_brackets( context[16], context[68] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[64] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[29];
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[17], context[28] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_elem( res, context[68] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[13], context[16] );
        res = refalrts::splice_evar( res, context[8], context[12] );
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_elem( res, context[5] );
        res = refalrts::splice_evar( res, context[63], context[66] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/43 s.L/53 )/9 (/12 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # SYMS/31 s.Len/42 e.Chars/49 )/29 e.Commands/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_SYMS], context[31] ) )
          continue;
        // closed e.Pattern-R as range 45
        // closed e.Vars as range 47
        // closed e.Chars as range 49
        // closed e.Commands as range 51
        if( ! refalrts::svar_right( context[53], context[43], context[44] ) )
          continue;
        // closed e.Pattern-L as range 43
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: s.Len: 42
        //DEBUG: e.Pattern-R: 45
        //DEBUG: e.Vars: 47
        //DEBUG: e.Chars: 49
        //DEBUG: e.Commands: 51
        //DEBUG: s.L: 53
        //DEBUG: e.Pattern-L: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/53 {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$7=1@1/4 } (/54 Tile{ AsIs: e.Pattern-L/43 } Tile{ AsIs: )/29 } (/55 Tile{ AsIs: e.Chars/49 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/45 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } )/56 </57 Tile{ HalfReuse: & Add/31 AsIs: s.Len/42 } Tile{ AsIs: s.X/5 HalfReuse: >/8 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_close_bracket(vm, context[56]);
        refalrts::alloc_open_call(vm, context[57]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S7A1Z1]);
        refalrts::reinit_name(context[31], functions[efunc_Add]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[57] );
        refalrts::link_brackets( context[28], context[56] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[55], context[9] );
        refalrts::link_brackets( context[54], context[29] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[5], context[8] );
        res = refalrts::splice_evar( res, context[31], context[42] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_elem( res, context[55] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_elem( res, context[54] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/43 )/9 (/12 s.R/53 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # SYMSR/31 s.Len/42 e.Chars/49 )/29 e.Commands/51 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_SYMSR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 43
      // closed e.Vars as range 47
      // closed e.Chars as range 49
      // closed e.Commands as range 51
      if( ! refalrts::svar_left( context[53], context[45], context[46] ) )
        continue;
      // closed e.Pattern-R as range 45
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: s.Len: 42
      //DEBUG: e.Pattern-L: 43
      //DEBUG: e.Vars: 47
      //DEBUG: e.Chars: 49
      //DEBUG: e.Commands: 51
      //DEBUG: s.R: 53
      //DEBUG: e.Pattern-R: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/53 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$8=1@1/4 } Tile{ AsIs: (/8 AsIs: e.Pattern-L/43 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Chars/49 } )/54 (/55 Tile{ AsIs: e.Pattern-R/45 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } </56 Tile{ HalfReuse: & Add/31 AsIs: s.Len/42 } Tile{ AsIs: s.X/5 } >/57 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S8A1Z1]);
      refalrts::reinit_name(context[31], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[56] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[55], context[13] );
      refalrts::link_brackets( context[12], context[54] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[31], context[42] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[13], context[28] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[8], context[12] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@2/4 s.new14/5 (/8 e.new18/32 )/9 (/12 e.new19/34 )/13 (/16 e.new20/36 )/17 (/28 s.new16/30 s.new17/31 )/29 e.new15/38 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.new18 as range 32
      // closed e.new19 as range 34
      // closed e.new20 as range 36
      // closed e.new15 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/40 s.L/48 )/9 (/12 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # VSYM/31 )/29 e.Commands/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        if( ! refalrts::ident_term( identifiers[ident_VSYM], context[31] ) )
          continue;
        // closed e.Pattern-R as range 42
        // closed e.Vars as range 44
        // closed e.Commands as range 46
        if( ! refalrts::svar_right( context[48], context[40], context[41] ) )
          continue;
        // closed e.Pattern-L as range 40
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-R: 42
        //DEBUG: e.Vars: 44
        //DEBUG: e.Commands: 46
        //DEBUG: s.L: 48
        //DEBUG: e.Pattern-L: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/48 {REMOVED TILE} s.Offset/30 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } 0/49 </50 & Add/51 1/52 Tile{ AsIs: s.X/5 HalfReuse: >/8 } (/53 Tile{ AsIs: e.Pattern-L/40 } (/54 # s/55 s.X/5/56 '='/57 s.X/5/58 )/59 s.X/5/60 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/42 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 HalfReuse: (/17 HalfReuse: # s/28 } s.X/5/61 '='/62 s.X/5/63 Tile{ HalfReuse: )/31 AsIs: )/29 AsIs: e.Commands/46 AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[49], 0UL);
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[52], 1UL);
        refalrts::alloc_open_bracket(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_ident(vm, context[55], identifiers[ident_s]);
        refalrts::copy_stvar(vm, context[56], context[5]);
        refalrts::alloc_char(vm, context[57], '=');
        refalrts::copy_stvar(vm, context[58], context[5]);
        refalrts::alloc_close_bracket(vm, context[59]);
        refalrts::copy_stvar(vm, context[60], context[5]);
        refalrts::copy_stvar(vm, context[61], context[5]);
        refalrts::alloc_char(vm, context[62], '=');
        refalrts::copy_stvar(vm, context[63], context[5]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_close_call(context[8]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[31] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[53], context[9] );
        refalrts::link_brackets( context[54], context[59] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[50] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[61], context[63] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[54], context[60] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[5], context[8] );
        res = refalrts::splice_evar( res, context[49], context[52] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/40 )/9 (/12 s.R/48 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # VSYMR/31 )/29 e.Commands/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        if( ! refalrts::ident_term( identifiers[ident_VSYMR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 40
        // closed e.Vars as range 44
        // closed e.Commands as range 46
        if( ! refalrts::svar_left( context[48], context[42], context[43] ) )
          continue;
        // closed e.Pattern-R as range 42
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 40
        //DEBUG: e.Vars: 44
        //DEBUG: e.Commands: 46
        //DEBUG: s.R: 48
        //DEBUG: e.Pattern-R: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/48 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } 0/49 </50 & Add/51 1/52 s.X/5/53 >/54 Tile{ AsIs: (/8 AsIs: e.Pattern-L/40 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: s.X/5 } (/55 # s/56 s.X/5/57 '='/58 s.X/5/59 )/60 Tile{ AsIs: e.Pattern-R/42 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 HalfReuse: (/17 HalfReuse: # s/28 } s.X/5/61 '='/62 s.X/5/63 Tile{ HalfReuse: )/31 AsIs: )/29 AsIs: e.Commands/46 AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[49], 0UL);
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[52], 1UL);
        refalrts::copy_stvar(vm, context[53], context[5]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_ident(vm, context[56], identifiers[ident_s]);
        refalrts::copy_stvar(vm, context[57], context[5]);
        refalrts::alloc_char(vm, context[58], '=');
        refalrts::copy_stvar(vm, context[59], context[5]);
        refalrts::alloc_close_bracket(vm, context[60]);
        refalrts::copy_stvar(vm, context[61], context[5]);
        refalrts::alloc_char(vm, context[62], '=');
        refalrts::copy_stvar(vm, context[63], context[5]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[31] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[55], context[60] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[50] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[61], context[63] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[55], context[60] );
        res = refalrts::splice_elem( res, context[5] );
        res = refalrts::splice_evar( res, context[8], context[12] );
        res = refalrts::splice_evar( res, context[49], context[54] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/40 s.L/48 )/9 (/12 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # TERM/31 )/29 e.Commands/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        if( ! refalrts::ident_term( identifiers[ident_TERM], context[31] ) )
          continue;
        // closed e.Pattern-R as range 42
        // closed e.Vars as range 44
        // closed e.Commands as range 46
        if( ! refalrts::svar_right( context[48], context[40], context[41] ) )
          continue;
        // closed e.Pattern-L as range 40
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-R: 42
        //DEBUG: e.Vars: 44
        //DEBUG: e.Commands: 46
        //DEBUG: s.L: 48
        //DEBUG: e.Pattern-L: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/48 {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$11=1@1/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/40 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/42 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/46 } Tile{ AsIs: )/29 } Tile{ HalfReuse: s.X5 /31 } </49 & Add/50 1/51 s.X/5/52 >/53 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[51], 1UL);
        refalrts::copy_stvar(vm, context[52], context[5]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S11A1Z1]);
        refalrts::reinit_svar( context[31], context[5] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[49], context[53] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/40 )/9 (/12 s.R/48 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # TERMR/31 )/29 e.Commands/46 >/1
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      if( ! refalrts::ident_term( identifiers[ident_TERMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 40
      // closed e.Vars as range 44
      // closed e.Commands as range 46
      if( ! refalrts::svar_left( context[48], context[42], context[43] ) )
        continue;
      // closed e.Pattern-R as range 42
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 40
      //DEBUG: e.Vars: 44
      //DEBUG: e.Commands: 46
      //DEBUG: s.R: 48
      //DEBUG: e.Pattern-R: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.R/48 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$12=1@1/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/40 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-R/42 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/46 } Tile{ AsIs: )/29 } s.X/5/49 Tile{ HalfReuse: </31 } & Add/50 1/51 s.X/5/52 >/53 Tile{ AsIs: >/1 ]] }
      refalrts::copy_stvar(vm, context[49], context[5]);
      refalrts::alloc_name(vm, context[50], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[51], 1UL);
      refalrts::copy_stvar(vm, context[52], context[5]);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S12A1Z1]);
      refalrts::reinit_open_call(context[31]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[31] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[50], context[53] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[13], context[28] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      refalrts::splice_to_freelist_open( vm, context[12], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@2/4 s.new14/5 (/8 e.new20/32 )/9 (/12 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 s.new18/42 e.new19/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new20 as range 32
      // closed e.new21 as range 34
      // closed e.new22 as range 36
      // closed e.new15 as range 40
      if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
        continue;
      // closed e.new19 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/43 )/9 (/12 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # TRAN/31 s.Jump/42 )/29 e.Commands-B/51 (/57 s.Jump/59 e.Command/55 )/58 e.Commands-E/53 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[40];
        context[50] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[31] ) )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.Pattern-L as range 43
        // closed e.Pattern-R as range 45
        // closed e.Vars as range 47
        context[51] = 0;
        context[52] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[53] = context[49];
          context[54] = context[50];
          context[55] = 0;
          context[56] = 0;
          context[57] = refalrts::brackets_left( context[55], context[56], context[53], context[54] );
          if( ! context[57] )
            continue;
          refalrts::bracket_pointers(context[57], context[58]);
          if( ! refalrts::repeated_stvar_left( vm, context[59], context[42], context[55], context[56] ) )
            continue;
          // closed e.Command as range 55
          // closed e.Commands-E as range 53
          //DEBUG: s.X: 5
          //DEBUG: s.Offset: 30
          //DEBUG: s.Jump: 42
          //DEBUG: e.Pattern-L: 43
          //DEBUG: e.Pattern-R: 45
          //DEBUG: e.Vars: 47
          //DEBUG: e.Commands-B: 51
          //DEBUG: e.Command: 55
          //DEBUG: e.Commands-E: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.Jump/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole@2/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/43 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/45 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 } Tile{ AsIs: e.Commands-B/51 } Tile{ AsIs: (/28 } '@'/60 Tile{ Reuse: # Restore-Hole/31 } 0/61 s.X/5/62 (/63 e.Pattern-L/43/64 Tile{ AsIs: )/29 } (/66 e.Pattern-R/45/67 )/69 (/70 e.Vars/47/71 )/73 )/74 Tile{ AsIs: (/57 AsIs: s.Jump/59 AsIs: e.Command/55 AsIs: )/58 AsIs: e.Commands-E/53 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[60], '@');
          refalrts::alloc_number(vm, context[61], 0UL);
          refalrts::copy_stvar(vm, context[62], context[5]);
          refalrts::alloc_open_bracket(vm, context[63]);
          refalrts::copy_evar(vm, context[64], context[65], context[43], context[44]);
          refalrts::alloc_open_bracket(vm, context[66]);
          refalrts::copy_evar(vm, context[67], context[68], context[45], context[46]);
          refalrts::alloc_close_bracket(vm, context[69]);
          refalrts::alloc_open_bracket(vm, context[70]);
          refalrts::copy_evar(vm, context[71], context[72], context[47], context[48]);
          refalrts::alloc_close_bracket(vm, context[73]);
          refalrts::alloc_close_bracket(vm, context[74]);
          refalrts::update_ident(context[31], identifiers[ident_Restorem_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[57], context[58] );
          refalrts::link_brackets( context[28], context[74] );
          refalrts::link_brackets( context[70], context[73] );
          refalrts::link_brackets( context[66], context[69] );
          refalrts::link_brackets( context[63], context[29] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[57];
          res = refalrts::splice_evar( res, context[66], context[74] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_evar( res, context[61], context[63] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[60] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          refalrts::splice_to_freelist_open( vm, context[17], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[51], context[52], context[49], context[50] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.new23/5 (/8 e.new31/43 )/9 (/12 e.new32/45 )/13 (/16 e.new33/47 )/17 (/28 '@'/30 s.new25/31 s.new26/42 s.new27/61 e.new28/49 (/59 e.new29/57 )/60 (/55 e.new30/53 )/56 )/29 e.new24/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        if( ! refalrts::char_term( '@', context[30] ) )
          continue;
        context[53] = 0;
        context[54] = 0;
        context[55] = refalrts::brackets_right( context[53], context[54], context[49], context[50] );
        if( ! context[55] )
          continue;
        refalrts::bracket_pointers(context[55], context[56]);
        context[57] = 0;
        context[58] = 0;
        context[59] = refalrts::brackets_right( context[57], context[58], context[49], context[50] );
        if( ! context[59] )
          continue;
        refalrts::bracket_pointers(context[59], context[60]);
        // closed e.new31 as range 43
        // closed e.new32 as range 45
        // closed e.new33 as range 47
        // closed e.new29 as range 57
        // closed e.new30 as range 53
        // closed e.new24 as range 51
        if( ! refalrts::svar_left( context[61], context[49], context[50] ) )
          continue;
        // closed e.new28 as range 49
        do {
          // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 '@'/30 # Restore-Hole/31 s.Level2/42 s.Top2/61 (/78 e.Pattern-L2/76 )/79 (/59 e.Pattern-R2/70 )/60 (/55 e.Vars2/72 )/56 )/29 e.Commands/74 >/1
          context[62] = context[43];
          context[63] = context[44];
          context[64] = context[45];
          context[65] = context[46];
          context[66] = context[47];
          context[67] = context[48];
          context[68] = context[49];
          context[69] = context[50];
          context[70] = context[57];
          context[71] = context[58];
          context[72] = context[53];
          context[73] = context[54];
          context[74] = context[51];
          context[75] = context[52];
          if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[31] ) )
            continue;
          context[76] = 0;
          context[77] = 0;
          context[78] = refalrts::brackets_left( context[76], context[77], context[68], context[69] );
          if( ! context[78] )
            continue;
          refalrts::bracket_pointers(context[78], context[79]);
          if( ! refalrts::empty_seq( context[68], context[69] ) )
            continue;
          // closed e.Pattern-L1 as range 62
          // closed e.Pattern-R1 as range 64
          // closed e.Vars1 as range 66
          // closed e.Pattern-L2 as range 76
          // closed e.Pattern-R2 as range 70
          // closed e.Vars2 as range 72
          // closed e.Commands as range 74
          //DEBUG: s.X: 5
          //DEBUG: s.Level2: 42
          //DEBUG: s.Top2: 61
          //DEBUG: e.Pattern-L1: 62
          //DEBUG: e.Pattern-R1: 64
          //DEBUG: e.Vars1: 66
          //DEBUG: e.Pattern-L2: 76
          //DEBUG: e.Pattern-R2: 70
          //DEBUG: e.Vars2: 72
          //DEBUG: e.Commands: 74

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </30 HalfReuse: & Decompile-Pattern-Hole/31 AsIs: s.Level2/42 AsIs: s.Top2/61 AsIs: (/78 AsIs: e.Pattern-L2/76 AsIs: )/79 AsIs: (/59 AsIs: e.Pattern-R2/70 AsIs: )/60 AsIs: (/55 AsIs: e.Vars2/72 AsIs: )/56 } Tile{ AsIs: e.Commands/74 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_call(context[30]);
          refalrts::reinit_name(context[31], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::link_brackets( context[55], context[56] );
          refalrts::link_brackets( context[59], context[60] );
          refalrts::link_brackets( context[78], context[79] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[74], context[75] );
          res = refalrts::splice_evar( res, context[30], context[56] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 '@'/30 # Restore-NoHole/31 s.Level2/42 s.Top2/61 (/59 e.Pattern2/68 )/60 (/55 e.Vars2/70 )/56 )/29 e.Commands/72 >/1
        context[62] = context[43];
        context[63] = context[44];
        context[64] = context[45];
        context[65] = context[46];
        context[66] = context[47];
        context[67] = context[48];
        context[68] = context[57];
        context[69] = context[58];
        context[70] = context[53];
        context[71] = context[54];
        context[72] = context[51];
        context[73] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[31] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        // closed e.Pattern-L1 as range 62
        // closed e.Pattern-R1 as range 64
        // closed e.Vars1 as range 66
        // closed e.Pattern2 as range 68
        // closed e.Vars2 as range 70
        // closed e.Commands as range 72
        //DEBUG: s.X: 5
        //DEBUG: s.Level2: 42
        //DEBUG: s.Top2: 61
        //DEBUG: e.Pattern-L1: 62
        //DEBUG: e.Pattern-R1: 64
        //DEBUG: e.Vars1: 66
        //DEBUG: e.Pattern2: 68
        //DEBUG: e.Vars2: 70
        //DEBUG: e.Commands: 72

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </30 HalfReuse: & Decompile-Pattern-NoHole/31 AsIs: s.Level2/42 AsIs: s.Top2/61 AsIs: (/59 AsIs: e.Pattern2/68 AsIs: )/60 AsIs: (/55 AsIs: e.Vars2/70 AsIs: )/56 } Tile{ AsIs: e.Commands/72 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[30]);
        refalrts::reinit_name(context[31], functions[efunc_Decompilem_Patternm_NoHole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[55], context[56] );
        refalrts::link_brackets( context[59], context[60] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_evar( res, context[30], context[56] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@2/4 s.new23/5 (/8 e.new28/43 )/9 (/12 e.new29/45 )/13 (/16 e.new30/47 )/17 (/28 s.new25/30 s.new26/31 s.new27/42 )/29 e.new24/49 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[40];
      context[50] = context[41];
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.new28 as range 43
      // closed e.new29 as range 45
      // closed e.new30 as range 47
      // closed e.new24 as range 49
      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/51 s.L/59 )/9 (/12 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # OVSYM/31 s.VarNo/42 )/29 e.Commands/57 >/1
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        if( ! refalrts::ident_term( identifiers[ident_OVSYM], context[31] ) )
          continue;
        // closed e.Pattern-R as range 53
        // closed e.Vars as range 55
        // closed e.Commands as range 57
        if( ! refalrts::svar_right( context[59], context[51], context[52] ) )
          continue;
        // closed e.Pattern-L as range 51
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: s.VarNo: 42
        //DEBUG: e.Pattern-R: 53
        //DEBUG: e.Vars: 55
        //DEBUG: e.Commands: 57
        //DEBUG: s.L: 59
        //DEBUG: e.Pattern-L: 51

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/59 {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } 0/60 </61 & Add/62 1/63 s.X/5/64 >/65 (/66 Tile{ AsIs: e.Pattern-L/51 } (/67 Tile{ Reuse: # s/31 AsIs: s.VarNo/42 } '='/68 Tile{ AsIs: s.X/5 HalfReuse: )/8 } s.X/5/69 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/53 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/55 HalfReuse: (/17 HalfReuse: # s/28 } s.VarNo/42/70 '='/71 s.X/5/72 )/73 Tile{ AsIs: )/29 AsIs: e.Commands/57 AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[60], 0UL);
        refalrts::alloc_open_call(vm, context[61]);
        refalrts::alloc_name(vm, context[62], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[63], 1UL);
        refalrts::copy_stvar(vm, context[64], context[5]);
        refalrts::alloc_close_call(vm, context[65]);
        refalrts::alloc_open_bracket(vm, context[66]);
        refalrts::alloc_open_bracket(vm, context[67]);
        refalrts::alloc_char(vm, context[68], '=');
        refalrts::copy_stvar(vm, context[69], context[5]);
        refalrts::copy_stvar(vm, context[70], context[42]);
        refalrts::alloc_char(vm, context[71], '=');
        refalrts::copy_stvar(vm, context[72], context[5]);
        refalrts::alloc_close_bracket(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::update_ident(context[31], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[8]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_s]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[73] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[66], context[9] );
        refalrts::link_brackets( context[67], context[8] );
        refalrts::push_stack( vm, context[65] );
        refalrts::push_stack( vm, context[61] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[29];
        res = refalrts::splice_evar( res, context[70], context[73] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_elem( res, context[69] );
        res = refalrts::splice_evar( res, context[5], context[8] );
        res = refalrts::splice_elem( res, context[68] );
        res = refalrts::splice_evar( res, context[31], context[42] );
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[60], context[66] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/51 )/9 (/12 s.R/59 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # OVSYMR/31 s.VarNo/42 )/29 e.Commands/57 >/1
      context[51] = context[43];
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      context[58] = context[50];
      if( ! refalrts::ident_term( identifiers[ident_OVSYMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 51
      // closed e.Vars as range 55
      // closed e.Commands as range 57
      if( ! refalrts::svar_left( context[59], context[53], context[54] ) )
        continue;
      // closed e.Pattern-R as range 53
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: s.VarNo: 42
      //DEBUG: e.Pattern-L: 51
      //DEBUG: e.Vars: 55
      //DEBUG: e.Commands: 57
      //DEBUG: s.R: 59
      //DEBUG: e.Pattern-R: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/59 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } 0/60 </61 & Add/62 1/63 s.X/5/64 >/65 Tile{ AsIs: (/8 AsIs: e.Pattern-L/51 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: s.X/5 } (/66 Tile{ Reuse: # s/31 AsIs: s.VarNo/42 } '='/67 s.X/5/68 )/69 Tile{ AsIs: e.Pattern-R/53 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/55 HalfReuse: (/17 HalfReuse: # s/28 } s.VarNo/42/70 '='/71 s.X/5/72 )/73 Tile{ AsIs: )/29 AsIs: e.Commands/57 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[60], 0UL);
      refalrts::alloc_open_call(vm, context[61]);
      refalrts::alloc_name(vm, context[62], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[63], 1UL);
      refalrts::copy_stvar(vm, context[64], context[5]);
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::alloc_open_bracket(vm, context[66]);
      refalrts::alloc_char(vm, context[67], '=');
      refalrts::copy_stvar(vm, context[68], context[5]);
      refalrts::alloc_close_bracket(vm, context[69]);
      refalrts::copy_stvar(vm, context[70], context[42]);
      refalrts::alloc_char(vm, context[71], '=');
      refalrts::copy_stvar(vm, context[72], context[5]);
      refalrts::alloc_close_bracket(vm, context[73]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::update_ident(context[31], identifiers[ident_s]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_ident(context[28], identifiers[ident_s]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[29] );
      refalrts::link_brackets( context[17], context[73] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[66], context[69] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[61] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[70], context[73] );
      res = refalrts::splice_evar( res, context[13], context[28] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[31], context[42] );
      res = refalrts::splice_elem( res, context[66] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[8], context[12] );
      res = refalrts::splice_evar( res, context[60], context[65] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@2/4 s.new14/5 (/8 e.new19/32 s.new20/42 )/9 (/12 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 e.new18/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new21 as range 34
      // closed e.new22 as range 36
      // closed e.new18 as range 38
      // closed e.new15 as range 40
      if( ! refalrts::svar_right( context[42], context[32], context[33] ) )
        continue;
      // closed e.new19 as range 32
      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/43 s.L/42 )/9 (/12 s.R/51 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # CL/31 )/29 e.Commands/49 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[40];
        context[50] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_CL], context[31] ) )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.Pattern-L as range 43
        // closed e.Vars as range 47
        // closed e.Commands as range 49
        if( ! refalrts::svar_left( context[51], context[45], context[46] ) )
          continue;
        // closed e.Pattern-R as range 45
        //DEBUG: s.X: 5
        //DEBUG: s.L: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 43
        //DEBUG: e.Vars: 47
        //DEBUG: e.Commands: 49
        //DEBUG: s.R: 51
        //DEBUG: e.Pattern-R: 45

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} s.R/51 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$18=1@1/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/43 } Tile{ AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-R/45 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/49 } Tile{ AsIs: )/29 } Tile{ HalfReuse: s.X5 /31 } </52 & Add/53 s.X/5/54 1/55 >/56 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[54], context[5]);
        refalrts::alloc_number(vm, context[55], 1UL);
        refalrts::alloc_close_call(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S18A1Z1]);
        refalrts::reinit_svar( context[31], context[5] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[56] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[52], context[56] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[9], context[12] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/43 s.L/42 )/9 (/12 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # OEXP/31 s.IdR/53 )/29 e.Commands/51 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_OEXP], context[31] ) )
        continue;
      // closed e.Pattern-L as range 43
      // closed e.Pattern-R as range 45
      // closed e.Vars as range 47
      // closed e.Commands as range 51
      if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
        continue;
      if( ! refalrts::empty_seq( context[49], context[50] ) )
        continue;
      //DEBUG: s.X: 5
      //DEBUG: s.L: 42
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 43
      //DEBUG: e.Pattern-R: 45
      //DEBUG: e.Vars: 47
      //DEBUG: e.Commands: 51
      //DEBUG: s.IdR: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} s.Offset/30 # OEXP/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=1@2/4 } Tile{ AsIs: s.IdR/53 } Tile{ AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/43 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/45 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } e.Vars/47/54 Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[54], context[55], context[47], context[48]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[9], context[28] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[5], context[8] );
      res = refalrts::splice_elem( res, context[53] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@2/4 s.new14/5 (/8 e.new19/32 )/9 (/12 s.new20/42 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 e.new18/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new19 as range 32
      // closed e.new22 as range 36
      // closed e.new18 as range 38
      // closed e.new15 as range 40
      if( ! refalrts::svar_left( context[42], context[34], context[35] ) )
        continue;
      // closed e.new21 as range 34
      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/43 )/9 (/12 s.R/42 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # OEXPR/31 s.IdR/53 )/29 e.Commands/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_OEXPR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 43
        // closed e.Pattern-R as range 45
        // closed e.Vars as range 47
        // closed e.Commands as range 51
        if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        //DEBUG: s.X: 5
        //DEBUG: s.R: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 43
        //DEBUG: e.Pattern-R: 45
        //DEBUG: e.Vars: 47
        //DEBUG: e.Commands: 51
        //DEBUG: s.IdR: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.IdR/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 } Tile{ HalfReuse: & Decompile-Pattern-Hole$20=1@2/0 HalfReuse: s.IdR53 /4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/43 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-R/45 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } e.Vars/47/54 Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[54], context[55], context[47], context[48]);
        refalrts::reinit_open_call(context[31]);
        refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1Z2]);
        refalrts::reinit_svar( context[4], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[0], context[12] );
        res = refalrts::splice_elem( res, context[31] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.new23/5 (/8 e.new27/43 )/9 (/12 s.new28/42 e.new29/45 )/13 (/16 e.new30/47 )/17 (/28 s.new25/30 s.new26/31 )/29 e.new24/49 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[40];
        context[50] = context[41];
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.new27 as range 43
        // closed e.new29 as range 45
        // closed e.new30 as range 47
        // closed e.new24 as range 49
        do {
          // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/51 s.L/59 )/9 (/12 s.R/42 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # PS/31 )/29 e.Commands/57 >/1
          context[51] = context[43];
          context[52] = context[44];
          context[53] = context[45];
          context[54] = context[46];
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[49];
          context[58] = context[50];
          if( ! refalrts::ident_term( identifiers[ident_PS], context[31] ) )
            continue;
          // closed e.Pattern-R as range 53
          // closed e.Vars as range 55
          // closed e.Commands as range 57
          if( ! refalrts::svar_right( context[59], context[51], context[52] ) )
            continue;
          // closed e.Pattern-L as range 51
          //DEBUG: s.X: 5
          //DEBUG: s.R: 42
          //DEBUG: s.Offset: 30
          //DEBUG: e.Pattern-R: 53
          //DEBUG: e.Vars: 55
          //DEBUG: e.Commands: 57
          //DEBUG: s.L: 59
          //DEBUG: e.Pattern-L: 51

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/59 {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$21=1@1/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/51 } Tile{ AsIs: )/9 HalfReuse: s.R42 /12 } Tile{ HalfReuse: (/31 } Tile{ AsIs: e.Pattern-R/53 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/55 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/57 } Tile{ AsIs: )/29 } s.X/5/60 </61 & Add/62 s.X/5/63 1/64 >/65 Tile{ AsIs: >/1 ]] }
          refalrts::copy_stvar(vm, context[60], context[5]);
          refalrts::alloc_open_call(vm, context[61]);
          refalrts::alloc_name(vm, context[62], functions[efunc_Add]);
          refalrts::copy_stvar(vm, context[63], context[5]);
          refalrts::alloc_number(vm, context[64], 1UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S21A1Z1]);
          refalrts::reinit_svar( context[12], context[42] );
          refalrts::reinit_open_bracket(context[31]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[61] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[31], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[60], context[65] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_evar( res, context[57], context[58] );
          res = refalrts::splice_evar( res, context[13], context[28] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[9], context[12] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/51 )/9 (/12 s.R/42 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # PSR/31 )/29 e.Commands/57 >/1
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        if( ! refalrts::ident_term( identifiers[ident_PSR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 51
        // closed e.Pattern-R as range 53
        // closed e.Vars as range 55
        // closed e.Commands as range 57
        //DEBUG: s.X: 5
        //DEBUG: s.R: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 51
        //DEBUG: e.Pattern-R: 53
        //DEBUG: e.Vars: 55
        //DEBUG: e.Commands: 57

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$22=1@1/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/51 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-R/53 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/55 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/57 } Tile{ AsIs: )/29 } s.X/5/59 Tile{ HalfReuse: </31 } & Add/60 s.X/5/61 1/62 >/63 Tile{ AsIs: >/1 ]] }
        refalrts::copy_stvar(vm, context[59], context[5]);
        refalrts::alloc_name(vm, context[60], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[61], context[5]);
        refalrts::alloc_number(vm, context[62], 1UL);
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S22A1Z1]);
        refalrts::reinit_open_call(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[60], context[63] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_elem( res, context[59] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@2/4 s.new23/5 (/8 e.new28/43 s.new29/53 )/9 (/12 s.new30/42 e.new31/45 )/13 (/16 e.new32/47 )/17 (/28 s.new25/30 s.new26/31 e.new27/49 )/29 e.new24/51 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      // closed e.new31 as range 45
      // closed e.new32 as range 47
      // closed e.new27 as range 49
      // closed e.new24 as range 51
      if( ! refalrts::svar_right( context[53], context[43], context[44] ) )
        continue;
      // closed e.new28 as range 43
      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/54 s.L/53 )/9 (/12 s.R/42 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # SETB/31 s.NewL/64 s.NewR/65 )/29 e.Commands/62 >/1
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[50];
        context[62] = context[51];
        context[63] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[31] ) )
          continue;
        // closed e.Pattern-L as range 54
        // closed e.Pattern-R as range 56
        // closed e.Vars as range 58
        // closed e.Commands as range 62
        if( ! refalrts::svar_left( context[64], context[60], context[61] ) )
          continue;
        if( ! refalrts::svar_left( context[65], context[60], context[61] ) )
          continue;
        if( ! refalrts::empty_seq( context[60], context[61] ) )
          continue;
        //DEBUG: s.X: 5
        //DEBUG: s.L: 53
        //DEBUG: s.R: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 54
        //DEBUG: e.Pattern-R: 56
        //DEBUG: e.Vars: 58
        //DEBUG: e.Commands: 62
        //DEBUG: s.NewL: 64
        //DEBUG: s.NewR: 65

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@4/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/54 } (/66 Tile{ HalfReuse: # Hole/9 HalfReuse: s.L53 /12 AsIs: s.R/42 } )/67 Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/58 AsIs: )/17 AsIs: (/28 AsIs: s.Offset/30 AsIs: # SETB/31 AsIs: s.NewL/64 AsIs: s.NewR/65 AsIs: )/29 AsIs: e.Commands/62 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[66]);
        refalrts::alloc_close_bracket(vm, context[67]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z4]);
        refalrts::reinit_ident(context[9], identifiers[ident_Hole]);
        refalrts::reinit_svar( context[12], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[8], context[13] );
        refalrts::link_brackets( context[66], context[67] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[13];
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_evar( res, context[9], context[42] );
        res = refalrts::splice_elem( res, context[66] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/54 s.L/53 )/9 (/12 s.R/42 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # EMP/31 )/29 e.Commands/60 >/1
      context[54] = context[43];
      context[55] = context[44];
      context[56] = context[45];
      context[57] = context[46];
      context[58] = context[47];
      context[59] = context[48];
      context[60] = context[51];
      context[61] = context[52];
      if( ! refalrts::ident_term( identifiers[ident_EMP], context[31] ) )
        continue;
      if( ! refalrts::empty_seq( context[49], context[50] ) )
        continue;
      // closed e.Pattern-L as range 54
      // closed e.Pattern-R as range 56
      // closed e.Vars as range 58
      // closed e.Commands as range 60
      //DEBUG: s.X: 5
      //DEBUG: s.L: 53
      //DEBUG: s.R: 42
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 54
      //DEBUG: e.Pattern-R: 56
      //DEBUG: e.Vars: 58
      //DEBUG: e.Commands: 60

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 )/9 (/12 s.R/42 {REMOVED TILE} {REMOVED TILE} (/28 s.Offset/30 # EMP/31 )/29 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@4/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/54 } Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/58 AsIs: )/17 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@2/4 s.new14/5 (/8 e.new18/32 )/9 (/12 e.new19/34 )/13 (/16 e.new20/36 )/17 (/28 s.new16/30 s.new17/31 )/29 e.new15/38 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.new18 as range 32
      // closed e.new19 as range 34
      // closed e.new20 as range 36
      // closed e.new15 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@2/4 s.new21/5 (/8 e.new28/40 s.new29/52 )/9 (/12 e.new30/42 )/13 (/16 e.new31/44 )/17 (/28 s.new26/30 s.new27/31 )/29 (/50 e.new22/48 s.new23/54 s.new24/53 )/51 e.new25/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = 0;
        context[49] = 0;
        context[50] = refalrts::brackets_left( context[48], context[49], context[46], context[47] );
        if( ! context[50] )
          continue;
        refalrts::bracket_pointers(context[50], context[51]);
        // closed e.new30 as range 42
        // closed e.new31 as range 44
        // closed e.new25 as range 46
        if( ! refalrts::svar_right( context[52], context[40], context[41] ) )
          continue;
        // closed e.new28 as range 40
        if( ! refalrts::svar_right( context[53], context[48], context[49] ) )
          continue;
        if( ! refalrts::svar_right( context[54], context[48], context[49] ) )
          continue;
        // closed e.new22 as range 48
        do {
          // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/55 s.L/52 )/9 (/12 e.Pattern-R/57 )/13 (/16 e.Vars/59 )/17 (/28 s.Offset1/30 # PLEN/31 )/29 (/50 s.Offset2/54 # LEN/53 )/51 e.Commands/61 >/1
          context[55] = context[40];
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[46];
          context[62] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_PLEN], context[31] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LEN], context[53] ) )
            continue;
          if( ! refalrts::empty_seq( context[48], context[49] ) )
            continue;
          // closed e.Pattern-L as range 55
          // closed e.Pattern-R as range 57
          // closed e.Vars as range 59
          // closed e.Commands as range 61
          //DEBUG: s.X: 5
          //DEBUG: s.L: 52
          //DEBUG: s.Offset1: 30
          //DEBUG: s.Offset2: 54
          //DEBUG: e.Pattern-L: 55
          //DEBUG: e.Pattern-R: 57
          //DEBUG: e.Vars: 59
          //DEBUG: e.Commands: 61

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} s.Offset1/30 {REMOVED TILE} {REMOVED TILE} s.Offset2/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$25=1@1/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/55 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/57 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/59 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/61 } Tile{ AsIs: )/29 HalfReuse: s.X5 /50 } Tile{ HalfReuse: </31 } Tile{ HalfReuse: & Add/53 HalfReuse: s.X5 /51 } 1/63 >/64 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[63], 1UL);
          refalrts::alloc_close_call(vm, context[64]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S25A1Z1]);
          refalrts::reinit_svar( context[50], context[5] );
          refalrts::reinit_open_call(context[31]);
          refalrts::reinit_name(context[53], functions[efunc_Add]);
          refalrts::reinit_svar( context[51], context[5] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[64] );
          refalrts::push_stack( vm, context[31] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[53], context[51] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[50] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[9], context[28] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/55 s.L/52 )/9 (/12 e.Pattern-R/57 )/13 (/16 e.Vars/59 )/17 (/28 s.Offset1/30 # PLENS/31 )/29 (/50 s.Offset2/65 # LENS/54 s.Char/53 )/51 e.Commands/63 >/1
          context[55] = context[40];
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[48];
          context[62] = context[49];
          context[63] = context[46];
          context[64] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_PLENS], context[31] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LENS], context[54] ) )
            continue;
          // closed e.Pattern-L as range 55
          // closed e.Pattern-R as range 57
          // closed e.Vars as range 59
          // closed e.Commands as range 63
          if( ! refalrts::svar_left( context[65], context[61], context[62] ) )
            continue;
          if( ! refalrts::empty_seq( context[61], context[62] ) )
            continue;
          //DEBUG: s.X: 5
          //DEBUG: s.L: 52
          //DEBUG: s.Offset1: 30
          //DEBUG: s.Char: 53
          //DEBUG: e.Pattern-L: 55
          //DEBUG: e.Pattern-R: 57
          //DEBUG: e.Vars: 59
          //DEBUG: e.Commands: 63
          //DEBUG: s.Offset2: 65

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} s.Offset1/30 {REMOVED TILE} {REMOVED TILE} s.Offset2/65 {REMOVED TILE} s.Char/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$26=1@1/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/55 } Tile{ AsIs: )/51 } Tile{ HalfReuse: s.Char53 /9 AsIs: (/12 AsIs: e.Pattern-R/57 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/59 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/63 } Tile{ AsIs: )/29 HalfReuse: s.X5 /50 } Tile{ HalfReuse: </31 } Tile{ HalfReuse: & Add/54 } s.X/5/66 1/67 >/68 </69 & Add/70 s.X/5/71 2/72 >/73 Tile{ AsIs: >/1 ]] }
          refalrts::copy_stvar(vm, context[66], context[5]);
          refalrts::alloc_number(vm, context[67], 1UL);
          refalrts::alloc_close_call(vm, context[68]);
          refalrts::alloc_open_call(vm, context[69]);
          refalrts::alloc_name(vm, context[70], functions[efunc_Add]);
          refalrts::copy_stvar(vm, context[71], context[5]);
          refalrts::alloc_number(vm, context[72], 2UL);
          refalrts::alloc_close_call(vm, context[73]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S26A1Z1]);
          refalrts::reinit_svar( context[9], context[53] );
          refalrts::reinit_svar( context[50], context[5] );
          refalrts::reinit_open_call(context[31]);
          refalrts::reinit_name(context[54], functions[efunc_Add]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[73] );
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[68] );
          refalrts::push_stack( vm, context[31] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[51] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[66], context[73] );
          res = refalrts::splice_elem( res, context[54] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[50] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[9], context[28] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/55 s.L/52 )/9 (/12 s.R/63 e.Pattern-R/57 )/13 (/16 e.Vars/59 )/17 (/28 s.Offset1/30 # PLENP/31 )/29 (/50 s.Offset2/54 # LENP/53 )/51 e.Commands/61 >/1
        context[55] = context[40];
        context[56] = context[41];
        context[57] = context[42];
        context[58] = context[43];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_PLENP], context[31] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_LENP], context[53] ) )
          continue;
        if( ! refalrts::empty_seq( context[48], context[49] ) )
          continue;
        // closed e.Pattern-L as range 55
        // closed e.Vars as range 59
        // closed e.Commands as range 61
        if( ! refalrts::svar_left( context[63], context[57], context[58] ) )
          continue;
        // closed e.Pattern-R as range 57
        //DEBUG: s.X: 5
        //DEBUG: s.L: 52
        //DEBUG: s.Offset1: 30
        //DEBUG: s.Offset2: 54
        //DEBUG: e.Pattern-L: 55
        //DEBUG: e.Vars: 59
        //DEBUG: e.Commands: 61
        //DEBUG: s.R: 63
        //DEBUG: e.Pattern-R: 57

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} s.R/63 {REMOVED TILE} {REMOVED TILE} s.Offset1/30 {REMOVED TILE} s.Offset2/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$27=1@1/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/55 } Tile{ HalfReuse: )/31 HalfReuse: s.R63 /29 AsIs: (/50 } Tile{ AsIs: e.Pattern-R/57 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/59 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/61 } Tile{ AsIs: )/9 HalfReuse: s.X5 /12 } </64 & Add/65 Tile{ HalfReuse: s.X5 /53 HalfReuse: 1/51 } >/66 </67 & Add/68 s.X/5/69 2/70 >/71 </72 & Add/73 s.X/5/74 3/75 >/76 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[64]);
        refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
        refalrts::alloc_close_call(vm, context[66]);
        refalrts::alloc_open_call(vm, context[67]);
        refalrts::alloc_name(vm, context[68], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[69], context[5]);
        refalrts::alloc_number(vm, context[70], 2UL);
        refalrts::alloc_close_call(vm, context[71]);
        refalrts::alloc_open_call(vm, context[72]);
        refalrts::alloc_name(vm, context[73], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[74], context[5]);
        refalrts::alloc_number(vm, context[75], 3UL);
        refalrts::alloc_close_call(vm, context[76]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S27A1Z1]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::reinit_svar( context[29], context[63] );
        refalrts::reinit_svar( context[12], context[5] );
        refalrts::reinit_svar( context[53], context[5] );
        refalrts::reinit_number(context[51], 1UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[76] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[71] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[64] );
        refalrts::link_brackets( context[28], context[9] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[50], context[13] );
        refalrts::link_brackets( context[8], context[31] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[66], context[76] );
        res = refalrts::splice_evar( res, context[53], context[51] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_evar( res, context[9], context[12] );
        res = refalrts::splice_evar( res, context[61], context[62] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[31], context[50] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/40 )/9 (/12 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # STLEN/31 )/29 e.Commands/46 >/1
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      if( ! refalrts::ident_term( identifiers[ident_STLEN], context[31] ) )
        continue;
      // closed e.Pattern-L as range 40
      // closed e.Pattern-R as range 42
      // closed e.Vars as range 44
      // closed e.Commands as range 46
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 40
      //DEBUG: e.Pattern-R: 42
      //DEBUG: e.Vars: 44
      //DEBUG: e.Commands: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/28 } Tile{ Reuse: # StartBlock/31 AsIs: )/29 } </48 Tile{ HalfReuse: & Decompile-Pattern-Hole/0 HalfReuse: 1/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/40 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/42 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 AsIs: )/17 } Tile{ AsIs: e.Commands/46 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::update_ident(context[31], identifiers[ident_StartBlock]);
      refalrts::reinit_name(context[0], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[17] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[31], context[29] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/32 )/9 (/12 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # LABEL/31 e.BlockName/38 )/29 e.Commands/40 >/1
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[24];
    context[41] = context[25];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[31] ) )
      continue;
    // closed e.Pattern-L as range 32
    // closed e.Pattern-R as range 34
    // closed e.Vars as range 36
    // closed e.BlockName as range 38
    // closed e.Commands as range 40
    //DEBUG: s.X: 5
    //DEBUG: s.Offset: 30
    //DEBUG: e.Pattern-L: 32
    //DEBUG: e.Pattern-R: 34
    //DEBUG: e.Vars: 36
    //DEBUG: e.BlockName: 38
    //DEBUG: e.Commands: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/28 s.Offset/30 # LABEL/31 e.BlockName/38 )/29 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole@2/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/32 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/34 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/36 AsIs: )/17 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[41] );
    refalrts::splice_to_freelist_open( vm, context[17], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 s.L/22 )/9 (/12 s.R/23 )/13 (/16 )/17 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[23], context[20], context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: s.L: 22
    //DEBUG: s.R: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 s.L/22 )/9 (/12 s.R/23 )/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/16 HalfReuse: # EndOfFunction/17 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[17], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[16], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.Pattern-L/18 )/9 (/12 e.Pattern-R/20 )/13 (/16 e.Vars/22 )/17 e.Commands/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Pattern-L as range 18
    // closed e.Pattern-R as range 20
    // closed e.Vars as range 22
    // closed e.Commands as range 24
    //DEBUG: s.X: 5
    //DEBUG: e.Pattern-L: 18
    //DEBUG: e.Pattern-R: 20
    //DEBUG: e.Vars: 22
    //DEBUG: e.Commands: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/26 Tile{ HalfReuse: '='/1 } 'A'/27 Tile{ HalfReuse: ' '/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/18 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/20 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/22 AsIs: )/17 } )/28 Tile{ AsIs: e.Commands/24 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_char(vm, context[27], 'A');
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::reinit_char(context[1], '=');
    refalrts::reinit_char(context[0], ' ');
    refalrts::reinit_number(context[4], 0UL);
    refalrts::link_brackets( context[26], context[28] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[0], context[17] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole@2/4 s.X/5 (/8 e.dyn0/6 )/9 (/12 e.dyn1/10 )/13 (/16 e.dyn2/14 )/17 e.dyn3/2 >/1
  // closed e.dyn0 as range 6
  // closed e.dyn1 as range 10
  // closed e.dyn2 as range 14
  // closed e.dyn3 as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.dyn0: 6
  //DEBUG: e.dyn1: 10
  //DEBUG: e.dyn2: 14
  //DEBUG: e.dyn3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 Tile{ HalfReuse: & Decompile-Pattern-Hole@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.dyn0/6 AsIs: )/9 AsIs: (/12 AsIs: e.dyn1/10 AsIs: )/13 AsIs: (/16 AsIs: e.dyn2/14 AsIs: )/17 AsIs: e.dyn3/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_Z2("Decompile-Pattern-Hole@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S7A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & Decompile-Pattern-Hole$7=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$7=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$7=1@1/4 (/7 e.Pattern-L0/25 )/8 (/11 e.Chars0/27 )/12 (/15 e.Pattern-R0/29 )/16 (/19 e.Vars0/31 )/20 (/23 e.Commands0/33 )/24 s.Top$a/37 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.Pattern-L0 as range 25
    // closed e.Chars0 as range 27
    // closed e.Pattern-R0 as range 29
    // closed e.Vars0 as range 31
    // closed e.Commands0 as range 33
    if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
      continue;
    if( ! refalrts::empty_seq( context[35], context[36] ) )
      continue;
    //DEBUG: e.Pattern-L0: 25
    //DEBUG: e.Chars0: 27
    //DEBUG: e.Pattern-R0: 29
    //DEBUG: e.Vars0: 31
    //DEBUG: e.Commands0: 33
    //DEBUG: s.Top$a: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </38 Tile{ HalfReuse: & Decompile-Pattern-Hole$7=2@1/0 HalfReuse: s.Top$a37 /4 AsIs: (/7 AsIs: e.Pattern-L0/25 AsIs: )/8 AsIs: (/11 AsIs: e.Chars0/27 AsIs: )/12 AsIs: (/15 AsIs: e.Pattern-R0/29 AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/31 AsIs: )/20 AsIs: (/23 AsIs: e.Commands0/33 AsIs: )/24 } </39 & Sub/40 Tile{ AsIs: s.Top$a/37 } 1/41 >/42 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_Sub]);
    refalrts::alloc_number(vm, context[41], 1UL);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S7A2Z1]);
    refalrts::reinit_svar( context[4], context[37] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[0], context[24] );
    res = refalrts::splice_elem( res, context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$7=1@1/4 (/7 e.Pattern-L0/5 )/8 (/11 e.Chars0/9 )/12 (/15 e.Pattern-R0/13 )/16 (/19 e.Vars0/17 )/20 (/23 e.Commands0/21 )/24 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Chars0 as range 9
  // closed e.Pattern-R0 as range 13
  // closed e.Vars0 as range 17
  // closed e.Commands0 as range 21
  // closed e.dyn as range 2
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Chars0: 9
  //DEBUG: e.Pattern-R0: 13
  //DEBUG: e.Vars0: 17
  //DEBUG: e.Commands0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 Tile{ HalfReuse: & Decompile-Pattern-Hole$7=1@0/0 HalfReuse: 0/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Chars0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Pattern-R0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Commands0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S7A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S7A1Z1("Decompile-Pattern-Hole$7=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S7A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S8A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & Decompile-Pattern-Hole$8=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$8=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$8=1@1/4 (/7 e.Pattern-L0/25 )/8 (/11 e.Chars0/27 )/12 (/15 e.Pattern-R0/29 )/16 (/19 e.Vars0/31 )/20 (/23 e.Commands0/33 )/24 s.Top$a/37 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.Pattern-L0 as range 25
    // closed e.Chars0 as range 27
    // closed e.Pattern-R0 as range 29
    // closed e.Vars0 as range 31
    // closed e.Commands0 as range 33
    if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
      continue;
    if( ! refalrts::empty_seq( context[35], context[36] ) )
      continue;
    //DEBUG: e.Pattern-L0: 25
    //DEBUG: e.Chars0: 27
    //DEBUG: e.Pattern-R0: 29
    //DEBUG: e.Vars0: 31
    //DEBUG: e.Commands0: 33
    //DEBUG: s.Top$a: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </38 Tile{ HalfReuse: & Decompile-Pattern-Hole$8=2@1/0 HalfReuse: s.Top$a37 /4 AsIs: (/7 AsIs: e.Pattern-L0/25 AsIs: )/8 AsIs: (/11 AsIs: e.Chars0/27 AsIs: )/12 AsIs: (/15 AsIs: e.Pattern-R0/29 AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/31 AsIs: )/20 AsIs: (/23 AsIs: e.Commands0/33 AsIs: )/24 } </39 & Sub/40 Tile{ AsIs: s.Top$a/37 } 1/41 >/42 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_Sub]);
    refalrts::alloc_number(vm, context[41], 1UL);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S8A2Z1]);
    refalrts::reinit_svar( context[4], context[37] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[0], context[24] );
    res = refalrts::splice_elem( res, context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$8=1@1/4 (/7 e.Pattern-L0/5 )/8 (/11 e.Chars0/9 )/12 (/15 e.Pattern-R0/13 )/16 (/19 e.Vars0/17 )/20 (/23 e.Commands0/21 )/24 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Chars0 as range 9
  // closed e.Pattern-R0 as range 13
  // closed e.Vars0 as range 17
  // closed e.Commands0 as range 21
  // closed e.dyn as range 2
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Chars0: 9
  //DEBUG: e.Pattern-R0: 13
  //DEBUG: e.Vars0: 17
  //DEBUG: e.Commands0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 Tile{ HalfReuse: & Decompile-Pattern-Hole$8=1@0/0 HalfReuse: 0/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Chars0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Pattern-R0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Commands0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S8A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S8A1Z1("Decompile-Pattern-Hole$8=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S8A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_NoHole_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 67 elems
  refalrts::Iter context[67];
  refalrts::zeros( context, 67 );
  // </0 & Decompile-Pattern-NoHole@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.new8/13 )/8 (/11 e.new9/15 )/12 (/21 s.new4/23 s.new5/24 e.new6/19 )/22 e.new7/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new8 as range 13
    // closed e.new9 as range 15
    // closed e.new7 as range 17
    if( ! refalrts::svar_left( context[23], context[19], context[20] ) )
      continue;
    if( ! refalrts::svar_left( context[24], context[19], context[20] ) )
      continue;
    // closed e.new6 as range 19
    do {
      // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.new15/25 )/8 (/11 e.new16/27 )/12 (/21 s.new11/23 s.new12/24 e.new13/29 s.new14/33 )/22 e.new10/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      // closed e.new15 as range 25
      // closed e.new16 as range 27
      // closed e.new10 as range 31
      if( ! refalrts::svar_right( context[33], context[29], context[30] ) )
        continue;
      // closed e.new13 as range 29
      do {
        // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.Pattern-L/43 (/49 # Hole/51 s.L/52 s.R/53 )/50 e.Pattern-R/45 )/8 (/11 e.Vars/36 )/12 (/21 s.Offset/23 # SETB/24 s.L/42 s.R/33 )/22 e.Commands/40 >/1
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[24] ) )
          continue;
        // closed e.Vars as range 36
        // closed e.Commands as range 40
        if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        context[43] = 0;
        context[44] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[45] = context[34];
          context[46] = context[35];
          context[47] = 0;
          context[48] = 0;
          context[49] = refalrts::brackets_left( context[47], context[48], context[45], context[46] );
          if( ! context[49] )
            continue;
          refalrts::bracket_pointers(context[49], context[50]);
          context[51] = refalrts::ident_left( identifiers[ident_Hole], context[47], context[48] );
          if( ! context[51] )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[52], context[42], context[47], context[48] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[53], context[33], context[47], context[48] ) )
            continue;
          if( ! refalrts::empty_seq( context[47], context[48] ) )
            continue;
          // closed e.Pattern-R as range 45
          //DEBUG: s.Offset: 23
          //DEBUG: s.R: 33
          //DEBUG: e.Vars: 36
          //DEBUG: e.Commands: 40
          //DEBUG: s.L: 42
          //DEBUG: e.Pattern-L: 43
          //DEBUG: e.Pattern-R: 45

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 s.R/53 {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE} s.L/42 s.R/33 )/22 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 } Tile{ HalfReuse: & Decompile-Pattern-Hole@2/0 HalfReuse: 5/4 AsIs: (/7 AsIs: e.Pattern-L/43 HalfReuse: s.L52 /49 HalfReuse: )/51 } Tile{ AsIs: (/21 } Tile{ HalfReuse: s.R53 /50 AsIs: e.Pattern-R/45 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/36 AsIs: )/12 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_call(context[24]);
          refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
          refalrts::reinit_number(context[4], 5UL);
          refalrts::reinit_svar( context[49], context[52] );
          refalrts::reinit_close_bracket(context[51]);
          refalrts::reinit_svar( context[50], context[53] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[24] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[21], context[8] );
          refalrts::link_brackets( context[7], context[51] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[50], context[12] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[0], context[51] );
          res = refalrts::splice_elem( res, context[24] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[43], context[44], context[34], context[35] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.Pattern/34 )/8 (/11 e.Vars/36 )/12 (/21 s.Offset/23 # RDY/24 0/33 )/22 e.Commands/38 >/1
      context[34] = context[25];
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[31];
      context[39] = context[32];
      if( ! refalrts::ident_term( identifiers[ident_RDY], context[24] ) )
        continue;
      if( ! refalrts::number_term( 0UL, context[33] ) )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Pattern as range 34
      // closed e.Vars as range 36
      // closed e.Commands as range 38
      //DEBUG: s.Offset: 23
      //DEBUG: e.Pattern: 34
      //DEBUG: e.Vars: 36
      //DEBUG: e.Commands: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Pattern/4 HalfReuse: 0/7 AsIs: e.Pattern/34 AsIs: )/8 HalfReuse: </11 } Tile{ HalfReuse: & Decompile-Result@2/12 AsIs: (/21 } Tile{ AsIs: e.Vars/36 } )/40 Tile{ HalfReuse: '$'/24 HalfReuse: (/33 AsIs: )/22 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[12], functions[efunc_gen_Decompilem_Result_Z2]);
      refalrts::reinit_char(context[24], '$');
      refalrts::reinit_open_bracket(context[33]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::link_brackets( context[33], context[22] );
      refalrts::link_brackets( context[21], context[40] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[12], context[21] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.Pattern/25 )/8 (/11 e.Vars/27 )/12 (/21 s.Offset/23 # PUSHVF/24 )/22 e.Commands/29 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_PUSHVF], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e.Pattern as range 25
      // closed e.Vars as range 27
      // closed e.Commands as range 29
      //DEBUG: s.Offset: 23
      //DEBUG: e.Pattern: 25
      //DEBUG: e.Vars: 27
      //DEBUG: e.Commands: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Pattern/4 HalfReuse: 0/7 AsIs: e.Pattern/25 AsIs: )/8 AsIs: (/11 } # StartCondition/31 Tile{ AsIs: )/12 HalfReuse: </21 } & Decompile-Result@2/32 (/33 Tile{ AsIs: e.Vars/27 } )/34 '$'/35 Tile{ HalfReuse: (/24 AsIs: )/22 AsIs: e.Commands/29 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[31], identifiers[ident_StartCondition]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_Decompilem_Result_Z2]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_char(vm, context[35], '$');
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_open_call(context[21]);
      refalrts::reinit_open_bracket(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[24], context[22] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[12], context[21] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.new15/25 )/8 (/11 e.new16/27 )/12 (/21 s.new11/23 s.new12/24 s.new13/33 e.new14/29 )/22 e.new10/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      // closed e.new15 as range 25
      // closed e.new16 as range 27
      // closed e.new10 as range 31
      if( ! refalrts::svar_left( context[33], context[29], context[30] ) )
        continue;
      // closed e.new14 as range 29
      do {
        // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.Pattern/34 )/8 (/11 e.Vars/36 )/12 (/21 s.Offset/23 # TRAN/24 s.Jump/33 )/22 e.Commands-B/40 (/46 s.Jump/48 e.Command/44 )/47 e.Commands-E/42 >/1
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[31];
        context[39] = context[32];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[24] ) )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        // closed e.Pattern as range 34
        // closed e.Vars as range 36
        context[40] = 0;
        context[41] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[42] = context[38];
          context[43] = context[39];
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
          if( ! context[46] )
            continue;
          refalrts::bracket_pointers(context[46], context[47]);
          if( ! refalrts::repeated_stvar_left( vm, context[48], context[33], context[44], context[45] ) )
            continue;
          // closed e.Command as range 44
          // closed e.Commands-E as range 42
          //DEBUG: s.Offset: 23
          //DEBUG: s.Jump: 33
          //DEBUG: e.Pattern: 34
          //DEBUG: e.Vars: 36
          //DEBUG: e.Commands-B: 40
          //DEBUG: e.Command: 44
          //DEBUG: e.Commands-E: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE} s.Jump/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@2/4 AsIs: (/7 AsIs: e.Pattern/34 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/36 AsIs: )/12 } Tile{ AsIs: e.Commands-B/40 } Tile{ AsIs: (/21 } '@'/49 Tile{ Reuse: # Restore-NoHole/24 } 0/50 5/51 (/52 e.Pattern/34/53 Tile{ AsIs: )/22 } (/55 e.Vars/36/56 )/58 )/59 Tile{ AsIs: (/46 AsIs: s.Jump/48 AsIs: e.Command/44 AsIs: )/47 AsIs: e.Commands-E/42 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[49], '@');
          refalrts::alloc_number(vm, context[50], 0UL);
          refalrts::alloc_number(vm, context[51], 5UL);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::copy_evar(vm, context[53], context[54], context[34], context[35]);
          refalrts::alloc_open_bracket(vm, context[55]);
          refalrts::copy_evar(vm, context[56], context[57], context[36], context[37]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_close_bracket(vm, context[59]);
          refalrts::update_ident(context[24], identifiers[ident_Restorem_NoHole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[46], context[47] );
          refalrts::link_brackets( context[21], context[59] );
          refalrts::link_brackets( context[55], context[58] );
          refalrts::link_brackets( context[52], context[22] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[46];
          res = refalrts::splice_evar( res, context[55], context[59] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[50], context[52] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_elem( res, context[49] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[40], context[41], context[38], context[39] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.new24/34 )/8 (/11 e.new25/36 )/12 (/21 '@'/23 s.new18/24 s.new19/33 s.new20/50 e.new21/38 (/48 e.new22/46 )/49 (/44 e.new23/42 )/45 )/22 e.new17/40 >/1
      context[34] = context[25];
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      if( ! refalrts::char_term( '@', context[23] ) )
        continue;
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_right( context[42], context[43], context[38], context[39] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::brackets_right( context[46], context[47], context[38], context[39] );
      if( ! context[48] )
        continue;
      refalrts::bracket_pointers(context[48], context[49]);
      // closed e.new24 as range 34
      // closed e.new25 as range 36
      // closed e.new22 as range 46
      // closed e.new23 as range 42
      // closed e.new17 as range 40
      if( ! refalrts::svar_left( context[50], context[38], context[39] ) )
        continue;
      // closed e.new21 as range 38
      do {
        // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 '@'/23 # Restore-Hole/24 s.Level2/33 s.Top2/50 (/65 e.Pattern-L2/63 )/66 (/48 e.Pattern-R2/57 )/49 (/44 e.Vars2/59 )/45 )/22 e.Commands/61 >/1
        context[51] = context[34];
        context[52] = context[35];
        context[53] = context[36];
        context[54] = context[37];
        context[55] = context[38];
        context[56] = context[39];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[42];
        context[60] = context[43];
        context[61] = context[40];
        context[62] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[24] ) )
          continue;
        context[63] = 0;
        context[64] = 0;
        context[65] = refalrts::brackets_left( context[63], context[64], context[55], context[56] );
        if( ! context[65] )
          continue;
        refalrts::bracket_pointers(context[65], context[66]);
        if( ! refalrts::empty_seq( context[55], context[56] ) )
          continue;
        // closed e.Pattern1 as range 51
        // closed e.Vars1 as range 53
        // closed e.Pattern-L2 as range 63
        // closed e.Pattern-R2 as range 57
        // closed e.Vars2 as range 59
        // closed e.Commands as range 61
        //DEBUG: s.Level2: 33
        //DEBUG: s.Top2: 50
        //DEBUG: e.Pattern1: 51
        //DEBUG: e.Vars1: 53
        //DEBUG: e.Pattern-L2: 63
        //DEBUG: e.Pattern-R2: 57
        //DEBUG: e.Vars2: 59
        //DEBUG: e.Commands: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@2/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & Decompile-Pattern-Hole/24 AsIs: s.Level2/33 AsIs: s.Top2/50 AsIs: (/65 AsIs: e.Pattern-L2/63 AsIs: )/66 AsIs: (/48 AsIs: e.Pattern-R2/57 AsIs: )/49 AsIs: (/44 AsIs: e.Vars2/59 AsIs: )/45 } Tile{ AsIs: e.Commands/61 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[23]);
        refalrts::reinit_name(context[24], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::link_brackets( context[44], context[45] );
        refalrts::link_brackets( context[48], context[49] );
        refalrts::link_brackets( context[65], context[66] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[61], context[62] );
        res = refalrts::splice_evar( res, context[23], context[45] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 '@'/23 # Restore-NoHole/24 s.Level2/33 s.Top2/50 (/48 e.Pattern2/55 )/49 (/44 e.Vars2/57 )/45 )/22 e.Commands/59 >/1
      context[51] = context[34];
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[46];
      context[56] = context[47];
      context[57] = context[42];
      context[58] = context[43];
      context[59] = context[40];
      context[60] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.Pattern1 as range 51
      // closed e.Vars1 as range 53
      // closed e.Pattern2 as range 55
      // closed e.Vars2 as range 57
      // closed e.Commands as range 59
      //DEBUG: s.Level2: 33
      //DEBUG: s.Top2: 50
      //DEBUG: e.Pattern1: 51
      //DEBUG: e.Vars1: 53
      //DEBUG: e.Pattern2: 55
      //DEBUG: e.Vars2: 57
      //DEBUG: e.Commands: 59

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@2/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & Decompile-Pattern-NoHole/24 AsIs: s.Level2/33 AsIs: s.Top2/50 AsIs: (/48 AsIs: e.Pattern2/55 AsIs: )/49 AsIs: (/44 AsIs: e.Vars2/57 AsIs: )/45 } Tile{ AsIs: e.Commands/59 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[23]);
      refalrts::reinit_name(context[24], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[44], context[45] );
      refalrts::link_brackets( context[48], context[49] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[23], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.Pattern/25 )/8 (/11 e.Vars/27 )/12 (/21 s.Offset/23 # LABEL/24 e.BlockName/29 )/22 e.Commands/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[24] ) )
      continue;
    // closed e.Pattern as range 25
    // closed e.Vars as range 27
    // closed e.BlockName as range 29
    // closed e.Commands as range 31
    //DEBUG: s.Offset: 23
    //DEBUG: e.Pattern: 25
    //DEBUG: e.Vars: 27
    //DEBUG: e.BlockName: 29
    //DEBUG: e.Commands: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/21 s.Offset/23 # LABEL/24 e.BlockName/29 )/22 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@2/4 AsIs: (/7 AsIs: e.Pattern/25 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/27 AsIs: )/12 } Tile{ AsIs: e.Commands/31 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, context[12], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@2/4 (/7 )/8 (/11 )/12 >/1
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@2/4 (/7 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 HalfReuse: # EndOfFunction/12 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[12], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.Pattern/13 )/8 (/11 e.Vars/15 )/12 e.Commands/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Pattern as range 13
    // closed e.Vars as range 15
    // closed e.Commands as range 17
    //DEBUG: e.Pattern: 13
    //DEBUG: e.Vars: 15
    //DEBUG: e.Commands: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 }"=B "/19 Tile{ HalfReuse: 0/0 HalfReuse: 5/4 AsIs: (/7 AsIs: e.Pattern/13 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/15 AsIs: )/12 } )/21 Tile{ AsIs: e.Commands/17 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[19], context[20], "=B ", 3);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_number(context[4], 5UL);
    refalrts::link_brackets( context[1], context[21] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-NoHole@2/4 (/7 e.dyn0/5 )/8 (/11 e.dyn1/9 )/12 e.dyn2/2 >/1
  // closed e.dyn0 as range 5
  // closed e.dyn1 as range 9
  // closed e.dyn2 as range 2
  //DEBUG: e.dyn0: 5
  //DEBUG: e.dyn1: 9
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & Decompile-Pattern-NoHole@0/14 Tile{ HalfReuse: 0/0 HalfReuse: 5/4 AsIs: (/7 AsIs: e.dyn0/5 AsIs: )/8 AsIs: (/11 AsIs: e.dyn1/9 AsIs: )/12 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Decompilem_Patternm_NoHole_Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 5UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_NoHole_Z2("Decompile-Pattern-NoHole@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_NoHole_Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Decompile-Pattern-Hole$19=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$19=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$19=1@1/4 s.IdR0/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 e.Vars-B/32 (/38 s.Type/40 s.IdL/41 s.IdR0/42 '='/43 s.VarNoL/44 s.VarNoR/45 )/39 e.Vars-E/34 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    context[32] = 0;
    context[33] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[34] = context[30];
      context[35] = context[31];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[34], context[35] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      // closed e.Vars-E as range 34
      if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[41], context[36], context[37] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[42], context[5], context[36], context[37] ) )
        continue;
      context[43] = refalrts::char_left( '=', context[36], context[37] );
      if( ! context[43] )
        continue;
      if( ! refalrts::svar_left( context[44], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[45], context[36], context[37] ) )
        continue;
      if( ! refalrts::empty_seq( context[36], context[37] ) )
        continue;
      //DEBUG: s.IdR0: 5
      //DEBUG: e.Pattern-L0: 22
      //DEBUG: e.Pattern-R0: 24
      //DEBUG: e.Vars0: 26
      //DEBUG: e.Commands0: 28
      //DEBUG: e.Vars-B: 32
      //DEBUG: e.Vars-E: 34
      //DEBUG: s.Type: 40
      //DEBUG: s.IdL: 41
      //DEBUG: s.VarNoL: 44
      //DEBUG: s.VarNoR: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/32 {REMOVED TILE} s.VarNoL/44 s.VarNoR/45 {REMOVED TILE} e.Vars-E/34 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 } 5/46 (/47 Tile{ AsIs: e.Pattern-L0/22 } Tile{ AsIs: (/38 AsIs: s.Type/40 AsIs: s.IdL/41 AsIs: s.IdR0/42 AsIs: '='/43 } 3/48 4/49 Tile{ AsIs: )/39 } 4/50 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: s.Type40 /20 } s.IdL/41/51 Tile{ AsIs: s.IdR0/5 HalfReuse: '='/8 } 3/52 4/53 Tile{ AsIs: )/21 } )/54 Tile{ AsIs: e.Commands0/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[46], 5UL);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_number(vm, context[48], 3UL);
      refalrts::alloc_number(vm, context[49], 4UL);
      refalrts::alloc_number(vm, context[50], 4UL);
      refalrts::copy_stvar(vm, context[51], context[41]);
      refalrts::alloc_number(vm, context[52], 3UL);
      refalrts::alloc_number(vm, context[53], 4UL);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_svar( context[20], context[40] );
      refalrts::reinit_char(context[8], '=');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[54] );
      refalrts::link_brackets( context[17], context[21] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[47], context[9] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[5], context[8] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[9], context[20] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[38], context[43] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[32], context[33], context[30], context[31] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$19=1@1/4 s.IdR0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.IdR0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=1@0/4 AsIs: s.IdR0/5 } 0/22 3/23 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[22], 0UL);
  refalrts::alloc_number(vm, context[23], 3UL);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A1Z1("Decompile-Pattern-Hole$19=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Decompile-Pattern-Hole$20=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$20=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$20=1@1/4 s.IdR0/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 e.Vars-B/32 (/38 s.Type/40 s.IdL/41 s.IdR0/42 '='/43 s.VarNoL/44 s.VarNoR/45 )/39 e.Vars-E/34 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    context[32] = 0;
    context[33] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[34] = context[30];
      context[35] = context[31];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[34], context[35] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      // closed e.Vars-E as range 34
      if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[41], context[36], context[37] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[42], context[5], context[36], context[37] ) )
        continue;
      context[43] = refalrts::char_left( '=', context[36], context[37] );
      if( ! context[43] )
        continue;
      if( ! refalrts::svar_left( context[44], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[45], context[36], context[37] ) )
        continue;
      if( ! refalrts::empty_seq( context[36], context[37] ) )
        continue;
      //DEBUG: s.IdR0: 5
      //DEBUG: e.Pattern-L0: 22
      //DEBUG: e.Pattern-R0: 24
      //DEBUG: e.Vars0: 26
      //DEBUG: e.Commands0: 28
      //DEBUG: e.Vars-B: 32
      //DEBUG: e.Vars-E: 34
      //DEBUG: s.Type: 40
      //DEBUG: s.IdL: 41
      //DEBUG: s.VarNoL: 44
      //DEBUG: s.VarNoR: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/32 {REMOVED TILE} s.VarNoL/44 s.VarNoR/45 {REMOVED TILE} e.Vars-E/34 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 } 5/46 (/47 Tile{ AsIs: e.Pattern-L0/22 } Tile{ AsIs: )/39 } (/48 3/49 Tile{ AsIs: (/38 AsIs: s.Type/40 AsIs: s.IdL/41 AsIs: s.IdR0/42 AsIs: '='/43 } 3/50 Tile{ HalfReuse: 4/9 HalfReuse: )/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: s.Type40 /20 } s.IdL/41/51 Tile{ AsIs: s.IdR0/5 HalfReuse: '='/8 } 3/52 4/53 Tile{ AsIs: )/21 } )/54 Tile{ AsIs: e.Commands0/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[46], 5UL);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::alloc_number(vm, context[49], 3UL);
      refalrts::alloc_number(vm, context[50], 3UL);
      refalrts::copy_stvar(vm, context[51], context[41]);
      refalrts::alloc_number(vm, context[52], 3UL);
      refalrts::alloc_number(vm, context[53], 4UL);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
      refalrts::reinit_number(context[9], 4UL);
      refalrts::reinit_close_bracket(context[12]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_svar( context[20], context[40] );
      refalrts::reinit_char(context[8], '=');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[54] );
      refalrts::link_brackets( context[17], context[21] );
      refalrts::link_brackets( context[48], context[13] );
      refalrts::link_brackets( context[38], context[12] );
      refalrts::link_brackets( context[47], context[39] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[5], context[8] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[9], context[20] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[38], context[43] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[32], context[33], context[30], context[31] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$20=1@1/4 s.IdR0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.IdR0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=1@0/4 AsIs: s.IdR0/5 } 0/22 3/23 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[22], 0UL);
  refalrts::alloc_number(vm, context[23], 3UL);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A1Z1("Decompile-Pattern-Hole$20=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_NoHole_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 67 elems
  refalrts::Iter context[67];
  refalrts::zeros( context, 67 );
  // </0 & Decompile-Pattern-NoHole@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.new8/13 )/8 (/11 e.new9/15 )/12 (/21 s.new4/23 s.new5/24 e.new6/19 )/22 e.new7/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new8 as range 13
    // closed e.new9 as range 15
    // closed e.new7 as range 17
    if( ! refalrts::svar_left( context[23], context[19], context[20] ) )
      continue;
    if( ! refalrts::svar_left( context[24], context[19], context[20] ) )
      continue;
    // closed e.new6 as range 19
    do {
      // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.new15/25 )/8 (/11 e.new16/27 )/12 (/21 s.new11/23 s.new12/24 e.new13/29 s.new14/33 )/22 e.new10/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      // closed e.new15 as range 25
      // closed e.new16 as range 27
      // closed e.new10 as range 31
      if( ! refalrts::svar_right( context[33], context[29], context[30] ) )
        continue;
      // closed e.new13 as range 29
      do {
        // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.Pattern-L/43 (/49 # Hole/51 s.L/52 s.R/53 )/50 e.Pattern-R/45 )/8 (/11 e.Vars/36 )/12 (/21 s.Offset/23 # SETB/24 s.L/42 s.R/33 )/22 e.Commands/40 >/1
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[24] ) )
          continue;
        // closed e.Vars as range 36
        // closed e.Commands as range 40
        if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        context[43] = 0;
        context[44] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[45] = context[34];
          context[46] = context[35];
          context[47] = 0;
          context[48] = 0;
          context[49] = refalrts::brackets_left( context[47], context[48], context[45], context[46] );
          if( ! context[49] )
            continue;
          refalrts::bracket_pointers(context[49], context[50]);
          context[51] = refalrts::ident_left( identifiers[ident_Hole], context[47], context[48] );
          if( ! context[51] )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[52], context[42], context[47], context[48] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[53], context[33], context[47], context[48] ) )
            continue;
          if( ! refalrts::empty_seq( context[47], context[48] ) )
            continue;
          // closed e.Pattern-R as range 45
          //DEBUG: s.Offset: 23
          //DEBUG: s.R: 33
          //DEBUG: e.Vars: 36
          //DEBUG: e.Commands: 40
          //DEBUG: s.L: 42
          //DEBUG: e.Pattern-L: 43
          //DEBUG: e.Pattern-R: 45

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.L/52 s.R/53 {REMOVED TILE} {REMOVED TILE} s.Offset/23 # SETB/24 s.L/42 s.R/33 )/22 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@1/4 AsIs: (/7 AsIs: e.Pattern-L/43 HalfReuse: s.L52 /49 HalfReuse: )/51 } Tile{ AsIs: (/21 } Tile{ HalfReuse: s.R53 /50 AsIs: e.Pattern-R/45 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/36 AsIs: )/12 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z1]);
          refalrts::reinit_svar( context[49], context[52] );
          refalrts::reinit_close_bracket(context[51]);
          refalrts::reinit_svar( context[50], context[53] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[21], context[8] );
          refalrts::link_brackets( context[7], context[51] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[50], context[12] );
          res = refalrts::splice_elem( res, context[21] );
          refalrts::splice_to_freelist_open( vm, context[51], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[43], context[44], context[34], context[35] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.Pattern/34 )/8 (/11 e.Vars/36 )/12 (/21 s.Offset/23 # RDY/24 0/33 )/22 e.Commands/38 >/1
      context[34] = context[25];
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[31];
      context[39] = context[32];
      if( ! refalrts::ident_term( identifiers[ident_RDY], context[24] ) )
        continue;
      if( ! refalrts::number_term( 0UL, context[33] ) )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Pattern as range 34
      // closed e.Vars as range 36
      // closed e.Commands as range 38
      //DEBUG: s.Offset: 23
      //DEBUG: e.Pattern: 34
      //DEBUG: e.Vars: 36
      //DEBUG: e.Commands: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Pattern/4 HalfReuse: 0/7 AsIs: e.Pattern/34 AsIs: )/8 HalfReuse: </11 } Tile{ HalfReuse: & Decompile-Result@3/12 AsIs: (/21 } Tile{ AsIs: e.Vars/36 } )/40 Tile{ HalfReuse: '$'/24 HalfReuse: (/33 AsIs: )/22 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[12], functions[efunc_gen_Decompilem_Result_Z3]);
      refalrts::reinit_char(context[24], '$');
      refalrts::reinit_open_bracket(context[33]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::link_brackets( context[33], context[22] );
      refalrts::link_brackets( context[21], context[40] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[12], context[21] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.Pattern/25 )/8 (/11 e.Vars/27 )/12 (/21 s.Offset/23 # PUSHVF/24 )/22 e.Commands/29 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_PUSHVF], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e.Pattern as range 25
      // closed e.Vars as range 27
      // closed e.Commands as range 29
      //DEBUG: s.Offset: 23
      //DEBUG: e.Pattern: 25
      //DEBUG: e.Vars: 27
      //DEBUG: e.Commands: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Pattern/4 HalfReuse: 0/7 AsIs: e.Pattern/25 AsIs: )/8 AsIs: (/11 } # StartCondition/31 Tile{ AsIs: )/12 HalfReuse: </21 } & Decompile-Result@3/32 (/33 Tile{ AsIs: e.Vars/27 } )/34 '$'/35 Tile{ HalfReuse: (/24 AsIs: )/22 AsIs: e.Commands/29 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[31], identifiers[ident_StartCondition]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_Decompilem_Result_Z3]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_char(vm, context[35], '$');
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_open_call(context[21]);
      refalrts::reinit_open_bracket(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[24], context[22] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[12], context[21] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.new15/25 )/8 (/11 e.new16/27 )/12 (/21 s.new11/23 s.new12/24 s.new13/33 e.new14/29 )/22 e.new10/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      // closed e.new15 as range 25
      // closed e.new16 as range 27
      // closed e.new10 as range 31
      if( ! refalrts::svar_left( context[33], context[29], context[30] ) )
        continue;
      // closed e.new14 as range 29
      do {
        // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.Pattern/34 )/8 (/11 e.Vars/36 )/12 (/21 s.Offset/23 # TRAN/24 s.Jump/33 )/22 e.Commands-B/40 (/46 s.Jump/48 e.Command/44 )/47 e.Commands-E/42 >/1
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[31];
        context[39] = context[32];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[24] ) )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        // closed e.Pattern as range 34
        // closed e.Vars as range 36
        context[40] = 0;
        context[41] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[42] = context[38];
          context[43] = context[39];
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
          if( ! context[46] )
            continue;
          refalrts::bracket_pointers(context[46], context[47]);
          if( ! refalrts::repeated_stvar_left( vm, context[48], context[33], context[44], context[45] ) )
            continue;
          // closed e.Command as range 44
          // closed e.Commands-E as range 42
          //DEBUG: s.Offset: 23
          //DEBUG: s.Jump: 33
          //DEBUG: e.Pattern: 34
          //DEBUG: e.Vars: 36
          //DEBUG: e.Commands-B: 40
          //DEBUG: e.Command: 44
          //DEBUG: e.Commands-E: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE} s.Jump/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@3/4 AsIs: (/7 AsIs: e.Pattern/34 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/36 AsIs: )/12 } Tile{ AsIs: e.Commands-B/40 } Tile{ AsIs: (/21 } '@'/49 Tile{ Reuse: # Restore-NoHole/24 } 0/50 3/51 (/52 e.Pattern/34/53 Tile{ AsIs: )/22 } (/55 e.Vars/36/56 )/58 )/59 Tile{ AsIs: (/46 AsIs: s.Jump/48 AsIs: e.Command/44 AsIs: )/47 AsIs: e.Commands-E/42 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[49], '@');
          refalrts::alloc_number(vm, context[50], 0UL);
          refalrts::alloc_number(vm, context[51], 3UL);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::copy_evar(vm, context[53], context[54], context[34], context[35]);
          refalrts::alloc_open_bracket(vm, context[55]);
          refalrts::copy_evar(vm, context[56], context[57], context[36], context[37]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_close_bracket(vm, context[59]);
          refalrts::update_ident(context[24], identifiers[ident_Restorem_NoHole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[46], context[47] );
          refalrts::link_brackets( context[21], context[59] );
          refalrts::link_brackets( context[55], context[58] );
          refalrts::link_brackets( context[52], context[22] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[46];
          res = refalrts::splice_evar( res, context[55], context[59] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[50], context[52] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_elem( res, context[49] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[40], context[41], context[38], context[39] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.new24/34 )/8 (/11 e.new25/36 )/12 (/21 '@'/23 s.new18/24 s.new19/33 s.new20/50 e.new21/38 (/48 e.new22/46 )/49 (/44 e.new23/42 )/45 )/22 e.new17/40 >/1
      context[34] = context[25];
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      if( ! refalrts::char_term( '@', context[23] ) )
        continue;
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_right( context[42], context[43], context[38], context[39] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::brackets_right( context[46], context[47], context[38], context[39] );
      if( ! context[48] )
        continue;
      refalrts::bracket_pointers(context[48], context[49]);
      // closed e.new24 as range 34
      // closed e.new25 as range 36
      // closed e.new22 as range 46
      // closed e.new23 as range 42
      // closed e.new17 as range 40
      if( ! refalrts::svar_left( context[50], context[38], context[39] ) )
        continue;
      // closed e.new21 as range 38
      do {
        // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 '@'/23 # Restore-Hole/24 s.Level2/33 s.Top2/50 (/65 e.Pattern-L2/63 )/66 (/48 e.Pattern-R2/57 )/49 (/44 e.Vars2/59 )/45 )/22 e.Commands/61 >/1
        context[51] = context[34];
        context[52] = context[35];
        context[53] = context[36];
        context[54] = context[37];
        context[55] = context[38];
        context[56] = context[39];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[42];
        context[60] = context[43];
        context[61] = context[40];
        context[62] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[24] ) )
          continue;
        context[63] = 0;
        context[64] = 0;
        context[65] = refalrts::brackets_left( context[63], context[64], context[55], context[56] );
        if( ! context[65] )
          continue;
        refalrts::bracket_pointers(context[65], context[66]);
        if( ! refalrts::empty_seq( context[55], context[56] ) )
          continue;
        // closed e.Pattern1 as range 51
        // closed e.Vars1 as range 53
        // closed e.Pattern-L2 as range 63
        // closed e.Pattern-R2 as range 57
        // closed e.Vars2 as range 59
        // closed e.Commands as range 61
        //DEBUG: s.Level2: 33
        //DEBUG: s.Top2: 50
        //DEBUG: e.Pattern1: 51
        //DEBUG: e.Vars1: 53
        //DEBUG: e.Pattern-L2: 63
        //DEBUG: e.Pattern-R2: 57
        //DEBUG: e.Vars2: 59
        //DEBUG: e.Commands: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@3/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & Decompile-Pattern-Hole/24 AsIs: s.Level2/33 AsIs: s.Top2/50 AsIs: (/65 AsIs: e.Pattern-L2/63 AsIs: )/66 AsIs: (/48 AsIs: e.Pattern-R2/57 AsIs: )/49 AsIs: (/44 AsIs: e.Vars2/59 AsIs: )/45 } Tile{ AsIs: e.Commands/61 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[23]);
        refalrts::reinit_name(context[24], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::link_brackets( context[44], context[45] );
        refalrts::link_brackets( context[48], context[49] );
        refalrts::link_brackets( context[65], context[66] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[61], context[62] );
        res = refalrts::splice_evar( res, context[23], context[45] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 '@'/23 # Restore-NoHole/24 s.Level2/33 s.Top2/50 (/48 e.Pattern2/55 )/49 (/44 e.Vars2/57 )/45 )/22 e.Commands/59 >/1
      context[51] = context[34];
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[46];
      context[56] = context[47];
      context[57] = context[42];
      context[58] = context[43];
      context[59] = context[40];
      context[60] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.Pattern1 as range 51
      // closed e.Vars1 as range 53
      // closed e.Pattern2 as range 55
      // closed e.Vars2 as range 57
      // closed e.Commands as range 59
      //DEBUG: s.Level2: 33
      //DEBUG: s.Top2: 50
      //DEBUG: e.Pattern1: 51
      //DEBUG: e.Vars1: 53
      //DEBUG: e.Pattern2: 55
      //DEBUG: e.Vars2: 57
      //DEBUG: e.Commands: 59

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@3/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & Decompile-Pattern-NoHole/24 AsIs: s.Level2/33 AsIs: s.Top2/50 AsIs: (/48 AsIs: e.Pattern2/55 AsIs: )/49 AsIs: (/44 AsIs: e.Vars2/57 AsIs: )/45 } Tile{ AsIs: e.Commands/59 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[23]);
      refalrts::reinit_name(context[24], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[44], context[45] );
      refalrts::link_brackets( context[48], context[49] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[23], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.Pattern/25 )/8 (/11 e.Vars/27 )/12 (/21 s.Offset/23 # LABEL/24 e.BlockName/29 )/22 e.Commands/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[24] ) )
      continue;
    // closed e.Pattern as range 25
    // closed e.Vars as range 27
    // closed e.BlockName as range 29
    // closed e.Commands as range 31
    //DEBUG: s.Offset: 23
    //DEBUG: e.Pattern: 25
    //DEBUG: e.Vars: 27
    //DEBUG: e.BlockName: 29
    //DEBUG: e.Commands: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/21 s.Offset/23 # LABEL/24 e.BlockName/29 )/22 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@3/4 AsIs: (/7 AsIs: e.Pattern/25 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/27 AsIs: )/12 } Tile{ AsIs: e.Commands/31 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, context[12], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@3/4 (/7 )/8 (/11 )/12 >/1
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@3/4 (/7 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 HalfReuse: # EndOfFunction/12 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[12], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.Pattern/13 )/8 (/11 e.Vars/15 )/12 e.Commands/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Pattern as range 13
    // closed e.Vars as range 15
    // closed e.Commands as range 17
    //DEBUG: e.Pattern: 13
    //DEBUG: e.Vars: 15
    //DEBUG: e.Commands: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 }"=B "/19 Tile{ HalfReuse: 0/0 HalfReuse: 3/4 AsIs: (/7 AsIs: e.Pattern/13 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/15 AsIs: )/12 } )/21 Tile{ AsIs: e.Commands/17 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[19], context[20], "=B ", 3);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_number(context[4], 3UL);
    refalrts::link_brackets( context[1], context[21] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-NoHole@3/4 (/7 e.dyn0/5 )/8 (/11 e.dyn1/9 )/12 e.dyn2/2 >/1
  // closed e.dyn0 as range 5
  // closed e.dyn1 as range 9
  // closed e.dyn2 as range 2
  //DEBUG: e.dyn0: 5
  //DEBUG: e.dyn1: 9
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & Decompile-Pattern-NoHole@0/14 Tile{ HalfReuse: 0/0 HalfReuse: 3/4 AsIs: (/7 AsIs: e.dyn0/5 AsIs: )/8 AsIs: (/11 AsIs: e.dyn1/9 AsIs: )/12 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Decompilem_Patternm_NoHole_Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_NoHole_Z3("Decompile-Pattern-NoHole@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_NoHole_Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 87 elems
  refalrts::Iter context[87];
  refalrts::zeros( context, 87 );
  // </0 & Decompile-Pattern-Hole@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Pattern-Hole@3/4 s.new6/5 (/8 e.new11/18 )/9 (/12 e.new12/20 )/13 (/16 e.new13/22 )/17 (/28 s.new7/30 s.new8/31 e.new9/26 )/29 e.new10/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.new11 as range 18
    // closed e.new12 as range 20
    // closed e.new13 as range 22
    // closed e.new10 as range 24
    if( ! refalrts::svar_left( context[30], context[26], context[27] ) )
      continue;
    if( ! refalrts::svar_left( context[31], context[26], context[27] ) )
      continue;
    // closed e.new9 as range 26
    do {
      // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/32 s.L/42 )/9 (/12 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # CSYM/31 e.Word/38 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_CSYM], context[31] ) )
        continue;
      // closed e.Pattern-R as range 34
      // closed e.Vars as range 36
      // closed e.Word as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_right( context[42], context[32], context[33] ) )
        continue;
      // closed e.Pattern-L as range 32
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-R: 34
      //DEBUG: e.Vars: 36
      //DEBUG: e.Word: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.L: 42
      //DEBUG: e.Pattern-L: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 4/8 } (/43 Tile{ AsIs: e.Pattern-L/32 } Tile{ AsIs: (/28 } Tile{ Reuse: # W/31 AsIs: e.Word/38 AsIs: )/29 } 3/44 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/34 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/36 AsIs: )/17 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_number(vm, context[44], 3UL);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[8], 4UL);
      refalrts::update_ident(context[31], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[43], context[9] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[9], context[17] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[31], context[29] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/32 )/9 (/12 s.R/42 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # CSYMR/31 e.Word/38 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_CSYMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 32
      // closed e.Vars as range 36
      // closed e.Word as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[42], context[34], context[35] ) )
        continue;
      // closed e.Pattern-R as range 34
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 32
      //DEBUG: e.Vars: 36
      //DEBUG: e.Word: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.R: 42
      //DEBUG: e.Pattern-R: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 4/8 } (/43 Tile{ AsIs: e.Pattern-L/32 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ HalfReuse: 3/9 AsIs: (/12 } Tile{ Reuse: # W/31 } Tile{ AsIs: e.Word/38 } )/44 Tile{ AsIs: e.Pattern-R/34 } Tile{ AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Vars/36 } Tile{ AsIs: )/29 AsIs: e.Commands/40 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[8], 4UL);
      refalrts::reinit_number(context[9], 3UL);
      refalrts::update_ident(context[31], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[44] );
      refalrts::link_brackets( context[43], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[17], context[28] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[9], context[12] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/32 s.L/43 )/9 (/12 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # NSYM/31 s.Number/42 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_NSYM], context[31] ) )
        continue;
      // closed e.Pattern-R as range 34
      // closed e.Vars as range 36
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
        continue;
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      if( ! refalrts::svar_right( context[43], context[32], context[33] ) )
        continue;
      // closed e.Pattern-L as range 32
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-R: 34
      //DEBUG: e.Vars: 36
      //DEBUG: e.Commands: 40
      //DEBUG: s.Number: 42
      //DEBUG: s.L: 43
      //DEBUG: e.Pattern-L: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/43 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 4/8 } (/44 Tile{ AsIs: e.Pattern-L/32 } Tile{ AsIs: (/28 } Tile{ Reuse: # N/31 AsIs: s.Number/42 AsIs: )/29 } 3/45 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/34 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/36 AsIs: )/17 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::alloc_number(vm, context[45], 3UL);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[8], 4UL);
      refalrts::update_ident(context[31], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[44], context[9] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[9], context[17] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[31], context[29] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[44] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/32 )/9 (/12 s.R/42 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # NSYMR/31 e.Number/38 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_NSYMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 32
      // closed e.Vars as range 36
      // closed e.Number as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[42], context[34], context[35] ) )
        continue;
      // closed e.Pattern-R as range 34
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 32
      //DEBUG: e.Vars: 36
      //DEBUG: e.Number: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.R: 42
      //DEBUG: e.Pattern-R: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 4/8 } (/43 Tile{ AsIs: e.Pattern-L/32 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ HalfReuse: 3/9 AsIs: (/12 } Tile{ Reuse: # N/31 } Tile{ AsIs: e.Number/38 } )/44 Tile{ AsIs: e.Pattern-R/34 } Tile{ AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Vars/36 } Tile{ AsIs: )/29 AsIs: e.Commands/40 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[8], 4UL);
      refalrts::reinit_number(context[9], 3UL);
      refalrts::update_ident(context[31], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[44] );
      refalrts::link_brackets( context[43], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[17], context[28] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[9], context[12] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@3/4 s.new14/5 (/8 e.new20/32 )/9 (/12 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 s.new18/42 e.new19/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new20 as range 32
      // closed e.new21 as range 34
      // closed e.new22 as range 36
      // closed e.new15 as range 40
      if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
        continue;
      // closed e.new19 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.new23/5 (/8 e.new29/43 )/9 (/12 e.new30/45 )/13 (/16 e.new31/47 )/17 (/28 s.new25/30 s.new26/31 s.new27/42 s.new28/53 )/29 e.new24/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        // closed e.new29 as range 43
        // closed e.new30 as range 45
        // closed e.new31 as range 47
        // closed e.new24 as range 51
        if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        do {
          // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/54 s.L/62 )/9 (/12 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # SYM/31 s.Code/42 s.Char/53 )/29 e.Commands/60 >/1
          context[54] = context[43];
          context[55] = context[44];
          context[56] = context[45];
          context[57] = context[46];
          context[58] = context[47];
          context[59] = context[48];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::ident_term( identifiers[ident_SYM], context[31] ) )
            continue;
          // closed e.Pattern-R as range 56
          // closed e.Vars as range 58
          // closed e.Commands as range 60
          if( ! refalrts::svar_right( context[62], context[54], context[55] ) )
            continue;
          // closed e.Pattern-L as range 54
          //DEBUG: s.X: 5
          //DEBUG: s.Offset: 30
          //DEBUG: s.Code: 42
          //DEBUG: s.Char: 53
          //DEBUG: e.Pattern-R: 56
          //DEBUG: e.Vars: 58
          //DEBUG: e.Commands: 60
          //DEBUG: s.L: 62
          //DEBUG: e.Pattern-L: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/62 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.Code/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 4/8 } (/63 Tile{ AsIs: e.Pattern-L/54 } Tile{ AsIs: (/28 } Tile{ Reuse: # C/31 } Tile{ AsIs: s.Char/53 AsIs: )/29 } 3/64 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/56 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/58 AsIs: )/17 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[63]);
          refalrts::alloc_number(vm, context[64], 3UL);
          refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::reinit_number(context[8], 4UL);
          refalrts::update_ident(context[31], identifiers[ident_C]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[63], context[9] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[60], context[61] );
          res = refalrts::splice_evar( res, context[9], context[17] );
          res = refalrts::splice_elem( res, context[64] );
          res = refalrts::splice_evar( res, context[53], context[29] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_elem( res, context[63] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/54 )/9 (/12 s.R/62 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # SYMR/31 s.Code/42 s.Char/53 )/29 e.Commands/60 >/1
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[51];
        context[61] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_SYMR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 54
        // closed e.Vars as range 58
        // closed e.Commands as range 60
        if( ! refalrts::svar_left( context[62], context[56], context[57] ) )
          continue;
        // closed e.Pattern-R as range 56
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: s.Code: 42
        //DEBUG: s.Char: 53
        //DEBUG: e.Pattern-L: 54
        //DEBUG: e.Vars: 58
        //DEBUG: e.Commands: 60
        //DEBUG: s.R: 62
        //DEBUG: e.Pattern-R: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.Code/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 4/8 } (/63 Tile{ AsIs: e.Pattern-L/54 } Tile{ AsIs: )/17 AsIs: (/28 } Tile{ HalfReuse: 3/9 AsIs: (/12 } Tile{ Reuse: # C/31 } Tile{ AsIs: s.Char/53 } )/64 Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Vars/58 } Tile{ AsIs: )/29 AsIs: e.Commands/60 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_close_bracket(vm, context[64]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_number(context[8], 4UL);
        refalrts::reinit_number(context[9], 3UL);
        refalrts::update_ident(context[31], identifiers[ident_C]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[28], context[13] );
        refalrts::link_brackets( context[12], context[64] );
        refalrts::link_brackets( context[63], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[29];
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[13], context[16] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_elem( res, context[64] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[9], context[12] );
        res = refalrts::splice_evar( res, context[17], context[28] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_elem( res, context[63] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/43 s.L/53 )/9 (/12 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # SYMS/31 s.Len/42 e.Chars/49 )/29 e.Commands/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_SYMS], context[31] ) )
          continue;
        // closed e.Pattern-R as range 45
        // closed e.Vars as range 47
        // closed e.Chars as range 49
        // closed e.Commands as range 51
        if( ! refalrts::svar_right( context[53], context[43], context[44] ) )
          continue;
        // closed e.Pattern-L as range 43
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: s.Len: 42
        //DEBUG: e.Pattern-R: 45
        //DEBUG: e.Vars: 47
        //DEBUG: e.Chars: 49
        //DEBUG: e.Commands: 51
        //DEBUG: s.L: 53
        //DEBUG: e.Pattern-L: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$7=1/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/43 } )/54 (/55 Tile{ AsIs: e.Chars/49 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/45 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } </56 Tile{ HalfReuse: & Add/31 AsIs: s.Len/42 } 3/57 >/58 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[54]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_number(vm, context[57], 3UL);
        refalrts::alloc_close_call(vm, context[58]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S7A1]);
        refalrts::reinit_name(context[31], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[58] );
        refalrts::push_stack( vm, context[56] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[55], context[9] );
        refalrts::link_brackets( context[8], context[54] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[31], context[42] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/43 )/9 (/12 s.R/53 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # SYMSR/31 s.Len/42 e.Chars/49 )/29 e.Commands/51 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_SYMSR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 43
      // closed e.Vars as range 47
      // closed e.Chars as range 49
      // closed e.Commands as range 51
      if( ! refalrts::svar_left( context[53], context[45], context[46] ) )
        continue;
      // closed e.Pattern-R as range 45
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: s.Len: 42
      //DEBUG: e.Pattern-L: 43
      //DEBUG: e.Vars: 47
      //DEBUG: e.Chars: 49
      //DEBUG: e.Commands: 51
      //DEBUG: s.R: 53
      //DEBUG: e.Pattern-R: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.R/53 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$8=1/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/43 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Chars/49 } )/54 (/55 Tile{ AsIs: e.Pattern-R/45 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } </56 Tile{ HalfReuse: & Add/31 AsIs: s.Len/42 } 3/57 >/58 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_number(vm, context[57], 3UL);
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S8A1]);
      refalrts::reinit_name(context[31], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[56] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[55], context[13] );
      refalrts::link_brackets( context[12], context[54] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[31], context[42] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[13], context[28] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      refalrts::splice_to_freelist_open( vm, context[12], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@3/4 s.new14/5 (/8 e.new18/32 )/9 (/12 e.new19/34 )/13 (/16 e.new20/36 )/17 (/28 s.new16/30 s.new17/31 )/29 e.new15/38 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.new18 as range 32
      // closed e.new19 as range 34
      // closed e.new20 as range 36
      // closed e.new15 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/40 s.L/48 )/9 (/12 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # VSYM/31 )/29 e.Commands/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        if( ! refalrts::ident_term( identifiers[ident_VSYM], context[31] ) )
          continue;
        // closed e.Pattern-R as range 42
        // closed e.Vars as range 44
        // closed e.Commands as range 46
        if( ! refalrts::svar_right( context[48], context[40], context[41] ) )
          continue;
        // closed e.Pattern-L as range 40
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-R: 42
        //DEBUG: e.Vars: 44
        //DEBUG: e.Commands: 46
        //DEBUG: s.L: 48
        //DEBUG: e.Pattern-L: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/48 {REMOVED TILE} s.Offset/30 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 4/8 } (/49 Tile{ AsIs: e.Pattern-L/40 } (/50 # s/51 3/52 '='/53 3/54 )/55 3/56 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/42 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 HalfReuse: (/17 HalfReuse: # s/28 } 3/57 '='/58 3/59 Tile{ HalfReuse: )/31 AsIs: )/29 AsIs: e.Commands/46 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_ident(vm, context[51], identifiers[ident_s]);
        refalrts::alloc_number(vm, context[52], 3UL);
        refalrts::alloc_char(vm, context[53], '=');
        refalrts::alloc_number(vm, context[54], 3UL);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_number(vm, context[56], 3UL);
        refalrts::alloc_number(vm, context[57], 3UL);
        refalrts::alloc_char(vm, context[58], '=');
        refalrts::alloc_number(vm, context[59], 3UL);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_number(context[8], 4UL);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[31] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[49], context[9] );
        refalrts::link_brackets( context[50], context[55] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[57], context[59] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[50], context[56] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[49] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/40 )/9 (/12 s.R/48 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # VSYMR/31 )/29 e.Commands/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        if( ! refalrts::ident_term( identifiers[ident_VSYMR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 40
        // closed e.Vars as range 44
        // closed e.Commands as range 46
        if( ! refalrts::svar_left( context[48], context[42], context[43] ) )
          continue;
        // closed e.Pattern-R as range 42
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 40
        //DEBUG: e.Vars: 44
        //DEBUG: e.Commands: 46
        //DEBUG: s.R: 48
        //DEBUG: e.Pattern-R: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/48 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 } 4/49 Tile{ AsIs: (/8 AsIs: e.Pattern-L/40 AsIs: )/9 AsIs: (/12 } 3/50 (/51 # s/52 3/53 '='/54 3/55 )/56 Tile{ AsIs: e.Pattern-R/42 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 HalfReuse: (/17 HalfReuse: # s/28 } 3/57 '='/58 3/59 Tile{ HalfReuse: )/31 AsIs: )/29 AsIs: e.Commands/46 AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[49], 4UL);
        refalrts::alloc_number(vm, context[50], 3UL);
        refalrts::alloc_open_bracket(vm, context[51]);
        refalrts::alloc_ident(vm, context[52], identifiers[ident_s]);
        refalrts::alloc_number(vm, context[53], 3UL);
        refalrts::alloc_char(vm, context[54], '=');
        refalrts::alloc_number(vm, context[55], 3UL);
        refalrts::alloc_close_bracket(vm, context[56]);
        refalrts::alloc_number(vm, context[57], 3UL);
        refalrts::alloc_char(vm, context[58], '=');
        refalrts::alloc_number(vm, context[59], 3UL);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[31] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[51], context[56] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[57], context[59] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[50], context[56] );
        res = refalrts::splice_evar( res, context[8], context[12] );
        res = refalrts::splice_elem( res, context[49] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/40 s.L/48 )/9 (/12 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # TERM/31 )/29 e.Commands/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        if( ! refalrts::ident_term( identifiers[ident_TERM], context[31] ) )
          continue;
        // closed e.Pattern-R as range 42
        // closed e.Vars as range 44
        // closed e.Commands as range 46
        if( ! refalrts::svar_right( context[48], context[40], context[41] ) )
          continue;
        // closed e.Pattern-L as range 40
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-R: 42
        //DEBUG: e.Vars: 44
        //DEBUG: e.Commands: 46
        //DEBUG: s.L: 48
        //DEBUG: e.Pattern-L: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/48 {REMOVED TILE} s.Offset/30 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 5/8 } (/49 Tile{ AsIs: e.Pattern-L/40 } (/50 # t/51 3/52 4/53 '='/54 3/55 4/56 )/57 4/58 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/42 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 HalfReuse: (/17 HalfReuse: # t/28 } 3/59 4/60 '='/61 3/62 4/63 Tile{ HalfReuse: )/31 AsIs: )/29 AsIs: e.Commands/46 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_ident(vm, context[51], identifiers[ident_t]);
        refalrts::alloc_number(vm, context[52], 3UL);
        refalrts::alloc_number(vm, context[53], 4UL);
        refalrts::alloc_char(vm, context[54], '=');
        refalrts::alloc_number(vm, context[55], 3UL);
        refalrts::alloc_number(vm, context[56], 4UL);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::alloc_number(vm, context[58], 4UL);
        refalrts::alloc_number(vm, context[59], 3UL);
        refalrts::alloc_number(vm, context[60], 4UL);
        refalrts::alloc_char(vm, context[61], '=');
        refalrts::alloc_number(vm, context[62], 3UL);
        refalrts::alloc_number(vm, context[63], 4UL);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_number(context[8], 5UL);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_t]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[31] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[49], context[9] );
        refalrts::link_brackets( context[50], context[57] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[59], context[63] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[50], context[58] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[49] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/40 )/9 (/12 s.R/48 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # TERMR/31 )/29 e.Commands/46 >/1
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      if( ! refalrts::ident_term( identifiers[ident_TERMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 40
      // closed e.Vars as range 44
      // closed e.Commands as range 46
      if( ! refalrts::svar_left( context[48], context[42], context[43] ) )
        continue;
      // closed e.Pattern-R as range 42
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 40
      //DEBUG: e.Vars: 44
      //DEBUG: e.Commands: 46
      //DEBUG: s.R: 48
      //DEBUG: e.Pattern-R: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/48 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 } 5/49 Tile{ AsIs: (/8 AsIs: e.Pattern-L/40 AsIs: )/9 AsIs: (/12 } 3/50 (/51 # t/52 3/53 4/54 '='/55 3/56 4/57 )/58 Tile{ AsIs: e.Pattern-R/42 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 HalfReuse: (/17 HalfReuse: # t/28 } 3/59 4/60 '='/61 3/62 4/63 Tile{ HalfReuse: )/31 AsIs: )/29 AsIs: e.Commands/46 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[49], 5UL);
      refalrts::alloc_number(vm, context[50], 3UL);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_ident(vm, context[52], identifiers[ident_t]);
      refalrts::alloc_number(vm, context[53], 3UL);
      refalrts::alloc_number(vm, context[54], 4UL);
      refalrts::alloc_char(vm, context[55], '=');
      refalrts::alloc_number(vm, context[56], 3UL);
      refalrts::alloc_number(vm, context[57], 4UL);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_number(vm, context[59], 3UL);
      refalrts::alloc_number(vm, context[60], 4UL);
      refalrts::alloc_char(vm, context[61], '=');
      refalrts::alloc_number(vm, context[62], 3UL);
      refalrts::alloc_number(vm, context[63], 4UL);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_ident(context[28], identifiers[ident_t]);
      refalrts::reinit_close_bracket(context[31]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[29] );
      refalrts::link_brackets( context[17], context[31] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[51], context[58] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[59], context[63] );
      res = refalrts::splice_evar( res, context[13], context[28] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[50], context[58] );
      res = refalrts::splice_evar( res, context[8], context[12] );
      res = refalrts::splice_elem( res, context[49] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@3/4 s.new14/5 (/8 e.new20/32 )/9 (/12 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 s.new18/42 e.new19/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new20 as range 32
      // closed e.new21 as range 34
      // closed e.new22 as range 36
      // closed e.new15 as range 40
      if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
        continue;
      // closed e.new19 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/43 )/9 (/12 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # TRAN/31 s.Jump/42 )/29 e.Commands-B/51 (/57 s.Jump/59 e.Command/55 )/58 e.Commands-E/53 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[40];
        context[50] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[31] ) )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.Pattern-L as range 43
        // closed e.Pattern-R as range 45
        // closed e.Vars as range 47
        context[51] = 0;
        context[52] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[53] = context[49];
          context[54] = context[50];
          context[55] = 0;
          context[56] = 0;
          context[57] = refalrts::brackets_left( context[55], context[56], context[53], context[54] );
          if( ! context[57] )
            continue;
          refalrts::bracket_pointers(context[57], context[58]);
          if( ! refalrts::repeated_stvar_left( vm, context[59], context[42], context[55], context[56] ) )
            continue;
          // closed e.Command as range 55
          // closed e.Commands-E as range 53
          //DEBUG: s.X: 5
          //DEBUG: s.Offset: 30
          //DEBUG: s.Jump: 42
          //DEBUG: e.Pattern-L: 43
          //DEBUG: e.Pattern-R: 45
          //DEBUG: e.Vars: 47
          //DEBUG: e.Commands-B: 51
          //DEBUG: e.Command: 55
          //DEBUG: e.Commands-E: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.Jump/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole@3/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/43 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/45 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 } Tile{ AsIs: e.Commands-B/51 } Tile{ AsIs: (/28 } '@'/60 Tile{ Reuse: # Restore-Hole/31 } s.X/5/61 3/62 (/63 e.Pattern-L/43/64 Tile{ AsIs: )/29 } (/66 e.Pattern-R/45/67 )/69 (/70 e.Vars/47/71 )/73 )/74 Tile{ AsIs: (/57 AsIs: s.Jump/59 AsIs: e.Command/55 AsIs: )/58 AsIs: e.Commands-E/53 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[60], '@');
          refalrts::copy_stvar(vm, context[61], context[5]);
          refalrts::alloc_number(vm, context[62], 3UL);
          refalrts::alloc_open_bracket(vm, context[63]);
          refalrts::copy_evar(vm, context[64], context[65], context[43], context[44]);
          refalrts::alloc_open_bracket(vm, context[66]);
          refalrts::copy_evar(vm, context[67], context[68], context[45], context[46]);
          refalrts::alloc_close_bracket(vm, context[69]);
          refalrts::alloc_open_bracket(vm, context[70]);
          refalrts::copy_evar(vm, context[71], context[72], context[47], context[48]);
          refalrts::alloc_close_bracket(vm, context[73]);
          refalrts::alloc_close_bracket(vm, context[74]);
          refalrts::update_ident(context[31], identifiers[ident_Restorem_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[57], context[58] );
          refalrts::link_brackets( context[28], context[74] );
          refalrts::link_brackets( context[70], context[73] );
          refalrts::link_brackets( context[66], context[69] );
          refalrts::link_brackets( context[63], context[29] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[57];
          res = refalrts::splice_evar( res, context[66], context[74] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_evar( res, context[61], context[63] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[60] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          refalrts::splice_to_freelist_open( vm, context[17], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[51], context[52], context[49], context[50] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.new23/5 (/8 e.new31/43 )/9 (/12 e.new32/45 )/13 (/16 e.new33/47 )/17 (/28 '@'/30 s.new25/31 s.new26/42 s.new27/61 e.new28/49 (/59 e.new29/57 )/60 (/55 e.new30/53 )/56 )/29 e.new24/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        if( ! refalrts::char_term( '@', context[30] ) )
          continue;
        context[53] = 0;
        context[54] = 0;
        context[55] = refalrts::brackets_right( context[53], context[54], context[49], context[50] );
        if( ! context[55] )
          continue;
        refalrts::bracket_pointers(context[55], context[56]);
        context[57] = 0;
        context[58] = 0;
        context[59] = refalrts::brackets_right( context[57], context[58], context[49], context[50] );
        if( ! context[59] )
          continue;
        refalrts::bracket_pointers(context[59], context[60]);
        // closed e.new31 as range 43
        // closed e.new32 as range 45
        // closed e.new33 as range 47
        // closed e.new29 as range 57
        // closed e.new30 as range 53
        // closed e.new24 as range 51
        if( ! refalrts::svar_left( context[61], context[49], context[50] ) )
          continue;
        // closed e.new28 as range 49
        do {
          // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 '@'/30 # Restore-Hole/31 s.Level2/42 s.Top2/61 (/78 e.Pattern-L2/76 )/79 (/59 e.Pattern-R2/70 )/60 (/55 e.Vars2/72 )/56 )/29 e.Commands/74 >/1
          context[62] = context[43];
          context[63] = context[44];
          context[64] = context[45];
          context[65] = context[46];
          context[66] = context[47];
          context[67] = context[48];
          context[68] = context[49];
          context[69] = context[50];
          context[70] = context[57];
          context[71] = context[58];
          context[72] = context[53];
          context[73] = context[54];
          context[74] = context[51];
          context[75] = context[52];
          if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[31] ) )
            continue;
          context[76] = 0;
          context[77] = 0;
          context[78] = refalrts::brackets_left( context[76], context[77], context[68], context[69] );
          if( ! context[78] )
            continue;
          refalrts::bracket_pointers(context[78], context[79]);
          if( ! refalrts::empty_seq( context[68], context[69] ) )
            continue;
          // closed e.Pattern-L1 as range 62
          // closed e.Pattern-R1 as range 64
          // closed e.Vars1 as range 66
          // closed e.Pattern-L2 as range 76
          // closed e.Pattern-R2 as range 70
          // closed e.Vars2 as range 72
          // closed e.Commands as range 74
          //DEBUG: s.X: 5
          //DEBUG: s.Level2: 42
          //DEBUG: s.Top2: 61
          //DEBUG: e.Pattern-L1: 62
          //DEBUG: e.Pattern-R1: 64
          //DEBUG: e.Vars1: 66
          //DEBUG: e.Pattern-L2: 76
          //DEBUG: e.Pattern-R2: 70
          //DEBUG: e.Vars2: 72
          //DEBUG: e.Commands: 74

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </30 HalfReuse: & Decompile-Pattern-Hole/31 AsIs: s.Level2/42 AsIs: s.Top2/61 AsIs: (/78 AsIs: e.Pattern-L2/76 AsIs: )/79 AsIs: (/59 AsIs: e.Pattern-R2/70 AsIs: )/60 AsIs: (/55 AsIs: e.Vars2/72 AsIs: )/56 } Tile{ AsIs: e.Commands/74 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_call(context[30]);
          refalrts::reinit_name(context[31], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::link_brackets( context[55], context[56] );
          refalrts::link_brackets( context[59], context[60] );
          refalrts::link_brackets( context[78], context[79] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[74], context[75] );
          res = refalrts::splice_evar( res, context[30], context[56] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 '@'/30 # Restore-NoHole/31 s.Level2/42 s.Top2/61 (/59 e.Pattern2/68 )/60 (/55 e.Vars2/70 )/56 )/29 e.Commands/72 >/1
        context[62] = context[43];
        context[63] = context[44];
        context[64] = context[45];
        context[65] = context[46];
        context[66] = context[47];
        context[67] = context[48];
        context[68] = context[57];
        context[69] = context[58];
        context[70] = context[53];
        context[71] = context[54];
        context[72] = context[51];
        context[73] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[31] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        // closed e.Pattern-L1 as range 62
        // closed e.Pattern-R1 as range 64
        // closed e.Vars1 as range 66
        // closed e.Pattern2 as range 68
        // closed e.Vars2 as range 70
        // closed e.Commands as range 72
        //DEBUG: s.X: 5
        //DEBUG: s.Level2: 42
        //DEBUG: s.Top2: 61
        //DEBUG: e.Pattern-L1: 62
        //DEBUG: e.Pattern-R1: 64
        //DEBUG: e.Vars1: 66
        //DEBUG: e.Pattern2: 68
        //DEBUG: e.Vars2: 70
        //DEBUG: e.Commands: 72

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </30 HalfReuse: & Decompile-Pattern-NoHole/31 AsIs: s.Level2/42 AsIs: s.Top2/61 AsIs: (/59 AsIs: e.Pattern2/68 AsIs: )/60 AsIs: (/55 AsIs: e.Vars2/70 AsIs: )/56 } Tile{ AsIs: e.Commands/72 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[30]);
        refalrts::reinit_name(context[31], functions[efunc_Decompilem_Patternm_NoHole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[55], context[56] );
        refalrts::link_brackets( context[59], context[60] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_evar( res, context[30], context[56] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@3/4 s.new23/5 (/8 e.new28/43 )/9 (/12 e.new29/45 )/13 (/16 e.new30/47 )/17 (/28 s.new25/30 s.new26/31 s.new27/42 )/29 e.new24/49 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[40];
      context[50] = context[41];
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.new28 as range 43
      // closed e.new29 as range 45
      // closed e.new30 as range 47
      // closed e.new24 as range 49
      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/51 s.L/59 )/9 (/12 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # OVSYM/31 s.VarNo/42 )/29 e.Commands/57 >/1
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        if( ! refalrts::ident_term( identifiers[ident_OVSYM], context[31] ) )
          continue;
        // closed e.Pattern-R as range 53
        // closed e.Vars as range 55
        // closed e.Commands as range 57
        if( ! refalrts::svar_right( context[59], context[51], context[52] ) )
          continue;
        // closed e.Pattern-L as range 51
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 30
        //DEBUG: s.VarNo: 42
        //DEBUG: e.Pattern-R: 53
        //DEBUG: e.Vars: 55
        //DEBUG: e.Commands: 57
        //DEBUG: s.L: 59
        //DEBUG: e.Pattern-L: 51

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/59 {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 4/8 } (/60 Tile{ AsIs: e.Pattern-L/51 } (/61 Tile{ Reuse: # s/31 AsIs: s.VarNo/42 } '='/62 3/63 )/64 3/65 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/53 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/55 HalfReuse: (/17 HalfReuse: # s/28 } s.VarNo/42/66 '='/67 3/68 )/69 Tile{ AsIs: )/29 AsIs: e.Commands/57 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::alloc_open_bracket(vm, context[61]);
        refalrts::alloc_char(vm, context[62], '=');
        refalrts::alloc_number(vm, context[63], 3UL);
        refalrts::alloc_close_bracket(vm, context[64]);
        refalrts::alloc_number(vm, context[65], 3UL);
        refalrts::copy_stvar(vm, context[66], context[42]);
        refalrts::alloc_char(vm, context[67], '=');
        refalrts::alloc_number(vm, context[68], 3UL);
        refalrts::alloc_close_bracket(vm, context[69]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_number(context[8], 4UL);
        refalrts::update_ident(context[31], identifiers[ident_s]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_s]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[69] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[60], context[9] );
        refalrts::link_brackets( context[61], context[64] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[29];
        res = refalrts::splice_evar( res, context[66], context[69] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[62], context[65] );
        res = refalrts::splice_evar( res, context[31], context[42] );
        res = refalrts::splice_elem( res, context[61] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_elem( res, context[60] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/51 )/9 (/12 s.R/59 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # OVSYMR/31 s.VarNo/42 )/29 e.Commands/57 >/1
      context[51] = context[43];
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      context[58] = context[50];
      if( ! refalrts::ident_term( identifiers[ident_OVSYMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 51
      // closed e.Vars as range 55
      // closed e.Commands as range 57
      if( ! refalrts::svar_left( context[59], context[53], context[54] ) )
        continue;
      // closed e.Pattern-R as range 53
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: s.VarNo: 42
      //DEBUG: e.Pattern-L: 51
      //DEBUG: e.Vars: 55
      //DEBUG: e.Commands: 57
      //DEBUG: s.R: 59
      //DEBUG: e.Pattern-R: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/59 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 4/8 } (/60 Tile{ AsIs: e.Pattern-L/51 } Tile{ AsIs: )/9 AsIs: (/12 } 3/61 (/62 Tile{ Reuse: # s/31 AsIs: s.VarNo/42 } '='/63 3/64 )/65 Tile{ AsIs: e.Pattern-R/53 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/55 HalfReuse: (/17 HalfReuse: # s/28 } s.VarNo/42/66 '='/67 3/68 )/69 Tile{ AsIs: )/29 AsIs: e.Commands/57 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[60]);
      refalrts::alloc_number(vm, context[61], 3UL);
      refalrts::alloc_open_bracket(vm, context[62]);
      refalrts::alloc_char(vm, context[63], '=');
      refalrts::alloc_number(vm, context[64], 3UL);
      refalrts::alloc_close_bracket(vm, context[65]);
      refalrts::copy_stvar(vm, context[66], context[42]);
      refalrts::alloc_char(vm, context[67], '=');
      refalrts::alloc_number(vm, context[68], 3UL);
      refalrts::alloc_close_bracket(vm, context[69]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[8], 4UL);
      refalrts::update_ident(context[31], identifiers[ident_s]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_ident(context[28], identifiers[ident_s]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[29] );
      refalrts::link_brackets( context[17], context[69] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[62], context[65] );
      refalrts::link_brackets( context[60], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[66], context[69] );
      res = refalrts::splice_evar( res, context[13], context[28] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[63], context[65] );
      res = refalrts::splice_evar( res, context[31], context[42] );
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[9], context[12] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[60] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@3/4 s.new14/5 (/8 e.new19/32 s.new20/42 )/9 (/12 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 e.new18/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new21 as range 34
      // closed e.new22 as range 36
      // closed e.new18 as range 38
      // closed e.new15 as range 40
      if( ! refalrts::svar_right( context[42], context[32], context[33] ) )
        continue;
      // closed e.new19 as range 32
      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/43 s.L/42 )/9 (/12 s.R/51 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # CL/31 )/29 e.Commands/49 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[40];
        context[50] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_CL], context[31] ) )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.Pattern-L as range 43
        // closed e.Vars as range 47
        // closed e.Commands as range 49
        if( ! refalrts::svar_left( context[51], context[45], context[46] ) )
          continue;
        // closed e.Pattern-R as range 45
        //DEBUG: s.X: 5
        //DEBUG: s.L: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 43
        //DEBUG: e.Vars: 47
        //DEBUG: e.Commands: 49
        //DEBUG: s.R: 51
        //DEBUG: e.Pattern-R: 45

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} {REMOVED TILE} s.R/51 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@5/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/43 } Tile{ AsIs: (/12 } # e/52 3/53 4/54 '='/55 3/56 4/57 Tile{ AsIs: )/9 } Tile{ AsIs: e.Pattern-R/45 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 HalfReuse: (/17 HalfReuse: # e/28 } 3/58 4/59 '='/60 3/61 4/62 Tile{ HalfReuse: )/31 AsIs: )/29 AsIs: e.Commands/49 AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[52], identifiers[ident_e]);
        refalrts::alloc_number(vm, context[53], 3UL);
        refalrts::alloc_number(vm, context[54], 4UL);
        refalrts::alloc_char(vm, context[55], '=');
        refalrts::alloc_number(vm, context[56], 3UL);
        refalrts::alloc_number(vm, context[57], 4UL);
        refalrts::alloc_number(vm, context[58], 3UL);
        refalrts::alloc_number(vm, context[59], 4UL);
        refalrts::alloc_char(vm, context[60], '=');
        refalrts::alloc_number(vm, context[61], 3UL);
        refalrts::alloc_number(vm, context[62], 4UL);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z5]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_e]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[31] );
        refalrts::link_brackets( context[8], context[13] );
        refalrts::link_brackets( context[12], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[58], context[62] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[52], context[57] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/43 s.L/42 )/9 (/12 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # OEXP/31 s.IdR/53 )/29 e.Commands/51 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_OEXP], context[31] ) )
        continue;
      // closed e.Pattern-L as range 43
      // closed e.Pattern-R as range 45
      // closed e.Vars as range 47
      // closed e.Commands as range 51
      if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
        continue;
      if( ! refalrts::empty_seq( context[49], context[50] ) )
        continue;
      //DEBUG: s.X: 5
      //DEBUG: s.L: 42
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 43
      //DEBUG: e.Pattern-R: 45
      //DEBUG: e.Vars: 47
      //DEBUG: e.Commands: 51
      //DEBUG: s.IdR: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} s.Offset/30 # OEXP/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=1@3/4 } Tile{ AsIs: s.IdR/53 } Tile{ AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/43 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/45 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } e.Vars/47/54 Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[54], context[55], context[47], context[48]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[9], context[28] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[5], context[8] );
      res = refalrts::splice_elem( res, context[53] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@3/4 s.new14/5 (/8 e.new19/32 )/9 (/12 s.new20/42 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 e.new18/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new19 as range 32
      // closed e.new22 as range 36
      // closed e.new18 as range 38
      // closed e.new15 as range 40
      if( ! refalrts::svar_left( context[42], context[34], context[35] ) )
        continue;
      // closed e.new21 as range 34
      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/43 )/9 (/12 s.R/42 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # OEXPR/31 s.IdR/53 )/29 e.Commands/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_OEXPR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 43
        // closed e.Pattern-R as range 45
        // closed e.Vars as range 47
        // closed e.Commands as range 51
        if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        //DEBUG: s.X: 5
        //DEBUG: s.R: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 43
        //DEBUG: e.Pattern-R: 45
        //DEBUG: e.Vars: 47
        //DEBUG: e.Commands: 51
        //DEBUG: s.IdR: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.IdR/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 } Tile{ HalfReuse: & Decompile-Pattern-Hole$20=1@3/0 HalfReuse: s.IdR53 /4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/43 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-R/45 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } e.Vars/47/54 Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[54], context[55], context[47], context[48]);
        refalrts::reinit_open_call(context[31]);
        refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1Z3]);
        refalrts::reinit_svar( context[4], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[0], context[12] );
        res = refalrts::splice_elem( res, context[31] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.new23/5 (/8 e.new27/43 )/9 (/12 s.new28/42 e.new29/45 )/13 (/16 e.new30/47 )/17 (/28 s.new25/30 s.new26/31 )/29 e.new24/49 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[40];
        context[50] = context[41];
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.new27 as range 43
        // closed e.new29 as range 45
        // closed e.new30 as range 47
        // closed e.new24 as range 49
        do {
          // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/51 s.L/59 )/9 (/12 s.R/42 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # PS/31 )/29 e.Commands/57 >/1
          context[51] = context[43];
          context[52] = context[44];
          context[53] = context[45];
          context[54] = context[46];
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[49];
          context[58] = context[50];
          if( ! refalrts::ident_term( identifiers[ident_PS], context[31] ) )
            continue;
          // closed e.Pattern-R as range 53
          // closed e.Vars as range 55
          // closed e.Commands as range 57
          if( ! refalrts::svar_right( context[59], context[51], context[52] ) )
            continue;
          // closed e.Pattern-L as range 51
          //DEBUG: s.X: 5
          //DEBUG: s.R: 42
          //DEBUG: s.Offset: 30
          //DEBUG: e.Pattern-R: 53
          //DEBUG: e.Vars: 55
          //DEBUG: e.Commands: 57
          //DEBUG: s.L: 59
          //DEBUG: e.Pattern-L: 51

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/59 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 5/8 } (/60 Tile{ AsIs: e.Pattern-L/51 } (/61 Tile{ Reuse: # LB/31 } )/62 3/63 Tile{ AsIs: )/13 AsIs: (/16 } 4/64 (/65 # RB/66 Tile{ AsIs: )/17 AsIs: (/28 } # Hole/67 4/68 Tile{ AsIs: s.R/42 } )/69 Tile{ AsIs: e.Pattern-R/53 } Tile{ AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Vars/55 } Tile{ AsIs: )/29 AsIs: e.Commands/57 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[60]);
          refalrts::alloc_open_bracket(vm, context[61]);
          refalrts::alloc_close_bracket(vm, context[62]);
          refalrts::alloc_number(vm, context[63], 3UL);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_open_bracket(vm, context[65]);
          refalrts::alloc_ident(vm, context[66], identifiers[ident_RB]);
          refalrts::alloc_ident(vm, context[67], identifiers[ident_Hole]);
          refalrts::alloc_number(vm, context[68], 4UL);
          refalrts::alloc_close_bracket(vm, context[69]);
          refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::reinit_number(context[8], 5UL);
          refalrts::update_ident(context[31], identifiers[ident_LB]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[12], context[29] );
          refalrts::link_brackets( context[16], context[9] );
          refalrts::link_brackets( context[28], context[69] );
          refalrts::link_brackets( context[65], context[17] );
          refalrts::link_brackets( context[60], context[13] );
          refalrts::link_brackets( context[61], context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[29];
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[9], context[12] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_elem( res, context[42] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[17], context[28] );
          res = refalrts::splice_evar( res, context[64], context[66] );
          res = refalrts::splice_evar( res, context[13], context[16] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[61] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          res = refalrts::splice_elem( res, context[60] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/51 )/9 (/12 s.R/42 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # PSR/31 )/29 e.Commands/57 >/1
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        if( ! refalrts::ident_term( identifiers[ident_PSR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 51
        // closed e.Pattern-R as range 53
        // closed e.Vars as range 55
        // closed e.Commands as range 57
        //DEBUG: s.X: 5
        //DEBUG: s.R: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 51
        //DEBUG: e.Pattern-R: 53
        //DEBUG: e.Vars: 55
        //DEBUG: e.Commands: 57

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 5/8 } (/59 Tile{ AsIs: e.Pattern-L/51 } Tile{ AsIs: )/9 AsIs: (/12 } 3/60 (/61 # LB/62 Tile{ AsIs: )/17 AsIs: (/28 } # Hole/63 3/64 4/65 Tile{ AsIs: )/13 AsIs: (/16 } Tile{ Reuse: # RB/31 } )/66 Tile{ AsIs: e.Pattern-R/53 } )/67 (/68 Tile{ AsIs: e.Vars/55 } Tile{ AsIs: )/29 AsIs: e.Commands/57 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[59]);
        refalrts::alloc_number(vm, context[60], 3UL);
        refalrts::alloc_open_bracket(vm, context[61]);
        refalrts::alloc_ident(vm, context[62], identifiers[ident_LB]);
        refalrts::alloc_ident(vm, context[63], identifiers[ident_Hole]);
        refalrts::alloc_number(vm, context[64], 3UL);
        refalrts::alloc_number(vm, context[65], 4UL);
        refalrts::alloc_close_bracket(vm, context[66]);
        refalrts::alloc_close_bracket(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_number(context[8], 5UL);
        refalrts::update_ident(context[31], identifiers[ident_RB]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[68], context[29] );
        refalrts::link_brackets( context[12], context[67] );
        refalrts::link_brackets( context[16], context[66] );
        refalrts::link_brackets( context[28], context[13] );
        refalrts::link_brackets( context[61], context[17] );
        refalrts::link_brackets( context[59], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[29];
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[67], context[68] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_elem( res, context[66] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[13], context[16] );
        res = refalrts::splice_evar( res, context[63], context[65] );
        res = refalrts::splice_evar( res, context[17], context[28] );
        res = refalrts::splice_evar( res, context[60], context[62] );
        res = refalrts::splice_evar( res, context[9], context[12] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_elem( res, context[59] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@3/4 s.new23/5 (/8 e.new28/43 s.new29/53 )/9 (/12 s.new30/42 e.new31/45 )/13 (/16 e.new32/47 )/17 (/28 s.new25/30 s.new26/31 e.new27/49 )/29 e.new24/51 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      // closed e.new31 as range 45
      // closed e.new32 as range 47
      // closed e.new27 as range 49
      // closed e.new24 as range 51
      if( ! refalrts::svar_right( context[53], context[43], context[44] ) )
        continue;
      // closed e.new28 as range 43
      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/54 s.L/53 )/9 (/12 s.R/42 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # SETB/31 s.NewL/64 s.NewR/65 )/29 e.Commands/62 >/1
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[50];
        context[62] = context[51];
        context[63] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[31] ) )
          continue;
        // closed e.Pattern-L as range 54
        // closed e.Pattern-R as range 56
        // closed e.Vars as range 58
        // closed e.Commands as range 62
        if( ! refalrts::svar_left( context[64], context[60], context[61] ) )
          continue;
        if( ! refalrts::svar_left( context[65], context[60], context[61] ) )
          continue;
        if( ! refalrts::empty_seq( context[60], context[61] ) )
          continue;
        //DEBUG: s.X: 5
        //DEBUG: s.L: 53
        //DEBUG: s.R: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 54
        //DEBUG: e.Pattern-R: 56
        //DEBUG: e.Vars: 58
        //DEBUG: e.Commands: 62
        //DEBUG: s.NewL: 64
        //DEBUG: s.NewR: 65

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@6/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/54 } (/66 Tile{ HalfReuse: # Hole/9 HalfReuse: s.L53 /12 AsIs: s.R/42 } )/67 Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/58 AsIs: )/17 AsIs: (/28 AsIs: s.Offset/30 AsIs: # SETB/31 AsIs: s.NewL/64 AsIs: s.NewR/65 AsIs: )/29 AsIs: e.Commands/62 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[66]);
        refalrts::alloc_close_bracket(vm, context[67]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z6]);
        refalrts::reinit_ident(context[9], identifiers[ident_Hole]);
        refalrts::reinit_svar( context[12], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[8], context[13] );
        refalrts::link_brackets( context[66], context[67] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[13];
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_evar( res, context[9], context[42] );
        res = refalrts::splice_elem( res, context[66] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/54 s.L/53 )/9 (/12 s.R/42 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # EMP/31 )/29 e.Commands/60 >/1
      context[54] = context[43];
      context[55] = context[44];
      context[56] = context[45];
      context[57] = context[46];
      context[58] = context[47];
      context[59] = context[48];
      context[60] = context[51];
      context[61] = context[52];
      if( ! refalrts::ident_term( identifiers[ident_EMP], context[31] ) )
        continue;
      if( ! refalrts::empty_seq( context[49], context[50] ) )
        continue;
      // closed e.Pattern-L as range 54
      // closed e.Pattern-R as range 56
      // closed e.Vars as range 58
      // closed e.Commands as range 60
      //DEBUG: s.X: 5
      //DEBUG: s.L: 53
      //DEBUG: s.R: 42
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 54
      //DEBUG: e.Pattern-R: 56
      //DEBUG: e.Vars: 58
      //DEBUG: e.Commands: 60

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 )/9 (/12 s.R/42 {REMOVED TILE} {REMOVED TILE} (/28 s.Offset/30 # EMP/31 )/29 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@6/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/54 } Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/58 AsIs: )/17 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@3/4 s.new14/5 (/8 e.new18/32 )/9 (/12 e.new19/34 )/13 (/16 e.new20/36 )/17 (/28 s.new16/30 s.new17/31 )/29 e.new15/38 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.new18 as range 32
      // closed e.new19 as range 34
      // closed e.new20 as range 36
      // closed e.new15 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@3/4 s.new21/5 (/8 e.new28/40 s.new29/52 )/9 (/12 e.new30/42 )/13 (/16 e.new31/44 )/17 (/28 s.new26/30 s.new27/31 )/29 (/50 e.new22/48 s.new23/54 s.new24/53 )/51 e.new25/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = 0;
        context[49] = 0;
        context[50] = refalrts::brackets_left( context[48], context[49], context[46], context[47] );
        if( ! context[50] )
          continue;
        refalrts::bracket_pointers(context[50], context[51]);
        // closed e.new30 as range 42
        // closed e.new31 as range 44
        // closed e.new25 as range 46
        if( ! refalrts::svar_right( context[52], context[40], context[41] ) )
          continue;
        // closed e.new28 as range 40
        if( ! refalrts::svar_right( context[53], context[48], context[49] ) )
          continue;
        if( ! refalrts::svar_right( context[54], context[48], context[49] ) )
          continue;
        // closed e.new22 as range 48
        do {
          // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/55 s.L/52 )/9 (/12 e.Pattern-R/57 )/13 (/16 e.Vars/59 )/17 (/28 s.Offset1/30 # PLEN/31 )/29 (/50 s.Offset2/54 # LEN/53 )/51 e.Commands/61 >/1
          context[55] = context[40];
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[46];
          context[62] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_PLEN], context[31] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LEN], context[53] ) )
            continue;
          if( ! refalrts::empty_seq( context[48], context[49] ) )
            continue;
          // closed e.Pattern-L as range 55
          // closed e.Pattern-R as range 57
          // closed e.Vars as range 59
          // closed e.Commands as range 61
          //DEBUG: s.X: 5
          //DEBUG: s.L: 52
          //DEBUG: s.Offset1: 30
          //DEBUG: s.Offset2: 54
          //DEBUG: e.Pattern-L: 55
          //DEBUG: e.Pattern-R: 57
          //DEBUG: e.Vars: 59
          //DEBUG: e.Commands: 61

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} s.Offset1/30 {REMOVED TILE} s.Offset2/54 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 5/8 } (/63 Tile{ AsIs: e.Pattern-L/55 } (/64 # e/65 3/66 4/67 '='/68 3/69 Tile{ HalfReuse: 4/31 AsIs: )/29 HalfReuse: 4/50 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/57 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/59 HalfReuse: (/17 HalfReuse: # e/28 } 3/70 4/71 '='/72 3/73 4/74 Tile{ HalfReuse: )/53 AsIs: )/51 AsIs: e.Commands/61 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[63]);
          refalrts::alloc_open_bracket(vm, context[64]);
          refalrts::alloc_ident(vm, context[65], identifiers[ident_e]);
          refalrts::alloc_number(vm, context[66], 3UL);
          refalrts::alloc_number(vm, context[67], 4UL);
          refalrts::alloc_char(vm, context[68], '=');
          refalrts::alloc_number(vm, context[69], 3UL);
          refalrts::alloc_number(vm, context[70], 3UL);
          refalrts::alloc_number(vm, context[71], 4UL);
          refalrts::alloc_char(vm, context[72], '=');
          refalrts::alloc_number(vm, context[73], 3UL);
          refalrts::alloc_number(vm, context[74], 4UL);
          refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::reinit_number(context[8], 5UL);
          refalrts::reinit_number(context[31], 4UL);
          refalrts::reinit_number(context[50], 4UL);
          refalrts::reinit_open_bracket(context[17]);
          refalrts::reinit_ident(context[28], identifiers[ident_e]);
          refalrts::reinit_close_bracket(context[53]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[16], context[51] );
          refalrts::link_brackets( context[17], context[53] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[63], context[9] );
          refalrts::link_brackets( context[64], context[29] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[53];
          res = refalrts::splice_evar( res, context[70], context[74] );
          res = refalrts::splice_evar( res, context[9], context[28] );
          res = refalrts::splice_evar( res, context[31], context[50] );
          res = refalrts::splice_evar( res, context[64], context[69] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_elem( res, context[63] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/55 s.L/52 )/9 (/12 e.Pattern-R/57 )/13 (/16 e.Vars/59 )/17 (/28 s.Offset1/30 # PLENS/31 )/29 (/50 s.Offset2/65 # LENS/54 s.Char/53 )/51 e.Commands/63 >/1
          context[55] = context[40];
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[48];
          context[62] = context[49];
          context[63] = context[46];
          context[64] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_PLENS], context[31] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LENS], context[54] ) )
            continue;
          // closed e.Pattern-L as range 55
          // closed e.Pattern-R as range 57
          // closed e.Vars as range 59
          // closed e.Commands as range 63
          if( ! refalrts::svar_left( context[65], context[61], context[62] ) )
            continue;
          if( ! refalrts::empty_seq( context[61], context[62] ) )
            continue;
          //DEBUG: s.X: 5
          //DEBUG: s.L: 52
          //DEBUG: s.Offset1: 30
          //DEBUG: s.Char: 53
          //DEBUG: e.Pattern-L: 55
          //DEBUG: e.Pattern-R: 57
          //DEBUG: e.Vars: 59
          //DEBUG: e.Commands: 63
          //DEBUG: s.Offset2: 65

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} s.Offset1/30 {REMOVED TILE} s.Offset2/65 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 6/8 } (/66 Tile{ AsIs: e.Pattern-L/55 } (/67 # e/68 3/69 4/70 '='/71 3/72 Tile{ HalfReuse: 4/31 AsIs: )/29 AsIs: (/50 } Tile{ Reuse: # C/54 AsIs: s.Char/53 } )/73 5/74 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/57 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/59 HalfReuse: (/17 HalfReuse: # e/28 } 3/75 4/76 '='/77 3/78 4/79 )/80 Tile{ AsIs: )/51 AsIs: e.Commands/63 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_e]);
          refalrts::alloc_number(vm, context[69], 3UL);
          refalrts::alloc_number(vm, context[70], 4UL);
          refalrts::alloc_char(vm, context[71], '=');
          refalrts::alloc_number(vm, context[72], 3UL);
          refalrts::alloc_close_bracket(vm, context[73]);
          refalrts::alloc_number(vm, context[74], 5UL);
          refalrts::alloc_number(vm, context[75], 3UL);
          refalrts::alloc_number(vm, context[76], 4UL);
          refalrts::alloc_char(vm, context[77], '=');
          refalrts::alloc_number(vm, context[78], 3UL);
          refalrts::alloc_number(vm, context[79], 4UL);
          refalrts::alloc_close_bracket(vm, context[80]);
          refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::reinit_number(context[8], 6UL);
          refalrts::reinit_number(context[31], 4UL);
          refalrts::update_ident(context[54], identifiers[ident_C]);
          refalrts::reinit_open_bracket(context[17]);
          refalrts::reinit_ident(context[28], identifiers[ident_e]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[16], context[51] );
          refalrts::link_brackets( context[17], context[80] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[66], context[9] );
          refalrts::link_brackets( context[50], context[73] );
          refalrts::link_brackets( context[67], context[29] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[51];
          res = refalrts::splice_evar( res, context[75], context[80] );
          res = refalrts::splice_evar( res, context[9], context[28] );
          res = refalrts::splice_evar( res, context[73], context[74] );
          res = refalrts::splice_evar( res, context[54], context[53] );
          res = refalrts::splice_evar( res, context[31], context[50] );
          res = refalrts::splice_evar( res, context[67], context[72] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_elem( res, context[66] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/55 s.L/52 )/9 (/12 s.R/63 e.Pattern-R/57 )/13 (/16 e.Vars/59 )/17 (/28 s.Offset1/30 # PLENP/31 )/29 (/50 s.Offset2/54 # LENP/53 )/51 e.Commands/61 >/1
        context[55] = context[40];
        context[56] = context[41];
        context[57] = context[42];
        context[58] = context[43];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_PLENP], context[31] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_LENP], context[53] ) )
          continue;
        if( ! refalrts::empty_seq( context[48], context[49] ) )
          continue;
        // closed e.Pattern-L as range 55
        // closed e.Vars as range 59
        // closed e.Commands as range 61
        if( ! refalrts::svar_left( context[63], context[57], context[58] ) )
          continue;
        // closed e.Pattern-R as range 57
        //DEBUG: s.X: 5
        //DEBUG: s.L: 52
        //DEBUG: s.Offset1: 30
        //DEBUG: s.Offset2: 54
        //DEBUG: e.Pattern-L: 55
        //DEBUG: e.Vars: 59
        //DEBUG: e.Commands: 61
        //DEBUG: s.R: 63
        //DEBUG: e.Pattern-R: 57

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1/30 {REMOVED TILE} s.Offset2/54 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 7/8 } (/64 Tile{ AsIs: e.Pattern-L/55 } (/65 # e/66 3/67 4/68 '='/69 3/70 4/71 Tile{ AsIs: )/9 AsIs: (/12 } # LB/72 )/73 5/74 )/75 (/76 6/77 (/78 Tile{ Reuse: # RB/31 AsIs: )/29 AsIs: (/50 } # Hole/79 6/80 Tile{ AsIs: s.R/63 } )/81 Tile{ AsIs: e.Pattern-R/57 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/59 HalfReuse: (/17 HalfReuse: # e/28 } 3/82 4/83 '='/84 3/85 4/86 Tile{ HalfReuse: )/53 AsIs: )/51 AsIs: e.Commands/61 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::alloc_open_bracket(vm, context[65]);
        refalrts::alloc_ident(vm, context[66], identifiers[ident_e]);
        refalrts::alloc_number(vm, context[67], 3UL);
        refalrts::alloc_number(vm, context[68], 4UL);
        refalrts::alloc_char(vm, context[69], '=');
        refalrts::alloc_number(vm, context[70], 3UL);
        refalrts::alloc_number(vm, context[71], 4UL);
        refalrts::alloc_ident(vm, context[72], identifiers[ident_LB]);
        refalrts::alloc_close_bracket(vm, context[73]);
        refalrts::alloc_number(vm, context[74], 5UL);
        refalrts::alloc_close_bracket(vm, context[75]);
        refalrts::alloc_open_bracket(vm, context[76]);
        refalrts::alloc_number(vm, context[77], 6UL);
        refalrts::alloc_open_bracket(vm, context[78]);
        refalrts::alloc_ident(vm, context[79], identifiers[ident_Hole]);
        refalrts::alloc_number(vm, context[80], 6UL);
        refalrts::alloc_close_bracket(vm, context[81]);
        refalrts::alloc_number(vm, context[82], 3UL);
        refalrts::alloc_number(vm, context[83], 4UL);
        refalrts::alloc_char(vm, context[84], '=');
        refalrts::alloc_number(vm, context[85], 3UL);
        refalrts::alloc_number(vm, context[86], 4UL);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_number(context[8], 7UL);
        refalrts::update_ident(context[31], identifiers[ident_RB]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_e]);
        refalrts::reinit_close_bracket(context[53]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[51] );
        refalrts::link_brackets( context[17], context[53] );
        refalrts::link_brackets( context[76], context[13] );
        refalrts::link_brackets( context[50], context[81] );
        refalrts::link_brackets( context[78], context[29] );
        refalrts::link_brackets( context[64], context[75] );
        refalrts::link_brackets( context[12], context[73] );
        refalrts::link_brackets( context[65], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[53];
        res = refalrts::splice_evar( res, context[82], context[86] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_elem( res, context[81] );
        res = refalrts::splice_elem( res, context[63] );
        res = refalrts::splice_evar( res, context[79], context[80] );
        res = refalrts::splice_evar( res, context[31], context[50] );
        res = refalrts::splice_evar( res, context[72], context[78] );
        res = refalrts::splice_evar( res, context[9], context[12] );
        res = refalrts::splice_evar( res, context[65], context[71] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_elem( res, context[64] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/40 )/9 (/12 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # STLEN/31 )/29 e.Commands/46 >/1
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      if( ! refalrts::ident_term( identifiers[ident_STLEN], context[31] ) )
        continue;
      // closed e.Pattern-L as range 40
      // closed e.Pattern-R as range 42
      // closed e.Vars as range 44
      // closed e.Commands as range 46
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 40
      //DEBUG: e.Pattern-R: 42
      //DEBUG: e.Vars: 44
      //DEBUG: e.Commands: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/28 } Tile{ Reuse: # StartBlock/31 AsIs: )/29 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } </48 & Add/49 1/50 Tile{ AsIs: s.X/5 } >/51 3/52 Tile{ AsIs: (/8 AsIs: e.Pattern-L/40 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/42 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 AsIs: )/17 } Tile{ AsIs: e.Commands/46 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[50], 1UL);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_number(vm, context[52], 3UL);
      refalrts::update_ident(context[31], identifiers[ident_StartBlock]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[8], context[17] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[29] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/32 )/9 (/12 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # LABEL/31 e.BlockName/38 )/29 e.Commands/40 >/1
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[24];
    context[41] = context[25];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[31] ) )
      continue;
    // closed e.Pattern-L as range 32
    // closed e.Pattern-R as range 34
    // closed e.Vars as range 36
    // closed e.BlockName as range 38
    // closed e.Commands as range 40
    //DEBUG: s.X: 5
    //DEBUG: s.Offset: 30
    //DEBUG: e.Pattern-L: 32
    //DEBUG: e.Pattern-R: 34
    //DEBUG: e.Vars: 36
    //DEBUG: e.BlockName: 38
    //DEBUG: e.Commands: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/28 s.Offset/30 # LABEL/31 e.BlockName/38 )/29 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole@3/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/32 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/34 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/36 AsIs: )/17 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[41] );
    refalrts::splice_to_freelist_open( vm, context[17], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 s.L/22 )/9 (/12 s.R/23 )/13 (/16 )/17 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[23], context[20], context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: s.L: 22
    //DEBUG: s.R: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 s.L/22 )/9 (/12 s.R/23 )/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/16 HalfReuse: # EndOfFunction/17 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[17], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[16], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.Pattern-L/18 )/9 (/12 e.Pattern-R/20 )/13 (/16 e.Vars/22 )/17 e.Commands/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Pattern-L as range 18
    // closed e.Pattern-R as range 20
    // closed e.Vars as range 22
    // closed e.Commands as range 24
    //DEBUG: s.X: 5
    //DEBUG: e.Pattern-L: 18
    //DEBUG: e.Pattern-R: 20
    //DEBUG: e.Vars: 22
    //DEBUG: e.Commands: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '='/4 } Tile{ HalfReuse: 'A'/1 } ' '/26 Tile{ AsIs: s.X/5 } 3/27 Tile{ AsIs: (/8 AsIs: e.Pattern-L/18 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/20 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/22 AsIs: )/17 } )/28 Tile{ AsIs: e.Commands/24 } Tile{ ]] }
    refalrts::alloc_char(vm, context[26], ' ');
    refalrts::alloc_number(vm, context[27], 3UL);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_char(context[4], '=');
    refalrts::reinit_char(context[1], 'A');
    refalrts::link_brackets( context[0], context[28] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[8], context[17] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole@3/4 s.X/5 (/8 e.dyn0/6 )/9 (/12 e.dyn1/10 )/13 (/16 e.dyn2/14 )/17 e.dyn3/2 >/1
  // closed e.dyn0 as range 6
  // closed e.dyn1 as range 10
  // closed e.dyn2 as range 14
  // closed e.dyn3 as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.dyn0: 6
  //DEBUG: e.dyn1: 10
  //DEBUG: e.dyn2: 14
  //DEBUG: e.dyn3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@0/4 AsIs: s.X/5 } 3/18 Tile{ AsIs: (/8 AsIs: e.dyn0/6 AsIs: )/9 AsIs: (/12 AsIs: e.dyn1/10 AsIs: )/13 AsIs: (/16 AsIs: e.dyn2/14 AsIs: )/17 AsIs: e.dyn3/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[18], 3UL);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_Z3("Decompile-Pattern-Hole@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 80 elems
  refalrts::Iter context[80];
  refalrts::zeros( context, 80 );
  // </0 & Decompile-Pattern-Hole@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Pattern-Hole@4/4 s.new6/5 (/8 e.new11/18 )/9 (/12 e.new12/20 )/13 (/16 e.new13/22 )/17 (/28 s.new7/30 s.new8/31 e.new9/26 )/29 e.new10/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.new11 as range 18
    // closed e.new12 as range 20
    // closed e.new13 as range 22
    // closed e.new10 as range 24
    if( ! refalrts::svar_left( context[30], context[26], context[27] ) )
      continue;
    if( ! refalrts::svar_left( context[31], context[26], context[27] ) )
      continue;
    // closed e.new9 as range 26
    do {
      // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/32 s.L/42 )/9 (/12 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # CSYM/31 e.Word/38 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_CSYM], context[31] ) )
        continue;
      // closed e.Pattern-R as range 34
      // closed e.Vars as range 36
      // closed e.Word as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_right( context[42], context[32], context[33] ) )
        continue;
      // closed e.Pattern-L as range 32
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-R: 34
      //DEBUG: e.Vars: 36
      //DEBUG: e.Word: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.L: 42
      //DEBUG: e.Pattern-L: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/43 1/44 '*'/45 >/46 Tile{ AsIs: (/28 } Tile{ AsIs: e.Pattern-L/32 } (/47 Tile{ Reuse: # W/31 AsIs: e.Word/38 AsIs: )/29 } '*'/48 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/34 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/36 AsIs: )/17 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[43], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[44], 1UL);
      refalrts::alloc_char(vm, context[45], '*');
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_char(vm, context[48], '*');
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_open_call(context[8]);
      refalrts::update_ident(context[31], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[28], context[9] );
      refalrts::link_brackets( context[47], context[29] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[9], context[17] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[31], context[29] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[43], context[46] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/32 )/9 (/12 s.R/42 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # CSYMR/31 e.Word/38 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_CSYMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 32
      // closed e.Vars as range 36
      // closed e.Word as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[42], context[34], context[35] ) )
        continue;
      // closed e.Pattern-R as range 34
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 32
      //DEBUG: e.Vars: 36
      //DEBUG: e.Word: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.R: 42
      //DEBUG: e.Pattern-R: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/43 1/44 '*'/45 Tile{ HalfReuse: >/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-L/32 } Tile{ AsIs: )/17 AsIs: (/28 } '*'/46 (/47 Tile{ Reuse: # W/31 } Tile{ AsIs: e.Word/38 } )/48 Tile{ AsIs: e.Pattern-R/34 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Vars/36 } Tile{ AsIs: )/29 AsIs: e.Commands/40 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[43], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[44], 1UL);
      refalrts::alloc_char(vm, context[45], '*');
      refalrts::alloc_char(vm, context[46], '*');
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_close_call(context[9]);
      refalrts::update_ident(context[31], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[29] );
      refalrts::link_brackets( context[28], context[13] );
      refalrts::link_brackets( context[47], context[48] );
      refalrts::link_brackets( context[12], context[17] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[17], context[28] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[9], context[12] );
      res = refalrts::splice_evar( res, context[43], context[45] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/32 s.L/43 )/9 (/12 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # NSYM/31 s.Number/42 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_NSYM], context[31] ) )
        continue;
      // closed e.Pattern-R as range 34
      // closed e.Vars as range 36
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
        continue;
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      if( ! refalrts::svar_right( context[43], context[32], context[33] ) )
        continue;
      // closed e.Pattern-L as range 32
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-R: 34
      //DEBUG: e.Vars: 36
      //DEBUG: e.Commands: 40
      //DEBUG: s.Number: 42
      //DEBUG: s.L: 43
      //DEBUG: e.Pattern-L: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/43 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/44 1/45 '*'/46 >/47 Tile{ AsIs: (/28 } Tile{ AsIs: e.Pattern-L/32 } (/48 Tile{ Reuse: # N/31 AsIs: s.Number/42 AsIs: )/29 } '*'/49 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/34 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/36 AsIs: )/17 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[45], 1UL);
      refalrts::alloc_char(vm, context[46], '*');
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::alloc_char(vm, context[49], '*');
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_open_call(context[8]);
      refalrts::update_ident(context[31], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[28], context[9] );
      refalrts::link_brackets( context[48], context[29] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[9], context[17] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_evar( res, context[31], context[29] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[44], context[47] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/32 )/9 (/12 s.R/42 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # NSYMR/31 e.Number/38 )/29 e.Commands/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_NSYMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 32
      // closed e.Vars as range 36
      // closed e.Number as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[42], context[34], context[35] ) )
        continue;
      // closed e.Pattern-R as range 34
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 32
      //DEBUG: e.Vars: 36
      //DEBUG: e.Number: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.R: 42
      //DEBUG: e.Pattern-R: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/43 1/44 '*'/45 Tile{ HalfReuse: >/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-L/32 } Tile{ AsIs: )/17 AsIs: (/28 } '*'/46 (/47 Tile{ Reuse: # N/31 } Tile{ AsIs: e.Number/38 } )/48 Tile{ AsIs: e.Pattern-R/34 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Vars/36 } Tile{ AsIs: )/29 AsIs: e.Commands/40 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[43], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[44], 1UL);
      refalrts::alloc_char(vm, context[45], '*');
      refalrts::alloc_char(vm, context[46], '*');
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_close_call(context[9]);
      refalrts::update_ident(context[31], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[29] );
      refalrts::link_brackets( context[28], context[13] );
      refalrts::link_brackets( context[47], context[48] );
      refalrts::link_brackets( context[12], context[17] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[17], context[28] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[9], context[12] );
      res = refalrts::splice_evar( res, context[43], context[45] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@4/4 s.new14/5 (/8 e.new20/32 )/9 (/12 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 s.new18/42 e.new19/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new20 as range 32
      // closed e.new21 as range 34
      // closed e.new22 as range 36
      // closed e.new15 as range 40
      if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
        continue;
      // closed e.new19 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.new23/5 (/8 e.new29/43 )/9 (/12 e.new30/45 )/13 (/16 e.new31/47 )/17 (/28 s.new25/30 s.new26/31 s.new27/42 s.new28/53 )/29 e.new24/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        // closed e.new29 as range 43
        // closed e.new30 as range 45
        // closed e.new31 as range 47
        // closed e.new24 as range 51
        if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        do {
          // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/54 s.L/62 )/9 (/12 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # SYM/31 s.Code/42 s.Char/53 )/29 e.Commands/60 >/1
          context[54] = context[43];
          context[55] = context[44];
          context[56] = context[45];
          context[57] = context[46];
          context[58] = context[47];
          context[59] = context[48];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::ident_term( identifiers[ident_SYM], context[31] ) )
            continue;
          // closed e.Pattern-R as range 56
          // closed e.Vars as range 58
          // closed e.Commands as range 60
          if( ! refalrts::svar_right( context[62], context[54], context[55] ) )
            continue;
          // closed e.Pattern-L as range 54
          //DEBUG: s.Level0: 5
          //DEBUG: s.Offset: 30
          //DEBUG: s.Code: 42
          //DEBUG: s.Char: 53
          //DEBUG: e.Pattern-R: 56
          //DEBUG: e.Vars: 58
          //DEBUG: e.Commands: 60
          //DEBUG: s.L: 62
          //DEBUG: e.Pattern-L: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/62 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.Code/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/63 1/64 '*'/65 >/66 Tile{ AsIs: (/28 } Tile{ AsIs: e.Pattern-L/54 } (/67 Tile{ Reuse: # C/31 } Tile{ AsIs: s.Char/53 AsIs: )/29 } '*'/68 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/56 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/58 AsIs: )/17 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[64], 1UL);
          refalrts::alloc_char(vm, context[65], '*');
          refalrts::alloc_close_call(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_char(vm, context[68], '*');
          refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::reinit_open_call(context[8]);
          refalrts::update_ident(context[31], identifiers[ident_C]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[28], context[9] );
          refalrts::link_brackets( context[67], context[29] );
          refalrts::push_stack( vm, context[66] );
          refalrts::push_stack( vm, context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[60], context[61] );
          res = refalrts::splice_evar( res, context[9], context[17] );
          res = refalrts::splice_elem( res, context[68] );
          res = refalrts::splice_evar( res, context[53], context[29] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[67] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[63], context[66] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/54 )/9 (/12 s.R/62 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # SYMR/31 s.Code/42 s.Char/53 )/29 e.Commands/60 >/1
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[51];
        context[61] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_SYMR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 54
        // closed e.Vars as range 58
        // closed e.Commands as range 60
        if( ! refalrts::svar_left( context[62], context[56], context[57] ) )
          continue;
        // closed e.Pattern-R as range 56
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 30
        //DEBUG: s.Code: 42
        //DEBUG: s.Char: 53
        //DEBUG: e.Pattern-L: 54
        //DEBUG: e.Vars: 58
        //DEBUG: e.Commands: 60
        //DEBUG: s.R: 62
        //DEBUG: e.Pattern-R: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/62 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.Code/42 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/63 1/64 '*'/65 Tile{ HalfReuse: >/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-L/54 } Tile{ AsIs: )/17 AsIs: (/28 } '*'/66 (/67 Tile{ Reuse: # C/31 } Tile{ AsIs: s.Char/53 } )/68 Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Vars/58 } Tile{ AsIs: )/29 AsIs: e.Commands/60 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[64], 1UL);
        refalrts::alloc_char(vm, context[65], '*');
        refalrts::alloc_char(vm, context[66], '*');
        refalrts::alloc_open_bracket(vm, context[67]);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_close_call(context[9]);
        refalrts::update_ident(context[31], identifiers[ident_C]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[28], context[13] );
        refalrts::link_brackets( context[67], context[68] );
        refalrts::link_brackets( context[12], context[17] );
        refalrts::push_stack( vm, context[9] );
        refalrts::push_stack( vm, context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[29];
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[13], context[16] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_elem( res, context[68] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[66], context[67] );
        res = refalrts::splice_evar( res, context[17], context[28] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[9], context[12] );
        res = refalrts::splice_evar( res, context[63], context[65] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/43 s.L/53 )/9 (/12 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # SYMS/31 s.Len/42 e.Chars/49 )/29 e.Commands/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_SYMS], context[31] ) )
          continue;
        // closed e.Pattern-R as range 45
        // closed e.Vars as range 47
        // closed e.Chars as range 49
        // closed e.Commands as range 51
        if( ! refalrts::svar_right( context[53], context[43], context[44] ) )
          continue;
        // closed e.Pattern-L as range 43
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 30
        //DEBUG: s.Len: 42
        //DEBUG: e.Pattern-R: 45
        //DEBUG: e.Vars: 47
        //DEBUG: e.Chars: 49
        //DEBUG: e.Commands: 51
        //DEBUG: s.L: 53
        //DEBUG: e.Pattern-L: 43

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$7=1/4 AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/43 } )/54 (/55 Tile{ AsIs: e.Chars/49 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/45 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } </56 Tile{ HalfReuse: & Add/31 AsIs: s.Len/42 } '*'/57 >/58 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[54]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_char(vm, context[57], '*');
        refalrts::alloc_close_call(vm, context[58]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S7A1]);
        refalrts::reinit_name(context[31], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[58] );
        refalrts::push_stack( vm, context[56] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[55], context[9] );
        refalrts::link_brackets( context[8], context[54] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[31], context[42] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/43 )/9 (/12 s.R/53 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # SYMSR/31 s.Len/42 e.Chars/49 )/29 e.Commands/51 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_SYMSR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 43
      // closed e.Vars as range 47
      // closed e.Chars as range 49
      // closed e.Commands as range 51
      if( ! refalrts::svar_left( context[53], context[45], context[46] ) )
        continue;
      // closed e.Pattern-R as range 45
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 30
      //DEBUG: s.Len: 42
      //DEBUG: e.Pattern-L: 43
      //DEBUG: e.Vars: 47
      //DEBUG: e.Chars: 49
      //DEBUG: e.Commands: 51
      //DEBUG: s.R: 53
      //DEBUG: e.Pattern-R: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.R/53 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$8=1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Pattern-L/43 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Chars/49 } )/54 (/55 Tile{ AsIs: e.Pattern-R/45 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } </56 Tile{ HalfReuse: & Add/31 AsIs: s.Len/42 } '*'/57 >/58 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_char(vm, context[57], '*');
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S8A1]);
      refalrts::reinit_name(context[31], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[56] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[55], context[13] );
      refalrts::link_brackets( context[12], context[54] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[31], context[42] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[13], context[28] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      refalrts::splice_to_freelist_open( vm, context[12], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@4/4 s.new14/5 (/8 e.new18/32 )/9 (/12 e.new19/34 )/13 (/16 e.new20/36 )/17 (/28 s.new16/30 s.new17/31 )/29 e.new15/38 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.new18 as range 32
      // closed e.new19 as range 34
      // closed e.new20 as range 36
      // closed e.new15 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/40 s.L/48 )/9 (/12 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # VSYM/31 )/29 e.Commands/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        if( ! refalrts::ident_term( identifiers[ident_VSYM], context[31] ) )
          continue;
        // closed e.Pattern-R as range 42
        // closed e.Vars as range 44
        // closed e.Commands as range 46
        if( ! refalrts::svar_right( context[48], context[40], context[41] ) )
          continue;
        // closed e.Pattern-L as range 40
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-R: 42
        //DEBUG: e.Vars: 44
        //DEBUG: e.Commands: 46
        //DEBUG: s.L: 48
        //DEBUG: e.Pattern-L: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/48 {REMOVED TILE} s.Offset/30 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/49 1/50 '*'/51 >/52 (/53 Tile{ AsIs: e.Pattern-L/40 } (/54 # s/55"*=*"/56 )/58 '*'/59 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/42 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 HalfReuse: (/17 HalfReuse: # s/28 }"*=*"/60 Tile{ HalfReuse: )/31 AsIs: )/29 AsIs: e.Commands/46 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[50], 1UL);
        refalrts::alloc_char(vm, context[51], '*');
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_open_bracket(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_ident(vm, context[55], identifiers[ident_s]);
        refalrts::alloc_chars(vm, context[56], context[57], "*=*", 3);
        refalrts::alloc_close_bracket(vm, context[58]);
        refalrts::alloc_char(vm, context[59], '*');
        refalrts::alloc_chars(vm, context[60], context[61], "*=*", 3);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[31] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[53], context[9] );
        refalrts::link_brackets( context[54], context[58] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[54], context[59] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[49], context[53] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/40 )/9 (/12 s.R/48 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # VSYMR/31 )/29 e.Commands/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        if( ! refalrts::ident_term( identifiers[ident_VSYMR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 40
        // closed e.Vars as range 44
        // closed e.Commands as range 46
        if( ! refalrts::svar_left( context[48], context[42], context[43] ) )
          continue;
        // closed e.Pattern-R as range 42
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 40
        //DEBUG: e.Vars: 44
        //DEBUG: e.Commands: 46
        //DEBUG: s.R: 48
        //DEBUG: e.Pattern-R: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/48 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 } </49 & Add/50 1/51 '*'/52 >/53 Tile{ AsIs: (/8 AsIs: e.Pattern-L/40 AsIs: )/9 AsIs: (/12 } '*'/54 (/55 # s/56"*=*"/57 )/59 Tile{ AsIs: e.Pattern-R/42 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 HalfReuse: (/17 HalfReuse: # s/28 }"*=*"/60 Tile{ HalfReuse: )/31 AsIs: )/29 AsIs: e.Commands/46 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[51], 1UL);
        refalrts::alloc_char(vm, context[52], '*');
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_char(vm, context[54], '*');
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_ident(vm, context[56], identifiers[ident_s]);
        refalrts::alloc_chars(vm, context[57], context[58], "*=*", 3);
        refalrts::alloc_close_bracket(vm, context[59]);
        refalrts::alloc_chars(vm, context[60], context[61], "*=*", 3);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[31] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[55], context[59] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[49] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[54], context[59] );
        res = refalrts::splice_evar( res, context[8], context[12] );
        res = refalrts::splice_evar( res, context[49], context[53] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/40 s.L/48 )/9 (/12 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # TERM/31 )/29 e.Commands/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        if( ! refalrts::ident_term( identifiers[ident_TERM], context[31] ) )
          continue;
        // closed e.Pattern-R as range 42
        // closed e.Vars as range 44
        // closed e.Commands as range 46
        if( ! refalrts::svar_right( context[48], context[40], context[41] ) )
          continue;
        // closed e.Pattern-L as range 40
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-R: 42
        //DEBUG: e.Vars: 44
        //DEBUG: e.Commands: 46
        //DEBUG: s.L: 48
        //DEBUG: e.Pattern-L: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/48 {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$11=1@2/4 AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/40 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/42 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/46 } Tile{ AsIs: )/29 } Tile{ HalfReuse: '*'/31 } </49 & Add/50 1/51 '*'/52 >/53 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[51], 1UL);
        refalrts::alloc_char(vm, context[52], '*');
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S11A1Z2]);
        refalrts::reinit_char(context[31], '*');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[49], context[53] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/40 )/9 (/12 s.R/48 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # TERMR/31 )/29 e.Commands/46 >/1
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      if( ! refalrts::ident_term( identifiers[ident_TERMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 40
      // closed e.Vars as range 44
      // closed e.Commands as range 46
      if( ! refalrts::svar_left( context[48], context[42], context[43] ) )
        continue;
      // closed e.Pattern-R as range 42
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 40
      //DEBUG: e.Vars: 44
      //DEBUG: e.Commands: 46
      //DEBUG: s.R: 48
      //DEBUG: e.Pattern-R: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.R/48 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$12=1@2/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Pattern-L/40 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-R/42 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/46 } Tile{ AsIs: )/29 } '*'/49 Tile{ HalfReuse: </31 } & Add/50 1/51 '*'/52 >/53 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[49], '*');
      refalrts::alloc_name(vm, context[50], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[51], 1UL);
      refalrts::alloc_char(vm, context[52], '*');
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S12A1Z2]);
      refalrts::reinit_open_call(context[31]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[31] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[50], context[53] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[13], context[28] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      refalrts::splice_to_freelist_open( vm, context[12], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@4/4 s.new14/5 (/8 e.new20/32 )/9 (/12 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 s.new18/42 e.new19/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new20 as range 32
      // closed e.new21 as range 34
      // closed e.new22 as range 36
      // closed e.new15 as range 40
      if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
        continue;
      // closed e.new19 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/43 )/9 (/12 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # TRAN/31 s.Jump/42 )/29 e.Commands-B/51 (/57 s.Jump/59 e.Command/55 )/58 e.Commands-E/53 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[40];
        context[50] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[31] ) )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.Pattern-L as range 43
        // closed e.Pattern-R as range 45
        // closed e.Vars as range 47
        context[51] = 0;
        context[52] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[53] = context[49];
          context[54] = context[50];
          context[55] = 0;
          context[56] = 0;
          context[57] = refalrts::brackets_left( context[55], context[56], context[53], context[54] );
          if( ! context[57] )
            continue;
          refalrts::bracket_pointers(context[57], context[58]);
          if( ! refalrts::repeated_stvar_left( vm, context[59], context[42], context[55], context[56] ) )
            continue;
          // closed e.Command as range 55
          // closed e.Commands-E as range 53
          //DEBUG: s.Level0: 5
          //DEBUG: s.Offset: 30
          //DEBUG: s.Jump: 42
          //DEBUG: e.Pattern-L: 43
          //DEBUG: e.Pattern-R: 45
          //DEBUG: e.Vars: 47
          //DEBUG: e.Commands-B: 51
          //DEBUG: e.Command: 55
          //DEBUG: e.Commands-E: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.Jump/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole@4/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Pattern-L/43 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/45 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 } Tile{ AsIs: e.Commands-B/51 } Tile{ AsIs: (/28 } '@'/60 Tile{ Reuse: # Restore-Hole/31 } s.Level0/5/61 '*'/62 (/63 e.Pattern-L/43/64 Tile{ AsIs: )/29 } (/66 e.Pattern-R/45/67 )/69 (/70 e.Vars/47/71 )/73 )/74 Tile{ AsIs: (/57 AsIs: s.Jump/59 AsIs: e.Command/55 AsIs: )/58 AsIs: e.Commands-E/53 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[60], '@');
          refalrts::copy_stvar(vm, context[61], context[5]);
          refalrts::alloc_char(vm, context[62], '*');
          refalrts::alloc_open_bracket(vm, context[63]);
          refalrts::copy_evar(vm, context[64], context[65], context[43], context[44]);
          refalrts::alloc_open_bracket(vm, context[66]);
          refalrts::copy_evar(vm, context[67], context[68], context[45], context[46]);
          refalrts::alloc_close_bracket(vm, context[69]);
          refalrts::alloc_open_bracket(vm, context[70]);
          refalrts::copy_evar(vm, context[71], context[72], context[47], context[48]);
          refalrts::alloc_close_bracket(vm, context[73]);
          refalrts::alloc_close_bracket(vm, context[74]);
          refalrts::update_ident(context[31], identifiers[ident_Restorem_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[57], context[58] );
          refalrts::link_brackets( context[28], context[74] );
          refalrts::link_brackets( context[70], context[73] );
          refalrts::link_brackets( context[66], context[69] );
          refalrts::link_brackets( context[63], context[29] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[57];
          res = refalrts::splice_evar( res, context[66], context[74] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_evar( res, context[61], context[63] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[60] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          refalrts::splice_to_freelist_open( vm, context[17], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[51], context[52], context[49], context[50] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.new23/5 (/8 e.new31/43 )/9 (/12 e.new32/45 )/13 (/16 e.new33/47 )/17 (/28 '@'/30 s.new25/31 s.new26/42 s.new27/61 e.new28/49 (/59 e.new29/57 )/60 (/55 e.new30/53 )/56 )/29 e.new24/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        if( ! refalrts::char_term( '@', context[30] ) )
          continue;
        context[53] = 0;
        context[54] = 0;
        context[55] = refalrts::brackets_right( context[53], context[54], context[49], context[50] );
        if( ! context[55] )
          continue;
        refalrts::bracket_pointers(context[55], context[56]);
        context[57] = 0;
        context[58] = 0;
        context[59] = refalrts::brackets_right( context[57], context[58], context[49], context[50] );
        if( ! context[59] )
          continue;
        refalrts::bracket_pointers(context[59], context[60]);
        // closed e.new31 as range 43
        // closed e.new32 as range 45
        // closed e.new33 as range 47
        // closed e.new29 as range 57
        // closed e.new30 as range 53
        // closed e.new24 as range 51
        if( ! refalrts::svar_left( context[61], context[49], context[50] ) )
          continue;
        // closed e.new28 as range 49
        do {
          // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 '@'/30 # Restore-Hole/31 s.Level2/42 s.Top2/61 (/78 e.Pattern-L2/76 )/79 (/59 e.Pattern-R2/70 )/60 (/55 e.Vars2/72 )/56 )/29 e.Commands/74 >/1
          context[62] = context[43];
          context[63] = context[44];
          context[64] = context[45];
          context[65] = context[46];
          context[66] = context[47];
          context[67] = context[48];
          context[68] = context[49];
          context[69] = context[50];
          context[70] = context[57];
          context[71] = context[58];
          context[72] = context[53];
          context[73] = context[54];
          context[74] = context[51];
          context[75] = context[52];
          if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[31] ) )
            continue;
          context[76] = 0;
          context[77] = 0;
          context[78] = refalrts::brackets_left( context[76], context[77], context[68], context[69] );
          if( ! context[78] )
            continue;
          refalrts::bracket_pointers(context[78], context[79]);
          if( ! refalrts::empty_seq( context[68], context[69] ) )
            continue;
          // closed e.Pattern-L1 as range 62
          // closed e.Pattern-R1 as range 64
          // closed e.Vars1 as range 66
          // closed e.Pattern-L2 as range 76
          // closed e.Pattern-R2 as range 70
          // closed e.Vars2 as range 72
          // closed e.Commands as range 74
          //DEBUG: s.Level0: 5
          //DEBUG: s.Level2: 42
          //DEBUG: s.Top2: 61
          //DEBUG: e.Pattern-L1: 62
          //DEBUG: e.Pattern-R1: 64
          //DEBUG: e.Vars1: 66
          //DEBUG: e.Pattern-L2: 76
          //DEBUG: e.Pattern-R2: 70
          //DEBUG: e.Vars2: 72
          //DEBUG: e.Commands: 74

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </30 HalfReuse: & Decompile-Pattern-Hole/31 AsIs: s.Level2/42 AsIs: s.Top2/61 AsIs: (/78 AsIs: e.Pattern-L2/76 AsIs: )/79 AsIs: (/59 AsIs: e.Pattern-R2/70 AsIs: )/60 AsIs: (/55 AsIs: e.Vars2/72 AsIs: )/56 } Tile{ AsIs: e.Commands/74 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_call(context[30]);
          refalrts::reinit_name(context[31], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::link_brackets( context[55], context[56] );
          refalrts::link_brackets( context[59], context[60] );
          refalrts::link_brackets( context[78], context[79] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[74], context[75] );
          res = refalrts::splice_evar( res, context[30], context[56] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 '@'/30 # Restore-NoHole/31 s.Level2/42 s.Top2/61 (/59 e.Pattern2/68 )/60 (/55 e.Vars2/70 )/56 )/29 e.Commands/72 >/1
        context[62] = context[43];
        context[63] = context[44];
        context[64] = context[45];
        context[65] = context[46];
        context[66] = context[47];
        context[67] = context[48];
        context[68] = context[57];
        context[69] = context[58];
        context[70] = context[53];
        context[71] = context[54];
        context[72] = context[51];
        context[73] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[31] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        // closed e.Pattern-L1 as range 62
        // closed e.Pattern-R1 as range 64
        // closed e.Vars1 as range 66
        // closed e.Pattern2 as range 68
        // closed e.Vars2 as range 70
        // closed e.Commands as range 72
        //DEBUG: s.Level0: 5
        //DEBUG: s.Level2: 42
        //DEBUG: s.Top2: 61
        //DEBUG: e.Pattern-L1: 62
        //DEBUG: e.Pattern-R1: 64
        //DEBUG: e.Vars1: 66
        //DEBUG: e.Pattern2: 68
        //DEBUG: e.Vars2: 70
        //DEBUG: e.Commands: 72

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L1/62 )/9 (/12 e.Pattern-R1/64 )/13 (/16 e.Vars1/66 )/17 (/28 {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </30 HalfReuse: & Decompile-Pattern-NoHole/31 AsIs: s.Level2/42 AsIs: s.Top2/61 AsIs: (/59 AsIs: e.Pattern2/68 AsIs: )/60 AsIs: (/55 AsIs: e.Vars2/70 AsIs: )/56 } Tile{ AsIs: e.Commands/72 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[30]);
        refalrts::reinit_name(context[31], functions[efunc_Decompilem_Patternm_NoHole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[55], context[56] );
        refalrts::link_brackets( context[59], context[60] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[73] );
        res = refalrts::splice_evar( res, context[30], context[56] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@4/4 s.new23/5 (/8 e.new28/43 )/9 (/12 e.new29/45 )/13 (/16 e.new30/47 )/17 (/28 s.new25/30 s.new26/31 s.new27/42 )/29 e.new24/49 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[40];
      context[50] = context[41];
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.new28 as range 43
      // closed e.new29 as range 45
      // closed e.new30 as range 47
      // closed e.new24 as range 49
      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/51 s.L/59 )/9 (/12 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # OVSYM/31 s.VarNo/42 )/29 e.Commands/57 >/1
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        if( ! refalrts::ident_term( identifiers[ident_OVSYM], context[31] ) )
          continue;
        // closed e.Pattern-R as range 53
        // closed e.Vars as range 55
        // closed e.Commands as range 57
        if( ! refalrts::svar_right( context[59], context[51], context[52] ) )
          continue;
        // closed e.Pattern-L as range 51
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 30
        //DEBUG: s.VarNo: 42
        //DEBUG: e.Pattern-R: 53
        //DEBUG: e.Vars: 55
        //DEBUG: e.Commands: 57
        //DEBUG: s.L: 59
        //DEBUG: e.Pattern-L: 51

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/59 {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/60 1/61 '*'/62 >/63 (/64 Tile{ AsIs: e.Pattern-L/51 } (/65 Tile{ Reuse: # s/31 AsIs: s.VarNo/42 }"=*"/66 )/68 '*'/69 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/53 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/55 HalfReuse: (/17 HalfReuse: # s/28 } s.VarNo/42/70"=*"/71 )/73 Tile{ AsIs: )/29 AsIs: e.Commands/57 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[60], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[61], 1UL);
        refalrts::alloc_char(vm, context[62], '*');
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::alloc_open_bracket(vm, context[65]);
        refalrts::alloc_chars(vm, context[66], context[67], "=*", 2);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::alloc_char(vm, context[69], '*');
        refalrts::copy_stvar(vm, context[70], context[42]);
        refalrts::alloc_chars(vm, context[71], context[72], "=*", 2);
        refalrts::alloc_close_bracket(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_open_call(context[8]);
        refalrts::update_ident(context[31], identifiers[ident_s]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_ident(context[28], identifiers[ident_s]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[29] );
        refalrts::link_brackets( context[17], context[73] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[64], context[9] );
        refalrts::link_brackets( context[65], context[68] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[29];
        res = refalrts::splice_evar( res, context[70], context[73] );
        res = refalrts::splice_evar( res, context[9], context[28] );
        res = refalrts::splice_evar( res, context[66], context[69] );
        res = refalrts::splice_evar( res, context[31], context[42] );
        res = refalrts::splice_elem( res, context[65] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[60], context[64] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/51 )/9 (/12 s.R/59 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # OVSYMR/31 s.VarNo/42 )/29 e.Commands/57 >/1
      context[51] = context[43];
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      context[58] = context[50];
      if( ! refalrts::ident_term( identifiers[ident_OVSYMR], context[31] ) )
        continue;
      // closed e.Pattern-L as range 51
      // closed e.Vars as range 55
      // closed e.Commands as range 57
      if( ! refalrts::svar_left( context[59], context[53], context[54] ) )
        continue;
      // closed e.Pattern-R as range 53
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 30
      //DEBUG: s.VarNo: 42
      //DEBUG: e.Pattern-L: 51
      //DEBUG: e.Vars: 55
      //DEBUG: e.Commands: 57
      //DEBUG: s.R: 59
      //DEBUG: e.Pattern-R: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.R/59 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/60 1/61 '*'/62 >/63 (/64 Tile{ AsIs: e.Pattern-L/51 } Tile{ AsIs: )/9 AsIs: (/12 } '*'/65 (/66 Tile{ Reuse: # s/31 AsIs: s.VarNo/42 }"=*"/67 )/69 Tile{ AsIs: e.Pattern-R/53 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/55 HalfReuse: (/17 HalfReuse: # s/28 } s.VarNo/42/70"=*"/71 )/73 Tile{ AsIs: )/29 AsIs: e.Commands/57 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[60], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[61], 1UL);
      refalrts::alloc_char(vm, context[62], '*');
      refalrts::alloc_close_call(vm, context[63]);
      refalrts::alloc_open_bracket(vm, context[64]);
      refalrts::alloc_char(vm, context[65], '*');
      refalrts::alloc_open_bracket(vm, context[66]);
      refalrts::alloc_chars(vm, context[67], context[68], "=*", 2);
      refalrts::alloc_close_bracket(vm, context[69]);
      refalrts::copy_stvar(vm, context[70], context[42]);
      refalrts::alloc_chars(vm, context[71], context[72], "=*", 2);
      refalrts::alloc_close_bracket(vm, context[73]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_open_call(context[8]);
      refalrts::update_ident(context[31], identifiers[ident_s]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_ident(context[28], identifiers[ident_s]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[29] );
      refalrts::link_brackets( context[17], context[73] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[66], context[69] );
      refalrts::link_brackets( context[64], context[9] );
      refalrts::push_stack( vm, context[63] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[70], context[73] );
      res = refalrts::splice_evar( res, context[13], context[28] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[31], context[42] );
      res = refalrts::splice_evar( res, context[65], context[66] );
      res = refalrts::splice_evar( res, context[9], context[12] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[60], context[64] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@4/4 s.new14/5 (/8 e.new19/32 s.new20/42 )/9 (/12 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 e.new18/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new21 as range 34
      // closed e.new22 as range 36
      // closed e.new18 as range 38
      // closed e.new15 as range 40
      if( ! refalrts::svar_right( context[42], context[32], context[33] ) )
        continue;
      // closed e.new19 as range 32
      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/43 s.L/42 )/9 (/12 s.R/51 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # CL/31 )/29 e.Commands/49 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[40];
        context[50] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_CL], context[31] ) )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.Pattern-L as range 43
        // closed e.Vars as range 47
        // closed e.Commands as range 49
        if( ! refalrts::svar_left( context[51], context[45], context[46] ) )
          continue;
        // closed e.Pattern-R as range 45
        //DEBUG: s.Level0: 5
        //DEBUG: s.L: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 43
        //DEBUG: e.Vars: 47
        //DEBUG: e.Commands: 49
        //DEBUG: s.R: 51
        //DEBUG: e.Pattern-R: 45

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} s.R/51 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$18=1@2/4 AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/43 } Tile{ AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-R/45 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/49 } Tile{ AsIs: )/29 } Tile{ HalfReuse: '*'/31 } </52 & Add/53 '*'/54 1/55 >/56 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_Add]);
        refalrts::alloc_char(vm, context[54], '*');
        refalrts::alloc_number(vm, context[55], 1UL);
        refalrts::alloc_close_call(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S18A1Z2]);
        refalrts::reinit_char(context[31], '*');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[56] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[52], context[56] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[9], context[12] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/43 s.L/42 )/9 (/12 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # OEXP/31 s.IdR/53 )/29 e.Commands/51 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_OEXP], context[31] ) )
        continue;
      // closed e.Pattern-L as range 43
      // closed e.Pattern-R as range 45
      // closed e.Vars as range 47
      // closed e.Commands as range 51
      if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
        continue;
      if( ! refalrts::empty_seq( context[49], context[50] ) )
        continue;
      //DEBUG: s.Level0: 5
      //DEBUG: s.L: 42
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 43
      //DEBUG: e.Pattern-R: 45
      //DEBUG: e.Vars: 47
      //DEBUG: e.Commands: 51
      //DEBUG: s.IdR: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} s.Offset/30 # OEXP/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=1@4/4 } Tile{ AsIs: s.IdR/53 } Tile{ AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/43 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/45 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } e.Vars/47/54 Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[54], context[55], context[47], context[48]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[9], context[28] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[5], context[8] );
      res = refalrts::splice_elem( res, context[53] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@4/4 s.new14/5 (/8 e.new19/32 )/9 (/12 s.new20/42 e.new21/34 )/13 (/16 e.new22/36 )/17 (/28 s.new16/30 s.new17/31 e.new18/38 )/29 e.new15/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[24];
      context[41] = context[25];
      // closed e.new19 as range 32
      // closed e.new22 as range 36
      // closed e.new18 as range 38
      // closed e.new15 as range 40
      if( ! refalrts::svar_left( context[42], context[34], context[35] ) )
        continue;
      // closed e.new21 as range 34
      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/43 )/9 (/12 s.R/42 e.Pattern-R/45 )/13 (/16 e.Vars/47 )/17 (/28 s.Offset/30 # OEXPR/31 s.IdR/53 )/29 e.Commands/51 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_OEXPR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 43
        // closed e.Pattern-R as range 45
        // closed e.Vars as range 47
        // closed e.Commands as range 51
        if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
          continue;
        if( ! refalrts::empty_seq( context[49], context[50] ) )
          continue;
        //DEBUG: s.Level0: 5
        //DEBUG: s.R: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 43
        //DEBUG: e.Pattern-R: 45
        //DEBUG: e.Vars: 47
        //DEBUG: e.Commands: 51
        //DEBUG: s.IdR: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} s.IdR/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </31 } Tile{ HalfReuse: & Decompile-Pattern-Hole$20=1@4/0 HalfReuse: s.IdR53 /4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Pattern-L/43 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-R/45 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/47 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/51 } Tile{ AsIs: )/29 } e.Vars/47/54 Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[54], context[55], context[47], context[48]);
        refalrts::reinit_open_call(context[31]);
        refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1Z4]);
        refalrts::reinit_svar( context[4], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[0], context[12] );
        res = refalrts::splice_elem( res, context[31] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.new23/5 (/8 e.new27/43 )/9 (/12 s.new28/42 e.new29/45 )/13 (/16 e.new30/47 )/17 (/28 s.new25/30 s.new26/31 )/29 e.new24/49 >/1
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[40];
        context[50] = context[41];
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.new27 as range 43
        // closed e.new29 as range 45
        // closed e.new30 as range 47
        // closed e.new24 as range 49
        do {
          // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/51 s.L/59 )/9 (/12 s.R/42 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # PS/31 )/29 e.Commands/57 >/1
          context[51] = context[43];
          context[52] = context[44];
          context[53] = context[45];
          context[54] = context[46];
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[49];
          context[58] = context[50];
          if( ! refalrts::ident_term( identifiers[ident_PS], context[31] ) )
            continue;
          // closed e.Pattern-R as range 53
          // closed e.Vars as range 55
          // closed e.Commands as range 57
          if( ! refalrts::svar_right( context[59], context[51], context[52] ) )
            continue;
          // closed e.Pattern-L as range 51
          //DEBUG: s.Level0: 5
          //DEBUG: s.R: 42
          //DEBUG: s.Offset: 30
          //DEBUG: e.Pattern-R: 53
          //DEBUG: e.Vars: 55
          //DEBUG: e.Commands: 57
          //DEBUG: s.L: 59
          //DEBUG: e.Pattern-L: 51

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/59 {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$21=1@2/4 AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/51 } Tile{ AsIs: )/9 HalfReuse: s.R42 /12 } Tile{ HalfReuse: (/31 } Tile{ AsIs: e.Pattern-R/53 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/55 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/57 } Tile{ AsIs: )/29 } '*'/60 </61 & Add/62 '*'/63 1/64 >/65 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[60], '*');
          refalrts::alloc_open_call(vm, context[61]);
          refalrts::alloc_name(vm, context[62], functions[efunc_Add]);
          refalrts::alloc_char(vm, context[63], '*');
          refalrts::alloc_number(vm, context[64], 1UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S21A1Z2]);
          refalrts::reinit_svar( context[12], context[42] );
          refalrts::reinit_open_bracket(context[31]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[61] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[31], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[60], context[65] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_evar( res, context[57], context[58] );
          res = refalrts::splice_evar( res, context[13], context[28] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[9], context[12] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/51 )/9 (/12 s.R/42 e.Pattern-R/53 )/13 (/16 e.Vars/55 )/17 (/28 s.Offset/30 # PSR/31 )/29 e.Commands/57 >/1
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        context[58] = context[50];
        if( ! refalrts::ident_term( identifiers[ident_PSR], context[31] ) )
          continue;
        // closed e.Pattern-L as range 51
        // closed e.Pattern-R as range 53
        // closed e.Vars as range 55
        // closed e.Commands as range 57
        //DEBUG: s.Level0: 5
        //DEBUG: s.R: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 51
        //DEBUG: e.Pattern-R: 53
        //DEBUG: e.Vars: 55
        //DEBUG: e.Commands: 57

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.R/42 {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$22=1@2/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Pattern-L/51 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Pattern-R/53 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/55 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/57 } Tile{ AsIs: )/29 } '*'/59 Tile{ HalfReuse: </31 } & Add/60 '*'/61 1/62 >/63 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[59], '*');
        refalrts::alloc_name(vm, context[60], functions[efunc_Add]);
        refalrts::alloc_char(vm, context[61], '*');
        refalrts::alloc_number(vm, context[62], 1UL);
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S22A1Z2]);
        refalrts::reinit_open_call(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[60], context[63] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_elem( res, context[59] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@4/4 s.new23/5 (/8 e.new28/43 s.new29/53 )/9 (/12 s.new30/42 e.new31/45 )/13 (/16 e.new32/47 )/17 (/28 s.new25/30 s.new26/31 e.new27/49 )/29 e.new24/51 >/1
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      // closed e.new31 as range 45
      // closed e.new32 as range 47
      // closed e.new27 as range 49
      // closed e.new24 as range 51
      if( ! refalrts::svar_right( context[53], context[43], context[44] ) )
        continue;
      // closed e.new28 as range 43
      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/54 s.L/53 )/9 (/12 s.R/42 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # SETB/31 s.NewL/64 s.NewR/65 )/29 e.Commands/62 >/1
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[50];
        context[62] = context[51];
        context[63] = context[52];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[31] ) )
          continue;
        // closed e.Pattern-L as range 54
        // closed e.Pattern-R as range 56
        // closed e.Vars as range 58
        // closed e.Commands as range 62
        if( ! refalrts::svar_left( context[64], context[60], context[61] ) )
          continue;
        if( ! refalrts::svar_left( context[65], context[60], context[61] ) )
          continue;
        if( ! refalrts::empty_seq( context[60], context[61] ) )
          continue;
        //DEBUG: s.Level0: 5
        //DEBUG: s.L: 53
        //DEBUG: s.R: 42
        //DEBUG: s.Offset: 30
        //DEBUG: e.Pattern-L: 54
        //DEBUG: e.Pattern-R: 56
        //DEBUG: e.Vars: 58
        //DEBUG: e.Commands: 62
        //DEBUG: s.NewL: 64
        //DEBUG: s.NewR: 65

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@1/4 AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/54 } (/66 Tile{ HalfReuse: # Hole/9 HalfReuse: s.L53 /12 AsIs: s.R/42 } )/67 Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/58 AsIs: )/17 AsIs: (/28 AsIs: s.Offset/30 AsIs: # SETB/31 AsIs: s.NewL/64 AsIs: s.NewR/65 AsIs: )/29 AsIs: e.Commands/62 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[66]);
        refalrts::alloc_close_bracket(vm, context[67]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z1]);
        refalrts::reinit_ident(context[9], identifiers[ident_Hole]);
        refalrts::reinit_svar( context[12], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[8], context[13] );
        refalrts::link_brackets( context[66], context[67] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[13];
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_evar( res, context[9], context[42] );
        res = refalrts::splice_elem( res, context[66] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/54 s.L/53 )/9 (/12 s.R/42 e.Pattern-R/56 )/13 (/16 e.Vars/58 )/17 (/28 s.Offset/30 # EMP/31 )/29 e.Commands/60 >/1
      context[54] = context[43];
      context[55] = context[44];
      context[56] = context[45];
      context[57] = context[46];
      context[58] = context[47];
      context[59] = context[48];
      context[60] = context[51];
      context[61] = context[52];
      if( ! refalrts::ident_term( identifiers[ident_EMP], context[31] ) )
        continue;
      if( ! refalrts::empty_seq( context[49], context[50] ) )
        continue;
      // closed e.Pattern-L as range 54
      // closed e.Pattern-R as range 56
      // closed e.Vars as range 58
      // closed e.Commands as range 60
      //DEBUG: s.Level0: 5
      //DEBUG: s.L: 53
      //DEBUG: s.R: 42
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 54
      //DEBUG: e.Pattern-R: 56
      //DEBUG: e.Vars: 58
      //DEBUG: e.Commands: 60

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/53 )/9 (/12 s.R/42 {REMOVED TILE} {REMOVED TILE} (/28 s.Offset/30 # EMP/31 )/29 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@1/4 AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/54 } Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/58 AsIs: )/17 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@4/4 s.new14/5 (/8 e.new18/32 )/9 (/12 e.new19/34 )/13 (/16 e.new20/36 )/17 (/28 s.new16/30 s.new17/31 )/29 e.new15/38 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      context[39] = context[25];
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.new18 as range 32
      // closed e.new19 as range 34
      // closed e.new20 as range 36
      // closed e.new15 as range 38
      do {
        // </0 & Decompile-Pattern-Hole@4/4 s.new21/5 (/8 e.new28/40 s.new29/52 )/9 (/12 e.new30/42 )/13 (/16 e.new31/44 )/17 (/28 s.new26/30 s.new27/31 )/29 (/50 e.new22/48 s.new23/54 s.new24/53 )/51 e.new25/46 >/1
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = 0;
        context[49] = 0;
        context[50] = refalrts::brackets_left( context[48], context[49], context[46], context[47] );
        if( ! context[50] )
          continue;
        refalrts::bracket_pointers(context[50], context[51]);
        // closed e.new30 as range 42
        // closed e.new31 as range 44
        // closed e.new25 as range 46
        if( ! refalrts::svar_right( context[52], context[40], context[41] ) )
          continue;
        // closed e.new28 as range 40
        if( ! refalrts::svar_right( context[53], context[48], context[49] ) )
          continue;
        if( ! refalrts::svar_right( context[54], context[48], context[49] ) )
          continue;
        // closed e.new22 as range 48
        do {
          // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/55 s.L/52 )/9 (/12 e.Pattern-R/57 )/13 (/16 e.Vars/59 )/17 (/28 s.Offset1/30 # PLEN/31 )/29 (/50 s.Offset2/54 # LEN/53 )/51 e.Commands/61 >/1
          context[55] = context[40];
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[46];
          context[62] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_PLEN], context[31] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LEN], context[53] ) )
            continue;
          if( ! refalrts::empty_seq( context[48], context[49] ) )
            continue;
          // closed e.Pattern-L as range 55
          // closed e.Pattern-R as range 57
          // closed e.Vars as range 59
          // closed e.Commands as range 61
          //DEBUG: s.Level0: 5
          //DEBUG: s.L: 52
          //DEBUG: s.Offset1: 30
          //DEBUG: s.Offset2: 54
          //DEBUG: e.Pattern-L: 55
          //DEBUG: e.Pattern-R: 57
          //DEBUG: e.Vars: 59
          //DEBUG: e.Commands: 61

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} s.Offset1/30 {REMOVED TILE} {REMOVED TILE} s.Offset2/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$25=1@2/4 AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/55 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/57 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/59 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/61 } Tile{ AsIs: )/29 HalfReuse: '*'/50 } Tile{ HalfReuse: </31 } Tile{ HalfReuse: & Add/53 HalfReuse: '*'/51 } 1/63 >/64 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[63], 1UL);
          refalrts::alloc_close_call(vm, context[64]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S25A1Z2]);
          refalrts::reinit_char(context[50], '*');
          refalrts::reinit_open_call(context[31]);
          refalrts::reinit_name(context[53], functions[efunc_Add]);
          refalrts::reinit_char(context[51], '*');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[64] );
          refalrts::push_stack( vm, context[31] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[53], context[51] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[50] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[9], context[28] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/55 s.L/52 )/9 (/12 e.Pattern-R/57 )/13 (/16 e.Vars/59 )/17 (/28 s.Offset1/30 # PLENS/31 )/29 (/50 s.Offset2/65 # LENS/54 s.Char/53 )/51 e.Commands/63 >/1
          context[55] = context[40];
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[48];
          context[62] = context[49];
          context[63] = context[46];
          context[64] = context[47];
          if( ! refalrts::ident_term( identifiers[ident_PLENS], context[31] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LENS], context[54] ) )
            continue;
          // closed e.Pattern-L as range 55
          // closed e.Pattern-R as range 57
          // closed e.Vars as range 59
          // closed e.Commands as range 63
          if( ! refalrts::svar_left( context[65], context[61], context[62] ) )
            continue;
          if( ! refalrts::empty_seq( context[61], context[62] ) )
            continue;
          //DEBUG: s.Level0: 5
          //DEBUG: s.L: 52
          //DEBUG: s.Offset1: 30
          //DEBUG: s.Char: 53
          //DEBUG: e.Pattern-L: 55
          //DEBUG: e.Pattern-R: 57
          //DEBUG: e.Vars: 59
          //DEBUG: e.Commands: 63
          //DEBUG: s.Offset2: 65

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} s.Offset1/30 {REMOVED TILE} {REMOVED TILE} s.Offset2/65 {REMOVED TILE} s.Char/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$26=1@2/4 AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/55 } Tile{ AsIs: )/51 } Tile{ HalfReuse: s.Char53 /9 AsIs: (/12 AsIs: e.Pattern-R/57 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/59 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/63 } Tile{ AsIs: )/29 HalfReuse: '*'/50 } Tile{ HalfReuse: </31 } Tile{ HalfReuse: & Add/54 } '*'/66 1/67 >/68 </69 & Add/70 '*'/71 2/72 >/73 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[66], '*');
          refalrts::alloc_number(vm, context[67], 1UL);
          refalrts::alloc_close_call(vm, context[68]);
          refalrts::alloc_open_call(vm, context[69]);
          refalrts::alloc_name(vm, context[70], functions[efunc_Add]);
          refalrts::alloc_char(vm, context[71], '*');
          refalrts::alloc_number(vm, context[72], 2UL);
          refalrts::alloc_close_call(vm, context[73]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S26A1Z2]);
          refalrts::reinit_svar( context[9], context[53] );
          refalrts::reinit_char(context[50], '*');
          refalrts::reinit_open_call(context[31]);
          refalrts::reinit_name(context[54], functions[efunc_Add]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[73] );
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[68] );
          refalrts::push_stack( vm, context[31] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::link_brackets( context[16], context[17] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[51] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[66], context[73] );
          res = refalrts::splice_elem( res, context[54] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[50] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[9], context[28] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/55 s.L/52 )/9 (/12 s.R/63 e.Pattern-R/57 )/13 (/16 e.Vars/59 )/17 (/28 s.Offset1/30 # PLENP/31 )/29 (/50 s.Offset2/54 # LENP/53 )/51 e.Commands/61 >/1
        context[55] = context[40];
        context[56] = context[41];
        context[57] = context[42];
        context[58] = context[43];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        context[62] = context[47];
        if( ! refalrts::ident_term( identifiers[ident_PLENP], context[31] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_LENP], context[53] ) )
          continue;
        if( ! refalrts::empty_seq( context[48], context[49] ) )
          continue;
        // closed e.Pattern-L as range 55
        // closed e.Vars as range 59
        // closed e.Commands as range 61
        if( ! refalrts::svar_left( context[63], context[57], context[58] ) )
          continue;
        // closed e.Pattern-R as range 57
        //DEBUG: s.Level0: 5
        //DEBUG: s.L: 52
        //DEBUG: s.Offset1: 30
        //DEBUG: s.Offset2: 54
        //DEBUG: e.Pattern-L: 55
        //DEBUG: e.Vars: 59
        //DEBUG: e.Commands: 61
        //DEBUG: s.R: 63
        //DEBUG: e.Pattern-R: 57

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} s.R/63 {REMOVED TILE} {REMOVED TILE} s.Offset1/30 {REMOVED TILE} s.Offset2/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$27=1@2/4 AsIs: s.Level0/5 AsIs: (/8 } Tile{ AsIs: e.Pattern-L/55 } Tile{ HalfReuse: )/31 HalfReuse: s.R63 /29 AsIs: (/50 } Tile{ AsIs: e.Pattern-R/57 } Tile{ AsIs: )/13 AsIs: (/16 AsIs: e.Vars/59 AsIs: )/17 AsIs: (/28 } Tile{ AsIs: e.Commands/61 } Tile{ AsIs: )/9 HalfReuse: '*'/12 } </64 & Add/65 Tile{ HalfReuse: '*'/53 HalfReuse: 1/51 } >/66 </67 & Add/68 '*'/69 2/70 >/71 </72 & Add/73 '*'/74 3/75 >/76 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[64]);
        refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
        refalrts::alloc_close_call(vm, context[66]);
        refalrts::alloc_open_call(vm, context[67]);
        refalrts::alloc_name(vm, context[68], functions[efunc_Add]);
        refalrts::alloc_char(vm, context[69], '*');
        refalrts::alloc_number(vm, context[70], 2UL);
        refalrts::alloc_close_call(vm, context[71]);
        refalrts::alloc_open_call(vm, context[72]);
        refalrts::alloc_name(vm, context[73], functions[efunc_Add]);
        refalrts::alloc_char(vm, context[74], '*');
        refalrts::alloc_number(vm, context[75], 3UL);
        refalrts::alloc_close_call(vm, context[76]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S27A1Z2]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::reinit_svar( context[29], context[63] );
        refalrts::reinit_char(context[12], '*');
        refalrts::reinit_char(context[53], '*');
        refalrts::reinit_number(context[51], 1UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[76] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[71] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[64] );
        refalrts::link_brackets( context[28], context[9] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[50], context[13] );
        refalrts::link_brackets( context[8], context[31] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[66], context[76] );
        res = refalrts::splice_evar( res, context[53], context[51] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        res = refalrts::splice_evar( res, context[9], context[12] );
        res = refalrts::splice_evar( res, context[61], context[62] );
        res = refalrts::splice_evar( res, context[13], context[28] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[31], context[50] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/40 )/9 (/12 e.Pattern-R/42 )/13 (/16 e.Vars/44 )/17 (/28 s.Offset/30 # STLEN/31 )/29 e.Commands/46 >/1
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      if( ! refalrts::ident_term( identifiers[ident_STLEN], context[31] ) )
        continue;
      // closed e.Pattern-L as range 40
      // closed e.Pattern-R as range 42
      // closed e.Vars as range 44
      // closed e.Commands as range 46
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 30
      //DEBUG: e.Pattern-L: 40
      //DEBUG: e.Pattern-R: 42
      //DEBUG: e.Vars: 44
      //DEBUG: e.Commands: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/28 } Tile{ Reuse: # StartBlock/31 AsIs: )/29 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } </48 & Add/49 1/50 Tile{ AsIs: s.Level0/5 } >/51 '*'/52 Tile{ AsIs: (/8 AsIs: e.Pattern-L/40 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/42 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/44 AsIs: )/17 } Tile{ AsIs: e.Commands/46 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[50], 1UL);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_char(vm, context[52], '*');
      refalrts::update_ident(context[31], identifiers[ident_StartBlock]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[8], context[17] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[29] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/32 )/9 (/12 e.Pattern-R/34 )/13 (/16 e.Vars/36 )/17 (/28 s.Offset/30 # LABEL/31 e.BlockName/38 )/29 e.Commands/40 >/1
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[24];
    context[41] = context[25];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[31] ) )
      continue;
    // closed e.Pattern-L as range 32
    // closed e.Pattern-R as range 34
    // closed e.Vars as range 36
    // closed e.BlockName as range 38
    // closed e.Commands as range 40
    //DEBUG: s.Level0: 5
    //DEBUG: s.Offset: 30
    //DEBUG: e.Pattern-L: 32
    //DEBUG: e.Pattern-R: 34
    //DEBUG: e.Vars: 36
    //DEBUG: e.BlockName: 38
    //DEBUG: e.Commands: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/28 s.Offset/30 # LABEL/31 e.BlockName/38 )/29 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole@4/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Pattern-L/32 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/34 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/36 AsIs: )/17 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[41] );
    refalrts::splice_to_freelist_open( vm, context[17], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 s.L/22 )/9 (/12 s.R/23 )/13 (/16 )/17 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[23], context[20], context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: s.L: 22
    //DEBUG: s.R: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 s.L/22 )/9 (/12 s.R/23 )/13 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/16 HalfReuse: # EndOfFunction/17 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[17], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[16], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.Pattern-L/18 )/9 (/12 e.Pattern-R/20 )/13 (/16 e.Vars/22 )/17 e.Commands/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Pattern-L as range 18
    // closed e.Pattern-R as range 20
    // closed e.Vars as range 22
    // closed e.Commands as range 24
    //DEBUG: s.Level0: 5
    //DEBUG: e.Pattern-L: 18
    //DEBUG: e.Pattern-R: 20
    //DEBUG: e.Vars: 22
    //DEBUG: e.Commands: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '='/4 } Tile{ HalfReuse: 'A'/1 } ' '/26 Tile{ AsIs: s.Level0/5 } '*'/27 Tile{ AsIs: (/8 AsIs: e.Pattern-L/18 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R/20 AsIs: )/13 AsIs: (/16 AsIs: e.Vars/22 AsIs: )/17 } )/28 Tile{ AsIs: e.Commands/24 } Tile{ ]] }
    refalrts::alloc_char(vm, context[26], ' ');
    refalrts::alloc_char(vm, context[27], '*');
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_char(context[4], '=');
    refalrts::reinit_char(context[1], 'A');
    refalrts::link_brackets( context[0], context[28] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[8], context[17] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole@4/4 s.Level0/5 (/8 e.dyn0/6 )/9 (/12 e.dyn1/10 )/13 (/16 e.dyn2/14 )/17 e.dyn3/2 >/1
  // closed e.dyn0 as range 6
  // closed e.dyn1 as range 10
  // closed e.dyn2 as range 14
  // closed e.dyn3 as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: e.dyn0: 6
  //DEBUG: e.dyn1: 10
  //DEBUG: e.dyn2: 14
  //DEBUG: e.dyn3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@0/4 AsIs: s.Level0/5 } '*'/18 Tile{ AsIs: (/8 AsIs: e.dyn0/6 AsIs: )/9 AsIs: (/12 AsIs: e.dyn1/10 AsIs: )/13 AsIs: (/16 AsIs: e.dyn2/14 AsIs: )/17 AsIs: e.dyn3/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[18], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_Z4("Decompile-Pattern-Hole@4", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_Z4);


static refalrts::FnResult func_gen_Decompilem_Result_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & Decompile-Result@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Result@1/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new4 as range 12
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Result@1/4 s.new6/5 (/8 e.new12/16 )/9 t.new7/10 (/14 e.new13/18 )/15 (/24 s.new8/26 s.new9/27 e.new10/22 )/25 e.new11/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    context[22] = 0;
    context[23] = 0;
    context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
    if( ! context[24] )
      continue;
    refalrts::bracket_pointers(context[24], context[25]);
    // closed e.new12 as range 16
    // closed e.new13 as range 18
    // closed e.new11 as range 20
    if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
      continue;
    if( ! refalrts::svar_left( context[27], context[22], context[23] ) )
      continue;
    // closed e.new10 as range 22
    do {
      // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/28 )/9 t.MB/10 (/14 e.Result/30 )/15 (/24 s.Offset/26 # NCS/27 e.Word/32 )/25 e.Commands/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_NCS], context[27] ) )
        continue;
      // closed e.Vars0 as range 28
      // closed e.Result as range 30
      // closed e.Word as range 32
      // closed e.Commands as range 34
      //DEBUG: t.MB: 10
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 28
      //DEBUG: e.Result: 30
      //DEBUG: e.Word: 32
      //DEBUG: e.Commands: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/28 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/30 HalfReuse: (/15 HalfReuse: # W/24 } Tile{ AsIs: e.Word/32 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/34 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_ident(context[24], identifiers[ident_W]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@1/4 s.new14/5 (/8 e.new21/28 )/9 t.new15/10 (/14 e.new22/30 )/15 (/24 s.new17/26 s.new18/27 s.new19/36 e.new20/32 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      // closed e.new21 as range 28
      // closed e.new22 as range 30
      // closed e.new16 as range 34
      if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
        continue;
      // closed e.new20 as range 32
      do {
        // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # NNS/27 s.Number/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_NNS], context[27] ) )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Number: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # N/24 } Tile{ AsIs: s.Number/36 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/41 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_ident(context[24], identifiers[ident_N]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[15], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::splice_to_freelist_open( vm, context[24], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # NS/27 s.Code/36 s.Char/45 )/25 e.Commands/43 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        context[44] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_NS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 43
        if( ! refalrts::svar_left( context[45], context[41], context[42] ) )
          continue;
        if( ! refalrts::empty_seq( context[41], context[42] ) )
          continue;
        //DEBUG: t.MB: 10
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Code: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 43
        //DEBUG: s.Char: 45

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} s.Code/36 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # C/24 } Tile{ AsIs: s.Char/45 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/43 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_ident(context[24], identifiers[ident_C]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[15], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[45] );
        refalrts::splice_to_freelist_open( vm, context[24], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TEXT/27 s.Count/36 e.Chars/41 )/25 e.Commands/43 >/1
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      context[44] = context[35];
      if( ! refalrts::ident_term( identifiers[ident_TEXT], context[27] ) )
        continue;
      // closed e.Vars0 as range 37
      // closed e.Result as range 39
      // closed e.Chars as range 41
      // closed e.Commands as range 43
      //DEBUG: t.MB: 10
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 26
      //DEBUG: s.Count: 36
      //DEBUG: e.Vars0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Chars: 41
      //DEBUG: e.Commands: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} s.Count/36 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # C/24 } Tile{ AsIs: e.Chars/41 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/43 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_ident(context[24], identifiers[ident_C]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@1/4 s.new14/5 (/8 e.new19/28 )/9 t.new15/10 (/14 e.new20/30 )/15 (/24 s.new17/26 s.new18/27 )/25 e.new16/32 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.new19 as range 28
      // closed e.new20 as range 30
      // closed e.new16 as range 32
      do {
        // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/34 )/9 t.MB/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # BL/27 )/25 e.Commands/38 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_BL], context[27] ) )
          continue;
        // closed e.Vars0 as range 34
        // closed e.Result as range 36
        // closed e.Commands as range 38
        //DEBUG: t.MB: 10
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 34
        //DEBUG: e.Result: 36
        //DEBUG: e.Commands: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 } Tile{ AsIs: (/24 } Tile{ AsIs: t.MB/10 } Tile{ AsIs: e.Result/36 } Tile{ AsIs: )/15 } Tile{ HalfReuse: (/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[27], context[25] );
        refalrts::link_brackets( context[24], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[27];
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/34 )/9 (/10 t.MB/42 e.Result/40 )/11 (/14 e.Nested/36 )/15 (/24 s.Offset/26 # BR/27 )/25 e.Commands/38 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = 0;
        context[41] = 0;
        if( ! refalrts::brackets_term( context[40], context[41], context[10] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_BR], context[27] ) )
          continue;
        // closed e.Vars0 as range 34
        // closed e.Nested as range 36
        // closed e.Commands as range 38
        context[43] = refalrts::tvar_left( context[42], context[40], context[41] );
        if( ! context[43] )
          continue;
        // closed e.Result as range 40
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 34
        //DEBUG: e.Nested: 36
        //DEBUG: e.Commands: 38
        //DEBUG: t.MB: 42
        //DEBUG: e.Result: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/10 {REMOVED TILE} {REMOVED TILE} )/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 } Tile{ AsIs: t.MB/42 } Tile{ AsIs: (/14 } Tile{ AsIs: e.Result/40 } Tile{ AsIs: (/24 } Tile{ HalfReuse: '*'/15 } Tile{ AsIs: e.Nested/36 } Tile{ HalfReuse: )/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
        refalrts::reinit_char(context[15], '*');
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[24], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[27];
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/34 )/9 t.MB/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # BLR/27 )/25 e.Commands/38 >/1
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_BLR], context[27] ) )
        continue;
      // closed e.Vars0 as range 34
      // closed e.Result as range 36
      // closed e.Commands as range 38
      //DEBUG: t.MB: 10
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 34
      //DEBUG: e.Result: 36
      //DEBUG: e.Commands: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/36 HalfReuse: (/15 HalfReuse: '*'/24 } Tile{ HalfReuse: )/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_char(context[24], '*');
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@1/4 s.new14/5 (/8 e.new20/28 )/9 t.new15/10 (/14 e.new21/30 (/38 '*'/40 e.new22/36 )/39 )/15 (/24 s.new17/26 s.new18/27 e.new19/32 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_right( context[36], context[37], context[30], context[31] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::char_left( '*', context[36], context[37] );
      if( ! context[40] )
        continue;
      // closed e.new20 as range 28
      // closed e.new21 as range 30
      // closed e.new22 as range 36
      // closed e.new19 as range 32
      // closed e.new16 as range 34
      do {
        // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/41 )/9 t.MB/10 (/14 e.Result/43 (/38 '*'/40 e.Inner/45 )/39 )/15 (/24 s.Offset/26 # ACT1/27 e.Name/47 )/25 e.Commands/49 >/1
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[32];
        context[48] = context[33];
        context[49] = context[34];
        context[50] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_ACT1], context[27] ) )
          continue;
        // closed e.Vars0 as range 41
        // closed e.Result as range 43
        // closed e.Inner as range 45
        // closed e.Name as range 47
        // closed e.Commands as range 49
        //DEBUG: t.MB: 10
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 41
        //DEBUG: e.Result: 43
        //DEBUG: e.Inner: 45
        //DEBUG: e.Name: 47
        //DEBUG: e.Commands: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 # ACT1/27 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/41 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/43 AsIs: (/38 Reuse: '!'/40 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Name/47 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Inner/45 } Tile{ AsIs: )/39 } Tile{ AsIs: )/25 AsIs: e.Commands/49 AsIs: >/1 ]] }
        refalrts::update_char(context[40], '!');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[24], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::splice_to_freelist_open( vm, context[40], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/41 )/9 t.MB/10 (/14 e.Result/43 (/38 '*'/40 e.Inner/45 )/39 )/15 (/24 s.Offset/26 # ACT_EXTRN/27 e.Name/47 )/25 e.Commands/49 >/1
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[36];
      context[46] = context[37];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[34];
      context[50] = context[35];
      if( ! refalrts::ident_term( identifiers[ident_ACTu_EXTRN], context[27] ) )
        continue;
      // closed e.Vars0 as range 41
      // closed e.Result as range 43
      // closed e.Inner as range 45
      // closed e.Name as range 47
      // closed e.Commands as range 49
      //DEBUG: t.MB: 10
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 41
      //DEBUG: e.Result: 43
      //DEBUG: e.Inner: 45
      //DEBUG: e.Name: 47
      //DEBUG: e.Commands: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 # ACT_EXTRN/27 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/41 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/43 AsIs: (/38 Reuse: '!'/40 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Name/47 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Inner/45 } Tile{ AsIs: )/39 } Tile{ AsIs: )/25 AsIs: e.Commands/49 AsIs: >/1 ]] }
      refalrts::update_char(context[40], '!');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[24], context[15] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::splice_to_freelist_open( vm, context[40], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@1/4 s.new14/5 (/8 e.new20/28 )/9 t.new15/10 (/14 e.new21/30 )/15 (/24 s.new17/26 s.new18/27 s.new19/36 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      // closed e.new20 as range 28
      // closed e.new21 as range 30
      // closed e.new16 as range 34
      if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
        continue;
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      do {
        // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TPLS/27 s.Copy/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TPLS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Copy: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.Level0
        //10: t.MB
        //26: s.Offset
        //36: s.Copy
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z1S10C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@1$10?1/47 e.Vars-B/48 (/54 # s/56 s.Id/59 '='/58 s.Copy/57 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            context[56] = refalrts::ident_left( identifiers[ident_s], context[52], context[53] );
            if( ! context[56] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[36], context[52], context[53] ) )
              continue;
            context[58] = refalrts::char_right( '=', context[52], context[53] );
            if( ! context[58] )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.Level0: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.Copy: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Id: 59

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/26 # TPLS/27 s.Copy/36 {REMOVED TILE} & Decompile-Result@1$10?1/47 e.Vars-B/48 (/54 # s/56 {REMOVED TILE} e.Vars-E/50 >/44 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # s/24 } Tile{ AsIs: s.Id/59 AsIs: '='/58 AsIs: s.Copy/57 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[15]);
            refalrts::reinit_ident(context[24], identifiers[ident_s]);
            refalrts::reinit_close_call(context[43]);
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[14], context[25] );
            refalrts::link_brackets( context[15], context[55] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[43] );
            res = refalrts::splice_evar( res, context[59], context[55] );
            refalrts::splice_to_freelist_open( vm, context[24], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TPLE/27 s.CopyR/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TPLE], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.CopyR: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.Level0
        //10: t.MB
        //26: s.Offset
        //36: s.CopyR
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z1S11C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@1$11?1/47 e.Vars-B/48 (/54 s.Type/57 s.IdL/58 s.IdR/59 '='/60 s.CopyL/61 s.CopyR/56 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[36], context[52], context[53] ) )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            context[60] = refalrts::char_left( '=', context[52], context[53] );
            if( ! context[60] )
              continue;
            if( ! refalrts::svar_left( context[61], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.Level0: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.CopyR: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Type: 57
            //DEBUG: s.IdL: 58
            //DEBUG: s.IdR: 59
            //DEBUG: s.CopyL: 61
            //5: s.Level0
            //10: t.MB
            //26: s.Offset
            //36: s.CopyR
            //37: e.Vars0
            //39: e.Result
            //41: e.Commands
            //48: e.Vars-B
            //50: e.Vars-E
            //56: s.CopyR
            //57: s.Type
            //58: s.IdL
            //59: s.IdR
            //61: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[62]);
            refalrts::alloc_name(vm, context[64], functions[efunc_gen_Decompilem_Result_Z1S11C2]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[63]);
            refalrts::push_stack( vm, context[63] );
            refalrts::push_stack( vm, context[62] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[62] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </62 & Decompile-Result@1$11?2/66 e.B/67 s.Type/71 e.E/69 >/63
              context[64] = 0;
              context[65] = 0;
              context[66] = refalrts::call_left( context[64], context[65], context[62], context[63] );
              context[67] = 0;
              context[68] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[69] = context[64];
                context[70] = context[65];
                if( ! refalrts::repeated_stvar_left( vm, context[71], context[57], context[69], context[70] ) )
                  continue;
                // closed e.E as range 69
                //DEBUG: t.MB: 10
                //DEBUG: s.Level0: 5
                //DEBUG: s.Offset: 26
                //DEBUG: s.CopyR: 36
                //DEBUG: e.Vars0: 37
                //DEBUG: e.Result: 39
                //DEBUG: e.Commands: 41
                //DEBUG: e.Vars-B: 48
                //DEBUG: e.Vars-E: 50
                //DEBUG: s.Type: 57
                //DEBUG: s.IdL: 58
                //DEBUG: s.IdR: 59
                //DEBUG: s.CopyL: 61
                //DEBUG: e.B: 67
                //DEBUG: e.E: 69

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/26 # TPLE/27 s.CopyR/36 {REMOVED TILE} & Decompile-Result@1$11?1/47 e.Vars-B/48 (/54 s.Type/57 {REMOVED TILE} e.Vars-E/50 >/44 </62 & Decompile-Result@1$11?2/66 e.B/67 s.Type/71 e.E/69 >/63 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: s.Type71 /24 } Tile{ AsIs: s.IdL/58 AsIs: s.IdR/59 AsIs: '='/60 AsIs: s.CopyL/61 AsIs: s.CopyR/56 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[15]);
                refalrts::reinit_svar( context[24], context[71] );
                refalrts::reinit_close_call(context[43]);
                refalrts::push_stack( vm, context[43] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[14], context[25] );
                refalrts::link_brackets( context[15], context[55] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[25], context[43] );
                res = refalrts::splice_evar( res, context[58], context[55] );
                refalrts::splice_to_freelist_open( vm, context[24], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[67], context[68], context[64], context[65] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[62], context[63]);
            continue;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # MULS/27 s.Copy/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_MULS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Copy: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.Level0
        //10: t.MB
        //26: s.Offset
        //36: s.Copy
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z1S12C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@1$12?1/47 e.Vars-B/48 (/54 # s/56 s.Id/59 '='/58 s.Copy/57 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            context[56] = refalrts::ident_left( identifiers[ident_s], context[52], context[53] );
            if( ! context[56] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[36], context[52], context[53] ) )
              continue;
            context[58] = refalrts::char_right( '=', context[52], context[53] );
            if( ! context[58] )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.Level0: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.Copy: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Id: 59

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/26 # MULS/27 s.Copy/36 {REMOVED TILE} & Decompile-Result@1$12?1/47 e.Vars-B/48 (/54 # s/56 {REMOVED TILE} e.Vars-E/50 >/44 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # s/24 } Tile{ AsIs: s.Id/59 AsIs: '='/58 AsIs: s.Copy/57 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[15]);
            refalrts::reinit_ident(context[24], identifiers[ident_s]);
            refalrts::reinit_close_call(context[43]);
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[14], context[25] );
            refalrts::link_brackets( context[15], context[55] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[43] );
            res = refalrts::splice_evar( res, context[59], context[55] );
            refalrts::splice_to_freelist_open( vm, context[24], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # MULE/27 s.CopyR/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_MULE], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.Level0: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.CopyR: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.Level0
        //10: t.MB
        //26: s.Offset
        //36: s.CopyR
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z1S13C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@1$13?1/47 e.Vars-B/48 (/54 s.Type/57 s.IdL/58 s.IdR/59 '='/60 s.CopyL/61 s.CopyR/56 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[36], context[52], context[53] ) )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            context[60] = refalrts::char_left( '=', context[52], context[53] );
            if( ! context[60] )
              continue;
            if( ! refalrts::svar_left( context[61], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.Level0: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.CopyR: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Type: 57
            //DEBUG: s.IdL: 58
            //DEBUG: s.IdR: 59
            //DEBUG: s.CopyL: 61
            //5: s.Level0
            //10: t.MB
            //26: s.Offset
            //36: s.CopyR
            //37: e.Vars0
            //39: e.Result
            //41: e.Commands
            //48: e.Vars-B
            //50: e.Vars-E
            //56: s.CopyR
            //57: s.Type
            //58: s.IdL
            //59: s.IdR
            //61: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[62]);
            refalrts::alloc_name(vm, context[64], functions[efunc_gen_Decompilem_Result_Z1S13C2]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[63]);
            refalrts::push_stack( vm, context[63] );
            refalrts::push_stack( vm, context[62] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[62] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </62 & Decompile-Result@1$13?2/66 e.B/67 s.Type/71 e.E/69 >/63
              context[64] = 0;
              context[65] = 0;
              context[66] = refalrts::call_left( context[64], context[65], context[62], context[63] );
              context[67] = 0;
              context[68] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[69] = context[64];
                context[70] = context[65];
                if( ! refalrts::repeated_stvar_left( vm, context[71], context[57], context[69], context[70] ) )
                  continue;
                // closed e.E as range 69
                //DEBUG: t.MB: 10
                //DEBUG: s.Level0: 5
                //DEBUG: s.Offset: 26
                //DEBUG: s.CopyR: 36
                //DEBUG: e.Vars0: 37
                //DEBUG: e.Result: 39
                //DEBUG: e.Commands: 41
                //DEBUG: e.Vars-B: 48
                //DEBUG: e.Vars-E: 50
                //DEBUG: s.Type: 57
                //DEBUG: s.IdL: 58
                //DEBUG: s.IdR: 59
                //DEBUG: s.CopyL: 61
                //DEBUG: e.B: 67
                //DEBUG: e.E: 69

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/26 # MULE/27 s.CopyR/36 {REMOVED TILE} & Decompile-Result@1$13?1/47 e.Vars-B/48 (/54 s.Type/57 {REMOVED TILE} e.Vars-E/50 >/44 </62 & Decompile-Result@1$13?2/66 e.B/67 s.Type/71 e.E/69 >/63 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@1/4 AsIs: s.Level0/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: s.Type71 /24 } Tile{ AsIs: s.IdL/58 AsIs: s.IdR/59 AsIs: '='/60 AsIs: s.CopyL/61 AsIs: s.CopyR/56 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[15]);
                refalrts::reinit_svar( context[24], context[71] );
                refalrts::reinit_close_call(context[43]);
                refalrts::push_stack( vm, context[43] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[14], context[25] );
                refalrts::link_brackets( context[15], context[55] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[25], context[43] );
                res = refalrts::splice_evar( res, context[58], context[55] );
                refalrts::splice_to_freelist_open( vm, context[24], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[67], context[68], context[64], context[65] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[62], context[63]);
            continue;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/37 )/9 '$'/10 (/14 e.Result/39 )/15 (/24 s.Offset1/26 # ECOND/27 s.Offset3/36 )/25 (/45 s.Offset2/53 # LABEL/54 e.Name/43 )/46 (/49 s.Offset3/52 # POPVF/51 )/50 e.Commands/41 >/1
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[34];
      context[42] = context[35];
      if( ! refalrts::char_term( '$', context[10] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_ECOND], context[27] ) )
        continue;
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_left( context[43], context[44], context[41], context[42] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[41], context[42] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = refalrts::ident_right( identifiers[ident_POPVF], context[47], context[48] );
      if( ! context[51] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[52], context[36], context[47], context[48] ) )
        continue;
      if( ! refalrts::empty_seq( context[47], context[48] ) )
        continue;
      // closed e.Vars0 as range 37
      // closed e.Result as range 39
      // closed e.Commands as range 41
      if( ! refalrts::svar_left( context[53], context[43], context[44] ) )
        continue;
      context[54] = refalrts::ident_left( identifiers[ident_LABEL], context[43], context[44] );
      if( ! context[54] )
        continue;
      // closed e.Name as range 43
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset1: 26
      //DEBUG: s.Offset3: 36
      //DEBUG: e.Vars0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Commands: 41
      //DEBUG: s.Offset2: 53
      //DEBUG: e.Name: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1/26 {REMOVED TILE} s.Offset3/36 {REMOVED TILE} s.Offset2/53 {REMOVED TILE} {REMOVED TILE} s.Offset3/52 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/39 AsIs: )/15 AsIs: (/24 } Tile{ Reuse: # EndCondition/54 AsIs: e.Name/43 AsIs: )/46 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } Tile{ HalfReuse: & Add/27 } '*'/55 3/56 >/57 Tile{ AsIs: (/49 } Tile{ HalfReuse: </51 } & Add/58 '*'/59 1/60 >/61 Tile{ AsIs: )/25 AsIs: (/45 } </62 & Add/63 '*'/64 2/65 >/66 Tile{ AsIs: )/9 } (/67 Tile{ AsIs: e.Vars0/37 } Tile{ AsIs: )/50 AsIs: e.Commands/41 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[55], '*');
      refalrts::alloc_number(vm, context[56], 3UL);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_name(vm, context[58], functions[efunc_Add]);
      refalrts::alloc_char(vm, context[59], '*');
      refalrts::alloc_number(vm, context[60], 1UL);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
      refalrts::alloc_char(vm, context[64], '*');
      refalrts::alloc_number(vm, context[65], 2UL);
      refalrts::alloc_close_call(vm, context[66]);
      refalrts::alloc_open_bracket(vm, context[67]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[14], identifiers[ident_Result]);
      refalrts::update_ident(context[54], identifiers[ident_EndCondition]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[27], functions[efunc_Add]);
      refalrts::reinit_open_call(context[51]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[67], context[50] );
      refalrts::link_brackets( context[45], context[9] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[62] );
      refalrts::link_brackets( context[49], context[25] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[8] );
      refalrts::link_brackets( context[24], context[46] );
      refalrts::link_brackets( context[10], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[50];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[62], context[66] );
      res = refalrts::splice_evar( res, context[25], context[45] );
      res = refalrts::splice_evar( res, context[58], context[61] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_evar( res, context[55], context[57] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[54], context[46] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@1/4 s.new14/5 (/8 e.new17/28 )/9 '$'/10 (/14 e.new18/30 )/15 (/24 s.new16/26 # OUTEST/27 )/25 e.new15/32 >/1
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[21];
    if( ! refalrts::char_term( '$', context[10] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_OUTEST], context[27] ) )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    // closed e.new17 as range 28
    // closed e.new18 as range 30
    // closed e.new15 as range 32
    do {
      // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/34 )/9 '$'/10 (/14 e.Result/36 )/15 (/24 s.Offset1/26 # OUTEST/27 )/25 (/42 s.Offset2/45 # OUTEST/44 )/43 e.Commands/38 >/1
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_right( identifiers[ident_OUTEST], context[40], context[41] );
      if( ! context[44] )
        continue;
      // closed e.Vars0 as range 34
      // closed e.Result as range 36
      // closed e.Commands as range 38
      if( ! refalrts::svar_left( context[45], context[40], context[41] ) )
        continue;
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      //DEBUG: s.Level0: 5
      //DEBUG: s.Offset1: 26
      //DEBUG: e.Vars0: 34
      //DEBUG: e.Result: 36
      //DEBUG: e.Commands: 38
      //DEBUG: s.Offset2: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/34 {REMOVED TILE} {REMOVED TILE} s.Offset1/26 {REMOVED TILE} s.Offset2/45 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/36 AsIs: )/15 AsIs: (/24 } Tile{ Reuse: # NextSentence/27 AsIs: )/25 AsIs: (/42 } # NextSentence/46 Tile{ AsIs: )/9 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@1/4 AsIs: s.Level0/5 AsIs: (/8 } )/47 Tile{ HalfReuse: (/44 AsIs: )/43 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[46], identifiers[ident_NextSentence]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[14], identifiers[ident_Result]);
      refalrts::update_ident(context[27], identifiers[ident_NextSentence]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z1]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[44], context[43] );
      refalrts::link_brackets( context[8], context[47] );
      refalrts::link_brackets( context[42], context[9] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[10], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[44];
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[27], context[42] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/34 )/9 '$'/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # OUTEST/27 )/25 e.Commands/38 >/1
    context[34] = context[28];
    context[35] = context[29];
    context[36] = context[30];
    context[37] = context[31];
    context[38] = context[32];
    context[39] = context[33];
    // closed e.Vars0 as range 34
    // closed e.Result as range 36
    // closed e.Commands as range 38
    //DEBUG: s.Level0: 5
    //DEBUG: s.Offset: 26
    //DEBUG: e.Vars0: 34
    //DEBUG: e.Result: 36
    //DEBUG: e.Commands: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/34 {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/36 AsIs: )/15 AsIs: (/24 } # NextSentence/40 Tile{ AsIs: )/9 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@1/4 AsIs: s.Level0/5 AsIs: (/8 } )/41 Tile{ HalfReuse: (/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[40], identifiers[ident_NextSentence]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::reinit_open_bracket(context[10]);
    refalrts::reinit_ident(context[14], identifiers[ident_Result]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z1]);
    refalrts::reinit_open_bracket(context[27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[27], context[25] );
    refalrts::link_brackets( context[8], context[41] );
    refalrts::link_brackets( context[24], context[9] );
    refalrts::link_brackets( context[10], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[10], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/16 )/9 t.MB/10 (/14 e.Result/18 )/15 e.Commands/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.Vars0 as range 16
    // closed e.Result as range 18
    // closed e.Commands as range 20
    //DEBUG: t.MB: 10
    //DEBUG: s.Level0: 5
    //DEBUG: e.Vars0: 16
    //DEBUG: e.Result: 18
    //DEBUG: e.Commands: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '='/4 } 'C'/22 Tile{ HalfReuse: ' '/1 } Tile{ AsIs: s.Level0/5 } '*'/23 Tile{ AsIs: (/8 AsIs: e.Vars0/16 AsIs: )/9 } Tile{ AsIs: (/14 } Tile{ AsIs: t.MB/10 } Tile{ AsIs: e.Result/18 } Tile{ AsIs: )/15 } )/24 Tile{ AsIs: e.Commands/20 } Tile{ ]] }
    refalrts::alloc_char(vm, context[22], 'C');
    refalrts::alloc_char(vm, context[23], '*');
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_char(context[4], '=');
    refalrts::reinit_char(context[1], ' ');
    refalrts::link_brackets( context[0], context[24] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Result@1/4 s.Level0/5 (/8 e.Vars0/6 )/9 t.dyn0/10 (/14 e.dyn1/12 )/15 e.dyn2/2 >/1
  // closed e.Vars0 as range 6
  // closed e.dyn1 as range 12
  // closed e.dyn2 as range 2
  //DEBUG: t.dyn0: 10
  //DEBUG: s.Level0: 5
  //DEBUG: e.Vars0: 6
  //DEBUG: e.dyn1: 12
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Result@0/4 AsIs: s.Level0/5 HalfReuse: '*'/8 } Tile{ AsIs: (/14 } Tile{ AsIs: e.Vars0/6 } )/16 Tile{ HalfReuse: (/9 AsIs: t.dyn0/10 } Tile{ AsIs: e.dyn1/12 } Tile{ AsIs: )/15 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Result_Z0]);
  refalrts::reinit_char(context[8], '*');
  refalrts::reinit_open_bracket(context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[15] );
  refalrts::link_brackets( context[14], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Result_Z1("Decompile-Result@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Result_Z1);


static refalrts::FnResult func_gen_DoFormatExpr_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 80 elems
  refalrts::Iter context[80];
  refalrts::zeros( context, 80 );
  // </0 & DoFormatExpr@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr@4/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoFormatExpr@4/4 (/7 e.new5/17 )/8 (/11 e.new6/19 )/12 (/15 e.new7/21 )/16 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.new5 as range 17
    // closed e.new6 as range 19
    // closed e.new7 as range 21
    do {
      // </0 & DoFormatExpr@4/4 (/7 e.Limit/23 )/8 (/11 e.Indent0/25 )/12 (/15 e.Result/27 ' '/29 )/16 >/1
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = context[22];
      context[29] = refalrts::char_right( ' ', context[27], context[28] );
      if( ! context[29] )
        continue;
      // closed e.Limit as range 23
      // closed e.Indent0 as range 25
      // closed e.Result as range 27
      //DEBUG: e.Limit: 23
      //DEBUG: e.Indent0: 25
      //DEBUG: e.Result: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DoFormatExpr@4/4 (/7 e.Limit/23 )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/25 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ AsIs: ' '/29 HalfReuse: ' '/16 } Tile{ AsIs: e.Result/27 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_char(context[12], ' ');
      refalrts::reinit_char(context[15], ' ');
      refalrts::reinit_char(context[16], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[11], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[16] );
      res = refalrts::splice_evar( res, context[11], context[15] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@4/4 (/7 e.Limit/23 )/8 (/11 e.Indent0/25 )/12 (/15 e.Result/27 )/16 >/1
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    context[28] = context[22];
    // closed e.Limit as range 23
    // closed e.Indent0 as range 25
    // closed e.Result as range 27
    //DEBUG: e.Limit: 23
    //DEBUG: e.Indent0: 25
    //DEBUG: e.Result: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} e.Limit/23 )/8 {REMOVED TILE} {REMOVED TILE} )/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/25 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: ' '/4 HalfReuse: ' '/7 } Tile{ AsIs: e.Result/27 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_char(context[12], ' ');
    refalrts::reinit_char(context[15], ' ');
    refalrts::reinit_char(context[4], ' ');
    refalrts::reinit_char(context[7], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr@4/4 (/7 e.new5/17 )/8 (/11 e.new6/19 )/12 (/15 e.new7/21 )/16 ';'/25 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = refalrts::char_left( ';', context[23], context[24] );
    if( ! context[25] )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.new5 as range 17
    // closed e.new6 as range 19
    // closed e.new7 as range 21
    do {
      // </0 & DoFormatExpr@4/4 (/7 e.Limit/26 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 ' '/32 )/16 ';'/25 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = refalrts::char_right( ' ', context[30], context[31] );
      if( ! context[32] )
        continue;
      // closed e.Limit as range 26
      // closed e.Indent0 as range 28
      // closed e.Result as range 30
      //DEBUG: e.Limit: 26
      //DEBUG: e.Indent0: 28
      //DEBUG: e.Result: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoFormatExpr@4/4 (/7 e.Limit/26 )/8 (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Indent0/28 } Tile{ Reuse: ' '/25 HalfReuse: ' '/1 } Tile{ HalfReuse: ' '/12 HalfReuse: ' '/15 AsIs: e.Result/30 Reuse: ';'/32 AsIs: )/16 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_char(context[25], ' ');
      refalrts::reinit_char(context[1], ' ');
      refalrts::reinit_char(context[12], ' ');
      refalrts::reinit_char(context[15], ' ');
      refalrts::update_char(context[32], ';');
      refalrts::link_brackets( context[0], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[12], context[16] );
      res = refalrts::splice_evar( res, context[25], context[1] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@4/4 (/7 e.Limit/26 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 )/16 ';'/25 >/1
    context[26] = context[17];
    context[27] = context[18];
    context[28] = context[19];
    context[29] = context[20];
    context[30] = context[21];
    context[31] = context[22];
    // closed e.Limit as range 26
    // closed e.Indent0 as range 28
    // closed e.Result as range 30
    //DEBUG: e.Limit: 26
    //DEBUG: e.Indent0: 28
    //DEBUG: e.Result: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} e.Limit/26 )/8 {REMOVED TILE} {REMOVED TILE} )/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Indent0/28 HalfReuse: ' '/12 HalfReuse: ' '/15 } Tile{ HalfReuse: ' '/4 HalfReuse: ' '/7 } Tile{ AsIs: e.Result/30 } Tile{ AsIs: ';'/25 HalfReuse: )/1 ]] }
    refalrts::reinit_char(context[12], ' ');
    refalrts::reinit_char(context[15], ' ');
    refalrts::reinit_char(context[4], ' ');
    refalrts::reinit_char(context[7], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoFormatExpr@4/4 (/7 e.new6/17 s.new7/25 )/8 (/11 e.new8/19 )/12 (/15 e.new9/21 )/16 e.new5/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.new8 as range 19
    // closed e.new9 as range 21
    // closed e.new5 as range 23
    if( ! refalrts::svar_right( context[25], context[17], context[18] ) )
      continue;
    // closed e.new6 as range 17
    do {
      // </0 & DoFormatExpr@4/4 (/7 '-'/34 s.Limit/25 )/8 (/11 e.Indent0/28 )/12 (/15 e.Result/30 )/16 e.Tail/32 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[24];
      context[34] = refalrts::char_left( '-', context[26], context[27] );
      if( ! context[34] )
        continue;
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.Indent0 as range 28
      // closed e.Result as range 30
      // closed e.Tail as range 32
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 28
      //DEBUG: e.Result: 30
      //DEBUG: e.Tail: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/35 e.Indent0/28/36"    "/38 Tile{ AsIs: e.Result/30 } )/40 Tile{ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 HalfReuse: 60/34 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/28 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: )/16 AsIs: e.Tail/32 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::copy_evar(vm, context[36], context[37], context[28], context[29]);
      refalrts::alloc_chars(vm, context[38], context[39], "    ", 4);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::reinit_number(context[34], 60UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[35], context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_evar( res, context[0], context[34] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[35], context[39] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@4/4 (/7 s.new13/25 )/8 (/11 e.new14/26 )/12 (/15 e.new15/28 )/16 (/34 s.new10/36 e.new11/32 )/35 e.new12/30 >/1
    context[26] = context[19];
    context[27] = context[20];
    context[28] = context[21];
    context[29] = context[22];
    context[30] = context[23];
    context[31] = context[24];
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.new14 as range 26
    // closed e.new15 as range 28
    // closed e.new12 as range 30
    if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
      continue;
    // closed e.new11 as range 32
    do {
      // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 # W/36 e.Word/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_W], context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Word as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Word: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$6=1@4/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/43 } Tile{ HalfReuse: )/7 } </45 & Lenw/46 </47 & FormatWord:1/48 </49 Tile{ HalfReuse: & Type/36 AsIs: e.Word/41 HalfReuse: >/35 } >/50 ' '/51 >/52 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_Lenw]);
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::alloc_name(vm, context[48], functions[efunc_gen_FormatWord_B1]);
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_char(vm, context[51], ' ');
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S6A1Z4]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_name(context[36], functions[efunc_Type]);
      refalrts::reinit_close_call(context[35]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[34], context[7] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[50], context[52] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      res = refalrts::splice_evar( res, context[45], context[49] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 # N/36 s.Number/45 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_N], context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Tail as range 43
      if( ! refalrts::svar_left( context[45], context[41], context[42] ) )
        continue;
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Tail: 43
      //DEBUG: s.Number: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$7=1@4/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/43 } Tile{ HalfReuse: )/7 } </46 & Lenw/47 </48 Tile{ HalfReuse: & Symb/36 AsIs: s.Number/45 HalfReuse: >/35 } ' '/49 >/50 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Lenw]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_char(vm, context[49], ' ');
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S7A1Z4]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_name(context[36], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[35]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[34], context[7] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@4/4 (/7 s.new18/25 )/8 (/11 e.new19/37 )/12 (/15 e.new20/39 )/16 (/34 # C/36 e.new17/41 )/35 e.new16/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_C], context[36] ) )
        continue;
      // closed e.new19 as range 37
      // closed e.new20 as range 39
      // closed e.new17 as range 41
      // closed e.new16 as range 43
      do {
        // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/45 )/12 (/15 e.Result/47 )/16 (/34 # C/36 e.Chars1/49 )/35 (/55 # C/57 e.Chars2/53 )/56 e.Tail/51 >/1
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = 0;
        context[54] = 0;
        context[55] = refalrts::brackets_left( context[53], context[54], context[51], context[52] );
        if( ! context[55] )
          continue;
        refalrts::bracket_pointers(context[55], context[56]);
        context[57] = refalrts::ident_left( identifiers[ident_C], context[53], context[54] );
        if( ! context[57] )
          continue;
        // closed e.Indent0 as range 45
        // closed e.Result as range 47
        // closed e.Chars1 as range 49
        // closed e.Chars2 as range 53
        // closed e.Tail as range 51
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 45
        //DEBUG: e.Result: 47
        //DEBUG: e.Chars1: 49
        //DEBUG: e.Chars2: 53
        //DEBUG: e.Tail: 51

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/35 (/55 # C/57 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 AsIs: s.Limit/25 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/45 AsIs: )/12 AsIs: (/15 AsIs: e.Result/47 AsIs: )/16 AsIs: (/34 AsIs: # C/36 } Tile{ AsIs: e.Chars1/49 } Tile{ AsIs: e.Chars2/53 } Tile{ AsIs: )/56 AsIs: e.Tail/51 AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[34], context[56] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[56];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        refalrts::splice_to_freelist_open( vm, context[36], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoFormatExpr@4/4 (/7 s.new24/25 )/8 (/11 e.new25/45 )/12 (/15 e.new26/47 )/16 (/34 # C/36 s.new22/53 e.new23/49 )/35 e.new21/51 >/1
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        // closed e.new25 as range 45
        // closed e.new26 as range 47
        // closed e.new21 as range 51
        if( ! refalrts::svar_left( context[53], context[49], context[50] ) )
          continue;
        // closed e.new23 as range 49
        do {
          // </0 & DoFormatExpr@4/4 (/7 s.new30/25 )/8 (/11 e.new31/54 )/12 (/15 e.new32/56 '\''/62 )/16 (/34 # C/36 s.new28/53 e.new29/58 )/35 e.new27/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          context[62] = refalrts::char_right( '\'', context[56], context[57] );
          if( ! context[62] )
            continue;
          // closed e.new31 as range 54
          // closed e.new32 as range 56
          // closed e.new29 as range 58
          // closed e.new27 as range 60
          do {
            // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\\'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\\', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\\'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\\');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\''/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\'', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\''/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\'');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\"'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\"', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: '\"'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], '\"');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\n'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\n', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 'n'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 'n');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\t'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\t', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 't'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 't');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 '\r'/53 e.Chars/67 )/35 e.Tail/69 >/1
            context[63] = context[54];
            context[64] = context[55];
            context[65] = context[56];
            context[66] = context[57];
            context[67] = context[58];
            context[68] = context[59];
            context[69] = context[60];
            context[70] = context[61];
            if( ! refalrts::char_term( '\r', context[53] ) )
              continue;
            // closed e.Indent0 as range 63
            // closed e.Result as range 65
            // closed e.Chars as range 67
            // closed e.Tail as range 69
            //DEBUG: s.Limit: 25
            //DEBUG: e.Indent0: 63
            //DEBUG: e.Result: 65
            //DEBUG: e.Chars: 67
            //DEBUG: e.Tail: 69

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </71 & Sub/72 Tile{ AsIs: s.Limit/25 } 2/73 >/74 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 Reuse: '\\'/62 HalfReuse: 'r'/16 HalfReuse: '\''/34 HalfReuse: )/36 HalfReuse: (/53 } # C/75 Tile{ AsIs: e.Chars/67 } Tile{ AsIs: )/35 AsIs: e.Tail/69 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Sub]);
            refalrts::alloc_number(vm, context[73], 2UL);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::alloc_ident(vm, context[75], identifiers[ident_C]);
            refalrts::update_char(context[62], '\\');
            refalrts::reinit_char(context[16], 'r');
            refalrts::reinit_char(context[34], '\'');
            refalrts::reinit_close_bracket(context[36]);
            refalrts::reinit_open_bracket(context[53]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[53], context[35] );
            refalrts::link_brackets( context[15], context[36] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[71] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[35];
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[8], context[53] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[71], context[72] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/63 )/12 (/15 e.Result/65 '\''/62 )/16 (/34 # C/36 s.Char/53 e.Chars/67 )/35 e.Tail/69 >/1
          context[63] = context[54];
          context[64] = context[55];
          context[65] = context[56];
          context[66] = context[57];
          context[67] = context[58];
          context[68] = context[59];
          context[69] = context[60];
          context[70] = context[61];
          // closed e.Indent0 as range 63
          // closed e.Result as range 65
          // closed e.Chars as range 67
          // closed e.Tail as range 69
          //DEBUG: s.Limit: 25
          //DEBUG: s.Char: 53
          //DEBUG: e.Indent0: 63
          //DEBUG: e.Result: 65
          //DEBUG: e.Chars: 67
          //DEBUG: e.Tail: 69

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$9=1@4/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/63 AsIs: )/12 AsIs: (/15 AsIs: e.Result/65 HalfReuse: )/62 HalfReuse: (/16 } Tile{ AsIs: e.Chars/67 } )/71 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/69 } Tile{ AsIs: )/35 } </72 & Lenw/73 Tile{ HalfReuse: </34 HalfReuse: & EscapeChar$7=1/36 AsIs: s.Char/53 } </74 & Ord/75 s.Char/53/76 >/77 >/78 >/79 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[71]);
          refalrts::alloc_open_call(vm, context[72]);
          refalrts::alloc_name(vm, context[73], functions[efunc_Lenw]);
          refalrts::alloc_open_call(vm, context[74]);
          refalrts::alloc_name(vm, context[75], functions[efunc_Ord]);
          refalrts::copy_stvar(vm, context[76], context[53]);
          refalrts::alloc_close_call(vm, context[77]);
          refalrts::alloc_close_call(vm, context[78]);
          refalrts::alloc_close_call(vm, context[79]);
          refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S9A1Z4]);
          refalrts::reinit_svar( context[8], context[25] );
          refalrts::reinit_close_bracket(context[62]);
          refalrts::reinit_open_bracket(context[16]);
          refalrts::reinit_open_call(context[34]);
          refalrts::reinit_name(context[36], functions[efunc_gen_EscapeChar_S7A1]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[79] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[78] );
          refalrts::push_stack( vm, context[34] );
          refalrts::push_stack( vm, context[77] );
          refalrts::push_stack( vm, context[74] );
          refalrts::link_brackets( context[7], context[35] );
          refalrts::link_brackets( context[16], context[71] );
          refalrts::link_brackets( context[15], context[62] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[74], context[79] );
          res = refalrts::splice_evar( res, context[34], context[53] );
          res = refalrts::splice_evar( res, context[72], context[73] );
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_elem( res, context[7] );
          res = refalrts::splice_elem( res, context[71] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[8], context[16] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\\'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\\', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\\'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\\');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\''/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\'', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\''/36 AsIs: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\"'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\"', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: '\"'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], '\"');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\n'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\n', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 'n'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 'n');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\t'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\t', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 't'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 't');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 '\r'/53 e.Chars/58 )/35 e.Tail/60 >/1
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[47];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[51];
          context[61] = context[52];
          if( ! refalrts::char_term( '\r', context[53] ) )
            continue;
          // closed e.Indent0 as range 54
          // closed e.Result as range 56
          // closed e.Chars as range 58
          // closed e.Tail as range 60
          //DEBUG: s.Limit: 25
          //DEBUG: e.Indent0: 54
          //DEBUG: e.Result: 56
          //DEBUG: e.Chars: 58
          //DEBUG: e.Tail: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </62 & Sub/63 Tile{ AsIs: s.Limit/25 } 4/64 >/65 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 HalfReuse: '\''/16 HalfReuse: '\\'/34 HalfReuse: 'r'/36 Reuse: '\''/53 } )/66 (/67 # C/68 Tile{ AsIs: e.Chars/58 } Tile{ AsIs: )/35 AsIs: e.Tail/60 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Sub]);
          refalrts::alloc_number(vm, context[64], 4UL);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_C]);
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_char(context[34], '\\');
          refalrts::reinit_char(context[36], 'r');
          refalrts::update_char(context[53], '\'');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[35] );
          refalrts::link_brackets( context[15], context[66] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[35];
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[66], context[68] );
          res = refalrts::splice_evar( res, context[8], context[53] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/54 )/12 (/15 e.Result/56 )/16 (/34 # C/36 s.Char/53 e.Chars/58 )/35 e.Tail/60 >/1
        context[54] = context[45];
        context[55] = context[46];
        context[56] = context[47];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[50];
        context[60] = context[51];
        context[61] = context[52];
        // closed e.Indent0 as range 54
        // closed e.Result as range 56
        // closed e.Chars as range 58
        // closed e.Tail as range 60
        //DEBUG: s.Limit: 25
        //DEBUG: s.Char: 53
        //DEBUG: e.Indent0: 54
        //DEBUG: e.Result: 56
        //DEBUG: e.Chars: 58
        //DEBUG: e.Tail: 60

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$10=1@4/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/54 AsIs: )/12 AsIs: (/15 AsIs: e.Result/56 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Chars/58 } )/62 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/60 } Tile{ AsIs: )/35 } </63 & Lenw/64 '\''/65 </66 Tile{ HalfReuse: & EscapeChar$7=1/36 AsIs: s.Char/53 } </67 & Ord/68 s.Char/53/69 >/70 >/71 '\''/72 >/73 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
        refalrts::alloc_char(vm, context[65], '\'');
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_open_call(vm, context[67]);
        refalrts::alloc_name(vm, context[68], functions[efunc_Ord]);
        refalrts::copy_stvar(vm, context[69], context[53]);
        refalrts::alloc_close_call(vm, context[70]);
        refalrts::alloc_close_call(vm, context[71]);
        refalrts::alloc_char(vm, context[72], '\'');
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S10A1Z4]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_name(context[36], functions[efunc_gen_EscapeChar_S7A1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[71] );
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[67] );
        refalrts::link_brackets( context[7], context[35] );
        refalrts::link_brackets( context[34], context[62] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[67], context[73] );
        res = refalrts::splice_evar( res, context[36], context[53] );
        res = refalrts::splice_evar( res, context[63], context[66] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[62] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/45 )/12 (/15 e.Result/47 )/16 (/34 # C/36 )/35 e.Tail/49 >/1
      context[45] = context[37];
      context[46] = context[38];
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[43];
      context[50] = context[44];
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      // closed e.Indent0 as range 45
      // closed e.Result as range 47
      // closed e.Tail as range 49
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 45
      //DEBUG: e.Result: 47
      //DEBUG: e.Tail: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } Tile{ HalfReuse: </36 HalfReuse: & Sub/35 } Tile{ AsIs: s.Limit/25 } 1/51 >/52 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/45 AsIs: )/12 AsIs: (/15 AsIs: e.Result/47 HalfReuse: ' '/16 HalfReuse: )/34 } Tile{ AsIs: e.Tail/49 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[51], 1UL);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::reinit_open_call(context[36]);
      refalrts::reinit_name(context[35], functions[efunc_Sub]);
      refalrts::reinit_char(context[16], ' ');
      refalrts::reinit_close_bracket(context[34]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[36] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[36], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@4/4 (/7 s.new22/25 )/8 (/11 e.new23/37 )/12 (/15 e.new24/39 )/16 (/34 s.new17/36 e.new18/41 s.new19/47 s.new20/46 s.new21/45 )/35 e.new16/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      // closed e.new23 as range 37
      // closed e.new24 as range 39
      // closed e.new16 as range 43
      if( ! refalrts::svar_right( context[45], context[41], context[42] ) )
        continue;
      if( ! refalrts::svar_right( context[46], context[41], context[42] ) )
        continue;
      if( ! refalrts::svar_right( context[47], context[41], context[42] ) )
        continue;
      // closed e.new18 as range 41
      do {
        // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/48 )/12 (/15 e.Result/50 )/16 (/34 # s/36 s.Id/47 '='/46 s.Copy/45 )/35 e.Tail/52 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[43];
        context[53] = context[44];
        if( ! refalrts::char_term( '=', context[46] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_s], context[36] ) )
          continue;
        if( ! refalrts::empty_seq( context[41], context[42] ) )
          continue;
        // closed e.Indent0 as range 48
        // closed e.Result as range 50
        // closed e.Tail as range 52
        //DEBUG: s.Limit: 25
        //DEBUG: s.Id: 47
        //DEBUG: s.Copy: 45
        //DEBUG: e.Indent0: 48
        //DEBUG: e.Result: 50
        //DEBUG: e.Tail: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.Copy/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$12=1@4/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/48 AsIs: )/12 AsIs: (/15 AsIs: e.Result/50 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/52 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/54"s."/55 </57 Tile{ HalfReuse: & Symb/36 AsIs: s.Id/47 HalfReuse: >/46 } ' '/58 >/59 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[54], functions[efunc_Lenw]);
        refalrts::alloc_chars(vm, context[55], context[56], "s.", 2);
        refalrts::alloc_open_call(vm, context[57]);
        refalrts::alloc_char(vm, context[58], ' ');
        refalrts::alloc_close_call(vm, context[59]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S12A1Z4]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[36], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[46]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[59] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[57] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[36], context[46] );
        res = refalrts::splice_evar( res, context[54], context[57] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@4/4 (/7 s.new31/25 )/8 (/11 e.new32/48 )/12 (/15 e.new33/50 )/16 (/34 s.new26/36 s.new29/56 s.new30/57 '='/47 s.new28/46 s.new27/45 )/35 e.new25/54 >/1
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      context[52] = context[41];
      context[53] = context[42];
      context[54] = context[43];
      context[55] = context[44];
      if( ! refalrts::char_term( '=', context[47] ) )
        continue;
      // closed e.new32 as range 48
      // closed e.new33 as range 50
      // closed e.new25 as range 54
      if( ! refalrts::svar_left( context[56], context[52], context[53] ) )
        continue;
      if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
        continue;
      if( ! refalrts::empty_seq( context[52], context[53] ) )
        continue;
      do {
        // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/58 )/12 (/15 e.Result/60 )/16 (/34 # t/36 s.IdL/56 s.IdR/57 '='/47 s.CopyL/46 s.CopyR/45 )/35 e.Tail/62 >/1
        context[58] = context[48];
        context[59] = context[49];
        context[60] = context[50];
        context[61] = context[51];
        context[62] = context[54];
        context[63] = context[55];
        if( ! refalrts::ident_term( identifiers[ident_t], context[36] ) )
          continue;
        // closed e.Indent0 as range 58
        // closed e.Result as range 60
        // closed e.Tail as range 62
        //DEBUG: s.Limit: 25
        //DEBUG: s.IdL: 56
        //DEBUG: s.IdR: 57
        //DEBUG: s.CopyL: 46
        //DEBUG: s.CopyR: 45
        //DEBUG: e.Indent0: 58
        //DEBUG: e.Result: 60
        //DEBUG: e.Tail: 62

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.IdR/57 {REMOVED TILE} s.CopyL/46 s.CopyR/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$13=1@4/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/58 AsIs: )/12 AsIs: (/15 AsIs: e.Result/60 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/62 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/64 Tile{ Reuse: 't'/47 } '.'/65 </66 Tile{ HalfReuse: & Symb/36 AsIs: s.IdL/56 } >/67 ' '/68 >/69 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
        refalrts::alloc_char(vm, context[65], '.');
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_char(vm, context[68], ' ');
        refalrts::alloc_close_call(vm, context[69]);
        refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S13A1Z4]);
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_open_call(context[7]);
        refalrts::update_char(context[47], 't');
        refalrts::reinit_name(context[36], functions[efunc_Symb]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[69] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[66] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[67], context[69] );
        res = refalrts::splice_evar( res, context[36], context[56] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_elem( res, context[64] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/58 )/12 (/15 e.Result/60 )/16 (/34 # e/36 s.IdL/56 s.IdR/57 '='/47 s.CopyL/46 s.CopyR/45 )/35 e.Tail/62 >/1
      context[58] = context[48];
      context[59] = context[49];
      context[60] = context[50];
      context[61] = context[51];
      context[62] = context[54];
      context[63] = context[55];
      if( ! refalrts::ident_term( identifiers[ident_e], context[36] ) )
        continue;
      // closed e.Indent0 as range 58
      // closed e.Result as range 60
      // closed e.Tail as range 62
      //DEBUG: s.Limit: 25
      //DEBUG: s.IdL: 56
      //DEBUG: s.IdR: 57
      //DEBUG: s.CopyL: 46
      //DEBUG: s.CopyR: 45
      //DEBUG: e.Indent0: 58
      //DEBUG: e.Result: 60
      //DEBUG: e.Tail: 62

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} s.IdR/57 {REMOVED TILE} s.CopyL/46 s.CopyR/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$14=1@4/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/58 AsIs: )/12 AsIs: (/15 AsIs: e.Result/60 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Tail/62 } Tile{ AsIs: )/35 } Tile{ HalfReuse: </7 } & Lenw/64 Tile{ Reuse: 'e'/47 } '.'/65 </66 Tile{ HalfReuse: & Symb/36 AsIs: s.IdL/56 } >/67 ' '/68 >/69 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[64], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[65], '.');
      refalrts::alloc_open_call(vm, context[66]);
      refalrts::alloc_close_call(vm, context[67]);
      refalrts::alloc_char(vm, context[68], ' ');
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S14A1Z4]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_open_call(context[7]);
      refalrts::update_char(context[47], 'e');
      refalrts::reinit_name(context[36], functions[efunc_Symb]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[67] );
      refalrts::push_stack( vm, context[66] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[36], context[56] );
      res = refalrts::splice_evar( res, context[65], context[66] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[64] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@4/4 (/7 s.new18/25 )/8 (/11 e.new19/37 )/12 (/15 e.new20/39 )/16 (/34 s.new17/36 )/35 e.new16/41 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      // closed e.new19 as range 37
      // closed e.new20 as range 39
      // closed e.new16 as range 41
      do {
        // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 )/16 (/34 # LB/36 )/35 e.Tail/47 >/1
        context[43] = context[37];
        context[44] = context[38];
        context[45] = context[39];
        context[46] = context[40];
        context[47] = context[41];
        context[48] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_LB], context[36] ) )
          continue;
        // closed e.Indent0 as range 43
        // closed e.Result as range 45
        // closed e.Tail as range 47
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 43
        //DEBUG: e.Result: 45
        //DEBUG: e.Tail: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } Tile{ HalfReuse: </36 HalfReuse: & Sub/35 } Tile{ AsIs: s.Limit/25 } 1/49 >/50 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: '('/16 HalfReuse: )/34 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[49], 1UL);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::reinit_open_call(context[36]);
        refalrts::reinit_name(context[35], functions[efunc_Sub]);
        refalrts::reinit_char(context[16], '(');
        refalrts::reinit_close_bracket(context[34]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[34] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[36] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[8], context[34] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[36], context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@4/4 (/7 s.new22/25 )/8 (/11 e.new23/43 )/12 (/15 e.new24/45 )/16 (/34 # RB/36 )/35 e.new21/47 >/1
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      context[48] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_RB], context[36] ) )
        continue;
      // closed e.new23 as range 43
      // closed e.new24 as range 45
      // closed e.new21 as range 47
      do {
        // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/49 )/12 (/15 e.Result/51 ' '/55 )/16 (/34 # RB/36 )/35 e.Tail/53 >/1
        context[49] = context[43];
        context[50] = context[44];
        context[51] = context[45];
        context[52] = context[46];
        context[53] = context[47];
        context[54] = context[48];
        context[55] = refalrts::char_right( ' ', context[51], context[52] );
        if( ! context[55] )
          continue;
        // closed e.Indent0 as range 49
        // closed e.Result as range 51
        // closed e.Tail as range 53
        //DEBUG: s.Limit: 25
        //DEBUG: e.Indent0: 49
        //DEBUG: e.Result: 51
        //DEBUG: e.Tail: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </56 & Add/57 1/58 Tile{ AsIs: s.Limit/25 } Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/49 AsIs: )/12 AsIs: (/15 AsIs: e.Result/51 HalfReuse: )/55 HalfReuse: (/16 HalfReuse: # RB/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/53 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_name(vm, context[57], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[58], 1UL);
        refalrts::reinit_close_call(context[35]);
        refalrts::reinit_close_bracket(context[55]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[34], identifiers[ident_RB]);
        refalrts::reinit_close_bracket(context[36]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[16], context[36] );
        refalrts::link_brackets( context[15], context[55] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[56] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[8], context[36] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[56], context[58] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/49 )/12 (/15 e.Result/51 )/16 (/34 # RB/36 )/35 e.Tail/53 >/1
      context[49] = context[43];
      context[50] = context[44];
      context[51] = context[45];
      context[52] = context[46];
      context[53] = context[47];
      context[54] = context[48];
      // closed e.Indent0 as range 49
      // closed e.Result as range 51
      // closed e.Tail as range 53
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 49
      //DEBUG: e.Result: 51
      //DEBUG: e.Tail: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </55 & Sub/56 Tile{ AsIs: s.Limit/25 } 2/57 Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/49 AsIs: )/12 AsIs: (/15 AsIs: e.Result/51 HalfReuse: ')'/16 HalfReuse: ' '/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/53 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_name(vm, context[56], functions[efunc_Sub]);
      refalrts::alloc_number(vm, context[57], 2UL);
      refalrts::reinit_close_call(context[35]);
      refalrts::reinit_char(context[16], ')');
      refalrts::reinit_char(context[34], ' ');
      refalrts::reinit_close_bracket(context[36]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[36] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[55] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[8], context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 '*'/36 e.Inner/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::char_term( '*', context[36] ) )
        continue;
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Inner as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Inner: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 AsIs: s.Limit/25 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 HalfReuse: # LB/36 } )/45 Tile{ AsIs: e.Inner/41 } (/46 # RB/47 Tile{ AsIs: )/35 AsIs: e.Tail/43 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_RB]);
      refalrts::reinit_ident(context[36], identifiers[ident_LB]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[46], context[35] );
      refalrts::link_brackets( context[34], context[45] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[35];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[45] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/37 )/12 (/15 e.Result/39 )/16 (/34 '!'/36 (/47 e.Name/45 )/48 e.Inner/41 )/35 e.Tail/43 >/1
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[30];
      context[44] = context[31];
      if( ! refalrts::char_term( '!', context[36] ) )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[41], context[42] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.Indent0 as range 37
      // closed e.Result as range 39
      // closed e.Name as range 45
      // closed e.Inner as range 41
      // closed e.Tail as range 43
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Name: 45
      //DEBUG: e.Inner: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Limit/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$19=1@4/4 } Tile{ HalfReuse: s.Limit25 /8 AsIs: (/11 AsIs: e.Indent0/37 AsIs: )/12 AsIs: (/15 AsIs: e.Result/39 AsIs: )/16 AsIs: (/34 } Tile{ AsIs: e.Inner/41 } Tile{ AsIs: )/35 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Tail/43 } )/49 </50 & Lenw/51 '<'/52 </53 & FormatWord:1/54 Tile{ HalfReuse: </36 HalfReuse: & Type/47 AsIs: e.Name/45 HalfReuse: >/48 } >/55 ' '/56 >/57 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Lenw]);
      refalrts::alloc_char(vm, context[52], '<');
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_FormatWord_B1]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_char(vm, context[56], ' ');
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S19A1Z4]);
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_open_call(context[36]);
      refalrts::reinit_name(context[47], functions[efunc_Type]);
      refalrts::reinit_close_call(context[48]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[7], context[49] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[55], context[57] );
      res = refalrts::splice_evar( res, context[36], context[48] );
      res = refalrts::splice_evar( res, context[49], context[54] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[8], context[34] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@4/4 (/7 s.new17/25 )/8 (/11 e.new18/37 )/12 (/15 e.new19/39 )/16 (/34 # RK/36 )/35 e.new16/41 >/1
    context[37] = context[26];
    context[38] = context[27];
    context[39] = context[28];
    context[40] = context[29];
    context[41] = context[30];
    context[42] = context[31];
    if( ! refalrts::ident_term( identifiers[ident_RK], context[36] ) )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    // closed e.new18 as range 37
    // closed e.new19 as range 39
    // closed e.new16 as range 41
    do {
      // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 ' '/49 )/16 (/34 # RK/36 )/35 e.Tail/47 >/1
      context[43] = context[37];
      context[44] = context[38];
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[41];
      context[48] = context[42];
      context[49] = refalrts::char_right( ' ', context[45], context[46] );
      if( ! context[49] )
        continue;
      // closed e.Indent0 as range 43
      // closed e.Result as range 45
      // closed e.Tail as range 47
      //DEBUG: s.Limit: 25
      //DEBUG: e.Indent0: 43
      //DEBUG: e.Result: 45
      //DEBUG: e.Tail: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </50 & Add/51 1/52 Tile{ AsIs: s.Limit/25 } Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: )/49 HalfReuse: (/16 HalfReuse: # RK/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[52], 1UL);
      refalrts::reinit_close_call(context[35]);
      refalrts::reinit_close_bracket(context[49]);
      refalrts::reinit_open_bracket(context[16]);
      refalrts::reinit_ident(context[34], identifiers[ident_RK]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[36] );
      refalrts::link_brackets( context[15], context[49] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[8], context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[50], context[52] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoFormatExpr@4/4 (/7 s.Limit/25 )/8 (/11 e.Indent0/43 )/12 (/15 e.Result/45 )/16 (/34 # RK/36 )/35 e.Tail/47 >/1
    context[43] = context[37];
    context[44] = context[38];
    context[45] = context[39];
    context[46] = context[40];
    context[47] = context[41];
    context[48] = context[42];
    // closed e.Indent0 as range 43
    // closed e.Result as range 45
    // closed e.Tail as range 47
    //DEBUG: s.Limit: 25
    //DEBUG: e.Indent0: 43
    //DEBUG: e.Result: 45
    //DEBUG: e.Tail: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoFormatExpr@4/4 AsIs: (/7 } </49 & Sub/50 Tile{ AsIs: s.Limit/25 } 2/51 Tile{ HalfReuse: >/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/43 AsIs: )/12 AsIs: (/15 AsIs: e.Result/45 HalfReuse: '>'/16 HalfReuse: ' '/34 HalfReuse: )/36 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_Sub]);
    refalrts::alloc_number(vm, context[51], 2UL);
    refalrts::reinit_close_call(context[35]);
    refalrts::reinit_char(context[16], '>');
    refalrts::reinit_char(context[34], ' ');
    refalrts::reinit_close_bracket(context[36]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[36] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[49] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[8], context[36] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr@4/4 (/7 e.dyn0/5 )/8 (/11 e.Indent0/9 )/12 (/15 e.dyn3/13 )/16 e.dyn4/2 >/1
  // closed e.dyn0 as range 5
  // closed e.Indent0 as range 9
  // closed e.dyn3 as range 13
  // closed e.dyn4 as range 2
  //DEBUG: e.dyn0: 5
  //DEBUG: e.Indent0: 9
  //DEBUG: e.dyn3: 13
  //DEBUG: e.dyn4: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@0/4 AsIs: (/7 AsIs: e.dyn0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Indent0/9 HalfReuse: ' '/12 HalfReuse: ' '/15 }"  "/17 )/19 (/20 e.Indent0/9/21"    "/23 )/25 (/26 Tile{ AsIs: e.dyn3/13 } Tile{ AsIs: )/16 AsIs: e.dyn4/2 AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[17], context[18], "  ", 2);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::copy_evar(vm, context[21], context[22], context[9], context[10]);
  refalrts::alloc_chars(vm, context[23], context[24], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z0]);
  refalrts::reinit_char(context[12], ' ');
  refalrts::reinit_char(context[15], ' ');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[26], context[16] );
  refalrts::link_brackets( context[20], context[25] );
  refalrts::link_brackets( context[11], context[19] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_Z4("DoFormatExpr@4", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_Z4);


static refalrts::FnResult func_gen_DoFormatExpr_S6A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$6=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$6=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$6=1@1/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.WordRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.WordRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.WordRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@1/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.WordRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z1]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$6=1@1/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$6=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  : "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  : ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S6A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S6A1Z1("DoFormatExpr$6=1@1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S6A1Z1);


static refalrts::FnResult func_gen_DoFormatExpr_S7A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$7=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$7=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$7=1@1/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.NumberRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.NumberRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.NumberRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@1/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.NumberRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z1]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$7=1@1/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$7=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  : "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  : ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S7A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S7A1Z1("DoFormatExpr$7=1@1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S7A1Z1);


static refalrts::FnResult func_gen_DoFormatExpr_S9A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & DoFormatExpr$9=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$9=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$9=1@1/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Chars0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CharRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Chars0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CharRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Chars0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CharRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@1/4 } Tile{ AsIs: (/20 } </33 & Sub/34 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/35 )/36 Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CharRep/30 } '\''/37 )/38 Tile{ HalfReuse: (/13 HalfReuse: # C/16 AsIs: e.Chars0/26 AsIs: )/17 } Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_char(vm, context[37], '\'');
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z1]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_ident(context[16], identifiers[ident_C]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[17] );
    refalrts::link_brackets( context[12], context[38] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[20], context[36] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$9=1@1/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Chars0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Chars0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Chars0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$9=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"  : "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Chars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "  : ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S9A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S9A1Z1("DoFormatExpr$9=1@1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S9A1Z1);


static refalrts::FnResult func_gen_DoFormatExpr_S10A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoFormatExpr$10=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$10=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$10=1@1/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Chars0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CharRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Chars0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CharRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Chars0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CharRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@1/4 } Tile{ AsIs: (/20 } </33 & Sub/34 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/35 )/36 Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CharRep/30 } )/37 Tile{ HalfReuse: (/13 HalfReuse: # C/16 AsIs: e.Chars0/26 AsIs: )/17 } Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z1]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_ident(context[16], identifiers[ident_C]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[17] );
    refalrts::link_brackets( context[12], context[37] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[20], context[36] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$10=1@1/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Chars0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Chars0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Chars0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$10=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"  : "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Chars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "  : ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S10A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S10A1Z1("DoFormatExpr$10=1@1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S10A1Z1);


static refalrts::FnResult func_gen_DoFormatExpr_S12A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$12=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$12=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$12=1@1/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@1/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z1]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$12=1@1/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$12=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  : "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  : ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S12A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S12A1Z1("DoFormatExpr$12=1@1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S12A1Z1);


static refalrts::FnResult func_gen_DoFormatExpr_S13A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$13=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$13=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$13=1@1/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@1/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z1]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$13=1@1/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$13=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  : "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  : ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S13A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S13A1Z1("DoFormatExpr$13=1@1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S13A1Z1);


static refalrts::FnResult func_gen_DoFormatExpr_S14A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$14=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$14=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$14=1@1/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@1/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z1]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$14=1@1/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$14=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  : "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  : ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S14A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S14A1Z1("DoFormatExpr$14=1@1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S14A1Z1);


static refalrts::FnResult func_gen_DoFormatExpr_S19A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoFormatExpr$19=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$19=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$19=1@1/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Inner0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CallRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Inner0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CallRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Inner0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CallRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@1/4 } (/33 </34 & Sub/35 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/36 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CallRep/30 } Tile{ HalfReuse: )/16 AsIs: e.Inner0/26 HalfReuse: (/17 HalfReuse: # RK/20 } )/37 Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z1]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_close_bracket(context[16]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_RK]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[37] );
    refalrts::link_brackets( context[12], context[16] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[33], context[13] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[16], context[20] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$19=1@1/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Inner0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Inner0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Inner0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$19=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"  : "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Inner0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "  : ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S19A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S19A1Z1("DoFormatExpr$19=1@1", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S19A1Z1);


static refalrts::FnResult func_gen_DoFormatExpr_S6A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$6=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$6=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$6=1@2/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.WordRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.WordRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.WordRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@2/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.WordRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z2]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$6=1@2/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$6=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  , "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  , ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S6A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S6A1Z2("DoFormatExpr$6=1@2", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S6A1Z2);


static refalrts::FnResult func_gen_DoFormatExpr_S7A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$7=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$7=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$7=1@2/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.NumberRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.NumberRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.NumberRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@2/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.NumberRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z2]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$7=1@2/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$7=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  , "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  , ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S7A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S7A1Z2("DoFormatExpr$7=1@2", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S7A1Z2);


static refalrts::FnResult func_gen_DoFormatExpr_S9A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & DoFormatExpr$9=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$9=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$9=1@2/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Chars0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CharRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Chars0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CharRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Chars0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CharRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@2/4 } Tile{ AsIs: (/20 } </33 & Sub/34 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/35 )/36 Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CharRep/30 } '\''/37 )/38 Tile{ HalfReuse: (/13 HalfReuse: # C/16 AsIs: e.Chars0/26 AsIs: )/17 } Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_char(vm, context[37], '\'');
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z2]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_ident(context[16], identifiers[ident_C]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[17] );
    refalrts::link_brackets( context[12], context[38] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[20], context[36] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$9=1@2/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Chars0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Chars0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Chars0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$9=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"  , "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Chars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "  , ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S9A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S9A1Z2("DoFormatExpr$9=1@2", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S9A1Z2);


static refalrts::FnResult func_gen_DoFormatExpr_S10A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoFormatExpr$10=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$10=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$10=1@2/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Chars0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CharRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Chars0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CharRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Chars0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CharRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@2/4 } Tile{ AsIs: (/20 } </33 & Sub/34 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/35 )/36 Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CharRep/30 } )/37 Tile{ HalfReuse: (/13 HalfReuse: # C/16 AsIs: e.Chars0/26 AsIs: )/17 } Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z2]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_ident(context[16], identifiers[ident_C]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[17] );
    refalrts::link_brackets( context[12], context[37] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[20], context[36] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$10=1@2/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Chars0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Chars0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Chars0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$10=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"  , "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Chars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "  , ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S10A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S10A1Z2("DoFormatExpr$10=1@2", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S10A1Z2);


static refalrts::FnResult func_gen_DoFormatExpr_S12A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$12=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$12=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$12=1@2/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@2/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z2]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$12=1@2/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$12=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  , "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  , ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S12A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S12A1Z2("DoFormatExpr$12=1@2", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S12A1Z2);


static refalrts::FnResult func_gen_DoFormatExpr_S13A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$13=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$13=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$13=1@2/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@2/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z2]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$13=1@2/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$13=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  , "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  , ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S13A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S13A1Z2("DoFormatExpr$13=1@2", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S13A1Z2);


static refalrts::FnResult func_gen_DoFormatExpr_S14A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$14=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$14=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$14=1@2/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@2/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z2]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$14=1@2/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$14=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  , "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  , ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S14A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S14A1Z2("DoFormatExpr$14=1@2", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S14A1Z2);


static refalrts::FnResult func_gen_DoFormatExpr_S19A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoFormatExpr$19=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$19=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$19=1@2/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Inner0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CallRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Inner0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CallRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Inner0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CallRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@2/4 } (/33 </34 & Sub/35 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/36 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CallRep/30 } Tile{ HalfReuse: )/16 AsIs: e.Inner0/26 HalfReuse: (/17 HalfReuse: # RK/20 } )/37 Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z2]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_close_bracket(context[16]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_RK]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[37] );
    refalrts::link_brackets( context[12], context[16] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[33], context[13] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[16], context[20] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$19=1@2/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Inner0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Inner0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Inner0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$19=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"  , "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Inner0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "  , ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S19A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S19A1Z2("DoFormatExpr$19=1@2", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S19A1Z2);


static refalrts::FnResult func_gen_DoFormatExpr_S6A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$6=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$6=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$6=1@3/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.WordRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.WordRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.WordRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@3/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.WordRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z3]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$6=1@3/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$6=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  = "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  = ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S6A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S6A1Z3("DoFormatExpr$6=1@3", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S6A1Z3);


static refalrts::FnResult func_gen_DoFormatExpr_S7A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$7=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$7=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$7=1@3/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.NumberRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.NumberRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.NumberRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@3/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.NumberRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z3]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$7=1@3/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$7=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  = "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  = ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S7A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S7A1Z3("DoFormatExpr$7=1@3", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S7A1Z3);


static refalrts::FnResult func_gen_DoFormatExpr_S9A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & DoFormatExpr$9=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$9=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$9=1@3/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Chars0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CharRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Chars0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CharRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Chars0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CharRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@3/4 } Tile{ AsIs: (/20 } </33 & Sub/34 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/35 )/36 Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CharRep/30 } '\''/37 )/38 Tile{ HalfReuse: (/13 HalfReuse: # C/16 AsIs: e.Chars0/26 AsIs: )/17 } Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_char(vm, context[37], '\'');
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z3]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_ident(context[16], identifiers[ident_C]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[17] );
    refalrts::link_brackets( context[12], context[38] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[20], context[36] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$9=1@3/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Chars0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Chars0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Chars0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$9=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"  = "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Chars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "  = ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S9A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S9A1Z3("DoFormatExpr$9=1@3", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S9A1Z3);


static refalrts::FnResult func_gen_DoFormatExpr_S10A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoFormatExpr$10=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$10=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$10=1@3/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Chars0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CharRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Chars0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CharRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Chars0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CharRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@3/4 } Tile{ AsIs: (/20 } </33 & Sub/34 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/35 )/36 Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CharRep/30 } )/37 Tile{ HalfReuse: (/13 HalfReuse: # C/16 AsIs: e.Chars0/26 AsIs: )/17 } Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z3]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_ident(context[16], identifiers[ident_C]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[17] );
    refalrts::link_brackets( context[12], context[37] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[20], context[36] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$10=1@3/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Chars0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Chars0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Chars0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$10=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"  = "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Chars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "  = ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S10A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S10A1Z3("DoFormatExpr$10=1@3", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S10A1Z3);


static refalrts::FnResult func_gen_DoFormatExpr_S12A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$12=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$12=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$12=1@3/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@3/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z3]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$12=1@3/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$12=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  = "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  = ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S12A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S12A1Z3("DoFormatExpr$12=1@3", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S12A1Z3);


static refalrts::FnResult func_gen_DoFormatExpr_S13A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$13=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$13=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$13=1@3/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@3/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z3]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$13=1@3/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$13=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  = "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  = ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S13A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S13A1Z3("DoFormatExpr$13=1@3", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S13A1Z3);


static refalrts::FnResult func_gen_DoFormatExpr_S14A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$14=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$14=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$14=1@3/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@3/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z3]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$14=1@3/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$14=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"  = "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "  = ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S14A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S14A1Z3("DoFormatExpr$14=1@3", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S14A1Z3);


static refalrts::FnResult func_gen_DoFormatExpr_S19A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoFormatExpr$19=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$19=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$19=1@3/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Inner0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CallRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Inner0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CallRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Inner0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CallRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@3/4 } (/33 </34 & Sub/35 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/36 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CallRep/30 } Tile{ HalfReuse: )/16 AsIs: e.Inner0/26 HalfReuse: (/17 HalfReuse: # RK/20 } )/37 Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z3]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_close_bracket(context[16]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_RK]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[37] );
    refalrts::link_brackets( context[12], context[16] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[33], context[13] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[16], context[20] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$19=1@3/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Inner0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Inner0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Inner0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$19=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"  = "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Inner0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "  = ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S19A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S19A1Z3("DoFormatExpr$19=1@3", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S19A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S11A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$11=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$11=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$11=1@1/4 s.X/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.VL/32 s.VR/33 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.VL: 32
    //DEBUG: s.VR: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </34 & Decompile-Pattern-Hole/35 0/36 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 HalfReuse: 2/8 } >/37 (/38 Tile{ AsIs: e.Pattern-L0/22 } (/39 # t/40 s.VL/32/41 s.VR/33/42 Tile{ HalfReuse: '='/21 AsIs: s.VL/32 AsIs: s.VR/33 HalfReuse: )/1 } s.VR/33/43 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: # t/20 } s.VL/32/44 s.VR/33/45 '='/46 s.VL/32/47 s.VR/33/48 )/49 )/50 Tile{ AsIs: e.Commands0/28 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[36], 0UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_t]);
    refalrts::copy_stvar(vm, context[41], context[32]);
    refalrts::copy_stvar(vm, context[42], context[33]);
    refalrts::copy_stvar(vm, context[43], context[33]);
    refalrts::copy_stvar(vm, context[44], context[32]);
    refalrts::copy_stvar(vm, context[45], context[33]);
    refalrts::alloc_char(vm, context[46], '=');
    refalrts::copy_stvar(vm, context[47], context[32]);
    refalrts::copy_stvar(vm, context[48], context[33]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_number(context[8], 2UL);
    refalrts::reinit_char(context[21], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_t]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[16], context[50] );
    refalrts::link_brackets( context[17], context[49] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[38], context[9] );
    refalrts::link_brackets( context[39], context[1] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[44], context[50] );
    res = refalrts::splice_evar( res, context[9], context[20] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$11=1@1/4 s.X/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 Tile{ HalfReuse: & Decompile-Pattern-Hole$11=1@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S11A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S11A1Z1("Decompile-Pattern-Hole$11=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S11A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S12A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$12=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$12=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$12=1@1/4 s.X/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.VL/32 s.VR/33 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.VL: 32
    //DEBUG: s.VR: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </34 & Decompile-Pattern-Hole/35 0/36 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 HalfReuse: 2/8 } >/37 (/38 Tile{ AsIs: e.Pattern-L0/22 } )/39 (/40 s.VL/32/41 (/42 Tile{ HalfReuse: # t/21 AsIs: s.VL/32 AsIs: s.VR/33 HalfReuse: '='/1 } s.VL/32/43 Tile{ HalfReuse: s.VR33 /9 HalfReuse: )/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: # t/20 } s.VL/32/44 s.VR/33/45 '='/46 s.VL/32/47 s.VR/33/48 )/49 )/50 Tile{ AsIs: e.Commands0/28 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[36], 0UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::copy_stvar(vm, context[41], context[32]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::copy_stvar(vm, context[43], context[32]);
    refalrts::copy_stvar(vm, context[44], context[32]);
    refalrts::copy_stvar(vm, context[45], context[33]);
    refalrts::alloc_char(vm, context[46], '=');
    refalrts::copy_stvar(vm, context[47], context[32]);
    refalrts::copy_stvar(vm, context[48], context[33]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_number(context[8], 2UL);
    refalrts::reinit_ident(context[21], identifiers[ident_t]);
    refalrts::reinit_char(context[1], '=');
    refalrts::reinit_svar( context[9], context[33] );
    refalrts::reinit_close_bracket(context[12]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_t]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[16], context[50] );
    refalrts::link_brackets( context[17], context[49] );
    refalrts::link_brackets( context[40], context[13] );
    refalrts::link_brackets( context[42], context[12] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[44], context[50] );
    res = refalrts::splice_evar( res, context[9], context[20] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$12=1@1/4 s.X/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 Tile{ HalfReuse: & Decompile-Pattern-Hole$12=1@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S12A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S12A1Z1("Decompile-Pattern-Hole$12=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S12A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S18A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & Decompile-Pattern-Hole$18=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$18=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$18=1@1/4 s.X/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.VL/32 s.VR/33 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.VL: 32
    //DEBUG: s.VR: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </34 & Decompile-Pattern-NoHole/35 0/36 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 HalfReuse: 2/8 } >/37 (/38 Tile{ AsIs: e.Pattern-L0/22 } (/39 Tile{ HalfReuse: # e/21 AsIs: s.VL/32 AsIs: s.VR/33 HalfReuse: '='/1 } s.VL/32/40 Tile{ HalfReuse: s.VR33 /9 HalfReuse: )/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: # e/20 } s.VL/32/41 s.VR/33/42 '='/43 s.VL/32/44 s.VR/33/45 )/46 )/47 Tile{ AsIs: e.Commands0/28 } >/48 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Decompilem_Patternm_NoHole]);
    refalrts::alloc_number(vm, context[36], 0UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_stvar(vm, context[40], context[32]);
    refalrts::copy_stvar(vm, context[41], context[32]);
    refalrts::copy_stvar(vm, context[42], context[33]);
    refalrts::alloc_char(vm, context[43], '=');
    refalrts::copy_stvar(vm, context[44], context[32]);
    refalrts::copy_stvar(vm, context[45], context[33]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_number(context[8], 2UL);
    refalrts::reinit_ident(context[21], identifiers[ident_e]);
    refalrts::reinit_char(context[1], '=');
    refalrts::reinit_svar( context[9], context[33] );
    refalrts::reinit_close_bracket(context[12]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_e]);
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[16], context[47] );
    refalrts::link_brackets( context[17], context[46] );
    refalrts::link_brackets( context[38], context[13] );
    refalrts::link_brackets( context[39], context[12] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[41], context[47] );
    res = refalrts::splice_evar( res, context[9], context[20] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$18=1@1/4 s.X/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 Tile{ HalfReuse: & Decompile-Pattern-Hole$18=1@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S18A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S18A1Z1("Decompile-Pattern-Hole$18=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S18A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & Decompile-Pattern-Hole$19=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$19=1@2/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new3 as range 7
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$19=1@2/4 s.IdR0/5 s.X/6 (/9 e.Pattern-L0/23 )/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 e.Vars-B/33 (/39 s.Type/41 s.IdL/42 s.IdR0/43 '='/44 s.VarNoL/45 s.VarNoR/46 )/40 e.Vars-E/35 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    context[33] = 0;
    context[34] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[35] = context[31];
      context[36] = context[32];
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_left( context[37], context[38], context[35], context[36] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      // closed e.Vars-E as range 35
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[42], context[37], context[38] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[43], context[5], context[37], context[38] ) )
        continue;
      context[44] = refalrts::char_left( '=', context[37], context[38] );
      if( ! context[44] )
        continue;
      if( ! refalrts::svar_left( context[45], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[46], context[37], context[38] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      //DEBUG: s.IdR0: 5
      //DEBUG: s.X: 6
      //DEBUG: e.Pattern-L0: 23
      //DEBUG: e.Pattern-R0: 25
      //DEBUG: e.Vars0: 27
      //DEBUG: e.Commands0: 29
      //DEBUG: e.Vars-B: 33
      //DEBUG: e.Vars-E: 35
      //DEBUG: s.Type: 41
      //DEBUG: s.IdL: 42
      //DEBUG: s.VarNoL: 45
      //DEBUG: s.VarNoR: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.IdR0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/33 {REMOVED TILE} s.IdR0/43 {REMOVED TILE} s.VarNoL/45 s.VarNoR/46 {REMOVED TILE} e.Vars-E/35 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=2@1/4 } Tile{ AsIs: s.X/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L0/23 } Tile{ HalfReuse: )/39 AsIs: s.Type/41 AsIs: s.IdL/42 } Tile{ HalfReuse: s.IdR043 /10 AsIs: (/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/29 AsIs: )/22 } Tile{ HalfReuse: s.X6 /44 } Tile{ HalfReuse: </40 } & Add/47 s.X/6/48 1/49 >/50 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[47], functions[efunc_Add]);
      refalrts::copy_stvar(vm, context[48], context[6]);
      refalrts::alloc_number(vm, context[49], 1UL);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A2Z1]);
      refalrts::reinit_close_bracket(context[39]);
      refalrts::reinit_svar( context[10], context[43] );
      refalrts::reinit_svar( context[44], context[6] );
      refalrts::reinit_open_call(context[40]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[39] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[50] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[10], context[22] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[33], context[34], context[31], context[32] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$19=1@2/4 s.IdR0/5 s.X/6 (/9 e.Pattern-L0/7 )/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 7
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.IdR0: 5
  //DEBUG: s.X: 6
  //DEBUG: e.Pattern-L0: 7
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=1@0/4 AsIs: s.IdR0/5 } 0/23 Tile{ AsIs: s.X/6 AsIs: (/9 AsIs: e.Pattern-L0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[23], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A1Z2("Decompile-Pattern-Hole$19=1@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A1Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & Decompile-Pattern-Hole$20=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$20=1@2/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new3 as range 7
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$20=1@2/4 s.IdR0/5 s.X/6 (/9 e.Pattern-L0/23 )/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 e.Vars-B/33 (/39 s.Type/41 s.IdL/42 s.IdR0/43 '='/44 s.VarNoL/45 s.VarNoR/46 )/40 e.Vars-E/35 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    context[33] = 0;
    context[34] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[35] = context[31];
      context[36] = context[32];
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_left( context[37], context[38], context[35], context[36] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      // closed e.Vars-E as range 35
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[42], context[37], context[38] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[43], context[5], context[37], context[38] ) )
        continue;
      context[44] = refalrts::char_left( '=', context[37], context[38] );
      if( ! context[44] )
        continue;
      if( ! refalrts::svar_left( context[45], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[46], context[37], context[38] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      //DEBUG: s.IdR0: 5
      //DEBUG: s.X: 6
      //DEBUG: e.Pattern-L0: 23
      //DEBUG: e.Pattern-R0: 25
      //DEBUG: e.Vars0: 27
      //DEBUG: e.Commands0: 29
      //DEBUG: e.Vars-B: 33
      //DEBUG: e.Vars-E: 35
      //DEBUG: s.Type: 41
      //DEBUG: s.IdL: 42
      //DEBUG: s.VarNoL: 45
      //DEBUG: s.VarNoR: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.IdR0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/33 {REMOVED TILE} s.IdR0/43 {REMOVED TILE} s.VarNoL/45 s.VarNoR/46 {REMOVED TILE} e.Vars-E/35 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=2@1/4 } Tile{ AsIs: s.X/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L0/23 } Tile{ HalfReuse: )/39 AsIs: s.Type/41 AsIs: s.IdL/42 } Tile{ HalfReuse: s.IdR043 /10 AsIs: (/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/29 AsIs: )/22 } Tile{ HalfReuse: s.X6 /44 } Tile{ HalfReuse: </40 } & Add/47 s.X/6/48 1/49 >/50 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[47], functions[efunc_Add]);
      refalrts::copy_stvar(vm, context[48], context[6]);
      refalrts::alloc_number(vm, context[49], 1UL);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A2Z1]);
      refalrts::reinit_close_bracket(context[39]);
      refalrts::reinit_svar( context[10], context[43] );
      refalrts::reinit_svar( context[44], context[6] );
      refalrts::reinit_open_call(context[40]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[39] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[50] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[10], context[22] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[33], context[34], context[31], context[32] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$20=1@2/4 s.IdR0/5 s.X/6 (/9 e.Pattern-L0/7 )/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 7
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.IdR0: 5
  //DEBUG: s.X: 6
  //DEBUG: e.Pattern-L0: 7
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=1@0/4 AsIs: s.IdR0/5 } 0/23 Tile{ AsIs: s.X/6 AsIs: (/9 AsIs: e.Pattern-L0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[23], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A1Z2("Decompile-Pattern-Hole$20=1@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A1Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S21A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & Decompile-Pattern-Hole$21=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$21=1@1/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$21=1@1/4 s.X/5 (/8 e.Pattern-L0/23 )/9 s.R0/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 s.LB/33 s.RB/34 >/1
    context[23] = context[6];
    context[24] = context[7];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[31], context[32] ) )
      continue;
    if( ! refalrts::empty_seq( context[31], context[32] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: s.R0: 10
    //DEBUG: e.Pattern-L0: 23
    //DEBUG: e.Pattern-R0: 25
    //DEBUG: e.Vars0: 27
    //DEBUG: e.Commands0: 29
    //DEBUG: s.LB: 33
    //DEBUG: s.RB: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </35 & Decompile-Pattern-Hole/36 0/37 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 HalfReuse: 2/8 } >/38 (/39 Tile{ AsIs: e.Pattern-L0/23 } Tile{ AsIs: (/21 } # LB/40 Tile{ AsIs: )/22 AsIs: s.LB/33 } )/41 (/42 Tile{ AsIs: s.RB/34 } (/43 # RB/44 )/45 (/46 # Hole/47 Tile{ HalfReuse: s.RB34 /9 AsIs: s.R0/10 HalfReuse: )/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 AsIs: )/18 } Tile{ AsIs: e.Commands0/29 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[37], 0UL);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_LB]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_ident(vm, context[44], identifiers[ident_RB]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_ident(vm, context[47], identifiers[ident_Hole]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_number(context[8], 2UL);
    refalrts::reinit_svar( context[9], context[34] );
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[35] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[42], context[14] );
    refalrts::link_brackets( context[46], context[13] );
    refalrts::link_brackets( context[43], context[45] );
    refalrts::link_brackets( context[39], context[41] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    res = refalrts::splice_evar( res, context[43], context[47] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[22], context[33] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$21=1@1/4 s.X/5 (/8 e.Pattern-L0/6 )/9 s.R0/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.X: 5
  //DEBUG: s.R0: 10
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 Tile{ HalfReuse: & Decompile-Pattern-Hole$21=1@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: s.R0/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S21A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S21A1Z1("Decompile-Pattern-Hole$21=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S21A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S22A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & Decompile-Pattern-Hole$22=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$22=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$22=1@1/4 s.X/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.LB/32 s.RB/33 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.LB: 32
    //DEBUG: s.RB: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </34 & Decompile-Pattern-Hole/35 0/36 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 HalfReuse: 2/8 } >/37 Tile{ AsIs: (/20 } Tile{ AsIs: e.Pattern-L0/22 } )/38 (/39 s.LB/32/40 (/41 # LB/42 )/43 (/44 Tile{ HalfReuse: # Hole/21 AsIs: s.LB/32 AsIs: s.RB/33 HalfReuse: )/1 } (/45 Tile{ HalfReuse: # RB/9 HalfReuse: )/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 AsIs: )/17 } Tile{ AsIs: e.Commands0/28 } >/46 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[36], 0UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_stvar(vm, context[40], context[32]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_ident(vm, context[42], identifiers[ident_LB]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_number(context[8], 2UL);
    refalrts::reinit_ident(context[21], identifiers[ident_Hole]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_ident(context[9], identifiers[ident_RB]);
    refalrts::reinit_close_bracket(context[12]);
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[39], context[13] );
    refalrts::link_brackets( context[45], context[12] );
    refalrts::link_brackets( context[44], context[1] );
    refalrts::link_brackets( context[41], context[43] );
    refalrts::link_brackets( context[20], context[38] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[46] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[9], context[17] );
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_evar( res, context[38], context[44] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$22=1@1/4 s.X/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 Tile{ HalfReuse: & Decompile-Pattern-Hole$22=1@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S22A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S22A1Z1("Decompile-Pattern-Hole$22=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S22A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_NoHole_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 68 elems
  refalrts::Iter context[68];
  refalrts::zeros( context, 68 );
  // </0 & Decompile-Pattern-NoHole@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-NoHole@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & Decompile-Pattern-NoHole@4/4 s.new5/5 (/8 e.new10/14 )/9 (/12 e.new11/16 )/13 (/22 s.new6/24 s.new7/25 e.new8/20 )/23 e.new9/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.new10 as range 14
    // closed e.new11 as range 16
    // closed e.new9 as range 18
    if( ! refalrts::svar_left( context[24], context[20], context[21] ) )
      continue;
    if( ! refalrts::svar_left( context[25], context[20], context[21] ) )
      continue;
    // closed e.new8 as range 20
    do {
      // </0 & Decompile-Pattern-NoHole@4/4 s.new12/5 (/8 e.new18/26 )/9 (/12 e.new19/28 )/13 (/22 s.new14/24 s.new15/25 e.new16/30 s.new17/34 )/23 e.new13/32 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[18];
      context[33] = context[19];
      // closed e.new18 as range 26
      // closed e.new19 as range 28
      // closed e.new13 as range 32
      if( ! refalrts::svar_right( context[34], context[30], context[31] ) )
        continue;
      // closed e.new16 as range 30
      do {
        // </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.Pattern-L/44 (/50 # Hole/52 s.L/53 s.R/54 )/51 e.Pattern-R/46 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # SETB/25 s.L/43 s.R/34 )/23 e.Commands/41 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[25] ) )
          continue;
        // closed e.Vars as range 37
        // closed e.Commands as range 41
        if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
          continue;
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        context[44] = 0;
        context[45] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[46] = context[35];
          context[47] = context[36];
          context[48] = 0;
          context[49] = 0;
          context[50] = refalrts::brackets_left( context[48], context[49], context[46], context[47] );
          if( ! context[50] )
            continue;
          refalrts::bracket_pointers(context[50], context[51]);
          context[52] = refalrts::ident_left( identifiers[ident_Hole], context[48], context[49] );
          if( ! context[52] )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[53], context[43], context[48], context[49] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[54], context[34], context[48], context[49] ) )
            continue;
          if( ! refalrts::empty_seq( context[48], context[49] ) )
            continue;
          // closed e.Pattern-R as range 46
          //DEBUG: s.X: 5
          //DEBUG: s.Offset: 24
          //DEBUG: s.R: 34
          //DEBUG: e.Vars: 37
          //DEBUG: e.Commands: 41
          //DEBUG: s.L: 43
          //DEBUG: e.Pattern-L: 44
          //DEBUG: e.Pattern-R: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.L/53 s.R/54 {REMOVED TILE} {REMOVED TILE} s.Offset/24 # SETB/25 s.L/43 s.R/34 )/23 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/44 HalfReuse: s.L53 /50 HalfReuse: )/52 } Tile{ AsIs: (/22 } Tile{ HalfReuse: s.R54 /51 AsIs: e.Pattern-R/46 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/37 AsIs: )/13 } Tile{ AsIs: e.Commands/41 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
          refalrts::reinit_svar( context[50], context[53] );
          refalrts::reinit_close_bracket(context[52]);
          refalrts::reinit_svar( context[51], context[54] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[22], context[9] );
          refalrts::link_brackets( context[8], context[52] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[51], context[13] );
          res = refalrts::splice_elem( res, context[22] );
          refalrts::splice_to_freelist_open( vm, context[52], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[44], context[45], context[35], context[36] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.Pattern/35 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # RDY/25 0/34 )/23 e.Commands/39 >/1
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[32];
      context[40] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_RDY], context[25] ) )
        continue;
      if( ! refalrts::number_term( 0UL, context[34] ) )
        continue;
      if( ! refalrts::empty_seq( context[30], context[31] ) )
        continue;
      // closed e.Pattern as range 35
      // closed e.Vars as range 37
      // closed e.Commands as range 39
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 24
      //DEBUG: e.Pattern: 35
      //DEBUG: e.Vars: 37
      //DEBUG: e.Commands: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/12 } Tile{ HalfReuse: # Pattern/22 } 0/41 Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/13 } Tile{ AsIs: </0 Reuse: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Vars/37 } Tile{ AsIs: )/9 } Tile{ HalfReuse: '$'/25 HalfReuse: (/34 AsIs: )/23 AsIs: e.Commands/39 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[41], 0UL);
      refalrts::reinit_ident(context[22], identifiers[ident_Pattern]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Result_Z4]);
      refalrts::reinit_char(context[25], '$');
      refalrts::reinit_open_bracket(context[34]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[34], context[23] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.Pattern/26 )/9 (/12 e.Vars/28 )/13 (/22 s.Offset/24 # PUSHVF/25 )/23 e.Commands/30 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_PUSHVF], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      // closed e.Pattern as range 26
      // closed e.Vars as range 28
      // closed e.Commands as range 30
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 24
      //DEBUG: e.Pattern: 26
      //DEBUG: e.Vars: 28
      //DEBUG: e.Commands: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.X/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Pattern/4 } 0/32 Tile{ AsIs: e.Pattern/26 } )/33 Tile{ AsIs: (/8 } # StartCondition/34 )/35 </36 & Decompile-Result@4/37 Tile{ HalfReuse: s.X5 /9 AsIs: (/12 AsIs: e.Vars/28 AsIs: )/13 HalfReuse: '$'/22 } Tile{ HalfReuse: (/25 AsIs: )/23 AsIs: e.Commands/30 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[32], 0UL);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_StartCondition]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_gen_Decompilem_Result_Z4]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::reinit_char(context[22], '$');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[25], context[23] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[35] );
      refalrts::link_brackets( context[0], context[33] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_evar( res, context[9], context[22] );
      res = refalrts::splice_evar( res, context[34], context[37] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@4/4 s.new12/5 (/8 e.new18/26 )/9 (/12 e.new19/28 )/13 (/22 s.new14/24 s.new15/25 s.new16/34 e.new17/30 )/23 e.new13/32 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[18];
      context[33] = context[19];
      // closed e.new18 as range 26
      // closed e.new19 as range 28
      // closed e.new13 as range 32
      if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
        continue;
      // closed e.new17 as range 30
      do {
        // </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.Pattern/35 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # TRAN/25 s.Jump/34 )/23 e.Commands-B/41 (/47 s.Jump/49 e.Command/45 )/48 e.Commands-E/43 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[32];
        context[40] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[30], context[31] ) )
          continue;
        // closed e.Pattern as range 35
        // closed e.Vars as range 37
        context[41] = 0;
        context[42] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[43] = context[39];
          context[44] = context[40];
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::brackets_left( context[45], context[46], context[43], context[44] );
          if( ! context[47] )
            continue;
          refalrts::bracket_pointers(context[47], context[48]);
          if( ! refalrts::repeated_stvar_left( vm, context[49], context[34], context[45], context[46] ) )
            continue;
          // closed e.Command as range 45
          // closed e.Commands-E as range 43
          //DEBUG: s.X: 5
          //DEBUG: s.Offset: 24
          //DEBUG: s.Jump: 34
          //DEBUG: e.Pattern: 35
          //DEBUG: e.Vars: 37
          //DEBUG: e.Commands-B: 41
          //DEBUG: e.Command: 45
          //DEBUG: e.Commands-E: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE} s.Jump/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern/35 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/37 AsIs: )/13 } Tile{ AsIs: e.Commands-B/41 } Tile{ AsIs: (/22 } '@'/50 Tile{ Reuse: # Restore-NoHole/25 } 0/51 s.X/5/52 (/53 e.Pattern/35/54 Tile{ AsIs: )/23 } (/56 e.Vars/37/57 )/59 )/60 Tile{ AsIs: (/47 AsIs: s.Jump/49 AsIs: e.Command/45 AsIs: )/48 AsIs: e.Commands-E/43 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[50], '@');
          refalrts::alloc_number(vm, context[51], 0UL);
          refalrts::copy_stvar(vm, context[52], context[5]);
          refalrts::alloc_open_bracket(vm, context[53]);
          refalrts::copy_evar(vm, context[54], context[55], context[35], context[36]);
          refalrts::alloc_open_bracket(vm, context[56]);
          refalrts::copy_evar(vm, context[57], context[58], context[37], context[38]);
          refalrts::alloc_close_bracket(vm, context[59]);
          refalrts::alloc_close_bracket(vm, context[60]);
          refalrts::update_ident(context[25], identifiers[ident_Restorem_NoHole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[47], context[48] );
          refalrts::link_brackets( context[22], context[60] );
          refalrts::link_brackets( context[56], context[59] );
          refalrts::link_brackets( context[53], context[23] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[47];
          res = refalrts::splice_evar( res, context[56], context[60] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[51], context[53] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_elem( res, context[50] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[41], context[42], context[39], context[40] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@4/4 s.new20/5 (/8 e.new28/35 )/9 (/12 e.new29/37 )/13 (/22 '@'/24 s.new22/25 s.new23/34 s.new24/51 e.new25/39 (/49 e.new26/47 )/50 (/45 e.new27/43 )/46 )/23 e.new21/41 >/1
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      if( ! refalrts::char_term( '@', context[24] ) )
        continue;
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_right( context[43], context[44], context[39], context[40] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_right( context[47], context[48], context[39], context[40] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      // closed e.new28 as range 35
      // closed e.new29 as range 37
      // closed e.new26 as range 47
      // closed e.new27 as range 43
      // closed e.new21 as range 41
      if( ! refalrts::svar_left( context[51], context[39], context[40] ) )
        continue;
      // closed e.new25 as range 39
      do {
        // </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 '@'/24 # Restore-Hole/25 s.Level2/34 s.Top2/51 (/66 e.Pattern-L2/64 )/67 (/49 e.Pattern-R2/58 )/50 (/45 e.Vars2/60 )/46 )/23 e.Commands/62 >/1
        context[52] = context[35];
        context[53] = context[36];
        context[54] = context[37];
        context[55] = context[38];
        context[56] = context[39];
        context[57] = context[40];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[43];
        context[61] = context[44];
        context[62] = context[41];
        context[63] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[25] ) )
          continue;
        context[64] = 0;
        context[65] = 0;
        context[66] = refalrts::brackets_left( context[64], context[65], context[56], context[57] );
        if( ! context[66] )
          continue;
        refalrts::bracket_pointers(context[66], context[67]);
        if( ! refalrts::empty_seq( context[56], context[57] ) )
          continue;
        // closed e.Pattern1 as range 52
        // closed e.Vars1 as range 54
        // closed e.Pattern-L2 as range 64
        // closed e.Pattern-R2 as range 58
        // closed e.Vars2 as range 60
        // closed e.Commands as range 62
        //DEBUG: s.X: 5
        //DEBUG: s.Level2: 34
        //DEBUG: s.Top2: 51
        //DEBUG: e.Pattern1: 52
        //DEBUG: e.Vars1: 54
        //DEBUG: e.Pattern-L2: 64
        //DEBUG: e.Pattern-R2: 58
        //DEBUG: e.Vars2: 60
        //DEBUG: e.Commands: 62

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 {REMOVED TILE} )/23 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & Decompile-Pattern-Hole/25 AsIs: s.Level2/34 AsIs: s.Top2/51 AsIs: (/66 AsIs: e.Pattern-L2/64 AsIs: )/67 AsIs: (/49 AsIs: e.Pattern-R2/58 AsIs: )/50 AsIs: (/45 AsIs: e.Vars2/60 AsIs: )/46 } Tile{ AsIs: e.Commands/62 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[25], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[45], context[46] );
        refalrts::link_brackets( context[49], context[50] );
        refalrts::link_brackets( context[66], context[67] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[24], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 '@'/24 # Restore-NoHole/25 s.Level2/34 s.Top2/51 (/49 e.Pattern2/56 )/50 (/45 e.Vars2/58 )/46 )/23 e.Commands/60 >/1
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[38];
      context[56] = context[47];
      context[57] = context[48];
      context[58] = context[43];
      context[59] = context[44];
      context[60] = context[41];
      context[61] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      // closed e.Pattern1 as range 52
      // closed e.Vars1 as range 54
      // closed e.Pattern2 as range 56
      // closed e.Vars2 as range 58
      // closed e.Commands as range 60
      //DEBUG: s.X: 5
      //DEBUG: s.Level2: 34
      //DEBUG: s.Top2: 51
      //DEBUG: e.Pattern1: 52
      //DEBUG: e.Vars1: 54
      //DEBUG: e.Pattern2: 56
      //DEBUG: e.Vars2: 58
      //DEBUG: e.Commands: 60

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 {REMOVED TILE} )/23 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & Decompile-Pattern-NoHole/25 AsIs: s.Level2/34 AsIs: s.Top2/51 AsIs: (/49 AsIs: e.Pattern2/56 AsIs: )/50 AsIs: (/45 AsIs: e.Vars2/58 AsIs: )/46 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[25], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[49], context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[24], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.Pattern/26 )/9 (/12 e.Vars/28 )/13 (/22 s.Offset/24 # LABEL/25 e.BlockName/30 )/23 e.Commands/32 >/1
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[18];
    context[33] = context[19];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[25] ) )
      continue;
    // closed e.Pattern as range 26
    // closed e.Vars as range 28
    // closed e.BlockName as range 30
    // closed e.Commands as range 32
    //DEBUG: s.X: 5
    //DEBUG: s.Offset: 24
    //DEBUG: e.Pattern: 26
    //DEBUG: e.Vars: 28
    //DEBUG: e.BlockName: 30
    //DEBUG: e.Commands: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/22 s.Offset/24 # LABEL/25 e.BlockName/30 )/23 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern/26 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/28 AsIs: )/13 } Tile{ AsIs: e.Commands/32 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[32], context[33] );
    refalrts::splice_to_freelist_open( vm, context[13], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 )/9 (/12 )/13 >/1
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.X: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 )/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/12 HalfReuse: # EndOfFunction/13 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[13], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[12], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.Pattern/14 )/9 (/12 e.Vars/16 )/13 e.Commands/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Pattern as range 14
    // closed e.Vars as range 16
    // closed e.Commands as range 18
    //DEBUG: s.X: 5
    //DEBUG: e.Pattern: 14
    //DEBUG: e.Vars: 16
    //DEBUG: e.Commands: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20"=B"/21 Tile{ HalfReuse: ' '/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern/14 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/16 AsIs: )/13 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Commands/18 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_chars(vm, context[21], context[22], "=B", 2);
    refalrts::reinit_char(context[0], ' ');
    refalrts::reinit_number(context[4], 0UL);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[20], context[1] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[20], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-NoHole@4/4 s.X/5 (/8 e.dyn0/6 )/9 (/12 e.dyn1/10 )/13 e.dyn2/2 >/1
  // closed e.dyn0 as range 6
  // closed e.dyn1 as range 10
  // closed e.dyn2 as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.dyn0: 6
  //DEBUG: e.dyn1: 10
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </14 Tile{ HalfReuse: & Decompile-Pattern-NoHole@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.dyn0/6 AsIs: )/9 AsIs: (/12 AsIs: e.dyn1/10 AsIs: )/13 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_NoHole_Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_NoHole_Z4("Decompile-Pattern-NoHole@4", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_NoHole_Z4);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S25A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$25=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$25=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$25=1@1/4 s.X/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.VL/32 s.VR/33 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.VL: 32
    //DEBUG: s.VR: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </34 & Decompile-Pattern-Hole/35 0/36 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 HalfReuse: 2/8 } >/37 (/38 Tile{ AsIs: e.Pattern-L0/22 } (/39 # e/40 s.VL/32/41 s.VR/33/42 Tile{ HalfReuse: '='/21 AsIs: s.VL/32 AsIs: s.VR/33 HalfReuse: )/1 } s.VR/33/43 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: # e/20 } s.VL/32/44 s.VR/33/45 '='/46 s.VL/32/47 s.VR/33/48 )/49 )/50 Tile{ AsIs: e.Commands0/28 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[36], 0UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_e]);
    refalrts::copy_stvar(vm, context[41], context[32]);
    refalrts::copy_stvar(vm, context[42], context[33]);
    refalrts::copy_stvar(vm, context[43], context[33]);
    refalrts::copy_stvar(vm, context[44], context[32]);
    refalrts::copy_stvar(vm, context[45], context[33]);
    refalrts::alloc_char(vm, context[46], '=');
    refalrts::copy_stvar(vm, context[47], context[32]);
    refalrts::copy_stvar(vm, context[48], context[33]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_number(context[8], 2UL);
    refalrts::reinit_char(context[21], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_e]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[16], context[50] );
    refalrts::link_brackets( context[17], context[49] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[38], context[9] );
    refalrts::link_brackets( context[39], context[1] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[44], context[50] );
    res = refalrts::splice_evar( res, context[9], context[20] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$25=1@1/4 s.X/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 Tile{ HalfReuse: & Decompile-Pattern-Hole$25=1@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S25A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S25A1Z1("Decompile-Pattern-Hole$25=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S25A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S26A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Decompile-Pattern-Hole$26=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$26=1@1/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$26=1@1/4 s.X/5 (/8 e.Pattern-L0/23 )/9 s.Char0/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 s.VL/33 s.VR/34 s.CharPos/35 >/1
    context[23] = context[6];
    context[24] = context[7];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
      continue;
    if( ! refalrts::empty_seq( context[31], context[32] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: s.Char0: 10
    //DEBUG: e.Pattern-L0: 23
    //DEBUG: e.Pattern-R0: 25
    //DEBUG: e.Vars0: 27
    //DEBUG: e.Commands0: 29
    //DEBUG: s.VL: 33
    //DEBUG: s.VR: 34
    //DEBUG: s.CharPos: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </36 & Decompile-Pattern-Hole/37 0/38 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 HalfReuse: 3/8 } >/39 (/40 Tile{ AsIs: e.Pattern-L0/23 } (/41 Tile{ HalfReuse: # e/22 AsIs: s.VL/33 AsIs: s.VR/34 } '='/42 s.VL/33/43 s.VR/34/44 )/45 (/46 Tile{ HalfReuse: # C/9 AsIs: s.Char0/10 } )/47 Tile{ AsIs: s.CharPos/35 } )/48 Tile{ AsIs: (/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 HalfReuse: (/18 HalfReuse: # e/21 } s.VL/33/49 s.VR/34/50 '='/51 s.VL/33/52 s.VR/34/53 )/54 )/55 Tile{ AsIs: e.Commands0/29 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[38], 0UL);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_char(vm, context[42], '=');
    refalrts::copy_stvar(vm, context[43], context[33]);
    refalrts::copy_stvar(vm, context[44], context[34]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::copy_stvar(vm, context[49], context[33]);
    refalrts::copy_stvar(vm, context[50], context[34]);
    refalrts::alloc_char(vm, context[51], '=');
    refalrts::copy_stvar(vm, context[52], context[33]);
    refalrts::copy_stvar(vm, context[53], context[34]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_number(context[8], 3UL);
    refalrts::reinit_ident(context[22], identifiers[ident_e]);
    refalrts::reinit_ident(context[9], identifiers[ident_C]);
    refalrts::reinit_open_bracket(context[18]);
    refalrts::reinit_ident(context[21], identifiers[ident_e]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[17], context[55] );
    refalrts::link_brackets( context[18], context[54] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[40], context[48] );
    refalrts::link_brackets( context[46], context[47] );
    refalrts::link_brackets( context[41], context[45] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[49], context[55] );
    res = refalrts::splice_evar( res, context[13], context[21] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[42], context[46] );
    res = refalrts::splice_evar( res, context[22], context[34] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[36], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$26=1@1/4 s.X/5 (/8 e.Pattern-L0/6 )/9 s.Char0/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.X: 5
  //DEBUG: s.Char0: 10
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 Tile{ HalfReuse: & Decompile-Pattern-Hole$26=1@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: s.Char0/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S26A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S26A1Z1("Decompile-Pattern-Hole$26=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S26A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S27A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 64 elems
  refalrts::Iter context[64];
  refalrts::zeros( context, 64 );
  // </0 & Decompile-Pattern-Hole$27=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$27=1@1/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$27=1@1/4 s.X/5 (/8 e.Pattern-L0/23 )/9 s.R0/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 s.VL/33 s.VR/34 s.LB/35 s.RB/36 >/1
    context[23] = context[6];
    context[24] = context[7];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[36], context[31], context[32] ) )
      continue;
    if( ! refalrts::empty_seq( context[31], context[32] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: s.R0: 10
    //DEBUG: e.Pattern-L0: 23
    //DEBUG: e.Pattern-R0: 25
    //DEBUG: e.Vars0: 27
    //DEBUG: e.Commands0: 29
    //DEBUG: s.VL: 33
    //DEBUG: s.VR: 34
    //DEBUG: s.LB: 35
    //DEBUG: s.RB: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </37 & Decompile-Pattern-Hole/38 0/39 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 HalfReuse: 4/8 } >/40 (/41 Tile{ AsIs: e.Pattern-L0/23 } (/42 Tile{ HalfReuse: # e/22 AsIs: s.VL/33 AsIs: s.VR/34 } '='/43 s.VL/33/44 s.VR/34/45 )/46 (/47 # LB/48 )/49 Tile{ AsIs: s.LB/35 } )/50 (/51 Tile{ AsIs: s.RB/36 } (/52 # RB/53 )/54 (/55 # Hole/56 Tile{ HalfReuse: s.RB36 /9 AsIs: s.R0/10 HalfReuse: )/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 HalfReuse: (/18 HalfReuse: # e/21 } s.VL/33/57 s.VR/34/58 '='/59 s.VL/33/60 s.VR/34/61 )/62 )/63 Tile{ AsIs: e.Commands0/29 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[39], 0UL);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_char(vm, context[43], '=');
    refalrts::copy_stvar(vm, context[44], context[33]);
    refalrts::copy_stvar(vm, context[45], context[34]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_ident(vm, context[48], identifiers[ident_LB]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_open_bracket(vm, context[51]);
    refalrts::alloc_open_bracket(vm, context[52]);
    refalrts::alloc_ident(vm, context[53], identifiers[ident_RB]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_ident(vm, context[56], identifiers[ident_Hole]);
    refalrts::copy_stvar(vm, context[57], context[33]);
    refalrts::copy_stvar(vm, context[58], context[34]);
    refalrts::alloc_char(vm, context[59], '=');
    refalrts::copy_stvar(vm, context[60], context[33]);
    refalrts::copy_stvar(vm, context[61], context[34]);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_close_bracket(vm, context[63]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_number(context[8], 4UL);
    refalrts::reinit_ident(context[22], identifiers[ident_e]);
    refalrts::reinit_svar( context[9], context[36] );
    refalrts::reinit_close_bracket(context[13]);
    refalrts::reinit_open_bracket(context[18]);
    refalrts::reinit_ident(context[21], identifiers[ident_e]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[17], context[63] );
    refalrts::link_brackets( context[18], context[62] );
    refalrts::link_brackets( context[51], context[14] );
    refalrts::link_brackets( context[55], context[13] );
    refalrts::link_brackets( context[52], context[54] );
    refalrts::link_brackets( context[41], context[50] );
    refalrts::link_brackets( context[47], context[49] );
    refalrts::link_brackets( context[42], context[46] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[57], context[63] );
    res = refalrts::splice_evar( res, context[9], context[21] );
    res = refalrts::splice_evar( res, context[52], context[56] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[43], context[49] );
    res = refalrts::splice_evar( res, context[22], context[34] );
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$27=1@1/4 s.X/5 (/8 e.Pattern-L0/6 )/9 s.R0/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.X: 5
  //DEBUG: s.R0: 10
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 Tile{ HalfReuse: & Decompile-Pattern-Hole$27=1@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: s.R0/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S27A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S27A1Z1("Decompile-Pattern-Hole$27=1@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S27A1Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S7A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & Decompile-Pattern-Hole$7=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$7=2@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 (/24 e.new6/22 )/25 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 22
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$7=2@1/4 s.Top$a0/5 (/8 e.Pattern-L0/26 )/9 (/12 e.Chars0/28 )/13 (/16 e.Pattern-R0/30 )/17 (/20 e.Vars0/32 )/21 (/24 e.Commands0/34 )/25 s.L$a/38 >/1
    context[26] = context[6];
    context[27] = context[7];
    context[28] = context[10];
    context[29] = context[11];
    context[30] = context[14];
    context[31] = context[15];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[22];
    context[35] = context[23];
    context[36] = context[2];
    context[37] = context[3];
    // closed e.Pattern-L0 as range 26
    // closed e.Chars0 as range 28
    // closed e.Pattern-R0 as range 30
    // closed e.Vars0 as range 32
    // closed e.Commands0 as range 34
    if( ! refalrts::svar_left( context[38], context[36], context[37] ) )
      continue;
    if( ! refalrts::empty_seq( context[36], context[37] ) )
      continue;
    //DEBUG: s.Top$a0: 5
    //DEBUG: e.Pattern-L0: 26
    //DEBUG: e.Chars0: 28
    //DEBUG: e.Pattern-R0: 30
    //DEBUG: e.Vars0: 32
    //DEBUG: e.Commands0: 34
    //DEBUG: s.L$a: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.L$a/38 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 AsIs: s.Top$a0/5 AsIs: (/8 AsIs: e.Pattern-L0/26 HalfReuse: (/9 HalfReuse: # C/12 AsIs: e.Chars0/28 AsIs: )/13 HalfReuse: s.L$a38 /16 } Tile{ AsIs: )/25 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Pattern-R0/30 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.Vars0/32 AsIs: )/21 } Tile{ AsIs: e.Commands0/34 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_ident(context[12], identifiers[ident_C]);
    refalrts::reinit_svar( context[16], context[38] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[24], context[17] );
    refalrts::link_brackets( context[8], context[25] );
    refalrts::link_brackets( context[9], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[25] );
    refalrts::splice_to_freelist_open( vm, context[16], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$7=2@1/4 s.Top$a0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Chars0/10 )/13 (/16 e.Pattern-R0/14 )/17 (/20 e.Vars0/18 )/21 (/24 e.Commands0/22 )/25 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Chars0 as range 10
  // closed e.Pattern-R0 as range 14
  // closed e.Vars0 as range 18
  // closed e.Commands0 as range 22
  // closed e.dyn as range 2
  //DEBUG: s.Top$a0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Chars0: 10
  //DEBUG: e.Pattern-R0: 14
  //DEBUG: e.Vars0: 18
  //DEBUG: e.Commands0: 22
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </26 Tile{ HalfReuse: & Decompile-Pattern-Hole$7=2@0/0 HalfReuse: 0/4 AsIs: s.Top$a0/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Chars0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Pattern-R0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Vars0/18 AsIs: )/21 AsIs: (/24 AsIs: e.Commands0/22 AsIs: )/25 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S7A2Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[26] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S7A2Z1("Decompile-Pattern-Hole$7=2@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S7A2Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S8A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & Decompile-Pattern-Hole$8=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$8=2@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 (/24 e.new6/22 )/25 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 22
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$8=2@1/4 s.Top$a0/5 (/8 e.Pattern-L0/26 )/9 (/12 e.Chars0/28 )/13 (/16 e.Pattern-R0/30 )/17 (/20 e.Vars0/32 )/21 (/24 e.Commands0/34 )/25 s.R$a/38 >/1
    context[26] = context[6];
    context[27] = context[7];
    context[28] = context[10];
    context[29] = context[11];
    context[30] = context[14];
    context[31] = context[15];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[22];
    context[35] = context[23];
    context[36] = context[2];
    context[37] = context[3];
    // closed e.Pattern-L0 as range 26
    // closed e.Chars0 as range 28
    // closed e.Pattern-R0 as range 30
    // closed e.Vars0 as range 32
    // closed e.Commands0 as range 34
    if( ! refalrts::svar_left( context[38], context[36], context[37] ) )
      continue;
    if( ! refalrts::empty_seq( context[36], context[37] ) )
      continue;
    //DEBUG: s.Top$a0: 5
    //DEBUG: e.Pattern-L0: 26
    //DEBUG: e.Chars0: 28
    //DEBUG: e.Pattern-R0: 30
    //DEBUG: e.Vars0: 32
    //DEBUG: e.Commands0: 34
    //DEBUG: s.R$a: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@2/4 AsIs: s.Top$a0/5 AsIs: (/8 AsIs: e.Pattern-L0/26 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: s.R$a/38 } Tile{ AsIs: (/24 } Tile{ HalfReuse: # C/25 } </39 & Rev/40 Tile{ AsIs: e.Chars0/28 } Tile{ HalfReuse: >/13 HalfReuse: )/16 AsIs: e.Pattern-R0/30 AsIs: )/17 AsIs: (/20 AsIs: e.Vars0/32 AsIs: )/21 } Tile{ AsIs: e.Commands0/34 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_Rev]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
    refalrts::reinit_ident(context[25], identifiers[ident_C]);
    refalrts::reinit_close_call(context[13]);
    refalrts::reinit_close_bracket(context[16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[12], context[17] );
    refalrts::link_brackets( context[24], context[16] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[13], context[21] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$8=2@1/4 s.Top$a0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Chars0/10 )/13 (/16 e.Pattern-R0/14 )/17 (/20 e.Vars0/18 )/21 (/24 e.Commands0/22 )/25 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Chars0 as range 10
  // closed e.Pattern-R0 as range 14
  // closed e.Vars0 as range 18
  // closed e.Commands0 as range 22
  // closed e.dyn as range 2
  //DEBUG: s.Top$a0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Chars0: 10
  //DEBUG: e.Pattern-R0: 14
  //DEBUG: e.Vars0: 18
  //DEBUG: e.Commands0: 22
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </26 Tile{ HalfReuse: & Decompile-Pattern-Hole$8=2@0/0 HalfReuse: 0/4 AsIs: s.Top$a0/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Chars0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Pattern-R0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Vars0/18 AsIs: )/21 AsIs: (/24 AsIs: e.Commands0/22 AsIs: )/25 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S8A2Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[26] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S8A2Z1("Decompile-Pattern-Hole$8=2@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S8A2Z1);


static refalrts::FnResult func_gen_Decompilem_Result_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 71 elems
  refalrts::Iter context[71];
  refalrts::zeros( context, 71 );
  // </0 & Decompile-Result@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Result@2/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & Decompile-Result@2/4 (/7 e.new10/15 )/8 t.new5/9 (/13 e.new11/17 )/14 (/23 s.new6/25 s.new7/26 e.new8/21 )/24 e.new9/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new10 as range 15
    // closed e.new11 as range 17
    // closed e.new9 as range 19
    if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
      continue;
    // closed e.new8 as range 21
    do {
      // </0 & Decompile-Result@2/4 (/7 e.Vars0/27 )/8 t.MB/9 (/13 e.Result/29 )/14 (/23 s.Offset/25 # NCS/26 e.Word/31 )/24 e.Commands/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NCS], context[26] ) )
        continue;
      // closed e.Vars0 as range 27
      // closed e.Result as range 29
      // closed e.Word as range 31
      // closed e.Commands as range 33
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: e.Vars0: 27
      //DEBUG: e.Result: 29
      //DEBUG: e.Word: 31
      //DEBUG: e.Commands: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/27 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/29 HalfReuse: (/14 HalfReuse: # W/23 } Tile{ AsIs: e.Word/31 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/33 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_W]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::splice_to_freelist_open( vm, context[23], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@2/4 (/7 e.new18/27 )/8 t.new12/9 (/13 e.new19/29 )/14 (/23 s.new14/25 s.new15/26 s.new16/35 e.new17/31 )/24 e.new13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new18 as range 27
      // closed e.new19 as range 29
      // closed e.new13 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      // closed e.new17 as range 31
      do {
        // </0 & Decompile-Result@2/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # NNS/26 s.Number/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_NNS], context[26] ) )
          continue;
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Number: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # N/23 } Tile{ AsIs: s.Number/35 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/40 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_N]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[14], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::splice_to_freelist_open( vm, context[23], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@2/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # NS/26 s.Code/35 s.Char/44 )/24 e.Commands/42 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_NS], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 42
        if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
          continue;
        if( ! refalrts::empty_seq( context[40], context[41] ) )
          continue;
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Code: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 42
        //DEBUG: s.Char: 44

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} s.Code/35 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # C/23 } Tile{ AsIs: s.Char/44 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/42 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_C]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[14], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::splice_to_freelist_open( vm, context[23], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@2/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # TEXT/26 s.Count/35 e.Chars/40 )/24 e.Commands/42 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_TEXT], context[26] ) )
        continue;
      // closed e.Vars0 as range 36
      // closed e.Result as range 38
      // closed e.Chars as range 40
      // closed e.Commands as range 42
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: s.Count: 35
      //DEBUG: e.Vars0: 36
      //DEBUG: e.Result: 38
      //DEBUG: e.Chars: 40
      //DEBUG: e.Commands: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} s.Count/35 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # C/23 } Tile{ AsIs: e.Chars/40 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/42 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_C]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      refalrts::splice_to_freelist_open( vm, context[23], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@2/4 (/7 e.new16/27 )/8 t.new12/9 (/13 e.new17/29 )/14 (/23 s.new14/25 s.new15/26 )/24 e.new13/31 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.new16 as range 27
      // closed e.new17 as range 29
      // closed e.new13 as range 31
      do {
        // </0 & Decompile-Result@2/4 (/7 e.Vars0/33 )/8 t.MB/9 (/13 e.Result/35 )/14 (/23 s.Offset/25 # BL/26 )/24 e.Commands/37 >/1
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        if( ! refalrts::ident_term( identifiers[ident_BL], context[26] ) )
          continue;
        // closed e.Vars0 as range 33
        // closed e.Result as range 35
        // closed e.Commands as range 37
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: e.Vars0: 33
        //DEBUG: e.Result: 35
        //DEBUG: e.Commands: 37

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/33 AsIs: )/8 } Tile{ AsIs: (/23 } Tile{ AsIs: t.MB/9 } Tile{ AsIs: e.Result/35 } Tile{ AsIs: )/14 } Tile{ HalfReuse: (/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[26], context[24] );
        refalrts::link_brackets( context[23], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@2/4 (/7 e.Vars0/33 )/8 (/9 t.MB/41 e.Result/39 )/10 (/13 e.Nested/35 )/14 (/23 s.Offset/25 # BR/26 )/24 e.Commands/37 >/1
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = 0;
        context[40] = 0;
        if( ! refalrts::brackets_term( context[39], context[40], context[9] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_BR], context[26] ) )
          continue;
        // closed e.Vars0 as range 33
        // closed e.Nested as range 35
        // closed e.Commands as range 37
        context[42] = refalrts::tvar_left( context[41], context[39], context[40] );
        if( ! context[42] )
          continue;
        // closed e.Result as range 39
        //DEBUG: s.Offset: 25
        //DEBUG: e.Vars0: 33
        //DEBUG: e.Nested: 35
        //DEBUG: e.Commands: 37
        //DEBUG: t.MB: 41
        //DEBUG: e.Result: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/33 AsIs: )/8 } Tile{ AsIs: t.MB/41 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Result/39 } Tile{ AsIs: (/23 } Tile{ HalfReuse: '*'/14 } Tile{ AsIs: e.Nested/35 } Tile{ HalfReuse: )/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
        refalrts::reinit_char(context[14], '*');
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[23], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@2/4 (/7 e.Vars0/33 )/8 t.MB/9 (/13 e.Result/35 )/14 (/23 s.Offset/25 # BLR/26 )/24 e.Commands/37 >/1
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      if( ! refalrts::ident_term( identifiers[ident_BLR], context[26] ) )
        continue;
      // closed e.Vars0 as range 33
      // closed e.Result as range 35
      // closed e.Commands as range 37
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: e.Vars0: 33
      //DEBUG: e.Result: 35
      //DEBUG: e.Commands: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/33 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/35 HalfReuse: (/14 HalfReuse: '*'/23 } Tile{ HalfReuse: )/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_char(context[23], '*');
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      refalrts::splice_to_freelist_open( vm, context[23], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@2/4 (/7 e.new17/27 )/8 t.new12/9 (/13 e.new18/29 (/37 '*'/39 e.new19/35 )/38 )/14 (/23 s.new14/25 s.new15/26 e.new16/31 )/24 e.new13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_right( context[35], context[36], context[29], context[30] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::char_left( '*', context[35], context[36] );
      if( ! context[39] )
        continue;
      // closed e.new17 as range 27
      // closed e.new18 as range 29
      // closed e.new19 as range 35
      // closed e.new16 as range 31
      // closed e.new13 as range 33
      do {
        // </0 & Decompile-Result@2/4 (/7 e.Vars0/40 )/8 t.MB/9 (/13 e.Result/42 (/37 '*'/39 e.Inner/44 )/38 )/14 (/23 s.Offset/25 # ACT1/26 e.Name/46 )/24 e.Commands/48 >/1
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[35];
        context[45] = context[36];
        context[46] = context[31];
        context[47] = context[32];
        context[48] = context[33];
        context[49] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ACT1], context[26] ) )
          continue;
        // closed e.Vars0 as range 40
        // closed e.Result as range 42
        // closed e.Inner as range 44
        // closed e.Name as range 46
        // closed e.Commands as range 48
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: e.Vars0: 40
        //DEBUG: e.Result: 42
        //DEBUG: e.Inner: 44
        //DEBUG: e.Name: 46
        //DEBUG: e.Commands: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 # ACT1/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/40 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/42 AsIs: (/37 Reuse: '!'/39 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Name/46 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Inner/44 } Tile{ AsIs: )/38 } Tile{ AsIs: )/24 AsIs: e.Commands/48 AsIs: >/1 ]] }
        refalrts::update_char(context[39], '!');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[23], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[39], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@2/4 (/7 e.Vars0/40 )/8 t.MB/9 (/13 e.Result/42 (/37 '*'/39 e.Inner/44 )/38 )/14 (/23 s.Offset/25 # ACT_EXTRN/26 e.Name/46 )/24 e.Commands/48 >/1
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[35];
      context[45] = context[36];
      context[46] = context[31];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_ACTu_EXTRN], context[26] ) )
        continue;
      // closed e.Vars0 as range 40
      // closed e.Result as range 42
      // closed e.Inner as range 44
      // closed e.Name as range 46
      // closed e.Commands as range 48
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: e.Vars0: 40
      //DEBUG: e.Result: 42
      //DEBUG: e.Inner: 44
      //DEBUG: e.Name: 46
      //DEBUG: e.Commands: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 # ACT_EXTRN/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/40 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/42 AsIs: (/37 Reuse: '!'/39 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Name/46 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Inner/44 } Tile{ AsIs: )/38 } Tile{ AsIs: )/24 AsIs: e.Commands/48 AsIs: >/1 ]] }
      refalrts::update_char(context[39], '!');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[23], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, context[39], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@2/4 (/7 e.new17/27 )/8 t.new12/9 (/13 e.new18/29 )/14 (/23 s.new14/25 s.new15/26 s.new16/35 )/24 e.new13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new17 as range 27
      // closed e.new18 as range 29
      // closed e.new13 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      do {
        // </0 & Decompile-Result@2/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # TPLS/26 s.Copy/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TPLS], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Copy: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.Copy
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z2S10C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@2$10?1/46 e.Vars-B/47 (/53 # s/55 s.Id/58 '='/57 s.Copy/56 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            context[55] = refalrts::ident_left( identifiers[ident_s], context[51], context[52] );
            if( ! context[55] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[35], context[51], context[52] ) )
              continue;
            context[57] = refalrts::char_right( '=', context[51], context[52] );
            if( ! context[57] )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.Copy: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Id: 58

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/25 # TPLS/26 s.Copy/35 {REMOVED TILE} & Decompile-Result@2$10?1/46 e.Vars-B/47 (/53 # s/55 {REMOVED TILE} e.Vars-E/49 >/43 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # s/23 } Tile{ AsIs: s.Id/58 AsIs: '='/57 AsIs: s.Copy/56 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[23], identifiers[ident_s]);
            refalrts::reinit_close_call(context[42]);
            refalrts::push_stack( vm, context[42] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[13], context[24] );
            refalrts::link_brackets( context[14], context[54] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[42] );
            res = refalrts::splice_evar( res, context[58], context[54] );
            refalrts::splice_to_freelist_open( vm, context[23], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@2/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # TPLE/26 s.CopyR/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TPLE], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.CopyR: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.CopyR
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z2S11C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@2$11?1/46 e.Vars-B/47 (/53 s.Type/56 s.IdL/57 s.IdR/58 '='/59 s.CopyL/60 s.CopyR/55 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            if( ! refalrts::repeated_stvar_right( vm, context[55], context[35], context[51], context[52] ) )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[56], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[57], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            context[59] = refalrts::char_left( '=', context[51], context[52] );
            if( ! context[59] )
              continue;
            if( ! refalrts::svar_left( context[60], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.CopyR: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Type: 56
            //DEBUG: s.IdL: 57
            //DEBUG: s.IdR: 58
            //DEBUG: s.CopyL: 60
            //9: t.MB
            //25: s.Offset
            //35: s.CopyR
            //36: e.Vars0
            //38: e.Result
            //40: e.Commands
            //47: e.Vars-B
            //49: e.Vars-E
            //55: s.CopyR
            //56: s.Type
            //57: s.IdL
            //58: s.IdR
            //60: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[61]);
            refalrts::alloc_name(vm, context[63], functions[efunc_gen_Decompilem_Result_Z2S11C2]);
            refalrts::alloc_ident(vm, context[64], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[62]);
            refalrts::push_stack( vm, context[62] );
            refalrts::push_stack( vm, context[61] );
            res = refalrts::splice_elem( res, context[62] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[61] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </61 & Decompile-Result@2$11?2/65 e.B/66 s.Type/70 e.E/68 >/62
              context[63] = 0;
              context[64] = 0;
              context[65] = refalrts::call_left( context[63], context[64], context[61], context[62] );
              context[66] = 0;
              context[67] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[68] = context[63];
                context[69] = context[64];
                if( ! refalrts::repeated_stvar_left( vm, context[70], context[56], context[68], context[69] ) )
                  continue;
                // closed e.E as range 68
                //DEBUG: t.MB: 9
                //DEBUG: s.Offset: 25
                //DEBUG: s.CopyR: 35
                //DEBUG: e.Vars0: 36
                //DEBUG: e.Result: 38
                //DEBUG: e.Commands: 40
                //DEBUG: e.Vars-B: 47
                //DEBUG: e.Vars-E: 49
                //DEBUG: s.Type: 56
                //DEBUG: s.IdL: 57
                //DEBUG: s.IdR: 58
                //DEBUG: s.CopyL: 60
                //DEBUG: e.B: 66
                //DEBUG: e.E: 68

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/25 # TPLE/26 s.CopyR/35 {REMOVED TILE} & Decompile-Result@2$11?1/46 e.Vars-B/47 (/53 s.Type/56 {REMOVED TILE} e.Vars-E/49 >/43 </61 & Decompile-Result@2$11?2/65 e.B/66 s.Type/70 e.E/68 >/62 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: s.Type70 /23 } Tile{ AsIs: s.IdL/57 AsIs: s.IdR/58 AsIs: '='/59 AsIs: s.CopyL/60 AsIs: s.CopyR/55 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[14]);
                refalrts::reinit_svar( context[23], context[70] );
                refalrts::reinit_close_call(context[42]);
                refalrts::push_stack( vm, context[42] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[13], context[24] );
                refalrts::link_brackets( context[14], context[54] );
                refalrts::link_brackets( context[7], context[8] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[24], context[42] );
                res = refalrts::splice_evar( res, context[57], context[54] );
                refalrts::splice_to_freelist_open( vm, context[23], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[66], context[67], context[63], context[64] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[61], context[62]);
            continue;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@2/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # MULS/26 s.Copy/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_MULS], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Copy: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.Copy
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z2S12C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@2$12?1/46 e.Vars-B/47 (/53 # s/55 s.Id/58 '='/57 s.Copy/56 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            context[55] = refalrts::ident_left( identifiers[ident_s], context[51], context[52] );
            if( ! context[55] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[35], context[51], context[52] ) )
              continue;
            context[57] = refalrts::char_right( '=', context[51], context[52] );
            if( ! context[57] )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.Copy: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Id: 58

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/25 # MULS/26 s.Copy/35 {REMOVED TILE} & Decompile-Result@2$12?1/46 e.Vars-B/47 (/53 # s/55 {REMOVED TILE} e.Vars-E/49 >/43 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # s/23 } Tile{ AsIs: s.Id/58 AsIs: '='/57 AsIs: s.Copy/56 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[23], identifiers[ident_s]);
            refalrts::reinit_close_call(context[42]);
            refalrts::push_stack( vm, context[42] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[13], context[24] );
            refalrts::link_brackets( context[14], context[54] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[42] );
            res = refalrts::splice_evar( res, context[58], context[54] );
            refalrts::splice_to_freelist_open( vm, context[23], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@2/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # MULE/26 s.CopyR/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_MULE], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.CopyR: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.CopyR
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z2S13C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@2$13?1/46 e.Vars-B/47 (/53 s.Type/56 s.IdL/57 s.IdR/58 '='/59 s.CopyL/60 s.CopyR/55 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            if( ! refalrts::repeated_stvar_right( vm, context[55], context[35], context[51], context[52] ) )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[56], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[57], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            context[59] = refalrts::char_left( '=', context[51], context[52] );
            if( ! context[59] )
              continue;
            if( ! refalrts::svar_left( context[60], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.CopyR: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Type: 56
            //DEBUG: s.IdL: 57
            //DEBUG: s.IdR: 58
            //DEBUG: s.CopyL: 60
            //9: t.MB
            //25: s.Offset
            //35: s.CopyR
            //36: e.Vars0
            //38: e.Result
            //40: e.Commands
            //47: e.Vars-B
            //49: e.Vars-E
            //55: s.CopyR
            //56: s.Type
            //57: s.IdL
            //58: s.IdR
            //60: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[61]);
            refalrts::alloc_name(vm, context[63], functions[efunc_gen_Decompilem_Result_Z2S13C2]);
            refalrts::alloc_ident(vm, context[64], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[62]);
            refalrts::push_stack( vm, context[62] );
            refalrts::push_stack( vm, context[61] );
            res = refalrts::splice_elem( res, context[62] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[61] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </61 & Decompile-Result@2$13?2/65 e.B/66 s.Type/70 e.E/68 >/62
              context[63] = 0;
              context[64] = 0;
              context[65] = refalrts::call_left( context[63], context[64], context[61], context[62] );
              context[66] = 0;
              context[67] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[68] = context[63];
                context[69] = context[64];
                if( ! refalrts::repeated_stvar_left( vm, context[70], context[56], context[68], context[69] ) )
                  continue;
                // closed e.E as range 68
                //DEBUG: t.MB: 9
                //DEBUG: s.Offset: 25
                //DEBUG: s.CopyR: 35
                //DEBUG: e.Vars0: 36
                //DEBUG: e.Result: 38
                //DEBUG: e.Commands: 40
                //DEBUG: e.Vars-B: 47
                //DEBUG: e.Vars-E: 49
                //DEBUG: s.Type: 56
                //DEBUG: s.IdL: 57
                //DEBUG: s.IdR: 58
                //DEBUG: s.CopyL: 60
                //DEBUG: e.B: 66
                //DEBUG: e.E: 68

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/25 # MULE/26 s.CopyR/35 {REMOVED TILE} & Decompile-Result@2$13?1/46 e.Vars-B/47 (/53 s.Type/56 {REMOVED TILE} e.Vars-E/49 >/43 </61 & Decompile-Result@2$13?2/65 e.B/66 s.Type/70 e.E/68 >/62 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@2/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: s.Type70 /23 } Tile{ AsIs: s.IdL/57 AsIs: s.IdR/58 AsIs: '='/59 AsIs: s.CopyL/60 AsIs: s.CopyR/55 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[14]);
                refalrts::reinit_svar( context[23], context[70] );
                refalrts::reinit_close_call(context[42]);
                refalrts::push_stack( vm, context[42] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[13], context[24] );
                refalrts::link_brackets( context[14], context[54] );
                refalrts::link_brackets( context[7], context[8] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[24], context[42] );
                res = refalrts::splice_evar( res, context[57], context[54] );
                refalrts::splice_to_freelist_open( vm, context[23], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[66], context[67], context[63], context[64] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[61], context[62]);
            continue;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@2/4 (/7 e.Vars0/36 )/8 '$'/9 (/13 e.Result/38 )/14 (/23 s.Offset1/25 # ECOND/26 s.Offset3/35 )/24 (/44 s.Offset2/52 # LABEL/53 e.Name/42 )/45 (/48 s.Offset3/51 # POPVF/50 )/49 e.Commands/40 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[33];
      context[41] = context[34];
      if( ! refalrts::char_term( '$', context[9] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_ECOND], context[26] ) )
        continue;
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_left( context[42], context[43], context[40], context[41] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::brackets_left( context[46], context[47], context[40], context[41] );
      if( ! context[48] )
        continue;
      refalrts::bracket_pointers(context[48], context[49]);
      context[50] = refalrts::ident_right( identifiers[ident_POPVF], context[46], context[47] );
      if( ! context[50] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[51], context[35], context[46], context[47] ) )
        continue;
      if( ! refalrts::empty_seq( context[46], context[47] ) )
        continue;
      // closed e.Vars0 as range 36
      // closed e.Result as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[52], context[42], context[43] ) )
        continue;
      context[53] = refalrts::ident_left( identifiers[ident_LABEL], context[42], context[43] );
      if( ! context[53] )
        continue;
      // closed e.Name as range 42
      //DEBUG: s.Offset1: 25
      //DEBUG: s.Offset3: 35
      //DEBUG: e.Vars0: 36
      //DEBUG: e.Result: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.Offset2: 52
      //DEBUG: e.Name: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1/25 {REMOVED TILE} s.Offset3/35 {REMOVED TILE} s.Offset2/52 {REMOVED TILE} s.Offset3/51 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # Result/13 AsIs: e.Result/38 AsIs: )/14 AsIs: (/23 } Tile{ Reuse: # EndCondition/53 AsIs: e.Name/42 AsIs: )/45 HalfReuse: </48 } Tile{ HalfReuse: & Decompile-Pattern-Hole@2/0 HalfReuse: 8/4 AsIs: (/7 } Tile{ HalfReuse: 6/26 } Tile{ AsIs: )/24 AsIs: (/44 } Tile{ HalfReuse: 7/50 } Tile{ AsIs: )/8 } (/54 Tile{ AsIs: e.Vars0/36 } Tile{ AsIs: )/49 AsIs: e.Commands/40 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_ident(context[13], identifiers[ident_Result]);
      refalrts::update_ident(context[53], identifiers[ident_EndCondition]);
      refalrts::reinit_open_call(context[48]);
      refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
      refalrts::reinit_number(context[4], 8UL);
      refalrts::reinit_number(context[26], 6UL);
      refalrts::reinit_number(context[50], 7UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[54], context[49] );
      refalrts::link_brackets( context[44], context[8] );
      refalrts::link_brackets( context[7], context[24] );
      refalrts::link_brackets( context[23], context[45] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[49];
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[24], context[44] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[53], context[48] );
      res = refalrts::splice_evar( res, context[9], context[23] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@2/4 (/7 e.new14/27 )/8 '$'/9 (/13 e.new15/29 )/14 (/23 s.new13/25 # OUTEST/26 )/24 e.new12/31 >/1
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    if( ! refalrts::char_term( '$', context[9] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_OUTEST], context[26] ) )
      continue;
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    // closed e.new14 as range 27
    // closed e.new15 as range 29
    // closed e.new12 as range 31
    do {
      // </0 & Decompile-Result@2/4 (/7 e.Vars0/33 )/8 '$'/9 (/13 e.Result/35 )/14 (/23 s.Offset1/25 # OUTEST/26 )/24 (/41 s.Offset2/44 # OUTEST/43 )/42 e.Commands/37 >/1
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[37], context[38] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      context[43] = refalrts::ident_right( identifiers[ident_OUTEST], context[39], context[40] );
      if( ! context[43] )
        continue;
      // closed e.Vars0 as range 33
      // closed e.Result as range 35
      // closed e.Commands as range 37
      if( ! refalrts::svar_left( context[44], context[39], context[40] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      //DEBUG: s.Offset1: 25
      //DEBUG: e.Vars0: 33
      //DEBUG: e.Result: 35
      //DEBUG: e.Commands: 37
      //DEBUG: s.Offset2: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/33 {REMOVED TILE} {REMOVED TILE} s.Offset1/25 {REMOVED TILE} s.Offset2/44 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # Result/13 AsIs: e.Result/35 AsIs: )/14 AsIs: (/23 } Tile{ Reuse: # NextSentence/26 AsIs: )/24 AsIs: (/41 } # NextSentence/45 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@7/4 AsIs: (/7 } )/46 Tile{ HalfReuse: (/43 AsIs: )/42 AsIs: e.Commands/37 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[45], identifiers[ident_NextSentence]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_ident(context[13], identifiers[ident_Result]);
      refalrts::update_ident(context[26], identifiers[ident_NextSentence]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z7]);
      refalrts::reinit_open_bracket(context[43]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[43], context[42] );
      refalrts::link_brackets( context[7], context[46] );
      refalrts::link_brackets( context[41], context[8] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[26], context[41] );
      res = refalrts::splice_evar( res, context[9], context[23] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@2/4 (/7 e.Vars0/33 )/8 '$'/9 (/13 e.Result/35 )/14 (/23 s.Offset/25 # OUTEST/26 )/24 e.Commands/37 >/1
    context[33] = context[27];
    context[34] = context[28];
    context[35] = context[29];
    context[36] = context[30];
    context[37] = context[31];
    context[38] = context[32];
    // closed e.Vars0 as range 33
    // closed e.Result as range 35
    // closed e.Commands as range 37
    //DEBUG: s.Offset: 25
    //DEBUG: e.Vars0: 33
    //DEBUG: e.Result: 35
    //DEBUG: e.Commands: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/33 {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # Result/13 AsIs: e.Result/35 AsIs: )/14 AsIs: (/23 } # NextSentence/39 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@7/4 AsIs: (/7 } )/40 Tile{ HalfReuse: (/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[39], identifiers[ident_NextSentence]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_ident(context[13], identifiers[ident_Result]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z7]);
    refalrts::reinit_open_bracket(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[26], context[24] );
    refalrts::link_brackets( context[7], context[40] );
    refalrts::link_brackets( context[23], context[8] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[26];
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[9], context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Result@2/4 (/7 e.Vars0/15 )/8 t.MB/9 (/13 e.Result/17 )/14 e.Commands/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Vars0 as range 15
    // closed e.Result as range 17
    // closed e.Commands as range 19
    //DEBUG: t.MB: 9
    //DEBUG: e.Vars0: 15
    //DEBUG: e.Result: 17
    //DEBUG: e.Commands: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/13 } '='/21 Tile{ HalfReuse: 'C'/1 } ' '/22 Tile{ HalfReuse: 0/0 HalfReuse: 5/4 AsIs: (/7 AsIs: e.Vars0/15 AsIs: )/8 } (/23 Tile{ AsIs: t.MB/9 } Tile{ AsIs: e.Result/17 } Tile{ AsIs: )/14 } )/24 Tile{ AsIs: e.Commands/19 } Tile{ ]] }
    refalrts::alloc_char(vm, context[21], '=');
    refalrts::alloc_char(vm, context[22], ' ');
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_char(context[1], 'C');
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_number(context[4], 5UL);
    refalrts::link_brackets( context[13], context[24] );
    refalrts::link_brackets( context[23], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Result@2/4 (/7 e.Vars0/5 )/8 t.dyn0/9 (/13 e.dyn1/11 )/14 e.dyn2/2 >/1
  // closed e.Vars0 as range 5
  // closed e.dyn1 as range 11
  // closed e.dyn2 as range 2
  //DEBUG: t.dyn0: 9
  //DEBUG: e.Vars0: 5
  //DEBUG: e.dyn1: 11
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </15 & Decompile-Result@0/16 Tile{ HalfReuse: 0/0 HalfReuse: 5/4 AsIs: (/7 AsIs: e.Vars0/5 AsIs: )/8 } Tile{ AsIs: (/13 } Tile{ AsIs: t.dyn0/9 } Tile{ AsIs: e.dyn1/11 } Tile{ AsIs: )/14 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_Decompilem_Result_Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 5UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Result_Z2("Decompile-Result@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Result_Z2);


static refalrts::FnResult func_gen_Decompilem_Result_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 71 elems
  refalrts::Iter context[71];
  refalrts::zeros( context, 71 );
  // </0 & Decompile-Result@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Result@3/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & Decompile-Result@3/4 (/7 e.new10/15 )/8 t.new5/9 (/13 e.new11/17 )/14 (/23 s.new6/25 s.new7/26 e.new8/21 )/24 e.new9/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new10 as range 15
    // closed e.new11 as range 17
    // closed e.new9 as range 19
    if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
      continue;
    // closed e.new8 as range 21
    do {
      // </0 & Decompile-Result@3/4 (/7 e.Vars0/27 )/8 t.MB/9 (/13 e.Result/29 )/14 (/23 s.Offset/25 # NCS/26 e.Word/31 )/24 e.Commands/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NCS], context[26] ) )
        continue;
      // closed e.Vars0 as range 27
      // closed e.Result as range 29
      // closed e.Word as range 31
      // closed e.Commands as range 33
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: e.Vars0: 27
      //DEBUG: e.Result: 29
      //DEBUG: e.Word: 31
      //DEBUG: e.Commands: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/27 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/29 HalfReuse: (/14 HalfReuse: # W/23 } Tile{ AsIs: e.Word/31 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/33 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_W]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::splice_to_freelist_open( vm, context[23], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@3/4 (/7 e.new18/27 )/8 t.new12/9 (/13 e.new19/29 )/14 (/23 s.new14/25 s.new15/26 s.new16/35 e.new17/31 )/24 e.new13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new18 as range 27
      // closed e.new19 as range 29
      // closed e.new13 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      // closed e.new17 as range 31
      do {
        // </0 & Decompile-Result@3/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # NNS/26 s.Number/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_NNS], context[26] ) )
          continue;
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Number: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # N/23 } Tile{ AsIs: s.Number/35 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/40 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_N]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[14], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::splice_to_freelist_open( vm, context[23], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@3/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # NS/26 s.Code/35 s.Char/44 )/24 e.Commands/42 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_NS], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 42
        if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
          continue;
        if( ! refalrts::empty_seq( context[40], context[41] ) )
          continue;
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Code: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 42
        //DEBUG: s.Char: 44

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} s.Code/35 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # C/23 } Tile{ AsIs: s.Char/44 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/42 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_C]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[14], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::splice_to_freelist_open( vm, context[23], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@3/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # TEXT/26 s.Count/35 e.Chars/40 )/24 e.Commands/42 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_TEXT], context[26] ) )
        continue;
      // closed e.Vars0 as range 36
      // closed e.Result as range 38
      // closed e.Chars as range 40
      // closed e.Commands as range 42
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: s.Count: 35
      //DEBUG: e.Vars0: 36
      //DEBUG: e.Result: 38
      //DEBUG: e.Chars: 40
      //DEBUG: e.Commands: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} s.Count/35 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # C/23 } Tile{ AsIs: e.Chars/40 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/42 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_C]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      refalrts::splice_to_freelist_open( vm, context[23], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@3/4 (/7 e.new16/27 )/8 t.new12/9 (/13 e.new17/29 )/14 (/23 s.new14/25 s.new15/26 )/24 e.new13/31 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.new16 as range 27
      // closed e.new17 as range 29
      // closed e.new13 as range 31
      do {
        // </0 & Decompile-Result@3/4 (/7 e.Vars0/33 )/8 t.MB/9 (/13 e.Result/35 )/14 (/23 s.Offset/25 # BL/26 )/24 e.Commands/37 >/1
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        if( ! refalrts::ident_term( identifiers[ident_BL], context[26] ) )
          continue;
        // closed e.Vars0 as range 33
        // closed e.Result as range 35
        // closed e.Commands as range 37
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: e.Vars0: 33
        //DEBUG: e.Result: 35
        //DEBUG: e.Commands: 37

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/33 AsIs: )/8 } Tile{ AsIs: (/23 } Tile{ AsIs: t.MB/9 } Tile{ AsIs: e.Result/35 } Tile{ AsIs: )/14 } Tile{ HalfReuse: (/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[26], context[24] );
        refalrts::link_brackets( context[23], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@3/4 (/7 e.Vars0/33 )/8 (/9 t.MB/41 e.Result/39 )/10 (/13 e.Nested/35 )/14 (/23 s.Offset/25 # BR/26 )/24 e.Commands/37 >/1
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = 0;
        context[40] = 0;
        if( ! refalrts::brackets_term( context[39], context[40], context[9] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_BR], context[26] ) )
          continue;
        // closed e.Vars0 as range 33
        // closed e.Nested as range 35
        // closed e.Commands as range 37
        context[42] = refalrts::tvar_left( context[41], context[39], context[40] );
        if( ! context[42] )
          continue;
        // closed e.Result as range 39
        //DEBUG: s.Offset: 25
        //DEBUG: e.Vars0: 33
        //DEBUG: e.Nested: 35
        //DEBUG: e.Commands: 37
        //DEBUG: t.MB: 41
        //DEBUG: e.Result: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/33 AsIs: )/8 } Tile{ AsIs: t.MB/41 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Result/39 } Tile{ AsIs: (/23 } Tile{ HalfReuse: '*'/14 } Tile{ AsIs: e.Nested/35 } Tile{ HalfReuse: )/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
        refalrts::reinit_char(context[14], '*');
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[23], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@3/4 (/7 e.Vars0/33 )/8 t.MB/9 (/13 e.Result/35 )/14 (/23 s.Offset/25 # BLR/26 )/24 e.Commands/37 >/1
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      if( ! refalrts::ident_term( identifiers[ident_BLR], context[26] ) )
        continue;
      // closed e.Vars0 as range 33
      // closed e.Result as range 35
      // closed e.Commands as range 37
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: e.Vars0: 33
      //DEBUG: e.Result: 35
      //DEBUG: e.Commands: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/33 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/35 HalfReuse: (/14 HalfReuse: '*'/23 } Tile{ HalfReuse: )/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_char(context[23], '*');
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      refalrts::splice_to_freelist_open( vm, context[23], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@3/4 (/7 e.new17/27 )/8 t.new12/9 (/13 e.new18/29 (/37 '*'/39 e.new19/35 )/38 )/14 (/23 s.new14/25 s.new15/26 e.new16/31 )/24 e.new13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_right( context[35], context[36], context[29], context[30] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::char_left( '*', context[35], context[36] );
      if( ! context[39] )
        continue;
      // closed e.new17 as range 27
      // closed e.new18 as range 29
      // closed e.new19 as range 35
      // closed e.new16 as range 31
      // closed e.new13 as range 33
      do {
        // </0 & Decompile-Result@3/4 (/7 e.Vars0/40 )/8 t.MB/9 (/13 e.Result/42 (/37 '*'/39 e.Inner/44 )/38 )/14 (/23 s.Offset/25 # ACT1/26 e.Name/46 )/24 e.Commands/48 >/1
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[35];
        context[45] = context[36];
        context[46] = context[31];
        context[47] = context[32];
        context[48] = context[33];
        context[49] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ACT1], context[26] ) )
          continue;
        // closed e.Vars0 as range 40
        // closed e.Result as range 42
        // closed e.Inner as range 44
        // closed e.Name as range 46
        // closed e.Commands as range 48
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: e.Vars0: 40
        //DEBUG: e.Result: 42
        //DEBUG: e.Inner: 44
        //DEBUG: e.Name: 46
        //DEBUG: e.Commands: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 # ACT1/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/40 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/42 AsIs: (/37 Reuse: '!'/39 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Name/46 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Inner/44 } Tile{ AsIs: )/38 } Tile{ AsIs: )/24 AsIs: e.Commands/48 AsIs: >/1 ]] }
        refalrts::update_char(context[39], '!');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[23], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[39], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@3/4 (/7 e.Vars0/40 )/8 t.MB/9 (/13 e.Result/42 (/37 '*'/39 e.Inner/44 )/38 )/14 (/23 s.Offset/25 # ACT_EXTRN/26 e.Name/46 )/24 e.Commands/48 >/1
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[35];
      context[45] = context[36];
      context[46] = context[31];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_ACTu_EXTRN], context[26] ) )
        continue;
      // closed e.Vars0 as range 40
      // closed e.Result as range 42
      // closed e.Inner as range 44
      // closed e.Name as range 46
      // closed e.Commands as range 48
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: e.Vars0: 40
      //DEBUG: e.Result: 42
      //DEBUG: e.Inner: 44
      //DEBUG: e.Name: 46
      //DEBUG: e.Commands: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 # ACT_EXTRN/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/40 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/42 AsIs: (/37 Reuse: '!'/39 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Name/46 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Inner/44 } Tile{ AsIs: )/38 } Tile{ AsIs: )/24 AsIs: e.Commands/48 AsIs: >/1 ]] }
      refalrts::update_char(context[39], '!');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[23], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, context[39], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@3/4 (/7 e.new17/27 )/8 t.new12/9 (/13 e.new18/29 )/14 (/23 s.new14/25 s.new15/26 s.new16/35 )/24 e.new13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new17 as range 27
      // closed e.new18 as range 29
      // closed e.new13 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      do {
        // </0 & Decompile-Result@3/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # TPLS/26 s.Copy/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TPLS], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Copy: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.Copy
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z3S10C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@3$10?1/46 e.Vars-B/47 (/53 # s/55 s.Id/58 '='/57 s.Copy/56 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            context[55] = refalrts::ident_left( identifiers[ident_s], context[51], context[52] );
            if( ! context[55] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[35], context[51], context[52] ) )
              continue;
            context[57] = refalrts::char_right( '=', context[51], context[52] );
            if( ! context[57] )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.Copy: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Id: 58

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/25 # TPLS/26 s.Copy/35 {REMOVED TILE} & Decompile-Result@3$10?1/46 e.Vars-B/47 (/53 # s/55 {REMOVED TILE} e.Vars-E/49 >/43 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # s/23 } Tile{ AsIs: s.Id/58 AsIs: '='/57 AsIs: s.Copy/56 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[23], identifiers[ident_s]);
            refalrts::reinit_close_call(context[42]);
            refalrts::push_stack( vm, context[42] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[13], context[24] );
            refalrts::link_brackets( context[14], context[54] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[42] );
            res = refalrts::splice_evar( res, context[58], context[54] );
            refalrts::splice_to_freelist_open( vm, context[23], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@3/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # TPLE/26 s.CopyR/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TPLE], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.CopyR: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.CopyR
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z3S11C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@3$11?1/46 e.Vars-B/47 (/53 s.Type/56 s.IdL/57 s.IdR/58 '='/59 s.CopyL/60 s.CopyR/55 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            if( ! refalrts::repeated_stvar_right( vm, context[55], context[35], context[51], context[52] ) )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[56], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[57], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            context[59] = refalrts::char_left( '=', context[51], context[52] );
            if( ! context[59] )
              continue;
            if( ! refalrts::svar_left( context[60], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.CopyR: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Type: 56
            //DEBUG: s.IdL: 57
            //DEBUG: s.IdR: 58
            //DEBUG: s.CopyL: 60
            //9: t.MB
            //25: s.Offset
            //35: s.CopyR
            //36: e.Vars0
            //38: e.Result
            //40: e.Commands
            //47: e.Vars-B
            //49: e.Vars-E
            //55: s.CopyR
            //56: s.Type
            //57: s.IdL
            //58: s.IdR
            //60: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[61]);
            refalrts::alloc_name(vm, context[63], functions[efunc_gen_Decompilem_Result_Z3S11C2]);
            refalrts::alloc_ident(vm, context[64], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[62]);
            refalrts::push_stack( vm, context[62] );
            refalrts::push_stack( vm, context[61] );
            res = refalrts::splice_elem( res, context[62] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[61] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </61 & Decompile-Result@3$11?2/65 e.B/66 s.Type/70 e.E/68 >/62
              context[63] = 0;
              context[64] = 0;
              context[65] = refalrts::call_left( context[63], context[64], context[61], context[62] );
              context[66] = 0;
              context[67] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[68] = context[63];
                context[69] = context[64];
                if( ! refalrts::repeated_stvar_left( vm, context[70], context[56], context[68], context[69] ) )
                  continue;
                // closed e.E as range 68
                //DEBUG: t.MB: 9
                //DEBUG: s.Offset: 25
                //DEBUG: s.CopyR: 35
                //DEBUG: e.Vars0: 36
                //DEBUG: e.Result: 38
                //DEBUG: e.Commands: 40
                //DEBUG: e.Vars-B: 47
                //DEBUG: e.Vars-E: 49
                //DEBUG: s.Type: 56
                //DEBUG: s.IdL: 57
                //DEBUG: s.IdR: 58
                //DEBUG: s.CopyL: 60
                //DEBUG: e.B: 66
                //DEBUG: e.E: 68

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/25 # TPLE/26 s.CopyR/35 {REMOVED TILE} & Decompile-Result@3$11?1/46 e.Vars-B/47 (/53 s.Type/56 {REMOVED TILE} e.Vars-E/49 >/43 </61 & Decompile-Result@3$11?2/65 e.B/66 s.Type/70 e.E/68 >/62 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: s.Type70 /23 } Tile{ AsIs: s.IdL/57 AsIs: s.IdR/58 AsIs: '='/59 AsIs: s.CopyL/60 AsIs: s.CopyR/55 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[14]);
                refalrts::reinit_svar( context[23], context[70] );
                refalrts::reinit_close_call(context[42]);
                refalrts::push_stack( vm, context[42] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[13], context[24] );
                refalrts::link_brackets( context[14], context[54] );
                refalrts::link_brackets( context[7], context[8] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[24], context[42] );
                res = refalrts::splice_evar( res, context[57], context[54] );
                refalrts::splice_to_freelist_open( vm, context[23], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[66], context[67], context[63], context[64] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[61], context[62]);
            continue;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@3/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # MULS/26 s.Copy/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_MULS], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Copy: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.Copy
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z3S12C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@3$12?1/46 e.Vars-B/47 (/53 # s/55 s.Id/58 '='/57 s.Copy/56 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            context[55] = refalrts::ident_left( identifiers[ident_s], context[51], context[52] );
            if( ! context[55] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[35], context[51], context[52] ) )
              continue;
            context[57] = refalrts::char_right( '=', context[51], context[52] );
            if( ! context[57] )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.Copy: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Id: 58

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/25 # MULS/26 s.Copy/35 {REMOVED TILE} & Decompile-Result@3$12?1/46 e.Vars-B/47 (/53 # s/55 {REMOVED TILE} e.Vars-E/49 >/43 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # s/23 } Tile{ AsIs: s.Id/58 AsIs: '='/57 AsIs: s.Copy/56 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[23], identifiers[ident_s]);
            refalrts::reinit_close_call(context[42]);
            refalrts::push_stack( vm, context[42] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[13], context[24] );
            refalrts::link_brackets( context[14], context[54] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[42] );
            res = refalrts::splice_evar( res, context[58], context[54] );
            refalrts::splice_to_freelist_open( vm, context[23], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@3/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # MULE/26 s.CopyR/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_MULE], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.CopyR: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.CopyR
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z3S13C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@3$13?1/46 e.Vars-B/47 (/53 s.Type/56 s.IdL/57 s.IdR/58 '='/59 s.CopyL/60 s.CopyR/55 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            if( ! refalrts::repeated_stvar_right( vm, context[55], context[35], context[51], context[52] ) )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[56], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[57], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            context[59] = refalrts::char_left( '=', context[51], context[52] );
            if( ! context[59] )
              continue;
            if( ! refalrts::svar_left( context[60], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.CopyR: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Type: 56
            //DEBUG: s.IdL: 57
            //DEBUG: s.IdR: 58
            //DEBUG: s.CopyL: 60
            //9: t.MB
            //25: s.Offset
            //35: s.CopyR
            //36: e.Vars0
            //38: e.Result
            //40: e.Commands
            //47: e.Vars-B
            //49: e.Vars-E
            //55: s.CopyR
            //56: s.Type
            //57: s.IdL
            //58: s.IdR
            //60: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[61]);
            refalrts::alloc_name(vm, context[63], functions[efunc_gen_Decompilem_Result_Z3S13C2]);
            refalrts::alloc_ident(vm, context[64], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[62]);
            refalrts::push_stack( vm, context[62] );
            refalrts::push_stack( vm, context[61] );
            res = refalrts::splice_elem( res, context[62] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[61] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </61 & Decompile-Result@3$13?2/65 e.B/66 s.Type/70 e.E/68 >/62
              context[63] = 0;
              context[64] = 0;
              context[65] = refalrts::call_left( context[63], context[64], context[61], context[62] );
              context[66] = 0;
              context[67] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[68] = context[63];
                context[69] = context[64];
                if( ! refalrts::repeated_stvar_left( vm, context[70], context[56], context[68], context[69] ) )
                  continue;
                // closed e.E as range 68
                //DEBUG: t.MB: 9
                //DEBUG: s.Offset: 25
                //DEBUG: s.CopyR: 35
                //DEBUG: e.Vars0: 36
                //DEBUG: e.Result: 38
                //DEBUG: e.Commands: 40
                //DEBUG: e.Vars-B: 47
                //DEBUG: e.Vars-E: 49
                //DEBUG: s.Type: 56
                //DEBUG: s.IdL: 57
                //DEBUG: s.IdR: 58
                //DEBUG: s.CopyL: 60
                //DEBUG: e.B: 66
                //DEBUG: e.E: 68

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/25 # MULE/26 s.CopyR/35 {REMOVED TILE} & Decompile-Result@3$13?1/46 e.Vars-B/47 (/53 s.Type/56 {REMOVED TILE} e.Vars-E/49 >/43 </61 & Decompile-Result@3$13?2/65 e.B/66 s.Type/70 e.E/68 >/62 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@3/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: s.Type70 /23 } Tile{ AsIs: s.IdL/57 AsIs: s.IdR/58 AsIs: '='/59 AsIs: s.CopyL/60 AsIs: s.CopyR/55 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[14]);
                refalrts::reinit_svar( context[23], context[70] );
                refalrts::reinit_close_call(context[42]);
                refalrts::push_stack( vm, context[42] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[13], context[24] );
                refalrts::link_brackets( context[14], context[54] );
                refalrts::link_brackets( context[7], context[8] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[24], context[42] );
                res = refalrts::splice_evar( res, context[57], context[54] );
                refalrts::splice_to_freelist_open( vm, context[23], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[66], context[67], context[63], context[64] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[61], context[62]);
            continue;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@3/4 (/7 e.Vars0/36 )/8 '$'/9 (/13 e.Result/38 )/14 (/23 s.Offset1/25 # ECOND/26 s.Offset3/35 )/24 (/44 s.Offset2/52 # LABEL/53 e.Name/42 )/45 (/48 s.Offset3/51 # POPVF/50 )/49 e.Commands/40 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[33];
      context[41] = context[34];
      if( ! refalrts::char_term( '$', context[9] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_ECOND], context[26] ) )
        continue;
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_left( context[42], context[43], context[40], context[41] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::brackets_left( context[46], context[47], context[40], context[41] );
      if( ! context[48] )
        continue;
      refalrts::bracket_pointers(context[48], context[49]);
      context[50] = refalrts::ident_right( identifiers[ident_POPVF], context[46], context[47] );
      if( ! context[50] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[51], context[35], context[46], context[47] ) )
        continue;
      if( ! refalrts::empty_seq( context[46], context[47] ) )
        continue;
      // closed e.Vars0 as range 36
      // closed e.Result as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[52], context[42], context[43] ) )
        continue;
      context[53] = refalrts::ident_left( identifiers[ident_LABEL], context[42], context[43] );
      if( ! context[53] )
        continue;
      // closed e.Name as range 42
      //DEBUG: s.Offset1: 25
      //DEBUG: s.Offset3: 35
      //DEBUG: e.Vars0: 36
      //DEBUG: e.Result: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.Offset2: 52
      //DEBUG: e.Name: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1/25 {REMOVED TILE} s.Offset3/35 {REMOVED TILE} s.Offset2/52 {REMOVED TILE} s.Offset3/51 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # Result/13 AsIs: e.Result/38 AsIs: )/14 AsIs: (/23 } Tile{ Reuse: # EndCondition/53 AsIs: e.Name/42 AsIs: )/45 HalfReuse: </48 } Tile{ HalfReuse: & Decompile-Pattern-Hole@2/0 HalfReuse: 6/4 AsIs: (/7 } Tile{ HalfReuse: 4/26 } Tile{ AsIs: )/24 AsIs: (/44 } Tile{ HalfReuse: 5/50 } Tile{ AsIs: )/8 } (/54 Tile{ AsIs: e.Vars0/36 } Tile{ AsIs: )/49 AsIs: e.Commands/40 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_ident(context[13], identifiers[ident_Result]);
      refalrts::update_ident(context[53], identifiers[ident_EndCondition]);
      refalrts::reinit_open_call(context[48]);
      refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z2]);
      refalrts::reinit_number(context[4], 6UL);
      refalrts::reinit_number(context[26], 4UL);
      refalrts::reinit_number(context[50], 5UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[54], context[49] );
      refalrts::link_brackets( context[44], context[8] );
      refalrts::link_brackets( context[7], context[24] );
      refalrts::link_brackets( context[23], context[45] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[49];
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[24], context[44] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[53], context[48] );
      res = refalrts::splice_evar( res, context[9], context[23] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@3/4 (/7 e.new14/27 )/8 '$'/9 (/13 e.new15/29 )/14 (/23 s.new13/25 # OUTEST/26 )/24 e.new12/31 >/1
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    if( ! refalrts::char_term( '$', context[9] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_OUTEST], context[26] ) )
      continue;
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    // closed e.new14 as range 27
    // closed e.new15 as range 29
    // closed e.new12 as range 31
    do {
      // </0 & Decompile-Result@3/4 (/7 e.Vars0/33 )/8 '$'/9 (/13 e.Result/35 )/14 (/23 s.Offset1/25 # OUTEST/26 )/24 (/41 s.Offset2/44 # OUTEST/43 )/42 e.Commands/37 >/1
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[37], context[38] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      context[43] = refalrts::ident_right( identifiers[ident_OUTEST], context[39], context[40] );
      if( ! context[43] )
        continue;
      // closed e.Vars0 as range 33
      // closed e.Result as range 35
      // closed e.Commands as range 37
      if( ! refalrts::svar_left( context[44], context[39], context[40] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      //DEBUG: s.Offset1: 25
      //DEBUG: e.Vars0: 33
      //DEBUG: e.Result: 35
      //DEBUG: e.Commands: 37
      //DEBUG: s.Offset2: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/33 {REMOVED TILE} {REMOVED TILE} s.Offset1/25 {REMOVED TILE} s.Offset2/44 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # Result/13 AsIs: e.Result/35 AsIs: )/14 AsIs: (/23 } Tile{ Reuse: # NextSentence/26 AsIs: )/24 AsIs: (/41 } # NextSentence/45 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@7/4 AsIs: (/7 } )/46 Tile{ HalfReuse: (/43 AsIs: )/42 AsIs: e.Commands/37 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[45], identifiers[ident_NextSentence]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_ident(context[13], identifiers[ident_Result]);
      refalrts::update_ident(context[26], identifiers[ident_NextSentence]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z7]);
      refalrts::reinit_open_bracket(context[43]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[43], context[42] );
      refalrts::link_brackets( context[7], context[46] );
      refalrts::link_brackets( context[41], context[8] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[26], context[41] );
      res = refalrts::splice_evar( res, context[9], context[23] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@3/4 (/7 e.Vars0/33 )/8 '$'/9 (/13 e.Result/35 )/14 (/23 s.Offset/25 # OUTEST/26 )/24 e.Commands/37 >/1
    context[33] = context[27];
    context[34] = context[28];
    context[35] = context[29];
    context[36] = context[30];
    context[37] = context[31];
    context[38] = context[32];
    // closed e.Vars0 as range 33
    // closed e.Result as range 35
    // closed e.Commands as range 37
    //DEBUG: s.Offset: 25
    //DEBUG: e.Vars0: 33
    //DEBUG: e.Result: 35
    //DEBUG: e.Commands: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/33 {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # Result/13 AsIs: e.Result/35 AsIs: )/14 AsIs: (/23 } # NextSentence/39 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@7/4 AsIs: (/7 } )/40 Tile{ HalfReuse: (/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[39], identifiers[ident_NextSentence]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_ident(context[13], identifiers[ident_Result]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z7]);
    refalrts::reinit_open_bracket(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[26], context[24] );
    refalrts::link_brackets( context[7], context[40] );
    refalrts::link_brackets( context[23], context[8] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[26];
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[9], context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Result@3/4 (/7 e.Vars0/15 )/8 t.MB/9 (/13 e.Result/17 )/14 e.Commands/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Vars0 as range 15
    // closed e.Result as range 17
    // closed e.Commands as range 19
    //DEBUG: t.MB: 9
    //DEBUG: e.Vars0: 15
    //DEBUG: e.Result: 17
    //DEBUG: e.Commands: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/13 } '='/21 Tile{ HalfReuse: 'C'/1 } ' '/22 Tile{ HalfReuse: 0/0 HalfReuse: 3/4 AsIs: (/7 AsIs: e.Vars0/15 AsIs: )/8 } (/23 Tile{ AsIs: t.MB/9 } Tile{ AsIs: e.Result/17 } Tile{ AsIs: )/14 } )/24 Tile{ AsIs: e.Commands/19 } Tile{ ]] }
    refalrts::alloc_char(vm, context[21], '=');
    refalrts::alloc_char(vm, context[22], ' ');
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_char(context[1], 'C');
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_number(context[4], 3UL);
    refalrts::link_brackets( context[13], context[24] );
    refalrts::link_brackets( context[23], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Result@3/4 (/7 e.Vars0/5 )/8 t.dyn0/9 (/13 e.dyn1/11 )/14 e.dyn2/2 >/1
  // closed e.Vars0 as range 5
  // closed e.dyn1 as range 11
  // closed e.dyn2 as range 2
  //DEBUG: t.dyn0: 9
  //DEBUG: e.Vars0: 5
  //DEBUG: e.dyn1: 11
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </15 & Decompile-Result@0/16 Tile{ HalfReuse: 0/0 HalfReuse: 3/4 AsIs: (/7 AsIs: e.Vars0/5 AsIs: )/8 } Tile{ AsIs: (/13 } Tile{ AsIs: t.dyn0/9 } Tile{ AsIs: e.dyn1/11 } Tile{ AsIs: )/14 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_Decompilem_Result_Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Result_Z3("Decompile-Result@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Result_Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_NoHole_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 68 elems
  refalrts::Iter context[68];
  refalrts::zeros( context, 68 );
  // </0 & Decompile-Pattern-NoHole@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-NoHole@5/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & Decompile-Pattern-NoHole@5/4 s.new5/5 (/8 e.new10/14 )/9 (/12 e.new11/16 )/13 (/22 s.new6/24 s.new7/25 e.new8/20 )/23 e.new9/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.new10 as range 14
    // closed e.new11 as range 16
    // closed e.new9 as range 18
    if( ! refalrts::svar_left( context[24], context[20], context[21] ) )
      continue;
    if( ! refalrts::svar_left( context[25], context[20], context[21] ) )
      continue;
    // closed e.new8 as range 20
    do {
      // </0 & Decompile-Pattern-NoHole@5/4 s.new12/5 (/8 e.new18/26 )/9 (/12 e.new19/28 )/13 (/22 s.new14/24 s.new15/25 e.new16/30 s.new17/34 )/23 e.new13/32 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[18];
      context[33] = context[19];
      // closed e.new18 as range 26
      // closed e.new19 as range 28
      // closed e.new13 as range 32
      if( ! refalrts::svar_right( context[34], context[30], context[31] ) )
        continue;
      // closed e.new16 as range 30
      do {
        // </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.Pattern-L/44 (/50 # Hole/52 s.L/53 s.R/54 )/51 e.Pattern-R/46 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # SETB/25 s.L/43 s.R/34 )/23 e.Commands/41 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[25] ) )
          continue;
        // closed e.Vars as range 37
        // closed e.Commands as range 41
        if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
          continue;
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        context[44] = 0;
        context[45] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[46] = context[35];
          context[47] = context[36];
          context[48] = 0;
          context[49] = 0;
          context[50] = refalrts::brackets_left( context[48], context[49], context[46], context[47] );
          if( ! context[50] )
            continue;
          refalrts::bracket_pointers(context[50], context[51]);
          context[52] = refalrts::ident_left( identifiers[ident_Hole], context[48], context[49] );
          if( ! context[52] )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[53], context[43], context[48], context[49] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[54], context[34], context[48], context[49] ) )
            continue;
          if( ! refalrts::empty_seq( context[48], context[49] ) )
            continue;
          // closed e.Pattern-R as range 46
          //DEBUG: s.X: 5
          //DEBUG: s.Offset: 24
          //DEBUG: s.R: 34
          //DEBUG: e.Vars: 37
          //DEBUG: e.Commands: 41
          //DEBUG: s.L: 43
          //DEBUG: e.Pattern-L: 44
          //DEBUG: e.Pattern-R: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Hole/52 {REMOVED TILE} s.R/54 {REMOVED TILE} {REMOVED TILE} s.Offset/24 # SETB/25 s.L/43 s.R/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 5/8 } Tile{ AsIs: (/22 } Tile{ AsIs: e.Pattern-L/44 } Tile{ AsIs: s.L/53 } Tile{ AsIs: )/23 } Tile{ AsIs: (/50 } Tile{ HalfReuse: s.R54 /51 AsIs: e.Pattern-R/46 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/37 AsIs: )/13 } Tile{ AsIs: e.Commands/41 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::reinit_number(context[8], 5UL);
          refalrts::reinit_svar( context[51], context[54] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[50], context[9] );
          refalrts::link_brackets( context[22], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[51], context[13] );
          res = refalrts::splice_elem( res, context[50] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_elem( res, context[53] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_elem( res, context[22] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[44], context[45], context[35], context[36] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.Pattern/35 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # RDY/25 0/34 )/23 e.Commands/39 >/1
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[32];
      context[40] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_RDY], context[25] ) )
        continue;
      if( ! refalrts::number_term( 0UL, context[34] ) )
        continue;
      if( ! refalrts::empty_seq( context[30], context[31] ) )
        continue;
      // closed e.Pattern as range 35
      // closed e.Vars as range 37
      // closed e.Commands as range 39
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 24
      //DEBUG: e.Pattern: 35
      //DEBUG: e.Vars: 37
      //DEBUG: e.Commands: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/12 } Tile{ HalfReuse: # Pattern/22 } s.X/5/41 Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/13 } Tile{ AsIs: </0 Reuse: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Vars/37 } Tile{ AsIs: )/9 } Tile{ HalfReuse: '$'/25 HalfReuse: (/34 AsIs: )/23 AsIs: e.Commands/39 AsIs: >/1 ]] }
      refalrts::copy_stvar(vm, context[41], context[5]);
      refalrts::reinit_ident(context[22], identifiers[ident_Pattern]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Result_Z5]);
      refalrts::reinit_char(context[25], '$');
      refalrts::reinit_open_bracket(context[34]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[34], context[23] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.Pattern/26 )/9 (/12 e.Vars/28 )/13 (/22 s.Offset/24 # PUSHVF/25 )/23 e.Commands/30 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_PUSHVF], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      // closed e.Pattern as range 26
      // closed e.Vars as range 28
      // closed e.Commands as range 30
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 24
      //DEBUG: e.Pattern: 26
      //DEBUG: e.Vars: 28
      //DEBUG: e.Commands: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Pattern/4 AsIs: s.X/5 } Tile{ AsIs: e.Pattern/26 } )/32 Tile{ AsIs: (/8 } # StartCondition/33 )/34 </35 & Decompile-Result@5/36 Tile{ HalfReuse: s.X5 /9 AsIs: (/12 AsIs: e.Vars/28 AsIs: )/13 HalfReuse: '$'/22 } Tile{ HalfReuse: (/25 AsIs: )/23 AsIs: e.Commands/30 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_ident(vm, context[33], identifiers[ident_StartCondition]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_gen_Decompilem_Result_Z5]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::reinit_char(context[22], '$');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[35] );
      refalrts::link_brackets( context[25], context[23] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[34] );
      refalrts::link_brackets( context[0], context[32] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_evar( res, context[9], context[22] );
      res = refalrts::splice_evar( res, context[33], context[36] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@5/4 s.new12/5 (/8 e.new18/26 )/9 (/12 e.new19/28 )/13 (/22 s.new14/24 s.new15/25 s.new16/34 e.new17/30 )/23 e.new13/32 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[18];
      context[33] = context[19];
      // closed e.new18 as range 26
      // closed e.new19 as range 28
      // closed e.new13 as range 32
      if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
        continue;
      // closed e.new17 as range 30
      do {
        // </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.Pattern/35 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # TRAN/25 s.Jump/34 )/23 e.Commands-B/41 (/47 s.Jump/49 e.Command/45 )/48 e.Commands-E/43 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[32];
        context[40] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[30], context[31] ) )
          continue;
        // closed e.Pattern as range 35
        // closed e.Vars as range 37
        context[41] = 0;
        context[42] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[43] = context[39];
          context[44] = context[40];
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::brackets_left( context[45], context[46], context[43], context[44] );
          if( ! context[47] )
            continue;
          refalrts::bracket_pointers(context[47], context[48]);
          if( ! refalrts::repeated_stvar_left( vm, context[49], context[34], context[45], context[46] ) )
            continue;
          // closed e.Command as range 45
          // closed e.Commands-E as range 43
          //DEBUG: s.X: 5
          //DEBUG: s.Offset: 24
          //DEBUG: s.Jump: 34
          //DEBUG: e.Pattern: 35
          //DEBUG: e.Vars: 37
          //DEBUG: e.Commands-B: 41
          //DEBUG: e.Command: 45
          //DEBUG: e.Commands-E: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE} s.Jump/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern/35 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/37 AsIs: )/13 } Tile{ AsIs: e.Commands-B/41 } Tile{ AsIs: (/22 } '@'/50 Tile{ Reuse: # Restore-NoHole/25 } s.X/5/51 5/52 (/53 e.Pattern/35/54 Tile{ AsIs: )/23 } (/56 e.Vars/37/57 )/59 )/60 Tile{ AsIs: (/47 AsIs: s.Jump/49 AsIs: e.Command/45 AsIs: )/48 AsIs: e.Commands-E/43 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[50], '@');
          refalrts::copy_stvar(vm, context[51], context[5]);
          refalrts::alloc_number(vm, context[52], 5UL);
          refalrts::alloc_open_bracket(vm, context[53]);
          refalrts::copy_evar(vm, context[54], context[55], context[35], context[36]);
          refalrts::alloc_open_bracket(vm, context[56]);
          refalrts::copy_evar(vm, context[57], context[58], context[37], context[38]);
          refalrts::alloc_close_bracket(vm, context[59]);
          refalrts::alloc_close_bracket(vm, context[60]);
          refalrts::update_ident(context[25], identifiers[ident_Restorem_NoHole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[47], context[48] );
          refalrts::link_brackets( context[22], context[60] );
          refalrts::link_brackets( context[56], context[59] );
          refalrts::link_brackets( context[53], context[23] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[47];
          res = refalrts::splice_evar( res, context[56], context[60] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[51], context[53] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_elem( res, context[50] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[41], context[42], context[39], context[40] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@5/4 s.new20/5 (/8 e.new28/35 )/9 (/12 e.new29/37 )/13 (/22 '@'/24 s.new22/25 s.new23/34 s.new24/51 e.new25/39 (/49 e.new26/47 )/50 (/45 e.new27/43 )/46 )/23 e.new21/41 >/1
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      if( ! refalrts::char_term( '@', context[24] ) )
        continue;
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_right( context[43], context[44], context[39], context[40] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_right( context[47], context[48], context[39], context[40] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      // closed e.new28 as range 35
      // closed e.new29 as range 37
      // closed e.new26 as range 47
      // closed e.new27 as range 43
      // closed e.new21 as range 41
      if( ! refalrts::svar_left( context[51], context[39], context[40] ) )
        continue;
      // closed e.new25 as range 39
      do {
        // </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 '@'/24 # Restore-Hole/25 s.Level2/34 s.Top2/51 (/66 e.Pattern-L2/64 )/67 (/49 e.Pattern-R2/58 )/50 (/45 e.Vars2/60 )/46 )/23 e.Commands/62 >/1
        context[52] = context[35];
        context[53] = context[36];
        context[54] = context[37];
        context[55] = context[38];
        context[56] = context[39];
        context[57] = context[40];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[43];
        context[61] = context[44];
        context[62] = context[41];
        context[63] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[25] ) )
          continue;
        context[64] = 0;
        context[65] = 0;
        context[66] = refalrts::brackets_left( context[64], context[65], context[56], context[57] );
        if( ! context[66] )
          continue;
        refalrts::bracket_pointers(context[66], context[67]);
        if( ! refalrts::empty_seq( context[56], context[57] ) )
          continue;
        // closed e.Pattern1 as range 52
        // closed e.Vars1 as range 54
        // closed e.Pattern-L2 as range 64
        // closed e.Pattern-R2 as range 58
        // closed e.Vars2 as range 60
        // closed e.Commands as range 62
        //DEBUG: s.X: 5
        //DEBUG: s.Level2: 34
        //DEBUG: s.Top2: 51
        //DEBUG: e.Pattern1: 52
        //DEBUG: e.Vars1: 54
        //DEBUG: e.Pattern-L2: 64
        //DEBUG: e.Pattern-R2: 58
        //DEBUG: e.Vars2: 60
        //DEBUG: e.Commands: 62

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 {REMOVED TILE} )/23 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & Decompile-Pattern-Hole/25 AsIs: s.Level2/34 AsIs: s.Top2/51 AsIs: (/66 AsIs: e.Pattern-L2/64 AsIs: )/67 AsIs: (/49 AsIs: e.Pattern-R2/58 AsIs: )/50 AsIs: (/45 AsIs: e.Vars2/60 AsIs: )/46 } Tile{ AsIs: e.Commands/62 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[25], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[45], context[46] );
        refalrts::link_brackets( context[49], context[50] );
        refalrts::link_brackets( context[66], context[67] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[24], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 '@'/24 # Restore-NoHole/25 s.Level2/34 s.Top2/51 (/49 e.Pattern2/56 )/50 (/45 e.Vars2/58 )/46 )/23 e.Commands/60 >/1
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[38];
      context[56] = context[47];
      context[57] = context[48];
      context[58] = context[43];
      context[59] = context[44];
      context[60] = context[41];
      context[61] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      // closed e.Pattern1 as range 52
      // closed e.Vars1 as range 54
      // closed e.Pattern2 as range 56
      // closed e.Vars2 as range 58
      // closed e.Commands as range 60
      //DEBUG: s.X: 5
      //DEBUG: s.Level2: 34
      //DEBUG: s.Top2: 51
      //DEBUG: e.Pattern1: 52
      //DEBUG: e.Vars1: 54
      //DEBUG: e.Pattern2: 56
      //DEBUG: e.Vars2: 58
      //DEBUG: e.Commands: 60

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 {REMOVED TILE} )/23 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & Decompile-Pattern-NoHole/25 AsIs: s.Level2/34 AsIs: s.Top2/51 AsIs: (/49 AsIs: e.Pattern2/56 AsIs: )/50 AsIs: (/45 AsIs: e.Vars2/58 AsIs: )/46 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[25], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[49], context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[24], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.Pattern/26 )/9 (/12 e.Vars/28 )/13 (/22 s.Offset/24 # LABEL/25 e.BlockName/30 )/23 e.Commands/32 >/1
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[18];
    context[33] = context[19];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[25] ) )
      continue;
    // closed e.Pattern as range 26
    // closed e.Vars as range 28
    // closed e.BlockName as range 30
    // closed e.Commands as range 32
    //DEBUG: s.X: 5
    //DEBUG: s.Offset: 24
    //DEBUG: e.Pattern: 26
    //DEBUG: e.Vars: 28
    //DEBUG: e.BlockName: 30
    //DEBUG: e.Commands: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/22 s.Offset/24 # LABEL/25 e.BlockName/30 )/23 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern/26 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/28 AsIs: )/13 } Tile{ AsIs: e.Commands/32 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[32], context[33] );
    refalrts::splice_to_freelist_open( vm, context[13], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 )/9 (/12 )/13 >/1
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.X: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 )/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/12 HalfReuse: # EndOfFunction/13 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[13], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[12], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.Pattern/14 )/9 (/12 e.Vars/16 )/13 e.Commands/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Pattern as range 14
    // closed e.Vars as range 16
    // closed e.Commands as range 18
    //DEBUG: s.X: 5
    //DEBUG: e.Pattern: 14
    //DEBUG: e.Vars: 16
    //DEBUG: e.Commands: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '='/4 }"B "/20 Tile{ AsIs: s.X/5 } 5/22 Tile{ AsIs: (/8 AsIs: e.Pattern/14 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/16 AsIs: )/13 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Commands/18 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "B ", 2);
    refalrts::alloc_number(vm, context[22], 5UL);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_char(context[4], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-NoHole@5/4 s.X/5 (/8 e.dyn0/6 )/9 (/12 e.dyn1/10 )/13 e.dyn2/2 >/1
  // closed e.dyn0 as range 6
  // closed e.dyn1 as range 10
  // closed e.dyn2 as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.dyn0: 6
  //DEBUG: e.dyn1: 10
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@0/4 AsIs: s.X/5 } 5/14 Tile{ AsIs: (/8 AsIs: e.dyn0/6 AsIs: )/9 AsIs: (/12 AsIs: e.dyn1/10 AsIs: )/13 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[14], 5UL);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_NoHole_Z5("Decompile-Pattern-NoHole@5", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_NoHole_Z5);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Decompile-Pattern-Hole$19=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$19=1@3/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new3 as range 7
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$19=1@3/4 s.IdR0/5 s.X/6 (/9 e.Pattern-L0/23 )/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 e.Vars-B/33 (/39 s.Type/41 s.IdL/42 s.IdR0/43 '='/44 s.VarNoL/45 s.VarNoR/46 )/40 e.Vars-E/35 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    context[33] = 0;
    context[34] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[35] = context[31];
      context[36] = context[32];
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_left( context[37], context[38], context[35], context[36] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      // closed e.Vars-E as range 35
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[42], context[37], context[38] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[43], context[5], context[37], context[38] ) )
        continue;
      context[44] = refalrts::char_left( '=', context[37], context[38] );
      if( ! context[44] )
        continue;
      if( ! refalrts::svar_left( context[45], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[46], context[37], context[38] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      //DEBUG: s.IdR0: 5
      //DEBUG: s.X: 6
      //DEBUG: e.Pattern-L0: 23
      //DEBUG: e.Pattern-R0: 25
      //DEBUG: e.Vars0: 27
      //DEBUG: e.Commands0: 29
      //DEBUG: e.Vars-B: 33
      //DEBUG: e.Vars-E: 35
      //DEBUG: s.Type: 41
      //DEBUG: s.IdL: 42
      //DEBUG: s.VarNoL: 45
      //DEBUG: s.VarNoR: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/33 {REMOVED TILE} s.VarNoL/45 s.VarNoR/46 {REMOVED TILE} e.Vars-E/35 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } Tile{ AsIs: s.X/6 HalfReuse: 5/9 } (/47 Tile{ AsIs: e.Pattern-L0/23 } Tile{ AsIs: (/39 AsIs: s.Type/41 AsIs: s.IdL/42 AsIs: s.IdR0/43 AsIs: '='/44 } 3/48 4/49 Tile{ AsIs: )/22 } 4/50 Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 HalfReuse: (/18 HalfReuse: s.Type41 /21 } s.IdL/42/51 Tile{ AsIs: s.IdR0/5 } '='/52 3/53 4/54 Tile{ AsIs: )/40 } )/55 Tile{ AsIs: e.Commands0/29 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_number(vm, context[48], 3UL);
      refalrts::alloc_number(vm, context[49], 4UL);
      refalrts::alloc_number(vm, context[50], 4UL);
      refalrts::copy_stvar(vm, context[51], context[42]);
      refalrts::alloc_char(vm, context[52], '=');
      refalrts::alloc_number(vm, context[53], 3UL);
      refalrts::alloc_number(vm, context[54], 4UL);
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[9], 5UL);
      refalrts::reinit_open_bracket(context[18]);
      refalrts::reinit_svar( context[21], context[41] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[55] );
      refalrts::link_brackets( context[18], context[40] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[47], context[10] );
      refalrts::link_brackets( context[39], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[52], context[54] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[10], context[21] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[39], context[44] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[33], context[34], context[31], context[32] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$19=1@3/4 s.IdR0/5 s.X/6 (/9 e.Pattern-L0/7 )/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 7
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.IdR0: 5
  //DEBUG: s.X: 6
  //DEBUG: e.Pattern-L0: 7
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=1@0/4 AsIs: s.IdR0/5 AsIs: s.X/6 } 3/23 Tile{ AsIs: (/9 AsIs: e.Pattern-L0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[23], 3UL);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A1Z3("Decompile-Pattern-Hole$19=1@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Decompile-Pattern-Hole$20=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$20=1@3/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new3 as range 7
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$20=1@3/4 s.IdR0/5 s.X/6 (/9 e.Pattern-L0/23 )/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 e.Vars-B/33 (/39 s.Type/41 s.IdL/42 s.IdR0/43 '='/44 s.VarNoL/45 s.VarNoR/46 )/40 e.Vars-E/35 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    context[33] = 0;
    context[34] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[35] = context[31];
      context[36] = context[32];
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_left( context[37], context[38], context[35], context[36] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      // closed e.Vars-E as range 35
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[42], context[37], context[38] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[43], context[5], context[37], context[38] ) )
        continue;
      context[44] = refalrts::char_left( '=', context[37], context[38] );
      if( ! context[44] )
        continue;
      if( ! refalrts::svar_left( context[45], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[46], context[37], context[38] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      //DEBUG: s.IdR0: 5
      //DEBUG: s.X: 6
      //DEBUG: e.Pattern-L0: 23
      //DEBUG: e.Pattern-R0: 25
      //DEBUG: e.Vars0: 27
      //DEBUG: e.Commands0: 29
      //DEBUG: e.Vars-B: 33
      //DEBUG: e.Vars-E: 35
      //DEBUG: s.Type: 41
      //DEBUG: s.IdL: 42
      //DEBUG: s.VarNoL: 45
      //DEBUG: s.VarNoR: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/33 {REMOVED TILE} s.VarNoL/45 s.VarNoR/46 {REMOVED TILE} e.Vars-E/35 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 } Tile{ AsIs: s.X/6 HalfReuse: 5/9 } (/47 Tile{ AsIs: e.Pattern-L0/23 } Tile{ AsIs: )/22 } (/48 3/49 Tile{ AsIs: (/39 AsIs: s.Type/41 AsIs: s.IdL/42 AsIs: s.IdR0/43 AsIs: '='/44 } 3/50 Tile{ HalfReuse: 4/10 HalfReuse: )/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 HalfReuse: (/18 HalfReuse: s.Type41 /21 } s.IdL/42/51 Tile{ AsIs: s.IdR0/5 } '='/52 3/53 4/54 Tile{ AsIs: )/40 } )/55 Tile{ AsIs: e.Commands0/29 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::alloc_number(vm, context[49], 3UL);
      refalrts::alloc_number(vm, context[50], 3UL);
      refalrts::copy_stvar(vm, context[51], context[42]);
      refalrts::alloc_char(vm, context[52], '=');
      refalrts::alloc_number(vm, context[53], 3UL);
      refalrts::alloc_number(vm, context[54], 4UL);
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[9], 5UL);
      refalrts::reinit_number(context[10], 4UL);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::reinit_open_bracket(context[18]);
      refalrts::reinit_svar( context[21], context[41] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[55] );
      refalrts::link_brackets( context[18], context[40] );
      refalrts::link_brackets( context[48], context[14] );
      refalrts::link_brackets( context[39], context[13] );
      refalrts::link_brackets( context[47], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[52], context[54] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[10], context[21] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[39], context[44] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[33], context[34], context[31], context[32] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$20=1@3/4 s.IdR0/5 s.X/6 (/9 e.Pattern-L0/7 )/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 7
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.IdR0: 5
  //DEBUG: s.X: 6
  //DEBUG: e.Pattern-L0: 7
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=1@0/4 AsIs: s.IdR0/5 AsIs: s.X/6 } 3/23 Tile{ AsIs: (/9 AsIs: e.Pattern-L0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[23], 3UL);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A1Z3("Decompile-Pattern-Hole$20=1@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_NoHole_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 68 elems
  refalrts::Iter context[68];
  refalrts::zeros( context, 68 );
  // </0 & Decompile-Pattern-NoHole@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-NoHole@6/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & Decompile-Pattern-NoHole@6/4 s.new5/5 (/8 e.new10/14 )/9 (/12 e.new11/16 )/13 (/22 s.new6/24 s.new7/25 e.new8/20 )/23 e.new9/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.new10 as range 14
    // closed e.new11 as range 16
    // closed e.new9 as range 18
    if( ! refalrts::svar_left( context[24], context[20], context[21] ) )
      continue;
    if( ! refalrts::svar_left( context[25], context[20], context[21] ) )
      continue;
    // closed e.new8 as range 20
    do {
      // </0 & Decompile-Pattern-NoHole@6/4 s.new12/5 (/8 e.new18/26 )/9 (/12 e.new19/28 )/13 (/22 s.new14/24 s.new15/25 e.new16/30 s.new17/34 )/23 e.new13/32 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[18];
      context[33] = context[19];
      // closed e.new18 as range 26
      // closed e.new19 as range 28
      // closed e.new13 as range 32
      if( ! refalrts::svar_right( context[34], context[30], context[31] ) )
        continue;
      // closed e.new16 as range 30
      do {
        // </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.Pattern-L/44 (/50 # Hole/52 s.L/53 s.R/54 )/51 e.Pattern-R/46 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # SETB/25 s.L/43 s.R/34 )/23 e.Commands/41 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[25] ) )
          continue;
        // closed e.Vars as range 37
        // closed e.Commands as range 41
        if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
          continue;
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        context[44] = 0;
        context[45] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[46] = context[35];
          context[47] = context[36];
          context[48] = 0;
          context[49] = 0;
          context[50] = refalrts::brackets_left( context[48], context[49], context[46], context[47] );
          if( ! context[50] )
            continue;
          refalrts::bracket_pointers(context[50], context[51]);
          context[52] = refalrts::ident_left( identifiers[ident_Hole], context[48], context[49] );
          if( ! context[52] )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[53], context[43], context[48], context[49] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[54], context[34], context[48], context[49] ) )
            continue;
          if( ! refalrts::empty_seq( context[48], context[49] ) )
            continue;
          // closed e.Pattern-R as range 46
          //DEBUG: s.X: 5
          //DEBUG: s.Offset: 24
          //DEBUG: s.R: 34
          //DEBUG: e.Vars: 37
          //DEBUG: e.Commands: 41
          //DEBUG: s.L: 43
          //DEBUG: e.Pattern-L: 44
          //DEBUG: e.Pattern-R: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.L/53 s.R/54 {REMOVED TILE} {REMOVED TILE} s.Offset/24 # SETB/25 s.L/43 s.R/34 )/23 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@3/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L/44 HalfReuse: s.L53 /50 HalfReuse: )/52 } Tile{ AsIs: (/22 } Tile{ HalfReuse: s.R54 /51 AsIs: e.Pattern-R/46 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/37 AsIs: )/13 } Tile{ AsIs: e.Commands/41 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z3]);
          refalrts::reinit_svar( context[50], context[53] );
          refalrts::reinit_close_bracket(context[52]);
          refalrts::reinit_svar( context[51], context[54] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[22], context[9] );
          refalrts::link_brackets( context[8], context[52] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[51], context[13] );
          res = refalrts::splice_elem( res, context[22] );
          refalrts::splice_to_freelist_open( vm, context[52], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[44], context[45], context[35], context[36] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.Pattern/35 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # RDY/25 0/34 )/23 e.Commands/39 >/1
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[32];
      context[40] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_RDY], context[25] ) )
        continue;
      if( ! refalrts::number_term( 0UL, context[34] ) )
        continue;
      if( ! refalrts::empty_seq( context[30], context[31] ) )
        continue;
      // closed e.Pattern as range 35
      // closed e.Vars as range 37
      // closed e.Commands as range 39
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 24
      //DEBUG: e.Pattern: 35
      //DEBUG: e.Vars: 37
      //DEBUG: e.Commands: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/12 } Tile{ HalfReuse: # Pattern/22 } s.X/5/41 Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/13 } Tile{ AsIs: </0 Reuse: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 } Tile{ AsIs: e.Vars/37 } Tile{ AsIs: )/9 } Tile{ HalfReuse: '$'/25 HalfReuse: (/34 AsIs: )/23 AsIs: e.Commands/39 AsIs: >/1 ]] }
      refalrts::copy_stvar(vm, context[41], context[5]);
      refalrts::reinit_ident(context[22], identifiers[ident_Pattern]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Result_Z6]);
      refalrts::reinit_char(context[25], '$');
      refalrts::reinit_open_bracket(context[34]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[34], context[23] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.Pattern/26 )/9 (/12 e.Vars/28 )/13 (/22 s.Offset/24 # PUSHVF/25 )/23 e.Commands/30 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_PUSHVF], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      // closed e.Pattern as range 26
      // closed e.Vars as range 28
      // closed e.Commands as range 30
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 24
      //DEBUG: e.Pattern: 26
      //DEBUG: e.Vars: 28
      //DEBUG: e.Commands: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Pattern/4 AsIs: s.X/5 } Tile{ AsIs: e.Pattern/26 } )/32 Tile{ AsIs: (/8 } # StartCondition/33 )/34 </35 & Decompile-Result@6/36 Tile{ HalfReuse: s.X5 /9 AsIs: (/12 AsIs: e.Vars/28 AsIs: )/13 HalfReuse: '$'/22 } Tile{ HalfReuse: (/25 AsIs: )/23 AsIs: e.Commands/30 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_ident(vm, context[33], identifiers[ident_StartCondition]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_gen_Decompilem_Result_Z6]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::reinit_char(context[22], '$');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[35] );
      refalrts::link_brackets( context[25], context[23] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[34] );
      refalrts::link_brackets( context[0], context[32] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_evar( res, context[9], context[22] );
      res = refalrts::splice_evar( res, context[33], context[36] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@6/4 s.new12/5 (/8 e.new18/26 )/9 (/12 e.new19/28 )/13 (/22 s.new14/24 s.new15/25 s.new16/34 e.new17/30 )/23 e.new13/32 >/1
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[18];
      context[33] = context[19];
      // closed e.new18 as range 26
      // closed e.new19 as range 28
      // closed e.new13 as range 32
      if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
        continue;
      // closed e.new17 as range 30
      do {
        // </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.Pattern/35 )/9 (/12 e.Vars/37 )/13 (/22 s.Offset/24 # TRAN/25 s.Jump/34 )/23 e.Commands-B/41 (/47 s.Jump/49 e.Command/45 )/48 e.Commands-E/43 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[32];
        context[40] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[30], context[31] ) )
          continue;
        // closed e.Pattern as range 35
        // closed e.Vars as range 37
        context[41] = 0;
        context[42] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[43] = context[39];
          context[44] = context[40];
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::brackets_left( context[45], context[46], context[43], context[44] );
          if( ! context[47] )
            continue;
          refalrts::bracket_pointers(context[47], context[48]);
          if( ! refalrts::repeated_stvar_left( vm, context[49], context[34], context[45], context[46] ) )
            continue;
          // closed e.Command as range 45
          // closed e.Commands-E as range 43
          //DEBUG: s.X: 5
          //DEBUG: s.Offset: 24
          //DEBUG: s.Jump: 34
          //DEBUG: e.Pattern: 35
          //DEBUG: e.Vars: 37
          //DEBUG: e.Commands-B: 41
          //DEBUG: e.Command: 45
          //DEBUG: e.Commands-E: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/24 {REMOVED TILE} s.Jump/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern/35 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/37 AsIs: )/13 } Tile{ AsIs: e.Commands-B/41 } Tile{ AsIs: (/22 } '@'/50 Tile{ Reuse: # Restore-NoHole/25 } s.X/5/51 3/52 (/53 e.Pattern/35/54 Tile{ AsIs: )/23 } (/56 e.Vars/37/57 )/59 )/60 Tile{ AsIs: (/47 AsIs: s.Jump/49 AsIs: e.Command/45 AsIs: )/48 AsIs: e.Commands-E/43 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[50], '@');
          refalrts::copy_stvar(vm, context[51], context[5]);
          refalrts::alloc_number(vm, context[52], 3UL);
          refalrts::alloc_open_bracket(vm, context[53]);
          refalrts::copy_evar(vm, context[54], context[55], context[35], context[36]);
          refalrts::alloc_open_bracket(vm, context[56]);
          refalrts::copy_evar(vm, context[57], context[58], context[37], context[38]);
          refalrts::alloc_close_bracket(vm, context[59]);
          refalrts::alloc_close_bracket(vm, context[60]);
          refalrts::update_ident(context[25], identifiers[ident_Restorem_NoHole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[47], context[48] );
          refalrts::link_brackets( context[22], context[60] );
          refalrts::link_brackets( context[56], context[59] );
          refalrts::link_brackets( context[53], context[23] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[47];
          res = refalrts::splice_evar( res, context[56], context[60] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[51], context[53] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_elem( res, context[50] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[41], context[42], context[39], context[40] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@6/4 s.new20/5 (/8 e.new28/35 )/9 (/12 e.new29/37 )/13 (/22 '@'/24 s.new22/25 s.new23/34 s.new24/51 e.new25/39 (/49 e.new26/47 )/50 (/45 e.new27/43 )/46 )/23 e.new21/41 >/1
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      if( ! refalrts::char_term( '@', context[24] ) )
        continue;
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_right( context[43], context[44], context[39], context[40] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_right( context[47], context[48], context[39], context[40] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      // closed e.new28 as range 35
      // closed e.new29 as range 37
      // closed e.new26 as range 47
      // closed e.new27 as range 43
      // closed e.new21 as range 41
      if( ! refalrts::svar_left( context[51], context[39], context[40] ) )
        continue;
      // closed e.new25 as range 39
      do {
        // </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 '@'/24 # Restore-Hole/25 s.Level2/34 s.Top2/51 (/66 e.Pattern-L2/64 )/67 (/49 e.Pattern-R2/58 )/50 (/45 e.Vars2/60 )/46 )/23 e.Commands/62 >/1
        context[52] = context[35];
        context[53] = context[36];
        context[54] = context[37];
        context[55] = context[38];
        context[56] = context[39];
        context[57] = context[40];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[43];
        context[61] = context[44];
        context[62] = context[41];
        context[63] = context[42];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[25] ) )
          continue;
        context[64] = 0;
        context[65] = 0;
        context[66] = refalrts::brackets_left( context[64], context[65], context[56], context[57] );
        if( ! context[66] )
          continue;
        refalrts::bracket_pointers(context[66], context[67]);
        if( ! refalrts::empty_seq( context[56], context[57] ) )
          continue;
        // closed e.Pattern1 as range 52
        // closed e.Vars1 as range 54
        // closed e.Pattern-L2 as range 64
        // closed e.Pattern-R2 as range 58
        // closed e.Vars2 as range 60
        // closed e.Commands as range 62
        //DEBUG: s.X: 5
        //DEBUG: s.Level2: 34
        //DEBUG: s.Top2: 51
        //DEBUG: e.Pattern1: 52
        //DEBUG: e.Vars1: 54
        //DEBUG: e.Pattern-L2: 64
        //DEBUG: e.Pattern-R2: 58
        //DEBUG: e.Vars2: 60
        //DEBUG: e.Commands: 62

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 {REMOVED TILE} )/23 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & Decompile-Pattern-Hole/25 AsIs: s.Level2/34 AsIs: s.Top2/51 AsIs: (/66 AsIs: e.Pattern-L2/64 AsIs: )/67 AsIs: (/49 AsIs: e.Pattern-R2/58 AsIs: )/50 AsIs: (/45 AsIs: e.Vars2/60 AsIs: )/46 } Tile{ AsIs: e.Commands/62 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[25], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[45], context[46] );
        refalrts::link_brackets( context[49], context[50] );
        refalrts::link_brackets( context[66], context[67] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[24], context[46] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 '@'/24 # Restore-NoHole/25 s.Level2/34 s.Top2/51 (/49 e.Pattern2/56 )/50 (/45 e.Vars2/58 )/46 )/23 e.Commands/60 >/1
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[38];
      context[56] = context[47];
      context[57] = context[48];
      context[58] = context[43];
      context[59] = context[44];
      context[60] = context[41];
      context[61] = context[42];
      if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      // closed e.Pattern1 as range 52
      // closed e.Vars1 as range 54
      // closed e.Pattern2 as range 56
      // closed e.Vars2 as range 58
      // closed e.Commands as range 60
      //DEBUG: s.X: 5
      //DEBUG: s.Level2: 34
      //DEBUG: s.Top2: 51
      //DEBUG: e.Pattern1: 52
      //DEBUG: e.Vars1: 54
      //DEBUG: e.Pattern2: 56
      //DEBUG: e.Vars2: 58
      //DEBUG: e.Commands: 60

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.Pattern1/52 )/9 (/12 e.Vars1/54 )/13 (/22 {REMOVED TILE} )/23 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & Decompile-Pattern-NoHole/25 AsIs: s.Level2/34 AsIs: s.Top2/51 AsIs: (/49 AsIs: e.Pattern2/56 AsIs: )/50 AsIs: (/45 AsIs: e.Vars2/58 AsIs: )/46 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[25], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[49], context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[24], context[46] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.Pattern/26 )/9 (/12 e.Vars/28 )/13 (/22 s.Offset/24 # LABEL/25 e.BlockName/30 )/23 e.Commands/32 >/1
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[18];
    context[33] = context[19];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[25] ) )
      continue;
    // closed e.Pattern as range 26
    // closed e.Vars as range 28
    // closed e.BlockName as range 30
    // closed e.Commands as range 32
    //DEBUG: s.X: 5
    //DEBUG: s.Offset: 24
    //DEBUG: e.Pattern: 26
    //DEBUG: e.Vars: 28
    //DEBUG: e.BlockName: 30
    //DEBUG: e.Commands: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/22 s.Offset/24 # LABEL/25 e.BlockName/30 )/23 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern/26 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/28 AsIs: )/13 } Tile{ AsIs: e.Commands/32 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[32], context[33] );
    refalrts::splice_to_freelist_open( vm, context[13], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 )/9 (/12 )/13 >/1
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.X: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 )/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/12 HalfReuse: # EndOfFunction/13 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[13], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[12], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.Pattern/14 )/9 (/12 e.Vars/16 )/13 e.Commands/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Pattern as range 14
    // closed e.Vars as range 16
    // closed e.Commands as range 18
    //DEBUG: s.X: 5
    //DEBUG: e.Pattern: 14
    //DEBUG: e.Vars: 16
    //DEBUG: e.Commands: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '='/4 }"B "/20 Tile{ AsIs: s.X/5 } 3/22 Tile{ AsIs: (/8 AsIs: e.Pattern/14 AsIs: )/9 AsIs: (/12 AsIs: e.Vars/16 AsIs: )/13 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Commands/18 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "B ", 2);
    refalrts::alloc_number(vm, context[22], 3UL);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_char(context[4], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-NoHole@6/4 s.X/5 (/8 e.dyn0/6 )/9 (/12 e.dyn1/10 )/13 e.dyn2/2 >/1
  // closed e.dyn0 as range 6
  // closed e.dyn1 as range 10
  // closed e.dyn2 as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.dyn0: 6
  //DEBUG: e.dyn1: 10
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@0/4 AsIs: s.X/5 } 3/14 Tile{ AsIs: (/8 AsIs: e.dyn0/6 AsIs: )/9 AsIs: (/12 AsIs: e.dyn1/10 AsIs: )/13 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[14], 3UL);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_NoHole_Z6("Decompile-Pattern-NoHole@6", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_NoHole_Z6);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S11A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$11=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$11=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$11=1@2/4 s.Level0/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.VL/32 s.VR/33 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.VL: 32
    //DEBUG: s.VR: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/34 '*'/35 2/36 >/37 (/38 Tile{ AsIs: e.Pattern-L0/22 } (/39 # t/40 s.VL/32/41 s.VR/33/42 Tile{ HalfReuse: '='/21 AsIs: s.VL/32 AsIs: s.VR/33 HalfReuse: )/1 } s.VR/33/43 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: # t/20 } s.VL/32/44 s.VR/33/45 '='/46 s.VL/32/47 s.VR/33/48 )/49 )/50 Tile{ AsIs: e.Commands0/28 } >/51 Tile{ ]] }
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[35], '*');
    refalrts::alloc_number(vm, context[36], 2UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_t]);
    refalrts::copy_stvar(vm, context[41], context[32]);
    refalrts::copy_stvar(vm, context[42], context[33]);
    refalrts::copy_stvar(vm, context[43], context[33]);
    refalrts::copy_stvar(vm, context[44], context[32]);
    refalrts::copy_stvar(vm, context[45], context[33]);
    refalrts::alloc_char(vm, context[46], '=');
    refalrts::copy_stvar(vm, context[47], context[32]);
    refalrts::copy_stvar(vm, context[48], context[33]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_char(context[21], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_t]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[50] );
    refalrts::link_brackets( context[17], context[49] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[38], context[9] );
    refalrts::link_brackets( context[39], context[1] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[44], context[50] );
    res = refalrts::splice_evar( res, context[9], context[20] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[34], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$11=1@2/4 s.Level0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$11=1@0/4 AsIs: s.Level0/5 } '*'/22 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[22], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S11A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S11A1Z2("Decompile-Pattern-Hole$11=1@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S11A1Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S12A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$12=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$12=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$12=1@2/4 s.Level0/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.VL/32 s.VR/33 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.VL: 32
    //DEBUG: s.VR: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/34 '*'/35 2/36 >/37 (/38 Tile{ AsIs: e.Pattern-L0/22 } )/39 (/40 s.VL/32/41 (/42 Tile{ HalfReuse: # t/21 AsIs: s.VL/32 AsIs: s.VR/33 HalfReuse: '='/1 } s.VL/32/43 Tile{ HalfReuse: s.VR33 /9 HalfReuse: )/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: # t/20 } s.VL/32/44 s.VR/33/45 '='/46 s.VL/32/47 s.VR/33/48 )/49 )/50 Tile{ AsIs: e.Commands0/28 } >/51 Tile{ ]] }
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[35], '*');
    refalrts::alloc_number(vm, context[36], 2UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::copy_stvar(vm, context[41], context[32]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::copy_stvar(vm, context[43], context[32]);
    refalrts::copy_stvar(vm, context[44], context[32]);
    refalrts::copy_stvar(vm, context[45], context[33]);
    refalrts::alloc_char(vm, context[46], '=');
    refalrts::copy_stvar(vm, context[47], context[32]);
    refalrts::copy_stvar(vm, context[48], context[33]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_ident(context[21], identifiers[ident_t]);
    refalrts::reinit_char(context[1], '=');
    refalrts::reinit_svar( context[9], context[33] );
    refalrts::reinit_close_bracket(context[12]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_t]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[50] );
    refalrts::link_brackets( context[17], context[49] );
    refalrts::link_brackets( context[40], context[13] );
    refalrts::link_brackets( context[42], context[12] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[44], context[50] );
    res = refalrts::splice_evar( res, context[9], context[20] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[34], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$12=1@2/4 s.Level0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$12=1@0/4 AsIs: s.Level0/5 } '*'/22 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[22], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S12A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S12A1Z2("Decompile-Pattern-Hole$12=1@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S12A1Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S18A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & Decompile-Pattern-Hole$18=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$18=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$18=1@2/4 s.Level0/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.VL/32 s.VR/33 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.VL: 32
    //DEBUG: s.VR: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/34 '*'/35 2/36 >/37 (/38 Tile{ AsIs: e.Pattern-L0/22 } (/39 Tile{ HalfReuse: # e/21 AsIs: s.VL/32 AsIs: s.VR/33 HalfReuse: '='/1 } s.VL/32/40 Tile{ HalfReuse: s.VR33 /9 HalfReuse: )/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: # e/20 } s.VL/32/41 s.VR/33/42 '='/43 s.VL/32/44 s.VR/33/45 )/46 )/47 Tile{ AsIs: e.Commands0/28 } >/48 Tile{ ]] }
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[35], '*');
    refalrts::alloc_number(vm, context[36], 2UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_stvar(vm, context[40], context[32]);
    refalrts::copy_stvar(vm, context[41], context[32]);
    refalrts::copy_stvar(vm, context[42], context[33]);
    refalrts::alloc_char(vm, context[43], '=');
    refalrts::copy_stvar(vm, context[44], context[32]);
    refalrts::copy_stvar(vm, context[45], context[33]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_NoHole]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_ident(context[21], identifiers[ident_e]);
    refalrts::reinit_char(context[1], '=');
    refalrts::reinit_svar( context[9], context[33] );
    refalrts::reinit_close_bracket(context[12]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_e]);
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[47] );
    refalrts::link_brackets( context[17], context[46] );
    refalrts::link_brackets( context[38], context[13] );
    refalrts::link_brackets( context[39], context[12] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[41], context[47] );
    res = refalrts::splice_evar( res, context[9], context[20] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[34], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$18=1@2/4 s.Level0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$18=1@0/4 AsIs: s.Level0/5 } '*'/22 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[22], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S18A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S18A1Z2("Decompile-Pattern-Hole$18=1@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S18A1Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & Decompile-Pattern-Hole$19=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$19=1@4/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new3 as range 7
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$19=1@4/4 s.IdR0/5 s.Level0/6 (/9 e.Pattern-L0/23 )/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 e.Vars-B/33 (/39 s.Type/41 s.IdL/42 s.IdR0/43 '='/44 s.VarNoL/45 s.VarNoR/46 )/40 e.Vars-E/35 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    context[33] = 0;
    context[34] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[35] = context[31];
      context[36] = context[32];
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_left( context[37], context[38], context[35], context[36] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      // closed e.Vars-E as range 35
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[42], context[37], context[38] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[43], context[5], context[37], context[38] ) )
        continue;
      context[44] = refalrts::char_left( '=', context[37], context[38] );
      if( ! context[44] )
        continue;
      if( ! refalrts::svar_left( context[45], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[46], context[37], context[38] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      //DEBUG: s.IdR0: 5
      //DEBUG: s.Level0: 6
      //DEBUG: e.Pattern-L0: 23
      //DEBUG: e.Pattern-R0: 25
      //DEBUG: e.Vars0: 27
      //DEBUG: e.Commands0: 29
      //DEBUG: e.Vars-B: 33
      //DEBUG: e.Vars-E: 35
      //DEBUG: s.Type: 41
      //DEBUG: s.IdL: 42
      //DEBUG: s.VarNoL: 45
      //DEBUG: s.VarNoR: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.IdR0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/33 {REMOVED TILE} s.IdR0/43 {REMOVED TILE} s.VarNoL/45 s.VarNoR/46 {REMOVED TILE} e.Vars-E/35 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=2@2/4 } Tile{ AsIs: s.Level0/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L0/23 } Tile{ HalfReuse: )/39 AsIs: s.Type/41 AsIs: s.IdL/42 } Tile{ HalfReuse: s.IdR043 /10 AsIs: (/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/29 AsIs: )/22 } Tile{ Reuse: '*'/44 } </47 Tile{ HalfReuse: & Add/40 } '*'/48 1/49 >/50 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::alloc_char(vm, context[48], '*');
      refalrts::alloc_number(vm, context[49], 1UL);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A2Z2]);
      refalrts::reinit_close_bracket(context[39]);
      refalrts::reinit_svar( context[10], context[43] );
      refalrts::update_char(context[44], '*');
      refalrts::reinit_name(context[40], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[47] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[39] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[10], context[22] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[33], context[34], context[31], context[32] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$19=1@4/4 s.IdR0/5 s.Level0/6 (/9 e.Pattern-L0/7 )/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 7
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.IdR0: 5
  //DEBUG: s.Level0: 6
  //DEBUG: e.Pattern-L0: 7
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=1@0/4 AsIs: s.IdR0/5 AsIs: s.Level0/6 } '*'/23 Tile{ AsIs: (/9 AsIs: e.Pattern-L0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[23], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A1Z4("Decompile-Pattern-Hole$19=1@4", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A1Z4);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & Decompile-Pattern-Hole$20=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$20=1@4/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new3 as range 7
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$20=1@4/4 s.IdR0/5 s.Level0/6 (/9 e.Pattern-L0/23 )/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 e.Vars-B/33 (/39 s.Type/41 s.IdL/42 s.IdR0/43 '='/44 s.VarNoL/45 s.VarNoR/46 )/40 e.Vars-E/35 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    context[33] = 0;
    context[34] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[35] = context[31];
      context[36] = context[32];
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_left( context[37], context[38], context[35], context[36] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      // closed e.Vars-E as range 35
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[42], context[37], context[38] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[43], context[5], context[37], context[38] ) )
        continue;
      context[44] = refalrts::char_left( '=', context[37], context[38] );
      if( ! context[44] )
        continue;
      if( ! refalrts::svar_left( context[45], context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_left( context[46], context[37], context[38] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      //DEBUG: s.IdR0: 5
      //DEBUG: s.Level0: 6
      //DEBUG: e.Pattern-L0: 23
      //DEBUG: e.Pattern-R0: 25
      //DEBUG: e.Vars0: 27
      //DEBUG: e.Commands0: 29
      //DEBUG: e.Vars-B: 33
      //DEBUG: e.Vars-E: 35
      //DEBUG: s.Type: 41
      //DEBUG: s.IdL: 42
      //DEBUG: s.VarNoL: 45
      //DEBUG: s.VarNoR: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.IdR0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/33 {REMOVED TILE} s.IdR0/43 {REMOVED TILE} s.VarNoL/45 s.VarNoR/46 {REMOVED TILE} e.Vars-E/35 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=2@2/4 } Tile{ AsIs: s.Level0/6 AsIs: (/9 } Tile{ AsIs: e.Pattern-L0/23 } Tile{ HalfReuse: )/39 AsIs: s.Type/41 AsIs: s.IdL/42 } Tile{ HalfReuse: s.IdR043 /10 AsIs: (/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/29 AsIs: )/22 } Tile{ Reuse: '*'/44 } </47 Tile{ HalfReuse: & Add/40 } '*'/48 1/49 >/50 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::alloc_char(vm, context[48], '*');
      refalrts::alloc_number(vm, context[49], 1UL);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A2Z2]);
      refalrts::reinit_close_bracket(context[39]);
      refalrts::reinit_svar( context[10], context[43] );
      refalrts::update_char(context[44], '*');
      refalrts::reinit_name(context[40], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[47] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[39] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[10], context[22] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[33], context[34], context[31], context[32] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$20=1@4/4 s.IdR0/5 s.Level0/6 (/9 e.Pattern-L0/7 )/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 7
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.IdR0: 5
  //DEBUG: s.Level0: 6
  //DEBUG: e.Pattern-L0: 7
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=1@0/4 AsIs: s.IdR0/5 AsIs: s.Level0/6 } '*'/23 Tile{ AsIs: (/9 AsIs: e.Pattern-L0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[23], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A1Z4("Decompile-Pattern-Hole$20=1@4", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A1Z4);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S21A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & Decompile-Pattern-Hole$21=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$21=1@2/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$21=1@2/4 s.Level0/5 (/8 e.Pattern-L0/23 )/9 s.R0/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 s.LB/33 s.RB/34 >/1
    context[23] = context[6];
    context[24] = context[7];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[31], context[32] ) )
      continue;
    if( ! refalrts::empty_seq( context[31], context[32] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: s.R0: 10
    //DEBUG: e.Pattern-L0: 23
    //DEBUG: e.Pattern-R0: 25
    //DEBUG: e.Vars0: 27
    //DEBUG: e.Commands0: 29
    //DEBUG: s.LB: 33
    //DEBUG: s.RB: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/35 '*'/36 2/37 >/38 (/39 Tile{ AsIs: e.Pattern-L0/23 } Tile{ AsIs: (/21 } # LB/40 Tile{ AsIs: )/22 AsIs: s.LB/33 } )/41 (/42 Tile{ AsIs: s.RB/34 } (/43 # RB/44 )/45 (/46 # Hole/47 Tile{ HalfReuse: s.RB34 /9 AsIs: s.R0/10 HalfReuse: )/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 AsIs: )/18 } Tile{ AsIs: e.Commands0/29 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[36], '*');
    refalrts::alloc_number(vm, context[37], 2UL);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_LB]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_ident(vm, context[44], identifiers[ident_RB]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_ident(vm, context[47], identifiers[ident_Hole]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_svar( context[9], context[34] );
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[42], context[14] );
    refalrts::link_brackets( context[46], context[13] );
    refalrts::link_brackets( context[43], context[45] );
    refalrts::link_brackets( context[39], context[41] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    res = refalrts::splice_evar( res, context[43], context[47] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[22], context[33] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[35], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$21=1@2/4 s.Level0/5 (/8 e.Pattern-L0/6 )/9 s.R0/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: s.R0: 10
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$21=1@0/4 AsIs: s.Level0/5 } '*'/23 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: s.R0/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[23], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S21A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S21A1Z2("Decompile-Pattern-Hole$21=1@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S21A1Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S22A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & Decompile-Pattern-Hole$22=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$22=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$22=1@2/4 s.Level0/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.LB/32 s.RB/33 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.LB: 32
    //DEBUG: s.RB: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/34 '*'/35 2/36 >/37 Tile{ AsIs: (/20 } Tile{ AsIs: e.Pattern-L0/22 } )/38 (/39 s.LB/32/40 (/41 # LB/42 )/43 (/44 Tile{ HalfReuse: # Hole/21 AsIs: s.LB/32 AsIs: s.RB/33 HalfReuse: )/1 } (/45 Tile{ HalfReuse: # RB/9 HalfReuse: )/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 AsIs: )/17 } Tile{ AsIs: e.Commands0/28 } >/46 Tile{ ]] }
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[35], '*');
    refalrts::alloc_number(vm, context[36], 2UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_stvar(vm, context[40], context[32]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_ident(vm, context[42], identifiers[ident_LB]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_ident(context[21], identifiers[ident_Hole]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_ident(context[9], identifiers[ident_RB]);
    refalrts::reinit_close_bracket(context[12]);
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[39], context[13] );
    refalrts::link_brackets( context[45], context[12] );
    refalrts::link_brackets( context[44], context[1] );
    refalrts::link_brackets( context[41], context[43] );
    refalrts::link_brackets( context[20], context[38] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[46] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[9], context[17] );
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_evar( res, context[38], context[44] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$22=1@2/4 s.Level0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$22=1@0/4 AsIs: s.Level0/5 } '*'/22 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[22], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S22A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S22A1Z2("Decompile-Pattern-Hole$22=1@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S22A1Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S25A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$25=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$25=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$25=1@2/4 s.Level0/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.VL/32 s.VR/33 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.VL: 32
    //DEBUG: s.VR: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/34 '*'/35 2/36 >/37 (/38 Tile{ AsIs: e.Pattern-L0/22 } (/39 # e/40 s.VL/32/41 s.VR/33/42 Tile{ HalfReuse: '='/21 AsIs: s.VL/32 AsIs: s.VR/33 HalfReuse: )/1 } s.VR/33/43 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: # e/20 } s.VL/32/44 s.VR/33/45 '='/46 s.VL/32/47 s.VR/33/48 )/49 )/50 Tile{ AsIs: e.Commands0/28 } >/51 Tile{ ]] }
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[35], '*');
    refalrts::alloc_number(vm, context[36], 2UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_e]);
    refalrts::copy_stvar(vm, context[41], context[32]);
    refalrts::copy_stvar(vm, context[42], context[33]);
    refalrts::copy_stvar(vm, context[43], context[33]);
    refalrts::copy_stvar(vm, context[44], context[32]);
    refalrts::copy_stvar(vm, context[45], context[33]);
    refalrts::alloc_char(vm, context[46], '=');
    refalrts::copy_stvar(vm, context[47], context[32]);
    refalrts::copy_stvar(vm, context[48], context[33]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_char(context[21], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_e]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[50] );
    refalrts::link_brackets( context[17], context[49] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[38], context[9] );
    refalrts::link_brackets( context[39], context[1] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[44], context[50] );
    res = refalrts::splice_evar( res, context[9], context[20] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[34], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$25=1@2/4 s.Level0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$25=1@0/4 AsIs: s.Level0/5 } '*'/22 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[22], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S25A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S25A1Z2("Decompile-Pattern-Hole$25=1@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S25A1Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S26A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Decompile-Pattern-Hole$26=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$26=1@2/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$26=1@2/4 s.Level0/5 (/8 e.Pattern-L0/23 )/9 s.Char0/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 s.VL/33 s.VR/34 s.CharPos/35 >/1
    context[23] = context[6];
    context[24] = context[7];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
      continue;
    if( ! refalrts::empty_seq( context[31], context[32] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: s.Char0: 10
    //DEBUG: e.Pattern-L0: 23
    //DEBUG: e.Pattern-R0: 25
    //DEBUG: e.Vars0: 27
    //DEBUG: e.Commands0: 29
    //DEBUG: s.VL: 33
    //DEBUG: s.VR: 34
    //DEBUG: s.CharPos: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/36 '*'/37 3/38 >/39 (/40 Tile{ AsIs: e.Pattern-L0/23 } (/41 Tile{ HalfReuse: # e/22 AsIs: s.VL/33 AsIs: s.VR/34 } '='/42 s.VL/33/43 s.VR/34/44 )/45 (/46 Tile{ HalfReuse: # C/9 AsIs: s.Char0/10 } )/47 Tile{ AsIs: s.CharPos/35 } )/48 Tile{ AsIs: (/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 HalfReuse: (/18 HalfReuse: # e/21 } s.VL/33/49 s.VR/34/50 '='/51 s.VL/33/52 s.VR/34/53 )/54 )/55 Tile{ AsIs: e.Commands0/29 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[36], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[37], '*');
    refalrts::alloc_number(vm, context[38], 3UL);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_char(vm, context[42], '=');
    refalrts::copy_stvar(vm, context[43], context[33]);
    refalrts::copy_stvar(vm, context[44], context[34]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::copy_stvar(vm, context[49], context[33]);
    refalrts::copy_stvar(vm, context[50], context[34]);
    refalrts::alloc_char(vm, context[51], '=');
    refalrts::copy_stvar(vm, context[52], context[33]);
    refalrts::copy_stvar(vm, context[53], context[34]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_ident(context[22], identifiers[ident_e]);
    refalrts::reinit_ident(context[9], identifiers[ident_C]);
    refalrts::reinit_open_bracket(context[18]);
    refalrts::reinit_ident(context[21], identifiers[ident_e]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[55] );
    refalrts::link_brackets( context[18], context[54] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[40], context[48] );
    refalrts::link_brackets( context[46], context[47] );
    refalrts::link_brackets( context[41], context[45] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[49], context[55] );
    res = refalrts::splice_evar( res, context[13], context[21] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[42], context[46] );
    res = refalrts::splice_evar( res, context[22], context[34] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[36], context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$26=1@2/4 s.Level0/5 (/8 e.Pattern-L0/6 )/9 s.Char0/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: s.Char0: 10
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$26=1@0/4 AsIs: s.Level0/5 } '*'/23 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: s.Char0/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[23], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S26A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S26A1Z2("Decompile-Pattern-Hole$26=1@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S26A1Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S27A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 64 elems
  refalrts::Iter context[64];
  refalrts::zeros( context, 64 );
  // </0 & Decompile-Pattern-Hole$27=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$27=1@2/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$27=1@2/4 s.Level0/5 (/8 e.Pattern-L0/23 )/9 s.R0/10 (/13 e.Pattern-R0/25 )/14 (/17 e.Vars0/27 )/18 (/21 e.Commands0/29 )/22 s.VL/33 s.VR/34 s.LB/35 s.RB/36 >/1
    context[23] = context[6];
    context[24] = context[7];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Pattern-L0 as range 23
    // closed e.Pattern-R0 as range 25
    // closed e.Vars0 as range 27
    // closed e.Commands0 as range 29
    if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
      continue;
    if( ! refalrts::svar_left( context[36], context[31], context[32] ) )
      continue;
    if( ! refalrts::empty_seq( context[31], context[32] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: s.R0: 10
    //DEBUG: e.Pattern-L0: 23
    //DEBUG: e.Pattern-R0: 25
    //DEBUG: e.Vars0: 27
    //DEBUG: e.Commands0: 29
    //DEBUG: s.VL: 33
    //DEBUG: s.VR: 34
    //DEBUG: s.LB: 35
    //DEBUG: s.RB: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/37 '*'/38 4/39 >/40 (/41 Tile{ AsIs: e.Pattern-L0/23 } (/42 Tile{ HalfReuse: # e/22 AsIs: s.VL/33 AsIs: s.VR/34 } '='/43 s.VL/33/44 s.VR/34/45 )/46 (/47 # LB/48 )/49 Tile{ AsIs: s.LB/35 } )/50 (/51 Tile{ AsIs: s.RB/36 } (/52 # RB/53 )/54 (/55 # Hole/56 Tile{ HalfReuse: s.RB36 /9 AsIs: s.R0/10 HalfReuse: )/13 AsIs: e.Pattern-R0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/27 HalfReuse: (/18 HalfReuse: # e/21 } s.VL/33/57 s.VR/34/58 '='/59 s.VL/33/60 s.VR/34/61 )/62 )/63 Tile{ AsIs: e.Commands0/29 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[37], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[38], '*');
    refalrts::alloc_number(vm, context[39], 4UL);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_char(vm, context[43], '=');
    refalrts::copy_stvar(vm, context[44], context[33]);
    refalrts::copy_stvar(vm, context[45], context[34]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_ident(vm, context[48], identifiers[ident_LB]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_open_bracket(vm, context[51]);
    refalrts::alloc_open_bracket(vm, context[52]);
    refalrts::alloc_ident(vm, context[53], identifiers[ident_RB]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_ident(vm, context[56], identifiers[ident_Hole]);
    refalrts::copy_stvar(vm, context[57], context[33]);
    refalrts::copy_stvar(vm, context[58], context[34]);
    refalrts::alloc_char(vm, context[59], '=');
    refalrts::copy_stvar(vm, context[60], context[33]);
    refalrts::copy_stvar(vm, context[61], context[34]);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_close_bracket(vm, context[63]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_ident(context[22], identifiers[ident_e]);
    refalrts::reinit_svar( context[9], context[36] );
    refalrts::reinit_close_bracket(context[13]);
    refalrts::reinit_open_bracket(context[18]);
    refalrts::reinit_ident(context[21], identifiers[ident_e]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[63] );
    refalrts::link_brackets( context[18], context[62] );
    refalrts::link_brackets( context[51], context[14] );
    refalrts::link_brackets( context[55], context[13] );
    refalrts::link_brackets( context[52], context[54] );
    refalrts::link_brackets( context[41], context[50] );
    refalrts::link_brackets( context[47], context[49] );
    refalrts::link_brackets( context[42], context[46] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[57], context[63] );
    res = refalrts::splice_evar( res, context[9], context[21] );
    res = refalrts::splice_evar( res, context[52], context[56] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[43], context[49] );
    res = refalrts::splice_evar( res, context[22], context[34] );
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[37], context[41] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$27=1@2/4 s.Level0/5 (/8 e.Pattern-L0/6 )/9 s.R0/10 (/13 e.Pattern-R0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.Commands0/19 )/22 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 11
  // closed e.Vars0 as range 15
  // closed e.Commands0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: s.R0: 10
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.Commands0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$27=1@0/4 AsIs: s.Level0/5 } '*'/23 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: s.R0/10 AsIs: (/13 AsIs: e.Pattern-R0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Commands0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[23], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S27A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S27A1Z2("Decompile-Pattern-Hole$27=1@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S27A1Z2);


static refalrts::FnResult func_gen_DoFormatExpr_S6A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$6=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$6=1@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$6=1@4/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.WordRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.WordRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.WordRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@4/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.WordRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$6=1@4/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$6=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"    "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S6A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S6A1Z4("DoFormatExpr$6=1@4", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S6A1Z4);


static refalrts::FnResult func_gen_DoFormatExpr_S7A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$7=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$7=1@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$7=1@4/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.NumberRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.NumberRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.NumberRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@4/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.NumberRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$7=1@4/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$7=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"    "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S7A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S7A1Z4("DoFormatExpr$7=1@4", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S7A1Z4);


static refalrts::FnResult func_gen_DoFormatExpr_S9A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & DoFormatExpr$9=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$9=1@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$9=1@4/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Chars0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CharRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Chars0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CharRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Chars0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CharRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@4/4 } Tile{ AsIs: (/20 } </33 & Sub/34 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/35 )/36 Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CharRep/30 } '\''/37 )/38 Tile{ HalfReuse: (/13 HalfReuse: # C/16 AsIs: e.Chars0/26 AsIs: )/17 } Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_char(vm, context[37], '\'');
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_ident(context[16], identifiers[ident_C]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[17] );
    refalrts::link_brackets( context[12], context[38] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[20], context[36] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$9=1@4/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Chars0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Chars0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Chars0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$9=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"    "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Chars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S9A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S9A1Z4("DoFormatExpr$9=1@4", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S9A1Z4);


static refalrts::FnResult func_gen_DoFormatExpr_S10A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoFormatExpr$10=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$10=1@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$10=1@4/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Chars0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CharRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Chars0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CharRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Chars0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CharRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@4/4 } Tile{ AsIs: (/20 } </33 & Sub/34 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/35 )/36 Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CharRep/30 } )/37 Tile{ HalfReuse: (/13 HalfReuse: # C/16 AsIs: e.Chars0/26 AsIs: )/17 } Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_ident(context[16], identifiers[ident_C]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[17] );
    refalrts::link_brackets( context[12], context[37] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[20], context[36] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$10=1@4/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Chars0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Chars0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Chars0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$10=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"    "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Chars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S10A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S10A1Z4("DoFormatExpr$10=1@4", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S10A1Z4);


static refalrts::FnResult func_gen_DoFormatExpr_S12A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$12=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$12=1@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$12=1@4/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@4/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$12=1@4/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$12=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"    "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S12A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S12A1Z4("DoFormatExpr$12=1@4", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S12A1Z4);


static refalrts::FnResult func_gen_DoFormatExpr_S13A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$13=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$13=1@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$13=1@4/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@4/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$13=1@4/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$13=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"    "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S13A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S13A1Z4("DoFormatExpr$13=1@4", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S13A1Z4);


static refalrts::FnResult func_gen_DoFormatExpr_S14A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoFormatExpr$14=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$14=1@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoFormatExpr$14=1@4/4 s.Limit0/5 (/8 e.Indent0/18 )/9 (/12 e.Result0/20 )/13 (/16 e.Tail0/22 )/17 s.Len/26 e.VarRep/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Indent0 as range 18
    // closed e.Result0 as range 20
    // closed e.Tail0 as range 22
    if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
      continue;
    // closed e.VarRep as range 24
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 18
    //DEBUG: e.Result0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: s.Len: 26
    //DEBUG: e.VarRep: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@4/4 } Tile{ AsIs: (/16 } </27 & Sub/28 Tile{ HalfReuse: s.Limit05 /17 AsIs: s.Len/26 } >/29 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/18 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/20 } Tile{ AsIs: e.VarRep/24 } )/30 Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
    refalrts::reinit_svar( context[17], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[30] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$14=1@4/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$14=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/18"    "/20 )/22 (/23 Tile{ AsIs: e.Indent0/6 }"    "/24 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[18], context[19], context[6], context[7]);
  refalrts::alloc_chars(vm, context[20], context[21], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S14A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[23], context[9] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S14A1Z4("DoFormatExpr$14=1@4", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S14A1Z4);


static refalrts::FnResult func_gen_DoFormatExpr_S19A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoFormatExpr$19=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoFormatExpr$19=1@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoFormatExpr$19=1@4/4 s.Limit0/5 (/8 e.Indent0/22 )/9 (/12 e.Result0/24 )/13 (/16 e.Inner0/26 )/17 (/20 e.Tail0/28 )/21 s.Len/32 e.CallRep/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Indent0 as range 22
    // closed e.Result0 as range 24
    // closed e.Inner0 as range 26
    // closed e.Tail0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    // closed e.CallRep as range 30
    //DEBUG: s.Limit0: 5
    //DEBUG: e.Indent0: 22
    //DEBUG: e.Result0: 24
    //DEBUG: e.Inner0: 26
    //DEBUG: e.Tail0: 28
    //DEBUG: s.Len: 32
    //DEBUG: e.CallRep: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Limit0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr@4/4 } (/33 </34 & Sub/35 Tile{ HalfReuse: s.Limit05 /21 AsIs: s.Len/32 } >/36 Tile{ AsIs: )/13 } Tile{ AsIs: (/8 AsIs: e.Indent0/22 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.Result0/24 } Tile{ AsIs: e.CallRep/30 } Tile{ HalfReuse: )/16 AsIs: e.Inner0/26 HalfReuse: (/17 HalfReuse: # RK/20 } )/37 Tile{ AsIs: e.Tail0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_Z4]);
    refalrts::reinit_svar( context[21], context[5] );
    refalrts::reinit_close_bracket(context[16]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_RK]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[37] );
    refalrts::link_brackets( context[12], context[16] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[33], context[13] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[16], context[20] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoFormatExpr$19=1@4/4 s.Limit0/5 (/8 e.Indent0/6 )/9 (/12 e.Result0/10 )/13 (/16 e.Inner0/14 )/17 (/20 e.Tail0/18 )/21 e.dyn/2 >/1
  // closed e.Indent0 as range 6
  // closed e.Result0 as range 10
  // closed e.Inner0 as range 14
  // closed e.Tail0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Limit0: 5
  //DEBUG: e.Indent0: 6
  //DEBUG: e.Result0: 10
  //DEBUG: e.Inner0: 14
  //DEBUG: e.Tail0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoFormatExpr$19=1@0/4 AsIs: s.Limit0/5 AsIs: (/8 } e.Indent0/6/22"    "/24 )/26 (/27 Tile{ AsIs: e.Indent0/6 }"    "/28 Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Result0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Inner0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Tail0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[22], context[23], context[6], context[7]);
  refalrts::alloc_chars(vm, context[24], context[25], "    ", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "    ", 4);
  refalrts::update_name(context[4], functions[efunc_gen_DoFormatExpr_S19A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[9] );
  refalrts::link_brackets( context[8], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoFormatExpr_S19A1Z4("DoFormatExpr$19=1@4", COOKIE1_, COOKIE2_, func_gen_DoFormatExpr_S19A1Z4);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$19=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$19=2@1/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 s.new4/11 s.new5/12 (/15 e.new6/13 )/16 (/19 e.new7/17 )/20 (/23 e.new8/21 )/24 e.new9/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new6 as range 13
  // closed e.new7 as range 17
  // closed e.new8 as range 21
  // closed e.new9 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$19=2@1/4 s.X/5 (/8 e.Pattern-L0/25 )/9 s.Type0/10 s.IdL0/11 s.IdR0/12 (/15 e.Pattern-R0/27 )/16 (/19 e.Vars0/29 )/20 (/23 e.Commands0/31 )/24 s.VL/35 s.VR/36 >/1
    context[25] = context[6];
    context[26] = context[7];
    context[27] = context[13];
    context[28] = context[14];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[2];
    context[34] = context[3];
    // closed e.Pattern-L0 as range 25
    // closed e.Pattern-R0 as range 27
    // closed e.Vars0 as range 29
    // closed e.Commands0 as range 31
    if( ! refalrts::svar_left( context[35], context[33], context[34] ) )
      continue;
    if( ! refalrts::svar_left( context[36], context[33], context[34] ) )
      continue;
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: s.Type0: 10
    //DEBUG: s.IdL0: 11
    //DEBUG: s.IdR0: 12
    //DEBUG: e.Pattern-L0: 25
    //DEBUG: e.Pattern-R0: 27
    //DEBUG: e.Vars0: 29
    //DEBUG: e.Commands0: 31
    //DEBUG: s.VL: 35
    //DEBUG: s.VR: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </37 & Decompile-Pattern-Hole/38 0/39 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 } 2/40 >/41 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/25 HalfReuse: (/9 AsIs: s.Type0/10 AsIs: s.IdL0/11 AsIs: s.IdR0/12 HalfReuse: '='/15 } s.VL/35/42 s.VR/36/43 )/44 s.VR/36/45 )/46 (/47 Tile{ AsIs: e.Pattern-R0/27 } Tile{ AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/29 HalfReuse: (/20 HalfReuse: s.Type010 /23 } s.IdL0/11/48 s.IdR0/12/49 Tile{ HalfReuse: '='/24 AsIs: s.VL/35 AsIs: s.VR/36 HalfReuse: )/1 } )/50 Tile{ AsIs: e.Commands0/31 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[39], 0UL);
    refalrts::alloc_number(vm, context[40], 2UL);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::copy_stvar(vm, context[42], context[35]);
    refalrts::copy_stvar(vm, context[43], context[36]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::copy_stvar(vm, context[45], context[36]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::copy_stvar(vm, context[48], context[11]);
    refalrts::copy_stvar(vm, context[49], context[12]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_char(context[15], '=');
    refalrts::reinit_open_bracket(context[20]);
    refalrts::reinit_svar( context[23], context[10] );
    refalrts::reinit_char(context[24], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[19], context[50] );
    refalrts::link_brackets( context[20], context[1] );
    refalrts::link_brackets( context[47], context[16] );
    refalrts::link_brackets( context[8], context[46] );
    refalrts::link_brackets( context[9], context[44] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_evar( res, context[24], context[1] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[16], context[23] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[42], context[47] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$19=2@1/4 s.X/5 (/8 e.Pattern-L0/6 )/9 s.Type0/10 s.IdL0/11 s.IdR0/12 (/15 e.Pattern-R0/13 )/16 (/19 e.Vars0/17 )/20 (/23 e.Commands0/21 )/24 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 13
  // closed e.Vars0 as range 17
  // closed e.Commands0 as range 21
  // closed e.dyn as range 2
  //DEBUG: s.X: 5
  //DEBUG: s.Type0: 10
  //DEBUG: s.IdL0: 11
  //DEBUG: s.IdR0: 12
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 13
  //DEBUG: e.Vars0: 17
  //DEBUG: e.Commands0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 Tile{ HalfReuse: & Decompile-Pattern-Hole$19=2@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: s.Type0/10 AsIs: s.IdL0/11 AsIs: s.IdR0/12 AsIs: (/15 AsIs: e.Pattern-R0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Commands0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S19A2Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A2Z1("Decompile-Pattern-Hole$19=2@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A2Z1);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$20=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$20=2@1/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 s.new4/11 s.new5/12 (/15 e.new6/13 )/16 (/19 e.new7/17 )/20 (/23 e.new8/21 )/24 e.new9/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new6 as range 13
  // closed e.new7 as range 17
  // closed e.new8 as range 21
  // closed e.new9 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$20=2@1/4 s.X/5 (/8 e.Pattern-L0/25 )/9 s.Type0/10 s.IdL0/11 s.IdR0/12 (/15 e.Pattern-R0/27 )/16 (/19 e.Vars0/29 )/20 (/23 e.Commands0/31 )/24 s.VL/35 s.VR/36 >/1
    context[25] = context[6];
    context[26] = context[7];
    context[27] = context[13];
    context[28] = context[14];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[2];
    context[34] = context[3];
    // closed e.Pattern-L0 as range 25
    // closed e.Pattern-R0 as range 27
    // closed e.Vars0 as range 29
    // closed e.Commands0 as range 31
    if( ! refalrts::svar_left( context[35], context[33], context[34] ) )
      continue;
    if( ! refalrts::svar_left( context[36], context[33], context[34] ) )
      continue;
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    //DEBUG: s.X: 5
    //DEBUG: s.Type0: 10
    //DEBUG: s.IdL0: 11
    //DEBUG: s.IdR0: 12
    //DEBUG: e.Pattern-L0: 25
    //DEBUG: e.Pattern-R0: 27
    //DEBUG: e.Vars0: 29
    //DEBUG: e.Commands0: 31
    //DEBUG: s.VL: 35
    //DEBUG: s.VR: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </37 & Decompile-Pattern-Hole/38 0/39 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 HalfReuse: 2/8 } >/40 (/41 Tile{ AsIs: e.Pattern-L0/25 } )/42 (/43 s.VL/35/44 Tile{ HalfReuse: (/9 AsIs: s.Type0/10 AsIs: s.IdL0/11 AsIs: s.IdR0/12 } '='/45 s.VL/35/46 s.VR/36/47 Tile{ HalfReuse: )/15 AsIs: e.Pattern-R0/27 AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/29 HalfReuse: (/20 HalfReuse: s.Type010 /23 } s.IdL0/11/48 s.IdR0/12/49 Tile{ HalfReuse: '='/24 AsIs: s.VL/35 AsIs: s.VR/36 HalfReuse: )/1 } )/50 Tile{ AsIs: e.Commands0/31 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[39], 0UL);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::copy_stvar(vm, context[44], context[35]);
    refalrts::alloc_char(vm, context[45], '=');
    refalrts::copy_stvar(vm, context[46], context[35]);
    refalrts::copy_stvar(vm, context[47], context[36]);
    refalrts::copy_stvar(vm, context[48], context[11]);
    refalrts::copy_stvar(vm, context[49], context[12]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_number(context[8], 2UL);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_close_bracket(context[15]);
    refalrts::reinit_open_bracket(context[20]);
    refalrts::reinit_svar( context[23], context[10] );
    refalrts::reinit_char(context[24], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[19], context[50] );
    refalrts::link_brackets( context[20], context[1] );
    refalrts::link_brackets( context[43], context[16] );
    refalrts::link_brackets( context[9], context[15] );
    refalrts::link_brackets( context[41], context[42] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_evar( res, context[24], context[1] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[15], context[23] );
    res = refalrts::splice_evar( res, context[45], context[47] );
    res = refalrts::splice_evar( res, context[9], context[12] );
    res = refalrts::splice_evar( res, context[42], context[44] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$20=2@1/4 s.X/5 (/8 e.Pattern-L0/6 )/9 s.Type0/10 s.IdL0/11 s.IdR0/12 (/15 e.Pattern-R0/13 )/16 (/19 e.Vars0/17 )/20 (/23 e.Commands0/21 )/24 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 13
  // closed e.Vars0 as range 17
  // closed e.Commands0 as range 21
  // closed e.dyn as range 2
  //DEBUG: s.X: 5
  //DEBUG: s.Type0: 10
  //DEBUG: s.IdL0: 11
  //DEBUG: s.IdR0: 12
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 13
  //DEBUG: e.Vars0: 17
  //DEBUG: e.Commands0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 Tile{ HalfReuse: & Decompile-Pattern-Hole$20=2@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: s.Type0/10 AsIs: s.IdL0/11 AsIs: s.IdR0/12 AsIs: (/15 AsIs: e.Pattern-R0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Commands0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S20A2Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A2Z1("Decompile-Pattern-Hole$20=2@1", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A2Z1);


static refalrts::FnResult func_gen_Decompilem_Result_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & Decompile-Result@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Result@4/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new4 as range 12
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Result@4/4 s.new6/5 (/8 e.new12/16 )/9 t.new7/10 (/14 e.new13/18 )/15 (/24 s.new8/26 s.new9/27 e.new10/22 )/25 e.new11/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    context[22] = 0;
    context[23] = 0;
    context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
    if( ! context[24] )
      continue;
    refalrts::bracket_pointers(context[24], context[25]);
    // closed e.new12 as range 16
    // closed e.new13 as range 18
    // closed e.new11 as range 20
    if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
      continue;
    if( ! refalrts::svar_left( context[27], context[22], context[23] ) )
      continue;
    // closed e.new10 as range 22
    do {
      // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/28 )/9 t.MB/10 (/14 e.Result/30 )/15 (/24 s.Offset/26 # NCS/27 e.Word/32 )/25 e.Commands/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_NCS], context[27] ) )
        continue;
      // closed e.Vars0 as range 28
      // closed e.Result as range 30
      // closed e.Word as range 32
      // closed e.Commands as range 34
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 28
      //DEBUG: e.Result: 30
      //DEBUG: e.Word: 32
      //DEBUG: e.Commands: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/28 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/30 HalfReuse: (/15 HalfReuse: # W/24 } Tile{ AsIs: e.Word/32 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/34 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_ident(context[24], identifiers[ident_W]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@4/4 s.new14/5 (/8 e.new21/28 )/9 t.new15/10 (/14 e.new22/30 )/15 (/24 s.new17/26 s.new18/27 s.new19/36 e.new20/32 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      // closed e.new21 as range 28
      // closed e.new22 as range 30
      // closed e.new16 as range 34
      if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
        continue;
      // closed e.new20 as range 32
      do {
        // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # NNS/27 s.Number/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_NNS], context[27] ) )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Number: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # N/24 } Tile{ AsIs: s.Number/36 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/41 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_ident(context[24], identifiers[ident_N]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[15], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::splice_to_freelist_open( vm, context[24], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # NS/27 s.Code/36 s.Char/45 )/25 e.Commands/43 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        context[44] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_NS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 43
        if( ! refalrts::svar_left( context[45], context[41], context[42] ) )
          continue;
        if( ! refalrts::empty_seq( context[41], context[42] ) )
          continue;
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Code: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 43
        //DEBUG: s.Char: 45

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} s.Code/36 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # C/24 } Tile{ AsIs: s.Char/45 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/43 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_ident(context[24], identifiers[ident_C]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[15], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[45] );
        refalrts::splice_to_freelist_open( vm, context[24], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TEXT/27 s.Count/36 e.Chars/41 )/25 e.Commands/43 >/1
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      context[44] = context[35];
      if( ! refalrts::ident_term( identifiers[ident_TEXT], context[27] ) )
        continue;
      // closed e.Vars0 as range 37
      // closed e.Result as range 39
      // closed e.Chars as range 41
      // closed e.Commands as range 43
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: s.Count: 36
      //DEBUG: e.Vars0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Chars: 41
      //DEBUG: e.Commands: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} s.Count/36 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # C/24 } Tile{ AsIs: e.Chars/41 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/43 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_ident(context[24], identifiers[ident_C]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@4/4 s.new14/5 (/8 e.new19/28 )/9 t.new15/10 (/14 e.new20/30 )/15 (/24 s.new17/26 s.new18/27 )/25 e.new16/32 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.new19 as range 28
      // closed e.new20 as range 30
      // closed e.new16 as range 32
      do {
        // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/34 )/9 t.MB/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # BL/27 )/25 e.Commands/38 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_BL], context[27] ) )
          continue;
        // closed e.Vars0 as range 34
        // closed e.Result as range 36
        // closed e.Commands as range 38
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 34
        //DEBUG: e.Result: 36
        //DEBUG: e.Commands: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 } Tile{ AsIs: (/24 } Tile{ AsIs: t.MB/10 } Tile{ AsIs: e.Result/36 } Tile{ AsIs: )/15 } Tile{ HalfReuse: (/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[27], context[25] );
        refalrts::link_brackets( context[24], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[27];
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/34 )/9 (/10 t.MB/42 e.Result/40 )/11 (/14 e.Nested/36 )/15 (/24 s.Offset/26 # BR/27 )/25 e.Commands/38 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = 0;
        context[41] = 0;
        if( ! refalrts::brackets_term( context[40], context[41], context[10] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_BR], context[27] ) )
          continue;
        // closed e.Vars0 as range 34
        // closed e.Nested as range 36
        // closed e.Commands as range 38
        context[43] = refalrts::tvar_left( context[42], context[40], context[41] );
        if( ! context[43] )
          continue;
        // closed e.Result as range 40
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 34
        //DEBUG: e.Nested: 36
        //DEBUG: e.Commands: 38
        //DEBUG: t.MB: 42
        //DEBUG: e.Result: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/10 {REMOVED TILE} {REMOVED TILE} )/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 } Tile{ AsIs: t.MB/42 } Tile{ AsIs: (/14 } Tile{ AsIs: e.Result/40 } Tile{ AsIs: (/24 } Tile{ HalfReuse: '*'/15 } Tile{ AsIs: e.Nested/36 } Tile{ HalfReuse: )/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
        refalrts::reinit_char(context[15], '*');
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[24], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[27];
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/34 )/9 t.MB/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # BLR/27 )/25 e.Commands/38 >/1
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_BLR], context[27] ) )
        continue;
      // closed e.Vars0 as range 34
      // closed e.Result as range 36
      // closed e.Commands as range 38
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 34
      //DEBUG: e.Result: 36
      //DEBUG: e.Commands: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/36 HalfReuse: (/15 HalfReuse: '*'/24 } Tile{ HalfReuse: )/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_char(context[24], '*');
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@4/4 s.new14/5 (/8 e.new20/28 )/9 t.new15/10 (/14 e.new21/30 (/38 '*'/40 e.new22/36 )/39 )/15 (/24 s.new17/26 s.new18/27 e.new19/32 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_right( context[36], context[37], context[30], context[31] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::char_left( '*', context[36], context[37] );
      if( ! context[40] )
        continue;
      // closed e.new20 as range 28
      // closed e.new21 as range 30
      // closed e.new22 as range 36
      // closed e.new19 as range 32
      // closed e.new16 as range 34
      do {
        // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/41 )/9 t.MB/10 (/14 e.Result/43 (/38 '*'/40 e.Inner/45 )/39 )/15 (/24 s.Offset/26 # ACT1/27 e.Name/47 )/25 e.Commands/49 >/1
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[32];
        context[48] = context[33];
        context[49] = context[34];
        context[50] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_ACT1], context[27] ) )
          continue;
        // closed e.Vars0 as range 41
        // closed e.Result as range 43
        // closed e.Inner as range 45
        // closed e.Name as range 47
        // closed e.Commands as range 49
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 41
        //DEBUG: e.Result: 43
        //DEBUG: e.Inner: 45
        //DEBUG: e.Name: 47
        //DEBUG: e.Commands: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 # ACT1/27 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/41 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/43 AsIs: (/38 Reuse: '!'/40 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Name/47 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Inner/45 } Tile{ AsIs: )/39 } Tile{ AsIs: )/25 AsIs: e.Commands/49 AsIs: >/1 ]] }
        refalrts::update_char(context[40], '!');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[24], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::splice_to_freelist_open( vm, context[40], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/41 )/9 t.MB/10 (/14 e.Result/43 (/38 '*'/40 e.Inner/45 )/39 )/15 (/24 s.Offset/26 # ACT_EXTRN/27 e.Name/47 )/25 e.Commands/49 >/1
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[36];
      context[46] = context[37];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[34];
      context[50] = context[35];
      if( ! refalrts::ident_term( identifiers[ident_ACTu_EXTRN], context[27] ) )
        continue;
      // closed e.Vars0 as range 41
      // closed e.Result as range 43
      // closed e.Inner as range 45
      // closed e.Name as range 47
      // closed e.Commands as range 49
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 41
      //DEBUG: e.Result: 43
      //DEBUG: e.Inner: 45
      //DEBUG: e.Name: 47
      //DEBUG: e.Commands: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 # ACT_EXTRN/27 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/41 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/43 AsIs: (/38 Reuse: '!'/40 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Name/47 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Inner/45 } Tile{ AsIs: )/39 } Tile{ AsIs: )/25 AsIs: e.Commands/49 AsIs: >/1 ]] }
      refalrts::update_char(context[40], '!');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[24], context[15] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::splice_to_freelist_open( vm, context[40], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@4/4 s.new14/5 (/8 e.new20/28 )/9 t.new15/10 (/14 e.new21/30 )/15 (/24 s.new17/26 s.new18/27 s.new19/36 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      // closed e.new20 as range 28
      // closed e.new21 as range 30
      // closed e.new16 as range 34
      if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
        continue;
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      do {
        // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TPLS/27 s.Copy/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TPLS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Copy: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.Copy
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z4S10C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@4$10?1/47 e.Vars-B/48 (/54 # s/56 s.Id/59 '='/58 s.Copy/57 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            context[56] = refalrts::ident_left( identifiers[ident_s], context[52], context[53] );
            if( ! context[56] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[36], context[52], context[53] ) )
              continue;
            context[58] = refalrts::char_right( '=', context[52], context[53] );
            if( ! context[58] )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.Copy: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Id: 59

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/26 # TPLS/27 s.Copy/36 {REMOVED TILE} & Decompile-Result@4$10?1/47 e.Vars-B/48 (/54 # s/56 {REMOVED TILE} e.Vars-E/50 >/44 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # s/24 } Tile{ AsIs: s.Id/59 AsIs: '='/58 AsIs: s.Copy/57 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[15]);
            refalrts::reinit_ident(context[24], identifiers[ident_s]);
            refalrts::reinit_close_call(context[43]);
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[14], context[25] );
            refalrts::link_brackets( context[15], context[55] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[43] );
            res = refalrts::splice_evar( res, context[59], context[55] );
            refalrts::splice_to_freelist_open( vm, context[24], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TPLE/27 s.CopyR/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TPLE], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.CopyR: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.CopyR
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z4S11C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@4$11?1/47 e.Vars-B/48 (/54 s.Type/57 s.IdL/58 s.IdR/59 '='/60 s.CopyL/61 s.CopyR/56 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[36], context[52], context[53] ) )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            context[60] = refalrts::char_left( '=', context[52], context[53] );
            if( ! context[60] )
              continue;
            if( ! refalrts::svar_left( context[61], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.CopyR: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Type: 57
            //DEBUG: s.IdL: 58
            //DEBUG: s.IdR: 59
            //DEBUG: s.CopyL: 61
            //5: s.X
            //10: t.MB
            //26: s.Offset
            //36: s.CopyR
            //37: e.Vars0
            //39: e.Result
            //41: e.Commands
            //48: e.Vars-B
            //50: e.Vars-E
            //56: s.CopyR
            //57: s.Type
            //58: s.IdL
            //59: s.IdR
            //61: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[62]);
            refalrts::alloc_name(vm, context[64], functions[efunc_gen_Decompilem_Result_Z4S11C2]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[63]);
            refalrts::push_stack( vm, context[63] );
            refalrts::push_stack( vm, context[62] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[62] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </62 & Decompile-Result@4$11?2/66 e.B/67 s.Type/71 e.E/69 >/63
              context[64] = 0;
              context[65] = 0;
              context[66] = refalrts::call_left( context[64], context[65], context[62], context[63] );
              context[67] = 0;
              context[68] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[69] = context[64];
                context[70] = context[65];
                if( ! refalrts::repeated_stvar_left( vm, context[71], context[57], context[69], context[70] ) )
                  continue;
                // closed e.E as range 69
                //DEBUG: t.MB: 10
                //DEBUG: s.X: 5
                //DEBUG: s.Offset: 26
                //DEBUG: s.CopyR: 36
                //DEBUG: e.Vars0: 37
                //DEBUG: e.Result: 39
                //DEBUG: e.Commands: 41
                //DEBUG: e.Vars-B: 48
                //DEBUG: e.Vars-E: 50
                //DEBUG: s.Type: 57
                //DEBUG: s.IdL: 58
                //DEBUG: s.IdR: 59
                //DEBUG: s.CopyL: 61
                //DEBUG: e.B: 67
                //DEBUG: e.E: 69

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/26 # TPLE/27 s.CopyR/36 {REMOVED TILE} & Decompile-Result@4$11?1/47 e.Vars-B/48 (/54 s.Type/57 {REMOVED TILE} e.Vars-E/50 >/44 </62 & Decompile-Result@4$11?2/66 e.B/67 s.Type/71 e.E/69 >/63 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: s.Type71 /24 } Tile{ AsIs: s.IdL/58 AsIs: s.IdR/59 AsIs: '='/60 AsIs: s.CopyL/61 AsIs: s.CopyR/56 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[15]);
                refalrts::reinit_svar( context[24], context[71] );
                refalrts::reinit_close_call(context[43]);
                refalrts::push_stack( vm, context[43] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[14], context[25] );
                refalrts::link_brackets( context[15], context[55] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[25], context[43] );
                res = refalrts::splice_evar( res, context[58], context[55] );
                refalrts::splice_to_freelist_open( vm, context[24], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[67], context[68], context[64], context[65] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[62], context[63]);
            continue;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # MULS/27 s.Copy/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_MULS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Copy: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.Copy
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z4S12C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@4$12?1/47 e.Vars-B/48 (/54 # s/56 s.Id/59 '='/58 s.Copy/57 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            context[56] = refalrts::ident_left( identifiers[ident_s], context[52], context[53] );
            if( ! context[56] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[36], context[52], context[53] ) )
              continue;
            context[58] = refalrts::char_right( '=', context[52], context[53] );
            if( ! context[58] )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.Copy: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Id: 59

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/26 # MULS/27 s.Copy/36 {REMOVED TILE} & Decompile-Result@4$12?1/47 e.Vars-B/48 (/54 # s/56 {REMOVED TILE} e.Vars-E/50 >/44 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # s/24 } Tile{ AsIs: s.Id/59 AsIs: '='/58 AsIs: s.Copy/57 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[15]);
            refalrts::reinit_ident(context[24], identifiers[ident_s]);
            refalrts::reinit_close_call(context[43]);
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[14], context[25] );
            refalrts::link_brackets( context[15], context[55] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[43] );
            res = refalrts::splice_evar( res, context[59], context[55] );
            refalrts::splice_to_freelist_open( vm, context[24], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # MULE/27 s.CopyR/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_MULE], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.CopyR: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.CopyR
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z4S13C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@4$13?1/47 e.Vars-B/48 (/54 s.Type/57 s.IdL/58 s.IdR/59 '='/60 s.CopyL/61 s.CopyR/56 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[36], context[52], context[53] ) )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            context[60] = refalrts::char_left( '=', context[52], context[53] );
            if( ! context[60] )
              continue;
            if( ! refalrts::svar_left( context[61], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.CopyR: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Type: 57
            //DEBUG: s.IdL: 58
            //DEBUG: s.IdR: 59
            //DEBUG: s.CopyL: 61
            //5: s.X
            //10: t.MB
            //26: s.Offset
            //36: s.CopyR
            //37: e.Vars0
            //39: e.Result
            //41: e.Commands
            //48: e.Vars-B
            //50: e.Vars-E
            //56: s.CopyR
            //57: s.Type
            //58: s.IdL
            //59: s.IdR
            //61: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[62]);
            refalrts::alloc_name(vm, context[64], functions[efunc_gen_Decompilem_Result_Z4S13C2]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[63]);
            refalrts::push_stack( vm, context[63] );
            refalrts::push_stack( vm, context[62] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[62] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </62 & Decompile-Result@4$13?2/66 e.B/67 s.Type/71 e.E/69 >/63
              context[64] = 0;
              context[65] = 0;
              context[66] = refalrts::call_left( context[64], context[65], context[62], context[63] );
              context[67] = 0;
              context[68] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[69] = context[64];
                context[70] = context[65];
                if( ! refalrts::repeated_stvar_left( vm, context[71], context[57], context[69], context[70] ) )
                  continue;
                // closed e.E as range 69
                //DEBUG: t.MB: 10
                //DEBUG: s.X: 5
                //DEBUG: s.Offset: 26
                //DEBUG: s.CopyR: 36
                //DEBUG: e.Vars0: 37
                //DEBUG: e.Result: 39
                //DEBUG: e.Commands: 41
                //DEBUG: e.Vars-B: 48
                //DEBUG: e.Vars-E: 50
                //DEBUG: s.Type: 57
                //DEBUG: s.IdL: 58
                //DEBUG: s.IdR: 59
                //DEBUG: s.CopyL: 61
                //DEBUG: e.B: 67
                //DEBUG: e.E: 69

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/26 # MULE/27 s.CopyR/36 {REMOVED TILE} & Decompile-Result@4$13?1/47 e.Vars-B/48 (/54 s.Type/57 {REMOVED TILE} e.Vars-E/50 >/44 </62 & Decompile-Result@4$13?2/66 e.B/67 s.Type/71 e.E/69 >/63 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@4/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: s.Type71 /24 } Tile{ AsIs: s.IdL/58 AsIs: s.IdR/59 AsIs: '='/60 AsIs: s.CopyL/61 AsIs: s.CopyR/56 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[15]);
                refalrts::reinit_svar( context[24], context[71] );
                refalrts::reinit_close_call(context[43]);
                refalrts::push_stack( vm, context[43] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[14], context[25] );
                refalrts::link_brackets( context[15], context[55] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[25], context[43] );
                res = refalrts::splice_evar( res, context[58], context[55] );
                refalrts::splice_to_freelist_open( vm, context[24], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[67], context[68], context[64], context[65] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[62], context[63]);
            continue;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/37 )/9 '$'/10 (/14 e.Result/39 )/15 (/24 s.Offset1/26 # ECOND/27 s.Offset3/36 )/25 (/45 s.Offset2/53 # LABEL/54 e.Name/43 )/46 (/49 s.Offset3/52 # POPVF/51 )/50 e.Commands/41 >/1
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[34];
      context[42] = context[35];
      if( ! refalrts::char_term( '$', context[10] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_ECOND], context[27] ) )
        continue;
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_left( context[43], context[44], context[41], context[42] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[41], context[42] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = refalrts::ident_right( identifiers[ident_POPVF], context[47], context[48] );
      if( ! context[51] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[52], context[36], context[47], context[48] ) )
        continue;
      if( ! refalrts::empty_seq( context[47], context[48] ) )
        continue;
      // closed e.Vars0 as range 37
      // closed e.Result as range 39
      // closed e.Commands as range 41
      if( ! refalrts::svar_left( context[53], context[43], context[44] ) )
        continue;
      context[54] = refalrts::ident_left( identifiers[ident_LABEL], context[43], context[44] );
      if( ! context[54] )
        continue;
      // closed e.Name as range 43
      //DEBUG: s.X: 5
      //DEBUG: s.Offset1: 26
      //DEBUG: s.Offset3: 36
      //DEBUG: e.Vars0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Commands: 41
      //DEBUG: s.Offset2: 53
      //DEBUG: e.Name: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1/26 {REMOVED TILE} s.Offset3/36 {REMOVED TILE} s.Offset2/53 {REMOVED TILE} s.Offset3/52 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/39 AsIs: )/15 AsIs: (/24 } Tile{ Reuse: # EndCondition/54 AsIs: e.Name/43 AsIs: )/46 HalfReuse: </49 } Tile{ HalfReuse: & Decompile-Pattern-Hole/27 } 0/55 Tile{ AsIs: </0 Reuse: & Add/4 AsIs: s.X/5 HalfReuse: 3/8 } >/56 (/57 Tile{ HalfReuse: </51 } & Add/58 s.X/5/59 1/60 >/61 Tile{ AsIs: )/25 AsIs: (/45 } </62 & Add/63 s.X/5/64 2/65 >/66 Tile{ AsIs: )/9 } (/67 Tile{ AsIs: e.Vars0/37 } Tile{ AsIs: )/50 AsIs: e.Commands/41 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[55], 0UL);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::alloc_name(vm, context[58], functions[efunc_Add]);
      refalrts::copy_stvar(vm, context[59], context[5]);
      refalrts::alloc_number(vm, context[60], 1UL);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
      refalrts::copy_stvar(vm, context[64], context[5]);
      refalrts::alloc_number(vm, context[65], 2UL);
      refalrts::alloc_close_call(vm, context[66]);
      refalrts::alloc_open_bracket(vm, context[67]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[14], identifiers[ident_Result]);
      refalrts::update_ident(context[54], identifiers[ident_EndCondition]);
      refalrts::reinit_open_call(context[49]);
      refalrts::reinit_name(context[27], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::reinit_number(context[8], 3UL);
      refalrts::reinit_open_call(context[51]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[67], context[50] );
      refalrts::link_brackets( context[45], context[9] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[62] );
      refalrts::link_brackets( context[57], context[25] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[46] );
      refalrts::link_brackets( context[10], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[50];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[62], context[66] );
      res = refalrts::splice_evar( res, context[25], context[45] );
      res = refalrts::splice_evar( res, context[58], context[61] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[54], context[49] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@4/4 s.new14/5 (/8 e.new17/28 )/9 '$'/10 (/14 e.new18/30 )/15 (/24 s.new16/26 # OUTEST/27 )/25 e.new15/32 >/1
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[21];
    if( ! refalrts::char_term( '$', context[10] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_OUTEST], context[27] ) )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    // closed e.new17 as range 28
    // closed e.new18 as range 30
    // closed e.new15 as range 32
    do {
      // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/34 )/9 '$'/10 (/14 e.Result/36 )/15 (/24 s.Offset1/26 # OUTEST/27 )/25 (/42 s.Offset2/45 # OUTEST/44 )/43 e.Commands/38 >/1
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_right( identifiers[ident_OUTEST], context[40], context[41] );
      if( ! context[44] )
        continue;
      // closed e.Vars0 as range 34
      // closed e.Result as range 36
      // closed e.Commands as range 38
      if( ! refalrts::svar_left( context[45], context[40], context[41] ) )
        continue;
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      //DEBUG: s.X: 5
      //DEBUG: s.Offset1: 26
      //DEBUG: e.Vars0: 34
      //DEBUG: e.Result: 36
      //DEBUG: e.Commands: 38
      //DEBUG: s.Offset2: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.X/5 {REMOVED TILE} e.Vars0/34 {REMOVED TILE} {REMOVED TILE} s.Offset1/26 {REMOVED TILE} s.Offset2/45 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/36 AsIs: )/15 AsIs: (/24 } Tile{ Reuse: # NextSentence/27 AsIs: )/25 AsIs: (/42 } # NextSentence/46 Tile{ AsIs: )/9 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@7/4 } Tile{ AsIs: (/8 } )/47 Tile{ HalfReuse: (/44 AsIs: )/43 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[46], identifiers[ident_NextSentence]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[14], identifiers[ident_Result]);
      refalrts::update_ident(context[27], identifiers[ident_NextSentence]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z7]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[44], context[43] );
      refalrts::link_brackets( context[8], context[47] );
      refalrts::link_brackets( context[42], context[9] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[10], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[44];
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[27], context[42] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/34 )/9 '$'/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # OUTEST/27 )/25 e.Commands/38 >/1
    context[34] = context[28];
    context[35] = context[29];
    context[36] = context[30];
    context[37] = context[31];
    context[38] = context[32];
    context[39] = context[33];
    // closed e.Vars0 as range 34
    // closed e.Result as range 36
    // closed e.Commands as range 38
    //DEBUG: s.X: 5
    //DEBUG: s.Offset: 26
    //DEBUG: e.Vars0: 34
    //DEBUG: e.Result: 36
    //DEBUG: e.Commands: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.X/5 {REMOVED TILE} e.Vars0/34 {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/36 AsIs: )/15 AsIs: (/24 } # NextSentence/40 Tile{ AsIs: )/9 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@7/4 } Tile{ AsIs: (/8 } )/41 Tile{ HalfReuse: (/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[40], identifiers[ident_NextSentence]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::reinit_open_bracket(context[10]);
    refalrts::reinit_ident(context[14], identifiers[ident_Result]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z7]);
    refalrts::reinit_open_bracket(context[27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[27], context[25] );
    refalrts::link_brackets( context[8], context[41] );
    refalrts::link_brackets( context[24], context[9] );
    refalrts::link_brackets( context[10], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[10], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/16 )/9 t.MB/10 (/14 e.Result/18 )/15 e.Commands/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.Vars0 as range 16
    // closed e.Result as range 18
    // closed e.Commands as range 20
    //DEBUG: t.MB: 10
    //DEBUG: s.X: 5
    //DEBUG: e.Vars0: 16
    //DEBUG: e.Result: 18
    //DEBUG: e.Commands: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/14 } '='/22 Tile{ HalfReuse: 'C'/1 } Tile{ HalfReuse: ' '/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/16 AsIs: )/9 } (/23 Tile{ AsIs: t.MB/10 } Tile{ AsIs: e.Result/18 } Tile{ AsIs: )/15 } )/24 Tile{ AsIs: e.Commands/20 } Tile{ ]] }
    refalrts::alloc_char(vm, context[22], '=');
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_char(context[1], 'C');
    refalrts::reinit_char(context[0], ' ');
    refalrts::reinit_number(context[4], 0UL);
    refalrts::link_brackets( context[14], context[24] );
    refalrts::link_brackets( context[23], context[15] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Result@4/4 s.X/5 (/8 e.Vars0/6 )/9 t.dyn0/10 (/14 e.dyn1/12 )/15 e.dyn2/2 >/1
  // closed e.Vars0 as range 6
  // closed e.dyn1 as range 12
  // closed e.dyn2 as range 2
  //DEBUG: t.dyn0: 10
  //DEBUG: s.X: 5
  //DEBUG: e.Vars0: 6
  //DEBUG: e.dyn1: 12
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </16 Tile{ HalfReuse: & Decompile-Result@0/0 HalfReuse: 0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/6 AsIs: )/9 } Tile{ AsIs: (/14 } Tile{ AsIs: t.dyn0/10 } Tile{ AsIs: e.dyn1/12 } Tile{ AsIs: )/15 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Result_Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_elem( res, context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Result_Z4("Decompile-Result@4", COOKIE1_, COOKIE2_, func_gen_Decompilem_Result_Z4);


static refalrts::FnResult func_gen_Decompilem_Patternm_NoHole_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 67 elems
  refalrts::Iter context[67];
  refalrts::zeros( context, 67 );
  // </0 & Decompile-Pattern-NoHole@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.new8/13 )/8 (/11 e.new9/15 )/12 (/21 s.new4/23 s.new5/24 e.new6/19 )/22 e.new7/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new8 as range 13
    // closed e.new9 as range 15
    // closed e.new7 as range 17
    if( ! refalrts::svar_left( context[23], context[19], context[20] ) )
      continue;
    if( ! refalrts::svar_left( context[24], context[19], context[20] ) )
      continue;
    // closed e.new6 as range 19
    do {
      // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.new15/25 )/8 (/11 e.new16/27 )/12 (/21 s.new11/23 s.new12/24 e.new13/29 s.new14/33 )/22 e.new10/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      // closed e.new15 as range 25
      // closed e.new16 as range 27
      // closed e.new10 as range 31
      if( ! refalrts::svar_right( context[33], context[29], context[30] ) )
        continue;
      // closed e.new13 as range 29
      do {
        // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.Pattern-L/43 (/49 # Hole/51 s.L/52 s.R/53 )/50 e.Pattern-R/45 )/8 (/11 e.Vars/36 )/12 (/21 s.Offset/23 # SETB/24 s.L/42 s.R/33 )/22 e.Commands/40 >/1
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[24] ) )
          continue;
        // closed e.Vars as range 36
        // closed e.Commands as range 40
        if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        context[43] = 0;
        context[44] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[45] = context[34];
          context[46] = context[35];
          context[47] = 0;
          context[48] = 0;
          context[49] = refalrts::brackets_left( context[47], context[48], context[45], context[46] );
          if( ! context[49] )
            continue;
          refalrts::bracket_pointers(context[49], context[50]);
          context[51] = refalrts::ident_left( identifiers[ident_Hole], context[47], context[48] );
          if( ! context[51] )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[52], context[42], context[47], context[48] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[53], context[33], context[47], context[48] ) )
            continue;
          if( ! refalrts::empty_seq( context[47], context[48] ) )
            continue;
          // closed e.Pattern-R as range 45
          //DEBUG: s.Offset: 23
          //DEBUG: s.R: 33
          //DEBUG: e.Vars: 36
          //DEBUG: e.Commands: 40
          //DEBUG: s.L: 42
          //DEBUG: e.Pattern-L: 43
          //DEBUG: e.Pattern-R: 45

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.L/52 s.R/53 {REMOVED TILE} {REMOVED TILE} s.Offset/23 # SETB/24 s.L/42 s.R/33 )/22 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole@5/4 AsIs: (/7 AsIs: e.Pattern-L/43 HalfReuse: s.L52 /49 HalfReuse: )/51 } Tile{ AsIs: (/21 } Tile{ HalfReuse: s.R53 /50 AsIs: e.Pattern-R/45 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/36 AsIs: )/12 } Tile{ AsIs: e.Commands/40 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_Z5]);
          refalrts::reinit_svar( context[49], context[52] );
          refalrts::reinit_close_bracket(context[51]);
          refalrts::reinit_svar( context[50], context[53] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[21], context[8] );
          refalrts::link_brackets( context[7], context[51] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[50], context[12] );
          res = refalrts::splice_elem( res, context[21] );
          refalrts::splice_to_freelist_open( vm, context[51], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[43], context[44], context[34], context[35] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.Pattern/34 )/8 (/11 e.Vars/36 )/12 (/21 s.Offset/23 # RDY/24 0/33 )/22 e.Commands/38 >/1
      context[34] = context[25];
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[31];
      context[39] = context[32];
      if( ! refalrts::ident_term( identifiers[ident_RDY], context[24] ) )
        continue;
      if( ! refalrts::number_term( 0UL, context[33] ) )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Pattern as range 34
      // closed e.Vars as range 36
      // closed e.Commands as range 38
      //DEBUG: s.Offset: 23
      //DEBUG: e.Pattern: 34
      //DEBUG: e.Vars: 36
      //DEBUG: e.Commands: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Pattern/4 HalfReuse: 0/7 AsIs: e.Pattern/34 AsIs: )/8 HalfReuse: </11 } Tile{ HalfReuse: & Decompile-Result@7/12 AsIs: (/21 } Tile{ AsIs: e.Vars/36 } )/40 Tile{ HalfReuse: '$'/24 HalfReuse: (/33 AsIs: )/22 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[12], functions[efunc_gen_Decompilem_Result_Z7]);
      refalrts::reinit_char(context[24], '$');
      refalrts::reinit_open_bracket(context[33]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::link_brackets( context[33], context[22] );
      refalrts::link_brackets( context[21], context[40] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[12], context[21] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.Pattern/25 )/8 (/11 e.Vars/27 )/12 (/21 s.Offset/23 # PUSHVF/24 )/22 e.Commands/29 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_PUSHVF], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e.Pattern as range 25
      // closed e.Vars as range 27
      // closed e.Commands as range 29
      //DEBUG: s.Offset: 23
      //DEBUG: e.Pattern: 25
      //DEBUG: e.Vars: 27
      //DEBUG: e.Commands: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Pattern/4 HalfReuse: 0/7 AsIs: e.Pattern/25 AsIs: )/8 AsIs: (/11 } # StartCondition/31 Tile{ AsIs: )/12 HalfReuse: </21 } & Decompile-Result@7/32 (/33 Tile{ AsIs: e.Vars/27 } )/34 '$'/35 Tile{ HalfReuse: (/24 AsIs: )/22 AsIs: e.Commands/29 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[31], identifiers[ident_StartCondition]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_Decompilem_Result_Z7]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_char(vm, context[35], '$');
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_open_call(context[21]);
      refalrts::reinit_open_bracket(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[24], context[22] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[12], context[21] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.new15/25 )/8 (/11 e.new16/27 )/12 (/21 s.new11/23 s.new12/24 s.new13/33 e.new14/29 )/22 e.new10/31 >/1
      context[25] = context[13];
      context[26] = context[14];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[17];
      context[32] = context[18];
      // closed e.new15 as range 25
      // closed e.new16 as range 27
      // closed e.new10 as range 31
      if( ! refalrts::svar_left( context[33], context[29], context[30] ) )
        continue;
      // closed e.new14 as range 29
      do {
        // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.Pattern/34 )/8 (/11 e.Vars/36 )/12 (/21 s.Offset/23 # TRAN/24 s.Jump/33 )/22 e.Commands-B/40 (/46 s.Jump/48 e.Command/44 )/47 e.Commands-E/42 >/1
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[31];
        context[39] = context[32];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[24] ) )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        // closed e.Pattern as range 34
        // closed e.Vars as range 36
        context[40] = 0;
        context[41] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[42] = context[38];
          context[43] = context[39];
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
          if( ! context[46] )
            continue;
          refalrts::bracket_pointers(context[46], context[47]);
          if( ! refalrts::repeated_stvar_left( vm, context[48], context[33], context[44], context[45] ) )
            continue;
          // closed e.Command as range 44
          // closed e.Commands-E as range 42
          //DEBUG: s.Offset: 23
          //DEBUG: s.Jump: 33
          //DEBUG: e.Pattern: 34
          //DEBUG: e.Vars: 36
          //DEBUG: e.Commands-B: 40
          //DEBUG: e.Command: 44
          //DEBUG: e.Commands-E: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/23 {REMOVED TILE} s.Jump/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@7/4 AsIs: (/7 AsIs: e.Pattern/34 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/36 AsIs: )/12 } Tile{ AsIs: e.Commands-B/40 } Tile{ AsIs: (/21 } '@'/49 Tile{ Reuse: # Restore-NoHole/24 } 0/50 '*'/51 (/52 e.Pattern/34/53 Tile{ AsIs: )/22 } (/55 e.Vars/36/56 )/58 )/59 Tile{ AsIs: (/46 AsIs: s.Jump/48 AsIs: e.Command/44 AsIs: )/47 AsIs: e.Commands-E/42 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[49], '@');
          refalrts::alloc_number(vm, context[50], 0UL);
          refalrts::alloc_char(vm, context[51], '*');
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::copy_evar(vm, context[53], context[54], context[34], context[35]);
          refalrts::alloc_open_bracket(vm, context[55]);
          refalrts::copy_evar(vm, context[56], context[57], context[36], context[37]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_close_bracket(vm, context[59]);
          refalrts::update_ident(context[24], identifiers[ident_Restorem_NoHole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[46], context[47] );
          refalrts::link_brackets( context[21], context[59] );
          refalrts::link_brackets( context[55], context[58] );
          refalrts::link_brackets( context[52], context[22] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[46];
          res = refalrts::splice_evar( res, context[55], context[59] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[50], context[52] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_elem( res, context[49] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          refalrts::splice_to_freelist_open( vm, context[12], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[40], context[41], context[38], context[39] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.new24/34 )/8 (/11 e.new25/36 )/12 (/21 '@'/23 s.new18/24 s.new19/33 s.new20/50 e.new21/38 (/48 e.new22/46 )/49 (/44 e.new23/42 )/45 )/22 e.new17/40 >/1
      context[34] = context[25];
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      if( ! refalrts::char_term( '@', context[23] ) )
        continue;
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_right( context[42], context[43], context[38], context[39] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::brackets_right( context[46], context[47], context[38], context[39] );
      if( ! context[48] )
        continue;
      refalrts::bracket_pointers(context[48], context[49]);
      // closed e.new24 as range 34
      // closed e.new25 as range 36
      // closed e.new22 as range 46
      // closed e.new23 as range 42
      // closed e.new17 as range 40
      if( ! refalrts::svar_left( context[50], context[38], context[39] ) )
        continue;
      // closed e.new21 as range 38
      do {
        // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 '@'/23 # Restore-Hole/24 s.Level2/33 s.Top2/50 (/65 e.Pattern-L2/63 )/66 (/48 e.Pattern-R2/57 )/49 (/44 e.Vars2/59 )/45 )/22 e.Commands/61 >/1
        context[51] = context[34];
        context[52] = context[35];
        context[53] = context[36];
        context[54] = context[37];
        context[55] = context[38];
        context[56] = context[39];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[42];
        context[60] = context[43];
        context[61] = context[40];
        context[62] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[24] ) )
          continue;
        context[63] = 0;
        context[64] = 0;
        context[65] = refalrts::brackets_left( context[63], context[64], context[55], context[56] );
        if( ! context[65] )
          continue;
        refalrts::bracket_pointers(context[65], context[66]);
        if( ! refalrts::empty_seq( context[55], context[56] ) )
          continue;
        // closed e.Pattern1 as range 51
        // closed e.Vars1 as range 53
        // closed e.Pattern-L2 as range 63
        // closed e.Pattern-R2 as range 57
        // closed e.Vars2 as range 59
        // closed e.Commands as range 61
        //DEBUG: s.Level2: 33
        //DEBUG: s.Top2: 50
        //DEBUG: e.Pattern1: 51
        //DEBUG: e.Vars1: 53
        //DEBUG: e.Pattern-L2: 63
        //DEBUG: e.Pattern-R2: 57
        //DEBUG: e.Vars2: 59
        //DEBUG: e.Commands: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@7/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & Decompile-Pattern-Hole/24 AsIs: s.Level2/33 AsIs: s.Top2/50 AsIs: (/65 AsIs: e.Pattern-L2/63 AsIs: )/66 AsIs: (/48 AsIs: e.Pattern-R2/57 AsIs: )/49 AsIs: (/44 AsIs: e.Vars2/59 AsIs: )/45 } Tile{ AsIs: e.Commands/61 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[23]);
        refalrts::reinit_name(context[24], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::link_brackets( context[44], context[45] );
        refalrts::link_brackets( context[48], context[49] );
        refalrts::link_brackets( context[65], context[66] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[61], context[62] );
        res = refalrts::splice_evar( res, context[23], context[45] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 '@'/23 # Restore-NoHole/24 s.Level2/33 s.Top2/50 (/48 e.Pattern2/55 )/49 (/44 e.Vars2/57 )/45 )/22 e.Commands/59 >/1
      context[51] = context[34];
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[46];
      context[56] = context[47];
      context[57] = context[42];
      context[58] = context[43];
      context[59] = context[40];
      context[60] = context[41];
      if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.Pattern1 as range 51
      // closed e.Vars1 as range 53
      // closed e.Pattern2 as range 55
      // closed e.Vars2 as range 57
      // closed e.Commands as range 59
      //DEBUG: s.Level2: 33
      //DEBUG: s.Top2: 50
      //DEBUG: e.Pattern1: 51
      //DEBUG: e.Vars1: 53
      //DEBUG: e.Pattern2: 55
      //DEBUG: e.Vars2: 57
      //DEBUG: e.Commands: 59

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@7/4 (/7 e.Pattern1/51 )/8 (/11 e.Vars1/53 )/12 (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </23 HalfReuse: & Decompile-Pattern-NoHole/24 AsIs: s.Level2/33 AsIs: s.Top2/50 AsIs: (/48 AsIs: e.Pattern2/55 AsIs: )/49 AsIs: (/44 AsIs: e.Vars2/57 AsIs: )/45 } Tile{ AsIs: e.Commands/59 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[23]);
      refalrts::reinit_name(context[24], functions[efunc_Decompilem_Patternm_NoHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[44], context[45] );
      refalrts::link_brackets( context[48], context[49] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[23], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.Pattern/25 )/8 (/11 e.Vars/27 )/12 (/21 s.Offset/23 # LABEL/24 e.BlockName/29 )/22 e.Commands/31 >/1
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[17];
    context[32] = context[18];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[24] ) )
      continue;
    // closed e.Pattern as range 25
    // closed e.Vars as range 27
    // closed e.BlockName as range 29
    // closed e.Commands as range 31
    //DEBUG: s.Offset: 23
    //DEBUG: e.Pattern: 25
    //DEBUG: e.Vars: 27
    //DEBUG: e.BlockName: 29
    //DEBUG: e.Commands: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/21 s.Offset/23 # LABEL/24 e.BlockName/29 )/22 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-NoHole@7/4 AsIs: (/7 AsIs: e.Pattern/25 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/27 AsIs: )/12 } Tile{ AsIs: e.Commands/31 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, context[12], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@7/4 (/7 )/8 (/11 )/12 >/1
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-NoHole@7/4 (/7 )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 HalfReuse: # EndOfFunction/12 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[12], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[11];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.Pattern/13 )/8 (/11 e.Vars/15 )/12 e.Commands/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Pattern as range 13
    // closed e.Vars as range 15
    // closed e.Commands as range 17
    //DEBUG: e.Pattern: 13
    //DEBUG: e.Vars: 15
    //DEBUG: e.Commands: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 }"=B "/19 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern/13 AsIs: )/8 AsIs: (/11 AsIs: e.Vars/15 AsIs: )/12 } )/21 Tile{ AsIs: e.Commands/17 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[19], context[20], "=B ", 3);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_char(context[4], '*');
    refalrts::link_brackets( context[1], context[21] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-NoHole@7/4 (/7 e.dyn0/5 )/8 (/11 e.dyn1/9 )/12 e.dyn2/2 >/1
  // closed e.dyn0 as range 5
  // closed e.dyn1 as range 9
  // closed e.dyn2 as range 2
  //DEBUG: e.dyn0: 5
  //DEBUG: e.dyn1: 9
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & Decompile-Pattern-NoHole@0/14 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.dyn0/5 AsIs: )/8 AsIs: (/11 AsIs: e.dyn1/9 AsIs: )/12 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Decompilem_Patternm_NoHole_Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_NoHole_Z7("Decompile-Pattern-NoHole@7", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_NoHole_Z7);


static refalrts::FnResult func_gen_Decompilem_Result_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & Decompile-Result@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Result@5/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new4 as range 12
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Result@5/4 s.new6/5 (/8 e.new12/16 )/9 t.new7/10 (/14 e.new13/18 )/15 (/24 s.new8/26 s.new9/27 e.new10/22 )/25 e.new11/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    context[22] = 0;
    context[23] = 0;
    context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
    if( ! context[24] )
      continue;
    refalrts::bracket_pointers(context[24], context[25]);
    // closed e.new12 as range 16
    // closed e.new13 as range 18
    // closed e.new11 as range 20
    if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
      continue;
    if( ! refalrts::svar_left( context[27], context[22], context[23] ) )
      continue;
    // closed e.new10 as range 22
    do {
      // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/28 )/9 t.MB/10 (/14 e.Result/30 )/15 (/24 s.Offset/26 # NCS/27 e.Word/32 )/25 e.Commands/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_NCS], context[27] ) )
        continue;
      // closed e.Vars0 as range 28
      // closed e.Result as range 30
      // closed e.Word as range 32
      // closed e.Commands as range 34
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 28
      //DEBUG: e.Result: 30
      //DEBUG: e.Word: 32
      //DEBUG: e.Commands: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/28 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/30 HalfReuse: (/15 HalfReuse: # W/24 } Tile{ AsIs: e.Word/32 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/34 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_ident(context[24], identifiers[ident_W]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@5/4 s.new14/5 (/8 e.new21/28 )/9 t.new15/10 (/14 e.new22/30 )/15 (/24 s.new17/26 s.new18/27 s.new19/36 e.new20/32 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      // closed e.new21 as range 28
      // closed e.new22 as range 30
      // closed e.new16 as range 34
      if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
        continue;
      // closed e.new20 as range 32
      do {
        // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # NNS/27 s.Number/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_NNS], context[27] ) )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Number: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # N/24 } Tile{ AsIs: s.Number/36 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/41 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_ident(context[24], identifiers[ident_N]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[15], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::splice_to_freelist_open( vm, context[24], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # NS/27 s.Code/36 s.Char/45 )/25 e.Commands/43 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        context[44] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_NS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 43
        if( ! refalrts::svar_left( context[45], context[41], context[42] ) )
          continue;
        if( ! refalrts::empty_seq( context[41], context[42] ) )
          continue;
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Code: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 43
        //DEBUG: s.Char: 45

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} s.Code/36 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # C/24 } Tile{ AsIs: s.Char/45 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/43 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_ident(context[24], identifiers[ident_C]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[15], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[45] );
        refalrts::splice_to_freelist_open( vm, context[24], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TEXT/27 s.Count/36 e.Chars/41 )/25 e.Commands/43 >/1
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      context[44] = context[35];
      if( ! refalrts::ident_term( identifiers[ident_TEXT], context[27] ) )
        continue;
      // closed e.Vars0 as range 37
      // closed e.Result as range 39
      // closed e.Chars as range 41
      // closed e.Commands as range 43
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: s.Count: 36
      //DEBUG: e.Vars0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Chars: 41
      //DEBUG: e.Commands: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} s.Count/36 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # C/24 } Tile{ AsIs: e.Chars/41 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/43 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_ident(context[24], identifiers[ident_C]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@5/4 s.new14/5 (/8 e.new19/28 )/9 t.new15/10 (/14 e.new20/30 )/15 (/24 s.new17/26 s.new18/27 )/25 e.new16/32 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.new19 as range 28
      // closed e.new20 as range 30
      // closed e.new16 as range 32
      do {
        // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/34 )/9 t.MB/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # BL/27 )/25 e.Commands/38 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_BL], context[27] ) )
          continue;
        // closed e.Vars0 as range 34
        // closed e.Result as range 36
        // closed e.Commands as range 38
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 34
        //DEBUG: e.Result: 36
        //DEBUG: e.Commands: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 } Tile{ AsIs: (/24 } Tile{ AsIs: t.MB/10 } Tile{ AsIs: e.Result/36 } Tile{ AsIs: )/15 } Tile{ HalfReuse: (/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[27], context[25] );
        refalrts::link_brackets( context[24], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[27];
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/34 )/9 (/10 t.MB/42 e.Result/40 )/11 (/14 e.Nested/36 )/15 (/24 s.Offset/26 # BR/27 )/25 e.Commands/38 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = 0;
        context[41] = 0;
        if( ! refalrts::brackets_term( context[40], context[41], context[10] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_BR], context[27] ) )
          continue;
        // closed e.Vars0 as range 34
        // closed e.Nested as range 36
        // closed e.Commands as range 38
        context[43] = refalrts::tvar_left( context[42], context[40], context[41] );
        if( ! context[43] )
          continue;
        // closed e.Result as range 40
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 34
        //DEBUG: e.Nested: 36
        //DEBUG: e.Commands: 38
        //DEBUG: t.MB: 42
        //DEBUG: e.Result: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/10 {REMOVED TILE} {REMOVED TILE} )/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 } Tile{ AsIs: t.MB/42 } Tile{ AsIs: (/14 } Tile{ AsIs: e.Result/40 } Tile{ AsIs: (/24 } Tile{ HalfReuse: '*'/15 } Tile{ AsIs: e.Nested/36 } Tile{ HalfReuse: )/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
        refalrts::reinit_char(context[15], '*');
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[24], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[27];
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/34 )/9 t.MB/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # BLR/27 )/25 e.Commands/38 >/1
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_BLR], context[27] ) )
        continue;
      // closed e.Vars0 as range 34
      // closed e.Result as range 36
      // closed e.Commands as range 38
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 34
      //DEBUG: e.Result: 36
      //DEBUG: e.Commands: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/36 HalfReuse: (/15 HalfReuse: '*'/24 } Tile{ HalfReuse: )/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_char(context[24], '*');
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@5/4 s.new14/5 (/8 e.new20/28 )/9 t.new15/10 (/14 e.new21/30 (/38 '*'/40 e.new22/36 )/39 )/15 (/24 s.new17/26 s.new18/27 e.new19/32 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_right( context[36], context[37], context[30], context[31] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::char_left( '*', context[36], context[37] );
      if( ! context[40] )
        continue;
      // closed e.new20 as range 28
      // closed e.new21 as range 30
      // closed e.new22 as range 36
      // closed e.new19 as range 32
      // closed e.new16 as range 34
      do {
        // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/41 )/9 t.MB/10 (/14 e.Result/43 (/38 '*'/40 e.Inner/45 )/39 )/15 (/24 s.Offset/26 # ACT1/27 e.Name/47 )/25 e.Commands/49 >/1
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[32];
        context[48] = context[33];
        context[49] = context[34];
        context[50] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_ACT1], context[27] ) )
          continue;
        // closed e.Vars0 as range 41
        // closed e.Result as range 43
        // closed e.Inner as range 45
        // closed e.Name as range 47
        // closed e.Commands as range 49
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 41
        //DEBUG: e.Result: 43
        //DEBUG: e.Inner: 45
        //DEBUG: e.Name: 47
        //DEBUG: e.Commands: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 # ACT1/27 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/41 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/43 AsIs: (/38 Reuse: '!'/40 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Name/47 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Inner/45 } Tile{ AsIs: )/39 } Tile{ AsIs: )/25 AsIs: e.Commands/49 AsIs: >/1 ]] }
        refalrts::update_char(context[40], '!');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[24], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::splice_to_freelist_open( vm, context[40], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/41 )/9 t.MB/10 (/14 e.Result/43 (/38 '*'/40 e.Inner/45 )/39 )/15 (/24 s.Offset/26 # ACT_EXTRN/27 e.Name/47 )/25 e.Commands/49 >/1
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[36];
      context[46] = context[37];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[34];
      context[50] = context[35];
      if( ! refalrts::ident_term( identifiers[ident_ACTu_EXTRN], context[27] ) )
        continue;
      // closed e.Vars0 as range 41
      // closed e.Result as range 43
      // closed e.Inner as range 45
      // closed e.Name as range 47
      // closed e.Commands as range 49
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 41
      //DEBUG: e.Result: 43
      //DEBUG: e.Inner: 45
      //DEBUG: e.Name: 47
      //DEBUG: e.Commands: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 # ACT_EXTRN/27 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/41 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/43 AsIs: (/38 Reuse: '!'/40 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Name/47 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Inner/45 } Tile{ AsIs: )/39 } Tile{ AsIs: )/25 AsIs: e.Commands/49 AsIs: >/1 ]] }
      refalrts::update_char(context[40], '!');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[24], context[15] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::splice_to_freelist_open( vm, context[40], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@5/4 s.new14/5 (/8 e.new20/28 )/9 t.new15/10 (/14 e.new21/30 )/15 (/24 s.new17/26 s.new18/27 s.new19/36 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      // closed e.new20 as range 28
      // closed e.new21 as range 30
      // closed e.new16 as range 34
      if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
        continue;
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      do {
        // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TPLS/27 s.Copy/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TPLS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Copy: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.Copy
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z5S10C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@5$10?1/47 e.Vars-B/48 (/54 # s/56 s.Id/59 '='/58 s.Copy/57 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            context[56] = refalrts::ident_left( identifiers[ident_s], context[52], context[53] );
            if( ! context[56] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[36], context[52], context[53] ) )
              continue;
            context[58] = refalrts::char_right( '=', context[52], context[53] );
            if( ! context[58] )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.Copy: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Id: 59

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/26 # TPLS/27 s.Copy/36 {REMOVED TILE} & Decompile-Result@5$10?1/47 e.Vars-B/48 (/54 # s/56 {REMOVED TILE} e.Vars-E/50 >/44 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # s/24 } Tile{ AsIs: s.Id/59 AsIs: '='/58 AsIs: s.Copy/57 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[15]);
            refalrts::reinit_ident(context[24], identifiers[ident_s]);
            refalrts::reinit_close_call(context[43]);
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[14], context[25] );
            refalrts::link_brackets( context[15], context[55] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[43] );
            res = refalrts::splice_evar( res, context[59], context[55] );
            refalrts::splice_to_freelist_open( vm, context[24], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TPLE/27 s.CopyR/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TPLE], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.CopyR: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.CopyR
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z5S11C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@5$11?1/47 e.Vars-B/48 (/54 s.Type/57 s.IdL/58 s.IdR/59 '='/60 s.CopyL/61 s.CopyR/56 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[36], context[52], context[53] ) )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            context[60] = refalrts::char_left( '=', context[52], context[53] );
            if( ! context[60] )
              continue;
            if( ! refalrts::svar_left( context[61], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.CopyR: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Type: 57
            //DEBUG: s.IdL: 58
            //DEBUG: s.IdR: 59
            //DEBUG: s.CopyL: 61
            //5: s.X
            //10: t.MB
            //26: s.Offset
            //36: s.CopyR
            //37: e.Vars0
            //39: e.Result
            //41: e.Commands
            //48: e.Vars-B
            //50: e.Vars-E
            //56: s.CopyR
            //57: s.Type
            //58: s.IdL
            //59: s.IdR
            //61: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[62]);
            refalrts::alloc_name(vm, context[64], functions[efunc_gen_Decompilem_Result_Z5S11C2]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[63]);
            refalrts::push_stack( vm, context[63] );
            refalrts::push_stack( vm, context[62] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[62] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </62 & Decompile-Result@5$11?2/66 e.B/67 s.Type/71 e.E/69 >/63
              context[64] = 0;
              context[65] = 0;
              context[66] = refalrts::call_left( context[64], context[65], context[62], context[63] );
              context[67] = 0;
              context[68] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[69] = context[64];
                context[70] = context[65];
                if( ! refalrts::repeated_stvar_left( vm, context[71], context[57], context[69], context[70] ) )
                  continue;
                // closed e.E as range 69
                //DEBUG: t.MB: 10
                //DEBUG: s.X: 5
                //DEBUG: s.Offset: 26
                //DEBUG: s.CopyR: 36
                //DEBUG: e.Vars0: 37
                //DEBUG: e.Result: 39
                //DEBUG: e.Commands: 41
                //DEBUG: e.Vars-B: 48
                //DEBUG: e.Vars-E: 50
                //DEBUG: s.Type: 57
                //DEBUG: s.IdL: 58
                //DEBUG: s.IdR: 59
                //DEBUG: s.CopyL: 61
                //DEBUG: e.B: 67
                //DEBUG: e.E: 69

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/26 # TPLE/27 s.CopyR/36 {REMOVED TILE} & Decompile-Result@5$11?1/47 e.Vars-B/48 (/54 s.Type/57 {REMOVED TILE} e.Vars-E/50 >/44 </62 & Decompile-Result@5$11?2/66 e.B/67 s.Type/71 e.E/69 >/63 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: s.Type71 /24 } Tile{ AsIs: s.IdL/58 AsIs: s.IdR/59 AsIs: '='/60 AsIs: s.CopyL/61 AsIs: s.CopyR/56 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[15]);
                refalrts::reinit_svar( context[24], context[71] );
                refalrts::reinit_close_call(context[43]);
                refalrts::push_stack( vm, context[43] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[14], context[25] );
                refalrts::link_brackets( context[15], context[55] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[25], context[43] );
                res = refalrts::splice_evar( res, context[58], context[55] );
                refalrts::splice_to_freelist_open( vm, context[24], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[67], context[68], context[64], context[65] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[62], context[63]);
            continue;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # MULS/27 s.Copy/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_MULS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Copy: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.Copy
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z5S12C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@5$12?1/47 e.Vars-B/48 (/54 # s/56 s.Id/59 '='/58 s.Copy/57 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            context[56] = refalrts::ident_left( identifiers[ident_s], context[52], context[53] );
            if( ! context[56] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[36], context[52], context[53] ) )
              continue;
            context[58] = refalrts::char_right( '=', context[52], context[53] );
            if( ! context[58] )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.Copy: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Id: 59

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/26 # MULS/27 s.Copy/36 {REMOVED TILE} & Decompile-Result@5$12?1/47 e.Vars-B/48 (/54 # s/56 {REMOVED TILE} e.Vars-E/50 >/44 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # s/24 } Tile{ AsIs: s.Id/59 AsIs: '='/58 AsIs: s.Copy/57 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[15]);
            refalrts::reinit_ident(context[24], identifiers[ident_s]);
            refalrts::reinit_close_call(context[43]);
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[14], context[25] );
            refalrts::link_brackets( context[15], context[55] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[43] );
            res = refalrts::splice_evar( res, context[59], context[55] );
            refalrts::splice_to_freelist_open( vm, context[24], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # MULE/27 s.CopyR/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_MULE], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.CopyR: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.CopyR
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z5S13C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@5$13?1/47 e.Vars-B/48 (/54 s.Type/57 s.IdL/58 s.IdR/59 '='/60 s.CopyL/61 s.CopyR/56 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[36], context[52], context[53] ) )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            context[60] = refalrts::char_left( '=', context[52], context[53] );
            if( ! context[60] )
              continue;
            if( ! refalrts::svar_left( context[61], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.CopyR: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Type: 57
            //DEBUG: s.IdL: 58
            //DEBUG: s.IdR: 59
            //DEBUG: s.CopyL: 61
            //5: s.X
            //10: t.MB
            //26: s.Offset
            //36: s.CopyR
            //37: e.Vars0
            //39: e.Result
            //41: e.Commands
            //48: e.Vars-B
            //50: e.Vars-E
            //56: s.CopyR
            //57: s.Type
            //58: s.IdL
            //59: s.IdR
            //61: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[62]);
            refalrts::alloc_name(vm, context[64], functions[efunc_gen_Decompilem_Result_Z5S13C2]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[63]);
            refalrts::push_stack( vm, context[63] );
            refalrts::push_stack( vm, context[62] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[62] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </62 & Decompile-Result@5$13?2/66 e.B/67 s.Type/71 e.E/69 >/63
              context[64] = 0;
              context[65] = 0;
              context[66] = refalrts::call_left( context[64], context[65], context[62], context[63] );
              context[67] = 0;
              context[68] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[69] = context[64];
                context[70] = context[65];
                if( ! refalrts::repeated_stvar_left( vm, context[71], context[57], context[69], context[70] ) )
                  continue;
                // closed e.E as range 69
                //DEBUG: t.MB: 10
                //DEBUG: s.X: 5
                //DEBUG: s.Offset: 26
                //DEBUG: s.CopyR: 36
                //DEBUG: e.Vars0: 37
                //DEBUG: e.Result: 39
                //DEBUG: e.Commands: 41
                //DEBUG: e.Vars-B: 48
                //DEBUG: e.Vars-E: 50
                //DEBUG: s.Type: 57
                //DEBUG: s.IdL: 58
                //DEBUG: s.IdR: 59
                //DEBUG: s.CopyL: 61
                //DEBUG: e.B: 67
                //DEBUG: e.E: 69

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/26 # MULE/27 s.CopyR/36 {REMOVED TILE} & Decompile-Result@5$13?1/47 e.Vars-B/48 (/54 s.Type/57 {REMOVED TILE} e.Vars-E/50 >/44 </62 & Decompile-Result@5$13?2/66 e.B/67 s.Type/71 e.E/69 >/63 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@5/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: s.Type71 /24 } Tile{ AsIs: s.IdL/58 AsIs: s.IdR/59 AsIs: '='/60 AsIs: s.CopyL/61 AsIs: s.CopyR/56 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[15]);
                refalrts::reinit_svar( context[24], context[71] );
                refalrts::reinit_close_call(context[43]);
                refalrts::push_stack( vm, context[43] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[14], context[25] );
                refalrts::link_brackets( context[15], context[55] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[25], context[43] );
                res = refalrts::splice_evar( res, context[58], context[55] );
                refalrts::splice_to_freelist_open( vm, context[24], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[67], context[68], context[64], context[65] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[62], context[63]);
            continue;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/37 )/9 '$'/10 (/14 e.Result/39 )/15 (/24 s.Offset1/26 # ECOND/27 s.Offset3/36 )/25 (/45 s.Offset2/53 # LABEL/54 e.Name/43 )/46 (/49 s.Offset3/52 # POPVF/51 )/50 e.Commands/41 >/1
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[34];
      context[42] = context[35];
      if( ! refalrts::char_term( '$', context[10] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_ECOND], context[27] ) )
        continue;
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_left( context[43], context[44], context[41], context[42] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[41], context[42] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = refalrts::ident_right( identifiers[ident_POPVF], context[47], context[48] );
      if( ! context[51] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[52], context[36], context[47], context[48] ) )
        continue;
      if( ! refalrts::empty_seq( context[47], context[48] ) )
        continue;
      // closed e.Vars0 as range 37
      // closed e.Result as range 39
      // closed e.Commands as range 41
      if( ! refalrts::svar_left( context[53], context[43], context[44] ) )
        continue;
      context[54] = refalrts::ident_left( identifiers[ident_LABEL], context[43], context[44] );
      if( ! context[54] )
        continue;
      // closed e.Name as range 43
      //DEBUG: s.X: 5
      //DEBUG: s.Offset1: 26
      //DEBUG: s.Offset3: 36
      //DEBUG: e.Vars0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Commands: 41
      //DEBUG: s.Offset2: 53
      //DEBUG: e.Name: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1/26 {REMOVED TILE} s.Offset3/36 {REMOVED TILE} s.Offset2/53 {REMOVED TILE} s.Offset3/52 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/39 AsIs: )/15 AsIs: (/24 } Tile{ Reuse: # EndCondition/54 AsIs: e.Name/43 AsIs: )/46 HalfReuse: </49 } Tile{ Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 8/8 } Tile{ HalfReuse: (/27 } Tile{ HalfReuse: 6/0 } Tile{ AsIs: )/25 AsIs: (/45 } 7/55 Tile{ AsIs: )/9 } Tile{ HalfReuse: (/51 } Tile{ AsIs: e.Vars0/37 } Tile{ AsIs: )/50 AsIs: e.Commands/41 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[55], 7UL);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[14], identifiers[ident_Result]);
      refalrts::update_ident(context[54], identifiers[ident_EndCondition]);
      refalrts::reinit_open_call(context[49]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[8], 8UL);
      refalrts::reinit_open_bracket(context[27]);
      refalrts::reinit_number(context[0], 6UL);
      refalrts::reinit_open_bracket(context[51]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[51], context[50] );
      refalrts::link_brackets( context[45], context[9] );
      refalrts::link_brackets( context[27], context[25] );
      refalrts::link_brackets( context[24], context[46] );
      refalrts::link_brackets( context[10], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[50];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[25], context[45] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[4], context[8] );
      res = refalrts::splice_evar( res, context[54], context[49] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@5/4 s.new14/5 (/8 e.new17/28 )/9 '$'/10 (/14 e.new18/30 )/15 (/24 s.new16/26 # OUTEST/27 )/25 e.new15/32 >/1
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[21];
    if( ! refalrts::char_term( '$', context[10] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_OUTEST], context[27] ) )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    // closed e.new17 as range 28
    // closed e.new18 as range 30
    // closed e.new15 as range 32
    do {
      // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/34 )/9 '$'/10 (/14 e.Result/36 )/15 (/24 s.Offset1/26 # OUTEST/27 )/25 (/42 s.Offset2/45 # OUTEST/44 )/43 e.Commands/38 >/1
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_right( identifiers[ident_OUTEST], context[40], context[41] );
      if( ! context[44] )
        continue;
      // closed e.Vars0 as range 34
      // closed e.Result as range 36
      // closed e.Commands as range 38
      if( ! refalrts::svar_left( context[45], context[40], context[41] ) )
        continue;
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      //DEBUG: s.X: 5
      //DEBUG: s.Offset1: 26
      //DEBUG: e.Vars0: 34
      //DEBUG: e.Result: 36
      //DEBUG: e.Commands: 38
      //DEBUG: s.Offset2: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/34 {REMOVED TILE} {REMOVED TILE} s.Offset1/26 {REMOVED TILE} s.Offset2/45 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/36 AsIs: )/15 AsIs: (/24 } Tile{ Reuse: # NextSentence/27 AsIs: )/25 AsIs: (/42 } # NextSentence/46 Tile{ AsIs: )/9 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@1/4 AsIs: s.X/5 AsIs: (/8 } )/47 Tile{ HalfReuse: (/44 AsIs: )/43 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[46], identifiers[ident_NextSentence]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[14], identifiers[ident_Result]);
      refalrts::update_ident(context[27], identifiers[ident_NextSentence]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z1]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[44], context[43] );
      refalrts::link_brackets( context[8], context[47] );
      refalrts::link_brackets( context[42], context[9] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[10], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[44];
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[27], context[42] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/34 )/9 '$'/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # OUTEST/27 )/25 e.Commands/38 >/1
    context[34] = context[28];
    context[35] = context[29];
    context[36] = context[30];
    context[37] = context[31];
    context[38] = context[32];
    context[39] = context[33];
    // closed e.Vars0 as range 34
    // closed e.Result as range 36
    // closed e.Commands as range 38
    //DEBUG: s.X: 5
    //DEBUG: s.Offset: 26
    //DEBUG: e.Vars0: 34
    //DEBUG: e.Result: 36
    //DEBUG: e.Commands: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/34 {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/36 AsIs: )/15 AsIs: (/24 } # NextSentence/40 Tile{ AsIs: )/9 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@1/4 AsIs: s.X/5 AsIs: (/8 } )/41 Tile{ HalfReuse: (/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[40], identifiers[ident_NextSentence]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::reinit_open_bracket(context[10]);
    refalrts::reinit_ident(context[14], identifiers[ident_Result]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z1]);
    refalrts::reinit_open_bracket(context[27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[27], context[25] );
    refalrts::link_brackets( context[8], context[41] );
    refalrts::link_brackets( context[24], context[9] );
    refalrts::link_brackets( context[10], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[10], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/16 )/9 t.MB/10 (/14 e.Result/18 )/15 e.Commands/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.Vars0 as range 16
    // closed e.Result as range 18
    // closed e.Commands as range 20
    //DEBUG: t.MB: 10
    //DEBUG: s.X: 5
    //DEBUG: e.Vars0: 16
    //DEBUG: e.Result: 18
    //DEBUG: e.Commands: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '='/4 } 'C'/22 Tile{ HalfReuse: ' '/1 } Tile{ AsIs: s.X/5 } 5/23 Tile{ AsIs: (/8 AsIs: e.Vars0/16 AsIs: )/9 } Tile{ AsIs: (/14 } Tile{ AsIs: t.MB/10 } Tile{ AsIs: e.Result/18 } Tile{ AsIs: )/15 } )/24 Tile{ AsIs: e.Commands/20 } Tile{ ]] }
    refalrts::alloc_char(vm, context[22], 'C');
    refalrts::alloc_number(vm, context[23], 5UL);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_char(context[4], '=');
    refalrts::reinit_char(context[1], ' ');
    refalrts::link_brackets( context[0], context[24] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Result@5/4 s.X/5 (/8 e.Vars0/6 )/9 t.dyn0/10 (/14 e.dyn1/12 )/15 e.dyn2/2 >/1
  // closed e.Vars0 as range 6
  // closed e.dyn1 as range 12
  // closed e.dyn2 as range 2
  //DEBUG: t.dyn0: 10
  //DEBUG: s.X: 5
  //DEBUG: e.Vars0: 6
  //DEBUG: e.dyn1: 12
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Result@0/4 AsIs: s.X/5 HalfReuse: 5/8 } Tile{ AsIs: (/14 } Tile{ AsIs: e.Vars0/6 } )/16 Tile{ HalfReuse: (/9 AsIs: t.dyn0/10 } Tile{ AsIs: e.dyn1/12 } Tile{ AsIs: )/15 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Result_Z0]);
  refalrts::reinit_number(context[8], 5UL);
  refalrts::reinit_open_bracket(context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[15] );
  refalrts::link_brackets( context[14], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Result_Z5("Decompile-Result@5", COOKIE1_, COOKIE2_, func_gen_Decompilem_Result_Z5);


static refalrts::FnResult func_gen_Decompilem_Result_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & Decompile-Result@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Result@6/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new4 as range 12
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Result@6/4 s.new6/5 (/8 e.new12/16 )/9 t.new7/10 (/14 e.new13/18 )/15 (/24 s.new8/26 s.new9/27 e.new10/22 )/25 e.new11/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    context[22] = 0;
    context[23] = 0;
    context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
    if( ! context[24] )
      continue;
    refalrts::bracket_pointers(context[24], context[25]);
    // closed e.new12 as range 16
    // closed e.new13 as range 18
    // closed e.new11 as range 20
    if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
      continue;
    if( ! refalrts::svar_left( context[27], context[22], context[23] ) )
      continue;
    // closed e.new10 as range 22
    do {
      // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/28 )/9 t.MB/10 (/14 e.Result/30 )/15 (/24 s.Offset/26 # NCS/27 e.Word/32 )/25 e.Commands/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_NCS], context[27] ) )
        continue;
      // closed e.Vars0 as range 28
      // closed e.Result as range 30
      // closed e.Word as range 32
      // closed e.Commands as range 34
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 28
      //DEBUG: e.Result: 30
      //DEBUG: e.Word: 32
      //DEBUG: e.Commands: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/28 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/30 HalfReuse: (/15 HalfReuse: # W/24 } Tile{ AsIs: e.Word/32 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/34 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_ident(context[24], identifiers[ident_W]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@6/4 s.new14/5 (/8 e.new21/28 )/9 t.new15/10 (/14 e.new22/30 )/15 (/24 s.new17/26 s.new18/27 s.new19/36 e.new20/32 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      // closed e.new21 as range 28
      // closed e.new22 as range 30
      // closed e.new16 as range 34
      if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
        continue;
      // closed e.new20 as range 32
      do {
        // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # NNS/27 s.Number/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_NNS], context[27] ) )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Number: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # N/24 } Tile{ AsIs: s.Number/36 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/41 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_ident(context[24], identifiers[ident_N]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[15], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::splice_to_freelist_open( vm, context[24], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # NS/27 s.Code/36 s.Char/45 )/25 e.Commands/43 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        context[44] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_NS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 43
        if( ! refalrts::svar_left( context[45], context[41], context[42] ) )
          continue;
        if( ! refalrts::empty_seq( context[41], context[42] ) )
          continue;
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Code: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 43
        //DEBUG: s.Char: 45

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} s.Code/36 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # C/24 } Tile{ AsIs: s.Char/45 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/43 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[15]);
        refalrts::reinit_ident(context[24], identifiers[ident_C]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[15], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[45] );
        refalrts::splice_to_freelist_open( vm, context[24], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TEXT/27 s.Count/36 e.Chars/41 )/25 e.Commands/43 >/1
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      context[44] = context[35];
      if( ! refalrts::ident_term( identifiers[ident_TEXT], context[27] ) )
        continue;
      // closed e.Vars0 as range 37
      // closed e.Result as range 39
      // closed e.Chars as range 41
      // closed e.Commands as range 43
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: s.Count: 36
      //DEBUG: e.Vars0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Chars: 41
      //DEBUG: e.Commands: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE} s.Count/36 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # C/24 } Tile{ AsIs: e.Chars/41 } Tile{ HalfReuse: )/27 } Tile{ AsIs: )/25 AsIs: e.Commands/43 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_ident(context[24], identifiers[ident_C]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@6/4 s.new14/5 (/8 e.new19/28 )/9 t.new15/10 (/14 e.new20/30 )/15 (/24 s.new17/26 s.new18/27 )/25 e.new16/32 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.new19 as range 28
      // closed e.new20 as range 30
      // closed e.new16 as range 32
      do {
        // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/34 )/9 t.MB/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # BL/27 )/25 e.Commands/38 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_BL], context[27] ) )
          continue;
        // closed e.Vars0 as range 34
        // closed e.Result as range 36
        // closed e.Commands as range 38
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 34
        //DEBUG: e.Result: 36
        //DEBUG: e.Commands: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 } Tile{ AsIs: (/24 } Tile{ AsIs: t.MB/10 } Tile{ AsIs: e.Result/36 } Tile{ AsIs: )/15 } Tile{ HalfReuse: (/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[27], context[25] );
        refalrts::link_brackets( context[24], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[27];
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/34 )/9 (/10 t.MB/42 e.Result/40 )/11 (/14 e.Nested/36 )/15 (/24 s.Offset/26 # BR/27 )/25 e.Commands/38 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = 0;
        context[41] = 0;
        if( ! refalrts::brackets_term( context[40], context[41], context[10] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_BR], context[27] ) )
          continue;
        // closed e.Vars0 as range 34
        // closed e.Nested as range 36
        // closed e.Commands as range 38
        context[43] = refalrts::tvar_left( context[42], context[40], context[41] );
        if( ! context[43] )
          continue;
        // closed e.Result as range 40
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 34
        //DEBUG: e.Nested: 36
        //DEBUG: e.Commands: 38
        //DEBUG: t.MB: 42
        //DEBUG: e.Result: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/10 {REMOVED TILE} {REMOVED TILE} )/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 } Tile{ AsIs: t.MB/42 } Tile{ AsIs: (/14 } Tile{ AsIs: e.Result/40 } Tile{ AsIs: (/24 } Tile{ HalfReuse: '*'/15 } Tile{ AsIs: e.Nested/36 } Tile{ HalfReuse: )/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
        refalrts::reinit_char(context[15], '*');
        refalrts::reinit_close_bracket(context[27]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[24], context[27] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[27];
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/34 )/9 t.MB/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # BLR/27 )/25 e.Commands/38 >/1
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_BLR], context[27] ) )
        continue;
      // closed e.Vars0 as range 34
      // closed e.Result as range 36
      // closed e.Commands as range 38
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 34
      //DEBUG: e.Result: 36
      //DEBUG: e.Commands: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/26 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/34 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/36 HalfReuse: (/15 HalfReuse: '*'/24 } Tile{ HalfReuse: )/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[15]);
      refalrts::reinit_char(context[24], '*');
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[15], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@6/4 s.new14/5 (/8 e.new20/28 )/9 t.new15/10 (/14 e.new21/30 (/38 '*'/40 e.new22/36 )/39 )/15 (/24 s.new17/26 s.new18/27 e.new19/32 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_right( context[36], context[37], context[30], context[31] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::char_left( '*', context[36], context[37] );
      if( ! context[40] )
        continue;
      // closed e.new20 as range 28
      // closed e.new21 as range 30
      // closed e.new22 as range 36
      // closed e.new19 as range 32
      // closed e.new16 as range 34
      do {
        // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/41 )/9 t.MB/10 (/14 e.Result/43 (/38 '*'/40 e.Inner/45 )/39 )/15 (/24 s.Offset/26 # ACT1/27 e.Name/47 )/25 e.Commands/49 >/1
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[31];
        context[45] = context[36];
        context[46] = context[37];
        context[47] = context[32];
        context[48] = context[33];
        context[49] = context[34];
        context[50] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_ACT1], context[27] ) )
          continue;
        // closed e.Vars0 as range 41
        // closed e.Result as range 43
        // closed e.Inner as range 45
        // closed e.Name as range 47
        // closed e.Commands as range 49
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: e.Vars0: 41
        //DEBUG: e.Result: 43
        //DEBUG: e.Inner: 45
        //DEBUG: e.Name: 47
        //DEBUG: e.Commands: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 # ACT1/27 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/41 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/43 AsIs: (/38 Reuse: '!'/40 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Name/47 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Inner/45 } Tile{ AsIs: )/39 } Tile{ AsIs: )/25 AsIs: e.Commands/49 AsIs: >/1 ]] }
        refalrts::update_char(context[40], '!');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[25] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[24], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::splice_to_freelist_open( vm, context[40], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/41 )/9 t.MB/10 (/14 e.Result/43 (/38 '*'/40 e.Inner/45 )/39 )/15 (/24 s.Offset/26 # ACT_EXTRN/27 e.Name/47 )/25 e.Commands/49 >/1
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[36];
      context[46] = context[37];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[34];
      context[50] = context[35];
      if( ! refalrts::ident_term( identifiers[ident_ACTu_EXTRN], context[27] ) )
        continue;
      // closed e.Vars0 as range 41
      // closed e.Result as range 43
      // closed e.Inner as range 45
      // closed e.Name as range 47
      // closed e.Commands as range 49
      //DEBUG: t.MB: 10
      //DEBUG: s.X: 5
      //DEBUG: s.Offset: 26
      //DEBUG: e.Vars0: 41
      //DEBUG: e.Result: 43
      //DEBUG: e.Inner: 45
      //DEBUG: e.Name: 47
      //DEBUG: e.Commands: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/26 # ACT_EXTRN/27 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/41 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/43 AsIs: (/38 Reuse: '!'/40 } Tile{ AsIs: (/24 } Tile{ AsIs: e.Name/47 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Inner/45 } Tile{ AsIs: )/39 } Tile{ AsIs: )/25 AsIs: e.Commands/49 AsIs: >/1 ]] }
      refalrts::update_char(context[40], '!');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[25] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[24], context[15] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::splice_to_freelist_open( vm, context[40], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@6/4 s.new14/5 (/8 e.new20/28 )/9 t.new15/10 (/14 e.new21/30 )/15 (/24 s.new17/26 s.new18/27 s.new19/36 )/25 e.new16/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[20];
      context[35] = context[21];
      // closed e.new20 as range 28
      // closed e.new21 as range 30
      // closed e.new16 as range 34
      if( ! refalrts::svar_left( context[36], context[32], context[33] ) )
        continue;
      if( ! refalrts::empty_seq( context[32], context[33] ) )
        continue;
      do {
        // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TPLS/27 s.Copy/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TPLS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Copy: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.Copy
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z6S10C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@6$10?1/47 e.Vars-B/48 (/54 # s/56 s.Id/59 '='/58 s.Copy/57 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            context[56] = refalrts::ident_left( identifiers[ident_s], context[52], context[53] );
            if( ! context[56] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[36], context[52], context[53] ) )
              continue;
            context[58] = refalrts::char_right( '=', context[52], context[53] );
            if( ! context[58] )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.Copy: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Id: 59

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/26 # TPLS/27 s.Copy/36 {REMOVED TILE} & Decompile-Result@6$10?1/47 e.Vars-B/48 (/54 # s/56 {REMOVED TILE} e.Vars-E/50 >/44 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # s/24 } Tile{ AsIs: s.Id/59 AsIs: '='/58 AsIs: s.Copy/57 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[15]);
            refalrts::reinit_ident(context[24], identifiers[ident_s]);
            refalrts::reinit_close_call(context[43]);
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[14], context[25] );
            refalrts::link_brackets( context[15], context[55] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[43] );
            res = refalrts::splice_evar( res, context[59], context[55] );
            refalrts::splice_to_freelist_open( vm, context[24], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # TPLE/27 s.CopyR/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TPLE], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.CopyR: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.CopyR
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z6S11C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@6$11?1/47 e.Vars-B/48 (/54 s.Type/57 s.IdL/58 s.IdR/59 '='/60 s.CopyL/61 s.CopyR/56 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[36], context[52], context[53] ) )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            context[60] = refalrts::char_left( '=', context[52], context[53] );
            if( ! context[60] )
              continue;
            if( ! refalrts::svar_left( context[61], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.CopyR: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Type: 57
            //DEBUG: s.IdL: 58
            //DEBUG: s.IdR: 59
            //DEBUG: s.CopyL: 61
            //5: s.X
            //10: t.MB
            //26: s.Offset
            //36: s.CopyR
            //37: e.Vars0
            //39: e.Result
            //41: e.Commands
            //48: e.Vars-B
            //50: e.Vars-E
            //56: s.CopyR
            //57: s.Type
            //58: s.IdL
            //59: s.IdR
            //61: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[62]);
            refalrts::alloc_name(vm, context[64], functions[efunc_gen_Decompilem_Result_Z6S11C2]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[63]);
            refalrts::push_stack( vm, context[63] );
            refalrts::push_stack( vm, context[62] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[62] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </62 & Decompile-Result@6$11?2/66 e.B/67 s.Type/71 e.E/69 >/63
              context[64] = 0;
              context[65] = 0;
              context[66] = refalrts::call_left( context[64], context[65], context[62], context[63] );
              context[67] = 0;
              context[68] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[69] = context[64];
                context[70] = context[65];
                if( ! refalrts::repeated_stvar_left( vm, context[71], context[57], context[69], context[70] ) )
                  continue;
                // closed e.E as range 69
                //DEBUG: t.MB: 10
                //DEBUG: s.X: 5
                //DEBUG: s.Offset: 26
                //DEBUG: s.CopyR: 36
                //DEBUG: e.Vars0: 37
                //DEBUG: e.Result: 39
                //DEBUG: e.Commands: 41
                //DEBUG: e.Vars-B: 48
                //DEBUG: e.Vars-E: 50
                //DEBUG: s.Type: 57
                //DEBUG: s.IdL: 58
                //DEBUG: s.IdR: 59
                //DEBUG: s.CopyL: 61
                //DEBUG: e.B: 67
                //DEBUG: e.E: 69

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/26 # TPLE/27 s.CopyR/36 {REMOVED TILE} & Decompile-Result@6$11?1/47 e.Vars-B/48 (/54 s.Type/57 {REMOVED TILE} e.Vars-E/50 >/44 </62 & Decompile-Result@6$11?2/66 e.B/67 s.Type/71 e.E/69 >/63 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: s.Type71 /24 } Tile{ AsIs: s.IdL/58 AsIs: s.IdR/59 AsIs: '='/60 AsIs: s.CopyL/61 AsIs: s.CopyR/56 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[15]);
                refalrts::reinit_svar( context[24], context[71] );
                refalrts::reinit_close_call(context[43]);
                refalrts::push_stack( vm, context[43] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[14], context[25] );
                refalrts::link_brackets( context[15], context[55] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[25], context[43] );
                res = refalrts::splice_evar( res, context[58], context[55] );
                refalrts::splice_to_freelist_open( vm, context[24], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[67], context[68], context[64], context[65] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[62], context[63]);
            continue;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # MULS/27 s.Copy/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_MULS], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.Copy: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.Copy
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z6S12C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@6$12?1/47 e.Vars-B/48 (/54 # s/56 s.Id/59 '='/58 s.Copy/57 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            context[56] = refalrts::ident_left( identifiers[ident_s], context[52], context[53] );
            if( ! context[56] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[57], context[36], context[52], context[53] ) )
              continue;
            context[58] = refalrts::char_right( '=', context[52], context[53] );
            if( ! context[58] )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.Copy: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Id: 59

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/26 # MULS/27 s.Copy/36 {REMOVED TILE} & Decompile-Result@6$12?1/47 e.Vars-B/48 (/54 # s/56 {REMOVED TILE} e.Vars-E/50 >/44 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: # s/24 } Tile{ AsIs: s.Id/59 AsIs: '='/58 AsIs: s.Copy/57 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[15]);
            refalrts::reinit_ident(context[24], identifiers[ident_s]);
            refalrts::reinit_close_call(context[43]);
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[14], context[25] );
            refalrts::link_brackets( context[15], context[55] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[43] );
            res = refalrts::splice_evar( res, context[59], context[55] );
            refalrts::splice_to_freelist_open( vm, context[24], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/37 )/9 t.MB/10 (/14 e.Result/39 )/15 (/24 s.Offset/26 # MULE/27 s.CopyR/36 )/25 e.Commands/41 >/1
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_MULE], context[27] ) )
          continue;
        // closed e.Vars0 as range 37
        // closed e.Result as range 39
        // closed e.Commands as range 41
        //DEBUG: t.MB: 10
        //DEBUG: s.X: 5
        //DEBUG: s.Offset: 26
        //DEBUG: s.CopyR: 36
        //DEBUG: e.Vars0: 37
        //DEBUG: e.Result: 39
        //DEBUG: e.Commands: 41
        //5: s.X
        //10: t.MB
        //26: s.Offset
        //36: s.CopyR
        //37: e.Vars0
        //39: e.Result
        //41: e.Commands
        //46: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_Decompilem_Result_Z6S13C1]);
        refalrts::copy_evar(vm, context[46], context[47], context[37], context[38]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </43 & Decompile-Result@6$13?1/47 e.Vars-B/48 (/54 s.Type/57 s.IdL/58 s.IdR/59 '='/60 s.CopyL/61 s.CopyR/56 )/55 e.Vars-E/50 >/44
          context[45] = 0;
          context[46] = 0;
          context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
          context[48] = 0;
          context[49] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[50] = context[45];
            context[51] = context[46];
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
            if( ! context[54] )
              continue;
            refalrts::bracket_pointers(context[54], context[55]);
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[36], context[52], context[53] ) )
              continue;
            // closed e.Vars-E as range 50
            if( ! refalrts::svar_left( context[57], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[52], context[53] ) )
              continue;
            if( ! refalrts::svar_left( context[59], context[52], context[53] ) )
              continue;
            context[60] = refalrts::char_left( '=', context[52], context[53] );
            if( ! context[60] )
              continue;
            if( ! refalrts::svar_left( context[61], context[52], context[53] ) )
              continue;
            if( ! refalrts::empty_seq( context[52], context[53] ) )
              continue;
            //DEBUG: t.MB: 10
            //DEBUG: s.X: 5
            //DEBUG: s.Offset: 26
            //DEBUG: s.CopyR: 36
            //DEBUG: e.Vars0: 37
            //DEBUG: e.Result: 39
            //DEBUG: e.Commands: 41
            //DEBUG: e.Vars-B: 48
            //DEBUG: e.Vars-E: 50
            //DEBUG: s.Type: 57
            //DEBUG: s.IdL: 58
            //DEBUG: s.IdR: 59
            //DEBUG: s.CopyL: 61
            //5: s.X
            //10: t.MB
            //26: s.Offset
            //36: s.CopyR
            //37: e.Vars0
            //39: e.Result
            //41: e.Commands
            //48: e.Vars-B
            //50: e.Vars-E
            //56: s.CopyR
            //57: s.Type
            //58: s.IdL
            //59: s.IdR
            //61: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[62]);
            refalrts::alloc_name(vm, context[64], functions[efunc_gen_Decompilem_Result_Z6S13C2]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[66], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[63]);
            refalrts::push_stack( vm, context[63] );
            refalrts::push_stack( vm, context[62] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[62] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </62 & Decompile-Result@6$13?2/66 e.B/67 s.Type/71 e.E/69 >/63
              context[64] = 0;
              context[65] = 0;
              context[66] = refalrts::call_left( context[64], context[65], context[62], context[63] );
              context[67] = 0;
              context[68] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[69] = context[64];
                context[70] = context[65];
                if( ! refalrts::repeated_stvar_left( vm, context[71], context[57], context[69], context[70] ) )
                  continue;
                // closed e.E as range 69
                //DEBUG: t.MB: 10
                //DEBUG: s.X: 5
                //DEBUG: s.Offset: 26
                //DEBUG: s.CopyR: 36
                //DEBUG: e.Vars0: 37
                //DEBUG: e.Result: 39
                //DEBUG: e.Commands: 41
                //DEBUG: e.Vars-B: 48
                //DEBUG: e.Vars-E: 50
                //DEBUG: s.Type: 57
                //DEBUG: s.IdL: 58
                //DEBUG: s.IdR: 59
                //DEBUG: s.CopyL: 61
                //DEBUG: e.B: 67
                //DEBUG: e.E: 69

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/26 # MULE/27 s.CopyR/36 {REMOVED TILE} & Decompile-Result@6$13?1/47 e.Vars-B/48 (/54 s.Type/57 {REMOVED TILE} e.Vars-E/50 >/44 </62 & Decompile-Result@6$13?2/66 e.B/67 s.Type/71 e.E/69 >/63 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@6/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.Vars0/37 AsIs: )/9 AsIs: t.MB/10 AsIs: (/14 AsIs: e.Result/39 HalfReuse: (/15 HalfReuse: s.Type71 /24 } Tile{ AsIs: s.IdL/58 AsIs: s.IdR/59 AsIs: '='/60 AsIs: s.CopyL/61 AsIs: s.CopyR/56 AsIs: )/55 } Tile{ AsIs: )/25 AsIs: e.Commands/41 HalfReuse: >/43 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[15]);
                refalrts::reinit_svar( context[24], context[71] );
                refalrts::reinit_close_call(context[43]);
                refalrts::push_stack( vm, context[43] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[14], context[25] );
                refalrts::link_brackets( context[15], context[55] );
                refalrts::link_brackets( context[8], context[9] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[25], context[43] );
                res = refalrts::splice_evar( res, context[58], context[55] );
                refalrts::splice_to_freelist_open( vm, context[24], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[67], context[68], context[64], context[65] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[62], context[63]);
            continue;
          } while ( refalrts::open_evar_advance( context[48], context[49], context[45], context[46] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[43], context[44]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/37 )/9 '$'/10 (/14 e.Result/39 )/15 (/24 s.Offset1/26 # ECOND/27 s.Offset3/36 )/25 (/45 s.Offset2/53 # LABEL/54 e.Name/43 )/46 (/49 s.Offset3/52 # POPVF/51 )/50 e.Commands/41 >/1
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[34];
      context[42] = context[35];
      if( ! refalrts::char_term( '$', context[10] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_ECOND], context[27] ) )
        continue;
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_left( context[43], context[44], context[41], context[42] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[41], context[42] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = refalrts::ident_right( identifiers[ident_POPVF], context[47], context[48] );
      if( ! context[51] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[52], context[36], context[47], context[48] ) )
        continue;
      if( ! refalrts::empty_seq( context[47], context[48] ) )
        continue;
      // closed e.Vars0 as range 37
      // closed e.Result as range 39
      // closed e.Commands as range 41
      if( ! refalrts::svar_left( context[53], context[43], context[44] ) )
        continue;
      context[54] = refalrts::ident_left( identifiers[ident_LABEL], context[43], context[44] );
      if( ! context[54] )
        continue;
      // closed e.Name as range 43
      //DEBUG: s.X: 5
      //DEBUG: s.Offset1: 26
      //DEBUG: s.Offset3: 36
      //DEBUG: e.Vars0: 37
      //DEBUG: e.Result: 39
      //DEBUG: e.Commands: 41
      //DEBUG: s.Offset2: 53
      //DEBUG: e.Name: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1/26 {REMOVED TILE} s.Offset3/36 {REMOVED TILE} s.Offset2/53 {REMOVED TILE} s.Offset3/52 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/39 AsIs: )/15 AsIs: (/24 } Tile{ Reuse: # EndCondition/54 AsIs: e.Name/43 AsIs: )/46 HalfReuse: </49 } Tile{ Reuse: & Decompile-Pattern-Hole/4 AsIs: s.X/5 HalfReuse: 6/8 } Tile{ HalfReuse: (/27 } Tile{ HalfReuse: 4/0 } Tile{ AsIs: )/25 AsIs: (/45 } 5/55 Tile{ AsIs: )/9 } Tile{ HalfReuse: (/51 } Tile{ AsIs: e.Vars0/37 } Tile{ AsIs: )/50 AsIs: e.Commands/41 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[55], 5UL);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[14], identifiers[ident_Result]);
      refalrts::update_ident(context[54], identifiers[ident_EndCondition]);
      refalrts::reinit_open_call(context[49]);
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[8], 6UL);
      refalrts::reinit_open_bracket(context[27]);
      refalrts::reinit_number(context[0], 4UL);
      refalrts::reinit_open_bracket(context[51]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[51], context[50] );
      refalrts::link_brackets( context[45], context[9] );
      refalrts::link_brackets( context[27], context[25] );
      refalrts::link_brackets( context[24], context[46] );
      refalrts::link_brackets( context[10], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[50];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[25], context[45] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[4], context[8] );
      res = refalrts::splice_evar( res, context[54], context[49] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@6/4 s.new14/5 (/8 e.new17/28 )/9 '$'/10 (/14 e.new18/30 )/15 (/24 s.new16/26 # OUTEST/27 )/25 e.new15/32 >/1
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[21];
    if( ! refalrts::char_term( '$', context[10] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_OUTEST], context[27] ) )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    // closed e.new17 as range 28
    // closed e.new18 as range 30
    // closed e.new15 as range 32
    do {
      // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/34 )/9 '$'/10 (/14 e.Result/36 )/15 (/24 s.Offset1/26 # OUTEST/27 )/25 (/42 s.Offset2/45 # OUTEST/44 )/43 e.Commands/38 >/1
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_right( identifiers[ident_OUTEST], context[40], context[41] );
      if( ! context[44] )
        continue;
      // closed e.Vars0 as range 34
      // closed e.Result as range 36
      // closed e.Commands as range 38
      if( ! refalrts::svar_left( context[45], context[40], context[41] ) )
        continue;
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      //DEBUG: s.X: 5
      //DEBUG: s.Offset1: 26
      //DEBUG: e.Vars0: 34
      //DEBUG: e.Result: 36
      //DEBUG: e.Commands: 38
      //DEBUG: s.Offset2: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/34 {REMOVED TILE} {REMOVED TILE} s.Offset1/26 {REMOVED TILE} s.Offset2/45 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/36 AsIs: )/15 AsIs: (/24 } Tile{ Reuse: # NextSentence/27 AsIs: )/25 AsIs: (/42 } # NextSentence/46 Tile{ AsIs: )/9 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@1/4 AsIs: s.X/5 AsIs: (/8 } )/47 Tile{ HalfReuse: (/44 AsIs: )/43 AsIs: e.Commands/38 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[46], identifiers[ident_NextSentence]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[14], identifiers[ident_Result]);
      refalrts::update_ident(context[27], identifiers[ident_NextSentence]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z1]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[44], context[43] );
      refalrts::link_brackets( context[8], context[47] );
      refalrts::link_brackets( context[42], context[9] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[10], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[44];
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[27], context[42] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/34 )/9 '$'/10 (/14 e.Result/36 )/15 (/24 s.Offset/26 # OUTEST/27 )/25 e.Commands/38 >/1
    context[34] = context[28];
    context[35] = context[29];
    context[36] = context[30];
    context[37] = context[31];
    context[38] = context[32];
    context[39] = context[33];
    // closed e.Vars0 as range 34
    // closed e.Result as range 36
    // closed e.Commands as range 38
    //DEBUG: s.X: 5
    //DEBUG: s.Offset: 26
    //DEBUG: e.Vars0: 34
    //DEBUG: e.Result: 36
    //DEBUG: e.Commands: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/34 {REMOVED TILE} {REMOVED TILE} s.Offset/26 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/10 HalfReuse: # Result/14 AsIs: e.Result/36 AsIs: )/15 AsIs: (/24 } # NextSentence/40 Tile{ AsIs: )/9 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@1/4 AsIs: s.X/5 AsIs: (/8 } )/41 Tile{ HalfReuse: (/27 AsIs: )/25 AsIs: e.Commands/38 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[40], identifiers[ident_NextSentence]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::reinit_open_bracket(context[10]);
    refalrts::reinit_ident(context[14], identifiers[ident_Result]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z1]);
    refalrts::reinit_open_bracket(context[27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[27], context[25] );
    refalrts::link_brackets( context[8], context[41] );
    refalrts::link_brackets( context[24], context[9] );
    refalrts::link_brackets( context[10], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[27];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[10], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/16 )/9 t.MB/10 (/14 e.Result/18 )/15 e.Commands/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.Vars0 as range 16
    // closed e.Result as range 18
    // closed e.Commands as range 20
    //DEBUG: t.MB: 10
    //DEBUG: s.X: 5
    //DEBUG: e.Vars0: 16
    //DEBUG: e.Result: 18
    //DEBUG: e.Commands: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: '='/4 } 'C'/22 Tile{ HalfReuse: ' '/1 } Tile{ AsIs: s.X/5 } 3/23 Tile{ AsIs: (/8 AsIs: e.Vars0/16 AsIs: )/9 } Tile{ AsIs: (/14 } Tile{ AsIs: t.MB/10 } Tile{ AsIs: e.Result/18 } Tile{ AsIs: )/15 } )/24 Tile{ AsIs: e.Commands/20 } Tile{ ]] }
    refalrts::alloc_char(vm, context[22], 'C');
    refalrts::alloc_number(vm, context[23], 3UL);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_char(context[4], '=');
    refalrts::reinit_char(context[1], ' ');
    refalrts::link_brackets( context[0], context[24] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Result@6/4 s.X/5 (/8 e.Vars0/6 )/9 t.dyn0/10 (/14 e.dyn1/12 )/15 e.dyn2/2 >/1
  // closed e.Vars0 as range 6
  // closed e.dyn1 as range 12
  // closed e.dyn2 as range 2
  //DEBUG: t.dyn0: 10
  //DEBUG: s.X: 5
  //DEBUG: e.Vars0: 6
  //DEBUG: e.dyn1: 12
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Result@0/4 AsIs: s.X/5 HalfReuse: 3/8 } Tile{ AsIs: (/14 } Tile{ AsIs: e.Vars0/6 } )/16 Tile{ HalfReuse: (/9 AsIs: t.dyn0/10 } Tile{ AsIs: e.dyn1/12 } Tile{ AsIs: )/15 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Result_Z0]);
  refalrts::reinit_number(context[8], 3UL);
  refalrts::reinit_open_bracket(context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[15] );
  refalrts::link_brackets( context[14], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Result_Z6("Decompile-Result@6", COOKIE1_, COOKIE2_, func_gen_Decompilem_Result_Z6);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$19=2@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$19=2@2/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 s.new4/11 s.new5/12 (/15 e.new6/13 )/16 (/19 e.new7/17 )/20 (/23 e.new8/21 )/24 e.new9/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new6 as range 13
  // closed e.new7 as range 17
  // closed e.new8 as range 21
  // closed e.new9 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$19=2@2/4 s.Level0/5 (/8 e.Pattern-L0/25 )/9 s.Type0/10 s.IdL0/11 s.IdR0/12 (/15 e.Pattern-R0/27 )/16 (/19 e.Vars0/29 )/20 (/23 e.Commands0/31 )/24 s.VL/35 s.VR/36 >/1
    context[25] = context[6];
    context[26] = context[7];
    context[27] = context[13];
    context[28] = context[14];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[2];
    context[34] = context[3];
    // closed e.Pattern-L0 as range 25
    // closed e.Pattern-R0 as range 27
    // closed e.Vars0 as range 29
    // closed e.Commands0 as range 31
    if( ! refalrts::svar_left( context[35], context[33], context[34] ) )
      continue;
    if( ! refalrts::svar_left( context[36], context[33], context[34] ) )
      continue;
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: s.Type0: 10
    //DEBUG: s.IdL0: 11
    //DEBUG: s.IdR0: 12
    //DEBUG: e.Pattern-L0: 25
    //DEBUG: e.Pattern-R0: 27
    //DEBUG: e.Vars0: 29
    //DEBUG: e.Commands0: 31
    //DEBUG: s.VL: 35
    //DEBUG: s.VR: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 } </37 & Add/38 '*'/39 2/40 >/41 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/25 HalfReuse: (/9 AsIs: s.Type0/10 AsIs: s.IdL0/11 AsIs: s.IdR0/12 HalfReuse: '='/15 } s.VL/35/42 s.VR/36/43 )/44 s.VR/36/45 )/46 (/47 Tile{ AsIs: e.Pattern-R0/27 } Tile{ AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/29 HalfReuse: (/20 HalfReuse: s.Type010 /23 } s.IdL0/11/48 s.IdR0/12/49 Tile{ HalfReuse: '='/24 AsIs: s.VL/35 AsIs: s.VR/36 HalfReuse: )/1 } )/50 Tile{ AsIs: e.Commands0/31 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[39], '*');
    refalrts::alloc_number(vm, context[40], 2UL);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::copy_stvar(vm, context[42], context[35]);
    refalrts::copy_stvar(vm, context[43], context[36]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::copy_stvar(vm, context[45], context[36]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::copy_stvar(vm, context[48], context[11]);
    refalrts::copy_stvar(vm, context[49], context[12]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_char(context[15], '=');
    refalrts::reinit_open_bracket(context[20]);
    refalrts::reinit_svar( context[23], context[10] );
    refalrts::reinit_char(context[24], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[50] );
    refalrts::link_brackets( context[20], context[1] );
    refalrts::link_brackets( context[47], context[16] );
    refalrts::link_brackets( context[8], context[46] );
    refalrts::link_brackets( context[9], context[44] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[37] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_evar( res, context[24], context[1] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[16], context[23] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[42], context[47] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    res = refalrts::splice_evar( res, context[37], context[41] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$19=2@2/4 s.Level0/5 (/8 e.Pattern-L0/6 )/9 s.Type0/10 s.IdL0/11 s.IdR0/12 (/15 e.Pattern-R0/13 )/16 (/19 e.Vars0/17 )/20 (/23 e.Commands0/21 )/24 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 13
  // closed e.Vars0 as range 17
  // closed e.Commands0 as range 21
  // closed e.dyn as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: s.Type0: 10
  //DEBUG: s.IdL0: 11
  //DEBUG: s.IdR0: 12
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 13
  //DEBUG: e.Vars0: 17
  //DEBUG: e.Commands0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=2@0/4 AsIs: s.Level0/5 } '*'/25 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: s.Type0/10 AsIs: s.IdL0/11 AsIs: s.IdR0/12 AsIs: (/15 AsIs: e.Pattern-R0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Commands0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[25], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A2Z2("Decompile-Pattern-Hole$19=2@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A2Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$20=2@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$20=2@2/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 s.new4/11 s.new5/12 (/15 e.new6/13 )/16 (/19 e.new7/17 )/20 (/23 e.new8/21 )/24 e.new9/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new6 as range 13
  // closed e.new7 as range 17
  // closed e.new8 as range 21
  // closed e.new9 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$20=2@2/4 s.Level0/5 (/8 e.Pattern-L0/25 )/9 s.Type0/10 s.IdL0/11 s.IdR0/12 (/15 e.Pattern-R0/27 )/16 (/19 e.Vars0/29 )/20 (/23 e.Commands0/31 )/24 s.VL/35 s.VR/36 >/1
    context[25] = context[6];
    context[26] = context[7];
    context[27] = context[13];
    context[28] = context[14];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[2];
    context[34] = context[3];
    // closed e.Pattern-L0 as range 25
    // closed e.Pattern-R0 as range 27
    // closed e.Vars0 as range 29
    // closed e.Commands0 as range 31
    if( ! refalrts::svar_left( context[35], context[33], context[34] ) )
      continue;
    if( ! refalrts::svar_left( context[36], context[33], context[34] ) )
      continue;
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    //DEBUG: s.Level0: 5
    //DEBUG: s.Type0: 10
    //DEBUG: s.IdL0: 11
    //DEBUG: s.IdR0: 12
    //DEBUG: e.Pattern-L0: 25
    //DEBUG: e.Pattern-R0: 27
    //DEBUG: e.Vars0: 29
    //DEBUG: e.Commands0: 31
    //DEBUG: s.VL: 35
    //DEBUG: s.VR: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 AsIs: s.Level0/5 HalfReuse: </8 } & Add/37 '*'/38 2/39 >/40 (/41 Tile{ AsIs: e.Pattern-L0/25 } )/42 (/43 s.VL/35/44 Tile{ HalfReuse: (/9 AsIs: s.Type0/10 AsIs: s.IdL0/11 AsIs: s.IdR0/12 } '='/45 s.VL/35/46 s.VR/36/47 Tile{ HalfReuse: )/15 AsIs: e.Pattern-R0/27 AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/29 HalfReuse: (/20 HalfReuse: s.Type010 /23 } s.IdL0/11/48 s.IdR0/12/49 Tile{ HalfReuse: '='/24 AsIs: s.VL/35 AsIs: s.VR/36 HalfReuse: )/1 } )/50 Tile{ AsIs: e.Commands0/31 } >/51 Tile{ ]] }
    refalrts::alloc_name(vm, context[37], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[38], '*');
    refalrts::alloc_number(vm, context[39], 2UL);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::copy_stvar(vm, context[44], context[35]);
    refalrts::alloc_char(vm, context[45], '=');
    refalrts::copy_stvar(vm, context[46], context[35]);
    refalrts::copy_stvar(vm, context[47], context[36]);
    refalrts::copy_stvar(vm, context[48], context[11]);
    refalrts::copy_stvar(vm, context[49], context[12]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_close_bracket(context[15]);
    refalrts::reinit_open_bracket(context[20]);
    refalrts::reinit_svar( context[23], context[10] );
    refalrts::reinit_char(context[24], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[50] );
    refalrts::link_brackets( context[20], context[1] );
    refalrts::link_brackets( context[43], context[16] );
    refalrts::link_brackets( context[9], context[15] );
    refalrts::link_brackets( context[41], context[42] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_evar( res, context[24], context[1] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[15], context[23] );
    res = refalrts::splice_evar( res, context[45], context[47] );
    res = refalrts::splice_evar( res, context[9], context[12] );
    res = refalrts::splice_evar( res, context[42], context[44] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[37], context[41] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$20=2@2/4 s.Level0/5 (/8 e.Pattern-L0/6 )/9 s.Type0/10 s.IdL0/11 s.IdR0/12 (/15 e.Pattern-R0/13 )/16 (/19 e.Vars0/17 )/20 (/23 e.Commands0/21 )/24 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 13
  // closed e.Vars0 as range 17
  // closed e.Commands0 as range 21
  // closed e.dyn as range 2
  //DEBUG: s.Level0: 5
  //DEBUG: s.Type0: 10
  //DEBUG: s.IdL0: 11
  //DEBUG: s.IdR0: 12
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 13
  //DEBUG: e.Vars0: 17
  //DEBUG: e.Commands0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=2@0/4 AsIs: s.Level0/5 } '*'/25 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: s.Type0/10 AsIs: s.IdL0/11 AsIs: s.IdR0/12 AsIs: (/15 AsIs: e.Pattern-R0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Vars0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Commands0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[25], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A2Z2("Decompile-Pattern-Hole$20=2@2", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A2Z2);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 79 elems
  refalrts::Iter context[79];
  refalrts::zeros( context, 79 );
  // </0 & Decompile-Pattern-Hole@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new9/17 )/8 (/11 e.new10/19 )/12 (/15 e.new11/21 )/16 (/27 s.new5/29 s.new6/30 e.new7/25 )/28 e.new8/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.new9 as range 17
    // closed e.new10 as range 19
    // closed e.new11 as range 21
    // closed e.new8 as range 23
    if( ! refalrts::svar_left( context[29], context[25], context[26] ) )
      continue;
    if( ! refalrts::svar_left( context[30], context[25], context[26] ) )
      continue;
    // closed e.new7 as range 25
    do {
      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/31 s.L/41 )/8 (/11 e.Pattern-R/33 )/12 (/15 e.Vars/35 )/16 (/27 s.Offset/29 # CSYM/30 e.Word/37 )/28 e.Commands/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_CSYM], context[30] ) )
        continue;
      // closed e.Pattern-R as range 33
      // closed e.Vars as range 35
      // closed e.Word as range 37
      // closed e.Commands as range 39
      if( ! refalrts::svar_right( context[41], context[31], context[32] ) )
        continue;
      // closed e.Pattern-L as range 31
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-R: 33
      //DEBUG: e.Vars: 35
      //DEBUG: e.Word: 37
      //DEBUG: e.Commands: 39
      //DEBUG: s.L: 41
      //DEBUG: e.Pattern-L: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/41 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </42 & Add/43 1/44 '*'/45 >/46 Tile{ AsIs: (/27 } Tile{ AsIs: e.Pattern-L/31 } (/47 Tile{ Reuse: # W/30 AsIs: e.Word/37 AsIs: )/28 } '*'/48 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/33 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/35 AsIs: )/16 } Tile{ AsIs: e.Commands/39 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[44], 1UL);
      refalrts::alloc_char(vm, context[45], '*');
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_char(vm, context[48], '*');
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::update_ident(context[30], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[27], context[8] );
      refalrts::link_brackets( context[47], context[28] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[42] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[30], context[28] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[42], context[46] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/31 )/8 (/11 s.R/41 e.Pattern-R/33 )/12 (/15 e.Vars/35 )/16 (/27 s.Offset/29 # CSYMR/30 e.Word/37 )/28 e.Commands/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_CSYMR], context[30] ) )
        continue;
      // closed e.Pattern-L as range 31
      // closed e.Vars as range 35
      // closed e.Word as range 37
      // closed e.Commands as range 39
      if( ! refalrts::svar_left( context[41], context[33], context[34] ) )
        continue;
      // closed e.Pattern-R as range 33
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 31
      //DEBUG: e.Vars: 35
      //DEBUG: e.Word: 37
      //DEBUG: e.Commands: 39
      //DEBUG: s.R: 41
      //DEBUG: e.Pattern-R: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </42 & Decompile-Pattern-Hole/43 0/44 </45 & Add/46 1/47 Tile{ HalfReuse: '*'/0 HalfReuse: >/4 AsIs: (/7 AsIs: e.Pattern-L/31 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: '*'/12 AsIs: (/15 } Tile{ Reuse: # W/30 } Tile{ AsIs: e.Word/37 } )/48 Tile{ AsIs: e.Pattern-R/33 } Tile{ AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Vars/35 } Tile{ AsIs: )/28 AsIs: e.Commands/39 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::alloc_number(vm, context[44], 0UL);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[47], 1UL);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::reinit_char(context[0], '*');
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_char(context[12], '*');
      refalrts::update_ident(context[30], identifiers[ident_W]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[42] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[11], context[16] );
      refalrts::link_brackets( context[15], context[48] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[45] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[16], context[27] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[42], context[47] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/31 s.L/42 )/8 (/11 e.Pattern-R/33 )/12 (/15 e.Vars/35 )/16 (/27 s.Offset/29 # NSYM/30 s.Number/41 )/28 e.Commands/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_NSYM], context[30] ) )
        continue;
      // closed e.Pattern-R as range 33
      // closed e.Vars as range 35
      // closed e.Commands as range 39
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      if( ! refalrts::svar_right( context[42], context[31], context[32] ) )
        continue;
      // closed e.Pattern-L as range 31
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-R: 33
      //DEBUG: e.Vars: 35
      //DEBUG: e.Commands: 39
      //DEBUG: s.Number: 41
      //DEBUG: s.L: 42
      //DEBUG: e.Pattern-L: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/42 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </43 & Add/44 1/45 '*'/46 >/47 Tile{ AsIs: (/27 } Tile{ AsIs: e.Pattern-L/31 } (/48 Tile{ Reuse: # N/30 AsIs: s.Number/41 AsIs: )/28 } '*'/49 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/33 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/35 AsIs: )/16 } Tile{ AsIs: e.Commands/39 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[45], 1UL);
      refalrts::alloc_char(vm, context[46], '*');
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::alloc_char(vm, context[49], '*');
      refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::update_ident(context[30], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[27], context[8] );
      refalrts::link_brackets( context[48], context[28] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[43] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_evar( res, context[30], context[28] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[43], context[47] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/31 )/8 (/11 s.R/41 e.Pattern-R/33 )/12 (/15 e.Vars/35 )/16 (/27 s.Offset/29 # NSYMR/30 e.Number/37 )/28 e.Commands/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_NSYMR], context[30] ) )
        continue;
      // closed e.Pattern-L as range 31
      // closed e.Vars as range 35
      // closed e.Number as range 37
      // closed e.Commands as range 39
      if( ! refalrts::svar_left( context[41], context[33], context[34] ) )
        continue;
      // closed e.Pattern-R as range 33
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 31
      //DEBUG: e.Vars: 35
      //DEBUG: e.Number: 37
      //DEBUG: e.Commands: 39
      //DEBUG: s.R: 41
      //DEBUG: e.Pattern-R: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </42 & Decompile-Pattern-Hole/43 0/44 </45 & Add/46 1/47 Tile{ HalfReuse: '*'/0 HalfReuse: >/4 AsIs: (/7 AsIs: e.Pattern-L/31 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: '*'/12 AsIs: (/15 } Tile{ Reuse: # N/30 } Tile{ AsIs: e.Number/37 } )/48 Tile{ AsIs: e.Pattern-R/33 } Tile{ AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Vars/35 } Tile{ AsIs: )/28 AsIs: e.Commands/39 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::alloc_number(vm, context[44], 0UL);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[47], 1UL);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::reinit_char(context[0], '*');
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_char(context[12], '*');
      refalrts::update_ident(context[30], identifiers[ident_N]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[42] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[11], context[16] );
      refalrts::link_brackets( context[15], context[48] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[45] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[16], context[27] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[42], context[47] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new17/31 )/8 (/11 e.new18/33 )/12 (/15 e.new19/35 )/16 (/27 s.new13/29 s.new14/30 s.new15/41 e.new16/37 )/28 e.new12/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      // closed e.new17 as range 31
      // closed e.new18 as range 33
      // closed e.new19 as range 35
      // closed e.new12 as range 39
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      // closed e.new16 as range 37
      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new25/42 )/8 (/11 e.new26/44 )/12 (/15 e.new27/46 )/16 (/27 s.new21/29 s.new22/30 s.new23/41 s.new24/52 )/28 e.new20/50 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        // closed e.new25 as range 42
        // closed e.new26 as range 44
        // closed e.new27 as range 46
        // closed e.new20 as range 50
        if( ! refalrts::svar_left( context[52], context[48], context[49] ) )
          continue;
        if( ! refalrts::empty_seq( context[48], context[49] ) )
          continue;
        do {
          // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/53 s.L/61 )/8 (/11 e.Pattern-R/55 )/12 (/15 e.Vars/57 )/16 (/27 s.Offset/29 # SYM/30 s.Code/41 s.Char/52 )/28 e.Commands/59 >/1
          context[53] = context[42];
          context[54] = context[43];
          context[55] = context[44];
          context[56] = context[45];
          context[57] = context[46];
          context[58] = context[47];
          context[59] = context[50];
          context[60] = context[51];
          if( ! refalrts::ident_term( identifiers[ident_SYM], context[30] ) )
            continue;
          // closed e.Pattern-R as range 55
          // closed e.Vars as range 57
          // closed e.Commands as range 59
          if( ! refalrts::svar_right( context[61], context[53], context[54] ) )
            continue;
          // closed e.Pattern-L as range 53
          //DEBUG: s.Offset: 29
          //DEBUG: s.Code: 41
          //DEBUG: s.Char: 52
          //DEBUG: e.Pattern-R: 55
          //DEBUG: e.Vars: 57
          //DEBUG: e.Commands: 59
          //DEBUG: s.L: 61
          //DEBUG: e.Pattern-L: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/61 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} s.Code/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </62 & Add/63 1/64 '*'/65 >/66 Tile{ AsIs: (/27 } Tile{ AsIs: e.Pattern-L/53 } (/67 Tile{ Reuse: # C/30 } Tile{ AsIs: s.Char/52 AsIs: )/28 } '*'/68 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/55 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/57 AsIs: )/16 } Tile{ AsIs: e.Commands/59 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[64], 1UL);
          refalrts::alloc_char(vm, context[65], '*');
          refalrts::alloc_close_call(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_char(vm, context[68], '*');
          refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::reinit_number(context[7], 0UL);
          refalrts::update_ident(context[30], identifiers[ident_C]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[27], context[8] );
          refalrts::link_brackets( context[67], context[28] );
          refalrts::push_stack( vm, context[66] );
          refalrts::push_stack( vm, context[62] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_evar( res, context[8], context[16] );
          res = refalrts::splice_elem( res, context[68] );
          res = refalrts::splice_evar( res, context[52], context[28] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_elem( res, context[67] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_evar( res, context[62], context[66] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/53 )/8 (/11 s.R/61 e.Pattern-R/55 )/12 (/15 e.Vars/57 )/16 (/27 s.Offset/29 # SYMR/30 s.Code/41 s.Char/52 )/28 e.Commands/59 >/1
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[50];
        context[60] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_SYMR], context[30] ) )
          continue;
        // closed e.Pattern-L as range 53
        // closed e.Vars as range 57
        // closed e.Commands as range 59
        if( ! refalrts::svar_left( context[61], context[55], context[56] ) )
          continue;
        // closed e.Pattern-R as range 55
        //DEBUG: s.Offset: 29
        //DEBUG: s.Code: 41
        //DEBUG: s.Char: 52
        //DEBUG: e.Pattern-L: 53
        //DEBUG: e.Vars: 57
        //DEBUG: e.Commands: 59
        //DEBUG: s.R: 61
        //DEBUG: e.Pattern-R: 55

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/61 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} s.Code/41 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </62 & Decompile-Pattern-Hole/63 0/64 </65 & Add/66 1/67 Tile{ HalfReuse: '*'/0 HalfReuse: >/4 AsIs: (/7 AsIs: e.Pattern-L/53 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: '*'/12 AsIs: (/15 } Tile{ Reuse: # C/30 } Tile{ AsIs: s.Char/52 } )/68 Tile{ AsIs: e.Pattern-R/55 } Tile{ AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Vars/57 } Tile{ AsIs: )/28 AsIs: e.Commands/59 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[62]);
        refalrts::alloc_name(vm, context[63], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::alloc_number(vm, context[64], 0UL);
        refalrts::alloc_open_call(vm, context[65]);
        refalrts::alloc_name(vm, context[66], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[67], 1UL);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::reinit_char(context[0], '*');
        refalrts::reinit_close_call(context[4]);
        refalrts::reinit_char(context[12], '*');
        refalrts::update_ident(context[30], identifiers[ident_C]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[62] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[11], context[16] );
        refalrts::link_brackets( context[15], context[68] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[65] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[16], context[27] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_elem( res, context[68] );
        res = refalrts::splice_elem( res, context[52] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[12], context[15] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_evar( res, context[62], context[67] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/42 s.L/52 )/8 (/11 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # SYMS/30 s.Len/41 e.Chars/48 )/28 e.Commands/50 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_SYMS], context[30] ) )
          continue;
        // closed e.Pattern-R as range 44
        // closed e.Vars as range 46
        // closed e.Chars as range 48
        // closed e.Commands as range 50
        if( ! refalrts::svar_right( context[52], context[42], context[43] ) )
          continue;
        // closed e.Pattern-L as range 42
        //DEBUG: s.Offset: 29
        //DEBUG: s.Len: 41
        //DEBUG: e.Pattern-R: 44
        //DEBUG: e.Vars: 46
        //DEBUG: e.Chars: 48
        //DEBUG: e.Commands: 50
        //DEBUG: s.L: 52
        //DEBUG: e.Pattern-L: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$7=1@1/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/42 } )/53 (/54 Tile{ AsIs: e.Chars/48 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/44 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/50 } Tile{ AsIs: )/28 } </55 Tile{ HalfReuse: & Add/30 AsIs: s.Len/41 } '*'/56 >/57 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_open_call(vm, context[55]);
        refalrts::alloc_char(vm, context[56], '*');
        refalrts::alloc_close_call(vm, context[57]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S7A1Z1]);
        refalrts::reinit_name(context[30], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[55] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[54], context[8] );
        refalrts::link_brackets( context[7], context[53] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[30], context[41] );
        res = refalrts::splice_elem( res, context[55] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/42 )/8 (/11 s.R/52 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # SYMSR/30 s.Len/41 e.Chars/48 )/28 e.Commands/50 >/1
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      if( ! refalrts::ident_term( identifiers[ident_SYMSR], context[30] ) )
        continue;
      // closed e.Pattern-L as range 42
      // closed e.Vars as range 46
      // closed e.Chars as range 48
      // closed e.Commands as range 50
      if( ! refalrts::svar_left( context[52], context[44], context[45] ) )
        continue;
      // closed e.Pattern-R as range 44
      //DEBUG: s.Offset: 29
      //DEBUG: s.Len: 41
      //DEBUG: e.Pattern-L: 42
      //DEBUG: e.Vars: 46
      //DEBUG: e.Chars: 48
      //DEBUG: e.Commands: 50
      //DEBUG: s.R: 52
      //DEBUG: e.Pattern-R: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.R/52 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$8=1@1/4 AsIs: (/7 AsIs: e.Pattern-L/42 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Chars/48 } )/53 (/54 Tile{ AsIs: e.Pattern-R/44 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/50 } Tile{ AsIs: )/28 } </55 Tile{ HalfReuse: & Add/30 AsIs: s.Len/41 } '*'/56 >/57 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_char(vm, context[56], '*');
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S8A1Z1]);
      refalrts::reinit_name(context[30], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[55] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[54], context[12] );
      refalrts::link_brackets( context[11], context[53] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[30], context[41] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[12], context[27] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new15/31 )/8 (/11 e.new16/33 )/12 (/15 e.new17/35 )/16 (/27 s.new13/29 s.new14/30 )/28 e.new12/37 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      // closed e.new15 as range 31
      // closed e.new16 as range 33
      // closed e.new17 as range 35
      // closed e.new12 as range 37
      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/39 s.L/47 )/8 (/11 e.Pattern-R/41 )/12 (/15 e.Vars/43 )/16 (/27 s.Offset/29 # VSYM/30 )/28 e.Commands/45 >/1
        context[39] = context[31];
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_VSYM], context[30] ) )
          continue;
        // closed e.Pattern-R as range 41
        // closed e.Vars as range 43
        // closed e.Commands as range 45
        if( ! refalrts::svar_right( context[47], context[39], context[40] ) )
          continue;
        // closed e.Pattern-L as range 39
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-R: 41
        //DEBUG: e.Vars: 43
        //DEBUG: e.Commands: 45
        //DEBUG: s.L: 47
        //DEBUG: e.Pattern-L: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/47 {REMOVED TILE} s.Offset/29 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </48 & Add/49 1/50 '*'/51 >/52 (/53 Tile{ AsIs: e.Pattern-L/39 } (/54 # s/55"*=*"/56 )/58 '*'/59 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/41 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/43 HalfReuse: (/16 HalfReuse: # s/27 }"*=*"/60 Tile{ HalfReuse: )/30 AsIs: )/28 AsIs: e.Commands/45 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[50], 1UL);
        refalrts::alloc_char(vm, context[51], '*');
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_open_bracket(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_ident(vm, context[55], identifiers[ident_s]);
        refalrts::alloc_chars(vm, context[56], context[57], "*=*", 3);
        refalrts::alloc_close_bracket(vm, context[58]);
        refalrts::alloc_char(vm, context[59], '*');
        refalrts::alloc_chars(vm, context[60], context[61], "*=*", 3);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[27], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[28] );
        refalrts::link_brackets( context[16], context[30] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[53], context[8] );
        refalrts::link_brackets( context[54], context[58] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[48] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        res = refalrts::splice_evar( res, context[54], context[59] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[48], context[53] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/39 )/8 (/11 s.R/47 e.Pattern-R/41 )/12 (/15 e.Vars/43 )/16 (/27 s.Offset/29 # VSYMR/30 )/28 e.Commands/45 >/1
        context[39] = context[31];
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_VSYMR], context[30] ) )
          continue;
        // closed e.Pattern-L as range 39
        // closed e.Vars as range 43
        // closed e.Commands as range 45
        if( ! refalrts::svar_left( context[47], context[41], context[42] ) )
          continue;
        // closed e.Pattern-R as range 41
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-L: 39
        //DEBUG: e.Vars: 43
        //DEBUG: e.Commands: 45
        //DEBUG: s.R: 47
        //DEBUG: e.Pattern-R: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/47 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE}
        //RESULT: Tile{ [[ } </48 & Decompile-Pattern-Hole/49 0/50 </51 & Add/52 1/53 Tile{ HalfReuse: '*'/0 HalfReuse: >/4 AsIs: (/7 AsIs: e.Pattern-L/39 AsIs: )/8 AsIs: (/11 } '*'/54 (/55 # s/56"*=*"/57 )/59 Tile{ AsIs: e.Pattern-R/41 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/43 HalfReuse: (/16 HalfReuse: # s/27 }"*=*"/60 Tile{ HalfReuse: )/30 AsIs: )/28 AsIs: e.Commands/45 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_name(vm, context[49], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::alloc_number(vm, context[50], 0UL);
        refalrts::alloc_open_call(vm, context[51]);
        refalrts::alloc_name(vm, context[52], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[53], 1UL);
        refalrts::alloc_char(vm, context[54], '*');
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::alloc_ident(vm, context[56], identifiers[ident_s]);
        refalrts::alloc_chars(vm, context[57], context[58], "*=*", 3);
        refalrts::alloc_close_bracket(vm, context[59]);
        refalrts::alloc_chars(vm, context[60], context[61], "*=*", 3);
        refalrts::reinit_char(context[0], '*');
        refalrts::reinit_close_call(context[4]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[27], identifiers[ident_s]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[48] );
        refalrts::link_brackets( context[15], context[28] );
        refalrts::link_brackets( context[16], context[30] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[55], context[59] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[51] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_evar( res, context[12], context[27] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[54], context[59] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_evar( res, context[48], context[53] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/39 s.L/47 )/8 (/11 e.Pattern-R/41 )/12 (/15 e.Vars/43 )/16 (/27 s.Offset/29 # TERM/30 )/28 e.Commands/45 >/1
        context[39] = context[31];
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_TERM], context[30] ) )
          continue;
        // closed e.Pattern-R as range 41
        // closed e.Vars as range 43
        // closed e.Commands as range 45
        if( ! refalrts::svar_right( context[47], context[39], context[40] ) )
          continue;
        // closed e.Pattern-L as range 39
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-R: 41
        //DEBUG: e.Vars: 43
        //DEBUG: e.Commands: 45
        //DEBUG: s.L: 47
        //DEBUG: e.Pattern-L: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/47 {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$11=1@3/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/39 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/41 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/43 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/45 } Tile{ AsIs: )/28 } Tile{ HalfReuse: '*'/30 } </48 & Add/49 1/50 '*'/51 >/52 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[50], 1UL);
        refalrts::alloc_char(vm, context[51], '*');
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S11A1Z3]);
        refalrts::reinit_char(context[30], '*');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[48] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[48], context[52] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/39 )/8 (/11 s.R/47 e.Pattern-R/41 )/12 (/15 e.Vars/43 )/16 (/27 s.Offset/29 # TERMR/30 )/28 e.Commands/45 >/1
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_TERMR], context[30] ) )
        continue;
      // closed e.Pattern-L as range 39
      // closed e.Vars as range 43
      // closed e.Commands as range 45
      if( ! refalrts::svar_left( context[47], context[41], context[42] ) )
        continue;
      // closed e.Pattern-R as range 41
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 39
      //DEBUG: e.Vars: 43
      //DEBUG: e.Commands: 45
      //DEBUG: s.R: 47
      //DEBUG: e.Pattern-R: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.R/47 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$12=1@3/4 AsIs: (/7 AsIs: e.Pattern-L/39 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Pattern-R/41 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/43 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/45 } Tile{ AsIs: )/28 } '*'/48 Tile{ HalfReuse: </30 } & Add/49 1/50 '*'/51 >/52 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[48], '*');
      refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[50], 1UL);
      refalrts::alloc_char(vm, context[51], '*');
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S12A1Z3]);
      refalrts::reinit_open_call(context[30]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[49], context[52] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[12], context[27] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new17/31 )/8 (/11 e.new18/33 )/12 (/15 e.new19/35 )/16 (/27 s.new13/29 s.new14/30 s.new15/41 e.new16/37 )/28 e.new12/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      // closed e.new17 as range 31
      // closed e.new18 as range 33
      // closed e.new19 as range 35
      // closed e.new12 as range 39
      if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
        continue;
      // closed e.new16 as range 37
      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/42 )/8 (/11 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # TRAN/30 s.Jump/41 )/28 e.Commands-B/50 (/56 s.Jump/58 e.Command/54 )/57 e.Commands-E/52 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[39];
        context[49] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_TRAN], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        // closed e.Pattern-L as range 42
        // closed e.Pattern-R as range 44
        // closed e.Vars as range 46
        context[50] = 0;
        context[51] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[52] = context[48];
          context[53] = context[49];
          context[54] = 0;
          context[55] = 0;
          context[56] = refalrts::brackets_left( context[54], context[55], context[52], context[53] );
          if( ! context[56] )
            continue;
          refalrts::bracket_pointers(context[56], context[57]);
          if( ! refalrts::repeated_stvar_left( vm, context[58], context[41], context[54], context[55] ) )
            continue;
          // closed e.Command as range 54
          // closed e.Commands-E as range 52
          //DEBUG: s.Offset: 29
          //DEBUG: s.Jump: 41
          //DEBUG: e.Pattern-L: 42
          //DEBUG: e.Pattern-R: 44
          //DEBUG: e.Vars: 46
          //DEBUG: e.Commands-B: 50
          //DEBUG: e.Command: 54
          //DEBUG: e.Commands-E: 52

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} s.Jump/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole@5/4 AsIs: (/7 AsIs: e.Pattern-L/42 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/44 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 } Tile{ AsIs: e.Commands-B/50 } Tile{ AsIs: (/27 } '@'/59 Tile{ Reuse: # Restore-Hole/30 } 0/60 '*'/61 (/62 e.Pattern-L/42/63 Tile{ AsIs: )/28 } (/65 e.Pattern-R/44/66 )/68 (/69 e.Vars/46/70 )/72 )/73 Tile{ AsIs: (/56 AsIs: s.Jump/58 AsIs: e.Command/54 AsIs: )/57 AsIs: e.Commands-E/52 AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[59], '@');
          refalrts::alloc_number(vm, context[60], 0UL);
          refalrts::alloc_char(vm, context[61], '*');
          refalrts::alloc_open_bracket(vm, context[62]);
          refalrts::copy_evar(vm, context[63], context[64], context[42], context[43]);
          refalrts::alloc_open_bracket(vm, context[65]);
          refalrts::copy_evar(vm, context[66], context[67], context[44], context[45]);
          refalrts::alloc_close_bracket(vm, context[68]);
          refalrts::alloc_open_bracket(vm, context[69]);
          refalrts::copy_evar(vm, context[70], context[71], context[46], context[47]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_close_bracket(vm, context[73]);
          refalrts::update_ident(context[30], identifiers[ident_Restorem_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[56], context[57] );
          refalrts::link_brackets( context[27], context[73] );
          refalrts::link_brackets( context[69], context[72] );
          refalrts::link_brackets( context[65], context[68] );
          refalrts::link_brackets( context[62], context[28] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[56];
          res = refalrts::splice_evar( res, context[65], context[73] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          res = refalrts::splice_evar( res, context[60], context[62] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_elem( res, context[59] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_evar( res, context[50], context[51] );
          refalrts::splice_to_freelist_open( vm, context[16], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[50], context[51], context[48], context[49] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new27/42 )/8 (/11 e.new28/44 )/12 (/15 e.new29/46 )/16 (/27 '@'/29 s.new21/30 s.new22/41 s.new23/60 e.new24/48 (/58 e.new25/56 )/59 (/54 e.new26/52 )/55 )/28 e.new20/50 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        if( ! refalrts::char_term( '@', context[29] ) )
          continue;
        context[52] = 0;
        context[53] = 0;
        context[54] = refalrts::brackets_right( context[52], context[53], context[48], context[49] );
        if( ! context[54] )
          continue;
        refalrts::bracket_pointers(context[54], context[55]);
        context[56] = 0;
        context[57] = 0;
        context[58] = refalrts::brackets_right( context[56], context[57], context[48], context[49] );
        if( ! context[58] )
          continue;
        refalrts::bracket_pointers(context[58], context[59]);
        // closed e.new27 as range 42
        // closed e.new28 as range 44
        // closed e.new29 as range 46
        // closed e.new25 as range 56
        // closed e.new26 as range 52
        // closed e.new20 as range 50
        if( ! refalrts::svar_left( context[60], context[48], context[49] ) )
          continue;
        // closed e.new24 as range 48
        do {
          // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L1/61 )/8 (/11 e.Pattern-R1/63 )/12 (/15 e.Vars1/65 )/16 (/27 '@'/29 # Restore-Hole/30 s.Level2/41 s.Top2/60 (/77 e.Pattern-L2/75 )/78 (/58 e.Pattern-R2/69 )/59 (/54 e.Vars2/71 )/55 )/28 e.Commands/73 >/1
          context[61] = context[42];
          context[62] = context[43];
          context[63] = context[44];
          context[64] = context[45];
          context[65] = context[46];
          context[66] = context[47];
          context[67] = context[48];
          context[68] = context[49];
          context[69] = context[56];
          context[70] = context[57];
          context[71] = context[52];
          context[72] = context[53];
          context[73] = context[50];
          context[74] = context[51];
          if( ! refalrts::ident_term( identifiers[ident_Restorem_Hole], context[30] ) )
            continue;
          context[75] = 0;
          context[76] = 0;
          context[77] = refalrts::brackets_left( context[75], context[76], context[67], context[68] );
          if( ! context[77] )
            continue;
          refalrts::bracket_pointers(context[77], context[78]);
          if( ! refalrts::empty_seq( context[67], context[68] ) )
            continue;
          // closed e.Pattern-L1 as range 61
          // closed e.Pattern-R1 as range 63
          // closed e.Vars1 as range 65
          // closed e.Pattern-L2 as range 75
          // closed e.Pattern-R2 as range 69
          // closed e.Vars2 as range 71
          // closed e.Commands as range 73
          //DEBUG: s.Level2: 41
          //DEBUG: s.Top2: 60
          //DEBUG: e.Pattern-L1: 61
          //DEBUG: e.Pattern-R1: 63
          //DEBUG: e.Vars1: 65
          //DEBUG: e.Pattern-L2: 75
          //DEBUG: e.Pattern-R2: 69
          //DEBUG: e.Vars2: 71
          //DEBUG: e.Commands: 73

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L1/61 )/8 (/11 e.Pattern-R1/63 )/12 (/15 e.Vars1/65 )/16 (/27 {REMOVED TILE} )/28 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & Decompile-Pattern-Hole/30 AsIs: s.Level2/41 AsIs: s.Top2/60 AsIs: (/77 AsIs: e.Pattern-L2/75 AsIs: )/78 AsIs: (/58 AsIs: e.Pattern-R2/69 AsIs: )/59 AsIs: (/54 AsIs: e.Vars2/71 AsIs: )/55 } Tile{ AsIs: e.Commands/73 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_call(context[29]);
          refalrts::reinit_name(context[30], functions[efunc_Decompilem_Patternm_Hole]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[29] );
          refalrts::link_brackets( context[54], context[55] );
          refalrts::link_brackets( context[58], context[59] );
          refalrts::link_brackets( context[77], context[78] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[73], context[74] );
          res = refalrts::splice_evar( res, context[29], context[55] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L1/61 )/8 (/11 e.Pattern-R1/63 )/12 (/15 e.Vars1/65 )/16 (/27 '@'/29 # Restore-NoHole/30 s.Level2/41 s.Top2/60 (/58 e.Pattern2/67 )/59 (/54 e.Vars2/69 )/55 )/28 e.Commands/71 >/1
        context[61] = context[42];
        context[62] = context[43];
        context[63] = context[44];
        context[64] = context[45];
        context[65] = context[46];
        context[66] = context[47];
        context[67] = context[56];
        context[68] = context[57];
        context[69] = context[52];
        context[70] = context[53];
        context[71] = context[50];
        context[72] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_Restorem_NoHole], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[48], context[49] ) )
          continue;
        // closed e.Pattern-L1 as range 61
        // closed e.Pattern-R1 as range 63
        // closed e.Vars1 as range 65
        // closed e.Pattern2 as range 67
        // closed e.Vars2 as range 69
        // closed e.Commands as range 71
        //DEBUG: s.Level2: 41
        //DEBUG: s.Top2: 60
        //DEBUG: e.Pattern-L1: 61
        //DEBUG: e.Pattern-R1: 63
        //DEBUG: e.Vars1: 65
        //DEBUG: e.Pattern2: 67
        //DEBUG: e.Vars2: 69
        //DEBUG: e.Commands: 71

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L1/61 )/8 (/11 e.Pattern-R1/63 )/12 (/15 e.Vars1/65 )/16 (/27 {REMOVED TILE} )/28 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & Decompile-Pattern-NoHole/30 AsIs: s.Level2/41 AsIs: s.Top2/60 AsIs: (/58 AsIs: e.Pattern2/67 AsIs: )/59 AsIs: (/54 AsIs: e.Vars2/69 AsIs: )/55 } Tile{ AsIs: e.Commands/71 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[29]);
        refalrts::reinit_name(context[30], functions[efunc_Decompilem_Patternm_NoHole]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::link_brackets( context[58], context[59] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[71], context[72] );
        res = refalrts::splice_evar( res, context[29], context[55] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new24/42 )/8 (/11 e.new25/44 )/12 (/15 e.new26/46 )/16 (/27 s.new21/29 s.new22/30 s.new23/41 )/28 e.new20/48 >/1
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[39];
      context[49] = context[40];
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      // closed e.new24 as range 42
      // closed e.new25 as range 44
      // closed e.new26 as range 46
      // closed e.new20 as range 48
      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/50 s.L/58 )/8 (/11 e.Pattern-R/52 )/12 (/15 e.Vars/54 )/16 (/27 s.Offset/29 # OVSYM/30 s.VarNo/41 )/28 e.Commands/56 >/1
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        if( ! refalrts::ident_term( identifiers[ident_OVSYM], context[30] ) )
          continue;
        // closed e.Pattern-R as range 52
        // closed e.Vars as range 54
        // closed e.Commands as range 56
        if( ! refalrts::svar_right( context[58], context[50], context[51] ) )
          continue;
        // closed e.Pattern-L as range 50
        //DEBUG: s.Offset: 29
        //DEBUG: s.VarNo: 41
        //DEBUG: e.Pattern-R: 52
        //DEBUG: e.Vars: 54
        //DEBUG: e.Commands: 56
        //DEBUG: s.L: 58
        //DEBUG: e.Pattern-L: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/58 {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </59 & Add/60 1/61 '*'/62 >/63 (/64 Tile{ AsIs: e.Pattern-L/50 } (/65 Tile{ Reuse: # s/30 AsIs: s.VarNo/41 }"=*"/66 )/68 '*'/69 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/52 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/54 HalfReuse: (/16 HalfReuse: # s/27 } s.VarNo/41/70"=*"/71 )/73 Tile{ AsIs: )/28 AsIs: e.Commands/56 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[59]);
        refalrts::alloc_name(vm, context[60], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[61], 1UL);
        refalrts::alloc_char(vm, context[62], '*');
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::alloc_open_bracket(vm, context[65]);
        refalrts::alloc_chars(vm, context[66], context[67], "=*", 2);
        refalrts::alloc_close_bracket(vm, context[68]);
        refalrts::alloc_char(vm, context[69], '*');
        refalrts::copy_stvar(vm, context[70], context[41]);
        refalrts::alloc_chars(vm, context[71], context[72], "=*", 2);
        refalrts::alloc_close_bracket(vm, context[73]);
        refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::update_ident(context[30], identifiers[ident_s]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_ident(context[27], identifiers[ident_s]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[28] );
        refalrts::link_brackets( context[16], context[73] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[64], context[8] );
        refalrts::link_brackets( context[65], context[68] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[59] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[70], context[73] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        res = refalrts::splice_evar( res, context[66], context[69] );
        res = refalrts::splice_evar( res, context[30], context[41] );
        res = refalrts::splice_elem( res, context[65] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[59], context[64] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/50 )/8 (/11 s.R/58 e.Pattern-R/52 )/12 (/15 e.Vars/54 )/16 (/27 s.Offset/29 # OVSYMR/30 s.VarNo/41 )/28 e.Commands/56 >/1
      context[50] = context[42];
      context[51] = context[43];
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      if( ! refalrts::ident_term( identifiers[ident_OVSYMR], context[30] ) )
        continue;
      // closed e.Pattern-L as range 50
      // closed e.Vars as range 54
      // closed e.Commands as range 56
      if( ! refalrts::svar_left( context[58], context[52], context[53] ) )
        continue;
      // closed e.Pattern-R as range 52
      //DEBUG: s.Offset: 29
      //DEBUG: s.VarNo: 41
      //DEBUG: e.Pattern-L: 50
      //DEBUG: e.Vars: 54
      //DEBUG: e.Commands: 56
      //DEBUG: s.R: 58
      //DEBUG: e.Pattern-R: 52

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/58 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </59 & Decompile-Pattern-Hole/60 0/61 </62 & Add/63 1/64 Tile{ HalfReuse: '*'/0 HalfReuse: >/4 AsIs: (/7 AsIs: e.Pattern-L/50 AsIs: )/8 AsIs: (/11 } '*'/65 (/66 Tile{ Reuse: # s/30 AsIs: s.VarNo/41 }"=*"/67 )/69 Tile{ AsIs: e.Pattern-R/52 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/54 HalfReuse: (/16 HalfReuse: # s/27 } s.VarNo/41/70"=*"/71 )/73 Tile{ AsIs: )/28 AsIs: e.Commands/56 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[59]);
      refalrts::alloc_name(vm, context[60], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::alloc_number(vm, context[61], 0UL);
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[64], 1UL);
      refalrts::alloc_char(vm, context[65], '*');
      refalrts::alloc_open_bracket(vm, context[66]);
      refalrts::alloc_chars(vm, context[67], context[68], "=*", 2);
      refalrts::alloc_close_bracket(vm, context[69]);
      refalrts::copy_stvar(vm, context[70], context[41]);
      refalrts::alloc_chars(vm, context[71], context[72], "=*", 2);
      refalrts::alloc_close_bracket(vm, context[73]);
      refalrts::reinit_char(context[0], '*');
      refalrts::reinit_close_call(context[4]);
      refalrts::update_ident(context[30], identifiers[ident_s]);
      refalrts::reinit_open_bracket(context[16]);
      refalrts::reinit_ident(context[27], identifiers[ident_s]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[59] );
      refalrts::link_brackets( context[15], context[28] );
      refalrts::link_brackets( context[16], context[73] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[66], context[69] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[62] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[70], context[73] );
      res = refalrts::splice_evar( res, context[12], context[27] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_evar( res, context[30], context[41] );
      res = refalrts::splice_evar( res, context[65], context[66] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[59], context[64] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new16/31 s.new17/41 )/8 (/11 e.new18/33 )/12 (/15 e.new19/35 )/16 (/27 s.new13/29 s.new14/30 e.new15/37 )/28 e.new12/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      // closed e.new18 as range 33
      // closed e.new19 as range 35
      // closed e.new15 as range 37
      // closed e.new12 as range 39
      if( ! refalrts::svar_right( context[41], context[31], context[32] ) )
        continue;
      // closed e.new16 as range 31
      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/42 s.L/41 )/8 (/11 s.R/50 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # CL/30 )/28 e.Commands/48 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[39];
        context[49] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_CL], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        // closed e.Pattern-L as range 42
        // closed e.Vars as range 46
        // closed e.Commands as range 48
        if( ! refalrts::svar_left( context[50], context[44], context[45] ) )
          continue;
        // closed e.Pattern-R as range 44
        //DEBUG: s.L: 41
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-L: 42
        //DEBUG: e.Vars: 46
        //DEBUG: e.Commands: 48
        //DEBUG: s.R: 50
        //DEBUG: e.Pattern-R: 44

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/41 {REMOVED TILE} s.R/50 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$18=1@3/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/42 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Pattern-R/44 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/48 } Tile{ AsIs: )/28 } Tile{ HalfReuse: '*'/30 } </51 & Add/52 '*'/53 1/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[51]);
        refalrts::alloc_name(vm, context[52], functions[efunc_Add]);
        refalrts::alloc_char(vm, context[53], '*');
        refalrts::alloc_number(vm, context[54], 1UL);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S18A1Z3]);
        refalrts::reinit_char(context[30], '*');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[51] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[51], context[55] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        res = refalrts::splice_evar( res, context[12], context[27] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/42 s.L/41 )/8 (/11 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # OEXP/30 s.IdR/52 )/28 e.Commands/50 >/1
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      if( ! refalrts::ident_term( identifiers[ident_OEXP], context[30] ) )
        continue;
      // closed e.Pattern-L as range 42
      // closed e.Pattern-R as range 44
      // closed e.Vars as range 46
      // closed e.Commands as range 50
      if( ! refalrts::svar_left( context[52], context[48], context[49] ) )
        continue;
      if( ! refalrts::empty_seq( context[48], context[49] ) )
        continue;
      //DEBUG: s.L: 41
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 42
      //DEBUG: e.Pattern-R: 44
      //DEBUG: e.Vars: 46
      //DEBUG: e.Commands: 50
      //DEBUG: s.IdR: 52

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/41 {REMOVED TILE} s.Offset/29 {REMOVED TILE} s.IdR/52 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=1@5/4 HalfReuse: s.IdR52 /7 } Tile{ HalfReuse: (/30 } Tile{ AsIs: e.Pattern-L/42 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/44 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/50 } Tile{ AsIs: )/28 } e.Vars/46/53 Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[53], context[54], context[46], context[47]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1Z5]);
      refalrts::reinit_svar( context[7], context[52] );
      refalrts::reinit_open_bracket(context[30]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[30], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[8], context[27] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new16/31 )/8 (/11 s.new17/41 e.new18/33 )/12 (/15 e.new19/35 )/16 (/27 s.new13/29 s.new14/30 e.new15/37 )/28 e.new12/39 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[23];
      context[40] = context[24];
      // closed e.new16 as range 31
      // closed e.new19 as range 35
      // closed e.new15 as range 37
      // closed e.new12 as range 39
      if( ! refalrts::svar_left( context[41], context[33], context[34] ) )
        continue;
      // closed e.new18 as range 33
      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/42 )/8 (/11 s.R/41 e.Pattern-R/44 )/12 (/15 e.Vars/46 )/16 (/27 s.Offset/29 # OEXPR/30 s.IdR/52 )/28 e.Commands/50 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        if( ! refalrts::ident_term( identifiers[ident_OEXPR], context[30] ) )
          continue;
        // closed e.Pattern-L as range 42
        // closed e.Pattern-R as range 44
        // closed e.Vars as range 46
        // closed e.Commands as range 50
        if( ! refalrts::svar_left( context[52], context[48], context[49] ) )
          continue;
        if( ! refalrts::empty_seq( context[48], context[49] ) )
          continue;
        //DEBUG: s.R: 41
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-L: 42
        //DEBUG: e.Pattern-R: 44
        //DEBUG: e.Vars: 46
        //DEBUG: e.Commands: 50
        //DEBUG: s.IdR: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.R/41 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} s.IdR/52 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </30 } Tile{ HalfReuse: & Decompile-Pattern-Hole$20=1@5/0 HalfReuse: s.IdR52 /4 AsIs: (/7 AsIs: e.Pattern-L/42 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Pattern-R/44 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/46 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/50 } Tile{ AsIs: )/28 } e.Vars/46/53 Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[53], context[54], context[46], context[47]);
        refalrts::reinit_open_call(context[30]);
        refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1Z5]);
        refalrts::reinit_svar( context[4], context[52] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[12], context[27] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[30] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new23/42 )/8 (/11 s.new24/41 e.new25/44 )/12 (/15 e.new26/46 )/16 (/27 s.new21/29 s.new22/30 )/28 e.new20/48 >/1
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[35];
        context[47] = context[36];
        context[48] = context[39];
        context[49] = context[40];
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        // closed e.new23 as range 42
        // closed e.new25 as range 44
        // closed e.new26 as range 46
        // closed e.new20 as range 48
        do {
          // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/50 s.L/58 )/8 (/11 s.R/41 e.Pattern-R/52 )/12 (/15 e.Vars/54 )/16 (/27 s.Offset/29 # PS/30 )/28 e.Commands/56 >/1
          context[50] = context[42];
          context[51] = context[43];
          context[52] = context[44];
          context[53] = context[45];
          context[54] = context[46];
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[49];
          if( ! refalrts::ident_term( identifiers[ident_PS], context[30] ) )
            continue;
          // closed e.Pattern-R as range 52
          // closed e.Vars as range 54
          // closed e.Commands as range 56
          if( ! refalrts::svar_right( context[58], context[50], context[51] ) )
            continue;
          // closed e.Pattern-L as range 50
          //DEBUG: s.R: 41
          //DEBUG: s.Offset: 29
          //DEBUG: e.Pattern-R: 52
          //DEBUG: e.Vars: 54
          //DEBUG: e.Commands: 56
          //DEBUG: s.L: 58
          //DEBUG: e.Pattern-L: 50

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/58 {REMOVED TILE} s.R/41 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$21=1@3/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/50 } Tile{ AsIs: )/8 HalfReuse: s.R41 /11 } Tile{ HalfReuse: (/30 } Tile{ AsIs: e.Pattern-R/52 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/54 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/56 } Tile{ AsIs: )/28 } '*'/59 </60 & Add/61 '*'/62 1/63 >/64 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[59], '*');
          refalrts::alloc_open_call(vm, context[60]);
          refalrts::alloc_name(vm, context[61], functions[efunc_Add]);
          refalrts::alloc_char(vm, context[62], '*');
          refalrts::alloc_number(vm, context[63], 1UL);
          refalrts::alloc_close_call(vm, context[64]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S21A1Z3]);
          refalrts::reinit_svar( context[11], context[41] );
          refalrts::reinit_open_bracket(context[30]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[64] );
          refalrts::push_stack( vm, context[60] );
          refalrts::link_brackets( context[27], context[28] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[30], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[59], context[64] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          res = refalrts::splice_evar( res, context[12], context[27] );
          res = refalrts::splice_evar( res, context[52], context[53] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_evar( res, context[8], context[11] );
          res = refalrts::splice_evar( res, context[50], context[51] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/50 )/8 (/11 s.R/41 e.Pattern-R/52 )/12 (/15 e.Vars/54 )/16 (/27 s.Offset/29 # PSR/30 )/28 e.Commands/56 >/1
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        if( ! refalrts::ident_term( identifiers[ident_PSR], context[30] ) )
          continue;
        // closed e.Pattern-L as range 50
        // closed e.Pattern-R as range 52
        // closed e.Vars as range 54
        // closed e.Commands as range 56
        //DEBUG: s.R: 41
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-L: 50
        //DEBUG: e.Pattern-R: 52
        //DEBUG: e.Vars: 54
        //DEBUG: e.Commands: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.R/41 {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$22=1@3/4 AsIs: (/7 AsIs: e.Pattern-L/50 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Pattern-R/52 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/54 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/56 } Tile{ AsIs: )/28 } '*'/58 Tile{ HalfReuse: </30 } & Add/59 '*'/60 1/61 >/62 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[58], '*');
        refalrts::alloc_name(vm, context[59], functions[efunc_Add]);
        refalrts::alloc_char(vm, context[60], '*');
        refalrts::alloc_number(vm, context[61], 1UL);
        refalrts::alloc_close_call(vm, context[62]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S22A1Z3]);
        refalrts::reinit_open_call(context[30]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[62] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[59], context[62] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_elem( res, context[58] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[12], context[27] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new24/42 s.new25/52 )/8 (/11 s.new26/41 e.new27/44 )/12 (/15 e.new28/46 )/16 (/27 s.new21/29 s.new22/30 e.new23/48 )/28 e.new20/50 >/1
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      context[51] = context[40];
      // closed e.new27 as range 44
      // closed e.new28 as range 46
      // closed e.new23 as range 48
      // closed e.new20 as range 50
      if( ! refalrts::svar_right( context[52], context[42], context[43] ) )
        continue;
      // closed e.new24 as range 42
      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/53 s.L/52 )/8 (/11 s.R/41 e.Pattern-R/55 )/12 (/15 e.Vars/57 )/16 (/27 s.Offset/29 # SETB/30 s.NewL/63 s.NewR/64 )/28 e.Commands/61 >/1
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[47];
        context[59] = context[48];
        context[60] = context[49];
        context[61] = context[50];
        context[62] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_SETB], context[30] ) )
          continue;
        // closed e.Pattern-L as range 53
        // closed e.Pattern-R as range 55
        // closed e.Vars as range 57
        // closed e.Commands as range 61
        if( ! refalrts::svar_left( context[63], context[59], context[60] ) )
          continue;
        if( ! refalrts::svar_left( context[64], context[59], context[60] ) )
          continue;
        if( ! refalrts::empty_seq( context[59], context[60] ) )
          continue;
        //DEBUG: s.L: 52
        //DEBUG: s.R: 41
        //DEBUG: s.Offset: 29
        //DEBUG: e.Pattern-L: 53
        //DEBUG: e.Pattern-R: 55
        //DEBUG: e.Vars: 57
        //DEBUG: e.Commands: 61
        //DEBUG: s.NewL: 63
        //DEBUG: s.NewR: 64

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@7/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/53 } (/65 Tile{ HalfReuse: # Hole/8 HalfReuse: s.L52 /11 AsIs: s.R/41 } )/66 Tile{ AsIs: e.Pattern-R/55 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/57 AsIs: )/16 AsIs: (/27 AsIs: s.Offset/29 AsIs: # SETB/30 AsIs: s.NewL/63 AsIs: s.NewR/64 AsIs: )/28 AsIs: e.Commands/61 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[65]);
        refalrts::alloc_close_bracket(vm, context[66]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z7]);
        refalrts::reinit_ident(context[8], identifiers[ident_Hole]);
        refalrts::reinit_svar( context[11], context[52] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[7], context[12] );
        refalrts::link_brackets( context[65], context[66] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[12];
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_elem( res, context[66] );
        res = refalrts::splice_evar( res, context[8], context[41] );
        res = refalrts::splice_elem( res, context[65] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/53 s.L/52 )/8 (/11 s.R/41 e.Pattern-R/55 )/12 (/15 e.Vars/57 )/16 (/27 s.Offset/29 # EMP/30 )/28 e.Commands/59 >/1
      context[53] = context[42];
      context[54] = context[43];
      context[55] = context[44];
      context[56] = context[45];
      context[57] = context[46];
      context[58] = context[47];
      context[59] = context[50];
      context[60] = context[51];
      if( ! refalrts::ident_term( identifiers[ident_EMP], context[30] ) )
        continue;
      if( ! refalrts::empty_seq( context[48], context[49] ) )
        continue;
      // closed e.Pattern-L as range 53
      // closed e.Pattern-R as range 55
      // closed e.Vars as range 57
      // closed e.Commands as range 59
      //DEBUG: s.L: 52
      //DEBUG: s.R: 41
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 53
      //DEBUG: e.Pattern-R: 55
      //DEBUG: e.Vars: 57
      //DEBUG: e.Commands: 59

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/52 )/8 (/11 s.R/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/16 (/27 s.Offset/29 # EMP/30 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@7/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/53 } Tile{ AsIs: e.Pattern-R/55 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Vars/57 } Tile{ AsIs: )/28 AsIs: e.Commands/59 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[28] );
      refalrts::link_brackets( context[7], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new15/31 )/8 (/11 e.new16/33 )/12 (/15 e.new17/35 )/16 (/27 s.new13/29 s.new14/30 )/28 e.new12/37 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[24];
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      // closed e.new15 as range 31
      // closed e.new16 as range 33
      // closed e.new17 as range 35
      // closed e.new12 as range 37
      do {
        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.new24/39 s.new25/51 )/8 (/11 e.new26/41 )/12 (/15 e.new27/43 )/16 (/27 s.new22/29 s.new23/30 )/28 (/49 e.new18/47 s.new19/53 s.new20/52 )/50 e.new21/45 >/1
        context[39] = context[31];
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = 0;
        context[48] = 0;
        context[49] = refalrts::brackets_left( context[47], context[48], context[45], context[46] );
        if( ! context[49] )
          continue;
        refalrts::bracket_pointers(context[49], context[50]);
        // closed e.new26 as range 41
        // closed e.new27 as range 43
        // closed e.new21 as range 45
        if( ! refalrts::svar_right( context[51], context[39], context[40] ) )
          continue;
        // closed e.new24 as range 39
        if( ! refalrts::svar_right( context[52], context[47], context[48] ) )
          continue;
        if( ! refalrts::svar_right( context[53], context[47], context[48] ) )
          continue;
        // closed e.new18 as range 47
        do {
          // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/54 s.L/51 )/8 (/11 e.Pattern-R/56 )/12 (/15 e.Vars/58 )/16 (/27 s.Offset1/29 # PLEN/30 )/28 (/49 s.Offset2/53 # LEN/52 )/50 e.Commands/60 >/1
          context[54] = context[39];
          context[55] = context[40];
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[45];
          context[61] = context[46];
          if( ! refalrts::ident_term( identifiers[ident_PLEN], context[30] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LEN], context[52] ) )
            continue;
          if( ! refalrts::empty_seq( context[47], context[48] ) )
            continue;
          // closed e.Pattern-L as range 54
          // closed e.Pattern-R as range 56
          // closed e.Vars as range 58
          // closed e.Commands as range 60
          //DEBUG: s.L: 51
          //DEBUG: s.Offset1: 29
          //DEBUG: s.Offset2: 53
          //DEBUG: e.Pattern-L: 54
          //DEBUG: e.Pattern-R: 56
          //DEBUG: e.Vars: 58
          //DEBUG: e.Commands: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/51 {REMOVED TILE} s.Offset1/29 {REMOVED TILE} {REMOVED TILE} s.Offset2/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$25=1@3/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/54 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/56 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/58 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: )/28 HalfReuse: '*'/49 } Tile{ HalfReuse: </30 } Tile{ HalfReuse: & Add/52 HalfReuse: '*'/50 } 1/62 >/63 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[62], 1UL);
          refalrts::alloc_close_call(vm, context[63]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S25A1Z3]);
          refalrts::reinit_char(context[49], '*');
          refalrts::reinit_open_call(context[30]);
          refalrts::reinit_name(context[52], functions[efunc_Add]);
          refalrts::reinit_char(context[50], '*');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[63] );
          refalrts::push_stack( vm, context[30] );
          refalrts::link_brackets( context[27], context[28] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_evar( res, context[52], context[50] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_evar( res, context[28], context[49] );
          res = refalrts::splice_evar( res, context[60], context[61] );
          res = refalrts::splice_evar( res, context[8], context[27] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/54 s.L/51 )/8 (/11 e.Pattern-R/56 )/12 (/15 e.Vars/58 )/16 (/27 s.Offset1/29 # PLENS/30 )/28 (/49 s.Offset2/64 # LENS/53 s.Char/52 )/50 e.Commands/62 >/1
          context[54] = context[39];
          context[55] = context[40];
          context[56] = context[41];
          context[57] = context[42];
          context[58] = context[43];
          context[59] = context[44];
          context[60] = context[47];
          context[61] = context[48];
          context[62] = context[45];
          context[63] = context[46];
          if( ! refalrts::ident_term( identifiers[ident_PLENS], context[30] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_LENS], context[53] ) )
            continue;
          // closed e.Pattern-L as range 54
          // closed e.Pattern-R as range 56
          // closed e.Vars as range 58
          // closed e.Commands as range 62
          if( ! refalrts::svar_left( context[64], context[60], context[61] ) )
            continue;
          if( ! refalrts::empty_seq( context[60], context[61] ) )
            continue;
          //DEBUG: s.L: 51
          //DEBUG: s.Offset1: 29
          //DEBUG: s.Char: 52
          //DEBUG: e.Pattern-L: 54
          //DEBUG: e.Pattern-R: 56
          //DEBUG: e.Vars: 58
          //DEBUG: e.Commands: 62
          //DEBUG: s.Offset2: 64

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/51 {REMOVED TILE} s.Offset1/29 {REMOVED TILE} {REMOVED TILE} s.Offset2/64 {REMOVED TILE} s.Char/52 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$26=1@3/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/54 } Tile{ AsIs: )/50 } Tile{ HalfReuse: s.Char52 /8 AsIs: (/11 AsIs: e.Pattern-R/56 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/58 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/62 } Tile{ AsIs: )/28 HalfReuse: '*'/49 } Tile{ HalfReuse: </53 } Tile{ HalfReuse: & Add/30 } '*'/65 1/66 >/67 </68 & Add/69 '*'/70 2/71 >/72 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[65], '*');
          refalrts::alloc_number(vm, context[66], 1UL);
          refalrts::alloc_close_call(vm, context[67]);
          refalrts::alloc_open_call(vm, context[68]);
          refalrts::alloc_name(vm, context[69], functions[efunc_Add]);
          refalrts::alloc_char(vm, context[70], '*');
          refalrts::alloc_number(vm, context[71], 2UL);
          refalrts::alloc_close_call(vm, context[72]);
          refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S26A1Z3]);
          refalrts::reinit_svar( context[8], context[52] );
          refalrts::reinit_char(context[49], '*');
          refalrts::reinit_open_call(context[53]);
          refalrts::reinit_name(context[30], functions[efunc_Add]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[68] );
          refalrts::push_stack( vm, context[67] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[27], context[28] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[50] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[65], context[72] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_elem( res, context[53] );
          res = refalrts::splice_evar( res, context[28], context[49] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_evar( res, context[8], context[27] );
          res = refalrts::splice_elem( res, context[50] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/54 s.L/51 )/8 (/11 s.R/62 e.Pattern-R/56 )/12 (/15 e.Vars/58 )/16 (/27 s.Offset1/29 # PLENP/30 )/28 (/49 s.Offset2/53 # LENP/52 )/50 e.Commands/60 >/1
        context[54] = context[39];
        context[55] = context[40];
        context[56] = context[41];
        context[57] = context[42];
        context[58] = context[43];
        context[59] = context[44];
        context[60] = context[45];
        context[61] = context[46];
        if( ! refalrts::ident_term( identifiers[ident_PLENP], context[30] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_LENP], context[52] ) )
          continue;
        if( ! refalrts::empty_seq( context[47], context[48] ) )
          continue;
        // closed e.Pattern-L as range 54
        // closed e.Vars as range 58
        // closed e.Commands as range 60
        if( ! refalrts::svar_left( context[62], context[56], context[57] ) )
          continue;
        // closed e.Pattern-R as range 56
        //DEBUG: s.L: 51
        //DEBUG: s.Offset1: 29
        //DEBUG: s.Offset2: 53
        //DEBUG: e.Pattern-L: 54
        //DEBUG: e.Vars: 58
        //DEBUG: e.Commands: 60
        //DEBUG: s.R: 62
        //DEBUG: e.Pattern-R: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.L/51 {REMOVED TILE} s.R/62 {REMOVED TILE} {REMOVED TILE} s.Offset1/29 {REMOVED TILE} s.Offset2/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$27=1@3/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-L/54 } Tile{ HalfReuse: )/30 HalfReuse: s.R62 /28 AsIs: (/49 } Tile{ AsIs: e.Pattern-R/56 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Vars/58 AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Commands/60 } Tile{ AsIs: )/8 HalfReuse: '*'/11 } </63 & Add/64 Tile{ HalfReuse: '*'/52 HalfReuse: 1/50 } >/65 </66 & Add/67 '*'/68 2/69 >/70 </71 & Add/72 '*'/73 3/74 >/75 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_Add]);
        refalrts::alloc_close_call(vm, context[65]);
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_name(vm, context[67], functions[efunc_Add]);
        refalrts::alloc_char(vm, context[68], '*');
        refalrts::alloc_number(vm, context[69], 2UL);
        refalrts::alloc_close_call(vm, context[70]);
        refalrts::alloc_open_call(vm, context[71]);
        refalrts::alloc_name(vm, context[72], functions[efunc_Add]);
        refalrts::alloc_char(vm, context[73], '*');
        refalrts::alloc_number(vm, context[74], 3UL);
        refalrts::alloc_close_call(vm, context[75]);
        refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S27A1Z3]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::reinit_svar( context[28], context[62] );
        refalrts::reinit_char(context[11], '*');
        refalrts::reinit_char(context[52], '*');
        refalrts::reinit_number(context[50], 1UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[75] );
        refalrts::push_stack( vm, context[71] );
        refalrts::push_stack( vm, context[70] );
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[65] );
        refalrts::push_stack( vm, context[63] );
        refalrts::link_brackets( context[27], context[8] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[49], context[12] );
        refalrts::link_brackets( context[7], context[30] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[65], context[75] );
        res = refalrts::splice_evar( res, context[52], context[50] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_evar( res, context[12], context[27] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[30], context[49] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/39 )/8 (/11 e.Pattern-R/41 )/12 (/15 e.Vars/43 )/16 (/27 s.Offset/29 # STLEN/30 )/28 e.Commands/45 >/1
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_STLEN], context[30] ) )
        continue;
      // closed e.Pattern-L as range 39
      // closed e.Pattern-R as range 41
      // closed e.Vars as range 43
      // closed e.Commands as range 45
      //DEBUG: s.Offset: 29
      //DEBUG: e.Pattern-L: 39
      //DEBUG: e.Pattern-R: 41
      //DEBUG: e.Vars: 43
      //DEBUG: e.Commands: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/27 } Tile{ Reuse: # StartBlock/30 AsIs: )/28 } </47 Tile{ HalfReuse: & Decompile-Pattern-Hole@4/0 HalfReuse: 1/4 AsIs: (/7 AsIs: e.Pattern-L/39 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/41 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/43 AsIs: )/16 } Tile{ AsIs: e.Commands/45 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::update_ident(context[30], identifiers[ident_StartBlock]);
      refalrts::reinit_name(context[0], functions[efunc_gen_Decompilem_Patternm_Hole_Z4]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[47] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[0], context[16] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[30], context[28] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/31 )/8 (/11 e.Pattern-R/33 )/12 (/15 e.Vars/35 )/16 (/27 s.Offset/29 # LABEL/30 e.BlockName/37 )/28 e.Commands/39 >/1
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[23];
    context[40] = context[24];
    if( ! refalrts::ident_term( identifiers[ident_LABEL], context[30] ) )
      continue;
    // closed e.Pattern-L as range 31
    // closed e.Pattern-R as range 33
    // closed e.Vars as range 35
    // closed e.BlockName as range 37
    // closed e.Commands as range 39
    //DEBUG: s.Offset: 29
    //DEBUG: e.Pattern-L: 31
    //DEBUG: e.Pattern-R: 33
    //DEBUG: e.Vars: 35
    //DEBUG: e.BlockName: 37
    //DEBUG: e.Commands: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/27 s.Offset/29 # LABEL/30 e.BlockName/37 )/28 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Pattern-Hole@5/4 AsIs: (/7 AsIs: e.Pattern-L/31 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/33 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/35 AsIs: )/16 } Tile{ AsIs: e.Commands/39 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::splice_to_freelist_open( vm, context[16], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole@5/4 (/7 s.L/21 )/8 (/11 s.R/22 )/12 (/15 )/16 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
      continue;
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    if( ! refalrts::svar_left( context[22], context[19], context[20] ) )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    //DEBUG: s.L: 21
    //DEBUG: s.R: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Decompile-Pattern-Hole@5/4 (/7 s.L/21 )/8 (/11 s.R/22 )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/15 HalfReuse: # EndOfFunction/16 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[16], identifiers[ident_EndOfFunction]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[15], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Pattern-Hole@5/4 (/7 e.Pattern-L/17 )/8 (/11 e.Pattern-R/19 )/12 (/15 e.Vars/21 )/16 e.Commands/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Pattern-L as range 17
    // closed e.Pattern-R as range 19
    // closed e.Vars as range 21
    // closed e.Commands as range 23
    //DEBUG: e.Pattern-L: 17
    //DEBUG: e.Pattern-R: 19
    //DEBUG: e.Vars: 21
    //DEBUG: e.Commands: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 }"=A "/25 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L/17 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/19 AsIs: )/12 AsIs: (/15 AsIs: e.Vars/21 AsIs: )/16 } )/27 Tile{ AsIs: e.Commands/23 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[25], context[26], "=A ", 3);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_char(context[4], '*');
    refalrts::link_brackets( context[1], context[27] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[0], context[16] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole@5/4 (/7 e.dyn0/5 )/8 (/11 e.dyn1/9 )/12 (/15 e.dyn2/13 )/16 e.dyn3/2 >/1
  // closed e.dyn0 as range 5
  // closed e.dyn1 as range 9
  // closed e.dyn2 as range 13
  // closed e.dyn3 as range 2
  //DEBUG: e.dyn0: 5
  //DEBUG: e.dyn1: 9
  //DEBUG: e.dyn2: 13
  //DEBUG: e.dyn3: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & Decompile-Pattern-Hole@0/18 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.dyn0/5 AsIs: )/8 AsIs: (/11 AsIs: e.dyn1/9 AsIs: )/12 AsIs: (/15 AsIs: e.dyn2/13 AsIs: )/16 AsIs: e.dyn3/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Decompilem_Patternm_Hole_Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_Z5("Decompile-Pattern-Hole@5", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_Z5);


static refalrts::FnResult func_gen_Decompilem_Result_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 71 elems
  refalrts::Iter context[71];
  refalrts::zeros( context, 71 );
  // </0 & Decompile-Result@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Result@7/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & Decompile-Result@7/4 (/7 e.new10/15 )/8 t.new5/9 (/13 e.new11/17 )/14 (/23 s.new6/25 s.new7/26 e.new8/21 )/24 e.new9/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new10 as range 15
    // closed e.new11 as range 17
    // closed e.new9 as range 19
    if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
      continue;
    // closed e.new8 as range 21
    do {
      // </0 & Decompile-Result@7/4 (/7 e.Vars0/27 )/8 t.MB/9 (/13 e.Result/29 )/14 (/23 s.Offset/25 # NCS/26 e.Word/31 )/24 e.Commands/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NCS], context[26] ) )
        continue;
      // closed e.Vars0 as range 27
      // closed e.Result as range 29
      // closed e.Word as range 31
      // closed e.Commands as range 33
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: e.Vars0: 27
      //DEBUG: e.Result: 29
      //DEBUG: e.Word: 31
      //DEBUG: e.Commands: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/27 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/29 HalfReuse: (/14 HalfReuse: # W/23 } Tile{ AsIs: e.Word/31 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/33 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_W]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::splice_to_freelist_open( vm, context[23], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@7/4 (/7 e.new18/27 )/8 t.new12/9 (/13 e.new19/29 )/14 (/23 s.new14/25 s.new15/26 s.new16/35 e.new17/31 )/24 e.new13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new18 as range 27
      // closed e.new19 as range 29
      // closed e.new13 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      // closed e.new17 as range 31
      do {
        // </0 & Decompile-Result@7/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # NNS/26 s.Number/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_NNS], context[26] ) )
          continue;
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Number: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # N/23 } Tile{ AsIs: s.Number/35 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/40 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_N]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[14], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::splice_to_freelist_open( vm, context[23], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@7/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # NS/26 s.Code/35 s.Char/44 )/24 e.Commands/42 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        context[43] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_NS], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 42
        if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
          continue;
        if( ! refalrts::empty_seq( context[40], context[41] ) )
          continue;
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Code: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 42
        //DEBUG: s.Char: 44

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} s.Code/35 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # C/23 } Tile{ AsIs: s.Char/44 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/42 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_ident(context[23], identifiers[ident_C]);
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[14], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::splice_to_freelist_open( vm, context[23], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@7/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # TEXT/26 s.Count/35 e.Chars/40 )/24 e.Commands/42 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      context[43] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_TEXT], context[26] ) )
        continue;
      // closed e.Vars0 as range 36
      // closed e.Result as range 38
      // closed e.Chars as range 40
      // closed e.Commands as range 42
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: s.Count: 35
      //DEBUG: e.Vars0: 36
      //DEBUG: e.Result: 38
      //DEBUG: e.Chars: 40
      //DEBUG: e.Commands: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE} s.Count/35 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # C/23 } Tile{ AsIs: e.Chars/40 } Tile{ HalfReuse: )/26 } Tile{ AsIs: )/24 AsIs: e.Commands/42 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[23], identifiers[ident_C]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      refalrts::splice_to_freelist_open( vm, context[23], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@7/4 (/7 e.new16/27 )/8 t.new12/9 (/13 e.new17/29 )/14 (/23 s.new14/25 s.new15/26 )/24 e.new13/31 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[20];
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.new16 as range 27
      // closed e.new17 as range 29
      // closed e.new13 as range 31
      do {
        // </0 & Decompile-Result@7/4 (/7 e.Vars0/33 )/8 t.MB/9 (/13 e.Result/35 )/14 (/23 s.Offset/25 # BL/26 )/24 e.Commands/37 >/1
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        if( ! refalrts::ident_term( identifiers[ident_BL], context[26] ) )
          continue;
        // closed e.Vars0 as range 33
        // closed e.Result as range 35
        // closed e.Commands as range 37
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: e.Vars0: 33
        //DEBUG: e.Result: 35
        //DEBUG: e.Commands: 37

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/33 AsIs: )/8 } Tile{ AsIs: (/23 } Tile{ AsIs: t.MB/9 } Tile{ AsIs: e.Result/35 } Tile{ AsIs: )/14 } Tile{ HalfReuse: (/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[26], context[24] );
        refalrts::link_brackets( context[23], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@7/4 (/7 e.Vars0/33 )/8 (/9 t.MB/41 e.Result/39 )/10 (/13 e.Nested/35 )/14 (/23 s.Offset/25 # BR/26 )/24 e.Commands/37 >/1
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = 0;
        context[40] = 0;
        if( ! refalrts::brackets_term( context[39], context[40], context[9] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_BR], context[26] ) )
          continue;
        // closed e.Vars0 as range 33
        // closed e.Nested as range 35
        // closed e.Commands as range 37
        context[42] = refalrts::tvar_left( context[41], context[39], context[40] );
        if( ! context[42] )
          continue;
        // closed e.Result as range 39
        //DEBUG: s.Offset: 25
        //DEBUG: e.Vars0: 33
        //DEBUG: e.Nested: 35
        //DEBUG: e.Commands: 37
        //DEBUG: t.MB: 41
        //DEBUG: e.Result: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/33 AsIs: )/8 } Tile{ AsIs: t.MB/41 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Result/39 } Tile{ AsIs: (/23 } Tile{ HalfReuse: '*'/14 } Tile{ AsIs: e.Nested/35 } Tile{ HalfReuse: )/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
        refalrts::reinit_char(context[14], '*');
        refalrts::reinit_close_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[23], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@7/4 (/7 e.Vars0/33 )/8 t.MB/9 (/13 e.Result/35 )/14 (/23 s.Offset/25 # BLR/26 )/24 e.Commands/37 >/1
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      if( ! refalrts::ident_term( identifiers[ident_BLR], context[26] ) )
        continue;
      // closed e.Vars0 as range 33
      // closed e.Result as range 35
      // closed e.Commands as range 37
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: e.Vars0: 33
      //DEBUG: e.Result: 35
      //DEBUG: e.Commands: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Offset/25 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/33 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/35 HalfReuse: (/14 HalfReuse: '*'/23 } Tile{ HalfReuse: )/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_char(context[23], '*');
      refalrts::reinit_close_bracket(context[26]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[14], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      refalrts::splice_to_freelist_open( vm, context[23], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@7/4 (/7 e.new17/27 )/8 t.new12/9 (/13 e.new18/29 (/37 '*'/39 e.new19/35 )/38 )/14 (/23 s.new14/25 s.new15/26 e.new16/31 )/24 e.new13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_right( context[35], context[36], context[29], context[30] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::char_left( '*', context[35], context[36] );
      if( ! context[39] )
        continue;
      // closed e.new17 as range 27
      // closed e.new18 as range 29
      // closed e.new19 as range 35
      // closed e.new16 as range 31
      // closed e.new13 as range 33
      do {
        // </0 & Decompile-Result@7/4 (/7 e.Vars0/40 )/8 t.MB/9 (/13 e.Result/42 (/37 '*'/39 e.Inner/44 )/38 )/14 (/23 s.Offset/25 # ACT1/26 e.Name/46 )/24 e.Commands/48 >/1
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        context[43] = context[30];
        context[44] = context[35];
        context[45] = context[36];
        context[46] = context[31];
        context[47] = context[32];
        context[48] = context[33];
        context[49] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ACT1], context[26] ) )
          continue;
        // closed e.Vars0 as range 40
        // closed e.Result as range 42
        // closed e.Inner as range 44
        // closed e.Name as range 46
        // closed e.Commands as range 48
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: e.Vars0: 40
        //DEBUG: e.Result: 42
        //DEBUG: e.Inner: 44
        //DEBUG: e.Name: 46
        //DEBUG: e.Commands: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 # ACT1/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/40 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/42 AsIs: (/37 Reuse: '!'/39 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Name/46 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Inner/44 } Tile{ AsIs: )/38 } Tile{ AsIs: )/24 AsIs: e.Commands/48 AsIs: >/1 ]] }
        refalrts::update_char(context[39], '!');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[24] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[23], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[24];
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[39], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@7/4 (/7 e.Vars0/40 )/8 t.MB/9 (/13 e.Result/42 (/37 '*'/39 e.Inner/44 )/38 )/14 (/23 s.Offset/25 # ACT_EXTRN/26 e.Name/46 )/24 e.Commands/48 >/1
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[35];
      context[45] = context[36];
      context[46] = context[31];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[34];
      if( ! refalrts::ident_term( identifiers[ident_ACTu_EXTRN], context[26] ) )
        continue;
      // closed e.Vars0 as range 40
      // closed e.Result as range 42
      // closed e.Inner as range 44
      // closed e.Name as range 46
      // closed e.Commands as range 48
      //DEBUG: t.MB: 9
      //DEBUG: s.Offset: 25
      //DEBUG: e.Vars0: 40
      //DEBUG: e.Result: 42
      //DEBUG: e.Inner: 44
      //DEBUG: e.Name: 46
      //DEBUG: e.Commands: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset/25 # ACT_EXTRN/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/40 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/42 AsIs: (/37 Reuse: '!'/39 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Name/46 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Inner/44 } Tile{ AsIs: )/38 } Tile{ AsIs: )/24 AsIs: e.Commands/48 AsIs: >/1 ]] }
      refalrts::update_char(context[39], '!');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[24] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[23], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[24];
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, context[39], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Decompile-Result@7/4 (/7 e.new17/27 )/8 t.new12/9 (/13 e.new18/29 )/14 (/23 s.new14/25 s.new15/26 s.new16/35 )/24 e.new13/33 >/1
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.new17 as range 27
      // closed e.new18 as range 29
      // closed e.new13 as range 33
      if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      do {
        // </0 & Decompile-Result@7/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # TPLS/26 s.Copy/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TPLS], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Copy: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.Copy
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z7S10C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@7$10?1/46 e.Vars-B/47 (/53 # s/55 s.Id/58 '='/57 s.Copy/56 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            context[55] = refalrts::ident_left( identifiers[ident_s], context[51], context[52] );
            if( ! context[55] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[35], context[51], context[52] ) )
              continue;
            context[57] = refalrts::char_right( '=', context[51], context[52] );
            if( ! context[57] )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.Copy: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Id: 58

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/25 # TPLS/26 s.Copy/35 {REMOVED TILE} & Decompile-Result@7$10?1/46 e.Vars-B/47 (/53 # s/55 {REMOVED TILE} e.Vars-E/49 >/43 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # s/23 } Tile{ AsIs: s.Id/58 AsIs: '='/57 AsIs: s.Copy/56 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[23], identifiers[ident_s]);
            refalrts::reinit_close_call(context[42]);
            refalrts::push_stack( vm, context[42] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[13], context[24] );
            refalrts::link_brackets( context[14], context[54] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[42] );
            res = refalrts::splice_evar( res, context[58], context[54] );
            refalrts::splice_to_freelist_open( vm, context[23], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@7/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # TPLE/26 s.CopyR/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TPLE], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.CopyR: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.CopyR
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z7S11C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@7$11?1/46 e.Vars-B/47 (/53 s.Type/56 s.IdL/57 s.IdR/58 '='/59 s.CopyL/60 s.CopyR/55 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            if( ! refalrts::repeated_stvar_right( vm, context[55], context[35], context[51], context[52] ) )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[56], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[57], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            context[59] = refalrts::char_left( '=', context[51], context[52] );
            if( ! context[59] )
              continue;
            if( ! refalrts::svar_left( context[60], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.CopyR: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Type: 56
            //DEBUG: s.IdL: 57
            //DEBUG: s.IdR: 58
            //DEBUG: s.CopyL: 60
            //9: t.MB
            //25: s.Offset
            //35: s.CopyR
            //36: e.Vars0
            //38: e.Result
            //40: e.Commands
            //47: e.Vars-B
            //49: e.Vars-E
            //55: s.CopyR
            //56: s.Type
            //57: s.IdL
            //58: s.IdR
            //60: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[61]);
            refalrts::alloc_name(vm, context[63], functions[efunc_gen_Decompilem_Result_Z7S11C2]);
            refalrts::alloc_ident(vm, context[64], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[62]);
            refalrts::push_stack( vm, context[62] );
            refalrts::push_stack( vm, context[61] );
            res = refalrts::splice_elem( res, context[62] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[61] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </61 & Decompile-Result@7$11?2/65 e.B/66 s.Type/70 e.E/68 >/62
              context[63] = 0;
              context[64] = 0;
              context[65] = refalrts::call_left( context[63], context[64], context[61], context[62] );
              context[66] = 0;
              context[67] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[68] = context[63];
                context[69] = context[64];
                if( ! refalrts::repeated_stvar_left( vm, context[70], context[56], context[68], context[69] ) )
                  continue;
                // closed e.E as range 68
                //DEBUG: t.MB: 9
                //DEBUG: s.Offset: 25
                //DEBUG: s.CopyR: 35
                //DEBUG: e.Vars0: 36
                //DEBUG: e.Result: 38
                //DEBUG: e.Commands: 40
                //DEBUG: e.Vars-B: 47
                //DEBUG: e.Vars-E: 49
                //DEBUG: s.Type: 56
                //DEBUG: s.IdL: 57
                //DEBUG: s.IdR: 58
                //DEBUG: s.CopyL: 60
                //DEBUG: e.B: 66
                //DEBUG: e.E: 68

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/25 # TPLE/26 s.CopyR/35 {REMOVED TILE} & Decompile-Result@7$11?1/46 e.Vars-B/47 (/53 s.Type/56 {REMOVED TILE} e.Vars-E/49 >/43 </61 & Decompile-Result@7$11?2/65 e.B/66 s.Type/70 e.E/68 >/62 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: s.Type70 /23 } Tile{ AsIs: s.IdL/57 AsIs: s.IdR/58 AsIs: '='/59 AsIs: s.CopyL/60 AsIs: s.CopyR/55 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[14]);
                refalrts::reinit_svar( context[23], context[70] );
                refalrts::reinit_close_call(context[42]);
                refalrts::push_stack( vm, context[42] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[13], context[24] );
                refalrts::link_brackets( context[14], context[54] );
                refalrts::link_brackets( context[7], context[8] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[24], context[42] );
                res = refalrts::splice_evar( res, context[57], context[54] );
                refalrts::splice_to_freelist_open( vm, context[23], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[66], context[67], context[63], context[64] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[61], context[62]);
            continue;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@7/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # MULS/26 s.Copy/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_MULS], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.Copy: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.Copy
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z7S12C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@7$12?1/46 e.Vars-B/47 (/53 # s/55 s.Id/58 '='/57 s.Copy/56 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            context[55] = refalrts::ident_left( identifiers[ident_s], context[51], context[52] );
            if( ! context[55] )
              continue;
            if( ! refalrts::repeated_stvar_right( vm, context[56], context[35], context[51], context[52] ) )
              continue;
            context[57] = refalrts::char_right( '=', context[51], context[52] );
            if( ! context[57] )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.Copy: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Id: 58

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Offset/25 # MULS/26 s.Copy/35 {REMOVED TILE} & Decompile-Result@7$12?1/46 e.Vars-B/47 (/53 # s/55 {REMOVED TILE} e.Vars-E/49 >/43 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: # s/23 } Tile{ AsIs: s.Id/58 AsIs: '='/57 AsIs: s.Copy/56 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[14]);
            refalrts::reinit_ident(context[23], identifiers[ident_s]);
            refalrts::reinit_close_call(context[42]);
            refalrts::push_stack( vm, context[42] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[13], context[24] );
            refalrts::link_brackets( context[14], context[54] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[42] );
            res = refalrts::splice_evar( res, context[58], context[54] );
            refalrts::splice_to_freelist_open( vm, context[23], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Decompile-Result@7/4 (/7 e.Vars0/36 )/8 t.MB/9 (/13 e.Result/38 )/14 (/23 s.Offset/25 # MULE/26 s.CopyR/35 )/24 e.Commands/40 >/1
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_MULE], context[26] ) )
          continue;
        // closed e.Vars0 as range 36
        // closed e.Result as range 38
        // closed e.Commands as range 40
        //DEBUG: t.MB: 9
        //DEBUG: s.Offset: 25
        //DEBUG: s.CopyR: 35
        //DEBUG: e.Vars0: 36
        //DEBUG: e.Result: 38
        //DEBUG: e.Commands: 40
        //9: t.MB
        //25: s.Offset
        //35: s.CopyR
        //36: e.Vars0
        //38: e.Result
        //40: e.Commands
        //45: e.Vars0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Decompilem_Result_Z7S13C1]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Decompile-Result@7$13?1/46 e.Vars-B/47 (/53 s.Type/56 s.IdL/57 s.IdR/58 '='/59 s.CopyL/60 s.CopyR/55 )/54 e.Vars-E/49 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = 0;
          context[48] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[49] = context[44];
            context[50] = context[45];
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
            if( ! context[53] )
              continue;
            refalrts::bracket_pointers(context[53], context[54]);
            if( ! refalrts::repeated_stvar_right( vm, context[55], context[35], context[51], context[52] ) )
              continue;
            // closed e.Vars-E as range 49
            if( ! refalrts::svar_left( context[56], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[57], context[51], context[52] ) )
              continue;
            if( ! refalrts::svar_left( context[58], context[51], context[52] ) )
              continue;
            context[59] = refalrts::char_left( '=', context[51], context[52] );
            if( ! context[59] )
              continue;
            if( ! refalrts::svar_left( context[60], context[51], context[52] ) )
              continue;
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            //DEBUG: t.MB: 9
            //DEBUG: s.Offset: 25
            //DEBUG: s.CopyR: 35
            //DEBUG: e.Vars0: 36
            //DEBUG: e.Result: 38
            //DEBUG: e.Commands: 40
            //DEBUG: e.Vars-B: 47
            //DEBUG: e.Vars-E: 49
            //DEBUG: s.Type: 56
            //DEBUG: s.IdL: 57
            //DEBUG: s.IdR: 58
            //DEBUG: s.CopyL: 60
            //9: t.MB
            //25: s.Offset
            //35: s.CopyR
            //36: e.Vars0
            //38: e.Result
            //40: e.Commands
            //47: e.Vars-B
            //49: e.Vars-E
            //55: s.CopyR
            //56: s.Type
            //57: s.IdL
            //58: s.IdR
            //60: s.CopyL

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[61]);
            refalrts::alloc_name(vm, context[63], functions[efunc_gen_Decompilem_Result_Z7S13C2]);
            refalrts::alloc_ident(vm, context[64], identifiers[ident_t]);
            refalrts::alloc_ident(vm, context[65], identifiers[ident_e]);
            refalrts::alloc_close_call(vm, context[62]);
            refalrts::push_stack( vm, context[62] );
            refalrts::push_stack( vm, context[61] );
            res = refalrts::splice_elem( res, context[62] );
            res = refalrts::splice_elem( res, context[65] );
            res = refalrts::splice_elem( res, context[64] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_elem( res, context[61] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </61 & Decompile-Result@7$13?2/65 e.B/66 s.Type/70 e.E/68 >/62
              context[63] = 0;
              context[64] = 0;
              context[65] = refalrts::call_left( context[63], context[64], context[61], context[62] );
              context[66] = 0;
              context[67] = 0;
              refalrts::start_e_loop(vm);
              do {
                context[68] = context[63];
                context[69] = context[64];
                if( ! refalrts::repeated_stvar_left( vm, context[70], context[56], context[68], context[69] ) )
                  continue;
                // closed e.E as range 68
                //DEBUG: t.MB: 9
                //DEBUG: s.Offset: 25
                //DEBUG: s.CopyR: 35
                //DEBUG: e.Vars0: 36
                //DEBUG: e.Result: 38
                //DEBUG: e.Commands: 40
                //DEBUG: e.Vars-B: 47
                //DEBUG: e.Vars-E: 49
                //DEBUG: s.Type: 56
                //DEBUG: s.IdL: 57
                //DEBUG: s.IdR: 58
                //DEBUG: s.CopyL: 60
                //DEBUG: e.B: 66
                //DEBUG: e.E: 68

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} s.Offset/25 # MULE/26 s.CopyR/35 {REMOVED TILE} & Decompile-Result@7$13?1/46 e.Vars-B/47 (/53 s.Type/56 {REMOVED TILE} e.Vars-E/49 >/43 </61 & Decompile-Result@7$13?2/65 e.B/66 s.Type/70 e.E/68 >/62 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 AsIs: & Decompile-Result@7/4 AsIs: (/7 AsIs: e.Vars0/36 AsIs: )/8 AsIs: t.MB/9 AsIs: (/13 AsIs: e.Result/38 HalfReuse: (/14 HalfReuse: s.Type70 /23 } Tile{ AsIs: s.IdL/57 AsIs: s.IdR/58 AsIs: '='/59 AsIs: s.CopyL/60 AsIs: s.CopyR/55 AsIs: )/54 } Tile{ AsIs: )/24 AsIs: e.Commands/40 HalfReuse: >/42 } Tile{ ]] }
                refalrts::reinit_open_bracket(context[14]);
                refalrts::reinit_svar( context[23], context[70] );
                refalrts::reinit_close_call(context[42]);
                refalrts::push_stack( vm, context[42] );
                refalrts::push_stack( vm, context[0] );
                refalrts::link_brackets( context[13], context[24] );
                refalrts::link_brackets( context[14], context[54] );
                refalrts::link_brackets( context[7], context[8] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[24], context[42] );
                res = refalrts::splice_evar( res, context[57], context[54] );
                refalrts::splice_to_freelist_open( vm, context[23], res );
                return refalrts::cSuccess;
              } while ( refalrts::open_evar_advance( context[66], context[67], context[63], context[64] ) );
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[61], context[62]);
            continue;
          } while ( refalrts::open_evar_advance( context[47], context[48], context[44], context[45] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Decompile-Result@7/4 (/7 e.Vars0/36 )/8 '$'/9 (/13 e.Result/38 )/14 (/23 s.Offset1/25 # ECOND/26 s.Offset3/35 )/24 (/44 s.Offset2/52 # LABEL/53 e.Name/42 )/45 (/48 s.Offset3/51 # POPVF/50 )/49 e.Commands/40 >/1
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[33];
      context[41] = context[34];
      if( ! refalrts::char_term( '$', context[9] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_ECOND], context[26] ) )
        continue;
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_left( context[42], context[43], context[40], context[41] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::brackets_left( context[46], context[47], context[40], context[41] );
      if( ! context[48] )
        continue;
      refalrts::bracket_pointers(context[48], context[49]);
      context[50] = refalrts::ident_right( identifiers[ident_POPVF], context[46], context[47] );
      if( ! context[50] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[51], context[35], context[46], context[47] ) )
        continue;
      if( ! refalrts::empty_seq( context[46], context[47] ) )
        continue;
      // closed e.Vars0 as range 36
      // closed e.Result as range 38
      // closed e.Commands as range 40
      if( ! refalrts::svar_left( context[52], context[42], context[43] ) )
        continue;
      context[53] = refalrts::ident_left( identifiers[ident_LABEL], context[42], context[43] );
      if( ! context[53] )
        continue;
      // closed e.Name as range 42
      //DEBUG: s.Offset1: 25
      //DEBUG: s.Offset3: 35
      //DEBUG: e.Vars0: 36
      //DEBUG: e.Result: 38
      //DEBUG: e.Commands: 40
      //DEBUG: s.Offset2: 52
      //DEBUG: e.Name: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Offset1/25 {REMOVED TILE} s.Offset3/35 {REMOVED TILE} s.Offset2/52 {REMOVED TILE} s.Offset3/51 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # Result/13 AsIs: e.Result/38 AsIs: )/14 AsIs: (/23 } Tile{ Reuse: # EndCondition/53 AsIs: e.Name/42 AsIs: )/45 HalfReuse: </48 } Tile{ HalfReuse: & Decompile-Pattern-Hole/50 } Tile{ HalfReuse: 0/26 } Tile{ AsIs: </0 Reuse: & Add/4 HalfReuse: '*'/7 } 3/54 >/55 (/56 </57 & Add/58 '*'/59 1/60 >/61 Tile{ AsIs: )/24 AsIs: (/44 } </62 & Add/63 '*'/64 2/65 >/66 Tile{ AsIs: )/8 } (/67 Tile{ AsIs: e.Vars0/36 } Tile{ AsIs: )/49 AsIs: e.Commands/40 AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[54], 3UL);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_open_bracket(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_name(vm, context[58], functions[efunc_Add]);
      refalrts::alloc_char(vm, context[59], '*');
      refalrts::alloc_number(vm, context[60], 1UL);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
      refalrts::alloc_char(vm, context[64], '*');
      refalrts::alloc_number(vm, context[65], 2UL);
      refalrts::alloc_close_call(vm, context[66]);
      refalrts::alloc_open_bracket(vm, context[67]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_ident(context[13], identifiers[ident_Result]);
      refalrts::update_ident(context[53], identifiers[ident_EndCondition]);
      refalrts::reinit_open_call(context[48]);
      refalrts::reinit_name(context[50], functions[efunc_Decompilem_Patternm_Hole]);
      refalrts::reinit_number(context[26], 0UL);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::reinit_char(context[7], '*');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[67], context[49] );
      refalrts::link_brackets( context[44], context[8] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[62] );
      refalrts::link_brackets( context[56], context[24] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[23], context[45] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[49];
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[62], context[66] );
      res = refalrts::splice_evar( res, context[24], context[44] );
      res = refalrts::splice_evar( res, context[54], context[61] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[53], context[48] );
      res = refalrts::splice_evar( res, context[9], context[23] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@7/4 (/7 e.new14/27 )/8 '$'/9 (/13 e.new15/29 )/14 (/23 s.new13/25 # OUTEST/26 )/24 e.new12/31 >/1
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[20];
    if( ! refalrts::char_term( '$', context[9] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_OUTEST], context[26] ) )
      continue;
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    // closed e.new14 as range 27
    // closed e.new15 as range 29
    // closed e.new12 as range 31
    do {
      // </0 & Decompile-Result@7/4 (/7 e.Vars0/33 )/8 '$'/9 (/13 e.Result/35 )/14 (/23 s.Offset1/25 # OUTEST/26 )/24 (/41 s.Offset2/44 # OUTEST/43 )/42 e.Commands/37 >/1
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[37], context[38] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      context[43] = refalrts::ident_right( identifiers[ident_OUTEST], context[39], context[40] );
      if( ! context[43] )
        continue;
      // closed e.Vars0 as range 33
      // closed e.Result as range 35
      // closed e.Commands as range 37
      if( ! refalrts::svar_left( context[44], context[39], context[40] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      //DEBUG: s.Offset1: 25
      //DEBUG: e.Vars0: 33
      //DEBUG: e.Result: 35
      //DEBUG: e.Commands: 37
      //DEBUG: s.Offset2: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/33 {REMOVED TILE} {REMOVED TILE} s.Offset1/25 {REMOVED TILE} s.Offset2/44 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # Result/13 AsIs: e.Result/35 AsIs: )/14 AsIs: (/23 } Tile{ Reuse: # NextSentence/26 AsIs: )/24 AsIs: (/41 } # NextSentence/45 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@7/4 AsIs: (/7 } )/46 Tile{ HalfReuse: (/43 AsIs: )/42 AsIs: e.Commands/37 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[45], identifiers[ident_NextSentence]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_ident(context[13], identifiers[ident_Result]);
      refalrts::update_ident(context[26], identifiers[ident_NextSentence]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z7]);
      refalrts::reinit_open_bracket(context[43]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[43], context[42] );
      refalrts::link_brackets( context[7], context[46] );
      refalrts::link_brackets( context[41], context[8] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[26], context[41] );
      res = refalrts::splice_evar( res, context[9], context[23] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Decompile-Result@7/4 (/7 e.Vars0/33 )/8 '$'/9 (/13 e.Result/35 )/14 (/23 s.Offset/25 # OUTEST/26 )/24 e.Commands/37 >/1
    context[33] = context[27];
    context[34] = context[28];
    context[35] = context[29];
    context[36] = context[30];
    context[37] = context[31];
    context[38] = context[32];
    // closed e.Vars0 as range 33
    // closed e.Result as range 35
    // closed e.Commands as range 37
    //DEBUG: s.Offset: 25
    //DEBUG: e.Vars0: 33
    //DEBUG: e.Result: 35
    //DEBUG: e.Commands: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Vars0/33 {REMOVED TILE} {REMOVED TILE} s.Offset/25 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # Result/13 AsIs: e.Result/35 AsIs: )/14 AsIs: (/23 } # NextSentence/39 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & Decompile-Pattern-NoHole@7/4 AsIs: (/7 } )/40 Tile{ HalfReuse: (/26 AsIs: )/24 AsIs: e.Commands/37 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[39], identifiers[ident_NextSentence]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_ident(context[13], identifiers[ident_Result]);
    refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_NoHole_Z7]);
    refalrts::reinit_open_bracket(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[26], context[24] );
    refalrts::link_brackets( context[7], context[40] );
    refalrts::link_brackets( context[23], context[8] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[26];
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[9], context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Decompile-Result@7/4 (/7 e.Vars0/15 )/8 t.MB/9 (/13 e.Result/17 )/14 e.Commands/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Vars0 as range 15
    // closed e.Result as range 17
    // closed e.Commands as range 19
    //DEBUG: t.MB: 9
    //DEBUG: e.Vars0: 15
    //DEBUG: e.Result: 17
    //DEBUG: e.Commands: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/13 } '='/21 Tile{ HalfReuse: 'C'/1 } ' '/22 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Vars0/15 AsIs: )/8 } (/23 Tile{ AsIs: t.MB/9 } Tile{ AsIs: e.Result/17 } Tile{ AsIs: )/14 } )/24 Tile{ AsIs: e.Commands/19 } Tile{ ]] }
    refalrts::alloc_char(vm, context[21], '=');
    refalrts::alloc_char(vm, context[22], ' ');
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_char(context[1], 'C');
    refalrts::reinit_number(context[0], 0UL);
    refalrts::reinit_char(context[4], '*');
    refalrts::link_brackets( context[13], context[24] );
    refalrts::link_brackets( context[23], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Result@7/4 (/7 e.Vars0/5 )/8 t.dyn0/9 (/13 e.dyn1/11 )/14 e.dyn2/2 >/1
  // closed e.Vars0 as range 5
  // closed e.dyn1 as range 11
  // closed e.dyn2 as range 2
  //DEBUG: t.dyn0: 9
  //DEBUG: e.Vars0: 5
  //DEBUG: e.dyn1: 11
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </15 & Decompile-Result@0/16 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Vars0/5 AsIs: )/8 } Tile{ AsIs: (/13 } Tile{ AsIs: t.dyn0/9 } Tile{ AsIs: e.dyn1/11 } Tile{ AsIs: )/14 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_Decompilem_Result_Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Result_Z7("Decompile-Result@7", COOKIE1_, COOKIE2_, func_gen_Decompilem_Result_Z7);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S11A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$11=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$11=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$11=1@3/4 (/7 e.Pattern-L0/21 )/8 (/11 e.Pattern-R0/23 )/12 (/15 e.Vars0/25 )/16 (/19 e.Commands0/27 )/20 s.VL/31 s.VR/32 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Pattern-L0 as range 21
    // closed e.Pattern-R0 as range 23
    // closed e.Vars0 as range 25
    // closed e.Commands0 as range 27
    if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[29], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    //DEBUG: e.Pattern-L0: 21
    //DEBUG: e.Pattern-R0: 23
    //DEBUG: e.Vars0: 25
    //DEBUG: e.Commands0: 27
    //DEBUG: s.VL: 31
    //DEBUG: s.VR: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </33 & Add/34 '*'/35 2/36 >/37 (/38 Tile{ AsIs: e.Pattern-L0/21 } (/39 # t/40 s.VL/31/41 s.VR/32/42 Tile{ HalfReuse: '='/20 AsIs: s.VL/31 AsIs: s.VR/32 HalfReuse: )/1 } s.VR/32/43 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R0/23 AsIs: )/12 AsIs: (/15 AsIs: e.Vars0/25 HalfReuse: (/16 HalfReuse: # t/19 } s.VL/31/44 s.VR/32/45 '='/46 s.VL/31/47 s.VR/32/48 )/49 )/50 Tile{ AsIs: e.Commands0/27 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[35], '*');
    refalrts::alloc_number(vm, context[36], 2UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_t]);
    refalrts::copy_stvar(vm, context[41], context[31]);
    refalrts::copy_stvar(vm, context[42], context[32]);
    refalrts::copy_stvar(vm, context[43], context[32]);
    refalrts::copy_stvar(vm, context[44], context[31]);
    refalrts::copy_stvar(vm, context[45], context[32]);
    refalrts::alloc_char(vm, context[46], '=');
    refalrts::copy_stvar(vm, context[47], context[31]);
    refalrts::copy_stvar(vm, context[48], context[32]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_char(context[20], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_ident(context[19], identifiers[ident_t]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[50] );
    refalrts::link_brackets( context[16], context[49] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[38], context[8] );
    refalrts::link_brackets( context[39], context[1] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[44], context[50] );
    res = refalrts::splice_evar( res, context[8], context[19] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[20], context[1] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$11=1@3/4 (/7 e.Pattern-L0/5 )/8 (/11 e.Pattern-R0/9 )/12 (/15 e.Vars0/13 )/16 (/19 e.Commands0/17 )/20 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Pattern-R0 as range 9
  // closed e.Vars0 as range 13
  // closed e.Commands0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Pattern-R0: 9
  //DEBUG: e.Vars0: 13
  //DEBUG: e.Commands0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & Decompile-Pattern-Hole$11=1@0/22 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Vars0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Commands0/17 AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_Decompilem_Patternm_Hole_S11A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S11A1Z3("Decompile-Pattern-Hole$11=1@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S11A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S12A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$12=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$12=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$12=1@3/4 (/7 e.Pattern-L0/21 )/8 (/11 e.Pattern-R0/23 )/12 (/15 e.Vars0/25 )/16 (/19 e.Commands0/27 )/20 s.VL/31 s.VR/32 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Pattern-L0 as range 21
    // closed e.Pattern-R0 as range 23
    // closed e.Vars0 as range 25
    // closed e.Commands0 as range 27
    if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[29], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    //DEBUG: e.Pattern-L0: 21
    //DEBUG: e.Pattern-R0: 23
    //DEBUG: e.Vars0: 25
    //DEBUG: e.Commands0: 27
    //DEBUG: s.VL: 31
    //DEBUG: s.VR: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </33 & Add/34 '*'/35 2/36 >/37 (/38 Tile{ AsIs: e.Pattern-L0/21 } )/39 (/40 s.VL/31/41 (/42 Tile{ HalfReuse: # t/20 AsIs: s.VL/31 AsIs: s.VR/32 HalfReuse: '='/1 } s.VL/31/43 Tile{ HalfReuse: s.VR32 /8 HalfReuse: )/11 AsIs: e.Pattern-R0/23 AsIs: )/12 AsIs: (/15 AsIs: e.Vars0/25 HalfReuse: (/16 HalfReuse: # t/19 } s.VL/31/44 s.VR/32/45 '='/46 s.VL/31/47 s.VR/32/48 )/49 )/50 Tile{ AsIs: e.Commands0/27 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[35], '*');
    refalrts::alloc_number(vm, context[36], 2UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::copy_stvar(vm, context[41], context[31]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::copy_stvar(vm, context[43], context[31]);
    refalrts::copy_stvar(vm, context[44], context[31]);
    refalrts::copy_stvar(vm, context[45], context[32]);
    refalrts::alloc_char(vm, context[46], '=');
    refalrts::copy_stvar(vm, context[47], context[31]);
    refalrts::copy_stvar(vm, context[48], context[32]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_ident(context[20], identifiers[ident_t]);
    refalrts::reinit_char(context[1], '=');
    refalrts::reinit_svar( context[8], context[32] );
    refalrts::reinit_close_bracket(context[11]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_ident(context[19], identifiers[ident_t]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[50] );
    refalrts::link_brackets( context[16], context[49] );
    refalrts::link_brackets( context[40], context[12] );
    refalrts::link_brackets( context[42], context[11] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[44], context[50] );
    res = refalrts::splice_evar( res, context[8], context[19] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[20], context[1] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$12=1@3/4 (/7 e.Pattern-L0/5 )/8 (/11 e.Pattern-R0/9 )/12 (/15 e.Vars0/13 )/16 (/19 e.Commands0/17 )/20 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Pattern-R0 as range 9
  // closed e.Vars0 as range 13
  // closed e.Commands0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Pattern-R0: 9
  //DEBUG: e.Vars0: 13
  //DEBUG: e.Commands0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & Decompile-Pattern-Hole$12=1@0/22 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Vars0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Commands0/17 AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_Decompilem_Patternm_Hole_S12A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S12A1Z3("Decompile-Pattern-Hole$12=1@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S12A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S18A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & Decompile-Pattern-Hole$18=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$18=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$18=1@3/4 (/7 e.Pattern-L0/21 )/8 (/11 e.Pattern-R0/23 )/12 (/15 e.Vars0/25 )/16 (/19 e.Commands0/27 )/20 s.VL/31 s.VR/32 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Pattern-L0 as range 21
    // closed e.Pattern-R0 as range 23
    // closed e.Vars0 as range 25
    // closed e.Commands0 as range 27
    if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[29], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    //DEBUG: e.Pattern-L0: 21
    //DEBUG: e.Pattern-R0: 23
    //DEBUG: e.Vars0: 25
    //DEBUG: e.Commands0: 27
    //DEBUG: s.VL: 31
    //DEBUG: s.VR: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-NoHole/4 HalfReuse: 0/7 } </33 & Add/34 '*'/35 2/36 >/37 (/38 Tile{ AsIs: e.Pattern-L0/21 } (/39 Tile{ HalfReuse: # e/20 AsIs: s.VL/31 AsIs: s.VR/32 HalfReuse: '='/1 } s.VL/31/40 Tile{ HalfReuse: s.VR32 /8 HalfReuse: )/11 AsIs: e.Pattern-R0/23 AsIs: )/12 AsIs: (/15 AsIs: e.Vars0/25 HalfReuse: (/16 HalfReuse: # e/19 } s.VL/31/41 s.VR/32/42 '='/43 s.VL/31/44 s.VR/32/45 )/46 )/47 Tile{ AsIs: e.Commands0/27 } >/48 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[35], '*');
    refalrts::alloc_number(vm, context[36], 2UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_stvar(vm, context[40], context[31]);
    refalrts::copy_stvar(vm, context[41], context[31]);
    refalrts::copy_stvar(vm, context[42], context[32]);
    refalrts::alloc_char(vm, context[43], '=');
    refalrts::copy_stvar(vm, context[44], context[31]);
    refalrts::copy_stvar(vm, context[45], context[32]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_NoHole]);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_ident(context[20], identifiers[ident_e]);
    refalrts::reinit_char(context[1], '=');
    refalrts::reinit_svar( context[8], context[32] );
    refalrts::reinit_close_bracket(context[11]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_ident(context[19], identifiers[ident_e]);
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[47] );
    refalrts::link_brackets( context[16], context[46] );
    refalrts::link_brackets( context[38], context[12] );
    refalrts::link_brackets( context[39], context[11] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[41], context[47] );
    res = refalrts::splice_evar( res, context[8], context[19] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[20], context[1] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$18=1@3/4 (/7 e.Pattern-L0/5 )/8 (/11 e.Pattern-R0/9 )/12 (/15 e.Vars0/13 )/16 (/19 e.Commands0/17 )/20 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Pattern-R0 as range 9
  // closed e.Vars0 as range 13
  // closed e.Commands0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Pattern-R0: 9
  //DEBUG: e.Vars0: 13
  //DEBUG: e.Commands0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & Decompile-Pattern-Hole$18=1@0/22 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Vars0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Commands0/17 AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_Decompilem_Patternm_Hole_S18A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S18A1Z3("Decompile-Pattern-Hole$18=1@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S18A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & Decompile-Pattern-Hole$19=1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$19=1@5/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$19=1@5/4 s.IdR0/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 e.Vars-B/32 (/38 s.Type/40 s.IdL/41 s.IdR0/42 '='/43 s.VarNoL/44 s.VarNoR/45 )/39 e.Vars-E/34 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    context[32] = 0;
    context[33] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[34] = context[30];
      context[35] = context[31];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[34], context[35] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      // closed e.Vars-E as range 34
      if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[41], context[36], context[37] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[42], context[5], context[36], context[37] ) )
        continue;
      context[43] = refalrts::char_left( '=', context[36], context[37] );
      if( ! context[43] )
        continue;
      if( ! refalrts::svar_left( context[44], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[45], context[36], context[37] ) )
        continue;
      if( ! refalrts::empty_seq( context[36], context[37] ) )
        continue;
      //DEBUG: s.IdR0: 5
      //DEBUG: e.Pattern-L0: 22
      //DEBUG: e.Pattern-R0: 24
      //DEBUG: e.Vars0: 26
      //DEBUG: e.Commands0: 28
      //DEBUG: e.Vars-B: 32
      //DEBUG: e.Vars-E: 34
      //DEBUG: s.Type: 40
      //DEBUG: s.IdL: 41
      //DEBUG: s.VarNoL: 44
      //DEBUG: s.VarNoR: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.IdR0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/32 {REMOVED TILE} s.IdR0/42 {REMOVED TILE} s.VarNoL/44 s.VarNoR/45 {REMOVED TILE} e.Vars-E/34 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=2@3/4 } Tile{ AsIs: (/8 } Tile{ AsIs: e.Pattern-L0/22 } Tile{ HalfReuse: )/38 AsIs: s.Type/40 AsIs: s.IdL/41 } Tile{ HalfReuse: s.IdR042 /9 AsIs: (/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/28 AsIs: )/21 } Tile{ Reuse: '*'/43 } </46 Tile{ HalfReuse: & Add/39 } '*'/47 1/48 >/49 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_char(vm, context[47], '*');
      refalrts::alloc_number(vm, context[48], 1UL);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A2Z3]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::reinit_svar( context[9], context[42] );
      refalrts::update_char(context[43], '*');
      refalrts::reinit_name(context[39], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[46] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[38] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[9], context[21] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[8] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[32], context[33], context[30], context[31] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$19=1@5/4 s.IdR0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.IdR0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$19=1@0/4 AsIs: s.IdR0/5 } 0/22 '*'/23 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[22], 0UL);
  refalrts::alloc_char(vm, context[23], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S19A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A1Z5("Decompile-Pattern-Hole$19=1@5", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A1Z5);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & Decompile-Pattern-Hole$20=1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$20=1@5/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$20=1@5/4 s.IdR0/5 (/8 e.Pattern-L0/22 )/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 e.Vars-B/32 (/38 s.Type/40 s.IdL/41 s.IdR0/42 '='/43 s.VarNoL/44 s.VarNoR/45 )/39 e.Vars-E/34 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    context[32] = 0;
    context[33] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[34] = context[30];
      context[35] = context[31];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[34], context[35] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      // closed e.Vars-E as range 34
      if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[41], context[36], context[37] ) )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[42], context[5], context[36], context[37] ) )
        continue;
      context[43] = refalrts::char_left( '=', context[36], context[37] );
      if( ! context[43] )
        continue;
      if( ! refalrts::svar_left( context[44], context[36], context[37] ) )
        continue;
      if( ! refalrts::svar_left( context[45], context[36], context[37] ) )
        continue;
      if( ! refalrts::empty_seq( context[36], context[37] ) )
        continue;
      //DEBUG: s.IdR0: 5
      //DEBUG: e.Pattern-L0: 22
      //DEBUG: e.Pattern-R0: 24
      //DEBUG: e.Vars0: 26
      //DEBUG: e.Commands0: 28
      //DEBUG: e.Vars-B: 32
      //DEBUG: e.Vars-E: 34
      //DEBUG: s.Type: 40
      //DEBUG: s.IdL: 41
      //DEBUG: s.VarNoL: 44
      //DEBUG: s.VarNoR: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.IdR0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Vars-B/32 {REMOVED TILE} s.IdR0/42 {REMOVED TILE} s.VarNoL/44 s.VarNoR/45 {REMOVED TILE} e.Vars-E/34 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=2@3/4 } Tile{ AsIs: (/8 } Tile{ AsIs: e.Pattern-L0/22 } Tile{ HalfReuse: )/38 AsIs: s.Type/40 AsIs: s.IdL/41 } Tile{ HalfReuse: s.IdR042 /9 AsIs: (/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/28 AsIs: )/21 } Tile{ Reuse: '*'/43 } </46 Tile{ HalfReuse: & Add/39 } '*'/47 1/48 >/49 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_char(vm, context[47], '*');
      refalrts::alloc_number(vm, context[48], 1UL);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A2Z3]);
      refalrts::reinit_close_bracket(context[38]);
      refalrts::reinit_svar( context[9], context[42] );
      refalrts::update_char(context[43], '*');
      refalrts::reinit_name(context[39], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[46] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[38] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[9], context[21] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[8] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[32], context[33], context[30], context[31] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$20=1@5/4 s.IdR0/5 (/8 e.Pattern-L0/6 )/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 6
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.IdR0: 5
  //DEBUG: e.Pattern-L0: 6
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole$20=1@0/4 AsIs: s.IdR0/5 } 0/22 '*'/23 Tile{ AsIs: (/8 AsIs: e.Pattern-L0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[22], 0UL);
  refalrts::alloc_char(vm, context[23], '*');
  refalrts::update_name(context[4], functions[efunc_gen_Decompilem_Patternm_Hole_S20A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A1Z5("Decompile-Pattern-Hole$20=1@5", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A1Z5);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S21A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & Decompile-Pattern-Hole$21=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$21=1@3/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$21=1@3/4 (/7 e.Pattern-L0/22 )/8 s.R0/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.LB/32 s.RB/33 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.R0: 9
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.LB: 32
    //DEBUG: s.RB: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </34 & Add/35 '*'/36 2/37 >/38 (/39 Tile{ AsIs: e.Pattern-L0/22 } Tile{ AsIs: (/20 } # LB/40 Tile{ AsIs: )/21 AsIs: s.LB/32 } )/41 (/42 Tile{ AsIs: s.RB/33 } (/43 # RB/44 )/45 (/46 # Hole/47 Tile{ HalfReuse: s.RB33 /8 AsIs: s.R0/9 HalfReuse: )/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 AsIs: )/17 } Tile{ AsIs: e.Commands0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[36], '*');
    refalrts::alloc_number(vm, context[37], 2UL);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_LB]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_ident(vm, context[44], identifiers[ident_RB]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_ident(vm, context[47], identifiers[ident_Hole]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_svar( context[8], context[33] );
    refalrts::reinit_close_bracket(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[42], context[13] );
    refalrts::link_brackets( context[46], context[12] );
    refalrts::link_brackets( context[43], context[45] );
    refalrts::link_brackets( context[39], context[41] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[8], context[17] );
    res = refalrts::splice_evar( res, context[43], context[47] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[21], context[32] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[34], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$21=1@3/4 (/7 e.Pattern-L0/5 )/8 s.R0/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.R0: 9
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 & Decompile-Pattern-Hole$21=1@0/23 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: s.R0/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_Decompilem_Patternm_Hole_S21A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S21A1Z3("Decompile-Pattern-Hole$21=1@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S21A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S22A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & Decompile-Pattern-Hole$22=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$22=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$22=1@3/4 (/7 e.Pattern-L0/21 )/8 (/11 e.Pattern-R0/23 )/12 (/15 e.Vars0/25 )/16 (/19 e.Commands0/27 )/20 s.LB/31 s.RB/32 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Pattern-L0 as range 21
    // closed e.Pattern-R0 as range 23
    // closed e.Vars0 as range 25
    // closed e.Commands0 as range 27
    if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[29], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    //DEBUG: e.Pattern-L0: 21
    //DEBUG: e.Pattern-R0: 23
    //DEBUG: e.Vars0: 25
    //DEBUG: e.Commands0: 27
    //DEBUG: s.LB: 31
    //DEBUG: s.RB: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </33 & Add/34 '*'/35 2/36 >/37 Tile{ AsIs: (/19 } Tile{ AsIs: e.Pattern-L0/21 } )/38 (/39 s.LB/31/40 (/41 # LB/42 )/43 (/44 Tile{ HalfReuse: # Hole/20 AsIs: s.LB/31 AsIs: s.RB/32 HalfReuse: )/1 } (/45 Tile{ HalfReuse: # RB/8 HalfReuse: )/11 AsIs: e.Pattern-R0/23 AsIs: )/12 AsIs: (/15 AsIs: e.Vars0/25 AsIs: )/16 } Tile{ AsIs: e.Commands0/27 } >/46 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[35], '*');
    refalrts::alloc_number(vm, context[36], 2UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_stvar(vm, context[40], context[31]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_ident(vm, context[42], identifiers[ident_LB]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_ident(context[20], identifiers[ident_Hole]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_ident(context[8], identifiers[ident_RB]);
    refalrts::reinit_close_bracket(context[11]);
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[39], context[12] );
    refalrts::link_brackets( context[45], context[11] );
    refalrts::link_brackets( context[44], context[1] );
    refalrts::link_brackets( context[41], context[43] );
    refalrts::link_brackets( context[19], context[38] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[46] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_evar( res, context[20], context[1] );
    res = refalrts::splice_evar( res, context[38], context[44] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[33], context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$22=1@3/4 (/7 e.Pattern-L0/5 )/8 (/11 e.Pattern-R0/9 )/12 (/15 e.Vars0/13 )/16 (/19 e.Commands0/17 )/20 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Pattern-R0 as range 9
  // closed e.Vars0 as range 13
  // closed e.Commands0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Pattern-R0: 9
  //DEBUG: e.Vars0: 13
  //DEBUG: e.Commands0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & Decompile-Pattern-Hole$22=1@0/22 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Vars0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Commands0/17 AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_Decompilem_Patternm_Hole_S22A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S22A1Z3("Decompile-Pattern-Hole$22=1@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S22A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S25A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$25=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$25=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$25=1@3/4 (/7 e.Pattern-L0/21 )/8 (/11 e.Pattern-R0/23 )/12 (/15 e.Vars0/25 )/16 (/19 e.Commands0/27 )/20 s.VL/31 s.VR/32 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Pattern-L0 as range 21
    // closed e.Pattern-R0 as range 23
    // closed e.Vars0 as range 25
    // closed e.Commands0 as range 27
    if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
      continue;
    if( ! refalrts::svar_left( context[32], context[29], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    //DEBUG: e.Pattern-L0: 21
    //DEBUG: e.Pattern-R0: 23
    //DEBUG: e.Vars0: 25
    //DEBUG: e.Commands0: 27
    //DEBUG: s.VL: 31
    //DEBUG: s.VR: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </33 & Add/34 '*'/35 2/36 >/37 (/38 Tile{ AsIs: e.Pattern-L0/21 } (/39 # e/40 s.VL/31/41 s.VR/32/42 Tile{ HalfReuse: '='/20 AsIs: s.VL/31 AsIs: s.VR/32 HalfReuse: )/1 } s.VR/32/43 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R0/23 AsIs: )/12 AsIs: (/15 AsIs: e.Vars0/25 HalfReuse: (/16 HalfReuse: # e/19 } s.VL/31/44 s.VR/32/45 '='/46 s.VL/31/47 s.VR/32/48 )/49 )/50 Tile{ AsIs: e.Commands0/27 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[35], '*');
    refalrts::alloc_number(vm, context[36], 2UL);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_e]);
    refalrts::copy_stvar(vm, context[41], context[31]);
    refalrts::copy_stvar(vm, context[42], context[32]);
    refalrts::copy_stvar(vm, context[43], context[32]);
    refalrts::copy_stvar(vm, context[44], context[31]);
    refalrts::copy_stvar(vm, context[45], context[32]);
    refalrts::alloc_char(vm, context[46], '=');
    refalrts::copy_stvar(vm, context[47], context[31]);
    refalrts::copy_stvar(vm, context[48], context[32]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_char(context[20], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_ident(context[19], identifiers[ident_e]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[50] );
    refalrts::link_brackets( context[16], context[49] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[38], context[8] );
    refalrts::link_brackets( context[39], context[1] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[44], context[50] );
    res = refalrts::splice_evar( res, context[8], context[19] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[20], context[1] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[33], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$25=1@3/4 (/7 e.Pattern-L0/5 )/8 (/11 e.Pattern-R0/9 )/12 (/15 e.Vars0/13 )/16 (/19 e.Commands0/17 )/20 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Pattern-R0 as range 9
  // closed e.Vars0 as range 13
  // closed e.Commands0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Pattern-R0: 9
  //DEBUG: e.Vars0: 13
  //DEBUG: e.Commands0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & Decompile-Pattern-Hole$25=1@0/22 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Vars0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Commands0/17 AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_Decompilem_Patternm_Hole_S25A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S25A1Z3("Decompile-Pattern-Hole$25=1@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S25A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S26A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Decompile-Pattern-Hole$26=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$26=1@3/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$26=1@3/4 (/7 e.Pattern-L0/22 )/8 s.Char0/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.VL/32 s.VR/33 s.CharPos/34 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.Char0: 9
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.VL: 32
    //DEBUG: s.VR: 33
    //DEBUG: s.CharPos: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </35 & Decompile-Pattern-Hole/36 0/37 </38 & Add/39 '*'/40 Tile{ HalfReuse: 3/0 HalfReuse: >/4 AsIs: (/7 AsIs: e.Pattern-L0/22 HalfReuse: (/8 } # e/41 s.VL/32/42 s.VR/33/43 Tile{ HalfReuse: '='/21 AsIs: s.VL/32 AsIs: s.VR/33 } )/44 (/45 # C/46 Tile{ AsIs: s.Char0/9 } )/47 Tile{ AsIs: s.CharPos/34 } )/48 Tile{ AsIs: (/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: # e/20 } s.VL/32/49 s.VR/33/50 '='/51 s.VL/32/52 s.VR/33/53 )/54 )/55 Tile{ AsIs: e.Commands0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[37], 0UL);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[40], '*');
    refalrts::alloc_ident(vm, context[41], identifiers[ident_e]);
    refalrts::copy_stvar(vm, context[42], context[32]);
    refalrts::copy_stvar(vm, context[43], context[33]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::alloc_ident(vm, context[46], identifiers[ident_C]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::copy_stvar(vm, context[49], context[32]);
    refalrts::copy_stvar(vm, context[50], context[33]);
    refalrts::alloc_char(vm, context[51], '=');
    refalrts::copy_stvar(vm, context[52], context[32]);
    refalrts::copy_stvar(vm, context[53], context[33]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::reinit_number(context[0], 3UL);
    refalrts::reinit_close_call(context[4]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_char(context[21], '=');
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_e]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[35] );
    refalrts::link_brackets( context[16], context[55] );
    refalrts::link_brackets( context[17], context[54] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[7], context[48] );
    refalrts::link_brackets( context[45], context[47] );
    refalrts::link_brackets( context[8], context[44] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[49], context[55] );
    res = refalrts::splice_evar( res, context[12], context[20] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[44], context[46] );
    res = refalrts::splice_evar( res, context[21], context[33] );
    res = refalrts::splice_evar( res, context[41], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$26=1@3/4 (/7 e.Pattern-L0/5 )/8 s.Char0/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Char0: 9
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 & Decompile-Pattern-Hole$26=1@0/23 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: s.Char0/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_Decompilem_Patternm_Hole_S26A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S26A1Z3("Decompile-Pattern-Hole$26=1@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S26A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S27A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 64 elems
  refalrts::Iter context[64];
  refalrts::zeros( context, 64 );
  // </0 & Decompile-Pattern-Hole$27=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$27=1@3/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$27=1@3/4 (/7 e.Pattern-L0/22 )/8 s.R0/9 (/12 e.Pattern-R0/24 )/13 (/16 e.Vars0/26 )/17 (/20 e.Commands0/28 )/21 s.VL/32 s.VR/33 s.LB/34 s.RB/35 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Pattern-L0 as range 22
    // closed e.Pattern-R0 as range 24
    // closed e.Vars0 as range 26
    // closed e.Commands0 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
      continue;
    if( ! refalrts::svar_left( context[35], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    //DEBUG: s.R0: 9
    //DEBUG: e.Pattern-L0: 22
    //DEBUG: e.Pattern-R0: 24
    //DEBUG: e.Vars0: 26
    //DEBUG: e.Commands0: 28
    //DEBUG: s.VL: 32
    //DEBUG: s.VR: 33
    //DEBUG: s.LB: 34
    //DEBUG: s.RB: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Decompile-Pattern-Hole/4 HalfReuse: 0/7 } </36 & Add/37 '*'/38 4/39 >/40 (/41 Tile{ AsIs: e.Pattern-L0/22 } (/42 # e/43 s.VL/32/44 s.VR/33/45 Tile{ HalfReuse: '='/21 AsIs: s.VL/32 AsIs: s.VR/33 } )/46 (/47 # LB/48 )/49 Tile{ AsIs: s.LB/34 } )/50 (/51 Tile{ AsIs: s.RB/35 } (/52 # RB/53 )/54 (/55 # Hole/56 Tile{ HalfReuse: s.RB35 /8 AsIs: s.R0/9 HalfReuse: )/12 AsIs: e.Pattern-R0/24 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/26 HalfReuse: (/17 HalfReuse: # e/20 } s.VL/32/57 s.VR/33/58 '='/59 s.VL/32/60 s.VR/33/61 )/62 )/63 Tile{ AsIs: e.Commands0/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[38], '*');
    refalrts::alloc_number(vm, context[39], 4UL);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_ident(vm, context[43], identifiers[ident_e]);
    refalrts::copy_stvar(vm, context[44], context[32]);
    refalrts::copy_stvar(vm, context[45], context[33]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_ident(vm, context[48], identifiers[ident_LB]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_open_bracket(vm, context[51]);
    refalrts::alloc_open_bracket(vm, context[52]);
    refalrts::alloc_ident(vm, context[53], identifiers[ident_RB]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_ident(vm, context[56], identifiers[ident_Hole]);
    refalrts::copy_stvar(vm, context[57], context[32]);
    refalrts::copy_stvar(vm, context[58], context[33]);
    refalrts::alloc_char(vm, context[59], '=');
    refalrts::copy_stvar(vm, context[60], context[32]);
    refalrts::copy_stvar(vm, context[61], context[33]);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_close_bracket(vm, context[63]);
    refalrts::update_name(context[4], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_char(context[21], '=');
    refalrts::reinit_svar( context[8], context[35] );
    refalrts::reinit_close_bracket(context[12]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_e]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[63] );
    refalrts::link_brackets( context[17], context[62] );
    refalrts::link_brackets( context[51], context[13] );
    refalrts::link_brackets( context[55], context[12] );
    refalrts::link_brackets( context[52], context[54] );
    refalrts::link_brackets( context[41], context[50] );
    refalrts::link_brackets( context[47], context[49] );
    refalrts::link_brackets( context[42], context[46] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[57], context[63] );
    res = refalrts::splice_evar( res, context[8], context[20] );
    res = refalrts::splice_evar( res, context[52], context[56] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[46], context[49] );
    res = refalrts::splice_evar( res, context[21], context[33] );
    res = refalrts::splice_evar( res, context[42], context[45] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[36], context[41] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$27=1@3/4 (/7 e.Pattern-L0/5 )/8 s.R0/9 (/12 e.Pattern-R0/10 )/13 (/16 e.Vars0/14 )/17 (/20 e.Commands0/18 )/21 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Pattern-R0 as range 10
  // closed e.Vars0 as range 14
  // closed e.Commands0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.R0: 9
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Pattern-R0: 10
  //DEBUG: e.Vars0: 14
  //DEBUG: e.Commands0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 & Decompile-Pattern-Hole$27=1@0/23 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: s.R0/9 AsIs: (/12 AsIs: e.Pattern-R0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Vars0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Commands0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_Decompilem_Patternm_Hole_S27A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S27A1Z3("Decompile-Pattern-Hole$27=1@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S27A1Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S19A2Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$19=2@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$19=2@3/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 (/14 e.new5/12 )/15 (/18 e.new6/16 )/19 (/22 e.new7/20 )/23 e.new8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.new5 as range 12
  // closed e.new6 as range 16
  // closed e.new7 as range 20
  // closed e.new8 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$19=2@3/4 (/7 e.Pattern-L0/24 )/8 s.Type0/9 s.IdL0/10 s.IdR0/11 (/14 e.Pattern-R0/26 )/15 (/18 e.Vars0/28 )/19 (/22 e.Commands0/30 )/23 s.VL/34 s.VR/35 >/1
    context[24] = context[5];
    context[25] = context[6];
    context[26] = context[12];
    context[27] = context[13];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[2];
    context[33] = context[3];
    // closed e.Pattern-L0 as range 24
    // closed e.Pattern-R0 as range 26
    // closed e.Vars0 as range 28
    // closed e.Commands0 as range 30
    if( ! refalrts::svar_left( context[34], context[32], context[33] ) )
      continue;
    if( ! refalrts::svar_left( context[35], context[32], context[33] ) )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    //DEBUG: s.Type0: 9
    //DEBUG: s.IdL0: 10
    //DEBUG: s.IdR0: 11
    //DEBUG: e.Pattern-L0: 24
    //DEBUG: e.Pattern-R0: 26
    //DEBUG: e.Vars0: 28
    //DEBUG: e.Commands0: 30
    //DEBUG: s.VL: 34
    //DEBUG: s.VR: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </36 & Decompile-Pattern-Hole/37 0/38 </39 & Add/40 '*'/41 Tile{ HalfReuse: 2/0 HalfReuse: >/4 AsIs: (/7 AsIs: e.Pattern-L0/24 HalfReuse: (/8 AsIs: s.Type0/9 AsIs: s.IdL0/10 AsIs: s.IdR0/11 HalfReuse: '='/14 } s.VL/34/42 s.VR/35/43 )/44 s.VR/35/45 )/46 (/47 Tile{ AsIs: e.Pattern-R0/26 } Tile{ AsIs: )/15 AsIs: (/18 AsIs: e.Vars0/28 HalfReuse: (/19 HalfReuse: s.Type09 /22 } s.IdL0/10/48 s.IdR0/11/49 Tile{ HalfReuse: '='/23 AsIs: s.VL/34 AsIs: s.VR/35 HalfReuse: )/1 } )/50 Tile{ AsIs: e.Commands0/30 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[38], 0UL);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[41], '*');
    refalrts::copy_stvar(vm, context[42], context[34]);
    refalrts::copy_stvar(vm, context[43], context[35]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::copy_stvar(vm, context[45], context[35]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::copy_stvar(vm, context[48], context[10]);
    refalrts::copy_stvar(vm, context[49], context[11]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::reinit_number(context[0], 2UL);
    refalrts::reinit_close_call(context[4]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_char(context[14], '=');
    refalrts::reinit_open_bracket(context[19]);
    refalrts::reinit_svar( context[22], context[9] );
    refalrts::reinit_char(context[23], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[18], context[50] );
    refalrts::link_brackets( context[19], context[1] );
    refalrts::link_brackets( context[47], context[15] );
    refalrts::link_brackets( context[7], context[46] );
    refalrts::link_brackets( context[8], context[44] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_evar( res, context[23], context[1] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[15], context[22] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[42], context[47] );
    res = refalrts::splice_evar( res, context[0], context[14] );
    res = refalrts::splice_evar( res, context[36], context[41] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$19=2@3/4 (/7 e.Pattern-L0/5 )/8 s.Type0/9 s.IdL0/10 s.IdR0/11 (/14 e.Pattern-R0/12 )/15 (/18 e.Vars0/16 )/19 (/22 e.Commands0/20 )/23 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Pattern-R0 as range 12
  // closed e.Vars0 as range 16
  // closed e.Commands0 as range 20
  // closed e.dyn as range 2
  //DEBUG: s.Type0: 9
  //DEBUG: s.IdL0: 10
  //DEBUG: s.IdR0: 11
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Pattern-R0: 12
  //DEBUG: e.Vars0: 16
  //DEBUG: e.Commands0: 20
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </24 & Decompile-Pattern-Hole$19=2@0/25 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: s.Type0/9 AsIs: s.IdL0/10 AsIs: s.IdR0/11 AsIs: (/14 AsIs: e.Pattern-R0/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars0/16 AsIs: )/19 AsIs: (/22 AsIs: e.Commands0/20 AsIs: )/23 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_Decompilem_Patternm_Hole_S19A2Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[24], context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S19A2Z3("Decompile-Pattern-Hole$19=2@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S19A2Z3);


static refalrts::FnResult func_gen_Decompilem_Patternm_Hole_S20A2Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Decompile-Pattern-Hole$20=2@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Decompile-Pattern-Hole$20=2@3/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 (/14 e.new5/12 )/15 (/18 e.new6/16 )/19 (/22 e.new7/20 )/23 e.new8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.new5 as range 12
  // closed e.new6 as range 16
  // closed e.new7 as range 20
  // closed e.new8 as range 2
  do {
    // </0 & Decompile-Pattern-Hole$20=2@3/4 (/7 e.Pattern-L0/24 )/8 s.Type0/9 s.IdL0/10 s.IdR0/11 (/14 e.Pattern-R0/26 )/15 (/18 e.Vars0/28 )/19 (/22 e.Commands0/30 )/23 s.VL/34 s.VR/35 >/1
    context[24] = context[5];
    context[25] = context[6];
    context[26] = context[12];
    context[27] = context[13];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[2];
    context[33] = context[3];
    // closed e.Pattern-L0 as range 24
    // closed e.Pattern-R0 as range 26
    // closed e.Vars0 as range 28
    // closed e.Commands0 as range 30
    if( ! refalrts::svar_left( context[34], context[32], context[33] ) )
      continue;
    if( ! refalrts::svar_left( context[35], context[32], context[33] ) )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    //DEBUG: s.Type0: 9
    //DEBUG: s.IdL0: 10
    //DEBUG: s.IdR0: 11
    //DEBUG: e.Pattern-L0: 24
    //DEBUG: e.Pattern-R0: 26
    //DEBUG: e.Vars0: 28
    //DEBUG: e.Commands0: 30
    //DEBUG: s.VL: 34
    //DEBUG: s.VR: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </36 & Decompile-Pattern-Hole/37 0/38 </39 & Add/40 '*'/41 Tile{ HalfReuse: 2/0 HalfReuse: >/4 AsIs: (/7 AsIs: e.Pattern-L0/24 AsIs: )/8 } (/42 s.VL/34/43 (/44 Tile{ AsIs: s.Type0/9 AsIs: s.IdL0/10 AsIs: s.IdR0/11 } '='/45 s.VL/34/46 s.VR/35/47 Tile{ HalfReuse: )/14 AsIs: e.Pattern-R0/26 AsIs: )/15 AsIs: (/18 AsIs: e.Vars0/28 HalfReuse: (/19 HalfReuse: s.Type09 /22 } s.IdL0/10/48 s.IdR0/11/49 Tile{ HalfReuse: '='/23 AsIs: s.VL/34 AsIs: s.VR/35 HalfReuse: )/1 } )/50 Tile{ AsIs: e.Commands0/30 } >/51 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Decompilem_Patternm_Hole]);
    refalrts::alloc_number(vm, context[38], 0UL);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_Add]);
    refalrts::alloc_char(vm, context[41], '*');
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::copy_stvar(vm, context[43], context[34]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_char(vm, context[45], '=');
    refalrts::copy_stvar(vm, context[46], context[34]);
    refalrts::copy_stvar(vm, context[47], context[35]);
    refalrts::copy_stvar(vm, context[48], context[10]);
    refalrts::copy_stvar(vm, context[49], context[11]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::reinit_number(context[0], 2UL);
    refalrts::reinit_close_call(context[4]);
    refalrts::reinit_close_bracket(context[14]);
    refalrts::reinit_open_bracket(context[19]);
    refalrts::reinit_svar( context[22], context[9] );
    refalrts::reinit_char(context[23], '=');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[18], context[50] );
    refalrts::link_brackets( context[19], context[1] );
    refalrts::link_brackets( context[42], context[15] );
    refalrts::link_brackets( context[44], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_evar( res, context[23], context[1] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[14], context[22] );
    res = refalrts::splice_evar( res, context[45], context[47] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    res = refalrts::splice_evar( res, context[42], context[44] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[36], context[41] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Decompile-Pattern-Hole$20=2@3/4 (/7 e.Pattern-L0/5 )/8 s.Type0/9 s.IdL0/10 s.IdR0/11 (/14 e.Pattern-R0/12 )/15 (/18 e.Vars0/16 )/19 (/22 e.Commands0/20 )/23 e.dyn/2 >/1
  // closed e.Pattern-L0 as range 5
  // closed e.Pattern-R0 as range 12
  // closed e.Vars0 as range 16
  // closed e.Commands0 as range 20
  // closed e.dyn as range 2
  //DEBUG: s.Type0: 9
  //DEBUG: s.IdL0: 10
  //DEBUG: s.IdR0: 11
  //DEBUG: e.Pattern-L0: 5
  //DEBUG: e.Pattern-R0: 12
  //DEBUG: e.Vars0: 16
  //DEBUG: e.Commands0: 20
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </24 & Decompile-Pattern-Hole$20=2@0/25 Tile{ HalfReuse: 0/0 HalfReuse: '*'/4 AsIs: (/7 AsIs: e.Pattern-L0/5 AsIs: )/8 AsIs: s.Type0/9 AsIs: s.IdL0/10 AsIs: s.IdR0/11 AsIs: (/14 AsIs: e.Pattern-R0/12 AsIs: )/15 AsIs: (/18 AsIs: e.Vars0/16 AsIs: )/19 AsIs: (/22 AsIs: e.Commands0/20 AsIs: )/23 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_Decompilem_Patternm_Hole_S20A2Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[24], context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Decompilem_Patternm_Hole_S20A2Z3("Decompile-Pattern-Hole$20=2@3", COOKIE1_, COOKIE2_, func_gen_Decompilem_Patternm_Hole_S20A2Z3);


//End of file
