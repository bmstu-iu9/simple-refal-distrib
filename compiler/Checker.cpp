// This file automatically generated from 'Checker.ref'
// Don't edit! Edit 'Checker.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_4178161928_561946651
#define COOKIE1_ 4178161928U
#define COOKIE2_ 561946651U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_gen_Reduce_Z1 = 18,
  efunc_gen_CheckPseudofunctions_A1 = 19,
  efunc_gen_Map_Z2 = 20,
  efunc_gen_FindErrors_A1 = 21,
  efunc_Upper = 22,
  efunc_Explode = 23,
  efunc_gen_Fetch_Z1 = 24,
  efunc_CleanupValidEntry = 25,
  efunc_CheckValidUsings = 26,
  efunc_gen_Map_Z1 = 27,
  efunc_CheckScreening = 28,
  efunc_gen_DoMapAccum_Z1 = 29,
  efunc_gen_FindErrors_A3 = 30,
  efunc_gen_CheckSpecs_A1 = 31,
  efunc_gen_FindErrors_A2 = 32,
  efunc_CheckSpecsm_Redefine = 33,
  efunc_gen_DoMapAccum_Z2 = 34,
  efunc_gen_CheckPseudofunctions_A1L1S1C1 = 35,
  efunc_gen_CheckPseudofunctions_A1L1S1C2 = 36,
  efunc_Pseudofunctions = 37,
  efunc_gen_CheckPseudofunctions_A1L1S2C1 = 38,
  efunc_gen_CheckPseudofunctions_A1L1S3C1 = 39,
  efunc_gen_CheckPseudofunctions_A1L1S4C1 = 40,
  efunc_CheckPseudofunctionsm_Entry = 41,
  efunc_CheckPseudofunctionsm_Body = 42,
  efunc_gen_CheckPseudofunctionsm_Body_S1C1 = 43,
  efunc_WholeEVar = 44,
  efunc_gen_CheckPseudofunctionsm_Body_S1C2 = 45,
  efunc_gen_CheckPseudofunctionsm_Body_S1C3 = 46,
  efunc_gen_CheckSpecs_A3 = 47,
  efunc_CheckSpecsm_Functions = 48,
  efunc_gen_CheckSpecs_A2 = 49,
  efunc_gen_Map_Z3 = 50,
  efunc_gen_Map_Z4 = 51,
  efunc_gen_CheckSpecsm_Formats_L1S1B1S1B1 = 52,
  efunc_ErrorsForRepeatedVariables = 53,
  efunc_IsHardPattern = 54,
  efunc_gen_IsHardPattern_S4B1 = 55,
  efunc_gen_IsHardPattern_S5B1 = 56,
  efunc_gen_IsHardPattern_S6B1 = 57,
  efunc_gen_IsHardPattern_S7B1 = 58,
  efunc_gen_IsHardPattern_S8C1 = 59,
  efunc_IsHardTerm = 60,
  efunc_gen_IsHardPattern_S9C1 = 61,
  efunc_gen_Map_Z5 = 62,
  efunc_gen_Map_Z6 = 63,
  efunc_gen_CheckSpecsm_Functions_S1A1B1 = 64,
  efunc_ValidBodyForSpec = 65,
  efunc_gen_CheckSpecsm_Functions_S1A1 = 66,
  efunc_gen_CheckSpecsm_Functions_S2A1B1 = 67,
  efunc_gen_CheckSpecsm_Functions_S2A1 = 68,
  efunc_gen_ValidBodyForSpec_S1A1 = 69,
  efunc_gen_Reduce_Z2 = 70,
  efunc_CheckSpecm_RepeatingVarInStaticParams = 71,
  efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1B1S1B1 = 72,
  efunc_ExtractVariablesm_Expr = 73,
  efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1C1 = 74,
  efunc_IsSpecStaticVar = 75,
  efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1B1 = 76,
  efunc_CheckSpecm_VarTypeMatching = 77,
  efunc_gen_Reduce_Z3 = 78,
  efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1 = 79,
  efunc_RemovePosm_Expr = 80,
  efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1 = 81,
  efunc_GenericMatch = 82,
  efunc_Type = 83,
  efunc_gen_IsSpecStaticVar_B1 = 84,
  efunc_gen_Map_Z7 = 85,
  efunc_gen_FindInvalidDriveInline_A3L1S1C1 = 86,
  efunc_gen_FindInvalidDriveInline_A3L1S1A2 = 87,
  efunc_gen_Map_Z8 = 88,
  efunc_gen_FindInvalidDriveInline_A3 = 89,
  efunc_gen_DoMapAccum_Z3 = 90,
  efunc_gen_FindInvalidDriveInline_A2 = 91,
  efunc_gen_Map_Z9 = 92,
  efunc_gen_DoMapAccum_Z4 = 93,
  efunc_gen_FindInvalidDriveInline_A1 = 94,
  efunc_gen_Map_Z10 = 95,
  efunc_gen_FindFinalInitEntry_L1S1C1 = 96,
  efunc_OneOf = 97,
  efunc_gen_Map_Z11 = 98,
  efunc_gen_CheckSentenceRec_Z1 = 99,
  efunc_gen_CheckFunctionBodyRec_D2 = 100,
  efunc_CheckSentenceRec = 101,
  efunc_gen_CheckSentence_A1Z1 = 102,
  efunc_CheckPatternm_WarnRepeatedRec = 103,
  efunc_CheckPatternm_Flatten = 104,
  efunc_gen_Map_Z12 = 105,
  efunc_gen_CheckSentence_D1 = 106,
  efunc_gen_CheckSentence_A1Z2 = 107,
  efunc_gen_Map_Z13 = 108,
  efunc_gen_CheckSentence_A4 = 109,
  efunc_gen_CheckSentence_A3 = 110,
  efunc_CheckResult = 111,
  efunc_gen_CheckSentence_A2 = 112,
  efunc_DoCheckAssignments = 113,
  efunc_FixBacktrackForOpenEVars = 114,
  efunc_gen_CheckPatternm_WarnRepeated_D2 = 115,
  efunc_gen_CheckSentence_A1 = 116,
  efunc_gen_DoCheckAssignments_S2A1Z1 = 117,
  efunc_gen_DoCheckAssignments_Z0 = 118,
  efunc_gen_DoCheckAssignments_S2A5 = 119,
  efunc_gen_DoCheckAssignments_S2A4Z1 = 120,
  efunc_gen_DoCheckAssignments_S2A4Z2 = 121,
  efunc_gen_DoCheckAssignments_S2A4 = 122,
  efunc_gen_DoCheckAssignments_S2A3B1D2 = 123,
  efunc_gen_DoCheckAssignments_S2A3 = 124,
  efunc_gen_DoCheckAssignments_S2A2 = 125,
  efunc_gen_DoCheckAssignments_S2A1 = 126,
  efunc_gen_FixBacktrackForOpenEVars_S1C1 = 127,
  efunc_FindOpenEVars = 128,
  efunc_gen_Map_Z14 = 129,
  efunc_gen_CheckPatternm_WarnRepeatedRec_S1C1 = 130,
  efunc_ReducePattern = 131,
  efunc_gen_CheckVariableRepeating_D1 = 132,
  efunc_gen_CheckPatternm_Flatten_S3L1S3B1 = 133,
  efunc_gen_DoMapAccum_Z5 = 134,
  efunc_gen_Map_Z15 = 135,
  efunc_gen_Map_Z16 = 136,
  efunc_Mu = 137,
  efunc_Up = 138,
  efunc_Evm_met = 139,
  efunc_Residue = 140,
  efunc_u_u_Metau_Residue = 141,
  efunc_MapAccum = 142,
  efunc_UnBracket = 143,
  efunc_DelAccumulator = 144,
  efunc_Inc = 145,
  efunc_Dec = 146,
  efunc_CheckProgram = 147,
  efunc_PrepareMessage = 148,
  efunc_FindErrors = 149,
  efunc_CheckPseudofunctions = 150,
  efunc_SeparateErrors = 151,
  efunc_CheckSpecs = 152,
  efunc_CheckSpecsm_Formats = 153,
  efunc_CheckRepeatedVariables = 154,
  efunc_FindVariables = 155,
  efunc_ValidBodyForSpecm_CheckSentensePattern = 156,
  efunc_SeparateDefines = 157,
  efunc_CheckDeclarations = 158,
  efunc_FindInvalidDriveInline = 159,
  efunc_FindInvalidEntry = 160,
  efunc_CleanupValidForwards = 161,
  efunc_FindInvalidForwards = 162,
  efunc_FindFinalInitEntry = 163,
  efunc_CheckRedefinitions = 164,
  efunc_CheckFunctionBody = 165,
  efunc_CheckFunctionBodyRec = 166,
  efunc_CheckSentence = 167,
  efunc_CheckBlocks = 168,
  efunc_FlatExpr = 169,
  efunc_CheckPattern = 170,
  efunc_CheckPatternm_WarnRepeated = 171,
  efunc_CheckVariableRepeating = 172,
  efunc_gen_Apply_Z4 = 173,
  efunc_ELm_AddErrorAt = 174,
  efunc_gen_Reduce_S1A1Z1 = 175,
  efunc_ELm_AddWarningAt = 176,
  efunc_gen_CheckProgram_L1D2 = 177,
  efunc_gen_Reduce_Z0 = 178,
  efunc_gen_CheckProgram_L1Z0 = 179,
  efunc_gen_CheckFunctionBody_D1 = 180,
  efunc_gen_Map_Z0 = 181,
  efunc_gen_CheckFunctionBody_Z0 = 182,
  efunc_gen_SeparateDefines_L1D12 = 183,
  efunc_gen_DoMapAccum_S1A1Z1 = 184,
  efunc_gen_DoMapAccum_Z0 = 185,
  efunc_gen_SeparateDefines_L1Z0 = 186,
  efunc_gen_CheckPseudofunctions_A1L1 = 187,
  efunc_gen_CheckPseudofunctions_A1L1Z0 = 188,
  efunc_gen_SeparateErrors_L1D3 = 189,
  efunc_gen_DoMapAccum_S1A1Z2 = 190,
  efunc_gen_SeparateErrors_L1Z0 = 191,
  efunc_gen_CheckSpecsm_Formats_L1S1B1 = 192,
  efunc_gen_CheckSpecsm_Formats_L1Z0 = 193,
  efunc_gen_FindVariables_L1Z0 = 194,
  efunc_gen_CheckSpecsm_Functions_S1A1B1S2L1D1 = 195,
  efunc_gen_CheckSpecsm_Functions_S1A1B1S2L1Z0 = 196,
  efunc_gen_CheckSpecsm_Functions_S2A1B1S2L1D1 = 197,
  efunc_gen_CheckSpecsm_Functions_S2A1B1S2L1Z0 = 198,
  efunc_gen_Reduce_S1A1Z2 = 199,
  efunc_gen_Reduce_S1A1Z3 = 200,
  efunc_gen_ValidBodyForSpecm_CheckSentensePattern_D2 = 201,
  efunc_gen_ValidBodyForSpecm_CheckSentensePattern_Z0 = 202,
  efunc_gen_Reduce_S1A1Z4 = 203,
  efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1 = 204,
  efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1Z0 = 205,
  efunc_gen_FindInvalidDriveInline_L1D2 = 206,
  efunc_gen_FindInvalidDriveInline_L1Z0 = 207,
  efunc_gen_FindInvalidDriveInline_A3L1S1A2L1 = 208,
  efunc_gen_FindInvalidDriveInline_A3L1S1A2L1Z0 = 209,
  efunc_gen_FindInvalidDriveInline_A3L1 = 210,
  efunc_gen_DoMapAccum_S1A1Z3 = 211,
  efunc_gen_FindInvalidDriveInline_A3L1Z0 = 212,
  efunc_gen_FindInvalidDriveInline_A2L1S1B1 = 213,
  efunc_gen_FindInvalidDriveInline_A2L1Z0 = 214,
  efunc_gen_FindInvalidDriveInline_A1L1D3 = 215,
  efunc_gen_DoMapAccum_S1A1Z4 = 216,
  efunc_gen_FindInvalidDriveInline_A1L1Z0 = 217,
  efunc_gen_FindInvalidEntry_L1Z0 = 218,
  efunc_gen_FindFinalInitEntry_L1 = 219,
  efunc_gen_FindFinalInitEntry_L1Z0 = 220,
  efunc_gen_CheckPatternm_Flatten_Z1 = 221,
  efunc_gen_CheckPatternm_WarnRepeatedRec_Z1 = 222,
  efunc_gen_CheckSentenceRec_Z0 = 223,
  efunc_gen_FlatExpr_L1Z0 = 224,
  efunc_gen_CheckSentence_A1Z0 = 225,
  efunc_gen_CheckBlocks_L1D1 = 226,
  efunc_gen_CheckBlocks_L1Z0 = 227,
  efunc_gen_DoCheckAssignments_S2A4Z0 = 228,
  efunc_gen_FindOpenEVars_S2L1Z0 = 229,
  efunc_gen_CheckPatternm_Flatten_S3L1 = 230,
  efunc_gen_DoMapAccum_S1A1Z5 = 231,
  efunc_gen_CheckPatternm_Flatten_S3L1Z0 = 232,
  efunc_gen_CheckResult_L1D1 = 233,
  efunc_gen_CheckResult_L1Z0 = 234,
  efunc_gen_CheckValidUsings_S6L1Z0 = 235,
  efunc_gen_Reduce_S1A1Z0 = 236,
  efunc_gen_DoMapAccum_S1A1Z0 = 237,
  efunc_gen_Reduce_Z4 = 238,
  efunc_gen_Fetch_Z2 = 239,
  efunc_gen_Pipe_S2L1Z0 = 240,
  efunc_gen_FindInvalidEntry_Z0 = 241,
  efunc_gen_CleanupValidForwards_Z0 = 242,
  efunc_gen_FindInvalidForwards_Z0 = 243,
  efunc_gen_FindInvalidDriveInline_Z0 = 244,
  efunc_gen_CheckRedefinitions_Z0 = 245,
  efunc_gen_FindFinalInitEntry_Z0 = 246,
  efunc_gen_Fetch_Z0 = 247,
  efunc_gen_CheckPatternm_Flatten_Z0 = 248,
  efunc_gen_CheckPatternm_WarnRepeatedRec_Z1S1C1 = 249,
  efunc_gen_CheckPatternm_WarnRepeatedRec_Z0 = 250,
  efunc_gen_DoCheckAssignments_S2A2Z1 = 251,
  efunc_gen_DoCheckAssignments_S2A1Z0 = 252,
  efunc_gen_DoCheckAssignments_S2A4Z3 = 253,
  efunc_gen_DoCheckAssignments_S2A4Z4 = 254,
  efunc_gen_DoCheckAssignments_S2A4Z5 = 255,
  efunc_gen_DoCheckAssignments_S2A3Z1 = 256,
  efunc_gen_DoCheckAssignments_S2A2Z0 = 257,
  efunc_gen_Fetch_Z3 = 258,
  efunc_gen_DoCheckAssignments_S2A3Z0 = 259,
  efunc_gen_Fetch_Z4 = 260,
  efunc_gen_Fetch_Z5 = 261,
  efunc_gen_Fetch_Z6 = 262,
};


enum ident {
  ident_AlreadyDefined = 0,
  ident_ForwardForEntry = 1,
  ident_InitFinalEntry = 2,
  ident_ForwardNotDefined = 3,
  ident_NotDefined = 4,
  ident_AlreadyBounded = 5,
  ident_UnnamedNewVariable = 6,
  ident_UnnamedVariableInResult = 7,
  ident_InvalidMode = 8,
  ident_VariableNotFound = 9,
  ident_DanglingEntry = 10,
  ident_DanglingInline = 11,
  ident_DanglingDrive = 12,
  ident_NativeOptimizable = 13,
  ident_RedefineSpec = 14,
  ident_MustBeHardPattern = 15,
  ident_BadSpecForFunction = 16,
  ident_OrphanSpec = 17,
  ident_RepVarInSpecPattern = 18,
  ident_RedundantCaret = 19,
  ident_RepeatedVariable = 20,
  ident_UnnamedVariableInSpecPattern = 21,
  ident_SpecStaticParamTypeMismatching = 22,
  ident_SpecStaticParamRepeatingVars = 23,
  ident_Screening = 24,
  ident_TaggedPseudofunction = 25,
  ident_EntryPseudofunction = 26,
  ident_BadPseudofunctionBody = 27,
  ident_Drive = 28,
  ident_Inline = 29,
  ident_Intrinsic = 30,
  ident_Error = 31,
  ident_Spec = 32,
  ident_Entry = 33,
  ident_GNm_Entry = 34,
  ident_Warning = 35,
  ident_pseudofunctions = 36,
  ident_Function = 37,
  ident_GNm_Local = 38,
  ident_Sentences = 39,
  ident_True = 40,
  ident_Var = 41,
  ident_False = 42,
  ident_Brackets = 43,
  ident_ADTm_Brackets = 44,
  ident_Symbol = 45,
  ident_NativeBody = 46,
  ident_Clear = 47,
  ident_Contracted = 48,
  ident_Failure = 49,
  ident_Undefined = 50,
  ident_Define = 51,
  ident_Declare = 52,
  ident_OneWay = 53,
  ident_WithBacktrack = 54,
  ident_Assign = 55,
  ident_Condition = 56,
  ident_OpenE = 57,
  ident_NewVar = 58,
  ident_repeated = 59,
  ident_deprecated = 60,
  ident_Name = 61,
  ident_Mu = 62,
  ident_Up = 63,
  ident_Evm_met = 64,
  ident_Residue = 65,
  ident_u_u_Metau_Residue = 66,
  ident_Apply = 67,
  ident_Map = 68,
  ident_Reduce = 69,
  ident_Fetch = 70,
  ident_MapAccum = 71,
  ident_DoMapAccum = 72,
  ident_UnBracket = 73,
  ident_DelAccumulator = 74,
  ident_Inc = 75,
  ident_Dec = 76,
  ident_Pipe = 77,
  ident_CheckProgram = 78,
  ident_PrepareMessage = 79,
  ident_FindErrors = 80,
  ident_CheckPseudofunctions = 81,
  ident_SeparateErrors = 82,
  ident_Pseudofunctions = 83,
  ident_CheckPseudofunctionsm_Entry = 84,
  ident_CheckPseudofunctionsm_Body = 85,
  ident_WholeEVar = 86,
  ident_CheckSpecs = 87,
  ident_CheckSpecsm_Redefine = 88,
  ident_CheckSpecsm_Formats = 89,
  ident_IsHardPattern = 90,
  ident_IsHardTerm = 91,
  ident_CheckRepeatedVariables = 92,
  ident_ErrorsForRepeatedVariables = 93,
  ident_FindVariables = 94,
  ident_CheckSpecsm_Functions = 95,
  ident_ValidBodyForSpec = 96,
  ident_ValidBodyForSpecm_CheckSentensePattern = 97,
  ident_CheckSpecm_VarTypeMatching = 98,
  ident_CheckSpecm_RepeatingVarInStaticParams = 99,
  ident_IsSpecStaticVar = 100,
  ident_SeparateDefines = 101,
  ident_CheckDeclarations = 102,
  ident_FindInvalidDriveInline = 103,
  ident_CleanupValidEntry = 104,
  ident_FindInvalidEntry = 105,
  ident_CleanupValidForwards = 106,
  ident_FindInvalidForwards = 107,
  ident_FindFinalInitEntry = 108,
  ident_CheckRedefinitions = 109,
  ident_CheckFunctionBody = 110,
  ident_CheckFunctionBodyRec = 111,
  ident_CheckSentenceRec = 112,
  ident_CheckSentence = 113,
  ident_CheckBlocks = 114,
  ident_DoCheckAssignments = 115,
  ident_FixBacktrackForOpenEVars = 116,
  ident_FindOpenEVars = 117,
  ident_FlatExpr = 118,
  ident_CheckPattern = 119,
  ident_CheckPatternm_WarnRepeated = 120,
  ident_CheckPatternm_WarnRepeatedRec = 121,
  ident_ReducePattern = 122,
  ident_CheckVariableRepeating = 123,
  ident_CheckPatternm_Flatten = 124,
  ident_CheckResult = 125,
  ident_CheckValidUsings = 126,
  ident_Swap = 127,
  ident_Enum = 128,
  ident_Meta = 129,
  ident_Declaration = 130,
  ident_Ident = 131,
  ident_NativeBlock = 132,
  ident_UnnamedADT = 133,
  ident_CallBrackets = 134,
  ident_Closure = 135,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_CheckProgram(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & CheckProgram/4 (/7 e.WarningIds/5 )/8 t.ErrorList/9 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.WarningIds as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.AST as range 2
  //DEBUG: e.WarningIds: 5
  //DEBUG: t.ErrorList: 9
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & Reduce@1/12 Tile{ AsIs: t.ErrorList/9 } Tile{ AsIs: </0 Reuse: & FindErrors=1/4 AsIs: (/7 AsIs: e.WarningIds/5 AsIs: )/8 } </13 & CheckPseudofunctions=1/14 </15 & Map@2/16 Tile{ AsIs: e.AST/2 } >/17 >/18 >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Reduce_Z1]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_CheckPseudofunctions_A1]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_Map_Z2]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_FindErrors_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckProgram("CheckProgram", 0U, 0U, func_CheckProgram);


static refalrts::FnResult func_PrepareMessage(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & PrepareMessage/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrepareMessage/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & PrepareMessage/4 # AlreadyDefined/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlreadyDefined], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"Functi"/8 Tile{ HalfReuse: 'o'/0 HalfReuse: 'n'/4 HalfReuse: ' '/5 AsIs: e.Name/6 HalfReuse: ' '/1 }"is already defined"/10 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "Functi", 6);
    refalrts::alloc_chars(vm, context[10], context[11], "is already defined", 18);
    refalrts::reinit_char(context[0], 'o');
    refalrts::reinit_char(context[4], 'n');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], ' ');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # ForwardForEntry/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ForwardForEntry], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"$FORWA"/8 Tile{ HalfReuse: 'R'/0 HalfReuse: 'D'/4 HalfReuse: ' '/5 AsIs: e.Name/6 HalfReuse: ' '/1 }"for $ENTRY "/10 e.Name/6/12 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "$FORWA", 6);
    refalrts::alloc_chars(vm, context[10], context[11], "for $ENTRY ", 11);
    refalrts::copy_evar(vm, context[12], context[13], context[6], context[7]);
    refalrts::reinit_char(context[0], 'R');
    refalrts::reinit_char(context[4], 'D');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], ' ');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # InitFinalEntry/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_InitFinalEntry], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"Functi"/8 Tile{ HalfReuse: 'o'/0 HalfReuse: 'n'/4 HalfReuse: ' '/5 AsIs: e.Name/6 HalfReuse: ' '/1 }"should not be declared $ENTRY"/10 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "Functi", 6);
    refalrts::alloc_chars(vm, context[10], context[11], "should not be declared $ENTRY", 29);
    refalrts::reinit_char(context[0], 'o');
    refalrts::reinit_char(context[4], 'n');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], ' ');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # ForwardNotDefined/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ForwardNotDefined], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"Function for $FORWA"/8 Tile{ HalfReuse: 'R'/0 HalfReuse: 'D'/4 HalfReuse: ' '/5 AsIs: e.Name/6 HalfReuse: ' '/1 }"is not defined"/10 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "Function for $FORWA", 19);
    refalrts::alloc_chars(vm, context[10], context[11], "is not defined", 14);
    refalrts::reinit_char(context[0], 'R');
    refalrts::reinit_char(context[4], 'D');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], ' ');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # NotDefined/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NotDefined], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"Functi"/8 Tile{ HalfReuse: 'o'/0 HalfReuse: 'n'/4 HalfReuse: ' '/5 AsIs: e.Name/6 HalfReuse: ' '/1 }"is not defined"/10 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "Functi", 6);
    refalrts::alloc_chars(vm, context[10], context[11], "is not defined", 14);
    refalrts::reinit_char(context[0], 'o');
    refalrts::reinit_char(context[4], 'n');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], ' ');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 s.new3/5 s.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & PrepareMessage/4 # AlreadyBounded/5 s.Mode/8 e.Index/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_AlreadyBounded], context[5] ) )
        continue;
      // closed e.Index as range 9
      //DEBUG: s.Mode: 8
      //DEBUG: e.Index: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: 'V'/0 HalfReuse: 'a'/4 HalfReuse: 'r'/5 }"iab"/11 Tile{ HalfReuse: 'l'/1 }"e hide operator^ must be applied to first occurence of variable "/13 Tile{ AsIs: s.Mode/8 } '.'/15 Tile{ AsIs: e.Index/9 } Tile{ ]] }
      refalrts::alloc_chars(vm, context[11], context[12], "iab", 3);
      refalrts::alloc_chars(vm, context[13], context[14], "e hide operator^ must be applied to first occurence of variable ", 64);
      refalrts::alloc_char(vm, context[15], '.');
      refalrts::reinit_char(context[0], 'V');
      refalrts::reinit_char(context[4], 'a');
      refalrts::reinit_char(context[5], 'r');
      refalrts::reinit_char(context[1], 'l');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrepareMessage/4 # UnnamedNewVariable/5 s.Mode/8 e.Index/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_UnnamedNewVariable], context[5] ) )
        continue;
      // closed e.Index as range 9
      //DEBUG: s.Mode: 8
      //DEBUG: e.Index: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: 'U'/0 HalfReuse: 'n'/4 HalfReuse: 'n'/5 }"amed new variable is forbidden: "/11 Tile{ AsIs: s.Mode/8 } '.'/13 Tile{ AsIs: e.Index/9 } Tile{ HalfReuse: '^'/1 ]] }
      refalrts::alloc_chars(vm, context[11], context[12], "amed new variable is forbidden: ", 32);
      refalrts::alloc_char(vm, context[13], '.');
      refalrts::reinit_char(context[0], 'U');
      refalrts::reinit_char(context[4], 'n');
      refalrts::reinit_char(context[5], 'n');
      refalrts::reinit_char(context[1], '^');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrepareMessage/4 # UnnamedVariableInResult/5 s.Mode/8 e.Index/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_UnnamedVariableInResult], context[5] ) )
        continue;
      // closed e.Index as range 9
      //DEBUG: s.Mode: 8
      //DEBUG: e.Index: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: 'U'/0 HalfReuse: 'n'/4 HalfReuse: 'n'/5 }"amed variable "/11 Tile{ AsIs: s.Mode/8 } '.'/13 Tile{ AsIs: e.Index/9 }" can\'t appear in result expressio"/14 Tile{ HalfReuse: 'n'/1 ]] }
      refalrts::alloc_chars(vm, context[11], context[12], "amed variable ", 14);
      refalrts::alloc_char(vm, context[13], '.');
      refalrts::alloc_chars(vm, context[14], context[15], " can\'t appear in result expressio", 33);
      refalrts::reinit_char(context[0], 'U');
      refalrts::reinit_char(context[4], 'n');
      refalrts::reinit_char(context[5], 'n');
      refalrts::reinit_char(context[1], 'n');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrepareMessage/4 # InvalidMode/5 s.OldMode/8 s.NewMode/11 e.Index/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_InvalidMode], context[5] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
        continue;
      // closed e.Index as range 9
      //DEBUG: s.OldMode: 8
      //DEBUG: s.NewMode: 11
      //DEBUG: e.Index: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: 'V'/0 HalfReuse: 'a'/4 HalfReuse: 'r'/5 }"iables "/12 Tile{ AsIs: s.OldMode/8 } '.'/14 Tile{ AsIs: e.Index/9 }" and "/15 Tile{ AsIs: s.NewMode/11 } '.'/17 e.Index/9/18" have different mode"/20 Tile{ HalfReuse: 's'/1 ]] }
      refalrts::alloc_chars(vm, context[12], context[13], "iables ", 7);
      refalrts::alloc_char(vm, context[14], '.');
      refalrts::alloc_chars(vm, context[15], context[16], " and ", 5);
      refalrts::alloc_char(vm, context[17], '.');
      refalrts::copy_evar(vm, context[18], context[19], context[9], context[10]);
      refalrts::alloc_chars(vm, context[20], context[21], " have different mode", 20);
      refalrts::reinit_char(context[0], 'V');
      refalrts::reinit_char(context[4], 'a');
      refalrts::reinit_char(context[5], 'r');
      refalrts::reinit_char(context[1], 's');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[21] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrepareMessage/4 # VariableNotFound/5 s.Mode/8 e.Index/9 >/1
    context[9] = context[6];
    context[10] = context[7];
    if( ! refalrts::ident_term( identifiers[ident_VariableNotFound], context[5] ) )
      continue;
    // closed e.Index as range 9
    //DEBUG: s.Mode: 8
    //DEBUG: e.Index: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'V'/0 HalfReuse: 'a'/4 HalfReuse: 'r'/5 }"iable "/11 Tile{ AsIs: s.Mode/8 } '.'/13 Tile{ AsIs: e.Index/9 }" not foun"/14 Tile{ HalfReuse: 'd'/1 ]] }
    refalrts::alloc_chars(vm, context[11], context[12], "iable ", 6);
    refalrts::alloc_char(vm, context[13], '.');
    refalrts::alloc_chars(vm, context[14], context[15], " not foun", 9);
    refalrts::reinit_char(context[0], 'V');
    refalrts::reinit_char(context[4], 'a');
    refalrts::reinit_char(context[5], 'r');
    refalrts::reinit_char(context[1], 'd');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # DanglingEntry/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_DanglingEntry], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"$ENT"/8 Tile{ HalfReuse: 'R'/0 HalfReuse: 'Y'/4 HalfReuse: ' '/5 AsIs: e.Name/6 HalfReuse: ';'/1 }" declaration for missed function"/10 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "$ENT", 4);
    refalrts::alloc_chars(vm, context[10], context[11], " declaration for missed function", 32);
    refalrts::reinit_char(context[0], 'R');
    refalrts::reinit_char(context[4], 'Y');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], ';');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # DanglingInline/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_DanglingInline], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"$INLI"/8 Tile{ HalfReuse: 'N'/0 HalfReuse: 'E'/4 HalfReuse: ' '/5 AsIs: e.Name/6 HalfReuse: ';'/1 }" inline label for missed function"/10 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "$INLI", 5);
    refalrts::alloc_chars(vm, context[10], context[11], " inline label for missed function", 33);
    refalrts::reinit_char(context[0], 'N');
    refalrts::reinit_char(context[4], 'E');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], ';');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # DanglingDrive/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_DanglingDrive], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"$DRI"/8 Tile{ HalfReuse: 'V'/0 HalfReuse: 'E'/4 HalfReuse: ' '/5 AsIs: e.Name/6 HalfReuse: ';'/1 }" drive label for missed function"/10 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "$DRI", 4);
    refalrts::alloc_chars(vm, context[10], context[11], " drive label for missed function", 32);
    refalrts::reinit_char(context[0], 'V');
    refalrts::reinit_char(context[4], 'E');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], ';');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # NativeOptimizable/5 s.Label/8 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NativeOptimizable], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: s.Label: 8
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'F'/0 HalfReuse: 'u'/4 HalfReuse: 'n'/5 }"ction "/9 Tile{ AsIs: e.Name/6 }" can\'t be $"/11 </13 & Upper/14 </15 & Explode/16 Tile{ AsIs: s.Label/8 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[9], context[10], "ction ", 6);
    refalrts::alloc_chars(vm, context[11], context[12], " can\'t be $", 11);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Upper]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_Explode]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::reinit_char(context[0], 'F');
    refalrts::reinit_char(context[4], 'u');
    refalrts::reinit_char(context[5], 'n');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[16] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # RedefineSpec/5 e.FnName/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_RedefineSpec], context[5] ) )
      continue;
    // closed e.FnName as range 6
    //DEBUG: e.FnName: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"Specialization of functi"/8 Tile{ HalfReuse: 'o'/0 HalfReuse: 'n'/4 HalfReuse: ' '/5 AsIs: e.FnName/6 HalfReuse: 'i'/1 }"s redefined"/10 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "Specialization of functi", 24);
    refalrts::alloc_chars(vm, context[10], context[11], "s redefined", 11);
    refalrts::reinit_char(context[0], 'o');
    refalrts::reinit_char(context[4], 'n');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], 'i');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # MustBeHardPattern/5 e.FnName/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_MustBeHardPattern], context[5] ) )
      continue;
    // closed e.FnName as range 6
    //DEBUG: e.FnName: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"Pattern of function specialization f"/8 Tile{ HalfReuse: 'o'/0 HalfReuse: 'r'/4 HalfReuse: ' '/5 AsIs: e.FnName/6 HalfReuse: ' '/1 }"must be hard"/10 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "Pattern of function specialization f", 36);
    refalrts::alloc_chars(vm, context[10], context[11], "must be hard", 12);
    refalrts::reinit_char(context[0], 'o');
    refalrts::reinit_char(context[4], 'r');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], ' ');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # BadSpecForFunction/5 e.FnName/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_BadSpecForFunction], context[5] ) )
      continue;
    // closed e.FnName as range 6
    //DEBUG: e.FnName: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'B'/0 HalfReuse: 'a'/4 HalfReuse: 'd'/5 }" f"/8 Tile{ HalfReuse: 'u'/1 }"nction specialization for "/10 Tile{ AsIs: e.FnName/6 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], " f", 2);
    refalrts::alloc_chars(vm, context[10], context[11], "nction specialization for ", 26);
    refalrts::reinit_char(context[0], 'B');
    refalrts::reinit_char(context[4], 'a');
    refalrts::reinit_char(context[5], 'd');
    refalrts::reinit_char(context[1], 'u');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # OrphanSpec/5 e.FnName/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OrphanSpec], context[5] ) )
      continue;
    // closed e.FnName as range 6
    //DEBUG: e.FnName: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'O'/0 HalfReuse: 'r'/4 HalfReuse: 'p'/5 }"ha"/8 Tile{ HalfReuse: 'n'/1 }" function specialization for "/10 Tile{ AsIs: e.FnName/6 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "ha", 2);
    refalrts::alloc_chars(vm, context[10], context[11], " function specialization for ", 29);
    refalrts::reinit_char(context[0], 'O');
    refalrts::reinit_char(context[4], 'r');
    refalrts::reinit_char(context[5], 'p');
    refalrts::reinit_char(context[1], 'n');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 s.new3/5 t.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & PrepareMessage/4 s.new6/5 s.new7/8 e.new8/10 >/1
      context[10] = context[6];
      context[11] = context[7];
      if( ! refalrts::svar_term( context[8], context[8] ) )
        continue;
      // closed e.new8 as range 10
      do {
        // </0 & PrepareMessage/4 # RepVarInSpecPattern/5 s.Mode/8 e.Index/12 >/1
        context[12] = context[10];
        context[13] = context[11];
        if( ! refalrts::ident_term( identifiers[ident_RepVarInSpecPattern], context[5] ) )
          continue;
        // closed e.Index as range 12
        //DEBUG: s.Mode: 8
        //DEBUG: e.Index: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: 'R'/0 HalfReuse: 'e'/4 HalfReuse: 'p'/5 }"eated variable "/14 Tile{ AsIs: s.Mode/8 } '.'/16 Tile{ AsIs: e.Index/12 }" in specialization patter"/17 Tile{ HalfReuse: 'n'/1 ]] }
        refalrts::alloc_chars(vm, context[14], context[15], "eated variable ", 15);
        refalrts::alloc_char(vm, context[16], '.');
        refalrts::alloc_chars(vm, context[17], context[18], " in specialization patter", 25);
        refalrts::reinit_char(context[0], 'R');
        refalrts::reinit_char(context[4], 'e');
        refalrts::reinit_char(context[5], 'p');
        refalrts::reinit_char(context[1], 'n');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrepareMessage/4 # RedundantCaret/5 s.Mode/8 e.Index/12 >/1
        context[12] = context[10];
        context[13] = context[11];
        if( ! refalrts::ident_term( identifiers[ident_RedundantCaret], context[5] ) )
          continue;
        // closed e.Index as range 12
        //DEBUG: s.Mode: 8
        //DEBUG: e.Index: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: 'U'/0 HalfReuse: 's'/4 HalfReuse: 'e'/5 }"less sign ^: no old variable "/14 Tile{ AsIs: s.Mode/8 } '.'/16 Tile{ AsIs: e.Index/12 }" in current scop"/17 Tile{ HalfReuse: 'e'/1 ]] }
        refalrts::alloc_chars(vm, context[14], context[15], "less sign ^: no old variable ", 29);
        refalrts::alloc_char(vm, context[16], '.');
        refalrts::alloc_chars(vm, context[17], context[18], " in current scop", 16);
        refalrts::reinit_char(context[0], 'U');
        refalrts::reinit_char(context[4], 's');
        refalrts::reinit_char(context[5], 'e');
        refalrts::reinit_char(context[1], 'e');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrepareMessage/4 # RepeatedVariable/5 s.Mode/8 e.Index/12 >/1
        context[12] = context[10];
        context[13] = context[11];
        if( ! refalrts::ident_term( identifiers[ident_RepeatedVariable], context[5] ) )
          continue;
        // closed e.Index as range 12
        //DEBUG: s.Mode: 8
        //DEBUG: e.Index: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: 'S'/0 HalfReuse: 'u'/4 HalfReuse: 's'/5 }"pic"/14 Tile{ HalfReuse: 'i'/1 }"ous repeated variable "/16 Tile{ AsIs: s.Mode/8 } '.'/18 Tile{ AsIs: e.Index/12 } Tile{ ]] }
        refalrts::alloc_chars(vm, context[14], context[15], "pic", 3);
        refalrts::alloc_chars(vm, context[16], context[17], "ous repeated variable ", 22);
        refalrts::alloc_char(vm, context[18], '.');
        refalrts::reinit_char(context[0], 'S');
        refalrts::reinit_char(context[4], 'u');
        refalrts::reinit_char(context[5], 's');
        refalrts::reinit_char(context[1], 'i');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrepareMessage/4 # UnnamedVariableInSpecPattern/5 s.Mode/8 e.Index/12 >/1
      context[12] = context[10];
      context[13] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_UnnamedVariableInSpecPattern], context[5] ) )
        continue;
      // closed e.Index as range 12
      //DEBUG: s.Mode: 8
      //DEBUG: e.Index: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: 'U'/0 HalfReuse: 'n'/4 HalfReuse: 'n'/5 }"amed variable "/14 Tile{ AsIs: s.Mode/8 } '.'/16 Tile{ AsIs: e.Index/12 }" can\'t appear in $SPEC patter"/17 Tile{ HalfReuse: 'n'/1 ]] }
      refalrts::alloc_chars(vm, context[14], context[15], "amed variable ", 14);
      refalrts::alloc_char(vm, context[16], '.');
      refalrts::alloc_chars(vm, context[17], context[18], " can\'t appear in $SPEC patter", 29);
      refalrts::reinit_char(context[0], 'U');
      refalrts::reinit_char(context[4], 'n');
      refalrts::reinit_char(context[5], 'n');
      refalrts::reinit_char(context[1], 'n');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrepareMessage/4 s.new6/5 (/8 e.new7/12 )/9 e.new8/10 >/1
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
        continue;
      // closed e.new7 as range 12
      // closed e.new8 as range 10
      do {
        // </0 & PrepareMessage/4 s.new9/5 (/8 s.new10/18 e.new11/14 )/9 e.new12/16 >/1
        context[14] = context[12];
        context[15] = context[13];
        context[16] = context[10];
        context[17] = context[11];
        // closed e.new12 as range 16
        if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
          continue;
        // closed e.new11 as range 14
        do {
          // </0 & PrepareMessage/4 # SpecStaticParamTypeMismatching/5 (/8 s.Mode/18 e.Index/19 )/9 e.FnName/21 >/1
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          context[22] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_SpecStaticParamTypeMismatching], context[5] ) )
            continue;
          // closed e.Index as range 19
          // closed e.FnName as range 21
          //DEBUG: s.Mode: 18
          //DEBUG: e.Index: 19
          //DEBUG: e.FnName: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: 'T'/0 HalfReuse: 'y'/4 HalfReuse: 'p'/5 HalfReuse: 'e'/8 } ' '/23 Tile{ HalfReuse: 'm'/9 } 'i'/24 Tile{ HalfReuse: 's'/1 }"matching of static parameter "/25 Tile{ AsIs: s.Mode/18 } '.'/27 Tile{ AsIs: e.Index/19 }" in specialization of function "/28 Tile{ AsIs: e.FnName/21 } Tile{ ]] }
          refalrts::alloc_char(vm, context[23], ' ');
          refalrts::alloc_char(vm, context[24], 'i');
          refalrts::alloc_chars(vm, context[25], context[26], "matching of static parameter ", 29);
          refalrts::alloc_char(vm, context[27], '.');
          refalrts::alloc_chars(vm, context[28], context[29], " in specialization of function ", 31);
          refalrts::reinit_char(context[0], 'T');
          refalrts::reinit_char(context[4], 'y');
          refalrts::reinit_char(context[5], 'p');
          refalrts::reinit_char(context[8], 'e');
          refalrts::reinit_char(context[9], 'm');
          refalrts::reinit_char(context[1], 's');
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[21], context[22] );
          res = refalrts::splice_evar( res, context[28], context[29] );
          res = refalrts::splice_evar( res, context[19], context[20] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_elem( res, context[9] );
          res = refalrts::splice_elem( res, context[23] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrepareMessage/4 # SpecStaticParamRepeatingVars/5 (/8 s.Mode/18 e.Index/19 )/9 e.FnName/21 >/1
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_SpecStaticParamRepeatingVars], context[5] ) )
          continue;
        // closed e.Index as range 19
        // closed e.FnName as range 21
        //DEBUG: s.Mode: 18
        //DEBUG: e.Index: 19
        //DEBUG: e.FnName: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: 'R'/0 HalfReuse: 'e'/4 HalfReuse: 'p'/5 HalfReuse: 'e'/8 } 'a'/23 Tile{ HalfReuse: 't'/9 } 'i'/24 Tile{ HalfReuse: 'n'/1 }"g variables match static parameter "/25 Tile{ AsIs: s.Mode/18 } '.'/27 Tile{ AsIs: e.Index/19 }" in specialization of function "/28 Tile{ AsIs: e.FnName/21 } Tile{ ]] }
        refalrts::alloc_char(vm, context[23], 'a');
        refalrts::alloc_char(vm, context[24], 'i');
        refalrts::alloc_chars(vm, context[25], context[26], "g variables match static parameter ", 35);
        refalrts::alloc_char(vm, context[27], '.');
        refalrts::alloc_chars(vm, context[28], context[29], " in specialization of function ", 31);
        refalrts::reinit_char(context[0], 'R');
        refalrts::reinit_char(context[4], 'e');
        refalrts::reinit_char(context[5], 'p');
        refalrts::reinit_char(context[8], 'e');
        refalrts::reinit_char(context[9], 't');
        refalrts::reinit_char(context[1], 'n');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrepareMessage/4 # Screening/5 (/8 e.FunName/14 )/9 (/20 e.Screening/18 )/21 (/24 e.Screened/22 )/25 >/1
      context[14] = context[12];
      context[15] = context[13];
      context[16] = context[10];
      context[17] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_Screening], context[5] ) )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[16], context[17] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.FunName as range 14
      // closed e.Screening as range 18
      // closed e.Screened as range 22
      //DEBUG: e.FunName: 14
      //DEBUG: e.Screening: 18
      //DEBUG: e.Screened: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } 'F'/26 Tile{ HalfReuse: 'u'/21 HalfReuse: 'n'/24 } 'c'/27 Tile{ HalfReuse: 't'/25 HalfReuse: 'i'/1 } Tile{ HalfReuse: 'o'/0 HalfReuse: 'n'/4 HalfReuse: ' '/5 HalfReuse: '`'/8 AsIs: e.FunName/14 HalfReuse: '\''/9 HalfReuse: ':'/20 }" sentence "/28 Tile{ AsIs: e.Screening/18 }" screens sentence "/30 Tile{ AsIs: e.Screened/22 } Tile{ ]] }
      refalrts::alloc_char(vm, context[26], 'F');
      refalrts::alloc_char(vm, context[27], 'c');
      refalrts::alloc_chars(vm, context[28], context[29], " sentence ", 10);
      refalrts::alloc_chars(vm, context[30], context[31], " screens sentence ", 18);
      refalrts::reinit_char(context[21], 'u');
      refalrts::reinit_char(context[24], 'n');
      refalrts::reinit_char(context[25], 't');
      refalrts::reinit_char(context[1], 'i');
      refalrts::reinit_char(context[0], 'o');
      refalrts::reinit_char(context[4], 'n');
      refalrts::reinit_char(context[5], ' ');
      refalrts::reinit_char(context[8], '`');
      refalrts::reinit_char(context[9], '\'');
      refalrts::reinit_char(context[20], ':');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[0], context[20] );
      res = refalrts::splice_evar( res, context[25], context[1] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[21], context[24] );
      res = refalrts::splice_elem( res, context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrepareMessage/4 # TaggedPseudofunction/5 s.Tag/8 e.Name/10 >/1
    context[10] = context[6];
    context[11] = context[7];
    if( ! refalrts::svar_term( context[8], context[8] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_TaggedPseudofunction], context[5] ) )
      continue;
    // closed e.Name as range 10
    //DEBUG: s.Tag: 8
    //DEBUG: e.Name: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'P'/0 HalfReuse: 's'/4 HalfReuse: 'e'/5 }"udofunction "/12 Tile{ AsIs: e.Name/10 }" should not have optimization tag $"/14 </16 & Upper/17 </18 & Explode/19 Tile{ AsIs: s.Tag/8 } >/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[12], context[13], "udofunction ", 12);
    refalrts::alloc_chars(vm, context[14], context[15], " should not have optimization tag $", 35);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Upper]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_Explode]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::reinit_char(context[0], 'P');
    refalrts::reinit_char(context[4], 's');
    refalrts::reinit_char(context[5], 'e');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[14], context[19] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareMessage/4 # EntryPseudofunction/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_EntryPseudofunction], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"Pseudofuncti"/8 Tile{ HalfReuse: 'o'/0 HalfReuse: 'n'/4 HalfReuse: ' '/5 AsIs: e.Name/6 HalfReuse: ' '/1 }"should be local, in other case function can\'t be encountered as pseudofunction"/10 Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "Pseudofuncti", 12);
    refalrts::alloc_chars(vm, context[10], context[11], "should be local, in other case function can\'t be encountered as pseudofunction", 78);
    refalrts::reinit_char(context[0], 'o');
    refalrts::reinit_char(context[4], 'n');
    refalrts::reinit_char(context[5], ' ');
    refalrts::reinit_char(context[1], ' ');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrepareMessage/4 # BadPseudofunctionBody/5 e.Name/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_BadPseudofunctionBody], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ }"Pseudofuncti"/6 Tile{ HalfReuse: 'o'/0 HalfReuse: 'n'/4 HalfReuse: ' '/5 AsIs: e.Name/2 HalfReuse: ' '/1 }"should have a body { e.X = e.X }, in other case function can\'t be encountered as pseudofunction"/8 Tile{ ]] }
  refalrts::alloc_chars(vm, context[6], context[7], "Pseudofuncti", 12);
  refalrts::alloc_chars(vm, context[8], context[9], "should have a body { e.X = e.X }, in other case function can\'t be encountered as pseudofunction", 95);
  refalrts::reinit_char(context[0], 'o');
  refalrts::reinit_char(context[4], 'n');
  refalrts::reinit_char(context[5], ' ');
  refalrts::reinit_char(context[1], ' ');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrepareMessage("PrepareMessage", COOKIE1_, COOKIE2_, func_PrepareMessage);


static refalrts::FnResult func_gen_FindErrors_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & FindErrors=3/4 (/7 e.PFErrors/5 )/8 (/11 e.SpecErrors/9 )/12 (/15 e.WarningIds/13 )/16 (/19 e.AST$b/17 )/20 (/23 e.Declarations/21 )/24 e.FunctionBodies/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.PFErrors as range 5
  // closed e.SpecErrors as range 9
  // closed e.WarningIds as range 13
  // closed e.AST$b as range 17
  // closed e.Declarations as range 21
  // closed e.FunctionBodies as range 2
  //DEBUG: e.PFErrors: 5
  //DEBUG: e.SpecErrors: 9
  //DEBUG: e.WarningIds: 13
  //DEBUG: e.AST$b: 17
  //DEBUG: e.Declarations: 21
  //DEBUG: e.FunctionBodies: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.PFErrors/5 } Tile{ AsIs: e.SpecErrors/9 } Tile{ AsIs: </0 Reuse: & CheckValidUsings/4 AsIs: (/7 } </25 & Fetch@1/26 </27 & CleanupValidEntry/28 Tile{ AsIs: e.Declarations/21 } >/29 >/30 Tile{ AsIs: )/8 HalfReuse: </11 } Tile{ HalfReuse: & Map@1/24 AsIs: e.FunctionBodies/2 AsIs: >/1 } >/31 </32 Tile{ HalfReuse: & CheckScreening/12 AsIs: (/15 AsIs: e.WarningIds/13 AsIs: )/16 AsIs: (/19 AsIs: e.AST$b/17 AsIs: )/20 HalfReuse: >/23 } Tile{ ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_Fetch_Z1]);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_CleanupValidEntry]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::update_name(context[4], functions[efunc_CheckValidUsings]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_name(context[24], functions[efunc_gen_Map_Z1]);
  refalrts::reinit_name(context[12], functions[efunc_CheckScreening]);
  refalrts::reinit_close_call(context[23]);
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[32] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[23] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[24], context[1] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[25], context[28] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindErrors_A3("FindErrors=3", COOKIE1_, COOKIE2_, func_gen_FindErrors_A3);


static refalrts::FnResult func_gen_FindErrors_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & FindErrors=2/4 (/7 e.PFErrors/5 )/8 (/11 e.WarningIds/9 )/12 (/15 e.SpecErrors/13 )/16 e.AST$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.PFErrors as range 5
  // closed e.WarningIds as range 9
  // closed e.SpecErrors as range 13
  // closed e.AST$b as range 2
  //DEBUG: e.PFErrors: 5
  //DEBUG: e.WarningIds: 9
  //DEBUG: e.SpecErrors: 13
  //DEBUG: e.AST$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindErrors=3/4 AsIs: (/7 AsIs: e.PFErrors/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.SpecErrors/13 } )/17 (/18 Tile{ AsIs: e.WarningIds/9 } Tile{ AsIs: )/12 AsIs: (/15 } e.AST$b/2/19 )/21 </22 & DoMapAccum@1/23 (/24 )/25 (/26 Tile{ AsIs: )/16 AsIs: e.AST$b/2 AsIs: >/1 } >/27 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::copy_evar(vm, context[19], context[20], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::update_name(context[4], functions[efunc_gen_FindErrors_A3]);
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[26], context[16] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[15], context[21] );
  refalrts::link_brackets( context[18], context[12] );
  refalrts::link_brackets( context[11], context[17] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[16], context[1] );
  res = refalrts::splice_evar( res, context[21], context[26] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindErrors_A2("FindErrors=2", COOKIE1_, COOKIE2_, func_gen_FindErrors_A2);


static refalrts::FnResult func_gen_FindErrors_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & FindErrors=1/4 (/7 e.WarningIds/5 )/8 (/11 e.PFErrors/9 )/12 e.AST$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.WarningIds as range 5
  // closed e.PFErrors as range 9
  // closed e.AST$a as range 2
  //DEBUG: e.WarningIds: 5
  //DEBUG: e.PFErrors: 9
  //DEBUG: e.AST$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindErrors=2/4 AsIs: (/7 } Tile{ AsIs: e.PFErrors/9 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.WarningIds/5 } )/13 </14 & CheckSpecs=1/15 </16 Tile{ HalfReuse: & CheckSpecs-Redefine/12 AsIs: e.AST$a/2 AsIs: >/1 } >/17 >/18 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_CheckSpecs_A1]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_FindErrors_A2]);
  refalrts::reinit_name(context[12], functions[efunc_CheckSpecsm_Redefine]);
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[11], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindErrors_A1("FindErrors=1", COOKIE1_, COOKIE2_, func_gen_FindErrors_A1);


static refalrts::FnResult func_FindErrors(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & FindErrors/4 (/7 e.WarningIds/5 )/8 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.WarningIds as range 5
  // closed e.AST as range 2
  //DEBUG: e.WarningIds: 5
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindErrors=1/4 AsIs: (/7 AsIs: e.WarningIds/5 AsIs: )/8 } </9 & CheckPseudofunctions=1/10 </11 & Map@2/12 Tile{ AsIs: e.AST/2 } >/13 >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_CheckPseudofunctions_A1]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Map_Z2]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_FindErrors_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindErrors("FindErrors", COOKIE1_, COOKIE2_, func_FindErrors);


static refalrts::FnResult func_gen_CheckPseudofunctions_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & CheckPseudofunctions=1/4 e.AST-and-messages/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST-and-messages as range 2
  //DEBUG: e.AST-and-messages: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@2/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.AST-and-messages/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPseudofunctions_A1("CheckPseudofunctions=1", COOKIE1_, COOKIE2_, func_gen_CheckPseudofunctions_A1);


static refalrts::FnResult func_gen_CheckPseudofunctions_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & CheckPseudofunctions=1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPseudofunctions=1\1/4 t.new1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckPseudofunctions=1\1/4 (/5 s.new2/9 t.new3/10 t.new4/12 e.new5/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    context[11] = refalrts::tvar_left( context[10], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[13] = refalrts::tvar_left( context[12], context[7], context[8] );
    if( ! context[13] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & CheckPseudofunctions=1\1/4 (/5 s.Tag/9 t.SrcPos/10 s.ScopeClass/12 e.Name/14 )/6 >/1
      context[14] = context[7];
      context[15] = context[8];
      if( ! refalrts::svar_term( context[12], context[12] ) )
        continue;
      // closed e.Name as range 14
      //DEBUG: t.SrcPos: 10
      //DEBUG: s.ScopeClass: 12
      //DEBUG: s.Tag: 9
      //DEBUG: e.Name: 14
      //9: s.Tag
      //10: t.SrcPos
      //12: s.ScopeClass
      //14: e.Name

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_CheckPseudofunctions_A1L1S1C1]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
      refalrts::alloc_ident(vm, context[20], identifiers[ident_Inline]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Intrinsic]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </16 & CheckPseudofunctions=1\1$1?1/20 e._/21 s.Tag/25 e._0/23 >/17
        context[18] = 0;
        context[19] = 0;
        context[20] = refalrts::call_left( context[18], context[19], context[16], context[17] );
        context[21] = 0;
        context[22] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[23] = context[18];
          context[24] = context[19];
          if( ! refalrts::repeated_stvar_left( vm, context[25], context[9], context[23], context[24] ) )
            continue;
          // closed e._0 as range 23
          //DEBUG: t.SrcPos: 10
          //DEBUG: s.ScopeClass: 12
          //DEBUG: s.Tag: 9
          //DEBUG: e.Name: 14
          //DEBUG: e._: 21
          //DEBUG: e._0: 23
          //9: s.Tag
          //10: t.SrcPos
          //12: s.ScopeClass
          //14: e.Name
          //21: e._
          //23: e._0
          //25: s.Tag

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[28], functions[efunc_gen_CheckPseudofunctions_A1L1S1C2]);
          refalrts::alloc_open_call(vm, context[29]);
          refalrts::alloc_name(vm, context[30], functions[efunc_Pseudofunctions]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[26] );
          res = refalrts::splice_elem( res, context[27] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[29] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_elem( res, context[26] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </26 & CheckPseudofunctions=1\1$1?2/30 e._1/31 (/37 e.Name/39 )/38 e._2/33 >/27
            context[28] = 0;
            context[29] = 0;
            context[30] = refalrts::call_left( context[28], context[29], context[26], context[27] );
            context[31] = 0;
            context[32] = 0;
            refalrts::start_e_loop(vm);
            do {
              context[33] = context[28];
              context[34] = context[29];
              context[35] = 0;
              context[36] = 0;
              context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
              if( ! context[37] )
                continue;
              refalrts::bracket_pointers(context[37], context[38]);
              if( ! refalrts::repeated_evar_left( vm, context[39], context[40], context[14], context[15], context[35], context[36] ) )
                continue;
              if( ! refalrts::empty_seq( context[35], context[36] ) )
                continue;
              // closed e._2 as range 33
              //DEBUG: t.SrcPos: 10
              //DEBUG: s.ScopeClass: 12
              //DEBUG: s.Tag: 9
              //DEBUG: e.Name: 14
              //DEBUG: e._: 21
              //DEBUG: e._0: 23
              //DEBUG: e._1: 31
              //DEBUG: e._2: 33

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} (/5 s.Tag/9 {REMOVED TILE} s.ScopeClass/12 e.Name/14 )/6 </16 & CheckPseudofunctions=1\1$1?1/20 e._/21 s.Tag/25 e._0/23 >/17 </26 {REMOVED TILE} e._1/31 {REMOVED TILE} e._2/33 >/27 >/1 {REMOVED TILE}
              //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Error/4 } Tile{ AsIs: t.SrcPos/10 } Tile{ HalfReuse: # TaggedPseudofunction/30 } Tile{ HalfReuse: s.Tag25 /37 AsIs: e.Name/39 AsIs: )/38 } Tile{ ]] }
              refalrts::reinit_open_bracket(context[0]);
              refalrts::reinit_ident(context[4], identifiers[ident_Error]);
              refalrts::reinit_ident(context[30], identifiers[ident_TaggedPseudofunction]);
              refalrts::reinit_svar( context[37], context[25] );
              refalrts::link_brackets( context[0], context[38] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[37], context[38] );
              res = refalrts::splice_elem( res, context[30] );
              res = refalrts::splice_evar( res, context[10], context[11] );
              refalrts::splice_to_freelist_open( vm, context[4], res );
              return refalrts::cSuccess;
            } while ( refalrts::open_evar_advance( context[31], context[32], context[28], context[29] ) );
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[26], context[27]);
          continue;
        } while ( refalrts::open_evar_advance( context[21], context[22], context[18], context[19] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[16], context[17]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckPseudofunctions=1\1/4 (/5 # Spec/9 t.SrcPos/10 (/12 e.Name/16 )/13 e._/14 )/6 >/1
      context[14] = context[7];
      context[15] = context[8];
      context[16] = 0;
      context[17] = 0;
      if( ! refalrts::brackets_term( context[16], context[17], context[12] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Spec], context[9] ) )
        continue;
      // closed e.Name as range 16
      // closed e._ as range 14
      //DEBUG: t.SrcPos: 10
      //DEBUG: e.Name: 16
      //DEBUG: e._: 14
      //10: t.SrcPos
      //14: e._
      //16: e.Name

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[20], functions[efunc_gen_CheckPseudofunctions_A1L1S2C1]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Pseudofunctions]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[21] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[18] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </18 & CheckPseudofunctions=1\1$2?1/22 e._0/23 (/29 e.Name/31 )/30 e._1/25 >/19
        context[20] = 0;
        context[21] = 0;
        context[22] = refalrts::call_left( context[20], context[21], context[18], context[19] );
        context[23] = 0;
        context[24] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[25] = context[20];
          context[26] = context[21];
          context[27] = 0;
          context[28] = 0;
          context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
          if( ! context[29] )
            continue;
          refalrts::bracket_pointers(context[29], context[30]);
          if( ! refalrts::repeated_evar_left( vm, context[31], context[32], context[16], context[17], context[27], context[28] ) )
            continue;
          if( ! refalrts::empty_seq( context[27], context[28] ) )
            continue;
          // closed e._1 as range 25
          //DEBUG: t.SrcPos: 10
          //DEBUG: e.Name: 16
          //DEBUG: e._: 14
          //DEBUG: e._0: 23
          //DEBUG: e._1: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & CheckPseudofunctions=1\1/4 {REMOVED TILE} e.Name/16 )/13 e._/14 )/6 </18 & CheckPseudofunctions=1\1$2?1/22 e._0/23 {REMOVED TILE} e._1/25 >/19 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/5 Reuse: # Error/9 AsIs: t.SrcPos/10 HalfReuse: # TaggedPseudofunction/12 } Tile{ HalfReuse: # Spec/29 AsIs: e.Name/31 AsIs: )/30 } Tile{ ]] }
          refalrts::update_ident(context[9], identifiers[ident_Error]);
          refalrts::reinit_ident(context[12], identifiers[ident_TaggedPseudofunction]);
          refalrts::reinit_ident(context[29], identifiers[ident_Spec]);
          refalrts::link_brackets( context[5], context[30] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[5], context[12] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[23], context[24], context[20], context[21] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[18], context[19]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckPseudofunctions=1\1/4 (/5 s.new6/9 t.new7/10 s.new8/12 e.new9/14 )/6 >/1
    context[14] = context[7];
    context[15] = context[8];
    if( ! refalrts::svar_term( context[12], context[12] ) )
      continue;
    // closed e.new9 as range 14
    do {
      // </0 & CheckPseudofunctions=1\1/4 (/5 # Entry/9 t.SrcPos/10 # GN-Entry/12 e.Name/16 )/6 >/1
      context[16] = context[14];
      context[17] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_Entry], context[9] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[12] ) )
        continue;
      // closed e.Name as range 16
      //DEBUG: t.SrcPos: 10
      //DEBUG: e.Name: 16
      //10: t.SrcPos
      //16: e.Name

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[20], functions[efunc_gen_CheckPseudofunctions_A1L1S3C1]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Pseudofunctions]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[21] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[18] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </18 & CheckPseudofunctions=1\1$3?1/22 e._/23 (/29 e.Name/31 )/30 e._0/25 >/19
        context[20] = 0;
        context[21] = 0;
        context[22] = refalrts::call_left( context[20], context[21], context[18], context[19] );
        context[23] = 0;
        context[24] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[25] = context[20];
          context[26] = context[21];
          context[27] = 0;
          context[28] = 0;
          context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
          if( ! context[29] )
            continue;
          refalrts::bracket_pointers(context[29], context[30]);
          if( ! refalrts::repeated_evar_left( vm, context[31], context[32], context[16], context[17], context[27], context[28] ) )
            continue;
          if( ! refalrts::empty_seq( context[27], context[28] ) )
            continue;
          // closed e._0 as range 25
          //DEBUG: t.SrcPos: 10
          //DEBUG: e.Name: 16
          //DEBUG: e._: 23
          //DEBUG: e._0: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 {REMOVED TILE} </18 & CheckPseudofunctions=1\1$3?1/22 e._/23 (/29 e.Name/31 )/30 e._0/25 >/19 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # Warning/5 Reuse: # pseudofunctions/9 AsIs: t.SrcPos/10 Reuse: # EntryPseudofunction/12 AsIs: e.Name/16 AsIs: )/6 } Tile{ ]] }
          refalrts::reinit_open_bracket(context[4]);
          refalrts::reinit_ident(context[5], identifiers[ident_Warning]);
          refalrts::update_ident(context[9], identifiers[ident_pseudofunctions]);
          refalrts::update_ident(context[12], identifiers[ident_EntryPseudofunction]);
          refalrts::link_brackets( context[4], context[6] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[4], context[6] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[23], context[24], context[20], context[21] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[18], context[19]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckPseudofunctions=1\1/4 (/5 # Function/9 t.SrcPos/10 s.ScopeClass/12 (/20 e.Name/18 )/21 e.Body/16 )/6 >/1
    context[16] = context[14];
    context[17] = context[15];
    if( ! refalrts::ident_term( identifiers[ident_Function], context[9] ) )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    // closed e.Name as range 18
    // closed e.Body as range 16
    //DEBUG: t.SrcPos: 10
    //DEBUG: s.ScopeClass: 12
    //DEBUG: e.Name: 18
    //DEBUG: e.Body: 16
    //10: t.SrcPos
    //12: s.ScopeClass
    //16: e.Body
    //18: e.Name

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_CheckPseudofunctions_A1L1S4C1]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Pseudofunctions]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[25] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </22 & CheckPseudofunctions=1\1$4?1/26 e._/27 (/33 e.Name/35 )/34 e._0/29 >/23
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
      context[27] = 0;
      context[28] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[29] = context[24];
        context[30] = context[25];
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
        if( ! context[33] )
          continue;
        refalrts::bracket_pointers(context[33], context[34]);
        if( ! refalrts::repeated_evar_left( vm, context[35], context[36], context[18], context[19], context[31], context[32] ) )
          continue;
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e._0 as range 29
        //DEBUG: t.SrcPos: 10
        //DEBUG: s.ScopeClass: 12
        //DEBUG: e.Name: 18
        //DEBUG: e.Body: 16
        //DEBUG: e._: 27
        //DEBUG: e._0: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._/27 {REMOVED TILE} e._0/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/5 AsIs: # Function/9 AsIs: t.SrcPos/10 AsIs: s.ScopeClass/12 AsIs: (/20 AsIs: e.Name/18 AsIs: )/21 AsIs: e.Body/16 AsIs: )/6 AsIs: </22 Reuse: & CheckPseudofunctions-Entry/26 } t.SrcPos/10/37 e.Name/35/39 s.ScopeClass/12/41 Tile{ AsIs: >/23 } Tile{ AsIs: </0 Reuse: & CheckPseudofunctions-Body/4 } t.SrcPos/10/42 Tile{ AsIs: (/33 AsIs: e.Name/35 AsIs: )/34 } e.Body/16/44 Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[37], context[38], context[10], context[11]);
        refalrts::copy_evar(vm, context[39], context[40], context[35], context[36]);
        refalrts::copy_stvar(vm, context[41], context[12]);
        refalrts::copy_evar(vm, context[42], context[43], context[10], context[11]);
        refalrts::copy_evar(vm, context[44], context[45], context[16], context[17]);
        refalrts::update_name(context[26], functions[efunc_CheckPseudofunctionsm_Entry]);
        refalrts::update_name(context[4], functions[efunc_CheckPseudofunctionsm_Body]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[33], context[34] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_evar( res, context[37], context[41] );
        res = refalrts::splice_evar( res, context[5], context[26] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[27], context[28], context[24], context[25] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[22], context[23]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPseudofunctions=1\1/4 t.Other/5 >/1
  //DEBUG: t.Other: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckPseudofunctions=1\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Other/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPseudofunctions_A1L1("CheckPseudofunctions=1\\1", COOKIE1_, COOKIE2_, func_gen_CheckPseudofunctions_A1L1);


static refalrts::FnResult func_CheckPseudofunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & CheckPseudofunctions/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & CheckPseudofunctions=1/6 Tile{ AsIs: </0 Reuse: & Map@2/4 AsIs: e.AST/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_CheckPseudofunctions_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckPseudofunctions("CheckPseudofunctions", COOKIE1_, COOKIE2_, func_CheckPseudofunctions);


static refalrts::FnResult func_SeparateErrors(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & SeparateErrors/4 e.AST-and-messages/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST-and-messages as range 2
  //DEBUG: e.AST-and-messages: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@2/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.AST-and-messages/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SeparateErrors("SeparateErrors", COOKIE1_, COOKIE2_, func_SeparateErrors);


static refalrts::FnResult func_Pseudofunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Pseudofunctions/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 'g'/4 HalfReuse: 'e'/1 }"n_e__"/5 )/7 (/8"gen-e__"/9 )/11 Tile{ ]] }
  refalrts::alloc_chars(vm, context[5], context[6], "n_e__", 5);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_chars(vm, context[9], context[10], "gen-e__", 7);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_char(context[4], 'g');
  refalrts::reinit_char(context[1], 'e');
  refalrts::link_brackets( context[8], context[11] );
  refalrts::link_brackets( context[0], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pseudofunctions("Pseudofunctions", COOKIE1_, COOKIE2_, func_Pseudofunctions);


static refalrts::FnResult func_CheckPseudofunctionsm_Entry(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & CheckPseudofunctions-Entry/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPseudofunctions-Entry/4 t.new1/5 e.new2/2 s.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & CheckPseudofunctions-Entry/4 t.SrcPos/5 e.Name/8 # GN-Local/7 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[7] ) )
      continue;
    // closed e.Name as range 8
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.Name: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckPseudofunctions-Entry/4 t.SrcPos/5 e.Name/8 # GN-Local/7 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPseudofunctions-Entry/4 t.SrcPos/5 e.Name/2 # GN-Entry/7 >/1
  if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[7] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Warning/4 } # pseudofunctions/8 Tile{ AsIs: t.SrcPos/5 } Tile{ Reuse: # EntryPseudofunction/7 } Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[8], identifiers[ident_pseudofunctions]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Warning]);
  refalrts::update_ident(context[7], identifiers[ident_EntryPseudofunction]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckPseudofunctionsm_Entry("CheckPseudofunctions-Entry", COOKIE1_, COOKIE2_, func_CheckPseudofunctionsm_Entry);


static refalrts::FnResult func_CheckPseudofunctionsm_Body(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & CheckPseudofunctions-Body/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPseudofunctions-Body/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & CheckPseudofunctions-Body/4 t.SrcPos/5 (/9 e.Name/11 )/10 # Sentences/15 (/18 (/22 e.Pattern/20 )/23 (/26 e.Result/24 )/27 (/30 e.Blocks/28 )/31 )/19 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = refalrts::ident_left( identifiers[ident_Sentences], context[13], context[14] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[13], context[14] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[16], context[17] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[16], context[17] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[16], context[17] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    // closed e.Name as range 11
    // closed e.Pattern as range 20
    // closed e.Result as range 24
    // closed e.Blocks as range 28
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.Name: 11
    //DEBUG: e.Pattern: 20
    //DEBUG: e.Result: 24
    //DEBUG: e.Blocks: 28
    //5: t.SrcPos
    //11: e.Name
    //20: e.Pattern
    //24: e.Result
    //28: e.Blocks
    //37: e.Pattern

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_CheckPseudofunctionsm_Body_S1C1]);
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_WholeEVar]);
    refalrts::copy_evar(vm, context[37], context[38], context[20], context[21]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[32] );
    res = refalrts::splice_elem( res, context[33] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[35] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_elem( res, context[32] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </32 & CheckPseudofunctions-Body$1?1/36 # True/37 e.Index/34 >/33
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::call_left( context[34], context[35], context[32], context[33] );
      context[37] = refalrts::ident_left( identifiers[ident_True], context[34], context[35] );
      if( ! context[37] )
        continue;
      // closed e.Index as range 34
      //DEBUG: t.SrcPos: 5
      //DEBUG: e.Name: 11
      //DEBUG: e.Pattern: 20
      //DEBUG: e.Result: 24
      //DEBUG: e.Blocks: 28
      //DEBUG: e.Index: 34
      //5: t.SrcPos
      //11: e.Name
      //20: e.Pattern
      //24: e.Result
      //28: e.Blocks
      //34: e.Index
      //43: e.Result

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[40], functions[efunc_gen_CheckPseudofunctionsm_Body_S1C2]);
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_WholeEVar]);
      refalrts::copy_evar(vm, context[43], context[44], context[24], context[25]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[38] );
      res = refalrts::splice_elem( res, context[39] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[41] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[38] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </38 & CheckPseudofunctions-Body$1?2/42 # True/43 e.Index/44 >/39
        context[40] = 0;
        context[41] = 0;
        context[42] = refalrts::call_left( context[40], context[41], context[38], context[39] );
        context[43] = refalrts::ident_left( identifiers[ident_True], context[40], context[41] );
        if( ! context[43] )
          continue;
        if( ! refalrts::repeated_evar_left( vm, context[44], context[45], context[34], context[35], context[40], context[41] ) )
          continue;
        if( ! refalrts::empty_seq( context[40], context[41] ) )
          continue;
        //DEBUG: t.SrcPos: 5
        //DEBUG: e.Name: 11
        //DEBUG: e.Pattern: 20
        //DEBUG: e.Result: 24
        //DEBUG: e.Blocks: 28
        //DEBUG: e.Index: 34
        //5: t.SrcPos
        //11: e.Name
        //20: e.Pattern
        //24: e.Result
        //28: e.Blocks
        //34: e.Index
        //44: e.Index
        //49: e.Blocks

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[46]);
        refalrts::alloc_name(vm, context[48], functions[efunc_gen_CheckPseudofunctionsm_Body_S1C3]);
        refalrts::copy_evar(vm, context[49], context[50], context[28], context[29]);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[46] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_elem( res, context[46] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </46 & CheckPseudofunctions-Body$1?3/50 >/47
          context[48] = 0;
          context[49] = 0;
          context[50] = refalrts::call_left( context[48], context[49], context[46], context[47] );
          if( ! refalrts::empty_seq( context[48], context[49] ) )
            continue;
          //DEBUG: t.SrcPos: 5
          //DEBUG: e.Name: 11
          //DEBUG: e.Pattern: 20
          //DEBUG: e.Result: 24
          //DEBUG: e.Blocks: 28
          //DEBUG: e.Index: 34

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & CheckPseudofunctions-Body/4 t.SrcPos/5 (/9 e.Name/11 )/10 # Sentences/15 (/18 (/22 e.Pattern/20 )/23 (/26 e.Result/24 )/27 (/30 e.Blocks/28 )/31 )/19 </32 & CheckPseudofunctions-Body$1?1/36 # True/37 e.Index/34 >/33 </38 & CheckPseudofunctions-Body$1?2/42 # True/43 e.Index/44 >/39 </46 & CheckPseudofunctions-Body$1?3/50 >/47 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ ]] }
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[46], context[47]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[38], context[39]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[32], context[33]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPseudofunctions-Body/4 t.SrcPos/5 (/9 e.Name/7 )/10 e._/2 >/1
  // closed e.Name as range 7
  // closed e._ as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.Name: 7
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e._/2 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 } Tile{ HalfReuse: # Warning/0 HalfReuse: # pseudofunctions/4 AsIs: t.SrcPos/5 HalfReuse: # BadPseudofunctionBody/9 AsIs: e.Name/7 AsIs: )/10 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[1]);
  refalrts::reinit_ident(context[0], identifiers[ident_Warning]);
  refalrts::reinit_ident(context[4], identifiers[ident_pseudofunctions]);
  refalrts::reinit_ident(context[9], identifiers[ident_BadPseudofunctionBody]);
  refalrts::link_brackets( context[1], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[0], context[10] );
  res = refalrts::splice_elem( res, context[1] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckPseudofunctionsm_Body("CheckPseudofunctions-Body", COOKIE1_, COOKIE2_, func_CheckPseudofunctionsm_Body);


static refalrts::FnResult func_WholeEVar(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & WholeEVar/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & WholeEVar/4 (/9 # Var/11 t._pos/12 'e'/14 e.Index/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Var], context[7], context[8] );
    if( ! context[11] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    context[13] = refalrts::tvar_left( context[12], context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = refalrts::char_left( 'e', context[7], context[8] );
    if( ! context[14] )
      continue;
    // closed e.Index as range 7
    //DEBUG: t._pos: 12
    //DEBUG: e.Index: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & WholeEVar/4 (/9 # Var/11 t._pos/12 'e'/14 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 } Tile{ AsIs: e.Index/7 } Tile{ ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & WholeEVar/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & WholeEVar/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_WholeEVar("WholeEVar", COOKIE1_, COOKIE2_, func_WholeEVar);


static refalrts::FnResult func_gen_CheckSpecs_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & CheckSpecs=3/4 e.AST-and-errors$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST-and-errors$b as range 2
  //DEBUG: e.AST-and-errors$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@2/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.AST-and-errors$b/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSpecs_A3("CheckSpecs=3", COOKIE1_, COOKIE2_, func_gen_CheckSpecs_A3);


static refalrts::FnResult func_gen_CheckSpecs_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & CheckSpecs=2/4 e.AST-and-errors$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST-and-errors$a as range 2
  //DEBUG: e.AST-and-errors$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & CheckSpecs=3/6 Tile{ AsIs: </0 Reuse: & CheckSpecs-Functions/4 AsIs: e.AST-and-errors$a/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_CheckSpecs_A3]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_CheckSpecsm_Functions]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSpecs_A2("CheckSpecs=2", COOKIE1_, COOKIE2_, func_gen_CheckSpecs_A2);


static refalrts::FnResult func_gen_CheckSpecs_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & CheckSpecs=1/4 e.AST-and-errors/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST-and-errors as range 2
  //DEBUG: e.AST-and-errors: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & CheckSpecs=2/6 Tile{ AsIs: </0 Reuse: & Map@3/4 AsIs: e.AST-and-errors/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_CheckSpecs_A2]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z3]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSpecs_A1("CheckSpecs=1", COOKIE1_, COOKIE2_, func_gen_CheckSpecs_A1);


static refalrts::FnResult func_CheckSpecs(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & CheckSpecs/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & CheckSpecs=1/6 Tile{ AsIs: </0 Reuse: & CheckSpecs-Redefine/4 AsIs: e.AST/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_CheckSpecs_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_CheckSpecsm_Redefine]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSpecs("CheckSpecs", COOKIE1_, COOKIE2_, func_CheckSpecs);


static refalrts::FnResult func_CheckSpecsm_Redefine(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & CheckSpecs-Redefine/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CheckSpecs-Redefine/4 e.AST-B/7 (/13 # Spec/15 t.SrcPos1/16 (/20 e.Name/18 )/21 e.Pattern1/11 )/14 e.AST-M/22 (/28 # Spec/30 t.SrcPos2/31 (/35 e.Name/37 )/36 e.Pattern2/26 )/29 e.AST-E/24 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Spec], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[11], context[12] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.Name as range 18
      // closed e.Pattern1 as range 11
      context[22] = 0;
      context[23] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[24] = context[9];
        context[25] = context[10];
        context[26] = 0;
        context[27] = 0;
        context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
        if( ! context[28] )
          continue;
        refalrts::bracket_pointers(context[28], context[29]);
        context[30] = refalrts::ident_left( identifiers[ident_Spec], context[26], context[27] );
        if( ! context[30] )
          continue;
        // closed e.AST-E as range 24
        context[32] = refalrts::tvar_left( context[31], context[26], context[27] );
        if( ! context[32] )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[26], context[27] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        if( ! refalrts::repeated_evar_left( vm, context[37], context[38], context[18], context[19], context[33], context[34] ) )
          continue;
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.Pattern2 as range 26
        //DEBUG: e.AST-B: 7
        //DEBUG: t.SrcPos1: 16
        //DEBUG: e.Name: 18
        //DEBUG: e.Pattern1: 11
        //DEBUG: e.AST-M: 22
        //DEBUG: e.AST-E: 24
        //DEBUG: t.SrcPos2: 31
        //DEBUG: e.Pattern2: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} e.Pattern2/26 )/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckSpecs-Redefine/4 AsIs: e.AST-B/7 AsIs: (/13 AsIs: # Spec/15 AsIs: t.SrcPos1/16 AsIs: (/20 AsIs: e.Name/18 AsIs: )/21 AsIs: e.Pattern1/11 AsIs: )/14 AsIs: e.AST-M/22 AsIs: (/28 Reuse: # Error/30 AsIs: t.SrcPos2/31 HalfReuse: # RedefineSpec/35 AsIs: e.Name/37 AsIs: )/36 } Tile{ AsIs: e.AST-E/24 } Tile{ AsIs: >/1 ]] }
        refalrts::update_ident(context[30], identifiers[ident_Error]);
        refalrts::reinit_ident(context[35], identifiers[ident_RedefineSpec]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[28], context[36] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::splice_to_freelist_open( vm, context[36], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[22], context[23], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSpecs-Redefine/4 e.AST/2 >/1
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckSpecs-Redefine/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.AST/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSpecsm_Redefine("CheckSpecs-Redefine", COOKIE1_, COOKIE2_, func_CheckSpecsm_Redefine);


static refalrts::FnResult func_gen_CheckSpecsm_Formats_L1S1B1S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & CheckSpecs-Formats\1$1:1$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSpecs-Formats\1$1:1$1:1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & CheckSpecs-Formats\1$1:1$1:1/4 t.SrcPos/5 (/9 e.Name/15 )/10 (/13 e.Pattern/17 )/14 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Name as range 15
    // closed e.Pattern as range 17
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.Name: 15
    //DEBUG: e.Pattern: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/13 {REMOVED TILE} )/14 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Spec/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.Name/15 AsIs: )/10 } Tile{ AsIs: e.Pattern/17 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Spec]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::splice_to_freelist_open( vm, context[10], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSpecs-Formats\1$1:1$1:1/4 t.SrcPos/5 (/9 e.Name/7 )/10 (/13 e.Pattern/11 )/14 e.Errors/2 >/1
  // closed e.Name as range 7
  // closed e.Pattern as range 11
  // closed e.Errors as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.Pattern: 11
  //DEBUG: e.Errors: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckSpecs-Formats\1$1:1$1:1/4 t.SrcPos/5 (/9 e.Name/7 )/10 (/13 e.Pattern/11 )/14 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Errors/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSpecsm_Formats_L1S1B1S1B1("CheckSpecs-Formats\\1$1:1$1:1", COOKIE1_, COOKIE2_, func_gen_CheckSpecsm_Formats_L1S1B1S1B1);


static refalrts::FnResult func_gen_CheckSpecsm_Formats_L1S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & CheckSpecs-Formats\1$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSpecs-Formats\1$1:1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 s.new4/15 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckSpecs-Formats\1$1:1/4 t.SrcPos/5 (/9 e.Name/16 )/10 (/13 e.Pattern/18 )/14 # True/15 >/1
    context[16] = context[7];
    context[17] = context[8];
    context[18] = context[11];
    context[19] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_True], context[15] ) )
      continue;
    // closed e.Name as range 16
    // closed e.Pattern as range 18
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.Name: 16
    //DEBUG: e.Pattern: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSpecs-Formats\1$1:1$1:1/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.Name/16 AsIs: )/10 AsIs: (/13 AsIs: e.Pattern/18 AsIs: )/14 HalfReuse: </15 HalfReuse: & ErrorsForRepeatedVariables/1 } </20 & Map@4/21 e.Pattern/18/22 >/24 >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_Map_Z4]);
    refalrts::copy_evar(vm, context[22], context[23], context[18], context[19]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSpecsm_Formats_L1S1B1S1B1]);
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_name(context[1], functions[efunc_ErrorsForRepeatedVariables]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSpecs-Formats\1$1:1/4 t.SrcPos/5 (/9 e.Name/7 )/10 (/13 e.Pattern/11 )/14 # False/15 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[15] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 7
  // closed e.Pattern as range 11
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.Pattern: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/13 e.Pattern/11 )/14 # False/15 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Error/4 AsIs: t.SrcPos/5 HalfReuse: # MustBeHardPattern/9 AsIs: e.Name/7 AsIs: )/10 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Error]);
  refalrts::reinit_ident(context[9], identifiers[ident_MustBeHardPattern]);
  refalrts::link_brackets( context[0], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSpecsm_Formats_L1S1B1("CheckSpecs-Formats\\1$1:1", COOKIE1_, COOKIE2_, func_gen_CheckSpecsm_Formats_L1S1B1);


static refalrts::FnResult func_CheckSpecsm_Formats(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CheckSpecs-Formats/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@3/4 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSpecsm_Formats("CheckSpecs-Formats", COOKIE1_, COOKIE2_, func_CheckSpecsm_Formats);


static refalrts::FnResult func_gen_IsHardPattern_S4B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & IsHardPattern$4:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IsHardPattern$4:1/4 (/7 e.new1/5 )/8 s.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & IsHardPattern$4:1/4 (/7 e.PatternPart2/10 )/8 # True/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_True], context[9] ) )
      continue;
    // closed e.PatternPart2 as range 10
    //DEBUG: e.PatternPart2: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 # True/9 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsHardPattern/4 } Tile{ AsIs: e.PatternPart2/10 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_IsHardPattern]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsHardPattern$4:1/4 (/7 e.PatternPart2/5 )/8 # False/9 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.PatternPart2 as range 5
  //DEBUG: e.PatternPart2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsHardPattern$4:1/4 (/7 e.PatternPart2/5 )/8 # False/9 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsHardPattern_S4B1("IsHardPattern$4:1", COOKIE1_, COOKIE2_, func_gen_IsHardPattern_S4B1);


static refalrts::FnResult func_gen_IsHardPattern_S5B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & IsHardPattern$5:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IsHardPattern$5:1/4 (/7 e.new1/5 )/8 s.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & IsHardPattern$5:1/4 (/7 e.PatternPart2/10 )/8 # True/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_True], context[9] ) )
      continue;
    // closed e.PatternPart2 as range 10
    //DEBUG: e.PatternPart2: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 # True/9 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsHardPattern/4 } Tile{ AsIs: e.PatternPart2/10 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_IsHardPattern]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsHardPattern$5:1/4 (/7 e.PatternPart2/5 )/8 # False/9 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.PatternPart2 as range 5
  //DEBUG: e.PatternPart2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsHardPattern$5:1/4 (/7 e.PatternPart2/5 )/8 # False/9 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsHardPattern_S5B1("IsHardPattern$5:1", COOKIE1_, COOKIE2_, func_gen_IsHardPattern_S5B1);


static refalrts::FnResult func_gen_IsHardPattern_S6B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & IsHardPattern$6:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IsHardPattern$6:1/4 (/7 e.new1/5 )/8 s.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & IsHardPattern$6:1/4 (/7 e.PatternPart2/10 )/8 # True/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_True], context[9] ) )
      continue;
    // closed e.PatternPart2 as range 10
    //DEBUG: e.PatternPart2: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 # True/9 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsHardPattern/4 } Tile{ AsIs: e.PatternPart2/10 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_IsHardPattern]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsHardPattern$6:1/4 (/7 e.PatternPart2/5 )/8 # False/9 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.PatternPart2 as range 5
  //DEBUG: e.PatternPart2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsHardPattern$6:1/4 (/7 e.PatternPart2/5 )/8 # False/9 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsHardPattern_S6B1("IsHardPattern$6:1", COOKIE1_, COOKIE2_, func_gen_IsHardPattern_S6B1);


static refalrts::FnResult func_gen_IsHardPattern_S7B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & IsHardPattern$7:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IsHardPattern$7:1/4 (/7 e.new1/5 )/8 s.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & IsHardPattern$7:1/4 (/7 e.PatternPart2/10 )/8 # True/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_True], context[9] ) )
      continue;
    // closed e.PatternPart2 as range 10
    //DEBUG: e.PatternPart2: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 # True/9 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsHardPattern/4 } Tile{ AsIs: e.PatternPart2/10 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_IsHardPattern]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsHardPattern$7:1/4 (/7 e.PatternPart2/5 )/8 # False/9 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.PatternPart2 as range 5
  //DEBUG: e.PatternPart2: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsHardPattern$7:1/4 (/7 e.PatternPart2/5 )/8 # False/9 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsHardPattern_S7B1("IsHardPattern$7:1", COOKIE1_, COOKIE2_, func_gen_IsHardPattern_S7B1);


static refalrts::FnResult func_IsHardPattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & IsHardPattern/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & IsHardPattern/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & IsHardPattern/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & IsHardPattern/4 (/9 s.new1/11 e.new2/7 )/10 e.new3/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new3 as range 5
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    // closed e.new2 as range 7
    do {
      // </0 & IsHardPattern/4 (/9 # Var/11 t.new5/16 'e'/18 e.new6/12 )/10 e.new4/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::ident_term( identifiers[ident_Var], context[11] ) )
        continue;
      // closed e.new4 as range 14
      context[17] = refalrts::tvar_left( context[16], context[12], context[13] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::char_left( 'e', context[12], context[13] );
      if( ! context[18] )
        continue;
      // closed e.new6 as range 12
      do {
        // </0 & IsHardPattern/4 (/9 # Var/11 t.SrcPos1/16 'e'/18 e.Index/19 )/10 >/1
        context[19] = context[12];
        context[20] = context[13];
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        // closed e.Index as range 19
        //DEBUG: t.SrcPos1: 16
        //DEBUG: e.Index: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & IsHardPattern/4 (/9 # Var/11 t.SrcPos1/16 'e'/18 e.Index/19 )/10 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_True]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & IsHardPattern/4 (/9 # Var/11 t.SrcPos1/16 'e'/18 e.Index1/19 )/10 e.Pattern-M/23 (/29 # Var/31 t.SrcPos2/32 'e'/34 e.Index2/27 )/30 e.Pattern-E/25 >/1
      context[19] = context[12];
      context[20] = context[13];
      context[21] = context[14];
      context[22] = context[15];
      // closed e.Index1 as range 19
      context[23] = 0;
      context[24] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[25] = context[21];
        context[26] = context[22];
        context[27] = 0;
        context[28] = 0;
        context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
        if( ! context[29] )
          continue;
        refalrts::bracket_pointers(context[29], context[30]);
        context[31] = refalrts::ident_left( identifiers[ident_Var], context[27], context[28] );
        if( ! context[31] )
          continue;
        // closed e.Pattern-E as range 25
        context[33] = refalrts::tvar_left( context[32], context[27], context[28] );
        if( ! context[33] )
          continue;
        context[34] = refalrts::char_left( 'e', context[27], context[28] );
        if( ! context[34] )
          continue;
        // closed e.Index2 as range 27
        //DEBUG: t.SrcPos1: 16
        //DEBUG: e.Index1: 19
        //DEBUG: e.Pattern-M: 23
        //DEBUG: e.Pattern-E: 25
        //DEBUG: t.SrcPos2: 32
        //DEBUG: e.Index2: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & IsHardPattern/4 (/9 # Var/11 t.SrcPos1/16 'e'/18 e.Index1/19 )/10 e.Pattern-M/23 (/29 # Var/31 t.SrcPos2/32 'e'/34 e.Index2/27 )/30 e.Pattern-E/25 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_False]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[23], context[24], context[21], context[22] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IsHardPattern/4 (/9 # Brackets/11 e.PatternPart1/12 )/10 e.PatternPart2/14 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Brackets], context[11] ) )
      continue;
    // closed e.PatternPart1 as range 12
    // closed e.PatternPart2 as range 14
    //DEBUG: e.PatternPart1: 12
    //DEBUG: e.PatternPart2: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsHardPattern$4:1/4 AsIs: (/9 } Tile{ AsIs: e.PatternPart2/14 } )/16 </17 Tile{ HalfReuse: & IsHardPattern/11 AsIs: e.PatternPart1/12 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_IsHardPattern_S4B1]);
    refalrts::reinit_name(context[11], functions[efunc_IsHardPattern]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[9], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[10] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & IsHardPattern/4 e.PatternPart1/5 (/9 # Brackets/11 e.PatternPart2/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_right( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Brackets], context[7], context[8] );
    if( ! context[11] )
      continue;
    // closed e.PatternPart1 as range 5
    // closed e.PatternPart2 as range 7
    //DEBUG: e.PatternPart1: 5
    //DEBUG: e.PatternPart2: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </1 } & IsHardPattern$5:1/12 (/13 Tile{ AsIs: e.PatternPart2/7 } Tile{ AsIs: )/10 } Tile{ AsIs: </0 AsIs: & IsHardPattern/4 AsIs: e.PatternPart1/5 HalfReuse: >/9 HalfReuse: >/11 } Tile{ ]] }
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_IsHardPattern_S5B1]);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::reinit_open_call(context[1]);
    refalrts::reinit_close_call(context[9]);
    refalrts::reinit_close_call(context[11]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & IsHardPattern/4 (/9 # ADT-Brackets/11 t.SrcPos/12 (/16 e.Name/14 )/17 e.PatternPart1/7 )/10 e.PatternPart2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[7], context[8] );
    if( ! context[11] )
      continue;
    // closed e.PatternPart2 as range 5
    context[13] = refalrts::tvar_left( context[12], context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[7], context[8] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.Name as range 14
    // closed e.PatternPart1 as range 7
    //DEBUG: e.PatternPart2: 5
    //DEBUG: t.SrcPos: 12
    //DEBUG: e.Name: 14
    //DEBUG: e.PatternPart1: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.SrcPos/12 {REMOVED TILE} e.Name/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsHardPattern$6:1/4 AsIs: (/9 } Tile{ AsIs: e.PatternPart2/5 } Tile{ HalfReuse: )/16 } Tile{ HalfReuse: </11 } Tile{ HalfReuse: & IsHardPattern/17 AsIs: e.PatternPart1/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_IsHardPattern_S6B1]);
    refalrts::reinit_close_bracket(context[16]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[17], functions[efunc_IsHardPattern]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[9], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & IsHardPattern/4 e.PatternPart1/5 (/9 # ADT-Brackets/11 t.SrcPos/12 (/16 e.Name/14 )/17 e.PatternPart2/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_right( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[7], context[8] );
    if( ! context[11] )
      continue;
    // closed e.PatternPart1 as range 5
    context[13] = refalrts::tvar_left( context[12], context[7], context[8] );
    if( ! context[13] )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[7], context[8] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.Name as range 14
    // closed e.PatternPart2 as range 7
    //DEBUG: e.PatternPart1: 5
    //DEBUG: t.SrcPos: 12
    //DEBUG: e.Name: 14
    //DEBUG: e.PatternPart2: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.SrcPos/12 {REMOVED TILE} e.Name/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 } Tile{ HalfReuse: & IsHardPattern$7:1/1 } Tile{ HalfReuse: (/17 AsIs: e.PatternPart2/7 AsIs: )/10 } Tile{ AsIs: </0 AsIs: & IsHardPattern/4 AsIs: e.PatternPart1/5 HalfReuse: >/9 HalfReuse: >/11 } Tile{ ]] }
    refalrts::reinit_open_call(context[16]);
    refalrts::reinit_name(context[1], functions[efunc_gen_IsHardPattern_S7B1]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_close_call(context[9]);
    refalrts::reinit_close_call(context[11]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_evar( res, context[17], context[10] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & IsHardPattern/4 t.Term/7 e.Pattern-E/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Pattern-E as range 5
    //DEBUG: t.Term: 7
    //DEBUG: e.Pattern-E: 5
    //5: e.Pattern-E
    //7: t.Term
    //14: t.Term

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_IsHardPattern_S8C1]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_IsHardTerm]);
    refalrts::copy_stvar(vm, context[14], context[7]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[12] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_stvar( res, context[14] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </9 & IsHardPattern$8?1/13 # True/14 >/10
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::call_left( context[11], context[12], context[9], context[10] );
      context[14] = refalrts::ident_left( identifiers[ident_True], context[11], context[12] );
      if( ! context[14] )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      //DEBUG: t.Term: 7
      //DEBUG: e.Pattern-E: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Term/7 {REMOVED TILE} </9 & IsHardPattern$8?1/13 # True/14 >/10 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & IsHardPattern/4 } Tile{ AsIs: e.Pattern-E/5 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[9], context[10]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsHardPattern/4 e.Pattern-B/2 t.Term/5 >/1
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Pattern-B as range 2
  //DEBUG: t.Term: 5
  //DEBUG: e.Pattern-B: 2
  //2: e.Pattern-B
  //5: t.Term
  //12: t.Term

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_IsHardPattern_S9C1]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_IsHardTerm]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[10] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_stvar( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </7 & IsHardPattern$9?1/11 # True/12 >/8
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
    context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    //DEBUG: t.Term: 5
    //DEBUG: e.Pattern-B: 2

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.Term/5 </7 & IsHardPattern$9?1/11 # True/12 >/8 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & IsHardPattern/4 } Tile{ AsIs: e.Pattern-B/2 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[2], context[3] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[7], context[8]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_IsHardPattern("IsHardPattern", COOKIE1_, COOKIE2_, func_IsHardPattern);


static refalrts::FnResult func_IsHardTerm(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & IsHardTerm/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IsHardTerm/4 t.new1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & IsHardTerm/4 (/5 s.new2/9 t.new3/10 e.new4/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    context[11] = refalrts::tvar_left( context[10], context[7], context[8] );
    if( ! context[11] )
      continue;
    // closed e.new4 as range 7
    do {
      // </0 & IsHardTerm/4 (/5 # Symbol/9 s.Type/10 e.Info/12 )/6 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::svar_term( context[10], context[10] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[9] ) )
        continue;
      // closed e.Info as range 12
      //DEBUG: s.Type: 10
      //DEBUG: e.Info: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & IsHardTerm/4 (/5 # Symbol/9 s.Type/10 e.Info/12 )/6 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IsHardTerm/4 (/5 # Var/9 t.new5/10 s.new6/14 e.new7/12 )/6 >/1
    context[12] = context[7];
    context[13] = context[8];
    if( ! refalrts::ident_term( identifiers[ident_Var], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    // closed e.new7 as range 12
    do {
      // </0 & IsHardTerm/4 (/5 # Var/9 t.SrcPos/10 's'/14 e.Index/15 )/6 >/1
      context[15] = context[12];
      context[16] = context[13];
      if( ! refalrts::char_term( 's', context[14] ) )
        continue;
      // closed e.Index as range 15
      //DEBUG: t.SrcPos: 10
      //DEBUG: e.Index: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & IsHardTerm/4 (/5 # Var/9 t.SrcPos/10 's'/14 e.Index/15 )/6 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IsHardTerm/4 (/5 # Var/9 t.SrcPos/10 't'/14 e.Index/15 )/6 >/1
    context[15] = context[12];
    context[16] = context[13];
    if( ! refalrts::char_term( 't', context[14] ) )
      continue;
    // closed e.Index as range 15
    //DEBUG: t.SrcPos: 10
    //DEBUG: e.Index: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & IsHardTerm/4 (/5 # Var/9 t.SrcPos/10 't'/14 e.Index/15 )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsHardTerm/4 t.Term/5 >/1
  //DEBUG: t.Term: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsHardTerm/4 t.Term/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsHardTerm("IsHardTerm", COOKIE1_, COOKIE2_, func_IsHardTerm);


static refalrts::FnResult func_CheckRepeatedVariables(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & CheckRepeatedVariables/4 e.Pattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Pattern as range 2
  //DEBUG: e.Pattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & ErrorsForRepeatedVariables/6 Tile{ AsIs: </0 Reuse: & Map@4/4 AsIs: e.Pattern/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_ErrorsForRepeatedVariables]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckRepeatedVariables("CheckRepeatedVariables", COOKIE1_, COOKIE2_, func_CheckRepeatedVariables);


static refalrts::FnResult func_ErrorsForRepeatedVariables(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & ErrorsForRepeatedVariables/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & ErrorsForRepeatedVariables/4 e.VarList-B/7 (/13 # Var/15 t.SrcPos1/16 s.Mode/18 e.Index/11 )/14 e.VarList-M/19 (/25 # Var/27 t.SrcPos2/31 s.Mode/30 e.Index/28 )/26 e.VarList-E/21 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
        continue;
      // closed e.Index as range 11
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = refalrts::ident_left( identifiers[ident_Var], context[23], context[24] );
        if( ! context[27] )
          continue;
        if( ! refalrts::repeated_evar_right( vm, context[28], context[29], context[11], context[12], context[23], context[24] ) )
          continue;
        if( ! refalrts::repeated_stvar_right( vm, context[30], context[18], context[23], context[24] ) )
          continue;
        // closed e.VarList-E as range 21
        context[32] = refalrts::tvar_left( context[31], context[23], context[24] );
        if( ! context[32] )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        //DEBUG: e.VarList-B: 7
        //DEBUG: t.SrcPos1: 16
        //DEBUG: s.Mode: 18
        //DEBUG: e.Index: 11
        //DEBUG: e.VarList-M: 19
        //DEBUG: e.VarList-E: 21
        //DEBUG: t.SrcPos2: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & ErrorsForRepeatedVariables/4 AsIs: e.VarList-B/7 AsIs: (/13 AsIs: # Var/15 AsIs: t.SrcPos1/16 AsIs: s.Mode/18 AsIs: e.Index/11 AsIs: )/14 } Tile{ AsIs: e.VarList-M/19 } Tile{ AsIs: e.VarList-E/21 } Tile{ AsIs: >/1 } Tile{ AsIs: (/25 Reuse: # Error/27 AsIs: t.SrcPos2/31 } # RepVarInSpecPattern/33 Tile{ AsIs: s.Mode/30 AsIs: e.Index/28 AsIs: )/26 } Tile{ ]] }
        refalrts::alloc_ident(vm, context[33], identifiers[ident_RepVarInSpecPattern]);
        refalrts::update_ident(context[27], identifiers[ident_Error]);
        refalrts::link_brackets( context[25], context[26] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[30], context[26] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[25], context[32] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ErrorsForRepeatedVariables/4 e.VarList-B/7 (/13 # Var/15 t.SrcPos/16 s.Mode/18 '_'/19 e.Index/11 )/14 e.VarList-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.VarList-E as range 9
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
        continue;
      context[19] = refalrts::char_left( '_', context[11], context[12] );
      if( ! context[19] )
        continue;
      // closed e.Index as range 11
      //DEBUG: e.VarList-B: 7
      //DEBUG: e.VarList-E: 9
      //DEBUG: t.SrcPos: 16
      //DEBUG: s.Mode: 18
      //DEBUG: e.Index: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & ErrorsForRepeatedVariables/4 } Tile{ AsIs: e.VarList-B/7 } Tile{ AsIs: e.VarList-E/9 } Tile{ AsIs: >/1 } Tile{ AsIs: (/13 Reuse: # Error/15 AsIs: t.SrcPos/16 } # UnnamedVariableInSpecPattern/20 Tile{ AsIs: s.Mode/18 AsIs: '_'/19 AsIs: e.Index/11 AsIs: )/14 } Tile{ ]] }
      refalrts::alloc_ident(vm, context[20], identifiers[ident_UnnamedVariableInSpecPattern]);
      refalrts::update_ident(context[15], identifiers[ident_Error]);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[18], context[14] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ErrorsForRepeatedVariables/4 e.VarList/2 >/1
  // closed e.VarList as range 2
  //DEBUG: e.VarList: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ErrorsForRepeatedVariables/4 e.VarList/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ErrorsForRepeatedVariables("ErrorsForRepeatedVariables", COOKIE1_, COOKIE2_, func_ErrorsForRepeatedVariables);


static refalrts::FnResult func_FindVariables(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & FindVariables/4 e.Pattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Pattern as range 2
  //DEBUG: e.Pattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 AsIs: e.Pattern/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindVariables("FindVariables", COOKIE1_, COOKIE2_, func_FindVariables);


static refalrts::FnResult func_gen_CheckSpecsm_Functions_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CheckSpecs-Functions$1=1/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSpecs-Functions/4 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_CheckSpecsm_Functions]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSpecsm_Functions_S1A1("CheckSpecs-Functions$1=1", COOKIE1_, COOKIE2_, func_gen_CheckSpecsm_Functions_S1A1);


static refalrts::FnResult func_gen_CheckSpecsm_Functions_S1A1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & CheckSpecs-Functions$1=1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSpecs-Functions$1=1:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 t.new3/13 s.new4/15 (/18 e.new5/16 )/19 (/22 e.new6/20 )/23 (/26 e.new7/24 )/27 t.new8/28 s.new9/30 e.new10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.new5 as range 16
  // closed e.new6 as range 20
  // closed e.new7 as range 24
  context[29] = refalrts::tvar_left( context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[30], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new10 as range 2
  do {
    // </0 & CheckSpecs-Functions$1=1:1/4 (/7 e.AST-B/31 )/8 (/11 e.AST-M/33 )/12 t.SrcPos2/13 s.ScopeClass/15 (/18 e.Name/35 )/19 (/22 e.Body/37 )/23 (/26 e.AST-E/39 )/27 t.SrcPos1/28 # True/30 >/1
    context[31] = context[5];
    context[32] = context[6];
    context[33] = context[9];
    context[34] = context[10];
    context[35] = context[16];
    context[36] = context[17];
    context[37] = context[20];
    context[38] = context[21];
    context[39] = context[24];
    context[40] = context[25];
    if( ! refalrts::ident_term( identifiers[ident_True], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.AST-B as range 31
    // closed e.AST-M as range 33
    // closed e.Name as range 35
    // closed e.Body as range 37
    // closed e.AST-E as range 39
    //DEBUG: t.SrcPos2: 13
    //DEBUG: t.SrcPos1: 28
    //DEBUG: s.ScopeClass: 15
    //DEBUG: e.AST-B: 31
    //DEBUG: e.AST-M: 33
    //DEBUG: e.Name: 35
    //DEBUG: e.Body: 37
    //DEBUG: e.AST-E: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckSpecs-Functions$1=1:1/4 (/7 {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/23 (/26 {REMOVED TILE} {REMOVED TILE} t.SrcPos1/28 # True/30 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.AST-B/31 } Tile{ AsIs: e.AST-M/33 } Tile{ AsIs: (/22 } Tile{ HalfReuse: # Function/12 AsIs: t.SrcPos2/13 AsIs: s.ScopeClass/15 AsIs: (/18 AsIs: e.Name/35 AsIs: )/19 } Tile{ AsIs: e.Body/37 } Tile{ AsIs: )/27 } Tile{ AsIs: e.AST-E/39 } Tile{ ]] }
    refalrts::reinit_ident(context[12], identifiers[ident_Function]);
    refalrts::link_brackets( context[22], context[27] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSpecs-Functions$1=1:1/4 (/7 e.AST-B/5 )/8 (/11 e.AST-M/9 )/12 t.SrcPos2/13 s.ScopeClass/15 (/18 e.Name/16 )/19 (/22 e.Body/20 )/23 (/26 e.AST-E/24 )/27 t.SrcPos1/28 # False/30 e.Messages/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[30] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST-B as range 5
  // closed e.AST-M as range 9
  // closed e.Name as range 16
  // closed e.Body as range 20
  // closed e.AST-E as range 24
  // closed e.Messages as range 2
  //DEBUG: t.SrcPos2: 13
  //DEBUG: t.SrcPos1: 28
  //DEBUG: s.ScopeClass: 15
  //DEBUG: e.AST-B: 5
  //DEBUG: e.AST-M: 9
  //DEBUG: e.Name: 16
  //DEBUG: e.Body: 20
  //DEBUG: e.AST-E: 24
  //DEBUG: e.Messages: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.AST-B/5 } Tile{ AsIs: (/26 } Tile{ HalfReuse: # Error/27 AsIs: t.SrcPos1/28 } Tile{ HalfReuse: # BadSpecForFunction/7 } e.Name/16/31 Tile{ AsIs: )/8 } Tile{ AsIs: </0 Reuse: & Map@5/4 } t.SrcPos2/13/33 Tile{ AsIs: (/22 } e.Name/16/35 Tile{ HalfReuse: )/30 AsIs: e.Messages/2 AsIs: >/1 } Tile{ AsIs: e.AST-M/9 } Tile{ AsIs: (/11 } Tile{ HalfReuse: # Function/12 AsIs: t.SrcPos2/13 AsIs: s.ScopeClass/15 AsIs: (/18 AsIs: e.Name/16 AsIs: )/19 } Tile{ AsIs: e.Body/20 } Tile{ AsIs: )/23 } Tile{ AsIs: e.AST-E/24 } Tile{ ]] }
  refalrts::copy_evar(vm, context[31], context[32], context[16], context[17]);
  refalrts::copy_evar(vm, context[33], context[34], context[13], context[14]);
  refalrts::copy_evar(vm, context[35], context[36], context[16], context[17]);
  refalrts::reinit_ident(context[27], identifiers[ident_Error]);
  refalrts::reinit_ident(context[7], identifiers[ident_BadSpecForFunction]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::reinit_close_bracket(context[30]);
  refalrts::reinit_ident(context[12], identifiers[ident_Function]);
  refalrts::link_brackets( context[11], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[22], context[30] );
  refalrts::link_brackets( context[26], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[12], context[19] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[30], context[1] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[27], context[29] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSpecsm_Functions_S1A1B1("CheckSpecs-Functions$1=1:1", COOKIE1_, COOKIE2_, func_gen_CheckSpecsm_Functions_S1A1B1);


static refalrts::FnResult func_gen_CheckSpecsm_Functions_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CheckSpecs-Functions$2=1/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSpecs-Functions/4 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_CheckSpecsm_Functions]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSpecsm_Functions_S2A1("CheckSpecs-Functions$2=1", COOKIE1_, COOKIE2_, func_gen_CheckSpecsm_Functions_S2A1);


static refalrts::FnResult func_gen_CheckSpecsm_Functions_S2A1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & CheckSpecs-Functions$2=1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSpecs-Functions$2=1:1/4 (/7 e.new1/5 )/8 t.new2/9 s.new3/11 (/14 e.new4/12 )/15 (/18 e.new5/16 )/19 (/22 e.new6/20 )/23 (/26 e.new7/24 )/27 t.new8/28 s.new9/30 e.new10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.new4 as range 12
  // closed e.new5 as range 16
  // closed e.new6 as range 20
  // closed e.new7 as range 24
  context[29] = refalrts::tvar_left( context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[30], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new10 as range 2
  do {
    // </0 & CheckSpecs-Functions$2=1:1/4 (/7 e.AST-B/31 )/8 t.SrcPos1/9 s.ScopeClass/11 (/14 e.Name/33 )/15 (/18 e.Body/35 )/19 (/22 e.AST-M/37 )/23 (/26 e.AST-E/39 )/27 t.SrcPos2/28 # True/30 >/1
    context[31] = context[5];
    context[32] = context[6];
    context[33] = context[12];
    context[34] = context[13];
    context[35] = context[16];
    context[36] = context[17];
    context[37] = context[20];
    context[38] = context[21];
    context[39] = context[24];
    context[40] = context[25];
    if( ! refalrts::ident_term( identifiers[ident_True], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.AST-B as range 31
    // closed e.Name as range 33
    // closed e.Body as range 35
    // closed e.AST-M as range 37
    // closed e.AST-E as range 39
    //DEBUG: t.SrcPos1: 9
    //DEBUG: t.SrcPos2: 28
    //DEBUG: s.ScopeClass: 11
    //DEBUG: e.AST-B: 31
    //DEBUG: e.Name: 33
    //DEBUG: e.Body: 35
    //DEBUG: e.AST-M: 37
    //DEBUG: e.AST-E: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckSpecs-Functions$2=1:1/4 (/7 {REMOVED TILE} {REMOVED TILE} (/18 {REMOVED TILE} )/19 {REMOVED TILE} {REMOVED TILE} )/23 (/26 {REMOVED TILE} {REMOVED TILE} t.SrcPos2/28 # True/30 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.AST-B/31 } Tile{ AsIs: (/22 } Tile{ HalfReuse: # Function/8 AsIs: t.SrcPos1/9 AsIs: s.ScopeClass/11 AsIs: (/14 AsIs: e.Name/33 AsIs: )/15 } Tile{ AsIs: e.Body/35 } Tile{ AsIs: )/27 } Tile{ AsIs: e.AST-M/37 } Tile{ AsIs: e.AST-E/39 } Tile{ ]] }
    refalrts::reinit_ident(context[8], identifiers[ident_Function]);
    refalrts::link_brackets( context[22], context[27] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSpecs-Functions$2=1:1/4 (/7 e.AST-B/5 )/8 t.SrcPos1/9 s.ScopeClass/11 (/14 e.Name/12 )/15 (/18 e.Body/16 )/19 (/22 e.AST-M/20 )/23 (/26 e.AST-E/24 )/27 t.SrcPos2/28 # False/30 e.Messages/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[30] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST-B as range 5
  // closed e.Name as range 12
  // closed e.Body as range 16
  // closed e.AST-M as range 20
  // closed e.AST-E as range 24
  // closed e.Messages as range 2
  //DEBUG: t.SrcPos1: 9
  //DEBUG: t.SrcPos2: 28
  //DEBUG: s.ScopeClass: 11
  //DEBUG: e.AST-B: 5
  //DEBUG: e.Name: 12
  //DEBUG: e.Body: 16
  //DEBUG: e.AST-M: 20
  //DEBUG: e.AST-E: 24
  //DEBUG: e.Messages: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.AST-B/5 } Tile{ AsIs: (/7 } Tile{ HalfReuse: # Function/8 AsIs: t.SrcPos1/9 AsIs: s.ScopeClass/11 AsIs: (/14 AsIs: e.Name/12 AsIs: )/15 } Tile{ AsIs: e.Body/16 } Tile{ HalfReuse: )/22 AsIs: e.AST-M/20 HalfReuse: (/23 HalfReuse: # Error/26 } Tile{ AsIs: t.SrcPos2/28 } Tile{ HalfReuse: # BadSpecForFunction/19 } e.Name/12/31 Tile{ AsIs: )/27 } Tile{ AsIs: </0 Reuse: & Map@6/4 } t.SrcPos2/28/33 Tile{ AsIs: (/18 } e.Name/12/35 Tile{ HalfReuse: )/30 AsIs: e.Messages/2 AsIs: >/1 } Tile{ AsIs: e.AST-E/24 } Tile{ ]] }
  refalrts::copy_evar(vm, context[31], context[32], context[12], context[13]);
  refalrts::copy_evar(vm, context[33], context[34], context[28], context[29]);
  refalrts::copy_evar(vm, context[35], context[36], context[12], context[13]);
  refalrts::reinit_ident(context[8], identifiers[ident_Function]);
  refalrts::reinit_close_bracket(context[22]);
  refalrts::reinit_open_bracket(context[23]);
  refalrts::reinit_ident(context[26], identifiers[ident_Error]);
  refalrts::reinit_ident(context[19], identifiers[ident_BadSpecForFunction]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z6]);
  refalrts::reinit_close_bracket(context[30]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[30] );
  refalrts::link_brackets( context[23], context[27] );
  refalrts::link_brackets( context[7], context[22] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[30], context[1] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[22], context[26] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[8], context[15] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSpecsm_Functions_S2A1B1("CheckSpecs-Functions$2=1:1", COOKIE1_, COOKIE2_, func_gen_CheckSpecsm_Functions_S2A1B1);


static refalrts::FnResult func_CheckSpecsm_Functions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & CheckSpecs-Functions/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CheckSpecs-Functions/4 e.AST-B/7 (/13 # Spec/15 t.SrcPos1/16 (/20 e.Name/18 )/21 e.Pattern/11 )/14 e.AST-M/22 (/28 # Function/30 t.SrcPos2/31 s.ScopeClass/33 (/36 e.Name/38 )/37 e.Body/26 )/29 e.AST-E/24 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Spec], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[11], context[12] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.Name as range 18
      // closed e.Pattern as range 11
      context[22] = 0;
      context[23] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[24] = context[9];
        context[25] = context[10];
        context[26] = 0;
        context[27] = 0;
        context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
        if( ! context[28] )
          continue;
        refalrts::bracket_pointers(context[28], context[29]);
        context[30] = refalrts::ident_left( identifiers[ident_Function], context[26], context[27] );
        if( ! context[30] )
          continue;
        // closed e.AST-E as range 24
        context[32] = refalrts::tvar_left( context[31], context[26], context[27] );
        if( ! context[32] )
          continue;
        if( ! refalrts::svar_left( context[33], context[26], context[27] ) )
          continue;
        context[34] = 0;
        context[35] = 0;
        context[36] = refalrts::brackets_left( context[34], context[35], context[26], context[27] );
        if( ! context[36] )
          continue;
        refalrts::bracket_pointers(context[36], context[37]);
        if( ! refalrts::repeated_evar_left( vm, context[38], context[39], context[18], context[19], context[34], context[35] ) )
          continue;
        if( ! refalrts::empty_seq( context[34], context[35] ) )
          continue;
        // closed e.Body as range 26
        //DEBUG: e.AST-B: 7
        //DEBUG: t.SrcPos1: 16
        //DEBUG: e.Name: 18
        //DEBUG: e.Pattern: 11
        //DEBUG: e.AST-M: 22
        //DEBUG: e.AST-E: 24
        //DEBUG: t.SrcPos2: 31
        //DEBUG: s.ScopeClass: 33
        //DEBUG: e.Body: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSpecs-Functions$1=1/4 } </40 & CheckSpecs-Functions$1=1:1/41 Tile{ AsIs: (/28 } Tile{ AsIs: e.AST-B/7 } Tile{ AsIs: )/14 } Tile{ AsIs: (/13 } Tile{ AsIs: e.AST-M/22 } Tile{ HalfReuse: )/30 AsIs: t.SrcPos2/31 AsIs: s.ScopeClass/33 AsIs: (/36 AsIs: e.Name/38 AsIs: )/37 } (/42 Tile{ AsIs: e.Body/26 } Tile{ AsIs: )/29 } (/43 Tile{ AsIs: e.AST-E/24 } Tile{ HalfReuse: )/15 AsIs: t.SrcPos1/16 } </44 & ValidBodyForSpec/45 Tile{ AsIs: (/20 AsIs: e.Name/18 AsIs: )/21 } (/46 Tile{ AsIs: e.Pattern/11 } )/47 e.Body/26/48 >/50 >/51 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[40]);
        refalrts::alloc_name(vm, context[41], functions[efunc_gen_CheckSpecsm_Functions_S1A1B1]);
        refalrts::alloc_open_bracket(vm, context[42]);
        refalrts::alloc_open_bracket(vm, context[43]);
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ValidBodyForSpec]);
        refalrts::alloc_open_bracket(vm, context[46]);
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::copy_evar(vm, context[48], context[49], context[26], context[27]);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::update_name(context[4], functions[efunc_gen_CheckSpecsm_Functions_S1A1]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::reinit_close_bracket(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[44] );
        refalrts::link_brackets( context[46], context[47] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::link_brackets( context[43], context[15] );
        refalrts::link_brackets( context[42], context[29] );
        refalrts::link_brackets( context[36], context[37] );
        refalrts::link_brackets( context[13], context[30] );
        refalrts::link_brackets( context[28], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[47], context[51] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_evar( res, context[30], context[37] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[22], context[23], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckSpecs-Functions/4 e.AST-B/7 (/13 # Function/15 t.SrcPos1/16 s.ScopeClass/18 (/21 e.Name/19 )/22 e.Body/11 )/14 e.AST-M/23 (/29 # Spec/31 t.SrcPos2/32 (/36 e.Name/38 )/37 e.Pattern/27 )/30 e.AST-E/25 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Function], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
        continue;
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[11], context[12] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.Name as range 19
      // closed e.Body as range 11
      context[23] = 0;
      context[24] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[25] = context[9];
        context[26] = context[10];
        context[27] = 0;
        context[28] = 0;
        context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
        if( ! context[29] )
          continue;
        refalrts::bracket_pointers(context[29], context[30]);
        context[31] = refalrts::ident_left( identifiers[ident_Spec], context[27], context[28] );
        if( ! context[31] )
          continue;
        // closed e.AST-E as range 25
        context[33] = refalrts::tvar_left( context[32], context[27], context[28] );
        if( ! context[33] )
          continue;
        context[34] = 0;
        context[35] = 0;
        context[36] = refalrts::brackets_left( context[34], context[35], context[27], context[28] );
        if( ! context[36] )
          continue;
        refalrts::bracket_pointers(context[36], context[37]);
        if( ! refalrts::repeated_evar_left( vm, context[38], context[39], context[19], context[20], context[34], context[35] ) )
          continue;
        if( ! refalrts::empty_seq( context[34], context[35] ) )
          continue;
        // closed e.Pattern as range 27
        //DEBUG: e.AST-B: 7
        //DEBUG: t.SrcPos1: 16
        //DEBUG: s.ScopeClass: 18
        //DEBUG: e.Name: 19
        //DEBUG: e.Body: 11
        //DEBUG: e.AST-M: 23
        //DEBUG: e.AST-E: 25
        //DEBUG: t.SrcPos2: 32
        //DEBUG: e.Pattern: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSpecs-Functions$2=1/4 } </40 & CheckSpecs-Functions$2=1:1/41 Tile{ AsIs: (/13 } Tile{ AsIs: e.AST-B/7 } Tile{ HalfReuse: )/15 AsIs: t.SrcPos1/16 AsIs: s.ScopeClass/18 AsIs: (/21 AsIs: e.Name/19 AsIs: )/22 } (/42 Tile{ AsIs: e.Body/11 } Tile{ AsIs: )/30 } Tile{ HalfReuse: (/14 AsIs: e.AST-M/23 HalfReuse: )/29 HalfReuse: (/31 } Tile{ AsIs: e.AST-E/25 } )/43 Tile{ AsIs: t.SrcPos2/32 } </44 & ValidBodyForSpec/45 Tile{ AsIs: (/36 AsIs: e.Name/38 AsIs: )/37 } (/46 Tile{ AsIs: e.Pattern/27 } )/47 e.Body/11/48 >/50 >/51 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[40]);
        refalrts::alloc_name(vm, context[41], functions[efunc_gen_CheckSpecsm_Functions_S2A1B1]);
        refalrts::alloc_open_bracket(vm, context[42]);
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_ValidBodyForSpec]);
        refalrts::alloc_open_bracket(vm, context[46]);
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::copy_evar(vm, context[48], context[49], context[11], context[12]);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::update_name(context[4], functions[efunc_gen_CheckSpecsm_Functions_S2A1]);
        refalrts::reinit_close_bracket(context[15]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[29]);
        refalrts::reinit_open_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[44] );
        refalrts::link_brackets( context[46], context[47] );
        refalrts::link_brackets( context[36], context[37] );
        refalrts::link_brackets( context[31], context[43] );
        refalrts::link_brackets( context[14], context[29] );
        refalrts::link_brackets( context[42], context[30] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[13], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[47], context[51] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[14], context[31] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_evar( res, context[15], context[22] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[23], context[24], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckSpecs-Functions/4 e.AST-B/7 (/13 # Spec/15 t.SrcPos/16 (/20 e.Name/18 )/21 e.Pattern/11 )/14 e.AST-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Spec], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.AST-E as range 9
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[11], context[12] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.Name as range 18
      // closed e.Pattern as range 11
      //DEBUG: e.AST-B: 7
      //DEBUG: e.AST-E: 9
      //DEBUG: t.SrcPos: 16
      //DEBUG: e.Name: 18
      //DEBUG: e.Pattern: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Pattern/11 )/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckSpecs-Functions/4 AsIs: e.AST-B/7 AsIs: (/13 Reuse: # Error/15 AsIs: t.SrcPos/16 HalfReuse: # OrphanSpec/20 AsIs: e.Name/18 AsIs: )/21 } Tile{ AsIs: e.AST-E/9 } Tile{ AsIs: >/1 ]] }
      refalrts::update_ident(context[15], identifiers[ident_Error]);
      refalrts::reinit_ident(context[20], identifiers[ident_OrphanSpec]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, context[21], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSpecs-Functions/4 e.AST/2 >/1
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckSpecs-Functions/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.AST/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSpecsm_Functions("CheckSpecs-Functions", COOKIE1_, COOKIE2_, func_CheckSpecsm_Functions);


static refalrts::FnResult func_gen_ValidBodyForSpec_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & ValidBodyForSpec$1=1/4 (/7 s.BoolResult/9 e.Messages/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Messages as range 5
  //DEBUG: s.BoolResult: 9
  //DEBUG: e.Messages: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & ValidBodyForSpec$1=1/4 (/7 s.BoolResult/9 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: s.BoolResult9 /0 } Tile{ AsIs: e.Messages/5 } Tile{ ]] }
  refalrts::reinit_svar( context[0], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ValidBodyForSpec_S1A1("ValidBodyForSpec$1=1", COOKIE1_, COOKIE2_, func_gen_ValidBodyForSpec_S1A1);


static refalrts::FnResult func_ValidBodyForSpec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & ValidBodyForSpec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ValidBodyForSpec/4 (/7 e.new1/5 )/8 t.new2/9 s.new3/11 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & ValidBodyForSpec/4 (/7 e.Name/12 )/8 t.Pattern/9 # Sentences/11 e.Sentences/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Sentences], context[11] ) )
      continue;
    // closed e.Name as range 12
    // closed e.Sentences as range 14
    //DEBUG: t.Pattern: 9
    //DEBUG: e.Name: 12
    //DEBUG: e.Sentences: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Name/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ValidBodyForSpec$1=1/4 HalfReuse: </7 } Tile{ HalfReuse: & Reduce@2/8 AsIs: t.Pattern/9 } (/16 # True/17 Tile{ HalfReuse: )/11 AsIs: e.Sentences/14 AsIs: >/1 } >/18 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_ident(vm, context[17], identifiers[ident_True]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_ValidBodyForSpec_S1A1]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_Reduce_Z2]);
    refalrts::reinit_close_bracket(context[11]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[16], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[8], context[10] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ValidBodyForSpec/4 (/7 e.Name/5 )/8 t.Pattern/9 # NativeBody/11 e.Code/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[11] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 5
  // closed e.Code as range 2
  //DEBUG: t.Pattern: 9
  //DEBUG: e.Name: 5
  //DEBUG: e.Code: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pattern/9 {REMOVED TILE} e.Code/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ Reuse: # False/11 } Tile{ HalfReuse: (/0 HalfReuse: # NativeOptimizable/4 HalfReuse: # Spec/7 AsIs: e.Name/5 AsIs: )/8 } Tile{ ]] }
  refalrts::update_ident(context[11], identifiers[ident_False]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_NativeOptimizable]);
  refalrts::reinit_ident(context[7], identifiers[ident_Spec]);
  refalrts::link_brackets( context[0], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ValidBodyForSpec("ValidBodyForSpec", COOKIE1_, COOKIE2_, func_ValidBodyForSpec);


static refalrts::FnResult func_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1/4 (/7 s.BoolResult/9 (/12 e.Messages$a/10 )/13 e.ExtractedVars/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[5], context[6] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.Messages$a as range 10
  // closed e.ExtractedVars as range 5
  //DEBUG: s.BoolResult: 9
  //DEBUG: e.Messages$a: 10
  //DEBUG: e.ExtractedVars: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & ValidBodyForSpec-CheckSentensePattern$1:1$1=1/4 (/7 s.BoolResult/9 {REMOVED TILE} e.ExtractedVars/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: s.BoolResult9 /12 AsIs: e.Messages$a/10 AsIs: )/13 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_svar( context[12], context[9] );
  refalrts::link_brackets( context[0], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1("ValidBodyForSpec-CheckSentensePattern$1:1$1=1", COOKIE1_, COOKIE2_, func_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1);


static refalrts::FnResult func_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1B1S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1:1$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1:1$1:1/4 (/7 e.new1/5 )/8 t.new2/9 s.new3/11 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1:1$1:1/4 (/7 e.NMessages/12 )/8 t.Var/9 # True/11 e.ExtractedVars$a/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_True], context[11] ) )
      continue;
    // closed e.NMessages as range 12
    // closed e.ExtractedVars$a as range 14
    //DEBUG: t.Var: 9
    //DEBUG: e.NMessages: 12
    //DEBUG: e.ExtractedVars$a: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Var/9 # True/11 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # True/4 AsIs: (/7 AsIs: e.NMessages/12 AsIs: )/8 } Tile{ AsIs: e.ExtractedVars$a/14 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_True]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1:1$1:1/4 (/7 e.NMessages/5 )/8 t.Var/9 # False/11 e.ExtractedVars$a/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[11] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NMessages as range 5
  // closed e.ExtractedVars$a as range 2
  //DEBUG: t.Var: 9
  //DEBUG: e.NMessages: 5
  //DEBUG: e.ExtractedVars$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # False/4 AsIs: (/7 AsIs: e.NMessages/5 HalfReuse: (/8 } # SpecStaticParamRepeatingVars/12 Tile{ AsIs: t.Var/9 } )/13 Tile{ HalfReuse: )/11 AsIs: e.ExtractedVars$a/2 HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[12], identifiers[ident_SpecStaticParamRepeatingVars]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_False]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::link_brackets( context[8], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1B1S1B1("ValidBodyForSpec-CheckSentensePattern$1:1$1=1\\1$1:1$1:1", COOKIE1_, COOKIE2_, func_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1B1S1B1);


static refalrts::FnResult func_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1:1/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 s.new5/19 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1:1/4 (/7 e.NMessages/20 )/8 t.Var/9 (/13 e.ExtractedVars/22 )/14 (/17 e.Val/24 )/18 # True/19 >/1
    context[20] = context[5];
    context[21] = context[6];
    context[22] = context[11];
    context[23] = context[12];
    context[24] = context[15];
    context[25] = context[16];
    if( ! refalrts::ident_term( identifiers[ident_True], context[19] ) )
      continue;
    // closed e.NMessages as range 20
    // closed e.ExtractedVars as range 22
    // closed e.Val as range 24
    //DEBUG: t.Var: 9
    //DEBUG: e.NMessages: 20
    //DEBUG: e.ExtractedVars: 22
    //DEBUG: e.Val: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1:1$1:1/4 AsIs: (/7 AsIs: e.NMessages/20 AsIs: )/8 AsIs: t.Var/9 HalfReuse: </13 } & CheckSpec-RepeatingVarInStaticParams/26 Tile{ AsIs: e.ExtractedVars/22 } Tile{ HalfReuse: </14 HalfReuse: & ExtractVariables-Expr/17 AsIs: e.Val/24 HalfReuse: >/18 HalfReuse: >/19 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[26], functions[efunc_CheckSpecm_RepeatingVarInStaticParams]);
    refalrts::update_name(context[4], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1B1S1B1]);
    refalrts::reinit_open_call(context[13]);
    refalrts::reinit_open_call(context[14]);
    refalrts::reinit_name(context[17], functions[efunc_ExtractVariablesm_Expr]);
    refalrts::reinit_close_call(context[18]);
    refalrts::reinit_close_call(context[19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1:1/4 (/7 e.NMessages/5 )/8 t.Var/9 (/13 e.ExtractedVars/11 )/14 (/17 e.Val/15 )/18 # False/19 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[19] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NMessages as range 5
  // closed e.ExtractedVars as range 11
  // closed e.Val as range 15
  //DEBUG: t.Var: 9
  //DEBUG: e.NMessages: 5
  //DEBUG: e.ExtractedVars: 11
  //DEBUG: e.Val: 15

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/17 e.Val/15 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # False/4 AsIs: (/7 AsIs: e.NMessages/5 HalfReuse: (/8 } Tile{ Reuse: # SpecStaticParamTypeMismatching/19 } Tile{ AsIs: t.Var/9 } Tile{ AsIs: )/18 } Tile{ HalfReuse: )/13 AsIs: e.ExtractedVars/11 AsIs: )/14 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_False]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::update_ident(context[19], identifiers[ident_SpecStaticParamTypeMismatching]);
  refalrts::reinit_close_bracket(context[13]);
  refalrts::link_brackets( context[0], context[14] );
  refalrts::link_brackets( context[7], context[13] );
  refalrts::link_brackets( context[8], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[19] );
  refalrts::splice_to_freelist_open( vm, context[8], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1B1("ValidBodyForSpec-CheckSentensePattern$1:1$1=1\\1$1:1", COOKIE1_, COOKIE2_, func_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1B1);


static refalrts::FnResult func_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1/4 (/7 s.new1/13 (/16 e.new2/14 )/17 e.new3/5 )/8 (/11 e.new4/9 ':'/20 t.new5/18 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[5], context[6] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 14
  // closed e.new3 as range 5
  context[19] = refalrts::tvar_right( context[18], context[9], context[10] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  context[20] = refalrts::char_right( ':', context[9], context[10] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 9
  do {
    // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1/4 (/7 # True/13 (/16 e.NMessages/21 )/17 e.ExtractedVars/23 )/8 (/11 e.Val/25 ':'/20 t.Var/18 )/12 >/1
    context[21] = context[14];
    context[22] = context[15];
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[9];
    context[26] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_True], context[13] ) )
      continue;
    // closed e.NMessages as range 21
    // closed e.ExtractedVars as range 23
    // closed e.Val as range 25
    //DEBUG: t.Var: 18
    //DEBUG: e.NMessages: 21
    //DEBUG: e.ExtractedVars: 23
    //DEBUG: e.Val: 25
    //18: t.Var
    //21: e.NMessages
    //23: e.ExtractedVars
    //25: e.Val
    //32: t.Var

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1C1]);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_IsSpecStaticVar]);
    refalrts::copy_stvar(vm, context[32], context[18]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[27] );
    res = refalrts::splice_elem( res, context[28] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[30] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_stvar( res, context[32] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_elem( res, context[27] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </27 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1?1/31 # True/32 >/28
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::call_left( context[29], context[30], context[27], context[28] );
      context[32] = refalrts::ident_left( identifiers[ident_True], context[29], context[30] );
      if( ! context[32] )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      //DEBUG: t.Var: 18
      //DEBUG: e.NMessages: 21
      //DEBUG: e.ExtractedVars: 23
      //DEBUG: e.Val: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} # True/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1$1:1/4 AsIs: (/7 } Tile{ AsIs: e.NMessages/21 } Tile{ AsIs: )/12 } Tile{ AsIs: t.Var/18 } Tile{ HalfReuse: (/17 AsIs: e.ExtractedVars/23 AsIs: )/8 AsIs: (/11 AsIs: e.Val/25 HalfReuse: )/20 } Tile{ AsIs: </27 Reuse: & CheckSpec-VarTypeMatching/31 HalfReuse: (/32 } e.Val/25/33 Tile{ HalfReuse: )/16 } t.Var/18/35 Tile{ AsIs: >/28 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[33], context[34], context[25], context[26]);
      refalrts::copy_evar(vm, context[35], context[36], context[18], context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1S1B1]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_close_bracket(context[20]);
      refalrts::update_name(context[31], functions[efunc_CheckSpecm_VarTypeMatching]);
      refalrts::reinit_open_bracket(context[32]);
      refalrts::reinit_close_bracket(context[16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[32], context[16] );
      refalrts::link_brackets( context[11], context[20] );
      refalrts::link_brackets( context[17], context[8] );
      refalrts::link_brackets( context[7], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[27], context[32] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[27], context[28]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1/4 (/7 s.Other/13 (/16 e.NMessages/14 )/17 e.ExtractedVars/5 )/8 (/11 e.Val/9 ':'/20 t.Var/18 )/12 >/1
  // closed e.NMessages as range 14
  // closed e.ExtractedVars as range 5
  // closed e.Val as range 9
  //DEBUG: t.Var: 18
  //DEBUG: s.Other: 13
  //DEBUG: e.NMessages: 14
  //DEBUG: e.ExtractedVars: 5
  //DEBUG: e.Val: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1/4 {REMOVED TILE} (/11 e.Val/9 ':'/20 t.Var/18 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: s.Other/13 AsIs: (/16 AsIs: e.NMessages/14 AsIs: )/17 AsIs: e.ExtractedVars/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1("ValidBodyForSpec-CheckSentensePattern$1:1$1=1\\1", COOKIE1_, COOKIE2_, func_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1);


static refalrts::FnResult func_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & ValidBodyForSpec-CheckSentensePattern$1:1/4 (/7 e.Messages/10 )/8 # Clear/9 e.Vars/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Clear], context[9] ) )
      continue;
    // closed e.Messages as range 10
    // closed e.Vars as range 12
    //DEBUG: e.Messages: 10
    //DEBUG: e.Vars: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Messages/10 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ValidBodyForSpec-CheckSentensePattern$1:1$1=1/4 HalfReuse: </7 } & Reduce@3/14 (/15 # True/16 (/17 Tile{ AsIs: )/8 HalfReuse: )/9 AsIs: e.Vars/12 AsIs: >/1 } >/18 Tile{ ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_Z3]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_ident(vm, context[16], identifiers[ident_True]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_close_bracket(context[9]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[9] );
    refalrts::link_brackets( context[17], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[8], context[1] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ValidBodyForSpec-CheckSentensePattern$1:1/4 (/7 e.Messages/10 )/8 # Contracted/9 e.Vars/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Contracted], context[9] ) )
      continue;
    // closed e.Messages as range 10
    // closed e.Vars as range 12
    //DEBUG: e.Messages: 10
    //DEBUG: e.Vars: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} # Contracted/9 e.Vars/12 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # False/7 AsIs: e.Messages/10 AsIs: )/8 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[7], identifiers[ident_False]);
    refalrts::link_brackets( context[4], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[4], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1/4 (/7 e.new5/5 )/8 s.new4/9 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 5
  do {
    // </0 & ValidBodyForSpec-CheckSentensePattern$1:1/4 (/7 e.Messages/10 )/8 # Failure/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Failure], context[9] ) )
      continue;
    // closed e.Messages as range 10
    //DEBUG: e.Messages: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} # Failure/9 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # False/7 AsIs: e.Messages/10 AsIs: )/8 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[7], identifiers[ident_False]);
    refalrts::link_brackets( context[4], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[4], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ValidBodyForSpec-CheckSentensePattern$1:1/4 (/7 e.Messages/5 )/8 # Undefined/9 >/1
  if( ! refalrts::ident_term( identifiers[ident_Undefined], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Messages as range 5
  //DEBUG: e.Messages: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} # Undefined/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # False/7 AsIs: e.Messages/5 AsIs: )/8 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[7], identifiers[ident_False]);
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1("ValidBodyForSpec-CheckSentensePattern$1:1", COOKIE1_, COOKIE2_, func_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1);


static refalrts::FnResult func_ValidBodyForSpecm_CheckSentensePattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & ValidBodyForSpec-CheckSentensePattern/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ValidBodyForSpec-CheckSentensePattern/4 t.new1/5 (/9 s.new2/11 e.new3/7 )/10 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new4 as range 2
  if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 7
  do {
    // </0 & ValidBodyForSpec-CheckSentensePattern/4 (/5 e.SpecPattern/16 )/6 (/9 # True/11 e.Messages/12 )/10 (/20 (/24 e.SentencePattern/22 )/25 e.OtherSentenceConstruction/18 )/21 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[2];
    context[15] = context[3];
    context[16] = 0;
    context[17] = 0;
    if( ! refalrts::brackets_term( context[16], context[17], context[5] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_True], context[11] ) )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    context[22] = 0;
    context[23] = 0;
    context[24] = refalrts::brackets_left( context[22], context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    refalrts::bracket_pointers(context[24], context[25]);
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    // closed e.SpecPattern as range 16
    // closed e.Messages as range 12
    // closed e.SentencePattern as range 22
    // closed e.OtherSentenceConstruction as range 18
    //DEBUG: e.SpecPattern: 16
    //DEBUG: e.Messages: 12
    //DEBUG: e.SentencePattern: 22
    //DEBUG: e.OtherSentenceConstruction: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.OtherSentenceConstruction/18 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </6 HalfReuse: & ValidBodyForSpec-CheckSentensePattern$1:1/9 HalfReuse: (/11 AsIs: e.Messages/12 AsIs: )/10 HalfReuse: </20 HalfReuse: & GenericMatch/24 } Tile{ AsIs: (/5 } Tile{ AsIs: </0 Reuse: & RemovePos-Expr/4 } Tile{ AsIs: e.SentencePattern/22 } >/26 Tile{ AsIs: )/25 } (/27 </28 & RemovePos-Expr/29 Tile{ AsIs: e.SpecPattern/16 } >/30 )/31 Tile{ HalfReuse: >/21 AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_RemovePosm_Expr]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::reinit_open_call(context[6]);
    refalrts::reinit_name(context[9], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1]);
    refalrts::reinit_open_bracket(context[11]);
    refalrts::reinit_open_call(context[20]);
    refalrts::reinit_name(context[24], functions[efunc_GenericMatch]);
    refalrts::update_name(context[4], functions[efunc_RemovePosm_Expr]);
    refalrts::reinit_close_call(context[21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[27], context[31] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[5], context[25] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[21];
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[6], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ValidBodyForSpec-CheckSentensePattern/4 t.SpecPattern/5 (/9 # False/11 e.Messages/7 )/10 e.Anything/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[11] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Messages as range 7
  // closed e.Anything as range 2
  //DEBUG: t.SpecPattern: 5
  //DEBUG: e.Messages: 7
  //DEBUG: e.Anything: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ValidBodyForSpec-CheckSentensePattern/4 t.SpecPattern/5 {REMOVED TILE} e.Anything/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # False/11 AsIs: e.Messages/7 AsIs: )/10 } Tile{ ]] }
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ValidBodyForSpecm_CheckSentensePattern("ValidBodyForSpec-CheckSentensePattern", COOKIE1_, COOKIE2_, func_ValidBodyForSpecm_CheckSentensePattern);


static refalrts::FnResult func_CheckSpecm_VarTypeMatching(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & CheckSpec-VarTypeMatching/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSpec-VarTypeMatching/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  do {
    // </0 & CheckSpec-VarTypeMatching/4 (/7 (/19 # Var/21 s.Mode/22 e.Val/17 )/20 )/8 (/11 s.Mode/23 e.Var/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[13], context[14] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = refalrts::ident_left( identifiers[ident_Var], context[17], context[18] );
    if( ! context[21] )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[22], context[17], context[18] ) )
      continue;
    if( ! refalrts::repeated_stvar_left( vm, context[23], context[22], context[15], context[16] ) )
      continue;
    // closed e.Val as range 17
    // closed e.Var as range 15
    //DEBUG: s.Mode: 22
    //DEBUG: e.Val: 17
    //DEBUG: e.Var: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckSpec-VarTypeMatching/4 (/7 (/19 # Var/21 s.Mode/22 e.Val/17 )/20 )/8 (/11 s.Mode/23 e.Var/15 )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSpec-VarTypeMatching/4 (/7 e.Val/5 )/8 (/11 e.Var/9 )/12 >/1
  // closed e.Val as range 5
  // closed e.Var as range 9
  //DEBUG: e.Val: 5
  //DEBUG: e.Var: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckSpec-VarTypeMatching/4 (/7 e.Val/5 )/8 (/11 e.Var/9 )/12 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSpecm_VarTypeMatching("CheckSpec-VarTypeMatching", COOKIE1_, COOKIE2_, func_CheckSpecm_VarTypeMatching);


static refalrts::FnResult func_CheckSpecm_RepeatingVarInStaticParams(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & CheckSpec-RepeatingVarInStaticParams/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CheckSpec-RepeatingVarInStaticParams/4 e.ExtractedVars-B/7 (/13 s.Mode/15 '_'/16 e.Index/11 )/14 e.ExtractedVars-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      // closed e.ExtractedVars-E as range 9
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      context[16] = refalrts::char_left( '_', context[11], context[12] );
      if( ! context[16] )
        continue;
      // closed e.Index as range 11
      //DEBUG: e.ExtractedVars-B: 7
      //DEBUG: e.ExtractedVars-E: 9
      //DEBUG: s.Mode: 15
      //DEBUG: e.Index: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckSpec-RepeatingVarInStaticParams/4 {REMOVED TILE} (/13 s.Mode/15 '_'/16 e.Index/11 )/14 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # True/0 } Tile{ AsIs: e.ExtractedVars-B/7 } Tile{ AsIs: e.ExtractedVars-E/9 } Tile{ ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckSpec-RepeatingVarInStaticParams/4 e.ExtractedVars-B/7 (/13 e.Var/11 )/14 e.ExtractedVars-M/15 (/21 e.Var/23 )/22 e.ExtractedVars-E/17 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      // closed e.Var as range 11
      context[15] = 0;
      context[16] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[17] = context[9];
        context[18] = context[10];
        context[19] = 0;
        context[20] = 0;
        context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
        if( ! context[21] )
          continue;
        refalrts::bracket_pointers(context[21], context[22]);
        if( ! refalrts::repeated_evar_left( vm, context[23], context[24], context[11], context[12], context[19], context[20] ) )
          continue;
        if( ! refalrts::empty_seq( context[19], context[20] ) )
          continue;
        // closed e.ExtractedVars-E as range 17
        //DEBUG: e.ExtractedVars-B: 7
        //DEBUG: e.Var: 11
        //DEBUG: e.ExtractedVars-M: 15
        //DEBUG: e.ExtractedVars-E: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} (/21 e.Var/23 )/22 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/4 AsIs: e.ExtractedVars-B/7 AsIs: (/13 AsIs: e.Var/11 AsIs: )/14 } Tile{ AsIs: e.ExtractedVars-M/15 } Tile{ AsIs: e.ExtractedVars-E/17 } Tile{ ]] }
        refalrts::reinit_ident(context[4], identifiers[ident_False]);
        refalrts::link_brackets( context[13], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[4], context[14] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[15], context[16], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSpec-RepeatingVarInStaticParams/4 e.ExtractedVars/2 >/1
  // closed e.ExtractedVars as range 2
  //DEBUG: e.ExtractedVars: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & CheckSpec-RepeatingVarInStaticParams/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # True/0 } Tile{ AsIs: e.ExtractedVars/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSpecm_RepeatingVarInStaticParams("CheckSpec-RepeatingVarInStaticParams", COOKIE1_, COOKIE2_, func_CheckSpecm_RepeatingVarInStaticParams);


static refalrts::FnResult func_gen_IsSpecStaticVar_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & IsSpecStaticVar:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & IsSpecStaticVar:1/4 'L'/7 'u'/8 s._/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::char_left( 'L', context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = refalrts::char_left( 'u', context[5], context[6] );
    if( ! context[8] )
      continue;
    if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s._: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & IsSpecStaticVar:1/4 'L'/7 'u'/8 s._/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsSpecStaticVar:1/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsSpecStaticVar:1/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsSpecStaticVar_B1("IsSpecStaticVar:1", COOKIE1_, COOKIE2_, func_gen_IsSpecStaticVar_B1);


static refalrts::FnResult func_IsSpecStaticVar(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & IsSpecStaticVar/4 (/7 s.Mode/9 s.FirstSymbol/10 e.Index/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Index as range 5
  //DEBUG: s.Mode: 9
  //DEBUG: s.FirstSymbol: 10
  //DEBUG: e.Index: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Mode/9 {REMOVED TILE} e.Index/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsSpecStaticVar:1/4 HalfReuse: </7 } & Type/11 Tile{ AsIs: s.FirstSymbol/10 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[11], functions[efunc_Type]);
  refalrts::update_name(context[4], functions[efunc_gen_IsSpecStaticVar_B1]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsSpecStaticVar("IsSpecStaticVar", COOKIE1_, COOKIE2_, func_IsSpecStaticVar);


static refalrts::FnResult func_SeparateDefines(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & SeparateDefines/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@1/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SeparateDefines("SeparateDefines", COOKIE1_, COOKIE2_, func_SeparateDefines);


static refalrts::FnResult func_CheckDeclarations(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & CheckDeclarations/4 (/7 e.WarningIds/5 )/8 e.Declarations/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.WarningIds as range 5
  // closed e.Declarations as range 2
  //DEBUG: e.WarningIds: 5
  //DEBUG: e.Declarations: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} e.WarningIds/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@1/4 HalfReuse: </7 } Tile{ HalfReuse: & CleanupValidEntry/8 AsIs: e.Declarations/2 AsIs: >/1 } >/9 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z1]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_CleanupValidEntry]);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckDeclarations("CheckDeclarations", COOKIE1_, COOKIE2_, func_CheckDeclarations);


static refalrts::FnResult func_gen_FindInvalidDriveInline_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & FindInvalidDriveInline=3/4 (/7 e.InvalidDriveInline/5 )/8 e.Declarations$c/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.InvalidDriveInline as range 5
  // closed e.Declarations$c as range 2
  //DEBUG: e.InvalidDriveInline: 5
  //DEBUG: e.Declarations$c: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@7/4 } Tile{ AsIs: e.InvalidDriveInline/5 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Declarations$c/2 } Tile{ ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindInvalidDriveInline_A3("FindInvalidDriveInline=3", COOKIE1_, COOKIE2_, func_gen_FindInvalidDriveInline_A3);


static refalrts::FnResult func_gen_FindInvalidDriveInline_A3L1S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & FindInvalidDriveInline=3\1$1=2/4 t.Definition/5 e.DriveInline$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.DriveInline$b as range 2
  //DEBUG: t.Definition: 5
  //DEBUG: e.DriveInline$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.DriveInline$b/2 } Tile{ HalfReuse: )/4 AsIs: t.Definition/5 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[6] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindInvalidDriveInline_A3L1S1A2("FindInvalidDriveInline=3\\1$1=2", COOKIE1_, COOKIE2_, func_gen_FindInvalidDriveInline_A3L1S1A2);


static refalrts::FnResult func_gen_FindInvalidDriveInline_A3L1S1A2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & FindInvalidDriveInline=3\1$1=2\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindInvalidDriveInline=3\1$1=2\1/4 (/7 e.new1/5 )/8 t.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & FindInvalidDriveInline=3\1$1=2\1/4 (/7 e.Name/11 )/8 (/9 s.Label/17 t.SrcPos/18 e.Name/15 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.Name as range 11
    if( ! refalrts::repeated_evar_right( vm, context[15], context[16], context[11], context[12], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
      continue;
    context[19] = refalrts::tvar_left( context[18], context[13], context[14] );
    if( ! context[19] )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: e.Name: 11
    //DEBUG: s.Label: 17
    //DEBUG: t.SrcPos: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & FindInvalidDriveInline=3\1$1=2\1/4 (/7 e.Name/11 )/8 (/9 s.Label/17 t.SrcPos/18 e.Name/15 )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindInvalidDriveInline=3\1$1=2\1/4 (/7 e.Name/5 )/8 t.DriveInline/9 >/1
  // closed e.Name as range 5
  //DEBUG: t.DriveInline: 9
  //DEBUG: e.Name: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FindInvalidDriveInline=3\1$1=2\1/4 (/7 e.Name/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.DriveInline/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindInvalidDriveInline_A3L1S1A2L1("FindInvalidDriveInline=3\\1$1=2\\1", COOKIE1_, COOKIE2_, func_gen_FindInvalidDriveInline_A3L1S1A2L1);


static refalrts::FnResult func_gen_FindInvalidDriveInline_A3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & FindInvalidDriveInline=3\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindInvalidDriveInline=3\1/4 (/7 e.new1/5 )/8 t.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & FindInvalidDriveInline=3\1/4 (/7 e.DriveInline$a/11 )/8 t.Definition/9 >/1
    context[11] = context[5];
    context[12] = context[6];
    // closed e.DriveInline$a as range 11
    //DEBUG: t.Definition: 9
    //DEBUG: e.DriveInline$a: 11
    //9: t.Definition
    //11: e.DriveInline$a
    //16: t.Definition

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_FindInvalidDriveInline_A3L1S1C1]);
    refalrts::copy_stvar(vm, context[16], context[9]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_stvar( res, context[16] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </13 & FindInvalidDriveInline=3\1$1?1/17 (/20 # Define/22 t.SrcPosDefine/23 s.ScopeClass/25 e.Name/18 )/21 >/14
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::call_left( context[15], context[16], context[13], context[14] );
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[15], context[16] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left( identifiers[ident_Define], context[18], context[19] );
      if( ! context[22] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
      if( ! context[24] )
        continue;
      if( ! refalrts::svar_left( context[25], context[18], context[19] ) )
        continue;
      // closed e.Name as range 18
      //DEBUG: t.Definition: 9
      //DEBUG: e.DriveInline$a: 11
      //DEBUG: t.SrcPosDefine: 23
      //DEBUG: s.ScopeClass: 25
      //DEBUG: e.Name: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & FindInvalidDriveInline=3\1/4 (/7 {REMOVED TILE} {REMOVED TILE} # Define/22 t.SrcPosDefine/23 s.ScopeClass/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & FindInvalidDriveInline=3\1$1=2/8 AsIs: t.Definition/9 AsIs: </13 Reuse: & Map@8/17 AsIs: (/20 } Tile{ AsIs: e.Name/18 } Tile{ AsIs: )/21 } Tile{ AsIs: e.DriveInline$a/11 } Tile{ AsIs: >/14 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_FindInvalidDriveInline_A3L1S1A2]);
      refalrts::update_name(context[17], functions[efunc_gen_Map_Z8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[8], context[20] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[13], context[14]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindInvalidDriveInline=3\1/4 (/7 e.DriveInline$a/5 )/8 t.OtherDeclaration/9 >/1
  // closed e.DriveInline$a as range 5
  //DEBUG: t.OtherDeclaration: 9
  //DEBUG: e.DriveInline$a: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FindInvalidDriveInline=3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.DriveInline$a/5 AsIs: )/8 AsIs: t.OtherDeclaration/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindInvalidDriveInline_A3L1("FindInvalidDriveInline=3\\1", COOKIE1_, COOKIE2_, func_gen_FindInvalidDriveInline_A3L1);


static refalrts::FnResult func_gen_FindInvalidDriveInline_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & FindInvalidDriveInline=2/4 (/7 e.DriveInline/5 )/8 e.Declarations$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.DriveInline as range 5
  // closed e.Declarations$b as range 2
  //DEBUG: e.DriveInline: 5
  //DEBUG: e.Declarations$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & FindInvalidDriveInline=3/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@3/4 AsIs: (/7 AsIs: e.DriveInline/5 AsIs: )/8 } (/11 )/12 Tile{ AsIs: e.Declarations$b/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_FindInvalidDriveInline_A3]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindInvalidDriveInline_A2("FindInvalidDriveInline=2", COOKIE1_, COOKIE2_, func_gen_FindInvalidDriveInline_A2);


static refalrts::FnResult func_gen_FindInvalidDriveInline_A2L1S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & FindInvalidDriveInline=2\1$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindInvalidDriveInline=2\1$1:1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & FindInvalidDriveInline=2\1$1:1/4 (/7 e.Name/9 )/8 e._/13 (/19 s.Label/23 t.SrcPos/24 e.Name/21 )/20 e._0/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Name as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      if( ! refalrts::repeated_evar_right( vm, context[21], context[22], context[9], context[10], context[17], context[18] ) )
        continue;
      // closed e._0 as range 15
      if( ! refalrts::svar_left( context[23], context[17], context[18] ) )
        continue;
      context[25] = refalrts::tvar_left( context[24], context[17], context[18] );
      if( ! context[25] )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      //DEBUG: e.Name: 9
      //DEBUG: e._: 13
      //DEBUG: e._0: 15
      //DEBUG: s.Label: 23
      //DEBUG: t.SrcPos: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e._/13 {REMOVED TILE} s.Label/23 {REMOVED TILE} e.Name/21 )/20 e._0/15 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: # Error/19 } Tile{ AsIs: t.SrcPos/24 } Tile{ HalfReuse: # NativeOptimizable/4 HalfReuse: s.Label23 /7 AsIs: e.Name/9 AsIs: )/8 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[19], identifiers[ident_Error]);
      refalrts::reinit_ident(context[4], identifiers[ident_NativeOptimizable]);
      refalrts::reinit_svar( context[7], context[23] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[4], context[8] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindInvalidDriveInline=2\1$1:1/4 (/7 e.Name/5 )/8 e._/2 >/1
  // closed e.Name as range 5
  // closed e._ as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FindInvalidDriveInline=2\1$1:1/4 (/7 e.Name/5 )/8 e._/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindInvalidDriveInline_A2L1S1B1("FindInvalidDriveInline=2\\1$1:1", COOKIE1_, COOKIE2_, func_gen_FindInvalidDriveInline_A2L1S1B1);


static refalrts::FnResult func_gen_FindInvalidDriveInline_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & FindInvalidDriveInline=1/4 (/7 e.DriveInline/5 )/8 e.Declarations$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.DriveInline as range 5
  // closed e.Declarations$a as range 2
  //DEBUG: e.DriveInline: 5
  //DEBUG: e.Declarations$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & FindInvalidDriveInline=2/10 (/11 e.DriveInline/5/12 )/14 Tile{ AsIs: </0 Reuse: & Map@9/4 AsIs: (/7 AsIs: e.DriveInline/5 AsIs: )/8 AsIs: e.Declarations$a/2 AsIs: >/1 } >/15 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_FindInvalidDriveInline_A2]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[9], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindInvalidDriveInline_A1("FindInvalidDriveInline=1", COOKIE1_, COOKIE2_, func_gen_FindInvalidDriveInline_A1);


static refalrts::FnResult func_FindInvalidDriveInline(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & FindInvalidDriveInline/4 e.Declarations/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Declarations as range 2
  //DEBUG: e.Declarations: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindInvalidDriveInline=1/4 } </5 & DoMapAccum@4/6 (/7 )/8 (/9 )/10 Tile{ AsIs: e.Declarations/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z4]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_FindInvalidDriveInline_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindInvalidDriveInline("FindInvalidDriveInline", COOKIE1_, COOKIE2_, func_FindInvalidDriveInline);


static refalrts::FnResult func_CleanupValidEntry(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & CleanupValidEntry/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CleanupValidEntry/4 e.Declarations-B/7 (/13 # Entry/15 t.SrcPosEntry/16 e.Name/11 )/14 e.Declarations-M/18 (/24 # Define/26 t.SrcPosDefine/29 s.ScopeClass/31 e.Name/27 )/25 e.Declarations-E/20 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Entry], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      // closed e.Name as range 11
      context[18] = 0;
      context[19] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[20] = context[9];
        context[21] = context[10];
        context[22] = 0;
        context[23] = 0;
        context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
        if( ! context[24] )
          continue;
        refalrts::bracket_pointers(context[24], context[25]);
        context[26] = refalrts::ident_left( identifiers[ident_Define], context[22], context[23] );
        if( ! context[26] )
          continue;
        if( ! refalrts::repeated_evar_right( vm, context[27], context[28], context[11], context[12], context[22], context[23] ) )
          continue;
        // closed e.Declarations-E as range 20
        context[30] = refalrts::tvar_left( context[29], context[22], context[23] );
        if( ! context[30] )
          continue;
        if( ! refalrts::svar_left( context[31], context[22], context[23] ) )
          continue;
        if( ! refalrts::empty_seq( context[22], context[23] ) )
          continue;
        //DEBUG: e.Declarations-B: 7
        //DEBUG: t.SrcPosEntry: 16
        //DEBUG: e.Name: 11
        //DEBUG: e.Declarations-M: 18
        //DEBUG: e.Declarations-E: 20
        //DEBUG: t.SrcPosDefine: 29
        //DEBUG: s.ScopeClass: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/13 {REMOVED TILE} t.SrcPosEntry/16 e.Name/11 )/14 {REMOVED TILE} {REMOVED TILE} s.ScopeClass/31 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CleanupValidEntry/4 } Tile{ AsIs: e.Declarations-B/7 } Tile{ AsIs: e.Declarations-M/18 } Tile{ AsIs: (/24 AsIs: # Define/26 AsIs: t.SrcPosDefine/29 } Tile{ Reuse: # GN-Entry/15 } Tile{ AsIs: e.Name/27 } Tile{ AsIs: )/25 AsIs: e.Declarations-E/20 AsIs: >/1 ]] }
        refalrts::update_ident(context[15], identifiers[ident_GNm_Entry]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[24], context[30] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[18], context[19], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CleanupValidEntry/4 e.Declarations-B/7 (/13 # Define/15 t.SrcPosDefine/16 s.ScopeClass/18 e.Name/11 )/14 e.Declarations-M/19 (/25 # Entry/27 t.SrcPosEntry/30 e.Name/28 )/26 e.Declarations-E/21 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Define], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
        continue;
      // closed e.Name as range 11
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = refalrts::ident_left( identifiers[ident_Entry], context[23], context[24] );
        if( ! context[27] )
          continue;
        if( ! refalrts::repeated_evar_right( vm, context[28], context[29], context[11], context[12], context[23], context[24] ) )
          continue;
        // closed e.Declarations-E as range 21
        context[31] = refalrts::tvar_left( context[30], context[23], context[24] );
        if( ! context[31] )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        //DEBUG: e.Declarations-B: 7
        //DEBUG: t.SrcPosDefine: 16
        //DEBUG: s.ScopeClass: 18
        //DEBUG: e.Name: 11
        //DEBUG: e.Declarations-M: 19
        //DEBUG: e.Declarations-E: 21
        //DEBUG: t.SrcPosEntry: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.ScopeClass/18 e.Name/11 )/14 {REMOVED TILE} (/25 {REMOVED TILE} t.SrcPosEntry/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CleanupValidEntry/4 AsIs: e.Declarations-B/7 AsIs: (/13 AsIs: # Define/15 AsIs: t.SrcPosDefine/16 } Tile{ Reuse: # GN-Entry/27 } Tile{ AsIs: e.Name/28 } Tile{ AsIs: )/26 } Tile{ AsIs: e.Declarations-M/19 } Tile{ AsIs: e.Declarations-E/21 } Tile{ AsIs: >/1 ]] }
        refalrts::update_ident(context[27], identifiers[ident_GNm_Entry]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[27] );
        refalrts::splice_to_freelist_open( vm, context[17], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CleanupValidEntry/4 e.Declarations/2 >/1
  // closed e.Declarations as range 2
  //DEBUG: e.Declarations: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CleanupValidEntry/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Declarations/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupValidEntry("CleanupValidEntry", COOKIE1_, COOKIE2_, func_CleanupValidEntry);


static refalrts::FnResult func_FindInvalidEntry(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & FindInvalidEntry/4 e.Declarations/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Declarations as range 2
  //DEBUG: e.Declarations: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@10/4 AsIs: e.Declarations/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindInvalidEntry("FindInvalidEntry", COOKIE1_, COOKIE2_, func_FindInvalidEntry);


static refalrts::FnResult func_CleanupValidForwards(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & CleanupValidForwards/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CleanupValidForwards/4 e.Declarations-B/7 (/13 # Declare/15 t.SrcPosForward/16 # GN-Local/18 e.Name/11 )/14 e.Declarations-M/19 (/25 # Define/27 t.SrcPosDefine/31 # GN-Local/30 e.Name/28 )/26 e.Declarations-E/21 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Declare], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::ident_left( identifiers[ident_GNm_Local], context[11], context[12] );
      if( ! context[18] )
        continue;
      // closed e.Name as range 11
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = refalrts::ident_left( identifiers[ident_Define], context[23], context[24] );
        if( ! context[27] )
          continue;
        if( ! refalrts::repeated_evar_right( vm, context[28], context[29], context[11], context[12], context[23], context[24] ) )
          continue;
        context[30] = refalrts::ident_right( identifiers[ident_GNm_Local], context[23], context[24] );
        if( ! context[30] )
          continue;
        // closed e.Declarations-E as range 21
        context[32] = refalrts::tvar_left( context[31], context[23], context[24] );
        if( ! context[32] )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        //DEBUG: e.Declarations-B: 7
        //DEBUG: t.SrcPosForward: 16
        //DEBUG: e.Name: 11
        //DEBUG: e.Declarations-M: 19
        //DEBUG: e.Declarations-E: 21
        //DEBUG: t.SrcPosDefine: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/13 # Declare/15 t.SrcPosForward/16 # GN-Local/18 e.Name/11 )/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CleanupValidForwards/4 } Tile{ AsIs: e.Declarations-B/7 } Tile{ AsIs: e.Declarations-M/19 } Tile{ AsIs: (/25 AsIs: # Define/27 AsIs: t.SrcPosDefine/31 AsIs: # GN-Local/30 AsIs: e.Name/28 AsIs: )/26 AsIs: e.Declarations-E/21 AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CleanupValidForwards/4 e.Declarations-B/7 (/13 # Define/15 t.SrcPosDefine/16 # GN-Local/18 e.Name/11 )/14 e.Declarations-M/19 (/25 # Declare/27 t.SrcPosForward/31 # GN-Local/30 e.Name/28 )/26 e.Declarations-E/21 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Define], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::ident_left( identifiers[ident_GNm_Local], context[11], context[12] );
      if( ! context[18] )
        continue;
      // closed e.Name as range 11
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = refalrts::ident_left( identifiers[ident_Declare], context[23], context[24] );
        if( ! context[27] )
          continue;
        if( ! refalrts::repeated_evar_right( vm, context[28], context[29], context[11], context[12], context[23], context[24] ) )
          continue;
        context[30] = refalrts::ident_right( identifiers[ident_GNm_Local], context[23], context[24] );
        if( ! context[30] )
          continue;
        // closed e.Declarations-E as range 21
        context[32] = refalrts::tvar_left( context[31], context[23], context[24] );
        if( ! context[32] )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        //DEBUG: e.Declarations-B: 7
        //DEBUG: t.SrcPosDefine: 16
        //DEBUG: e.Name: 11
        //DEBUG: e.Declarations-M: 19
        //DEBUG: e.Declarations-E: 21
        //DEBUG: t.SrcPosForward: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/25 # Declare/27 t.SrcPosForward/31 # GN-Local/30 e.Name/28 )/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CleanupValidForwards/4 AsIs: e.Declarations-B/7 AsIs: (/13 AsIs: # Define/15 AsIs: t.SrcPosDefine/16 AsIs: # GN-Local/18 AsIs: e.Name/11 AsIs: )/14 } Tile{ AsIs: e.Declarations-M/19 } Tile{ AsIs: e.Declarations-E/21 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        refalrts::splice_to_freelist_open( vm, context[14], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CleanupValidForwards/4 e.Declarations/2 >/1
  // closed e.Declarations as range 2
  //DEBUG: e.Declarations: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CleanupValidForwards/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Declarations/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupValidForwards("CleanupValidForwards", COOKIE1_, COOKIE2_, func_CleanupValidForwards);


static refalrts::FnResult func_FindInvalidForwards(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & FindInvalidForwards/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & FindInvalidForwards/4 e.Declarations-B/7 (/13 # Declare/15 t.SrcPosForward/16 # GN-Local/18 e.Name/11 )/14 e.Declarations-M/19 (/25 # Define/27 t.SrcPosDefine/31 # GN-Entry/30 e.Name/28 )/26 e.Declarations-E/21 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Declare], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::ident_left( identifiers[ident_GNm_Local], context[11], context[12] );
      if( ! context[18] )
        continue;
      // closed e.Name as range 11
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = refalrts::ident_left( identifiers[ident_Define], context[23], context[24] );
        if( ! context[27] )
          continue;
        if( ! refalrts::repeated_evar_right( vm, context[28], context[29], context[11], context[12], context[23], context[24] ) )
          continue;
        context[30] = refalrts::ident_right( identifiers[ident_GNm_Entry], context[23], context[24] );
        if( ! context[30] )
          continue;
        // closed e.Declarations-E as range 21
        context[32] = refalrts::tvar_left( context[31], context[23], context[24] );
        if( ! context[32] )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        //DEBUG: e.Declarations-B: 7
        //DEBUG: t.SrcPosForward: 16
        //DEBUG: e.Name: 11
        //DEBUG: e.Declarations-M: 19
        //DEBUG: e.Declarations-E: 21
        //DEBUG: t.SrcPosDefine: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & FindInvalidForwards/4 AsIs: e.Declarations-B/7 AsIs: (/13 Reuse: # Error/15 AsIs: t.SrcPosForward/16 Reuse: # ForwardForEntry/18 AsIs: e.Name/11 AsIs: )/14 AsIs: e.Declarations-M/19 AsIs: (/25 AsIs: # Define/27 AsIs: t.SrcPosDefine/31 AsIs: # GN-Entry/30 AsIs: e.Name/28 AsIs: )/26 AsIs: e.Declarations-E/21 AsIs: >/1 ]] }
        refalrts::update_ident(context[15], identifiers[ident_Error]);
        refalrts::update_ident(context[18], identifiers[ident_ForwardForEntry]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[13], context[14] );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FindInvalidForwards/4 e.Declarations-B/7 (/13 # Define/15 t.SrcPosDefine/16 # GN-Entry/18 e.Name/11 )/14 e.Declarations-M/19 (/25 # Declare/27 t.SrcPosForward/31 # GN-Local/30 e.Name/28 )/26 e.Declarations-E/21 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Define], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::ident_left( identifiers[ident_GNm_Entry], context[11], context[12] );
      if( ! context[18] )
        continue;
      // closed e.Name as range 11
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = refalrts::ident_left( identifiers[ident_Declare], context[23], context[24] );
        if( ! context[27] )
          continue;
        if( ! refalrts::repeated_evar_right( vm, context[28], context[29], context[11], context[12], context[23], context[24] ) )
          continue;
        context[30] = refalrts::ident_right( identifiers[ident_GNm_Local], context[23], context[24] );
        if( ! context[30] )
          continue;
        // closed e.Declarations-E as range 21
        context[32] = refalrts::tvar_left( context[31], context[23], context[24] );
        if( ! context[32] )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        //DEBUG: e.Declarations-B: 7
        //DEBUG: t.SrcPosDefine: 16
        //DEBUG: e.Name: 11
        //DEBUG: e.Declarations-M: 19
        //DEBUG: e.Declarations-E: 21
        //DEBUG: t.SrcPosForward: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & FindInvalidForwards/4 AsIs: e.Declarations-B/7 AsIs: (/13 AsIs: # Define/15 AsIs: t.SrcPosDefine/16 AsIs: # GN-Entry/18 AsIs: e.Name/11 AsIs: )/14 AsIs: e.Declarations-M/19 AsIs: (/25 Reuse: # Error/27 AsIs: t.SrcPosForward/31 Reuse: # ForwardForEntry/30 AsIs: e.Name/28 AsIs: )/26 AsIs: e.Declarations-E/21 AsIs: >/1 ]] }
        refalrts::update_ident(context[27], identifiers[ident_Error]);
        refalrts::update_ident(context[30], identifiers[ident_ForwardForEntry]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[13], context[14] );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FindInvalidForwards/4 e.Declarations-B/7 (/13 # Declare/15 t.SrcPosForward/16 # GN-Local/18 e.Name/11 )/14 e.Declarations-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Declare], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Declarations-E as range 9
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::ident_left( identifiers[ident_GNm_Local], context[11], context[12] );
      if( ! context[18] )
        continue;
      // closed e.Name as range 11
      //DEBUG: e.Declarations-B: 7
      //DEBUG: e.Declarations-E: 9
      //DEBUG: t.SrcPosForward: 16
      //DEBUG: e.Name: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & FindInvalidForwards/4 AsIs: e.Declarations-B/7 AsIs: (/13 Reuse: # Error/15 AsIs: t.SrcPosForward/16 Reuse: # ForwardNotDefined/18 AsIs: e.Name/11 AsIs: )/14 AsIs: e.Declarations-E/9 AsIs: >/1 ]] }
      refalrts::update_ident(context[15], identifiers[ident_Error]);
      refalrts::update_ident(context[18], identifiers[ident_ForwardNotDefined]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindInvalidForwards/4 e.Declarations/2 >/1
  // closed e.Declarations as range 2
  //DEBUG: e.Declarations: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FindInvalidForwards/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Declarations/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindInvalidForwards("FindInvalidForwards", COOKIE1_, COOKIE2_, func_FindInvalidForwards);


static refalrts::FnResult func_gen_FindFinalInitEntry_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & FindFinalInitEntry\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindFinalInitEntry\1/4 t.new1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & FindFinalInitEntry\1/4 (/5 # Define/9 t.ScrPosDefine/10 # GN-Entry/12 e.Name/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    context[9] = refalrts::ident_left( identifiers[ident_Define], context[7], context[8] );
    if( ! context[9] )
      continue;
    context[11] = refalrts::tvar_left( context[10], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_GNm_Entry], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e.Name as range 7
    //DEBUG: t.ScrPosDefine: 10
    //DEBUG: e.Name: 7
    //7: e.Name
    //10: t.ScrPosDefine
    //19: e.Name

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_FindFinalInitEntry_L1S1C1]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_OneOf]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::copy_evar(vm, context[19], context[20], context[7], context[8]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "__FINAL", 7);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_chars(vm, context[27], context[28], "__INIT", 6);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[16] );
    res = refalrts::splice_elem( res, context[30] );
    refalrts::link_brackets( context[26], context[29] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[26] );
    refalrts::link_brackets( context[22], context[25] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::link_brackets( context[18], context[21] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </13 & FindFinalInitEntry\1$1?1/17 # True/18 >/14
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::call_left( context[15], context[16], context[13], context[14] );
      context[18] = refalrts::ident_left( identifiers[ident_True], context[15], context[16] );
      if( ! context[18] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      //DEBUG: t.ScrPosDefine: 10
      //DEBUG: e.Name: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FindFinalInitEntry\1/4 {REMOVED TILE} {REMOVED TILE} >/14 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/5 AsIs: # Define/9 AsIs: t.ScrPosDefine/10 AsIs: # GN-Entry/12 AsIs: e.Name/7 AsIs: )/6 HalfReuse: (/13 HalfReuse: # Error/17 } t.ScrPosDefine/10/19 Tile{ Reuse: # InitFinalEntry/18 } e.Name/7/21 Tile{ HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[19], context[20], context[10], context[11]);
      refalrts::copy_evar(vm, context[21], context[22], context[7], context[8]);
      refalrts::reinit_open_bracket(context[13]);
      refalrts::reinit_ident(context[17], identifiers[ident_Error]);
      refalrts::update_ident(context[18], identifiers[ident_InitFinalEntry]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[13], context[1] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[5], context[17] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[13], context[14]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindFinalInitEntry\1/4 t.OtherDeclaraion/5 >/1
  //DEBUG: t.OtherDeclaraion: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FindFinalInitEntry\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.OtherDeclaraion/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindFinalInitEntry_L1("FindFinalInitEntry\\1", COOKIE1_, COOKIE2_, func_gen_FindFinalInitEntry_L1);


static refalrts::FnResult func_FindFinalInitEntry(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & FindFinalInitEntry/4 e.Declarations/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Declarations as range 2
  //DEBUG: e.Declarations: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@11/4 AsIs: e.Declarations/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindFinalInitEntry("FindFinalInitEntry", COOKIE1_, COOKIE2_, func_FindFinalInitEntry);


static refalrts::FnResult func_CheckRedefinitions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & CheckRedefinitions/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CheckRedefinitions/4 e.Declarations-B/7 (/13 # Define/15 t.SrcPos1/16 s.ScopeClass1/18 e.Name/11 )/14 e.Declarations-M/19 (/25 # Define/27 t.SrcPos2/30 s.ScopeClass2/32 e.Name/28 )/26 e.Declarations-E/21 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Define], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
        continue;
      // closed e.Name as range 11
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = refalrts::ident_left( identifiers[ident_Define], context[23], context[24] );
        if( ! context[27] )
          continue;
        if( ! refalrts::repeated_evar_right( vm, context[28], context[29], context[11], context[12], context[23], context[24] ) )
          continue;
        // closed e.Declarations-E as range 21
        context[31] = refalrts::tvar_left( context[30], context[23], context[24] );
        if( ! context[31] )
          continue;
        if( ! refalrts::svar_left( context[32], context[23], context[24] ) )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        //DEBUG: e.Declarations-B: 7
        //DEBUG: t.SrcPos1: 16
        //DEBUG: s.ScopeClass1: 18
        //DEBUG: e.Name: 11
        //DEBUG: e.Declarations-M: 19
        //DEBUG: e.Declarations-E: 21
        //DEBUG: t.SrcPos2: 30
        //DEBUG: s.ScopeClass2: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ScopeClass2/32 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: e.Declarations-B/7 } Tile{ AsIs: </0 AsIs: & CheckRedefinitions/4 } Tile{ AsIs: (/13 AsIs: # Define/15 AsIs: t.SrcPos1/16 AsIs: s.ScopeClass1/18 AsIs: e.Name/11 AsIs: )/14 AsIs: e.Declarations-M/19 AsIs: (/25 Reuse: # Error/27 AsIs: t.SrcPos2/30 } # AlreadyDefined/33 Tile{ AsIs: e.Name/28 } Tile{ AsIs: )/26 AsIs: e.Declarations-E/21 AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[33], identifiers[ident_AlreadyDefined]);
        refalrts::update_ident(context[27], identifiers[ident_Error]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[13], context[31] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckRedefinitions/4 e.Declarations/2 >/1
  // closed e.Declarations as range 2
  //DEBUG: e.Declarations: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckRedefinitions/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Declarations/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckRedefinitions("CheckRedefinitions", COOKIE1_, COOKIE2_, func_CheckRedefinitions);


static refalrts::FnResult func_CheckFunctionBody(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & CheckFunctionBody/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckFunctionBody/4 (/7 e.new1/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  do {
    // </0 & CheckFunctionBody/4 (/7 s.new2/11 e.new3/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
      continue;
    // closed e.new3 as range 9
    do {
      // </0 & CheckFunctionBody/4 (/7 # Sentences/11 e./12 )/8 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Sentences], context[11] ) )
        continue;
      // closed e. as range 12
      //DEBUG: e.: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 # Sentences/11 {REMOVED TILE} )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceRec@1/4 } Tile{ AsIs: e./12 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceRec_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[13] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckFunctionBody/4 (/7 # NativeBody/11 e./12 )/8 >/1
    context[12] = context[9];
    context[13] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[11] ) )
      continue;
    // closed e. as range 12
    //DEBUG: e.: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckFunctionBody/4 (/7 # NativeBody/11 e./12 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckFunctionBody/4 (/7 e.Body/5 )/8 >/1
  // closed e.Body as range 5
  //DEBUG: e.Body: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckFunctionBodyRec*2/4 AsIs: (/7 } Tile{ AsIs: )/8 } Tile{ AsIs: e.Body/5 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckFunctionBodyRec_D2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckFunctionBody("CheckFunctionBody", COOKIE1_, COOKIE2_, func_CheckFunctionBody);


static refalrts::FnResult func_CheckFunctionBodyRec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & CheckFunctionBodyRec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckFunctionBodyRec/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & CheckFunctionBodyRec/4 (/7 e.ScopeVars/10 )/8 # Sentences/9 e.Sentences/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Sentences], context[9] ) )
      continue;
    // closed e.ScopeVars as range 10
    // closed e.Sentences as range 12
    //DEBUG: e.ScopeVars: 10
    //DEBUG: e.Sentences: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} # Sentences/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceRec/4 AsIs: (/7 AsIs: e.ScopeVars/10 AsIs: )/8 } Tile{ AsIs: e.Sentences/12 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_CheckSentenceRec]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckFunctionBodyRec/4 (/7 e.ScopeVars/5 )/8 # NativeBody/9 e.Code/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ScopeVars as range 5
  // closed e.Code as range 2
  //DEBUG: e.ScopeVars: 5
  //DEBUG: e.Code: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckFunctionBodyRec/4 (/7 e.ScopeVars/5 )/8 # NativeBody/9 e.Code/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckFunctionBodyRec("CheckFunctionBodyRec", COOKIE1_, COOKIE2_, func_CheckFunctionBodyRec);


static refalrts::FnResult func_CheckSentenceRec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & CheckSentenceRec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentenceRec/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & CheckSentenceRec/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & CheckSentenceRec/4 (/7 e.new7/15 )/8 t.new6/13 >/1
      context[15] = context[9];
      context[16] = context[10];
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.new7 as range 15
      do {
        // </0 & CheckSentenceRec/4 (/7 e.ScopeVars/17 )/8 (/13 (/23 e.1/21 )/24 e.4/19 (/31 e.5/29 )/32 (/27 e.3/25 )/28 )/14 >/1
        context[17] = context[15];
        context[18] = context[16];
        context[19] = 0;
        context[20] = 0;
        if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
          continue;
        context[21] = 0;
        context[22] = 0;
        context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
        if( ! context[23] )
          continue;
        refalrts::bracket_pointers(context[23], context[24]);
        context[25] = 0;
        context[26] = 0;
        context[27] = refalrts::brackets_right( context[25], context[26], context[19], context[20] );
        if( ! context[27] )
          continue;
        refalrts::bracket_pointers(context[27], context[28]);
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_right( context[29], context[30], context[19], context[20] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        // closed e.ScopeVars as range 17
        // closed e.1 as range 21
        // closed e.4 as range 19
        // closed e.5 as range 29
        // closed e.3 as range 25
        //DEBUG: e.ScopeVars: 17
        //DEBUG: e.1: 21
        //DEBUG: e.4: 19
        //DEBUG: e.5: 29
        //DEBUG: e.3: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </33 & CheckSentence=1@1/34 (/35 Tile{ AsIs: e.3/25 } )/36 Tile{ AsIs: (/31 AsIs: e.5/29 AsIs: )/32 AsIs: (/27 } Tile{ AsIs: e.4/19 } )/37 (/38 e.1/21/39 )/41 Tile{ AsIs: </0 Reuse: & CheckPattern-Flatten/4 AsIs: (/7 AsIs: e.ScopeVars/17 AsIs: )/8 HalfReuse: </13 HalfReuse: & Map@12/23 AsIs: e.1/21 HalfReuse: >/24 } >/42 </43 & CheckPattern-WarnRepeatedRec/44 (/45 e.ScopeVars/17/46 )/48 (/49 e.1/21/50 Tile{ AsIs: )/28 HalfReuse: >/14 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[34], functions[efunc_gen_CheckSentence_A1Z1]);
        refalrts::alloc_open_bracket(vm, context[35]);
        refalrts::alloc_close_bracket(vm, context[36]);
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::alloc_open_bracket(vm, context[38]);
        refalrts::copy_evar(vm, context[39], context[40], context[21], context[22]);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_close_call(vm, context[42]);
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[44], functions[efunc_CheckPatternm_WarnRepeatedRec]);
        refalrts::alloc_open_bracket(vm, context[45]);
        refalrts::copy_evar(vm, context[46], context[47], context[17], context[18]);
        refalrts::alloc_close_bracket(vm, context[48]);
        refalrts::alloc_open_bracket(vm, context[49]);
        refalrts::copy_evar(vm, context[50], context[51], context[21], context[22]);
        refalrts::update_name(context[4], functions[efunc_CheckPatternm_Flatten]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[23], functions[efunc_gen_Map_Z12]);
        refalrts::reinit_close_call(context[24]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[43] );
        refalrts::link_brackets( context[49], context[28] );
        refalrts::link_brackets( context[45], context[48] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[13] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[38], context[41] );
        refalrts::link_brackets( context[27], context[37] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[42], context[49] );
        res = refalrts::splice_evar( res, context[0], context[24] );
        res = refalrts::splice_evar( res, context[37], context[41] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[31], context[27] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[33], context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckSentenceRec/4 (/7 e.ScopeVars/17 )/8 t.LastSentence/13 >/1
      context[17] = context[15];
      context[18] = context[16];
      // closed e.ScopeVars as range 17
      //DEBUG: t.LastSentence: 13
      //DEBUG: e.ScopeVars: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence*1/4 } Tile{ AsIs: e.ScopeVars/17 } Tile{ AsIs: t.LastSentence/13 } Tile{ HalfReuse: # OneWay/8 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_D1]);
      refalrts::reinit_ident(context[8], identifiers[ident_OneWay]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckSentenceRec/4 (/7 e.ScopeVars/15 )/8 (/13 (/23 e.1/21 )/24 e.4/19 (/31 e.5/29 )/32 (/27 e.3/25 )/28 )/14 e.Sentences/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_right( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_right( context[29], context[30], context[19], context[20] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      // closed e.ScopeVars as range 15
      // closed e.1 as range 21
      // closed e.4 as range 19
      // closed e.5 as range 29
      // closed e.3 as range 25
      // closed e.Sentences as range 17
      //DEBUG: e.ScopeVars: 15
      //DEBUG: e.1: 21
      //DEBUG: e.4: 19
      //DEBUG: e.5: 29
      //DEBUG: e.3: 25
      //DEBUG: e.Sentences: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </33 & CheckSentence=1@2/34 (/35 Tile{ AsIs: e.3/25 } )/36 Tile{ AsIs: (/31 AsIs: e.5/29 AsIs: )/32 AsIs: (/27 } Tile{ AsIs: e.4/19 } Tile{ AsIs: )/28 } (/37 e.1/21/38 )/40 Tile{ AsIs: </0 Reuse: & CheckPattern-Flatten/4 AsIs: (/7 AsIs: e.ScopeVars/15 AsIs: )/8 HalfReuse: </13 HalfReuse: & Map@12/23 AsIs: e.1/21 HalfReuse: >/24 } >/41 >/42 </43 & CheckSentenceRec/44 (/45 e.ScopeVars/15/46 Tile{ AsIs: )/14 AsIs: e.Sentences/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_CheckSentence_A1Z2]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::copy_evar(vm, context[38], context[39], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_call(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::alloc_name(vm, context[44], functions[efunc_CheckSentenceRec]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::copy_evar(vm, context[46], context[47], context[15], context[16]);
      refalrts::update_name(context[4], functions[efunc_CheckPatternm_Flatten]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[23], functions[efunc_gen_Map_Z12]);
      refalrts::reinit_close_call(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[43] );
      refalrts::link_brackets( context[45], context[14] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[37], context[40] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[41], context[45] );
      res = refalrts::splice_evar( res, context[0], context[24] );
      res = refalrts::splice_evar( res, context[37], context[40] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[31], context[27] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[33], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckSentenceRec/4 (/7 e.ScopeVars/15 )/8 t.Sentence/13 e.Sentences/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.ScopeVars as range 15
    // closed e.Sentences as range 17
    //DEBUG: t.Sentence: 13
    //DEBUG: e.ScopeVars: 15
    //DEBUG: e.Sentences: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & CheckSentence*1/20 e.ScopeVars/15/21 Tile{ AsIs: t.Sentence/13 } # WithBacktrack/23 >/24 Tile{ AsIs: </0 AsIs: & CheckSentenceRec/4 AsIs: (/7 AsIs: e.ScopeVars/15 AsIs: )/8 } Tile{ AsIs: e.Sentences/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_CheckSentence_D1]);
    refalrts::copy_evar(vm, context[21], context[22], context[15], context[16]);
    refalrts::alloc_ident(vm, context[23], identifiers[ident_WithBacktrack]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentenceRec/4 (/7 e.ScopeVars/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ScopeVars as range 5
  //DEBUG: e.ScopeVars: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckSentenceRec/4 (/7 e.ScopeVars/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSentenceRec("CheckSentenceRec", COOKIE1_, COOKIE2_, func_CheckSentenceRec);


static refalrts::FnResult func_gen_CheckSentence_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & CheckSentence=4/4 (/7 e.PatternFunctionsAndErrors/5 )/8 (/11 e.AssignmentsFunctionsAndErrors/9 )/12 (/15 e.ResultFunctionsAndErrors/13 )/16 e.BlocksFunctionsAndErrors/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.PatternFunctionsAndErrors as range 5
  // closed e.AssignmentsFunctionsAndErrors as range 9
  // closed e.ResultFunctionsAndErrors as range 13
  // closed e.BlocksFunctionsAndErrors as range 2
  //DEBUG: e.PatternFunctionsAndErrors: 5
  //DEBUG: e.AssignmentsFunctionsAndErrors: 9
  //DEBUG: e.ResultFunctionsAndErrors: 13
  //DEBUG: e.BlocksFunctionsAndErrors: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckSentence=4/4 (/7 {REMOVED TILE} )/8 (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.PatternFunctionsAndErrors/5 } Tile{ AsIs: e.AssignmentsFunctionsAndErrors/9 } Tile{ AsIs: e.ResultFunctionsAndErrors/13 } Tile{ AsIs: e.BlocksFunctionsAndErrors/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentence_A4("CheckSentence=4", COOKIE1_, COOKIE2_, func_gen_CheckSentence_A4);


static refalrts::FnResult func_gen_CheckSentence_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & CheckSentence=3/4 (/7 e.PatternFunctionsAndErrors/5 )/8 (/11 e.AssignmentsFunctionsAndErrors/9 )/12 (/15 e.ScopeVars$b/13 )/16 (/19 e.Blocks/17 )/20 e.ResultFunctionsAndErrors/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.PatternFunctionsAndErrors as range 5
  // closed e.AssignmentsFunctionsAndErrors as range 9
  // closed e.ScopeVars$b as range 13
  // closed e.Blocks as range 17
  // closed e.ResultFunctionsAndErrors as range 2
  //DEBUG: e.PatternFunctionsAndErrors: 5
  //DEBUG: e.AssignmentsFunctionsAndErrors: 9
  //DEBUG: e.ScopeVars$b: 13
  //DEBUG: e.Blocks: 17
  //DEBUG: e.ResultFunctionsAndErrors: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence=4/4 AsIs: (/7 AsIs: e.PatternFunctionsAndErrors/5 AsIs: )/8 AsIs: (/11 AsIs: e.AssignmentsFunctionsAndErrors/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.ResultFunctionsAndErrors/2 } Tile{ AsIs: )/16 } </21 & Map@13/22 (/23 Tile{ AsIs: e.ScopeVars$b/13 } Tile{ HalfReuse: )/19 AsIs: e.Blocks/17 HalfReuse: >/20 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z13]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_A4]);
  refalrts::reinit_close_bracket(context[19]);
  refalrts::reinit_close_call(context[20]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[23], context[19] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[21], context[23] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentence_A3("CheckSentence=3", COOKIE1_, COOKIE2_, func_gen_CheckSentence_A3);


static refalrts::FnResult func_gen_CheckSentence_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & CheckSentence=2/4 (/7 e.PatternFunctionsAndErrors/5 )/8 (/11 e.Blocks/9 )/12 (/15 e.Result/13 )/16 (/19 e.ScopeVars$b/17 )/20 e.AssignmentsFunctionsAndErrors/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.PatternFunctionsAndErrors as range 5
  // closed e.Blocks as range 9
  // closed e.Result as range 13
  // closed e.ScopeVars$b as range 17
  // closed e.AssignmentsFunctionsAndErrors as range 2
  //DEBUG: e.PatternFunctionsAndErrors: 5
  //DEBUG: e.Blocks: 9
  //DEBUG: e.Result: 13
  //DEBUG: e.ScopeVars$b: 17
  //DEBUG: e.AssignmentsFunctionsAndErrors: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence=3/4 AsIs: (/7 AsIs: e.PatternFunctionsAndErrors/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.AssignmentsFunctionsAndErrors/2 } Tile{ AsIs: )/16 AsIs: (/19 AsIs: e.ScopeVars$b/17 AsIs: )/20 } (/21 Tile{ AsIs: e.Blocks/9 } )/22 </23 Tile{ HalfReuse: & CheckResult/12 AsIs: (/15 } e.ScopeVars$b/17/24 )/26 </27 & Map@12/28 Tile{ AsIs: e.Result/13 } >/29 >/30 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::copy_evar(vm, context[24], context[25], context[17], context[18]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_gen_Map_Z12]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_A3]);
  refalrts::reinit_name(context[12], functions[efunc_CheckResult]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[15], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[26], context[28] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[16], context[20] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentence_A2("CheckSentence=2", COOKIE1_, COOKIE2_, func_gen_CheckSentence_A2);


static refalrts::FnResult func_gen_CheckSentence_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & CheckSentence=1/4 (/7 e.Blocks/5 )/8 (/11 e.Result/9 )/12 (/15 e.Assignments/13 )/16 (/19 e.Pattern/17 )/20 s.Backtrack/21 (/24 e.ScopeVars$a/22 )/25 e.PatternFunctionsAndErrors/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Blocks as range 5
  // closed e.Result as range 9
  // closed e.Assignments as range 13
  // closed e.Pattern as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.ScopeVars$a as range 22
  // closed e.PatternFunctionsAndErrors as range 2
  //DEBUG: e.Blocks: 5
  //DEBUG: e.Result: 9
  //DEBUG: e.Assignments: 13
  //DEBUG: e.Pattern: 17
  //DEBUG: s.Backtrack: 21
  //DEBUG: e.ScopeVars$a: 22
  //DEBUG: e.PatternFunctionsAndErrors: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Backtrack/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } & CheckSentence=2/26 (/27 Tile{ AsIs: e.PatternFunctionsAndErrors/2 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Blocks/5 AsIs: )/8 AsIs: (/11 AsIs: e.Result/9 AsIs: )/12 HalfReuse: </15 } & DoCheckAssignments/28 (/29 Tile{ AsIs: e.Assignments/13 } )/30 Tile{ AsIs: (/24 AsIs: e.ScopeVars$a/22 AsIs: )/25 } Tile{ HalfReuse: </16 HalfReuse: & FixBacktrackForOpenEVars/19 AsIs: e.Pattern/17 HalfReuse: s.Backtrack21 /20 } >/31 >/32 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_CheckSentence_A2]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_DoCheckAssignments]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_open_call(context[16]);
  refalrts::reinit_name(context[19], functions[efunc_FixBacktrackForOpenEVars]);
  refalrts::reinit_svar( context[20], context[21] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[27], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[16], context[20] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[4], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentence_A1("CheckSentence=1", COOKIE1_, COOKIE2_, func_gen_CheckSentence_A1);


static refalrts::FnResult func_CheckSentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & CheckSentence/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentence/4 e.new1/2 (/8 (/12 e.new2/10 )/13 e.new3/6 (/20 e.new4/18 )/21 (/16 e.new5/14 )/17 )/9 s.new6/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_right( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[6], context[7] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_right( context[14], context[15], context[6], context[7] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_right( context[18], context[19], context[6], context[7] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new1 as range 2
  // closed e.new2 as range 10
  // closed e.new3 as range 6
  // closed e.new4 as range 18
  // closed e.new5 as range 14
  do {
    // </0 & CheckSentence/4 e.ScopeVars/22 (/8 (/12 e.Pattern/24 )/13 e.Assignments/26 (/20 e.Result/28 )/21 (/16 e.Blocks/30 )/17 )/9 # OneWay/5 >/1
    context[22] = context[2];
    context[23] = context[3];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[6];
    context[27] = context[7];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[14];
    context[31] = context[15];
    if( ! refalrts::ident_term( identifiers[ident_OneWay], context[5] ) )
      continue;
    // closed e.ScopeVars as range 22
    // closed e.Pattern as range 24
    // closed e.Assignments as range 26
    // closed e.Result as range 28
    // closed e.Blocks as range 30
    //DEBUG: e.ScopeVars: 22
    //DEBUG: e.Pattern: 24
    //DEBUG: e.Assignments: 26
    //DEBUG: e.Result: 28
    //DEBUG: e.Blocks: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </32 & CheckSentence=1@1/33 (/34 Tile{ AsIs: e.Blocks/30 } )/35 Tile{ AsIs: (/20 AsIs: e.Result/28 AsIs: )/21 AsIs: (/16 } Tile{ AsIs: e.Assignments/26 } Tile{ AsIs: )/17 HalfReuse: (/9 } e.Pattern/24/36 )/38 </39 & CheckPattern-Flatten/40 (/41 e.ScopeVars/22/42 )/44 </45 & Map@12/46 e.Pattern/24/47 >/49 >/50 </51 Tile{ HalfReuse: & CheckPattern-WarnRepeatedRec/0 HalfReuse: (/4 AsIs: e.ScopeVars/22 HalfReuse: )/8 AsIs: (/12 AsIs: e.Pattern/24 AsIs: )/13 } Tile{ HalfReuse: >/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_CheckSentence_A1Z1]);
    refalrts::alloc_open_bracket(vm, context[34]);
    refalrts::alloc_close_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[24], context[25]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_CheckPatternm_Flatten]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[22], context[23]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_Map_Z12]);
    refalrts::copy_evar(vm, context[47], context[48], context[24], context[25]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_name(context[0], functions[efunc_CheckPatternm_WarnRepeatedRec]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[8]);
    refalrts::reinit_close_call(context[5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[5] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[4], context[8] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[9], context[38] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[34], context[35] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[5];
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_evar( res, context[38], context[51] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[17], context[9] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[20], context[16] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[32], context[34] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckSentence/4 e.ScopeVars/22 (/8 (/12 e.Pattern/24 )/13 e.Assignments/26 (/20 e.Result/28 )/21 (/16 e.Blocks/30 )/17 )/9 # WithBacktrack/5 >/1
    context[22] = context[2];
    context[23] = context[3];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[6];
    context[27] = context[7];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[14];
    context[31] = context[15];
    if( ! refalrts::ident_term( identifiers[ident_WithBacktrack], context[5] ) )
      continue;
    // closed e.ScopeVars as range 22
    // closed e.Pattern as range 24
    // closed e.Assignments as range 26
    // closed e.Result as range 28
    // closed e.Blocks as range 30
    //DEBUG: e.ScopeVars: 22
    //DEBUG: e.Pattern: 24
    //DEBUG: e.Assignments: 26
    //DEBUG: e.Result: 28
    //DEBUG: e.Blocks: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence=1@2/4 } (/32 Tile{ AsIs: e.Blocks/30 } Tile{ AsIs: )/17 } Tile{ AsIs: (/20 AsIs: e.Result/28 AsIs: )/21 AsIs: (/16 } Tile{ AsIs: e.Assignments/26 } Tile{ HalfReuse: )/8 AsIs: (/12 AsIs: e.Pattern/24 AsIs: )/13 } </33 & CheckPattern-Flatten/34 (/35 Tile{ AsIs: e.ScopeVars/22 } )/36 </37 & Map@12/38 e.Pattern/24/39 Tile{ HalfReuse: >/9 HalfReuse: >/5 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_CheckPatternm_Flatten]);
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_gen_Map_Z12]);
    refalrts::copy_evar(vm, context[39], context[40], context[24], context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_A1Z2]);
    refalrts::reinit_close_bracket(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::reinit_close_call(context[5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[5] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[16], context[8] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[32], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[36], context[38] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[20], context[16] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentence/4 e.ScopeVars/2 (/8 (/12 e.Pattern/10 )/13 e.Assignments/6 (/20 e.Result/18 )/21 (/16 e.Blocks/14 )/17 )/9 s.Backtrack/5 >/1
  // closed e.ScopeVars as range 2
  // closed e.Pattern as range 10
  // closed e.Assignments as range 6
  // closed e.Result as range 18
  // closed e.Blocks as range 14
  //DEBUG: s.Backtrack: 5
  //DEBUG: e.ScopeVars: 2
  //DEBUG: e.Pattern: 10
  //DEBUG: e.Assignments: 6
  //DEBUG: e.Result: 18
  //DEBUG: e.Blocks: 14

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence=1/4 } (/22 Tile{ AsIs: e.Blocks/14 } Tile{ AsIs: )/17 } Tile{ AsIs: (/20 AsIs: e.Result/18 AsIs: )/21 AsIs: (/16 } Tile{ AsIs: e.Assignments/6 } Tile{ HalfReuse: )/8 AsIs: (/12 AsIs: e.Pattern/10 AsIs: )/13 } s.Backtrack/5/23 </24 & CheckPattern-Flatten/25 (/26 Tile{ AsIs: e.ScopeVars/2 } )/27 </28 & Map@12/29 e.Pattern/10/30 >/32 >/33 </34 & CheckPattern-WarnRepeated*2/35 (/36 e.ScopeVars/2/37 Tile{ AsIs: )/9 AsIs: s.Backtrack/5 HalfReuse: (/1 } e.Pattern/10/39 )/41 >/42 >/43 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::copy_stvar(vm, context[23], context[5]);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_CheckPatternm_Flatten]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_gen_Map_Z12]);
  refalrts::copy_evar(vm, context[30], context[31], context[10], context[11]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::alloc_close_call(vm, context[33]);
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_gen_CheckPatternm_WarnRepeated_D2]);
  refalrts::alloc_open_bracket(vm, context[36]);
  refalrts::copy_evar(vm, context[37], context[38], context[2], context[3]);
  refalrts::copy_evar(vm, context[39], context[40], context[10], context[11]);
  refalrts::alloc_close_bracket(vm, context[41]);
  refalrts::alloc_close_call(vm, context[42]);
  refalrts::alloc_close_call(vm, context[43]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_A1]);
  refalrts::reinit_close_bracket(context[8]);
  refalrts::reinit_open_bracket(context[1]);
  refalrts::push_stack( vm, context[43] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[34] );
  refalrts::link_brackets( context[1], context[41] );
  refalrts::link_brackets( context[36], context[9] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[28] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[16], context[8] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[22], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[41], context[43] );
  res = refalrts::splice_evar( res, context[39], context[40] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[27], context[36] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[26] );
  res = refalrts::splice_evar( res, context[8], context[13] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[20], context[16] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSentence("CheckSentence", COOKIE1_, COOKIE2_, func_CheckSentence);


static refalrts::FnResult func_CheckBlocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & CheckBlocks/4 (/7 e.ScopeVars/5 )/8 e.Blocks/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ScopeVars as range 5
  // closed e.Blocks as range 2
  //DEBUG: e.ScopeVars: 5
  //DEBUG: e.Blocks: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@13/4 AsIs: (/7 AsIs: e.ScopeVars/5 AsIs: )/8 AsIs: e.Blocks/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckBlocks("CheckBlocks", COOKIE1_, COOKIE2_, func_CheckBlocks);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 67 elems
  refalrts::Iter context[67];
  refalrts::zeros( context, 67 );
  // </0 & DoCheckAssignments$2=5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=5/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 s.new7/29 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  if( ! refalrts::svar_left( context[29], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DoCheckAssignments$2=5/4 (/7 )/8 (/11 e.ScopeVars$a/30 )/12 (/15 e.Errors/32 )/16 (/19 e.ResultFunctionsAndErrors/34 )/20 (/23 e.BlocksFunctionsAndErrors/36 )/24 (/27 e.PatternFunctionsAndErrors/38 )/28 s.Backtrack$b/29 >/1
    context[30] = context[9];
    context[31] = context[10];
    context[32] = context[13];
    context[33] = context[14];
    context[34] = context[17];
    context[35] = context[18];
    context[36] = context[21];
    context[37] = context[22];
    context[38] = context[25];
    context[39] = context[26];
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.ScopeVars$a as range 30
    // closed e.Errors as range 32
    // closed e.ResultFunctionsAndErrors as range 34
    // closed e.BlocksFunctionsAndErrors as range 36
    // closed e.PatternFunctionsAndErrors as range 38
    //DEBUG: s.Backtrack$b: 29
    //DEBUG: e.ScopeVars$a: 30
    //DEBUG: e.Errors: 32
    //DEBUG: e.ResultFunctionsAndErrors: 34
    //DEBUG: e.BlocksFunctionsAndErrors: 36
    //DEBUG: e.PatternFunctionsAndErrors: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoCheckAssignments$2=5/4 (/7 )/8 {REMOVED TILE} (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} )/20 (/23 {REMOVED TILE} )/24 (/27 {REMOVED TILE} )/28 s.Backtrack$b/29 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.ScopeVars$a/30 AsIs: )/12 } Tile{ AsIs: e.Errors/32 } Tile{ AsIs: e.ResultFunctionsAndErrors/34 } Tile{ AsIs: e.BlocksFunctionsAndErrors/36 } Tile{ AsIs: e.PatternFunctionsAndErrors/38 } Tile{ ]] }
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoCheckAssignments$2=5/4 (/7 (/44 s.ChainType/58 (/56 e.3/54 )/57 (/52 e.5/50 )/53 (/48 e.7/46 )/49 )/45 e./30 )/8 (/11 e.ScopeVars$a/32 )/12 (/15 e.Errors/34 )/16 (/19 e.ResultFunctionsAndErrors/36 )/20 (/23 e.BlocksFunctionsAndErrors/38 )/24 (/27 e.PatternFunctionsAndErrors/40 )/28 s.Backtrack$b/29 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[9];
    context[33] = context[10];
    context[34] = context[13];
    context[35] = context[14];
    context[36] = context[17];
    context[37] = context[18];
    context[38] = context[21];
    context[39] = context[22];
    context[40] = context[25];
    context[41] = context[26];
    context[42] = 0;
    context[43] = 0;
    context[44] = refalrts::brackets_left( context[42], context[43], context[30], context[31] );
    if( ! context[44] )
      continue;
    refalrts::bracket_pointers(context[44], context[45]);
    context[46] = 0;
    context[47] = 0;
    context[48] = refalrts::brackets_right( context[46], context[47], context[42], context[43] );
    if( ! context[48] )
      continue;
    refalrts::bracket_pointers(context[48], context[49]);
    context[50] = 0;
    context[51] = 0;
    context[52] = refalrts::brackets_right( context[50], context[51], context[42], context[43] );
    if( ! context[52] )
      continue;
    refalrts::bracket_pointers(context[52], context[53]);
    context[54] = 0;
    context[55] = 0;
    context[56] = refalrts::brackets_right( context[54], context[55], context[42], context[43] );
    if( ! context[56] )
      continue;
    refalrts::bracket_pointers(context[56], context[57]);
    // closed e.3 as range 54
    // closed e.5 as range 50
    // closed e.7 as range 46
    // closed e. as range 30
    // closed e.ScopeVars$a as range 32
    // closed e.Errors as range 34
    // closed e.ResultFunctionsAndErrors as range 36
    // closed e.BlocksFunctionsAndErrors as range 38
    // closed e.PatternFunctionsAndErrors as range 40
    if( ! refalrts::svar_left( context[58], context[42], context[43] ) )
      continue;
    if( ! refalrts::empty_seq( context[42], context[43] ) )
      continue;
    //DEBUG: s.Backtrack$b: 29
    //DEBUG: e.3: 54
    //DEBUG: e.5: 50
    //DEBUG: e.7: 46
    //DEBUG: e.: 30
    //DEBUG: e.ScopeVars$a: 32
    //DEBUG: e.Errors: 34
    //DEBUG: e.ResultFunctionsAndErrors: 36
    //DEBUG: e.BlocksFunctionsAndErrors: 38
    //DEBUG: e.PatternFunctionsAndErrors: 40
    //DEBUG: s.ChainType: 58

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.ChainType/58 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Backtrack$b/29 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=1@1/4 AsIs: (/7 } Tile{ AsIs: e./30 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Errors/34 AsIs: )/16 AsIs: (/19 AsIs: e.ResultFunctionsAndErrors/36 AsIs: )/20 AsIs: (/23 AsIs: e.BlocksFunctionsAndErrors/38 AsIs: )/24 AsIs: (/27 AsIs: e.PatternFunctionsAndErrors/40 AsIs: )/28 } Tile{ AsIs: (/56 } Tile{ AsIs: e.7/46 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.ScopeVars$a/32 } Tile{ AsIs: )/49 HalfReuse: s.Backtrack$b29 /45 } Tile{ HalfReuse: s.ChainType58 /57 AsIs: (/52 AsIs: e.5/50 AsIs: )/53 HalfReuse: </48 } & CheckResult/59 Tile{ AsIs: (/44 } e.ScopeVars$a/32/60 )/62 </63 & Map@12/64 Tile{ AsIs: e.3/54 } >/65 >/66 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[59], functions[efunc_CheckResult]);
    refalrts::copy_evar(vm, context[60], context[61], context[32], context[33]);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_open_call(vm, context[63]);
    refalrts::alloc_name(vm, context[64], functions[efunc_gen_Map_Z12]);
    refalrts::alloc_close_call(vm, context[65]);
    refalrts::alloc_close_call(vm, context[66]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A1Z1]);
    refalrts::reinit_svar( context[45], context[29] );
    refalrts::reinit_svar( context[57], context[58] );
    refalrts::reinit_open_call(context[48]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[66] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[65] );
    refalrts::push_stack( vm, context[63] );
    refalrts::link_brackets( context[44], context[62] );
    refalrts::link_brackets( context[52], context[53] );
    refalrts::link_brackets( context[11], context[49] );
    refalrts::link_brackets( context[56], context[8] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[65], context[66] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[62], context[64] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_elem( res, context[59] );
    res = refalrts::splice_evar( res, context[57], context[48] );
    res = refalrts::splice_evar( res, context[49], context[45] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_elem( res, context[56] );
    res = refalrts::splice_evar( res, context[12], context[28] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=5/4 (/7 e.Assignments/5 )/8 (/11 e.ScopeVars$a/9 )/12 (/15 e.Errors/13 )/16 (/19 e.ResultFunctionsAndErrors/17 )/20 (/23 e.BlocksFunctionsAndErrors/21 )/24 (/27 e.PatternFunctionsAndErrors/25 )/28 s.Backtrack$b/29 >/1
  // closed e.Assignments as range 5
  // closed e.ScopeVars$a as range 9
  // closed e.Errors as range 13
  // closed e.ResultFunctionsAndErrors as range 17
  // closed e.BlocksFunctionsAndErrors as range 21
  // closed e.PatternFunctionsAndErrors as range 25
  //DEBUG: s.Backtrack$b: 29
  //DEBUG: e.Assignments: 5
  //DEBUG: e.ScopeVars$a: 9
  //DEBUG: e.Errors: 13
  //DEBUG: e.ResultFunctionsAndErrors: 17
  //DEBUG: e.BlocksFunctionsAndErrors: 21
  //DEBUG: e.PatternFunctionsAndErrors: 25

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} )/20 (/23 {REMOVED TILE} )/24 (/27 {REMOVED TILE} )/28 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments@0/4 AsIs: (/7 AsIs: e.Assignments/5 AsIs: )/8 AsIs: (/11 AsIs: e.ScopeVars$a/9 AsIs: )/12 } Tile{ AsIs: e.Errors/13 } Tile{ AsIs: e.ResultFunctionsAndErrors/17 } Tile{ AsIs: e.BlocksFunctionsAndErrors/21 } Tile{ AsIs: e.PatternFunctionsAndErrors/25 } Tile{ AsIs: s.Backtrack$b/29 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[29];
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::splice_to_freelist_open( vm, context[12], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A5("DoCheckAssignments$2=5", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A5);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoCheckAssignments$2=4/4 (/7 e.Assignments/5 )/8 (/11 e.Errors/9 )/12 (/15 e.ResultFunctionsAndErrors/13 )/16 (/19 e.BlocksFunctionsAndErrors/17 )/20 (/23 e.Pattern/21 )/24 s.Backtrack$a/25 (/28 e.ScopeVars$a/26 )/29 e.PatternFunctionsAndErrors/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.Assignments as range 5
  // closed e.Errors as range 9
  // closed e.ResultFunctionsAndErrors as range 13
  // closed e.BlocksFunctionsAndErrors as range 17
  // closed e.Pattern as range 21
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.ScopeVars$a as range 26
  // closed e.PatternFunctionsAndErrors as range 2
  //DEBUG: e.Assignments: 5
  //DEBUG: e.Errors: 9
  //DEBUG: e.ResultFunctionsAndErrors: 13
  //DEBUG: e.BlocksFunctionsAndErrors: 17
  //DEBUG: e.Pattern: 21
  //DEBUG: s.Backtrack$a: 25
  //DEBUG: e.ScopeVars$a: 26
  //DEBUG: e.PatternFunctionsAndErrors: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=5/4 AsIs: (/7 } Tile{ AsIs: e.Assignments/5 } Tile{ AsIs: )/24 } (/30 Tile{ AsIs: e.ScopeVars$a/26 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Errors/9 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors/13 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors/17 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.PatternFunctionsAndErrors/2 } Tile{ AsIs: )/29 } </31 & FixBacktrackForOpenEVars/32 Tile{ AsIs: e.Pattern/21 } Tile{ AsIs: s.Backtrack$a/25 HalfReuse: >/28 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_open_call(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_FixBacktrackForOpenEVars]);
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A5]);
  refalrts::reinit_close_call(context[28]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[31] );
  refalrts::link_brackets( context[23], context[29] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[30], context[8] );
  refalrts::link_brackets( context[7], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[25], context[28] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[23] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A4("DoCheckAssignments$2=4", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A4);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 60 elems
  refalrts::Iter context[60];
  refalrts::zeros( context, 60 );
  // </0 & DoCheckAssignments$2=3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 s.new7/29 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  if( ! refalrts::svar_left( context[29], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DoCheckAssignments$2=3/4 (/7 e.Assignments/30 )/8 (/11 e.Errors/32 )/12 (/15 e.ResultFunctionsAndErrors/34 )/16 (/19 e.BlocksFunctionsAndErrors/36 )/20 (/23 e.Pattern/38 )/24 (/27 e.ScopeVars/40 )/28 # OneWay/29 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[9];
    context[33] = context[10];
    context[34] = context[13];
    context[35] = context[14];
    context[36] = context[17];
    context[37] = context[18];
    context[38] = context[21];
    context[39] = context[22];
    context[40] = context[25];
    context[41] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_OneWay], context[29] ) )
      continue;
    // closed e.Assignments as range 30
    // closed e.Errors as range 32
    // closed e.ResultFunctionsAndErrors as range 34
    // closed e.BlocksFunctionsAndErrors as range 36
    // closed e.Pattern as range 38
    // closed e.ScopeVars as range 40
    //DEBUG: e.Assignments: 30
    //DEBUG: e.Errors: 32
    //DEBUG: e.ResultFunctionsAndErrors: 34
    //DEBUG: e.BlocksFunctionsAndErrors: 36
    //DEBUG: e.Pattern: 38
    //DEBUG: e.ScopeVars: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@1/4 AsIs: (/7 AsIs: e.Assignments/30 AsIs: )/8 AsIs: (/11 AsIs: e.Errors/32 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors/34 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors/36 AsIs: )/20 AsIs: (/23 AsIs: e.Pattern/38 AsIs: )/24 HalfReuse: </27 } & CheckPattern-Flatten/42 (/43 Tile{ AsIs: e.ScopeVars/40 } )/44 </45 & Map@12/46 e.Pattern/38/47 >/49 >/50 </51 & CheckPattern-WarnRepeatedRec/52 (/53 e.ScopeVars/40/54 )/56 (/57 e.Pattern/38/58 Tile{ AsIs: )/28 HalfReuse: >/29 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[42], functions[efunc_CheckPatternm_Flatten]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_Map_Z12]);
    refalrts::copy_evar(vm, context[47], context[48], context[38], context[39]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_CheckPatternm_WarnRepeatedRec]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[40], context[41]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[38], context[39]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z1]);
    refalrts::reinit_open_call(context[27]);
    refalrts::reinit_close_call(context[29]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[57], context[28] );
    refalrts::link_brackets( context[53], context[56] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[43], context[44] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[44], context[57] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoCheckAssignments$2=3/4 (/7 e.Assignments/30 )/8 (/11 e.Errors/32 )/12 (/15 e.ResultFunctionsAndErrors/34 )/16 (/19 e.BlocksFunctionsAndErrors/36 )/20 (/23 e.Pattern/38 )/24 (/27 e.ScopeVars/40 )/28 # WithBacktrack/29 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[9];
    context[33] = context[10];
    context[34] = context[13];
    context[35] = context[14];
    context[36] = context[17];
    context[37] = context[18];
    context[38] = context[21];
    context[39] = context[22];
    context[40] = context[25];
    context[41] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_WithBacktrack], context[29] ) )
      continue;
    // closed e.Assignments as range 30
    // closed e.Errors as range 32
    // closed e.ResultFunctionsAndErrors as range 34
    // closed e.BlocksFunctionsAndErrors as range 36
    // closed e.Pattern as range 38
    // closed e.ScopeVars as range 40
    //DEBUG: e.Assignments: 30
    //DEBUG: e.Errors: 32
    //DEBUG: e.ResultFunctionsAndErrors: 34
    //DEBUG: e.BlocksFunctionsAndErrors: 36
    //DEBUG: e.Pattern: 38
    //DEBUG: e.ScopeVars: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@2/4 AsIs: (/7 AsIs: e.Assignments/30 AsIs: )/8 AsIs: (/11 AsIs: e.Errors/32 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors/34 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors/36 AsIs: )/20 AsIs: (/23 AsIs: e.Pattern/38 AsIs: )/24 HalfReuse: </27 } & CheckPattern-Flatten/42 (/43 Tile{ AsIs: e.ScopeVars/40 } )/44 </45 & Map@12/46 e.Pattern/38/47 Tile{ HalfReuse: >/28 HalfReuse: >/29 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[42], functions[efunc_CheckPatternm_Flatten]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_Map_Z12]);
    refalrts::copy_evar(vm, context[47], context[48], context[38], context[39]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z2]);
    refalrts::reinit_open_call(context[27]);
    refalrts::reinit_close_call(context[28]);
    refalrts::reinit_close_call(context[29]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[43], context[44] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[44], context[46] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=3/4 (/7 e.Assignments/5 )/8 (/11 e.Errors/9 )/12 (/15 e.ResultFunctionsAndErrors/13 )/16 (/19 e.BlocksFunctionsAndErrors/17 )/20 (/23 e.Pattern/21 )/24 (/27 e.ScopeVars/25 )/28 s.Backtrack$a/29 >/1
  // closed e.Assignments as range 5
  // closed e.Errors as range 9
  // closed e.ResultFunctionsAndErrors as range 13
  // closed e.BlocksFunctionsAndErrors as range 17
  // closed e.Pattern as range 21
  // closed e.ScopeVars as range 25
  //DEBUG: s.Backtrack$a: 29
  //DEBUG: e.Assignments: 5
  //DEBUG: e.Errors: 9
  //DEBUG: e.ResultFunctionsAndErrors: 13
  //DEBUG: e.BlocksFunctionsAndErrors: 17
  //DEBUG: e.Pattern: 21
  //DEBUG: e.ScopeVars: 25

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4/4 AsIs: (/7 AsIs: e.Assignments/5 AsIs: )/8 AsIs: (/11 AsIs: e.Errors/9 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors/13 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors/17 AsIs: )/20 AsIs: (/23 AsIs: e.Pattern/21 AsIs: )/24 HalfReuse: s.Backtrack$a29 /27 } </30 & CheckPattern-Flatten/31 (/32 e.ScopeVars/25/33 )/35 </36 & Map@12/37 e.Pattern/21/38 >/40 >/41 </42 & CheckPattern-WarnRepeated*2/43 (/44 Tile{ AsIs: e.ScopeVars/25 } Tile{ AsIs: )/28 AsIs: s.Backtrack$a/29 HalfReuse: (/1 } e.Pattern/21/45 )/47 >/48 >/49 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_CheckPatternm_Flatten]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::copy_evar(vm, context[33], context[34], context[25], context[26]);
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_open_call(vm, context[36]);
  refalrts::alloc_name(vm, context[37], functions[efunc_gen_Map_Z12]);
  refalrts::copy_evar(vm, context[38], context[39], context[21], context[22]);
  refalrts::alloc_close_call(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::alloc_open_call(vm, context[42]);
  refalrts::alloc_name(vm, context[43], functions[efunc_gen_CheckPatternm_WarnRepeated_D2]);
  refalrts::alloc_open_bracket(vm, context[44]);
  refalrts::copy_evar(vm, context[45], context[46], context[21], context[22]);
  refalrts::alloc_close_bracket(vm, context[47]);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::alloc_close_call(vm, context[49]);
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4]);
  refalrts::reinit_svar( context[27], context[29] );
  refalrts::reinit_open_bracket(context[1]);
  refalrts::push_stack( vm, context[49] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[42] );
  refalrts::link_brackets( context[1], context[47] );
  refalrts::link_brackets( context[44], context[28] );
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[36] );
  refalrts::link_brackets( context[32], context[35] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[47], context[49] );
  res = refalrts::splice_evar( res, context[45], context[46] );
  res = refalrts::splice_evar( res, context[28], context[1] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[30], context[44] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A3("DoCheckAssignments$2=3", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A3);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & DoCheckAssignments$2=2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 s.new6/25 s.new7/26 e.new8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new8 as range 2
  do {
    // </0 & DoCheckAssignments$2=2/4 (/7 e.Assignments/27 )/8 (/11 e.Errors/29 )/12 (/15 e.ResultFunctionsAndErrors/31 )/16 (/19 e.Pattern/33 )/20 (/23 e.ScopeVars/35 )/24 s.Backtrack/25 # Assign/26 e.BlocksFunctionsAndErrors/37 >/1
    context[27] = context[5];
    context[28] = context[6];
    context[29] = context[9];
    context[30] = context[10];
    context[31] = context[13];
    context[32] = context[14];
    context[33] = context[17];
    context[34] = context[18];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[2];
    context[38] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[26] ) )
      continue;
    // closed e.Assignments as range 27
    // closed e.Errors as range 29
    // closed e.ResultFunctionsAndErrors as range 31
    // closed e.Pattern as range 33
    // closed e.ScopeVars as range 35
    // closed e.BlocksFunctionsAndErrors as range 37
    //DEBUG: s.Backtrack: 25
    //DEBUG: e.Assignments: 27
    //DEBUG: e.Errors: 29
    //DEBUG: e.ResultFunctionsAndErrors: 31
    //DEBUG: e.Pattern: 33
    //DEBUG: e.ScopeVars: 35
    //DEBUG: e.BlocksFunctionsAndErrors: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Backtrack/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@1/4 AsIs: (/7 AsIs: e.Assignments/27 AsIs: )/8 AsIs: (/11 AsIs: e.Errors/29 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors/31 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.BlocksFunctionsAndErrors/37 } )/39 (/40 Tile{ AsIs: e.Pattern/33 } Tile{ HalfReuse: )/26 } </41 Tile{ HalfReuse: & CheckPattern-Flatten/20 AsIs: (/23 AsIs: e.ScopeVars/35 AsIs: )/24 } </42 & Map@12/43 e.Pattern/33/44 >/46 >/47 </48 & CheckPattern-WarnRepeatedRec/49 (/50 e.ScopeVars/35/51 )/53 (/54 e.Pattern/33/55 )/57 >/58 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_Map_Z12]);
    refalrts::copy_evar(vm, context[44], context[45], context[33], context[34]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_CheckPatternm_WarnRepeatedRec]);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::copy_evar(vm, context[51], context[52], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[53]);
    refalrts::alloc_open_bracket(vm, context[54]);
    refalrts::copy_evar(vm, context[55], context[56], context[33], context[34]);
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::alloc_close_call(vm, context[58]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z1]);
    refalrts::reinit_close_bracket(context[26]);
    refalrts::reinit_name(context[20], functions[efunc_CheckPatternm_Flatten]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[54], context[57] );
    refalrts::link_brackets( context[50], context[53] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[42] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[40], context[26] );
    refalrts::link_brackets( context[19], context[39] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[58] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::splice_to_freelist_open( vm, context[19], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoCheckAssignments$2=2/4 (/7 e.new11/27 )/8 (/11 e.new12/29 )/12 (/15 e.new13/31 )/16 (/19 e.new14/33 )/20 (/23 e.new15/35 )/24 s.new9/25 # Condition/26 e.new10/37 >/1
    context[27] = context[5];
    context[28] = context[6];
    context[29] = context[9];
    context[30] = context[10];
    context[31] = context[13];
    context[32] = context[14];
    context[33] = context[17];
    context[34] = context[18];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[2];
    context[38] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Condition], context[26] ) )
      continue;
    // closed e.new11 as range 27
    // closed e.new12 as range 29
    // closed e.new13 as range 31
    // closed e.new14 as range 33
    // closed e.new15 as range 35
    // closed e.new10 as range 37
    do {
      // </0 & DoCheckAssignments$2=2/4 (/7 e.Assignments/39 )/8 (/11 e.Errors/41 )/12 (/15 e.ResultFunctionsAndErrors/43 )/16 (/19 e.Pattern/45 )/20 (/23 e.ScopeVars/47 )/24 # OneWay/25 # Condition/26 e.BlocksFunctionsAndErrors/49 >/1
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[30];
      context[43] = context[31];
      context[44] = context[32];
      context[45] = context[33];
      context[46] = context[34];
      context[47] = context[35];
      context[48] = context[36];
      context[49] = context[37];
      context[50] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_OneWay], context[25] ) )
        continue;
      // closed e.Assignments as range 39
      // closed e.Errors as range 41
      // closed e.ResultFunctionsAndErrors as range 43
      // closed e.Pattern as range 45
      // closed e.ScopeVars as range 47
      // closed e.BlocksFunctionsAndErrors as range 49
      //DEBUG: e.Assignments: 39
      //DEBUG: e.Errors: 41
      //DEBUG: e.ResultFunctionsAndErrors: 43
      //DEBUG: e.Pattern: 45
      //DEBUG: e.ScopeVars: 47
      //DEBUG: e.BlocksFunctionsAndErrors: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@1/4 AsIs: (/7 AsIs: e.Assignments/39 AsIs: )/8 AsIs: (/11 AsIs: e.Errors/41 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors/43 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.BlocksFunctionsAndErrors/49 } )/51 (/52 Tile{ AsIs: e.Pattern/45 } )/53 </54 Tile{ HalfReuse: & CheckPattern-Flatten/20 AsIs: (/23 AsIs: e.ScopeVars/47 AsIs: )/24 HalfReuse: </25 HalfReuse: & Map@12/26 } e.Pattern/45/55 >/57 >/58 </59 & CheckPattern-WarnRepeatedRec/60 (/61 e.ScopeVars/47/62 )/64 (/65 e.Pattern/45/66 )/68 >/69 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_open_call(vm, context[54]);
      refalrts::copy_evar(vm, context[55], context[56], context[45], context[46]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::alloc_open_call(vm, context[59]);
      refalrts::alloc_name(vm, context[60], functions[efunc_CheckPatternm_WarnRepeatedRec]);
      refalrts::alloc_open_bracket(vm, context[61]);
      refalrts::copy_evar(vm, context[62], context[63], context[47], context[48]);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::copy_evar(vm, context[66], context[67], context[45], context[46]);
      refalrts::alloc_close_bracket(vm, context[68]);
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z1]);
      refalrts::reinit_name(context[20], functions[efunc_CheckPatternm_Flatten]);
      refalrts::reinit_open_call(context[25]);
      refalrts::reinit_name(context[26], functions[efunc_gen_Map_Z12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[59] );
      refalrts::link_brackets( context[65], context[68] );
      refalrts::link_brackets( context[61], context[64] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[52], context[53] );
      refalrts::link_brackets( context[19], context[51] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[57], context[69] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[20], context[26] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoCheckAssignments$2=2/4 (/7 e.Assignments/39 )/8 (/11 e.Errors/41 )/12 (/15 e.ResultFunctionsAndErrors/43 )/16 (/19 e.Pattern/45 )/20 (/23 e.ScopeVars/47 )/24 # WithBacktrack/25 # Condition/26 e.BlocksFunctionsAndErrors/49 >/1
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[30];
      context[43] = context[31];
      context[44] = context[32];
      context[45] = context[33];
      context[46] = context[34];
      context[47] = context[35];
      context[48] = context[36];
      context[49] = context[37];
      context[50] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_WithBacktrack], context[25] ) )
        continue;
      // closed e.Assignments as range 39
      // closed e.Errors as range 41
      // closed e.ResultFunctionsAndErrors as range 43
      // closed e.Pattern as range 45
      // closed e.ScopeVars as range 47
      // closed e.BlocksFunctionsAndErrors as range 49
      //DEBUG: e.Assignments: 39
      //DEBUG: e.Errors: 41
      //DEBUG: e.ResultFunctionsAndErrors: 43
      //DEBUG: e.Pattern: 45
      //DEBUG: e.ScopeVars: 47
      //DEBUG: e.BlocksFunctionsAndErrors: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@2/4 AsIs: (/7 AsIs: e.Assignments/39 AsIs: )/8 AsIs: (/11 AsIs: e.Errors/41 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors/43 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.BlocksFunctionsAndErrors/49 } )/51 (/52 Tile{ AsIs: e.Pattern/45 } )/53 </54 Tile{ HalfReuse: & CheckPattern-Flatten/20 AsIs: (/23 AsIs: e.ScopeVars/47 AsIs: )/24 HalfReuse: </25 HalfReuse: & Map@12/26 } e.Pattern/45/55 >/57 >/58 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_open_call(vm, context[54]);
      refalrts::copy_evar(vm, context[55], context[56], context[45], context[46]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z2]);
      refalrts::reinit_name(context[20], functions[efunc_CheckPatternm_Flatten]);
      refalrts::reinit_open_call(context[25]);
      refalrts::reinit_name(context[26], functions[efunc_gen_Map_Z12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[52], context[53] );
      refalrts::link_brackets( context[19], context[51] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[20], context[26] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoCheckAssignments$2=2/4 (/7 e.Assignments/39 )/8 (/11 e.Errors/41 )/12 (/15 e.ResultFunctionsAndErrors/43 )/16 (/19 e.Pattern/45 )/20 (/23 e.ScopeVars/47 )/24 s.Backtrack/25 # Condition/26 e.BlocksFunctionsAndErrors/49 >/1
    context[39] = context[27];
    context[40] = context[28];
    context[41] = context[29];
    context[42] = context[30];
    context[43] = context[31];
    context[44] = context[32];
    context[45] = context[33];
    context[46] = context[34];
    context[47] = context[35];
    context[48] = context[36];
    context[49] = context[37];
    context[50] = context[38];
    // closed e.Assignments as range 39
    // closed e.Errors as range 41
    // closed e.ResultFunctionsAndErrors as range 43
    // closed e.Pattern as range 45
    // closed e.ScopeVars as range 47
    // closed e.BlocksFunctionsAndErrors as range 49
    //DEBUG: s.Backtrack: 25
    //DEBUG: e.Assignments: 39
    //DEBUG: e.Errors: 41
    //DEBUG: e.ResultFunctionsAndErrors: 43
    //DEBUG: e.Pattern: 45
    //DEBUG: e.ScopeVars: 47
    //DEBUG: e.BlocksFunctionsAndErrors: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4/4 AsIs: (/7 AsIs: e.Assignments/39 AsIs: )/8 AsIs: (/11 AsIs: e.Errors/41 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors/43 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.BlocksFunctionsAndErrors/49 } )/51 (/52 Tile{ AsIs: e.Pattern/45 } )/53 s.Backtrack/25/54 </55 & CheckPattern-Flatten/56 (/57 e.ScopeVars/47/58 )/60 </61 & Map@12/62 e.Pattern/45/63 >/65 >/66 </67 Tile{ HalfReuse: & CheckPattern-WarnRepeated*2/20 AsIs: (/23 AsIs: e.ScopeVars/47 AsIs: )/24 AsIs: s.Backtrack/25 HalfReuse: (/26 } e.Pattern/45/68 )/70 >/71 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_open_bracket(vm, context[52]);
    refalrts::alloc_close_bracket(vm, context[53]);
    refalrts::copy_stvar(vm, context[54], context[25]);
    refalrts::alloc_open_call(vm, context[55]);
    refalrts::alloc_name(vm, context[56], functions[efunc_CheckPatternm_Flatten]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[47], context[48]);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_open_call(vm, context[61]);
    refalrts::alloc_name(vm, context[62], functions[efunc_gen_Map_Z12]);
    refalrts::copy_evar(vm, context[63], context[64], context[45], context[46]);
    refalrts::alloc_close_call(vm, context[65]);
    refalrts::alloc_close_call(vm, context[66]);
    refalrts::alloc_open_call(vm, context[67]);
    refalrts::copy_evar(vm, context[68], context[69], context[45], context[46]);
    refalrts::alloc_close_bracket(vm, context[70]);
    refalrts::alloc_close_call(vm, context[71]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4]);
    refalrts::reinit_name(context[20], functions[efunc_gen_CheckPatternm_WarnRepeated_D2]);
    refalrts::reinit_open_bracket(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[71] );
    refalrts::push_stack( vm, context[67] );
    refalrts::link_brackets( context[26], context[70] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::push_stack( vm, context[66] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[65] );
    refalrts::push_stack( vm, context[61] );
    refalrts::link_brackets( context[57], context[60] );
    refalrts::link_brackets( context[52], context[53] );
    refalrts::link_brackets( context[19], context[51] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[70], context[71] );
    res = refalrts::splice_evar( res, context[68], context[69] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    res = refalrts::splice_evar( res, context[53], context[67] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=2/4 (/7 e.Assignments/5 )/8 (/11 e.Errors/9 )/12 (/15 e.ResultFunctionsAndErrors/13 )/16 (/19 e.Pattern/17 )/20 (/23 e.ScopeVars/21 )/24 s.Backtrack/25 s.ChainType/26 e.BlocksFunctionsAndErrors/2 >/1
  // closed e.Assignments as range 5
  // closed e.Errors as range 9
  // closed e.ResultFunctionsAndErrors as range 13
  // closed e.Pattern as range 17
  // closed e.ScopeVars as range 21
  // closed e.BlocksFunctionsAndErrors as range 2
  //DEBUG: s.Backtrack: 25
  //DEBUG: s.ChainType: 26
  //DEBUG: e.Assignments: 5
  //DEBUG: e.Errors: 9
  //DEBUG: e.ResultFunctionsAndErrors: 13
  //DEBUG: e.Pattern: 17
  //DEBUG: e.ScopeVars: 21
  //DEBUG: e.BlocksFunctionsAndErrors: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=3/4 AsIs: (/7 AsIs: e.Assignments/5 AsIs: )/8 AsIs: (/11 AsIs: e.Errors/9 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.BlocksFunctionsAndErrors/2 } )/27 (/28 Tile{ AsIs: e.Pattern/17 } Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.ScopeVars/21 AsIs: )/24 } </29 & DoCheckAssignments$2=3:1*2/30 Tile{ AsIs: s.Backtrack/25 AsIs: s.ChainType/26 } >/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoCheckAssignments_S2A3B1D2]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[28], context[20] );
  refalrts::link_brackets( context[19], context[27] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[20], context[24] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A2("DoCheckAssignments$2=2", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A2);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & DoCheckAssignments$2=1/4 (/7 e.Assignments/5 )/8 (/11 e.Errors/9 )/12 (/15 e.Pattern/13 )/16 (/19 e.ScopeVars/17 )/20 s.Backtrack/21 s.ChainType/22 (/25 e.Blocks/23 )/26 e.ResultFunctionsAndErrors/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Assignments as range 5
  // closed e.Errors as range 9
  // closed e.Pattern as range 13
  // closed e.ScopeVars as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.Blocks as range 23
  // closed e.ResultFunctionsAndErrors as range 2
  //DEBUG: e.Assignments: 5
  //DEBUG: e.Errors: 9
  //DEBUG: e.Pattern: 13
  //DEBUG: e.ScopeVars: 17
  //DEBUG: s.Backtrack: 21
  //DEBUG: s.ChainType: 22
  //DEBUG: e.Blocks: 23
  //DEBUG: e.ResultFunctionsAndErrors: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=2/4 AsIs: (/7 AsIs: e.Assignments/5 AsIs: )/8 AsIs: (/11 AsIs: e.Errors/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.ResultFunctionsAndErrors/2 } Tile{ AsIs: )/26 } (/27 Tile{ AsIs: e.Pattern/13 } Tile{ AsIs: )/16 AsIs: (/19 AsIs: e.ScopeVars/17 AsIs: )/20 AsIs: s.Backtrack/21 AsIs: s.ChainType/22 HalfReuse: </25 } & Map@13/28 (/29 e.ScopeVars/17/30 )/32 Tile{ AsIs: e.Blocks/23 } >/33 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_gen_Map_Z13]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::copy_evar(vm, context[30], context[31], context[17], context[18]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_close_call(vm, context[33]);
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A2]);
  refalrts::reinit_open_call(context[25]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[29], context[32] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[27], context[16] );
  refalrts::link_brackets( context[15], context[26] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[28], context[32] );
  res = refalrts::splice_evar( res, context[16], context[25] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A1("DoCheckAssignments$2=1", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A1);


static refalrts::FnResult func_DoCheckAssignments(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & DoCheckAssignments/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 s.new4/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_right( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & DoCheckAssignments/4 (/7 )/8 (/11 e.ScopeVars/14 )/12 e.Errors/16 s.Backtrack/13 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[2];
    context[17] = context[3];
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.ScopeVars as range 14
    // closed e.Errors as range 16
    //DEBUG: s.Backtrack: 13
    //DEBUG: e.ScopeVars: 14
    //DEBUG: e.Errors: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoCheckAssignments/4 (/7 )/8 {REMOVED TILE} {REMOVED TILE} s.Backtrack/13 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.ScopeVars/14 AsIs: )/12 } Tile{ AsIs: e.Errors/16 } Tile{ ]] }
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments/4 (/7 (/16 s.ChainType/30 (/28 e.Result/26 )/29 (/24 e.Blocks/22 )/25 (/20 e.Pattern/18 )/21 )/17 e.Assignments/5 )/8 (/11 e.ScopeVars/9 )/12 e.Errors/2 s.Backtrack/13 >/1
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[5], context[6] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_right( context[18], context[19], context[14], context[15] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_right( context[22], context[23], context[14], context[15] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_right( context[26], context[27], context[14], context[15] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.Result as range 26
  // closed e.Blocks as range 22
  // closed e.Pattern as range 18
  // closed e.Assignments as range 5
  // closed e.ScopeVars as range 9
  // closed e.Errors as range 2
  if( ! refalrts::svar_left( context[30], context[14], context[15] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[14], context[15] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Backtrack: 13
  //DEBUG: e.Result: 26
  //DEBUG: e.Blocks: 22
  //DEBUG: e.Pattern: 18
  //DEBUG: e.Assignments: 5
  //DEBUG: e.ScopeVars: 9
  //DEBUG: e.Errors: 2
  //DEBUG: s.ChainType: 30

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Backtrack/13 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=1/4 AsIs: (/7 } Tile{ AsIs: e.Assignments/5 } Tile{ AsIs: )/29 AsIs: (/24 } Tile{ AsIs: e.Errors/2 } Tile{ AsIs: )/25 AsIs: (/20 AsIs: e.Pattern/18 AsIs: )/21 HalfReuse: (/17 } e.ScopeVars/9/31 )/33 Tile{ HalfReuse: s.Backtrack13 /16 AsIs: s.ChainType/30 AsIs: (/28 } Tile{ AsIs: e.Blocks/22 } )/34 </35 Tile{ HalfReuse: & CheckResult/8 AsIs: (/11 AsIs: e.ScopeVars/9 AsIs: )/12 } </36 & Map@12/37 Tile{ AsIs: e.Result/26 } >/38 >/39 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[31], context[32], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_call(vm, context[35]);
  refalrts::alloc_open_call(vm, context[36]);
  refalrts::alloc_name(vm, context[37], functions[efunc_gen_Map_Z12]);
  refalrts::alloc_close_call(vm, context[38]);
  refalrts::alloc_close_call(vm, context[39]);
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A1]);
  refalrts::reinit_open_bracket(context[17]);
  refalrts::reinit_svar( context[16], context[13] );
  refalrts::reinit_name(context[8], functions[efunc_CheckResult]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[36] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[28], context[34] );
  refalrts::link_brackets( context[17], context[33] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[7], context[29] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[36], context[37] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[16], context[28] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[25], context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[29], context[24] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoCheckAssignments("DoCheckAssignments", COOKIE1_, COOKIE2_, func_DoCheckAssignments);


static refalrts::FnResult func_FixBacktrackForOpenEVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & FixBacktrackForOpenEVars/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FixBacktrackForOpenEVars/4 e.new1/2 s.new2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & FixBacktrackForOpenEVars/4 e.Pattern/6 # OneWay/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OneWay], context[5] ) )
      continue;
    // closed e.Pattern as range 6
    //DEBUG: e.Pattern: 6
    //6: e.Pattern
    //13: e.Pattern

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_FixBacktrackForOpenEVars_S1C1]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_FindOpenEVars]);
    refalrts::copy_evar(vm, context[13], context[14], context[6], context[7]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[8] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[11] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </8 & FixBacktrackForOpenEVars$1?1/12 >/9
      context[10] = 0;
      context[11] = 0;
      context[12] = refalrts::call_left( context[10], context[11], context[8], context[9] );
      if( ! refalrts::empty_seq( context[10], context[11] ) )
        continue;
      //DEBUG: e.Pattern: 6

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FixBacktrackForOpenEVars/4 e.Pattern/6 # OneWay/5 </8 & FixBacktrackForOpenEVars$1?1/12 >/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # OneWay/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_OneWay]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[8], context[9]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FixBacktrackForOpenEVars/4 e.Pattern/2 s.Backtrack/5 >/1
  // closed e.Pattern as range 2
  //DEBUG: s.Backtrack: 5
  //DEBUG: e.Pattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FixBacktrackForOpenEVars/4 e.Pattern/2 s.Backtrack/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # WithBacktrack/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_WithBacktrack]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FixBacktrackForOpenEVars("FixBacktrackForOpenEVars", COOKIE1_, COOKIE2_, func_FixBacktrackForOpenEVars);


static refalrts::FnResult func_FindOpenEVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & FindOpenEVars/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & FindOpenEVars/4 e._/7 (/13 # Var/15 t._/16 'e'/18 e._0/11 )/14 e._1/19 (/25 # Var/27 t._0/28 'e'/30 e._2/23 )/26 e._3/21 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::char_left( 'e', context[11], context[12] );
      if( ! context[18] )
        continue;
      // closed e._0 as range 11
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = refalrts::ident_left( identifiers[ident_Var], context[23], context[24] );
        if( ! context[27] )
          continue;
        // closed e._3 as range 21
        context[29] = refalrts::tvar_left( context[28], context[23], context[24] );
        if( ! context[29] )
          continue;
        context[30] = refalrts::char_left( 'e', context[23], context[24] );
        if( ! context[30] )
          continue;
        // closed e._2 as range 23
        //DEBUG: e._: 7
        //DEBUG: t._: 16
        //DEBUG: e._0: 11
        //DEBUG: e._1: 19
        //DEBUG: e._3: 21
        //DEBUG: t._0: 28
        //DEBUG: e._2: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & FindOpenEVars/4 e._/7 (/13 # Var/15 t._/16 'e'/18 e._0/11 )/14 e._1/19 (/25 # Var/27 t._0/28 'e'/30 e._2/23 )/26 e._3/21 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # OpenE/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_OpenE]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOpenEVars/4 e.Terms/2 >/1
  // closed e.Terms as range 2
  //DEBUG: e.Terms: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@14/4 AsIs: e.Terms/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindOpenEVars("FindOpenEVars", COOKIE1_, COOKIE2_, func_FindOpenEVars);


static refalrts::FnResult func_FlatExpr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & FlatExpr/4 e.Expr/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Expr as range 2
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@12/4 AsIs: e.Expr/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FlatExpr("FlatExpr", COOKIE1_, COOKIE2_, func_FlatExpr);


static refalrts::FnResult func_CheckPattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & CheckPattern/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPattern/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 s.new3/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckPattern/4 (/7 e.ScopeVars/14 )/8 (/11 e.Pattern/16 )/12 # OneWay/13 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_OneWay], context[13] ) )
      continue;
    // closed e.ScopeVars as range 14
    // closed e.Pattern as range 16
    //DEBUG: e.ScopeVars: 14
    //DEBUG: e.Pattern: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </18 & CheckPattern-Flatten/19 (/20 e.ScopeVars/14/21 )/23 </24 & Map@12/25 e.Pattern/16/26 Tile{ AsIs: >/1 } >/28 Tile{ AsIs: </0 Reuse: & CheckPattern-WarnRepeatedRec/4 AsIs: (/7 AsIs: e.ScopeVars/14 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern/16 AsIs: )/12 HalfReuse: >/13 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_CheckPatternm_Flatten]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[14], context[15]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_Map_Z12]);
    refalrts::copy_evar(vm, context[26], context[27], context[16], context[17]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::update_name(context[4], functions[efunc_CheckPatternm_WarnRepeatedRec]);
    refalrts::reinit_close_call(context[13]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[20], context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[13] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[18], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPattern/4 (/7 e.ScopeVars/14 )/8 (/11 e.Pattern/16 )/12 # WithBacktrack/13 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_WithBacktrack], context[13] ) )
      continue;
    // closed e.ScopeVars as range 14
    // closed e.Pattern as range 16
    //DEBUG: e.ScopeVars: 14
    //DEBUG: e.Pattern: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPattern-Flatten/4 AsIs: (/7 AsIs: e.ScopeVars/14 AsIs: )/8 HalfReuse: </11 } Tile{ HalfReuse: & Map@12/12 } Tile{ AsIs: e.Pattern/16 } Tile{ HalfReuse: >/13 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_CheckPatternm_Flatten]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[12], functions[efunc_gen_Map_Z12]);
    refalrts::reinit_close_call(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPattern/4 (/7 e.ScopeVars/5 )/8 (/11 e.Pattern/9 )/12 s.Backtrack/13 >/1
  // closed e.ScopeVars as range 5
  // closed e.Pattern as range 9
  //DEBUG: s.Backtrack: 13
  //DEBUG: e.ScopeVars: 5
  //DEBUG: e.Pattern: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPattern-Flatten/4 AsIs: (/7 AsIs: e.ScopeVars/5 AsIs: )/8 HalfReuse: </11 } & Map@12/14 Tile{ AsIs: e.Pattern/9 } >/15 >/16 </17 & CheckPattern-WarnRepeated*2/18 (/19 e.ScopeVars/5/20 Tile{ AsIs: )/12 AsIs: s.Backtrack/13 HalfReuse: (/1 } e.Pattern/9/22 )/24 >/25 Tile{ ]] }
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Map_Z12]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_CheckPatternm_WarnRepeated_D2]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::copy_evar(vm, context[20], context[21], context[5], context[6]);
  refalrts::copy_evar(vm, context[22], context[23], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_CheckPatternm_Flatten]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_open_bracket(context[1]);
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[1], context[24] );
  refalrts::link_brackets( context[19], context[12] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[15], context[19] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckPattern("CheckPattern", COOKIE1_, COOKIE2_, func_CheckPattern);


static refalrts::FnResult func_CheckPatternm_WarnRepeated(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & CheckPattern-WarnRepeated/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPattern-WarnRepeated/4 (/7 e.new1/5 )/8 s.new2/13 (/11 e.new3/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new3 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckPattern-WarnRepeated/4 (/7 e.ScopeVars/14 )/8 # OneWay/13 (/11 e.Pattern/16 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_OneWay], context[13] ) )
      continue;
    // closed e.ScopeVars as range 14
    // closed e.Pattern as range 16
    //DEBUG: e.ScopeVars: 14
    //DEBUG: e.Pattern: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPattern-WarnRepeatedRec/4 AsIs: (/7 AsIs: e.ScopeVars/14 AsIs: )/8 HalfReuse: (/13 } Tile{ AsIs: e.Pattern/16 } Tile{ AsIs: )/12 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_CheckPatternm_WarnRepeatedRec]);
    refalrts::reinit_open_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::splice_to_freelist_open( vm, context[13], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPattern-WarnRepeated/4 (/7 e.ScopeVars/5 )/8 # WithBacktrack/13 (/11 e.Pattern/9 )/12 >/1
  if( ! refalrts::ident_term( identifiers[ident_WithBacktrack], context[13] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ScopeVars as range 5
  // closed e.Pattern as range 9
  //DEBUG: e.ScopeVars: 5
  //DEBUG: e.Pattern: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckPattern-WarnRepeated/4 (/7 e.ScopeVars/5 )/8 # WithBacktrack/13 (/11 e.Pattern/9 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckPatternm_WarnRepeated("CheckPattern-WarnRepeated", COOKIE1_, COOKIE2_, func_CheckPatternm_WarnRepeated);


static refalrts::FnResult func_CheckPatternm_WarnRepeatedRec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & CheckPattern-WarnRepeatedRec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  do {
    // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.ScopeVars/13 )/8 (/11 e.OpenEPattern/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    // closed e.ScopeVars as range 13
    // closed e.OpenEPattern as range 15
    //DEBUG: e.ScopeVars: 13
    //DEBUG: e.OpenEPattern: 15
    //13: e.ScopeVars
    //15: e.OpenEPattern
    //20: e.OpenEPattern

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_S1C1]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[17] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </17 & CheckPattern-WarnRepeatedRec$1?1/21 e._/22 (/28 # Var/30 t._/31 'e'/33 e._0/26 )/29 e._1/34 (/40 # Var/42 t._0/43 'e'/45 e._2/38 )/41 e._3/36 >/18
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::call_left( context[19], context[20], context[17], context[18] );
      context[22] = 0;
      context[23] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[24] = context[19];
        context[25] = context[20];
        context[26] = 0;
        context[27] = 0;
        context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
        if( ! context[28] )
          continue;
        refalrts::bracket_pointers(context[28], context[29]);
        context[30] = refalrts::ident_left( identifiers[ident_Var], context[26], context[27] );
        if( ! context[30] )
          continue;
        context[32] = refalrts::tvar_left( context[31], context[26], context[27] );
        if( ! context[32] )
          continue;
        context[33] = refalrts::char_left( 'e', context[26], context[27] );
        if( ! context[33] )
          continue;
        // closed e._0 as range 26
        context[34] = 0;
        context[35] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[36] = context[24];
          context[37] = context[25];
          context[38] = 0;
          context[39] = 0;
          context[40] = refalrts::brackets_left( context[38], context[39], context[36], context[37] );
          if( ! context[40] )
            continue;
          refalrts::bracket_pointers(context[40], context[41]);
          context[42] = refalrts::ident_left( identifiers[ident_Var], context[38], context[39] );
          if( ! context[42] )
            continue;
          // closed e._3 as range 36
          context[44] = refalrts::tvar_left( context[43], context[38], context[39] );
          if( ! context[44] )
            continue;
          context[45] = refalrts::char_left( 'e', context[38], context[39] );
          if( ! context[45] )
            continue;
          // closed e._2 as range 38
          //DEBUG: e.ScopeVars: 13
          //DEBUG: e.OpenEPattern: 15
          //DEBUG: e._: 22
          //DEBUG: t._: 31
          //DEBUG: e._0: 26
          //DEBUG: e._1: 34
          //DEBUG: e._3: 36
          //DEBUG: t._0: 43
          //DEBUG: e._2: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 {REMOVED TILE} e._/22 (/28 # Var/30 t._/31 'e'/33 e._0/26 )/29 e._1/34 (/40 # Var/42 t._0/43 {REMOVED TILE} e._2/38 )/41 e._3/36 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-WarnRepeatedRec/4 AsIs: (/7 AsIs: e.ScopeVars/13 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: </17 Reuse: & ReducePattern/21 } Tile{ AsIs: e.OpenEPattern/15 } Tile{ HalfReuse: >/45 } Tile{ HalfReuse: )/18 AsIs: >/1 ]] }
          refalrts::update_name(context[21], functions[efunc_ReducePattern]);
          refalrts::reinit_close_call(context[45]);
          refalrts::reinit_close_bracket(context[18]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[11], context[18] );
          refalrts::push_stack( vm, context[45] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[18];
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_evar( res, context[15], context[16] );
          res = refalrts::splice_evar( res, context[17], context[21] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[34], context[35], context[24], context[25] ) );
      } while ( refalrts::open_evar_advance( context[22], context[23], context[19], context[20] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[17], context[18]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.new3/13 )/8 (/11 (/19 s.new4/21 e.new5/17 )/20 e.new6/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    // closed e.new3 as range 13
    // closed e.new6 as range 15
    if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
      continue;
    // closed e.new5 as range 17
    do {
      // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.new7/22 )/8 (/11 (/19 # Var/21 e.new9/24 )/20 e.new8/26 )/12 >/1
      context[22] = context[13];
      context[23] = context[14];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[15];
      context[27] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_Var], context[21] ) )
        continue;
      // closed e.new7 as range 22
      // closed e.new9 as range 24
      // closed e.new8 as range 26
      do {
        // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.ScopeVars/28 )/8 (/11 (/19 # Var/21 t./34 s.Mode/36 '_'/37 e.1/30 )/20 e.Tail/32 )/12 >/1
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        // closed e.ScopeVars as range 28
        // closed e.Tail as range 32
        context[35] = refalrts::tvar_left( context[34], context[30], context[31] );
        if( ! context[35] )
          continue;
        if( ! refalrts::svar_left( context[36], context[30], context[31] ) )
          continue;
        context[37] = refalrts::char_left( '_', context[30], context[31] );
        if( ! context[37] )
          continue;
        // closed e.1 as range 30
        //DEBUG: e.ScopeVars: 28
        //DEBUG: e.Tail: 32
        //DEBUG: t.: 34
        //DEBUG: s.Mode: 36
        //DEBUG: e.1: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/19 # Var/21 t./34 s.Mode/36 '_'/37 e.1/30 )/20 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-WarnRepeatedRec/4 AsIs: (/7 AsIs: e.ScopeVars/28 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Tail/32 } Tile{ AsIs: )/12 AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[12];
        res = refalrts::splice_evar( res, context[32], context[33] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.ScopeVars/28 )/8 (/11 (/19 # Var/21 e.Info/30 )/20 e.Tail/32 )/12 >/1
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      // closed e.ScopeVars as range 28
      // closed e.Info as range 30
      // closed e.Tail as range 32
      //DEBUG: e.ScopeVars: 28
      //DEBUG: e.Info: 30
      //DEBUG: e.Tail: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckVariableRepeating*1/4 AsIs: (/7 AsIs: e.ScopeVars/28 AsIs: )/8 AsIs: (/11 HalfReuse: # Var/19 } Tile{ AsIs: e.Info/30 } Tile{ HalfReuse: )/21 } >/34 </35 & CheckPattern-WarnRepeatedRec/36 (/37 e.ScopeVars/28/38 )/40 Tile{ HalfReuse: (/20 AsIs: e.Tail/32 AsIs: )/12 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_CheckPatternm_WarnRepeatedRec]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::copy_evar(vm, context[38], context[39], context[28], context[29]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::update_name(context[4], functions[efunc_gen_CheckVariableRepeating_D1]);
      refalrts::reinit_ident(context[19], identifiers[ident_Var]);
      refalrts::reinit_close_bracket(context[21]);
      refalrts::reinit_open_bracket(context[20]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[35] );
      refalrts::link_brackets( context[20], context[12] );
      refalrts::link_brackets( context[37], context[40] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[21] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[34], context[40] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.ScopeVars/22 )/8 (/11 (/19 # NewVar/21 e.Info/24 )/20 e.Tail/26 )/12 >/1
      context[22] = context[13];
      context[23] = context[14];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[15];
      context[27] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_NewVar], context[21] ) )
        continue;
      // closed e.ScopeVars as range 22
      // closed e.Info as range 24
      // closed e.Tail as range 26
      //DEBUG: e.ScopeVars: 22
      //DEBUG: e.Info: 24
      //DEBUG: e.Tail: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/19 # NewVar/21 e.Info/24 )/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-WarnRepeatedRec/4 AsIs: (/7 AsIs: e.ScopeVars/22 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Tail/26 } Tile{ AsIs: )/12 AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.ScopeVars/22 )/8 (/11 (/19 # Symbol/21 e.Info/24 )/20 e.Tail/26 )/12 >/1
      context[22] = context[13];
      context[23] = context[14];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[15];
      context[27] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[21] ) )
        continue;
      // closed e.ScopeVars as range 22
      // closed e.Info as range 24
      // closed e.Tail as range 26
      //DEBUG: e.ScopeVars: 22
      //DEBUG: e.Info: 24
      //DEBUG: e.Tail: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/19 # Symbol/21 e.Info/24 )/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-WarnRepeatedRec/4 AsIs: (/7 AsIs: e.ScopeVars/22 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Tail/26 } Tile{ AsIs: )/12 AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.ScopeVars/22 )/8 (/11 (/19 # Brackets/21 e.InBrackets/24 )/20 e.Tail/26 )/12 >/1
      context[22] = context[13];
      context[23] = context[14];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[15];
      context[27] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[21] ) )
        continue;
      // closed e.ScopeVars as range 22
      // closed e.InBrackets as range 24
      // closed e.Tail as range 26
      //DEBUG: e.ScopeVars: 22
      //DEBUG: e.InBrackets: 24
      //DEBUG: e.Tail: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-WarnRepeatedRec/4 AsIs: (/7 AsIs: e.ScopeVars/22 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.InBrackets/24 } Tile{ HalfReuse: )/21 } >/28 </29 & CheckPattern-WarnRepeatedRec/30 Tile{ AsIs: (/19 } e.ScopeVars/22/31 )/33 Tile{ HalfReuse: (/20 AsIs: e.Tail/26 AsIs: )/12 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_CheckPatternm_WarnRepeatedRec]);
      refalrts::copy_evar(vm, context[31], context[32], context[22], context[23]);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::reinit_close_bracket(context[21]);
      refalrts::reinit_open_bracket(context[20]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[20], context[12] );
      refalrts::link_brackets( context[19], context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[21] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.ScopeVars/22 )/8 (/11 (/19 # ADT-Brackets/21 t.SrcPos/28 (/32 e.Name/30 )/33 e.InBrackets/24 )/20 e.Tail/26 )/12 >/1
    context[22] = context[13];
    context[23] = context[14];
    context[24] = context[17];
    context[25] = context[18];
    context[26] = context[15];
    context[27] = context[16];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[21] ) )
      continue;
    // closed e.ScopeVars as range 22
    // closed e.Tail as range 26
    context[29] = refalrts::tvar_left( context[28], context[24], context[25] );
    if( ! context[29] )
      continue;
    context[30] = 0;
    context[31] = 0;
    context[32] = refalrts::brackets_left( context[30], context[31], context[24], context[25] );
    if( ! context[32] )
      continue;
    refalrts::bracket_pointers(context[32], context[33]);
    // closed e.Name as range 30
    // closed e.InBrackets as range 24
    //DEBUG: e.ScopeVars: 22
    //DEBUG: e.Tail: 26
    //DEBUG: t.SrcPos: 28
    //DEBUG: e.Name: 30
    //DEBUG: e.InBrackets: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.SrcPos/28 {REMOVED TILE} e.Name/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-WarnRepeatedRec/4 AsIs: (/7 AsIs: e.ScopeVars/22 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.InBrackets/24 } Tile{ AsIs: )/33 } Tile{ HalfReuse: >/19 HalfReuse: </21 } & CheckPattern-WarnRepeatedRec/34 Tile{ AsIs: (/32 } e.ScopeVars/22/35 )/37 Tile{ HalfReuse: (/20 AsIs: e.Tail/26 AsIs: )/12 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[34], functions[efunc_CheckPatternm_WarnRepeatedRec]);
    refalrts::copy_evar(vm, context[35], context[36], context[22], context[23]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::reinit_close_call(context[19]);
    refalrts::reinit_open_call(context[21]);
    refalrts::reinit_open_bracket(context[20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[20], context[12] );
    refalrts::link_brackets( context[32], context[37] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[33] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.ScopeVars/5 )/8 (/11 )/12 >/1
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ScopeVars as range 5
  //DEBUG: e.ScopeVars: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckPattern-WarnRepeatedRec/4 (/7 e.ScopeVars/5 )/8 (/11 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckPatternm_WarnRepeatedRec("CheckPattern-WarnRepeatedRec", COOKIE1_, COOKIE2_, func_CheckPatternm_WarnRepeatedRec);


static refalrts::FnResult func_ReducePattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & ReducePattern/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & ReducePattern/4 e.Begin/7 (/13 # Var/15 t.Pos1/16 'e'/18 e._/11 )/14 e._0/19 (/25 # Var/27 t.Pos2/28 'e'/30 e._1/23 )/26 e.End/21 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::char_left( 'e', context[11], context[12] );
      if( ! context[18] )
        continue;
      // closed e._ as range 11
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = refalrts::ident_left( identifiers[ident_Var], context[23], context[24] );
        if( ! context[27] )
          continue;
        // closed e.End as range 21
        context[29] = refalrts::tvar_left( context[28], context[23], context[24] );
        if( ! context[29] )
          continue;
        context[30] = refalrts::char_left( 'e', context[23], context[24] );
        if( ! context[30] )
          continue;
        // closed e._1 as range 23
        //DEBUG: e.Begin: 7
        //DEBUG: t.Pos1: 16
        //DEBUG: e._: 11
        //DEBUG: e._0: 19
        //DEBUG: e.End: 21
        //DEBUG: t.Pos2: 28
        //DEBUG: e._1: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._/11 )/14 e._0/19 (/25 # Var/27 t.Pos2/28 {REMOVED TILE} e._1/23 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: e.Begin/7 } Tile{ AsIs: </0 AsIs: & ReducePattern/4 } Tile{ AsIs: (/13 AsIs: # Var/15 AsIs: t.Pos1/16 AsIs: 'e'/18 } Tile{ Reuse: '_'/30 } Tile{ AsIs: )/26 AsIs: e.End/21 AsIs: >/1 ]] }
        refalrts::update_char(context[30], '_');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[26] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[13], context[18] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReducePattern/4 e.ReducedPattern/2 >/1
  // closed e.ReducedPattern as range 2
  //DEBUG: e.ReducedPattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ReducePattern/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.ReducedPattern/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ReducePattern("ReducePattern", COOKIE1_, COOKIE2_, func_ReducePattern);


static refalrts::FnResult func_CheckVariableRepeating(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & CheckVariableRepeating/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckVariableRepeating/4 (/7 e.new1/5 )/8 t.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckVariableRepeating/4 (/7 e.new6/11 )/8 (/9 # Var/15 t.new3/16 s.new4/18 e.new5/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    context[15] = refalrts::ident_left( identifiers[ident_Var], context[13], context[14] );
    if( ! context[15] )
      continue;
    // closed e.new6 as range 11
    context[17] = refalrts::tvar_left( context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
      continue;
    // closed e.new5 as range 13
    do {
      // </0 & CheckVariableRepeating/4 (/7 e.ScopeVars/19 )/8 (/9 # Var/15 t.SrcPos/16 s.Mode/18 '_'/23 e.Index/21 )/10 >/1
      context[19] = context[11];
      context[20] = context[12];
      context[21] = context[13];
      context[22] = context[14];
      context[23] = refalrts::char_left( '_', context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.ScopeVars as range 19
      // closed e.Index as range 21
      //DEBUG: t.SrcPos: 16
      //DEBUG: s.Mode: 18
      //DEBUG: e.ScopeVars: 19
      //DEBUG: e.Index: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CheckVariableRepeating/4 (/7 e.ScopeVars/19 )/8 (/9 # Var/15 t.SrcPos/16 s.Mode/18 '_'/23 e.Index/21 )/10 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckVariableRepeating/4 (/7 e.Vars-B/23 (/29 s.Mode/31 e.Index/32 )/30 e.Vars-E/25 )/8 (/9 # Var/15 t.SrcPos/16 s.Mode/18 e.Index/21 )/10 >/1
    context[19] = context[11];
    context[20] = context[12];
    context[21] = context[13];
    context[22] = context[14];
    // closed e.Index as range 21
    context[23] = 0;
    context[24] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[25] = context[19];
      context[26] = context[20];
      context[27] = 0;
      context[28] = 0;
      context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
      if( ! context[29] )
        continue;
      refalrts::bracket_pointers(context[29], context[30]);
      if( ! refalrts::repeated_stvar_left( vm, context[31], context[18], context[27], context[28] ) )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[32], context[33], context[21], context[22], context[27], context[28] ) )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.Vars-E as range 25
      //DEBUG: t.SrcPos: 16
      //DEBUG: s.Mode: 18
      //DEBUG: e.Index: 21
      //DEBUG: e.Vars-B: 23
      //DEBUG: e.Vars-E: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CheckVariableRepeating/4 (/7 e.Vars-B/23 {REMOVED TILE} e.Vars-E/25 {REMOVED TILE} s.Mode/18 e.Index/21 )/10 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 HalfReuse: # Warning/9 Reuse: # repeated/15 AsIs: t.SrcPos/16 } Tile{ HalfReuse: # RepeatedVariable/29 AsIs: s.Mode/31 AsIs: e.Index/32 AsIs: )/30 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[9], identifiers[ident_Warning]);
      refalrts::update_ident(context[15], identifiers[ident_repeated]);
      refalrts::reinit_ident(context[29], identifiers[ident_RepeatedVariable]);
      refalrts::link_brackets( context[8], context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[8], context[17] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[23], context[24], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckVariableRepeating/4 (/7 e.ScopeVars/5 )/8 t.OtherVariable/9 >/1
  // closed e.ScopeVars as range 5
  //DEBUG: t.OtherVariable: 9
  //DEBUG: e.ScopeVars: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckVariableRepeating/4 (/7 e.ScopeVars/5 )/8 t.OtherVariable/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckVariableRepeating("CheckVariableRepeating", COOKIE1_, COOKIE2_, func_CheckVariableRepeating);


static refalrts::FnResult func_gen_CheckPatternm_Flatten_S3L1S3B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & CheckPattern-Flatten$3\1$3:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPattern-Flatten$3\1$3:1/4 (/7 e.new1/5 )/8 s.new2/9 t.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & CheckPattern-Flatten$3\1$3:1/4 (/7 e.Index/12 )/8 s.NewMode/9 t.SrcPos/10 e.KnownVars-B/16 (/22 s.OldMode/26 e.Index/24 )/23 e.KnownVars-E/18 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.Index as range 12
    context[16] = 0;
    context[17] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[18] = context[14];
      context[19] = context[15];
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
      if( ! context[22] )
        continue;
      refalrts::bracket_pointers(context[22], context[23]);
      if( ! refalrts::repeated_evar_right( vm, context[24], context[25], context[12], context[13], context[20], context[21] ) )
        continue;
      // closed e.KnownVars-E as range 18
      if( ! refalrts::svar_left( context[26], context[20], context[21] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      //DEBUG: t.SrcPos: 10
      //DEBUG: s.NewMode: 9
      //DEBUG: e.Index: 12
      //DEBUG: e.KnownVars-B: 16
      //DEBUG: e.KnownVars-E: 18
      //DEBUG: s.OldMode: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckPattern-Flatten$3\1$3:1/4 (/7 e.Index/12 {REMOVED TILE} t.SrcPos/10 {REMOVED TILE} (/22 s.OldMode/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.KnownVars-B/16 } Tile{ HalfReuse: (/8 AsIs: s.NewMode/9 } Tile{ AsIs: e.Index/24 } Tile{ AsIs: )/23 AsIs: e.KnownVars-E/18 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::link_brackets( context[8], context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[23];
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[16], context[17], context[14], context[15] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPattern-Flatten$3\1$3:1/4 (/7 e.Index/5 )/8 s.NewMode/9 t.SrcPos/10 e.KnownVars$a/2 >/1
  // closed e.Index as range 5
  // closed e.KnownVars$a as range 2
  //DEBUG: t.SrcPos: 10
  //DEBUG: s.NewMode: 9
  //DEBUG: e.Index: 5
  //DEBUG: e.KnownVars$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.KnownVars$a/2 } Tile{ HalfReuse: (/4 HalfReuse: s.NewMode9 /7 AsIs: e.Index/5 AsIs: )/8 } )/12 (/13 # Warning/14 # deprecated/15 Tile{ AsIs: t.SrcPos/10 } # RedundantCaret/16 Tile{ AsIs: s.NewMode/9 } e.Index/5/17 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Warning]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_deprecated]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_RedundantCaret]);
  refalrts::copy_evar(vm, context[17], context[18], context[5], context[6]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_svar( context[7], context[9] );
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[13], context[1] );
  refalrts::link_brackets( context[0], context[12] );
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternm_Flatten_S3L1S3B1("CheckPattern-Flatten$3\\1$3:1", COOKIE1_, COOKIE2_, func_gen_CheckPatternm_Flatten_S3L1S3B1);


static refalrts::FnResult func_gen_CheckPatternm_Flatten_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & CheckPattern-Flatten$3\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPattern-Flatten$3\1/4 (/7 e.new1/5 )/8 (/11 s.new2/13 t.new3/14 t.new4/16 e.new5/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = refalrts::tvar_left( context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  context[17] = refalrts::tvar_left( context[16], context[9], context[10] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 9
  do {
    // </0 & CheckPattern-Flatten$3\1/4 (/7 e.new6/18 )/8 (/11 s.new7/13 t.new8/14 s.new9/16 e.new10/20 )/12 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    if( ! refalrts::svar_term( context[16], context[16] ) )
      continue;
    // closed e.new6 as range 18
    // closed e.new10 as range 20
    do {
      // </0 & CheckPattern-Flatten$3\1/4 (/7 e.new11/22 )/8 (/11 # Var/13 t.new12/14 s.new13/16 e.new14/24 )/12 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
        continue;
      // closed e.new11 as range 22
      // closed e.new14 as range 24
      do {
        // </0 & CheckPattern-Flatten$3\1/4 (/7 e.KnownVars-B/30 (/36 s.Mode/38 e.Index/39 )/37 e.KnownVars-E/32 )/8 (/11 # Var/13 t.SrcPos/14 s.Mode/16 e.Index/28 )/12 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        // closed e.Index as range 28
        context[30] = 0;
        context[31] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[32] = context[26];
          context[33] = context[27];
          context[34] = 0;
          context[35] = 0;
          context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
          if( ! context[36] )
            continue;
          refalrts::bracket_pointers(context[36], context[37]);
          if( ! refalrts::repeated_stvar_left( vm, context[38], context[16], context[34], context[35] ) )
            continue;
          if( ! refalrts::repeated_evar_left( vm, context[39], context[40], context[28], context[29], context[34], context[35] ) )
            continue;
          if( ! refalrts::empty_seq( context[34], context[35] ) )
            continue;
          // closed e.KnownVars-E as range 32
          //DEBUG: t.SrcPos: 14
          //DEBUG: s.Mode: 16
          //DEBUG: e.Index: 28
          //DEBUG: e.KnownVars-B: 30
          //DEBUG: e.KnownVars-E: 32

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & CheckPattern-Flatten$3\1/4 {REMOVED TILE} (/11 # Var/13 t.SrcPos/14 s.Mode/16 e.Index/28 )/12 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.KnownVars-B/30 AsIs: (/36 AsIs: s.Mode/38 AsIs: e.Index/39 AsIs: )/37 AsIs: e.KnownVars-E/32 AsIs: )/8 } Tile{ ]] }
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[36], context[37] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[30], context[31], context[26], context[27] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckPattern-Flatten$3\1/4 (/7 e.KnownVars/26 )/8 (/11 # Var/13 t.SrcPos/14 s.Mode/16 e.Index/28 )/12 >/1
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      // closed e.KnownVars as range 26
      // closed e.Index as range 28
      //DEBUG: t.SrcPos: 14
      //DEBUG: s.Mode: 16
      //DEBUG: e.KnownVars: 26
      //DEBUG: e.Index: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CheckPattern-Flatten$3\1/4 {REMOVED TILE} (/11 # Var/13 t.SrcPos/14 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.KnownVars/26 HalfReuse: (/8 } Tile{ AsIs: s.Mode/16 AsIs: e.Index/28 AsIs: )/12 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[8], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckPattern-Flatten$3\1/4 (/7 e.KnownVars/22 )/8 (/11 # NewVar/13 t.SrcPos/14 s.NewMode/16 e.Index/24 )/12 >/1
    context[22] = context[18];
    context[23] = context[19];
    context[24] = context[20];
    context[25] = context[21];
    if( ! refalrts::ident_term( identifiers[ident_NewVar], context[13] ) )
      continue;
    // closed e.KnownVars as range 22
    // closed e.Index as range 24
    //DEBUG: t.SrcPos: 14
    //DEBUG: s.NewMode: 16
    //DEBUG: e.KnownVars: 22
    //DEBUG: e.Index: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} s.NewMode/16 {REMOVED TILE} )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPattern-Flatten$3\1$3:1/4 AsIs: (/7 } Tile{ AsIs: e.Index/24 } Tile{ HalfReuse: )/11 HalfReuse: s.NewMode16 /13 AsIs: t.SrcPos/14 } Tile{ AsIs: e.KnownVars/22 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternm_Flatten_S3L1S3B1]);
    refalrts::reinit_close_bracket(context[11]);
    refalrts::reinit_svar( context[13], context[16] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPattern-Flatten$3\1/4 (/7 e.KnownVars/18 )/8 (/11 # Symbol/13 # Name/14 t.SrcPos/16 e.Name/20 )/12 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_Name], context[14] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
      continue;
    // closed e.KnownVars as range 18
    // closed e.Name as range 20
    //DEBUG: t.SrcPos: 16
    //DEBUG: e.KnownVars: 18
    //DEBUG: e.Name: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckPattern-Flatten$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.KnownVars/18 AsIs: )/8 AsIs: (/11 AsIs: # Symbol/13 AsIs: # Name/14 AsIs: t.SrcPos/16 AsIs: e.Name/20 AsIs: )/12 } Tile{ ]] }
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPattern-Flatten$3\1/4 (/7 e.KnownVars/5 )/8 (/11 # Error/13 t.SrcPos/14 s.Type/16 e.Info/9 )/12 >/1
  if( ! refalrts::svar_term( context[16], context[16] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::ident_term( identifiers[ident_Error], context[13] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.KnownVars as range 5
  // closed e.Info as range 9
  //DEBUG: t.SrcPos: 14
  //DEBUG: s.Type: 16
  //DEBUG: e.KnownVars: 5
  //DEBUG: e.Info: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckPattern-Flatten$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.KnownVars/5 AsIs: )/8 AsIs: (/11 AsIs: # Error/13 AsIs: t.SrcPos/14 AsIs: s.Type/16 AsIs: e.Info/9 AsIs: )/12 } Tile{ ]] }
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternm_Flatten_S3L1("CheckPattern-Flatten$3\\1", COOKIE1_, COOKIE2_, func_gen_CheckPatternm_Flatten_S3L1);


static refalrts::FnResult func_CheckPatternm_Flatten(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & CheckPattern-Flatten/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPattern-Flatten/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & CheckPattern-Flatten/4 (/7 e.ScopeVars/9 )/8 e.Items-B/13 (/19 # NewVar/21 t.SrcPos/22 s.Mode/24 '_'/25 e.Index/17 )/20 e.Items-E/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.ScopeVars as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_NewVar], context[17], context[18] );
      if( ! context[21] )
        continue;
      // closed e.Items-E as range 15
      context[23] = refalrts::tvar_left( context[22], context[17], context[18] );
      if( ! context[23] )
        continue;
      if( ! refalrts::svar_left( context[24], context[17], context[18] ) )
        continue;
      context[25] = refalrts::char_left( '_', context[17], context[18] );
      if( ! context[25] )
        continue;
      // closed e.Index as range 17
      //DEBUG: e.ScopeVars: 9
      //DEBUG: e.Items-B: 13
      //DEBUG: e.Items-E: 15
      //DEBUG: t.SrcPos: 22
      //DEBUG: s.Mode: 24
      //DEBUG: e.Index: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-Flatten/4 AsIs: (/7 AsIs: e.ScopeVars/9 AsIs: )/8 AsIs: e.Items-B/13 AsIs: (/19 Reuse: # Var/21 AsIs: t.SrcPos/22 AsIs: s.Mode/24 AsIs: '_'/25 AsIs: e.Index/17 AsIs: )/20 } (/26 # Error/27 t.SrcPos/22/28 # UnnamedNewVariable/30 s.Mode/24/31 '_'/32 e.Index/17/33 )/35 Tile{ AsIs: e.Items-E/15 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[26]);
      refalrts::alloc_ident(vm, context[27], identifiers[ident_Error]);
      refalrts::copy_evar(vm, context[28], context[29], context[22], context[23]);
      refalrts::alloc_ident(vm, context[30], identifiers[ident_UnnamedNewVariable]);
      refalrts::copy_stvar(vm, context[31], context[24]);
      refalrts::alloc_char(vm, context[32], '_');
      refalrts::copy_evar(vm, context[33], context[34], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::update_ident(context[21], identifiers[ident_Var]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[35] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[26], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPattern-Flatten/4 (/7 e.ScopeVars/9 )/8 e.Items-B/13 (/19 # Var/21 t.SrcPos1/22 s.Mode1/24 e.Index/17 )/20 e.Items-M/25 (/31 # NewVar/33 t.SrcPos2/36 s.Mode2/38 e.Index/34 )/32 e.Items-E/27 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.ScopeVars as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_Var], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[23] = refalrts::tvar_left( context[22], context[17], context[18] );
      if( ! context[23] )
        continue;
      if( ! refalrts::svar_left( context[24], context[17], context[18] ) )
        continue;
      // closed e.Index as range 17
      context[25] = 0;
      context[26] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[27] = context[15];
        context[28] = context[16];
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        context[33] = refalrts::ident_left( identifiers[ident_NewVar], context[29], context[30] );
        if( ! context[33] )
          continue;
        if( ! refalrts::repeated_evar_right( vm, context[34], context[35], context[17], context[18], context[29], context[30] ) )
          continue;
        // closed e.Items-E as range 27
        context[37] = refalrts::tvar_left( context[36], context[29], context[30] );
        if( ! context[37] )
          continue;
        if( ! refalrts::svar_left( context[38], context[29], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        //DEBUG: e.ScopeVars: 9
        //DEBUG: e.Items-B: 13
        //DEBUG: t.SrcPos1: 22
        //DEBUG: s.Mode1: 24
        //DEBUG: e.Index: 17
        //DEBUG: e.Items-M: 25
        //DEBUG: e.Items-E: 27
        //DEBUG: t.SrcPos2: 36
        //DEBUG: s.Mode2: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-Flatten/4 AsIs: (/7 AsIs: e.ScopeVars/9 AsIs: )/8 AsIs: e.Items-B/13 AsIs: (/19 AsIs: # Var/21 AsIs: t.SrcPos1/22 AsIs: s.Mode1/24 AsIs: e.Index/17 AsIs: )/20 AsIs: e.Items-M/25 AsIs: (/31 Reuse: # Var/33 AsIs: t.SrcPos2/36 AsIs: s.Mode2/38 AsIs: e.Index/34 AsIs: )/32 } (/39 # Error/40 t.SrcPos2/36/41 # AlreadyBounded/43 s.Mode2/38/44 e.Index/34/45 )/47 Tile{ AsIs: e.Items-E/27 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[39]);
        refalrts::alloc_ident(vm, context[40], identifiers[ident_Error]);
        refalrts::copy_evar(vm, context[41], context[42], context[36], context[37]);
        refalrts::alloc_ident(vm, context[43], identifiers[ident_AlreadyBounded]);
        refalrts::copy_stvar(vm, context[44], context[38]);
        refalrts::copy_evar(vm, context[45], context[46], context[34], context[35]);
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::update_ident(context[33], identifiers[ident_Var]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[39], context[47] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[39], context[47] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[25], context[26], context[15], context[16] ) );
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPattern-Flatten/4 (/7 e.ScopeVars/5 )/8 e.Items/2 >/1
  // closed e.ScopeVars as range 5
  // closed e.Items as range 2
  //DEBUG: e.ScopeVars: 5
  //DEBUG: e.Items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: (/7 AsIs: e.ScopeVars/5 AsIs: )/8 } (/9 )/10 Tile{ AsIs: e.Items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckPatternm_Flatten("CheckPattern-Flatten", COOKIE1_, COOKIE2_, func_CheckPatternm_Flatten);


static refalrts::FnResult func_CheckResult(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & CheckResult/4 (/7 e.ScopeVars/5 )/8 e.Items/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.ScopeVars as range 5
  // closed e.Items as range 2
  //DEBUG: e.ScopeVars: 5
  //DEBUG: e.Items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@15/4 AsIs: (/7 AsIs: e.ScopeVars/5 AsIs: )/8 AsIs: e.Items/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckResult("CheckResult", COOKIE1_, COOKIE2_, func_CheckResult);


static refalrts::FnResult func_CheckValidUsings(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & CheckValidUsings/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckValidUsings/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & CheckValidUsings/4 (/7 e.new8/9 )/8 (/15 s.new3/17 t.new4/18 t.new5/20 e.new6/13 )/16 e.new7/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.new8 as range 9
    // closed e.new7 as range 11
    if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
      continue;
    context[19] = refalrts::tvar_left( context[18], context[13], context[14] );
    if( ! context[19] )
      continue;
    context[21] = refalrts::tvar_left( context[20], context[13], context[14] );
    if( ! context[21] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & CheckValidUsings/4 (/7 e.new12/22 )/8 (/15 # Symbol/17 # Name/18 t.new10/20 e.new11/24 )/16 e.new9/26 >/1
      context[22] = context[9];
      context[23] = context[10];
      context[24] = context[13];
      context[25] = context[14];
      context[26] = context[11];
      context[27] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Name], context[18] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[17] ) )
        continue;
      // closed e.new12 as range 22
      // closed e.new11 as range 24
      // closed e.new9 as range 26
      do {
        // </0 & CheckValidUsings/4 (/7 e.DeclarationsAndErrors-B/34 (/40 # Declare/42 t.SrcPos/45 s.ScopeClass/47 e.Name/43 )/41 e.DeclarationsAndErrors-E/36 )/8 (/15 # Symbol/17 # Name/18 t.SrcPosName/20 e.Name/30 )/16 e.NameRefsAndErrors/32 >/1
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        // closed e.Name as range 30
        // closed e.NameRefsAndErrors as range 32
        context[34] = 0;
        context[35] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[36] = context[28];
          context[37] = context[29];
          context[38] = 0;
          context[39] = 0;
          context[40] = refalrts::brackets_left( context[38], context[39], context[36], context[37] );
          if( ! context[40] )
            continue;
          refalrts::bracket_pointers(context[40], context[41]);
          context[42] = refalrts::ident_left( identifiers[ident_Declare], context[38], context[39] );
          if( ! context[42] )
            continue;
          if( ! refalrts::repeated_evar_right( vm, context[43], context[44], context[30], context[31], context[38], context[39] ) )
            continue;
          // closed e.DeclarationsAndErrors-E as range 36
          context[46] = refalrts::tvar_left( context[45], context[38], context[39] );
          if( ! context[46] )
            continue;
          if( ! refalrts::svar_left( context[47], context[38], context[39] ) )
            continue;
          if( ! refalrts::empty_seq( context[38], context[39] ) )
            continue;
          //DEBUG: t.SrcPosName: 20
          //DEBUG: e.Name: 30
          //DEBUG: e.NameRefsAndErrors: 32
          //DEBUG: e.DeclarationsAndErrors-B: 34
          //DEBUG: e.DeclarationsAndErrors-E: 36
          //DEBUG: t.SrcPos: 45
          //DEBUG: s.ScopeClass: 47

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/15 # Symbol/17 # Name/18 t.SrcPosName/20 e.Name/30 )/16 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckValidUsings/4 AsIs: (/7 AsIs: e.DeclarationsAndErrors-B/34 AsIs: (/40 AsIs: # Declare/42 AsIs: t.SrcPos/45 AsIs: s.ScopeClass/47 AsIs: e.Name/43 AsIs: )/41 AsIs: e.DeclarationsAndErrors-E/36 AsIs: )/8 } Tile{ AsIs: e.NameRefsAndErrors/32 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[40], context[41] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[32], context[33] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[34], context[35], context[28], context[29] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckValidUsings/4 (/7 e.DeclarationsAndErrors-B/34 (/40 # Define/42 t.SrcPos/45 s.ScopeClass/47 e.Name/43 )/41 e.DeclarationsAndErrors-E/36 )/8 (/15 # Symbol/17 # Name/18 t.SrcPosName/20 e.Name/30 )/16 e.NameRefsAndErrors/32 >/1
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        // closed e.Name as range 30
        // closed e.NameRefsAndErrors as range 32
        context[34] = 0;
        context[35] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[36] = context[28];
          context[37] = context[29];
          context[38] = 0;
          context[39] = 0;
          context[40] = refalrts::brackets_left( context[38], context[39], context[36], context[37] );
          if( ! context[40] )
            continue;
          refalrts::bracket_pointers(context[40], context[41]);
          context[42] = refalrts::ident_left( identifiers[ident_Define], context[38], context[39] );
          if( ! context[42] )
            continue;
          if( ! refalrts::repeated_evar_right( vm, context[43], context[44], context[30], context[31], context[38], context[39] ) )
            continue;
          // closed e.DeclarationsAndErrors-E as range 36
          context[46] = refalrts::tvar_left( context[45], context[38], context[39] );
          if( ! context[46] )
            continue;
          if( ! refalrts::svar_left( context[47], context[38], context[39] ) )
            continue;
          if( ! refalrts::empty_seq( context[38], context[39] ) )
            continue;
          //DEBUG: t.SrcPosName: 20
          //DEBUG: e.Name: 30
          //DEBUG: e.NameRefsAndErrors: 32
          //DEBUG: e.DeclarationsAndErrors-B: 34
          //DEBUG: e.DeclarationsAndErrors-E: 36
          //DEBUG: t.SrcPos: 45
          //DEBUG: s.ScopeClass: 47

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/15 # Symbol/17 # Name/18 t.SrcPosName/20 e.Name/30 )/16 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckValidUsings/4 AsIs: (/7 AsIs: e.DeclarationsAndErrors-B/34 AsIs: (/40 AsIs: # Define/42 AsIs: t.SrcPos/45 AsIs: s.ScopeClass/47 AsIs: e.Name/43 AsIs: )/41 AsIs: e.DeclarationsAndErrors-E/36 AsIs: )/8 } Tile{ AsIs: e.NameRefsAndErrors/32 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[40], context[41] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[32], context[33] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[34], context[35], context[28], context[29] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckValidUsings/4 (/7 e.DeclarationsAndErrors/28 )/8 (/15 # Symbol/17 # Name/18 t.SrcPos/20 e.Name/30 )/16 e.NameRefsAndErrors/32 >/1
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      // closed e.DeclarationsAndErrors as range 28
      // closed e.Name as range 30
      // closed e.NameRefsAndErrors as range 32
      //DEBUG: t.SrcPos: 20
      //DEBUG: e.DeclarationsAndErrors: 28
      //DEBUG: e.Name: 30
      //DEBUG: e.NameRefsAndErrors: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckValidUsings/4 AsIs: (/7 AsIs: e.DeclarationsAndErrors/28 HalfReuse: (/8 HalfReuse: # Error/15 } Tile{ AsIs: t.SrcPos/20 } Tile{ Reuse: # NotDefined/18 } Tile{ AsIs: e.Name/30 } Tile{ HalfReuse: )/17 } Tile{ AsIs: )/16 AsIs: e.NameRefsAndErrors/32 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[15], identifiers[ident_Error]);
      refalrts::update_ident(context[18], identifiers[ident_NotDefined]);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::link_brackets( context[8], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckValidUsings/4 (/7 e.DeclarationsAndErrors/22 )/8 (/15 # Error/17 t.SrcPos/18 s.Type/20 e.Info/24 )/16 e.NameRefsAndErrors/26 >/1
      context[22] = context[9];
      context[23] = context[10];
      context[24] = context[13];
      context[25] = context[14];
      context[26] = context[11];
      context[27] = context[12];
      if( ! refalrts::svar_term( context[20], context[20] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Error], context[17] ) )
        continue;
      // closed e.DeclarationsAndErrors as range 22
      // closed e.Info as range 24
      // closed e.NameRefsAndErrors as range 26
      //DEBUG: t.SrcPos: 18
      //DEBUG: s.Type: 20
      //DEBUG: e.DeclarationsAndErrors: 22
      //DEBUG: e.Info: 24
      //DEBUG: e.NameRefsAndErrors: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckValidUsings/4 AsIs: (/7 } Tile{ AsIs: e.DeclarationsAndErrors/22 } Tile{ AsIs: (/15 AsIs: # Error/17 AsIs: t.SrcPos/18 AsIs: s.Type/20 AsIs: e.Info/24 AsIs: )/16 } Tile{ AsIs: )/8 } Tile{ AsIs: e.NameRefsAndErrors/26 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckValidUsings/4 (/7 e.DeclarationsAndErrors/22 )/8 (/15 # Warning/17 s.WarningId/18 t.SrcPos/20 s.Type/28 e.Info/24 )/16 e.NameRefsAndErrors/26 >/1
    context[22] = context[9];
    context[23] = context[10];
    context[24] = context[13];
    context[25] = context[14];
    context[26] = context[11];
    context[27] = context[12];
    if( ! refalrts::svar_term( context[18], context[18] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Warning], context[17] ) )
      continue;
    // closed e.DeclarationsAndErrors as range 22
    // closed e.NameRefsAndErrors as range 26
    if( ! refalrts::svar_left( context[28], context[24], context[25] ) )
      continue;
    // closed e.Info as range 24
    //DEBUG: t.SrcPos: 20
    //DEBUG: s.WarningId: 18
    //DEBUG: e.DeclarationsAndErrors: 22
    //DEBUG: e.NameRefsAndErrors: 26
    //DEBUG: s.Type: 28
    //DEBUG: e.Info: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckValidUsings/4 AsIs: (/7 } Tile{ AsIs: e.DeclarationsAndErrors/22 } Tile{ AsIs: (/15 AsIs: # Warning/17 AsIs: s.WarningId/18 AsIs: t.SrcPos/20 AsIs: s.Type/28 AsIs: e.Info/24 AsIs: )/16 } Tile{ AsIs: )/8 } Tile{ AsIs: e.NameRefsAndErrors/26 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckValidUsings/4 (/7 e.DeclarationsAndErrors/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.DeclarationsAndErrors as range 5
  //DEBUG: e.DeclarationsAndErrors: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@16/4 } Tile{ AsIs: e.DeclarationsAndErrors/5 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckValidUsings("CheckValidUsings", COOKIE1_, COOKIE2_, func_CheckValidUsings);


static refalrts::FnResult func_gen_CheckVariableRepeating_D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & CheckVariableRepeating*1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckVariableRepeating*1/4 (/7 e.new1/5 )/8 t.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckVariableRepeating*1/4 (/7 e.Vars-B/19 (/25 s.Mode/27 e.Index/28 )/26 e.Vars-E/21 )/8 (/9 # Var/15 t.SrcPos/16 s.Mode/18 e.Index/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    context[15] = refalrts::ident_left( identifiers[ident_Var], context[13], context[14] );
    if( ! context[15] )
      continue;
    context[17] = refalrts::tvar_left( context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
      continue;
    // closed e.Index as range 13
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[11];
      context[22] = context[12];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::repeated_stvar_left( vm, context[27], context[18], context[23], context[24] ) )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[28], context[29], context[13], context[14], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Vars-E as range 21
      //DEBUG: t.SrcPos: 16
      //DEBUG: s.Mode: 18
      //DEBUG: e.Index: 13
      //DEBUG: e.Vars-B: 19
      //DEBUG: e.Vars-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CheckVariableRepeating*1/4 (/7 e.Vars-B/19 {REMOVED TILE} e.Vars-E/21 {REMOVED TILE} s.Mode/18 e.Index/13 )/10 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 HalfReuse: # Warning/9 Reuse: # repeated/15 AsIs: t.SrcPos/16 } Tile{ HalfReuse: # RepeatedVariable/25 AsIs: s.Mode/27 AsIs: e.Index/28 AsIs: )/26 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[9], identifiers[ident_Warning]);
      refalrts::update_ident(context[15], identifiers[ident_repeated]);
      refalrts::reinit_ident(context[25], identifiers[ident_RepeatedVariable]);
      refalrts::link_brackets( context[8], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[8], context[17] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckVariableRepeating*1/4 (/7 e.ScopeVars/5 )/8 t.OtherVariable/9 >/1
  // closed e.ScopeVars as range 5
  //DEBUG: t.OtherVariable: 9
  //DEBUG: e.ScopeVars: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckVariableRepeating*1/4 (/7 e.ScopeVars/5 )/8 t.OtherVariable/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckVariableRepeating_D1("CheckVariableRepeating*1", COOKIE1_, COOKIE2_, func_gen_CheckVariableRepeating_D1);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Reduce_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Reduce@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@1/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@1/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@1/4 t.new6/5 (/9 s.new7/15 t.new8/16 e.new9/13 )/10 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
        continue;
      // closed e.new10 as range 11
      if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      // closed e.new9 as range 13
      do {
        // </0 & Reduce@1/4 t.Acc/5 (/9 # Error/15 t.0/16 e.1/18 )/10 e.Tail/20 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[11];
        context[21] = context[12];
        if( ! refalrts::ident_term( identifiers[ident_Error], context[15] ) )
          continue;
        // closed e.1 as range 18
        // closed e.Tail as range 20
        //DEBUG: t.Acc: 5
        //DEBUG: t.0: 16
        //DEBUG: e.1: 18
        //DEBUG: e.Tail: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@1/4 } Tile{ AsIs: (/9 } Tile{ AsIs: e.Tail/20 } Tile{ AsIs: )/10 } </22 & EL-AddErrorAt/23 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.0/16 } Tile{ HalfReuse: </15 } & PrepareMessage/24 Tile{ AsIs: e.1/18 } >/25 >/26 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_name(vm, context[24], functions[efunc_PrepareMessage]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z1]);
        refalrts::reinit_open_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_elem( res, context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@1/4 t.Acc/5 (/9 # Warning/15 s.WarningId/16 t.1/22 e.2/18 )/10 e.Tail/20 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[11];
      context[21] = context[12];
      if( ! refalrts::svar_term( context[16], context[16] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Warning], context[15] ) )
        continue;
      // closed e.Tail as range 20
      context[23] = refalrts::tvar_left( context[22], context[18], context[19] );
      if( ! context[23] )
        continue;
      // closed e.2 as range 18
      //DEBUG: t.Acc: 5
      //DEBUG: s.WarningId: 16
      //DEBUG: e.Tail: 20
      //DEBUG: t.1: 22
      //DEBUG: e.2: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.WarningId/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </24 Tile{ HalfReuse: & Reduce$1=1@1/15 } (/25 Tile{ AsIs: e.Tail/20 } Tile{ AsIs: )/10 } Tile{ AsIs: </0 Reuse: & EL-AddWarningAt/4 AsIs: t.Acc/5 HalfReuse: s.WarningId16 /9 } Tile{ AsIs: t.1/22 } </26 & PrepareMessage/27 Tile{ AsIs: e.2/18 } >/28 >/29 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_PrepareMessage]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Reduce_S1A1Z1]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddWarningAt]);
      refalrts::reinit_svar( context[9], context[16] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[25], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@1/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1@1/14 (/15 Tile{ AsIs: e.Tail/11 } )/16 Tile{ AsIs: </0 Reuse: & CheckProgram\1*2/4 AsIs: t.Acc/5 AsIs: t.Next/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1Z1]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckProgram_L1D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@1/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@1/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@1/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & Reduce@0/0 Reuse: & CheckProgram\1@0/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckProgram_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z1("Reduce@1", COOKIE1_, COOKIE2_, func_gen_Reduce_Z1);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Map@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@1/4 (/7 e.new3/11 )/8 e.new4/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new3 as range 11
      // closed e.new4 as range 9
      do {
        // </0 & Map@1/4 (/7 s.new5/17 e.new6/13 )/8 e.new7/15 >/1
        context[13] = context[11];
        context[14] = context[12];
        context[15] = context[9];
        context[16] = context[10];
        // closed e.new7 as range 15
        if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
          continue;
        // closed e.new6 as range 13
        do {
          // </0 & Map@1/4 (/7 # Sentences/17 e.0/18 )/8 e.Tail/20 >/1
          context[18] = context[13];
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[17] ) )
            continue;
          // closed e.0 as range 18
          // closed e.Tail as range 20
          //DEBUG: e.0: 18
          //DEBUG: e.Tail: 20

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceRec@1/4 } Tile{ AsIs: e.0/18 } Tile{ HalfReuse: >/7 HalfReuse: </17 } Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail/20 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceRec_Z1]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[17] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[7], context[17] );
          res = refalrts::splice_evar( res, context[18], context[19] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@1/4 (/7 # NativeBody/17 e.0/18 )/8 e.Tail/20 >/1
        context[18] = context[13];
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[17] ) )
          continue;
        // closed e.0 as range 18
        // closed e.Tail as range 20
        //DEBUG: e.0: 18
        //DEBUG: e.Tail: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & Map@1/4 (/7 # NativeBody/17 e.0/18 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail/20 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@1/4 (/7 e./13 )/8 e.Tail/15 >/1
      context[13] = context[11];
      context[14] = context[12];
      context[15] = context[9];
      context[16] = context[10];
      // closed e. as range 13
      // closed e.Tail as range 15
      //DEBUG: e.: 13
      //DEBUG: e.Tail: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckFunctionBodyRec*2/4 AsIs: (/7 } )/17 Tile{ AsIs: e./13 } >/18 </19 Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail/15 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_CheckFunctionBodyRec_D2]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckFunctionBody*1/4 AsIs: t.Next/7 } >/11 </12 & Map@1/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckFunctionBody_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CheckFunctionBody@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckFunctionBody_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@1/4 (/5 e.new8/21 )/6 (/9 e.new12/17 )/10 (/15 s.new9/25 e.new10/23 )/16 e.new11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new12 as range 17
      // closed e.new11 as range 19
      if( ! refalrts::svar_left( context[25], context[23], context[24] ) )
        continue;
      // closed e.new10 as range 23
      do {
        // </0 & DoMapAccum@1/4 (/5 e.new13/26 )/6 (/9 e.new18/28 )/10 (/15 s.new14/25 t.new15/34 e.new16/30 )/16 e.new17/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[19];
        context[33] = context[20];
        // closed e.new13 as range 26
        // closed e.new18 as range 28
        // closed e.new17 as range 32
        context[35] = refalrts::tvar_left( context[34], context[30], context[31] );
        if( ! context[35] )
          continue;
        // closed e.new16 as range 30
        do {
          // </0 & DoMapAccum@1/4 (/5 e.new19/36 )/6 (/9 e.new25/38 )/10 (/15 s.new20/25 t.new21/34 s.new22/44 e.new23/40 )/16 e.new24/42 >/1
          context[36] = context[26];
          context[37] = context[27];
          context[38] = context[28];
          context[39] = context[29];
          context[40] = context[30];
          context[41] = context[31];
          context[42] = context[32];
          context[43] = context[33];
          // closed e.new19 as range 36
          // closed e.new25 as range 38
          // closed e.new24 as range 42
          if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
            continue;
          // closed e.new23 as range 40
          do {
            // </0 & DoMapAccum@1/4 (/5 e.new26/45 )/6 (/9 e.new33/47 )/10 (/15 # Function/25 t.new27/34 s.new28/44 (/55 e.new29/53 )/56 s.new30/57 e.new31/49 )/16 e.new32/51 >/1
            context[45] = context[36];
            context[46] = context[37];
            context[47] = context[38];
            context[48] = context[39];
            context[49] = context[40];
            context[50] = context[41];
            context[51] = context[42];
            context[52] = context[43];
            if( ! refalrts::ident_term( identifiers[ident_Function], context[25] ) )
              continue;
            context[53] = 0;
            context[54] = 0;
            context[55] = refalrts::brackets_left( context[53], context[54], context[49], context[50] );
            if( ! context[55] )
              continue;
            refalrts::bracket_pointers(context[55], context[56]);
            // closed e.new26 as range 45
            // closed e.new33 as range 47
            // closed e.new29 as range 53
            // closed e.new32 as range 51
            if( ! refalrts::svar_left( context[57], context[49], context[50] ) )
              continue;
            // closed e.new31 as range 49
            do {
              // </0 & DoMapAccum@1/4 (/5 e./58 )/6 (/9 e.Scanned/60 )/10 (/15 # Function/25 t.0/34 s.ScopeClass/44 (/55 e.5/62 )/56 # Sentences/57 e.6/64 )/16 e.Tail/66 >/1
              context[58] = context[45];
              context[59] = context[46];
              context[60] = context[47];
              context[61] = context[48];
              context[62] = context[53];
              context[63] = context[54];
              context[64] = context[49];
              context[65] = context[50];
              context[66] = context[51];
              context[67] = context[52];
              if( ! refalrts::ident_term( identifiers[ident_Sentences], context[57] ) )
                continue;
              // closed e. as range 58
              // closed e.Scanned as range 60
              // closed e.5 as range 62
              // closed e.6 as range 64
              // closed e.Tail as range 66
              //DEBUG: t.0: 34
              //DEBUG: s.ScopeClass: 44
              //DEBUG: e.: 58
              //DEBUG: e.Scanned: 60
              //DEBUG: e.5: 62
              //DEBUG: e.6: 64
              //DEBUG: e.Tail: 66

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ScopeClass/44 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e./58 HalfReuse: (/6 HalfReuse: # Define/9 } Tile{ AsIs: t.0/34 } Tile{ HalfReuse: s.ScopeClass44 /55 AsIs: e.5/62 AsIs: )/56 HalfReuse: )/57 } (/68 Tile{ AsIs: e.Scanned/60 } Tile{ AsIs: (/15 Reuse: # Sentences/25 } Tile{ AsIs: e.6/64 } Tile{ AsIs: )/10 } Tile{ AsIs: )/16 AsIs: e.Tail/66 AsIs: >/1 ]] }
              refalrts::alloc_open_bracket(vm, context[68]);
              refalrts::reinit_open_bracket(context[6]);
              refalrts::reinit_ident(context[9], identifiers[ident_Define]);
              refalrts::reinit_svar( context[55], context[44] );
              refalrts::reinit_close_bracket(context[57]);
              refalrts::update_ident(context[25], identifiers[ident_Sentences]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[68], context[16] );
              refalrts::link_brackets( context[15], context[10] );
              refalrts::link_brackets( context[5], context[57] );
              refalrts::link_brackets( context[6], context[56] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[16];
              res = refalrts::splice_elem( res, context[10] );
              res = refalrts::splice_evar( res, context[64], context[65] );
              res = refalrts::splice_evar( res, context[15], context[25] );
              res = refalrts::splice_evar( res, context[60], context[61] );
              res = refalrts::splice_elem( res, context[68] );
              res = refalrts::splice_evar( res, context[55], context[57] );
              res = refalrts::splice_evar( res, context[34], context[35] );
              refalrts::splice_to_freelist_open( vm, context[9], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & DoMapAccum@1/4 (/5 e./58 )/6 (/9 e.Scanned/60 )/10 (/15 # Function/25 t.0/34 s.ScopeClass/44 (/55 e.5/62 )/56 # NativeBody/57 e.6/64 )/16 e.Tail/66 >/1
            context[58] = context[45];
            context[59] = context[46];
            context[60] = context[47];
            context[61] = context[48];
            context[62] = context[53];
            context[63] = context[54];
            context[64] = context[49];
            context[65] = context[50];
            context[66] = context[51];
            context[67] = context[52];
            if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[57] ) )
              continue;
            // closed e. as range 58
            // closed e.Scanned as range 60
            // closed e.5 as range 62
            // closed e.6 as range 64
            // closed e.Tail as range 66
            //DEBUG: t.0: 34
            //DEBUG: s.ScopeClass: 44
            //DEBUG: e.: 58
            //DEBUG: e.Scanned: 60
            //DEBUG: e.5: 62
            //DEBUG: e.6: 64
            //DEBUG: e.Tail: 66

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e./58 HalfReuse: (/6 HalfReuse: # Define/9 } Tile{ AsIs: t.0/34 AsIs: s.ScopeClass/44 } e.5/62/68 Tile{ AsIs: )/10 AsIs: (/15 } Tile{ HalfReuse: # NativeBody/55 AsIs: e.5/62 AsIs: )/56 HalfReuse: )/57 } (/70 Tile{ AsIs: e.Scanned/60 } (/71 Tile{ Reuse: # NativeBody/25 } Tile{ AsIs: e.6/64 } )/72 Tile{ AsIs: )/16 AsIs: e.Tail/66 AsIs: >/1 ]] }
            refalrts::copy_evar(vm, context[68], context[69], context[62], context[63]);
            refalrts::alloc_open_bracket(vm, context[70]);
            refalrts::alloc_open_bracket(vm, context[71]);
            refalrts::alloc_close_bracket(vm, context[72]);
            refalrts::reinit_open_bracket(context[6]);
            refalrts::reinit_ident(context[9], identifiers[ident_Define]);
            refalrts::reinit_ident(context[55], identifiers[ident_NativeBody]);
            refalrts::reinit_close_bracket(context[57]);
            refalrts::update_ident(context[25], identifiers[ident_NativeBody]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[70], context[16] );
            refalrts::link_brackets( context[71], context[72] );
            refalrts::link_brackets( context[5], context[57] );
            refalrts::link_brackets( context[15], context[56] );
            refalrts::link_brackets( context[6], context[10] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[16];
            res = refalrts::splice_elem( res, context[72] );
            res = refalrts::splice_evar( res, context[64], context[65] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_elem( res, context[71] );
            res = refalrts::splice_evar( res, context[60], context[61] );
            res = refalrts::splice_elem( res, context[70] );
            res = refalrts::splice_evar( res, context[55], context[57] );
            res = refalrts::splice_evar( res, context[10], context[15] );
            res = refalrts::splice_evar( res, context[68], context[69] );
            res = refalrts::splice_evar( res, context[34], context[44] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@1/4 (/5 e./45 )/6 (/9 e.Scanned/47 )/10 (/15 # Swap/25 t.0/34 s.ScopeClass/44 e.3/49 )/16 e.Tail/51 >/1
            context[45] = context[36];
            context[46] = context[37];
            context[47] = context[38];
            context[48] = context[39];
            context[49] = context[40];
            context[50] = context[41];
            context[51] = context[42];
            context[52] = context[43];
            if( ! refalrts::ident_term( identifiers[ident_Swap], context[25] ) )
              continue;
            // closed e. as range 45
            // closed e.Scanned as range 47
            // closed e.3 as range 49
            // closed e.Tail as range 51
            //DEBUG: t.0: 34
            //DEBUG: s.ScopeClass: 44
            //DEBUG: e.: 45
            //DEBUG: e.Scanned: 47
            //DEBUG: e.3: 49
            //DEBUG: e.Tail: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 } Tile{ AsIs: e./45 } Tile{ AsIs: (/15 Reuse: # Define/25 AsIs: t.0/34 AsIs: s.ScopeClass/44 AsIs: e.3/49 AsIs: )/16 } Tile{ AsIs: )/6 AsIs: (/9 AsIs: e.Scanned/47 AsIs: )/10 } Tile{ AsIs: e.Tail/51 } Tile{ AsIs: >/1 ]] }
            refalrts::update_ident(context[25], identifiers[ident_Define]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::link_brackets( context[5], context[6] );
            refalrts::link_brackets( context[15], context[16] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[51], context[52] );
            res = refalrts::splice_evar( res, context[6], context[10] );
            res = refalrts::splice_evar( res, context[15], context[16] );
            res = refalrts::splice_evar( res, context[45], context[46] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@1/4 (/5 e./45 )/6 (/9 e.Scanned/47 )/10 (/15 # Enum/25 t.0/34 s.ScopeClass/44 e.3/49 )/16 e.Tail/51 >/1
            context[45] = context[36];
            context[46] = context[37];
            context[47] = context[38];
            context[48] = context[39];
            context[49] = context[40];
            context[50] = context[41];
            context[51] = context[42];
            context[52] = context[43];
            if( ! refalrts::ident_term( identifiers[ident_Enum], context[25] ) )
              continue;
            // closed e. as range 45
            // closed e.Scanned as range 47
            // closed e.3 as range 49
            // closed e.Tail as range 51
            //DEBUG: t.0: 34
            //DEBUG: s.ScopeClass: 44
            //DEBUG: e.: 45
            //DEBUG: e.Scanned: 47
            //DEBUG: e.3: 49
            //DEBUG: e.Tail: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 } Tile{ AsIs: e./45 } Tile{ AsIs: (/15 Reuse: # Define/25 AsIs: t.0/34 AsIs: s.ScopeClass/44 AsIs: e.3/49 AsIs: )/16 } Tile{ AsIs: )/6 AsIs: (/9 AsIs: e.Scanned/47 AsIs: )/10 } Tile{ AsIs: e.Tail/51 } Tile{ AsIs: >/1 ]] }
            refalrts::update_ident(context[25], identifiers[ident_Define]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::link_brackets( context[5], context[6] );
            refalrts::link_brackets( context[15], context[16] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[51], context[52] );
            res = refalrts::splice_evar( res, context[6], context[10] );
            res = refalrts::splice_evar( res, context[15], context[16] );
            res = refalrts::splice_evar( res, context[45], context[46] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@1/4 (/5 e./45 )/6 (/9 e.Scanned/47 )/10 (/15 # Meta/25 t.0/34 s.ScopeClass/44 e.3/49 )/16 e.Tail/51 >/1
            context[45] = context[36];
            context[46] = context[37];
            context[47] = context[38];
            context[48] = context[39];
            context[49] = context[40];
            context[50] = context[41];
            context[51] = context[42];
            context[52] = context[43];
            if( ! refalrts::ident_term( identifiers[ident_Meta], context[25] ) )
              continue;
            // closed e. as range 45
            // closed e.Scanned as range 47
            // closed e.3 as range 49
            // closed e.Tail as range 51
            //DEBUG: t.0: 34
            //DEBUG: s.ScopeClass: 44
            //DEBUG: e.: 45
            //DEBUG: e.Scanned: 47
            //DEBUG: e.3: 49
            //DEBUG: e.Tail: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 } Tile{ AsIs: e./45 } Tile{ AsIs: (/15 Reuse: # Define/25 AsIs: t.0/34 AsIs: s.ScopeClass/44 AsIs: e.3/49 AsIs: )/16 } (/53 # Declare/54 t.0/34/55 # GN-Entry/57"__Meta_"/58 e.3/49/60 )/62 (/63 # Declare/64 t.0/34/65 # GN-Entry/67"__Step-Drop"/68 )/70 Tile{ AsIs: )/6 AsIs: (/9 AsIs: e.Scanned/47 AsIs: )/10 } Tile{ AsIs: e.Tail/51 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_bracket(vm, context[53]);
            refalrts::alloc_ident(vm, context[54], identifiers[ident_Declare]);
            refalrts::copy_evar(vm, context[55], context[56], context[34], context[35]);
            refalrts::alloc_ident(vm, context[57], identifiers[ident_GNm_Entry]);
            refalrts::alloc_chars(vm, context[58], context[59], "__Meta_", 7);
            refalrts::copy_evar(vm, context[60], context[61], context[49], context[50]);
            refalrts::alloc_close_bracket(vm, context[62]);
            refalrts::alloc_open_bracket(vm, context[63]);
            refalrts::alloc_ident(vm, context[64], identifiers[ident_Declare]);
            refalrts::copy_evar(vm, context[65], context[66], context[34], context[35]);
            refalrts::alloc_ident(vm, context[67], identifiers[ident_GNm_Entry]);
            refalrts::alloc_chars(vm, context[68], context[69], "__Step-Drop", 11);
            refalrts::alloc_close_bracket(vm, context[70]);
            refalrts::update_ident(context[25], identifiers[ident_Define]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::link_brackets( context[5], context[6] );
            refalrts::link_brackets( context[63], context[70] );
            refalrts::link_brackets( context[53], context[62] );
            refalrts::link_brackets( context[15], context[16] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[51], context[52] );
            res = refalrts::splice_evar( res, context[6], context[10] );
            res = refalrts::splice_evar( res, context[53], context[70] );
            res = refalrts::splice_evar( res, context[15], context[16] );
            res = refalrts::splice_evar( res, context[45], context[46] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@1/4 (/5 e./45 )/6 (/9 e.Scanned/47 )/10 (/15 # Declaration/25 t.0/34 s.ScopeClass/44 e.3/49 )/16 e.Tail/51 >/1
            context[45] = context[36];
            context[46] = context[37];
            context[47] = context[38];
            context[48] = context[39];
            context[49] = context[40];
            context[50] = context[41];
            context[51] = context[42];
            context[52] = context[43];
            if( ! refalrts::ident_term( identifiers[ident_Declaration], context[25] ) )
              continue;
            // closed e. as range 45
            // closed e.Scanned as range 47
            // closed e.3 as range 49
            // closed e.Tail as range 51
            //DEBUG: t.0: 34
            //DEBUG: s.ScopeClass: 44
            //DEBUG: e.: 45
            //DEBUG: e.Scanned: 47
            //DEBUG: e.3: 49
            //DEBUG: e.Tail: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 } Tile{ AsIs: e./45 } Tile{ AsIs: (/15 Reuse: # Declare/25 AsIs: t.0/34 AsIs: s.ScopeClass/44 AsIs: e.3/49 AsIs: )/16 } Tile{ AsIs: )/6 AsIs: (/9 AsIs: e.Scanned/47 AsIs: )/10 } Tile{ AsIs: e.Tail/51 } Tile{ AsIs: >/1 ]] }
            refalrts::update_ident(context[25], identifiers[ident_Declare]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::link_brackets( context[5], context[6] );
            refalrts::link_brackets( context[15], context[16] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[51], context[52] );
            res = refalrts::splice_evar( res, context[6], context[10] );
            res = refalrts::splice_evar( res, context[15], context[16] );
            res = refalrts::splice_evar( res, context[45], context[46] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@1/4 (/5 e./45 )/6 (/9 e.Scanned/47 )/10 (/15 # Entry/25 t.0/34 # GN-Entry/44 e.3/49 )/16 e.Tail/51 >/1
            context[45] = context[36];
            context[46] = context[37];
            context[47] = context[38];
            context[48] = context[39];
            context[49] = context[40];
            context[50] = context[41];
            context[51] = context[42];
            context[52] = context[43];
            if( ! refalrts::ident_term( identifiers[ident_Entry], context[25] ) )
              continue;
            if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[44] ) )
              continue;
            // closed e. as range 45
            // closed e.Scanned as range 47
            // closed e.3 as range 49
            // closed e.Tail as range 51
            //DEBUG: t.0: 34
            //DEBUG: e.: 45
            //DEBUG: e.Scanned: 47
            //DEBUG: e.3: 49
            //DEBUG: e.Tail: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Entry/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e./45 HalfReuse: (/6 HalfReuse: # Entry/9 } Tile{ AsIs: t.0/34 } Tile{ AsIs: e.3/49 } Tile{ HalfReuse: )/44 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Scanned/47 } Tile{ AsIs: )/16 AsIs: e.Tail/51 AsIs: >/1 ]] }
            refalrts::reinit_open_bracket(context[6]);
            refalrts::reinit_ident(context[9], identifiers[ident_Entry]);
            refalrts::reinit_close_bracket(context[44]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[15], context[16] );
            refalrts::link_brackets( context[5], context[10] );
            refalrts::link_brackets( context[6], context[44] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[16];
            res = refalrts::splice_evar( res, context[47], context[48] );
            res = refalrts::splice_evar( res, context[10], context[15] );
            res = refalrts::splice_elem( res, context[44] );
            res = refalrts::splice_evar( res, context[49], context[50] );
            res = refalrts::splice_evar( res, context[34], context[35] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@1/4 (/5 e./45 )/6 (/9 e.Scanned/47 )/10 (/15 # Inline/25 t.0/34 s.ScopeClass/44 e.3/49 )/16 e.Tail/51 >/1
            context[45] = context[36];
            context[46] = context[37];
            context[47] = context[38];
            context[48] = context[39];
            context[49] = context[40];
            context[50] = context[41];
            context[51] = context[42];
            context[52] = context[43];
            if( ! refalrts::ident_term( identifiers[ident_Inline], context[25] ) )
              continue;
            // closed e. as range 45
            // closed e.Scanned as range 47
            // closed e.3 as range 49
            // closed e.Tail as range 51
            //DEBUG: t.0: 34
            //DEBUG: s.ScopeClass: 44
            //DEBUG: e.: 45
            //DEBUG: e.Scanned: 47
            //DEBUG: e.3: 49
            //DEBUG: e.Tail: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ScopeClass/44 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e./45 HalfReuse: (/6 HalfReuse: # Inline/9 } Tile{ AsIs: t.0/34 } Tile{ AsIs: e.3/49 } Tile{ HalfReuse: )/25 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Scanned/47 } Tile{ AsIs: )/16 AsIs: e.Tail/51 AsIs: >/1 ]] }
            refalrts::reinit_open_bracket(context[6]);
            refalrts::reinit_ident(context[9], identifiers[ident_Inline]);
            refalrts::reinit_close_bracket(context[25]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[15], context[16] );
            refalrts::link_brackets( context[5], context[10] );
            refalrts::link_brackets( context[6], context[25] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[16];
            res = refalrts::splice_evar( res, context[47], context[48] );
            res = refalrts::splice_evar( res, context[10], context[15] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[49], context[50] );
            res = refalrts::splice_evar( res, context[34], context[35] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoMapAccum@1/4 (/5 e./45 )/6 (/9 e.Scanned/47 )/10 (/15 # Drive/25 t.0/34 s.ScopeClass/44 e.3/49 )/16 e.Tail/51 >/1
            context[45] = context[36];
            context[46] = context[37];
            context[47] = context[38];
            context[48] = context[39];
            context[49] = context[40];
            context[50] = context[41];
            context[51] = context[42];
            context[52] = context[43];
            if( ! refalrts::ident_term( identifiers[ident_Drive], context[25] ) )
              continue;
            // closed e. as range 45
            // closed e.Scanned as range 47
            // closed e.3 as range 49
            // closed e.Tail as range 51
            //DEBUG: t.0: 34
            //DEBUG: s.ScopeClass: 44
            //DEBUG: e.: 45
            //DEBUG: e.Scanned: 47
            //DEBUG: e.3: 49
            //DEBUG: e.Tail: 51

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ScopeClass/44 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e./45 HalfReuse: (/6 HalfReuse: # Drive/9 } Tile{ AsIs: t.0/34 } Tile{ AsIs: e.3/49 } Tile{ HalfReuse: )/25 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Scanned/47 } Tile{ AsIs: )/16 AsIs: e.Tail/51 AsIs: >/1 ]] }
            refalrts::reinit_open_bracket(context[6]);
            refalrts::reinit_ident(context[9], identifiers[ident_Drive]);
            refalrts::reinit_close_bracket(context[25]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[15], context[16] );
            refalrts::link_brackets( context[5], context[10] );
            refalrts::link_brackets( context[6], context[25] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[16];
            res = refalrts::splice_evar( res, context[47], context[48] );
            res = refalrts::splice_evar( res, context[10], context[15] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[49], context[50] );
            res = refalrts::splice_evar( res, context[34], context[35] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoMapAccum@1/4 (/5 e./45 )/6 (/9 e.Scanned/47 )/10 (/15 # Intrinsic/25 t.0/34 s.ScopeClass/44 e.3/49 )/16 e.Tail/51 >/1
          context[45] = context[36];
          context[46] = context[37];
          context[47] = context[38];
          context[48] = context[39];
          context[49] = context[40];
          context[50] = context[41];
          context[51] = context[42];
          context[52] = context[43];
          if( ! refalrts::ident_term( identifiers[ident_Intrinsic], context[25] ) )
            continue;
          // closed e. as range 45
          // closed e.Scanned as range 47
          // closed e.3 as range 49
          // closed e.Tail as range 51
          //DEBUG: t.0: 34
          //DEBUG: s.ScopeClass: 44
          //DEBUG: e.: 45
          //DEBUG: e.Scanned: 47
          //DEBUG: e.3: 49
          //DEBUG: e.Tail: 51

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ScopeClass/44 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e./45 HalfReuse: (/6 HalfReuse: # Intrinsic/9 } Tile{ AsIs: t.0/34 } Tile{ AsIs: e.3/49 } Tile{ HalfReuse: )/25 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Scanned/47 } Tile{ AsIs: )/16 AsIs: e.Tail/51 AsIs: >/1 ]] }
          refalrts::reinit_open_bracket(context[6]);
          refalrts::reinit_ident(context[9], identifiers[ident_Intrinsic]);
          refalrts::reinit_close_bracket(context[25]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[5], context[10] );
          refalrts::link_brackets( context[6], context[25] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[16];
          res = refalrts::splice_evar( res, context[47], context[48] );
          res = refalrts::splice_evar( res, context[10], context[15] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@1/4 (/5 e./36 )/6 (/9 e.Scanned/38 )/10 (/15 # Ident/25 t.0/34 e.2/40 )/16 e.Tail/42 >/1
        context[36] = context[26];
        context[37] = context[27];
        context[38] = context[28];
        context[39] = context[29];
        context[40] = context[30];
        context[41] = context[31];
        context[42] = context[32];
        context[43] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_Ident], context[25] ) )
          continue;
        // closed e. as range 36
        // closed e.Scanned as range 38
        // closed e.2 as range 40
        // closed e.Tail as range 42
        //DEBUG: t.0: 34
        //DEBUG: e.: 36
        //DEBUG: e.Scanned: 38
        //DEBUG: e.2: 40
        //DEBUG: e.Tail: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/15 # Ident/25 t.0/34 e.2/40 )/16 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e./36 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned/38 AsIs: )/10 } Tile{ AsIs: e.Tail/42 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[43] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 (/5 e./26 )/6 (/9 e.Scanned/28 )/10 (/15 # NativeBlock/25 e.1/30 )/16 e.Tail/32 >/1
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[17];
      context[29] = context[18];
      context[30] = context[23];
      context[31] = context[24];
      context[32] = context[19];
      context[33] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NativeBlock], context[25] ) )
        continue;
      // closed e. as range 26
      // closed e.Scanned as range 28
      // closed e.1 as range 30
      // closed e.Tail as range 32
      //DEBUG: e.: 26
      //DEBUG: e.Scanned: 28
      //DEBUG: e.1: 30
      //DEBUG: e.Tail: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/15 # NativeBlock/25 e.1/30 )/16 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e./26 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned/28 AsIs: )/10 } Tile{ AsIs: e.Tail/32 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[32], context[33] );
      refalrts::splice_to_freelist_open( vm, context[10], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & SeparateDefines\1*12/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_SeparateDefines_L1D12]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & SeparateDefines\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SeparateDefines_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@2/4 t.Next/7 e.Tail/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail as range 5
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPseudofunctions=1\1/4 AsIs: t.Next/7 } >/9 </10 & Map@2/11 Tile{ AsIs: e.Tail/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPseudofunctions_A1L1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CheckPseudofunctions=1\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPseudofunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & DoMapAccum@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@2/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@2/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@2/4 (/5 e.new8/21 )/6 (/9 e.new11/17 )/10 t.new9/15 e.new10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new11 as range 17
      // closed e.new10 as range 19
      do {
        // </0 & DoMapAccum@2/4 (/5 e.new12/23 )/6 (/9 e.new16/25 )/10 (/15 s.new13/31 e.new14/29 )/16 e.new15/27 >/1
        context[23] = context[21];
        context[24] = context[22];
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        if( ! refalrts::brackets_term( context[29], context[30], context[15] ) )
          continue;
        // closed e.new12 as range 23
        // closed e.new16 as range 25
        // closed e.new15 as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        // closed e.new14 as range 29
        do {
          // </0 & DoMapAccum@2/4 (/5 e./32 )/6 (/9 e.Scanned/34 )/10 (/15 # Error/31 e.1/36 )/16 e.Tail/38 >/1
          context[32] = context[23];
          context[33] = context[24];
          context[34] = context[25];
          context[35] = context[26];
          context[36] = context[29];
          context[37] = context[30];
          context[38] = context[27];
          context[39] = context[28];
          if( ! refalrts::ident_term( identifiers[ident_Error], context[31] ) )
            continue;
          // closed e. as range 32
          // closed e.Scanned as range 34
          // closed e.1 as range 36
          // closed e.Tail as range 38
          //DEBUG: e.: 32
          //DEBUG: e.Scanned: 34
          //DEBUG: e.1: 36
          //DEBUG: e.Tail: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@2/4 AsIs: (/5 AsIs: e./32 HalfReuse: (/6 HalfReuse: # Error/9 } Tile{ AsIs: e.1/36 } Tile{ HalfReuse: )/31 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Scanned/34 } Tile{ AsIs: )/16 AsIs: e.Tail/38 AsIs: >/1 ]] }
          refalrts::reinit_open_bracket(context[6]);
          refalrts::reinit_ident(context[9], identifiers[ident_Error]);
          refalrts::reinit_close_bracket(context[31]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[5], context[10] );
          refalrts::link_brackets( context[6], context[31] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[16];
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[10], context[15] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@2/4 (/5 e./32 )/6 (/9 e.Scanned/34 )/10 (/15 # Warning/31 e.1/36 )/16 e.Tail/38 >/1
        context[32] = context[23];
        context[33] = context[24];
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[29];
        context[37] = context[30];
        context[38] = context[27];
        context[39] = context[28];
        if( ! refalrts::ident_term( identifiers[ident_Warning], context[31] ) )
          continue;
        // closed e. as range 32
        // closed e.Scanned as range 34
        // closed e.1 as range 36
        // closed e.Tail as range 38
        //DEBUG: e.: 32
        //DEBUG: e.Scanned: 34
        //DEBUG: e.1: 36
        //DEBUG: e.Tail: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@2/4 AsIs: (/5 AsIs: e./32 HalfReuse: (/6 HalfReuse: # Warning/9 } Tile{ AsIs: e.1/36 } Tile{ HalfReuse: )/31 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Scanned/34 } Tile{ AsIs: )/16 AsIs: e.Tail/38 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[6]);
        refalrts::reinit_ident(context[9], identifiers[ident_Warning]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[5], context[10] );
        refalrts::link_brackets( context[6], context[31] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[10], context[15] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@2/4 (/5 e./23 )/6 (/9 e.Scanned/25 )/10 t.Next/15 e.Tail/27 >/1
      context[23] = context[21];
      context[24] = context[22];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      // closed e. as range 23
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: t.Next: 15
      //DEBUG: e.: 23
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@2/4 AsIs: (/5 AsIs: e./23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned/25 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & SeparateErrors\1*3/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_SeparateErrors_L1D3]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@2/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@2/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & SeparateErrors\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SeparateErrors_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z2("DoMapAccum@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z2);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Map@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@3/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@3/4 (/7 # Spec/13 t.0/14 (/18 e.3/16 )/19 e.2/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Spec], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.Tail as range 9
      context[15] = refalrts::tvar_left( context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::brackets_left( context[16], context[17], context[11], context[12] );
      if( ! context[18] )
        continue;
      refalrts::bracket_pointers(context[18], context[19]);
      // closed e.3 as range 16
      // closed e.2 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: t.0: 14
      //DEBUG: e.3: 16
      //DEBUG: e.2: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </7 HalfReuse: & CheckSpecs-Formats\1$1:1/13 AsIs: t.0/14 AsIs: (/18 AsIs: e.3/16 AsIs: )/19 } (/20 e.2/11/21 )/23 Tile{ AsIs: </0 Reuse: & IsHardPattern/4 } Tile{ AsIs: e.2/11 } >/24 >/25 </26 Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::copy_evar(vm, context[21], context[22], context[11], context[12]);
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[13], functions[efunc_gen_CheckSpecsm_Formats_L1S1B1]);
      refalrts::update_name(context[4], functions[efunc_IsHardPattern]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[23] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[24], context[26] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[20], context[23] );
      res = refalrts::splice_evar( res, context[7], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/7 } Tile{ AsIs: </0 AsIs: & Map@3/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CheckSpecs-Formats\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSpecsm_Formats_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@4/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@4/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@4/4 (/7 # Var/13 t.0/18 s.Mode/20 e.2/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.Tail as range 16
        context[19] = refalrts::tvar_left( context[18], context[14], context[15] );
        if( ! context[19] )
          continue;
        if( ! refalrts::svar_left( context[20], context[14], context[15] ) )
          continue;
        // closed e.2 as range 14
        //DEBUG: e.Tail: 16
        //DEBUG: t.0: 18
        //DEBUG: s.Mode: 20
        //DEBUG: e.2: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Var/13 AsIs: t.0/18 AsIs: s.Mode/20 AsIs: e.2/14 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@4/4 } Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@4/4 (/7 # Brackets/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@4/4 } Tile{ AsIs: e.0/14 } Tile{ HalfReuse: >/7 HalfReuse: </13 } Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
        refalrts::reinit_close_call(context[7]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[7], context[13] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@4/4 (/7 # ADT-Brackets/13 t.0/18 (/22 e.3/20 )/23 e.2/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
        continue;
      // closed e.Tail as range 16
      context[19] = refalrts::tvar_left( context[18], context[14], context[15] );
      if( ! context[19] )
        continue;
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::brackets_left( context[20], context[21], context[14], context[15] );
      if( ! context[22] )
        continue;
      refalrts::bracket_pointers(context[22], context[23]);
      // closed e.3 as range 20
      // closed e.2 as range 14
      //DEBUG: e.Tail: 16
      //DEBUG: t.0: 18
      //DEBUG: e.3: 20
      //DEBUG: e.2: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} t.0/18 (/22 e.3/20 )/23 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@4/4 } Tile{ AsIs: e.2/14 } Tile{ HalfReuse: >/7 HalfReuse: </13 } Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[7], context[13] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Next/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@4/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FindVariables\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindVariables_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Map@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@5/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & Map@5/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & Map@5/4 t.SrcPos2/5 (/9 e.Name/17 )/10 (/15 e./21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      // closed e.Name as range 17
      // closed e. as range 21
      // closed e.Tail as range 19
      //DEBUG: t.SrcPos2: 5
      //DEBUG: e.Name: 17
      //DEBUG: e.: 21
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/15 } # Error/23 t.SrcPos2/5/24 Tile{ AsIs: e./21 } e.Name/17/26 Tile{ AsIs: )/16 } Tile{ AsIs: </0 AsIs: & Map@5/4 AsIs: t.SrcPos2/5 AsIs: (/9 AsIs: e.Name/17 AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[23], identifiers[ident_Error]);
      refalrts::copy_evar(vm, context[24], context[25], context[5], context[6]);
      refalrts::copy_evar(vm, context[26], context[27], context[17], context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[0], context[10] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 t.SrcPos2/5 (/9 e.Name/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Name as range 17
    // closed e.Tail as range 19
    //DEBUG: t.SrcPos2: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Name: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSpecs-Functions$1=1:1$2\1*1/4 AsIs: t.SrcPos2/5 AsIs: (/9 AsIs: e.Name/17 AsIs: )/10 AsIs: t.Next/15 } >/21 </22 & Map@5/23 t.SrcPos2/5/24 (/26 e.Name/17/27 )/29 Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_Map_Z5]);
    refalrts::copy_evar(vm, context[24], context[25], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::copy_evar(vm, context[27], context[28], context[17], context[18]);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSpecsm_Functions_S1A1B1S2L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::link_brackets( context[26], context[29] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[21], context[29] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 t.SrcPos2/5 (/9 e.Name/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Name as range 11
    //DEBUG: t.SrcPos2: 5
    //DEBUG: e.Name: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 t.SrcPos2/5 (/9 e.Name/11 )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 t.SrcPos2/5 (/9 e.Name/7 )/10 e.items/2 >/1
  // closed e.Name as range 7
  // closed e.items as range 2
  //DEBUG: t.SrcPos2: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & Map@0/12 Tile{ HalfReuse: [*]/0 Reuse: & CheckSpecs-Functions$1=1:1$2\1@0/4 AsIs: t.SrcPos2/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 } {*}/13 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSpecsm_Functions_S1A1B1S2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[0], context[10] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Map@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@6/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & Map@6/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & Map@6/4 t.SrcPos2/5 (/9 e.Name/17 )/10 (/15 e./21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      // closed e.Name as range 17
      // closed e. as range 21
      // closed e.Tail as range 19
      //DEBUG: t.SrcPos2: 5
      //DEBUG: e.Name: 17
      //DEBUG: e.: 21
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/15 } # Error/23 t.SrcPos2/5/24 Tile{ AsIs: e./21 } e.Name/17/26 Tile{ AsIs: )/16 } Tile{ AsIs: </0 AsIs: & Map@6/4 AsIs: t.SrcPos2/5 AsIs: (/9 AsIs: e.Name/17 AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[23], identifiers[ident_Error]);
      refalrts::copy_evar(vm, context[24], context[25], context[5], context[6]);
      refalrts::copy_evar(vm, context[26], context[27], context[17], context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[0], context[10] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 t.SrcPos2/5 (/9 e.Name/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Name as range 17
    // closed e.Tail as range 19
    //DEBUG: t.SrcPos2: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Name: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSpecs-Functions$2=1:1$2\1*1/4 AsIs: t.SrcPos2/5 AsIs: (/9 AsIs: e.Name/17 AsIs: )/10 AsIs: t.Next/15 } >/21 </22 & Map@6/23 t.SrcPos2/5/24 (/26 e.Name/17/27 )/29 Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_Map_Z6]);
    refalrts::copy_evar(vm, context[24], context[25], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::copy_evar(vm, context[27], context[28], context[17], context[18]);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSpecsm_Functions_S2A1B1S2L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::link_brackets( context[26], context[29] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[21], context[29] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 t.SrcPos2/5 (/9 e.Name/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Name as range 11
    //DEBUG: t.SrcPos2: 5
    //DEBUG: e.Name: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 t.SrcPos2/5 (/9 e.Name/11 )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 t.SrcPos2/5 (/9 e.Name/7 )/10 e.items/2 >/1
  // closed e.Name as range 7
  // closed e.items as range 2
  //DEBUG: t.SrcPos2: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & Map@0/12 Tile{ HalfReuse: [*]/0 Reuse: & CheckSpecs-Functions$2=1:1$2\1@0/4 AsIs: t.SrcPos2/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 } {*}/13 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSpecsm_Functions_S2A1B1S2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[0], context[10] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_Reduce_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & Reduce@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@2/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce@2/4 t.new4/5 t.new5/7 t.new6/11 e.new7/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.new7 as range 9
    do {
      // </0 & Reduce@2/4 t.new8/5 (/7 s.new9/17 e.new10/15 )/8 t.new11/11 e.new12/13 >/1
      context[13] = context[9];
      context[14] = context[10];
      context[15] = 0;
      context[16] = 0;
      if( ! refalrts::brackets_term( context[15], context[16], context[7] ) )
        continue;
      // closed e.new12 as range 13
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      // closed e.new10 as range 15
      do {
        // </0 & Reduce@2/4 (/5 e./22 )/6 (/7 # True/17 e.2/18 )/8 (/11 (/28 e.4/26 )/29 e.3/24 )/12 e.Tail/20 >/1
        context[18] = context[15];
        context[19] = context[16];
        context[20] = context[13];
        context[21] = context[14];
        context[22] = 0;
        context[23] = 0;
        if( ! refalrts::brackets_term( context[22], context[23], context[5] ) )
          continue;
        context[24] = 0;
        context[25] = 0;
        if( ! refalrts::brackets_term( context[24], context[25], context[11] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_True], context[17] ) )
          continue;
        context[26] = 0;
        context[27] = 0;
        context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
        if( ! context[28] )
          continue;
        refalrts::bracket_pointers(context[28], context[29]);
        // closed e. as range 22
        // closed e.2 as range 18
        // closed e.4 as range 26
        // closed e.3 as range 24
        // closed e.Tail as range 20
        //DEBUG: e.: 22
        //DEBUG: e.2: 18
        //DEBUG: e.4: 26
        //DEBUG: e.3: 24
        //DEBUG: e.Tail: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.3/24 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@2/4 AsIs: (/5 AsIs: e./22 AsIs: )/6 AsIs: (/7 } Tile{ AsIs: e.Tail/20 } Tile{ AsIs: )/12 } </30 & ValidBodyForSpec-CheckSentensePattern$1:1/31 Tile{ HalfReuse: (/17 AsIs: e.2/18 AsIs: )/8 HalfReuse: </11 HalfReuse: & GenericMatch/28 } (/32 </33 & RemovePos-Expr/34 Tile{ AsIs: e.4/26 } >/35 Tile{ AsIs: )/29 } (/36 </37 & RemovePos-Expr/38 e./22/39 >/41 )/42 >/43 >/44 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[34], functions[efunc_RemovePosm_Expr]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::alloc_open_call(vm, context[37]);
        refalrts::alloc_name(vm, context[38], functions[efunc_RemovePosm_Expr]);
        refalrts::copy_evar(vm, context[39], context[40], context[22], context[23]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z2]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[28], functions[efunc_GenericMatch]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[11] );
        refalrts::link_brackets( context[36], context[42] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[37] );
        refalrts::link_brackets( context[32], context[29] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[33] );
        refalrts::link_brackets( context[17], context[8] );
        refalrts::link_brackets( context[7], context[12] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[36], context[44] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[17], context[28] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@2/4 t.Pattern/5 (/7 # False/17 e.0/18 )/8 t.Next/11 e.Tail/20 >/1
      context[18] = context[15];
      context[19] = context[16];
      context[20] = context[13];
      context[21] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_False], context[17] ) )
        continue;
      // closed e.0 as range 18
      // closed e.Tail as range 20
      //DEBUG: t.Pattern: 5
      //DEBUG: t.Next: 11
      //DEBUG: e.0: 18
      //DEBUG: e.Tail: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/11 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@2/4 AsIs: t.Pattern/5 AsIs: (/7 AsIs: # False/17 AsIs: e.0/18 AsIs: )/8 } Tile{ AsIs: e.Tail/20 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@2/4 t.Pattern/5 t.Acc/7 t.Next/11 e.Tail/13 >/1
    context[13] = context[9];
    context[14] = context[10];
    // closed e.Tail as range 13
    //DEBUG: t.Pattern: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </15 & Reduce$1=1@3/16 t.Pattern/5/17 (/19 Tile{ AsIs: e.Tail/13 } )/20 Tile{ AsIs: </0 Reuse: & ValidBodyForSpec-CheckSentensePattern*2/4 AsIs: t.Pattern/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Reduce_S1A1Z3]);
    refalrts::copy_evar(vm, context[17], context[18], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@2/4 t.Pattern/5 t.Acc/7 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Pattern: 5
    //DEBUG: t.Acc: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@2/4 t.Pattern/5 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@2/4 t.Pattern/5 t.accum/7 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.Pattern: 5
  //DEBUG: t.accum: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@0/4 } (/9 & ValidBodyForSpec-CheckSentensePattern@0/10 Tile{ AsIs: t.Pattern/5 } )/11 Tile{ AsIs: t.accum/7 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_Z0]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z2("Reduce@2", COOKIE1_, COOKIE2_, func_gen_Reduce_Z2);


static refalrts::FnResult func_gen_Reduce_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@3/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@3/4 t.Acc/5 t.Next/9 e.Tail/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.Tail as range 7
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </11 & Reduce$1=1@4/12 (/13 Tile{ AsIs: e.Tail/7 } )/14 Tile{ AsIs: </0 Reuse: & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1/4 AsIs: t.Acc/5 AsIs: t.Next/9 } >/15 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_Reduce_S1A1Z4]);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::update_name(context[4], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@3/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@3/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@3/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & Reduce@0/0 Reuse: & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1@0/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z3("Reduce@3", COOKIE1_, COOKIE2_, func_gen_Reduce_Z3);


static refalrts::FnResult func_gen_Map_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Map@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@7/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@7/4 (/7 s.new3/13 t.new4/14 e.new5/11 )/8 e.new6/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new6 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      context[15] = refalrts::tvar_left( context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.new5 as range 11
      do {
        // </0 & Map@7/4 (/7 # Inline/13 t.0/14 e.1/16 )/8 e.Tail/18 >/1
        context[16] = context[11];
        context[17] = context[12];
        context[18] = context[9];
        context[19] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Inline], context[13] ) )
          continue;
        // closed e.1 as range 16
        // closed e.Tail as range 18
        //DEBUG: t.0: 14
        //DEBUG: e.1: 16
        //DEBUG: e.Tail: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # Error/13 AsIs: t.0/14 } # DanglingInline/20 Tile{ AsIs: e.1/16 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@7/8 AsIs: e.Tail/18 AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[20], identifiers[ident_DanglingInline]);
        refalrts::update_ident(context[13], identifiers[ident_Error]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z7]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_elem( res, context[4] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[7], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@7/4 (/7 # Drive/13 t.0/14 e.1/16 )/8 e.Tail/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[9];
      context[19] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Drive], context[13] ) )
        continue;
      // closed e.1 as range 16
      // closed e.Tail as range 18
      //DEBUG: t.0: 14
      //DEBUG: e.1: 16
      //DEBUG: e.Tail: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # Error/13 AsIs: t.0/14 } # DanglingDrive/20 Tile{ AsIs: e.1/16 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@7/8 AsIs: e.Tail/18 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[20], identifiers[ident_DanglingDrive]);
      refalrts::update_ident(context[13], identifiers[ident_Error]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[7], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@7/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindInvalidDriveInline\1*2/4 AsIs: t.Next/7 } >/11 </12 & Map@7/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z7]);
    refalrts::update_name(context[4], functions[efunc_gen_FindInvalidDriveInline_L1D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@7/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@7/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@7/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FindInvalidDriveInline\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindInvalidDriveInline_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z7("Map@7", COOKIE1_, COOKIE2_, func_gen_Map_Z7);


static refalrts::FnResult func_gen_Map_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Map@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@8/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@8/4 (/7 e.Name/9 )/8 t.Next/13 e.Tail/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Name as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Tail as range 11
    //DEBUG: e.Name: 9
    //DEBUG: t.Next: 13
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindInvalidDriveInline=3\1$1=2\1/4 AsIs: (/7 AsIs: e.Name/9 AsIs: )/8 AsIs: t.Next/13 } >/15 </16 & Map@8/17 (/18 e.Name/9/19 )/21 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_gen_Map_Z8]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::copy_evar(vm, context[19], context[20], context[9], context[10]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_FindInvalidDriveInline_A3L1S1A2L1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@8/4 (/7 e.Name/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Name as range 9
    //DEBUG: e.Name: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@8/4 (/7 e.Name/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@8/4 (/7 e.Name/5 )/8 e.items/2 >/1
  // closed e.Name as range 5
  // closed e.items as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & FindInvalidDriveInline=3\1$1=2\1@0/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindInvalidDriveInline_A3L1S1A2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z8("Map@8", COOKIE1_, COOKIE2_, func_gen_Map_Z8);


static refalrts::FnResult func_gen_DoMapAccum_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@3/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@3/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & FindInvalidDriveInline=3\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_FindInvalidDriveInline_A3L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@3/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@3/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & FindInvalidDriveInline=3\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindInvalidDriveInline_A3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z3("DoMapAccum@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z3);


static refalrts::FnResult func_gen_Map_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Map@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@9/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@9/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@9/4 (/7 e.DriveInline/15 )/8 (/13 # NativeBody/21 e.0/19 )/14 e.Tail/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = refalrts::ident_left( identifiers[ident_NativeBody], context[19], context[20] );
      if( ! context[21] )
        continue;
      // closed e.DriveInline as range 15
      // closed e.0 as range 19
      // closed e.Tail as range 17
      //DEBUG: e.DriveInline: 15
      //DEBUG: e.0: 19
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </22 Tile{ HalfReuse: & FindInvalidDriveInline=2\1$1:1/13 HalfReuse: (/21 AsIs: e.0/19 AsIs: )/14 } e.DriveInline/15/23 >/25 Tile{ AsIs: </0 AsIs: & Map@9/4 AsIs: (/7 AsIs: e.DriveInline/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::reinit_name(context[13], functions[efunc_gen_FindInvalidDriveInline_A2L1S1B1]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[21], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@9/4 (/7 e.DriveInline/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.DriveInline as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.DriveInline: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/13 } Tile{ AsIs: </0 AsIs: & Map@9/4 AsIs: (/7 AsIs: e.DriveInline/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@9/4 (/7 e.DriveInline/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.DriveInline as range 9
    //DEBUG: e.DriveInline: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@9/4 (/7 e.DriveInline/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@9/4 (/7 e.DriveInline/5 )/8 e.items/2 >/1
  // closed e.DriveInline as range 5
  // closed e.items as range 2
  //DEBUG: e.DriveInline: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & FindInvalidDriveInline=2\1@0/4 AsIs: (/7 AsIs: e.DriveInline/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindInvalidDriveInline_A2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z9("Map@9", COOKIE1_, COOKIE2_, func_gen_Map_Z9);


static refalrts::FnResult func_gen_DoMapAccum_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & DoMapAccum@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@4/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@4/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@4/4 (/5 e.new8/21 )/6 (/9 e.new11/17 )/10 t.new9/15 e.new10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new11 as range 17
      // closed e.new10 as range 19
      do {
        // </0 & DoMapAccum@4/4 (/5 e.new12/23 )/6 (/9 e.new17/25 )/10 (/15 s.new13/31 t.new14/32 e.new15/29 )/16 e.new16/27 >/1
        context[23] = context[21];
        context[24] = context[22];
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        if( ! refalrts::brackets_term( context[29], context[30], context[15] ) )
          continue;
        // closed e.new12 as range 23
        // closed e.new17 as range 25
        // closed e.new16 as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        context[33] = refalrts::tvar_left( context[32], context[29], context[30] );
        if( ! context[33] )
          continue;
        // closed e.new15 as range 29
        do {
          // </0 & DoMapAccum@4/4 (/5 e./34 )/6 (/9 e.Scanned/36 )/10 (/15 # Inline/31 t.0/32 e.2/38 )/16 e.Tail/40 >/1
          context[34] = context[23];
          context[35] = context[24];
          context[36] = context[25];
          context[37] = context[26];
          context[38] = context[29];
          context[39] = context[30];
          context[40] = context[27];
          context[41] = context[28];
          if( ! refalrts::ident_term( identifiers[ident_Inline], context[31] ) )
            continue;
          // closed e. as range 34
          // closed e.Scanned as range 36
          // closed e.2 as range 38
          // closed e.Tail as range 40
          //DEBUG: t.0: 32
          //DEBUG: e.: 34
          //DEBUG: e.Scanned: 36
          //DEBUG: e.2: 38
          //DEBUG: e.Tail: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@4/4 AsIs: (/5 AsIs: e./34 HalfReuse: (/6 HalfReuse: # Inline/9 } Tile{ AsIs: t.0/32 } Tile{ AsIs: e.2/38 } Tile{ HalfReuse: )/31 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Scanned/36 } Tile{ AsIs: )/16 AsIs: e.Tail/40 AsIs: >/1 ]] }
          refalrts::reinit_open_bracket(context[6]);
          refalrts::reinit_ident(context[9], identifiers[ident_Inline]);
          refalrts::reinit_close_bracket(context[31]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[5], context[10] );
          refalrts::link_brackets( context[6], context[31] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[16];
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[10], context[15] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@4/4 (/5 e./34 )/6 (/9 e.Scanned/36 )/10 (/15 # Drive/31 t.0/32 e.2/38 )/16 e.Tail/40 >/1
        context[34] = context[23];
        context[35] = context[24];
        context[36] = context[25];
        context[37] = context[26];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[27];
        context[41] = context[28];
        if( ! refalrts::ident_term( identifiers[ident_Drive], context[31] ) )
          continue;
        // closed e. as range 34
        // closed e.Scanned as range 36
        // closed e.2 as range 38
        // closed e.Tail as range 40
        //DEBUG: t.0: 32
        //DEBUG: e.: 34
        //DEBUG: e.Scanned: 36
        //DEBUG: e.2: 38
        //DEBUG: e.Tail: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@4/4 AsIs: (/5 AsIs: e./34 HalfReuse: (/6 HalfReuse: # Drive/9 } Tile{ AsIs: t.0/32 } Tile{ AsIs: e.2/38 } Tile{ HalfReuse: )/31 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Scanned/36 } Tile{ AsIs: )/16 AsIs: e.Tail/40 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[6]);
        refalrts::reinit_ident(context[9], identifiers[ident_Drive]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[5], context[10] );
        refalrts::link_brackets( context[6], context[31] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[10], context[15] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@4/4 (/5 e./23 )/6 (/9 e.Scanned/25 )/10 t.Next/15 e.Tail/27 >/1
      context[23] = context[21];
      context[24] = context[22];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      // closed e. as range 23
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: t.Next: 15
      //DEBUG: e.: 23
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@4/4 AsIs: (/5 AsIs: e./23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned/25 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@4/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & FindInvalidDriveInline=1\1*3/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_FindInvalidDriveInline_A1L1D3]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@4/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@4/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@4/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & FindInvalidDriveInline=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindInvalidDriveInline_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z4("DoMapAccum@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z4);


static refalrts::FnResult func_gen_Map_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Map@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@10/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@10/4 (/7 # Entry/13 t.0/14 e.1/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Entry], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.Tail as range 9
      context[15] = refalrts::tvar_left( context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.1 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: t.0: 14
      //DEBUG: e.1: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # Error/13 AsIs: t.0/14 } # DanglingEntry/16 Tile{ AsIs: e.1/11 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@10/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_DanglingEntry]);
      refalrts::update_ident(context[13], identifiers[ident_Error]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[7], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@10/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/7 } Tile{ AsIs: </0 AsIs: & Map@10/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@10/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@10/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@10/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FindInvalidEntry\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindInvalidEntry_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z10("Map@10", COOKIE1_, COOKIE2_, func_gen_Map_Z10);


static refalrts::FnResult func_gen_Map_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@11/4 t.Next/7 e.Tail/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail as range 5
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindFinalInitEntry\1/4 AsIs: t.Next/7 } >/9 </10 & Map@11/11 Tile{ AsIs: e.Tail/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z11]);
    refalrts::update_name(context[4], functions[efunc_gen_FindFinalInitEntry_L1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@11/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@11/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@11/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FindFinalInitEntry\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindFinalInitEntry_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z11("Map@11", COOKIE1_, COOKIE2_, func_gen_Map_Z11);


static refalrts::FnResult func_gen_CheckSentenceRec_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & CheckSentenceRec@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CheckSentenceRec@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & CheckSentenceRec@1/4 t.new3/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      do {
        // </0 & CheckSentenceRec@1/4 (/7 (/13 e.1/11 )/14 e.4/9 (/21 e.5/19 )/22 (/17 e.3/15 )/18 )/8 >/1
        context[9] = 0;
        context[10] = 0;
        if( ! refalrts::brackets_term( context[9], context[10], context[7] ) )
          continue;
        context[11] = 0;
        context[12] = 0;
        context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
        if( ! context[13] )
          continue;
        refalrts::bracket_pointers(context[13], context[14]);
        context[15] = 0;
        context[16] = 0;
        context[17] = refalrts::brackets_right( context[15], context[16], context[9], context[10] );
        if( ! context[17] )
          continue;
        refalrts::bracket_pointers(context[17], context[18]);
        context[19] = 0;
        context[20] = 0;
        context[21] = refalrts::brackets_right( context[19], context[20], context[9], context[10] );
        if( ! context[21] )
          continue;
        refalrts::bracket_pointers(context[21], context[22]);
        // closed e.1 as range 11
        // closed e.4 as range 9
        // closed e.5 as range 19
        // closed e.3 as range 15
        //DEBUG: e.1: 11
        //DEBUG: e.4: 9
        //DEBUG: e.5: 19
        //DEBUG: e.3: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence=1@1/4 AsIs: (/7 } Tile{ AsIs: e.3/15 } Tile{ AsIs: )/18 } Tile{ AsIs: (/21 AsIs: e.5/19 AsIs: )/22 AsIs: (/17 } Tile{ AsIs: e.4/9 } )/23 Tile{ AsIs: (/13 AsIs: e.1/11 AsIs: )/14 } </24 & CheckPattern-Flatten@1/25 </26 & Map@12/27 e.1/11/28 >/30 >/31 </32 & CheckPattern-WarnRepeatedRec@1/33 e.1/11/34 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_CheckPatternm_Flatten_Z1]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z12]);
        refalrts::copy_evar(vm, context[28], context[29], context[11], context[12]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_name(vm, context[33], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_Z1]);
        refalrts::copy_evar(vm, context[34], context[35], context[11], context[12]);
        refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_A1Z1]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[17], context[23] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[7], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[24], context[33] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_evar( res, context[21], context[17] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckSentenceRec@1/4 t.LastSentence/7 >/1
      //DEBUG: t.LastSentence: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence*1/4 AsIs: t.LastSentence/7 HalfReuse: # OneWay/1 } >/9 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[9]);
      refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_D1]);
      refalrts::reinit_ident(context[1], identifiers[ident_OneWay]);
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckSentenceRec@1/4 (/7 (/15 e.1/13 )/16 e.4/11 (/23 e.5/21 )/24 (/19 e.3/17 )/20 )/8 e.Sentences/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[11], context[12] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_right( context[21], context[22], context[11], context[12] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.1 as range 13
      // closed e.4 as range 11
      // closed e.5 as range 21
      // closed e.3 as range 17
      // closed e.Sentences as range 9
      //DEBUG: e.1: 13
      //DEBUG: e.4: 11
      //DEBUG: e.5: 21
      //DEBUG: e.3: 17
      //DEBUG: e.Sentences: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence=1@2/4 AsIs: (/7 } Tile{ AsIs: e.3/17 } )/25 Tile{ AsIs: (/23 AsIs: e.5/21 AsIs: )/24 AsIs: (/19 } Tile{ AsIs: e.4/11 } )/26 Tile{ AsIs: (/15 AsIs: e.1/13 AsIs: )/16 } </27 & CheckPattern-Flatten@1/28 </29 & Map@12/30 e.1/13/31 >/33 >/34 >/35 Tile{ HalfReuse: </20 HalfReuse: & CheckSentenceRec@1/8 AsIs: e.Sentences/9 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_gen_CheckPatternm_Flatten_Z1]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_Map_Z12]);
      refalrts::copy_evar(vm, context[31], context[32], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_A1Z2]);
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[8], functions[efunc_gen_CheckSentenceRec_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[19], context[26] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[7], context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[27], context[35] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[23], context[19] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckSentenceRec@1/4 t.Sentence/7 e.Sentences/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Sentences as range 9
    //DEBUG: t.Sentence: 7
    //DEBUG: e.Sentences: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence*1/4 AsIs: t.Sentence/7 } # WithBacktrack/11 >/12 </13 & CheckSentenceRec@1/14 Tile{ AsIs: e.Sentences/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[11], identifiers[ident_WithBacktrack]);
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_CheckSentenceRec_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckSentenceRec@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckSentenceRec@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentenceRec@1/4 e.dyn1/2 >/1
  // closed e.dyn1 as range 2
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & CheckSentenceRec@0/6 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_CheckSentenceRec_Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentenceRec_Z1("CheckSentenceRec@1", COOKIE1_, COOKIE2_, func_gen_CheckSentenceRec_Z1);


static refalrts::FnResult func_gen_Map_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Map@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@12/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@12/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@12/4 (/7 s.new6/13 t.new7/18 t.new8/20 e.new9/14 )/8 e.new10/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        // closed e.new10 as range 16
        context[19] = refalrts::tvar_left( context[18], context[14], context[15] );
        if( ! context[19] )
          continue;
        context[21] = refalrts::tvar_left( context[20], context[14], context[15] );
        if( ! context[21] )
          continue;
        // closed e.new9 as range 14
        do {
          // </0 & Map@12/4 (/7 s.new11/13 t.new12/18 s.new13/20 e.new14/22 )/8 e.new15/24 >/1
          context[22] = context[14];
          context[23] = context[15];
          context[24] = context[16];
          context[25] = context[17];
          if( ! refalrts::svar_term( context[20], context[20] ) )
            continue;
          // closed e.new14 as range 22
          // closed e.new15 as range 24
          do {
            // </0 & Map@12/4 (/7 # Var/13 t.0/18 s.Mode/20 e.2/26 )/8 e.Tail/28 >/1
            context[26] = context[22];
            context[27] = context[23];
            context[28] = context[24];
            context[29] = context[25];
            if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
              continue;
            // closed e.2 as range 26
            // closed e.Tail as range 28
            //DEBUG: t.0: 18
            //DEBUG: s.Mode: 20
            //DEBUG: e.2: 26
            //DEBUG: e.Tail: 28

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Var/13 AsIs: t.0/18 AsIs: s.Mode/20 AsIs: e.2/26 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@12/4 } Tile{ AsIs: e.Tail/28 } Tile{ AsIs: >/1 ]] }
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[28], context[29] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[7], context[8] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Map@12/4 (/7 # NewVar/13 t.0/18 s.Mode/20 e.2/26 )/8 e.Tail/28 >/1
          context[26] = context[22];
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_NewVar], context[13] ) )
            continue;
          // closed e.2 as range 26
          // closed e.Tail as range 28
          //DEBUG: t.0: 18
          //DEBUG: s.Mode: 20
          //DEBUG: e.2: 26
          //DEBUG: e.Tail: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # NewVar/13 AsIs: t.0/18 AsIs: s.Mode/20 AsIs: e.2/26 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@12/4 } Tile{ AsIs: e.Tail/28 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[28], context[29] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@12/4 (/7 # Symbol/13 # Name/18 t.1/20 e.2/22 )/8 e.Tail/24 >/1
        context[22] = context[14];
        context[23] = context[15];
        context[24] = context[16];
        context[25] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_Name], context[18] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        // closed e.2 as range 22
        // closed e.Tail as range 24
        //DEBUG: t.1: 20
        //DEBUG: e.2: 22
        //DEBUG: e.Tail: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Symbol/13 AsIs: # Name/18 AsIs: t.1/20 AsIs: e.2/22 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@12/4 } Tile{ AsIs: e.Tail/24 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@12/4 (/7 # Brackets/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@12/4 } Tile{ AsIs: e.0/14 } Tile{ HalfReuse: >/7 HalfReuse: </13 } Tile{ HalfReuse: & Map@12/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
        refalrts::reinit_close_call(context[7]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[7], context[13] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@12/4 (/7 # ADT-Brackets/13 t.new6/18 (/22 e.new7/20 )/23 e.new8/14 )/8 e.new9/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
          continue;
        // closed e.new9 as range 16
        context[19] = refalrts::tvar_left( context[18], context[14], context[15] );
        if( ! context[19] )
          continue;
        context[20] = 0;
        context[21] = 0;
        context[22] = refalrts::brackets_left( context[20], context[21], context[14], context[15] );
        if( ! context[22] )
          continue;
        refalrts::bracket_pointers(context[22], context[23]);
        // closed e.new7 as range 20
        // closed e.new8 as range 14
        do {
          // </0 & Map@12/4 (/7 # ADT-Brackets/13 t.0/18 (/22 # UnnamedADT/30 )/23 e.2/26 )/8 e.Tail/28 >/1
          context[24] = context[20];
          context[25] = context[21];
          context[26] = context[14];
          context[27] = context[15];
          context[28] = context[16];
          context[29] = context[17];
          context[30] = refalrts::ident_left( identifiers[ident_UnnamedADT], context[24], context[25] );
          if( ! context[30] )
            continue;
          if( ! refalrts::empty_seq( context[24], context[25] ) )
            continue;
          // closed e.2 as range 26
          // closed e.Tail as range 28
          //DEBUG: t.0: 18
          //DEBUG: e.2: 26
          //DEBUG: e.Tail: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 # ADT-Brackets/13 t.0/18 {REMOVED TILE} )/23 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@12/4 } Tile{ AsIs: e.2/26 } Tile{ HalfReuse: >/22 HalfReuse: </30 } Tile{ HalfReuse: & Map@12/8 AsIs: e.Tail/28 AsIs: >/1 ]] }
          refalrts::reinit_close_call(context[22]);
          refalrts::reinit_open_call(context[30]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[22], context[30] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@12/4 (/7 # ADT-Brackets/13 t.0/18 (/22 e.3/24 )/23 e.2/26 )/8 e.Tail/28 >/1
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[14];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[17];
        // closed e.3 as range 24
        // closed e.2 as range 26
        // closed e.Tail as range 28
        //DEBUG: t.0: 18
        //DEBUG: e.3: 24
        //DEBUG: e.2: 26
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # Symbol/7 Reuse: # Name/13 AsIs: t.0/18 } Tile{ AsIs: e.3/24 } Tile{ AsIs: )/23 } Tile{ AsIs: </0 } & Map@12/30 Tile{ AsIs: e.2/26 } Tile{ HalfReuse: >/22 } </31 Tile{ HalfReuse: & Map@12/8 AsIs: e.Tail/28 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[30], functions[efunc_gen_Map_Z12]);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_ident(context[7], identifiers[ident_Symbol]);
        refalrts::update_ident(context[13], identifiers[ident_Name]);
        refalrts::reinit_close_call(context[22]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[4], context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[4], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@12/4 (/7 # CallBrackets/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@12/4 } Tile{ AsIs: e.0/14 } Tile{ HalfReuse: >/7 HalfReuse: </13 } Tile{ HalfReuse: & Map@12/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
        refalrts::reinit_close_call(context[7]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[7], context[13] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@12/4 (/7 # Closure/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Closure], context[13] ) )
        continue;
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Closure/13 AsIs: e.0/14 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@12/4 } Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@12/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Next/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@12/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@12/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@12/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@12/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FlatExpr\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FlatExpr_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z12("Map@12", COOKIE1_, COOKIE2_, func_gen_Map_Z12);


static refalrts::FnResult func_gen_CheckSentence_A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & CheckSentence=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentence=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & CheckSentence=1@1/4 (/7 e.3/21 )/8 (/11 e.5/23 )/12 (/15 e.4/25 )/16 (/19 e.1/27 )/20 (/33 e.ScopeVars$a/31 )/34 e.PatternFunctionsAndErrors/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    context[31] = 0;
    context[32] = 0;
    context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
    if( ! context[33] )
      continue;
    refalrts::bracket_pointers(context[33], context[34]);
    // closed e.3 as range 21
    // closed e.5 as range 23
    // closed e.4 as range 25
    // closed e.1 as range 27
    // closed e.ScopeVars$a as range 31
    // closed e.PatternFunctionsAndErrors as range 29
    //DEBUG: e.3: 21
    //DEBUG: e.5: 23
    //DEBUG: e.4: 25
    //DEBUG: e.1: 27
    //DEBUG: e.ScopeVars$a: 31
    //DEBUG: e.PatternFunctionsAndErrors: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckSentence=2/16 AsIs: (/19 } Tile{ AsIs: e.PatternFunctionsAndErrors/29 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.3/21 AsIs: )/8 AsIs: (/11 AsIs: e.5/23 AsIs: )/12 HalfReuse: </15 } & DoCheckAssignments/35 (/36 Tile{ AsIs: e.4/25 } Tile{ AsIs: )/20 AsIs: (/33 AsIs: e.ScopeVars$a/31 AsIs: )/34 } </37 & FixBacktrackForOpenEVars/38 Tile{ AsIs: e.1/27 } # OneWay/39 >/40 >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[35], functions[efunc_DoCheckAssignments]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_FixBacktrackForOpenEVars]);
    refalrts::alloc_ident(vm, context[39], identifiers[ident_OneWay]);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::reinit_name(context[16], functions[efunc_gen_CheckSentence_A2]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[36], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[39], context[41] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[20], context[34] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[4], context[15] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentence=1@1/4 (/7 e.3/5 )/8 (/11 e.5/9 )/12 (/15 e.4/13 )/16 (/19 e.1/17 )/20 e.dyn/2 >/1
  // closed e.3 as range 5
  // closed e.5 as range 9
  // closed e.4 as range 13
  // closed e.1 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.3: 5
  //DEBUG: e.5: 9
  //DEBUG: e.4: 13
  //DEBUG: e.1: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence=1@0/4 AsIs: (/7 AsIs: e.3/5 AsIs: )/8 AsIs: (/11 AsIs: e.5/9 AsIs: )/12 AsIs: (/15 AsIs: e.4/13 AsIs: )/16 AsIs: (/19 AsIs: e.1/17 AsIs: )/20 } # OneWay/21 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[21], identifiers[ident_OneWay]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentence_A1Z1("CheckSentence=1@1", COOKIE1_, COOKIE2_, func_gen_CheckSentence_A1Z1);


static refalrts::FnResult func_gen_CheckSentence_A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & CheckSentence=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentence=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & CheckSentence=1@2/4 (/7 e.3/21 )/8 (/11 e.5/23 )/12 (/15 e.4/25 )/16 (/19 e.1/27 )/20 (/33 e.ScopeVars$a/31 )/34 e.PatternFunctionsAndErrors/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    context[31] = 0;
    context[32] = 0;
    context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
    if( ! context[33] )
      continue;
    refalrts::bracket_pointers(context[33], context[34]);
    // closed e.3 as range 21
    // closed e.5 as range 23
    // closed e.4 as range 25
    // closed e.1 as range 27
    // closed e.ScopeVars$a as range 31
    // closed e.PatternFunctionsAndErrors as range 29
    //DEBUG: e.3: 21
    //DEBUG: e.5: 23
    //DEBUG: e.4: 25
    //DEBUG: e.1: 27
    //DEBUG: e.ScopeVars$a: 31
    //DEBUG: e.PatternFunctionsAndErrors: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckSentence=2/16 AsIs: (/19 } Tile{ AsIs: e.PatternFunctionsAndErrors/29 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.3/21 AsIs: )/8 AsIs: (/11 AsIs: e.5/23 AsIs: )/12 HalfReuse: </15 } & DoCheckAssignments/35 (/36 Tile{ AsIs: e.4/25 } Tile{ AsIs: )/20 AsIs: (/33 AsIs: e.ScopeVars$a/31 AsIs: )/34 } </37 & FixBacktrackForOpenEVars/38 Tile{ AsIs: e.1/27 } # WithBacktrack/39 >/40 >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[35], functions[efunc_DoCheckAssignments]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_FixBacktrackForOpenEVars]);
    refalrts::alloc_ident(vm, context[39], identifiers[ident_WithBacktrack]);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::reinit_name(context[16], functions[efunc_gen_CheckSentence_A2]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[36], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[39], context[41] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[20], context[34] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[4], context[15] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentence=1@2/4 (/7 e.3/5 )/8 (/11 e.5/9 )/12 (/15 e.4/13 )/16 (/19 e.1/17 )/20 e.dyn/2 >/1
  // closed e.3 as range 5
  // closed e.5 as range 9
  // closed e.4 as range 13
  // closed e.1 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.3: 5
  //DEBUG: e.5: 9
  //DEBUG: e.4: 13
  //DEBUG: e.1: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentence=1@0/4 AsIs: (/7 AsIs: e.3/5 AsIs: )/8 AsIs: (/11 AsIs: e.5/9 AsIs: )/12 AsIs: (/15 AsIs: e.4/13 AsIs: )/16 AsIs: (/19 AsIs: e.1/17 AsIs: )/20 } # WithBacktrack/21 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[21], identifiers[ident_WithBacktrack]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentence_A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentence_A1Z2("CheckSentence=1@2", COOKIE1_, COOKIE2_, func_gen_CheckSentence_A1Z2);


static refalrts::FnResult func_gen_Map_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & Map@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@13/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@13/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@13/4 (/7 e.new8/15 )/8 (/13 e.new6/19 )/14 e.new7/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.new8 as range 15
      // closed e.new6 as range 19
      // closed e.new7 as range 17
      do {
        // </0 & Map@13/4 (/7 e.new12/21 )/8 (/13 s.new9/27 e.new10/23 )/14 e.new11/25 >/1
        context[21] = context[15];
        context[22] = context[16];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[17];
        context[26] = context[18];
        // closed e.new12 as range 21
        // closed e.new11 as range 25
        if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
          continue;
        // closed e.new10 as range 23
        do {
          // </0 & Map@13/4 (/7 e.ScopeVars$b/28 )/8 (/13 # Sentences/27 e.0/30 )/14 e.Tail/32 >/1
          context[28] = context[21];
          context[29] = context[22];
          context[30] = context[23];
          context[31] = context[24];
          context[32] = context[25];
          context[33] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_Sentences], context[27] ) )
            continue;
          // closed e.ScopeVars$b as range 28
          // closed e.0 as range 30
          // closed e.Tail as range 32
          //DEBUG: e.ScopeVars$b: 28
          //DEBUG: e.0: 30
          //DEBUG: e.Tail: 32

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceRec/4 AsIs: (/7 AsIs: e.ScopeVars$b/28 AsIs: )/8 } Tile{ AsIs: e.0/30 } Tile{ HalfReuse: >/27 } </34 & Map@13/35 Tile{ AsIs: (/13 } e.ScopeVars$b/28/36 Tile{ AsIs: )/14 AsIs: e.Tail/32 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[34]);
          refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z13]);
          refalrts::copy_evar(vm, context[36], context[37], context[28], context[29]);
          refalrts::update_name(context[4], functions[efunc_CheckSentenceRec]);
          refalrts::reinit_close_call(context[27]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[34] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@13/4 (/7 e.ScopeVars$b/28 )/8 (/13 # NativeBody/27 e.0/30 )/14 e.Tail/32 >/1
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[26];
        if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[27] ) )
          continue;
        // closed e.ScopeVars$b as range 28
        // closed e.0 as range 30
        // closed e.Tail as range 32
        //DEBUG: e.ScopeVars$b: 28
        //DEBUG: e.0: 30
        //DEBUG: e.Tail: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/13 # NativeBody/27 e.0/30 )/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@13/4 AsIs: (/7 AsIs: e.ScopeVars$b/28 AsIs: )/8 } Tile{ AsIs: e.Tail/32 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[32], context[33] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@13/4 (/7 e.ScopeVars$b/21 )/8 (/13 e./23 )/14 e.Tail/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[17];
      context[26] = context[18];
      // closed e.ScopeVars$b as range 21
      // closed e. as range 23
      // closed e.Tail as range 25
      //DEBUG: e.ScopeVars$b: 21
      //DEBUG: e.: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckFunctionBodyRec*2/4 AsIs: (/7 AsIs: e.ScopeVars$b/21 AsIs: )/8 } Tile{ AsIs: e./23 } >/27 </28 & Map@13/29 Tile{ AsIs: (/13 } e.ScopeVars$b/21/30 Tile{ AsIs: )/14 AsIs: e.Tail/25 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_Map_Z13]);
      refalrts::copy_evar(vm, context[30], context[31], context[21], context[22]);
      refalrts::update_name(context[4], functions[efunc_gen_CheckFunctionBodyRec_D2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[27], context[29] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@13/4 (/7 e.ScopeVars$b/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.ScopeVars$b as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.ScopeVars$b: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckBlocks\1*1/4 AsIs: (/7 AsIs: e.ScopeVars$b/15 AsIs: )/8 AsIs: t.Next/13 } >/19 </20 & Map@13/21 (/22 e.ScopeVars$b/15/23 )/25 Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_Map_Z13]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckBlocks_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@13/4 (/7 e.ScopeVars$b/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars$b as range 9
    //DEBUG: e.ScopeVars$b: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@13/4 (/7 e.ScopeVars$b/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@13/4 (/7 e.ScopeVars$b/5 )/8 e.items/2 >/1
  // closed e.ScopeVars$b as range 5
  // closed e.items as range 2
  //DEBUG: e.ScopeVars$b: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & CheckBlocks\1@0/4 AsIs: (/7 AsIs: e.ScopeVars$b/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckBlocks_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z13("Map@13", COOKIE1_, COOKIE2_, func_gen_Map_Z13);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A4Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & DoCheckAssignments$2=4@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=4@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 2
  do {
    // </0 & DoCheckAssignments$2=4@1/4 (/7 e.Assignments0/25 )/8 (/11 e.Errors0/27 )/12 (/15 e.ResultFunctionsAndErrors0/29 )/16 (/19 e.BlocksFunctionsAndErrors0/31 )/20 (/23 e.Pattern0/33 )/24 (/39 e.ScopeVars$a/37 )/40 e.PatternFunctionsAndErrors/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::brackets_left( context[37], context[38], context[35], context[36] );
    if( ! context[39] )
      continue;
    refalrts::bracket_pointers(context[39], context[40]);
    // closed e.Assignments0 as range 25
    // closed e.Errors0 as range 27
    // closed e.ResultFunctionsAndErrors0 as range 29
    // closed e.BlocksFunctionsAndErrors0 as range 31
    // closed e.Pattern0 as range 33
    // closed e.ScopeVars$a as range 37
    // closed e.PatternFunctionsAndErrors as range 35
    //DEBUG: e.Assignments0: 25
    //DEBUG: e.Errors0: 27
    //DEBUG: e.ResultFunctionsAndErrors0: 29
    //DEBUG: e.BlocksFunctionsAndErrors0: 31
    //DEBUG: e.Pattern0: 33
    //DEBUG: e.ScopeVars$a: 37
    //DEBUG: e.PatternFunctionsAndErrors: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=5/4 AsIs: (/7 } Tile{ AsIs: e.Assignments0/25 } Tile{ AsIs: )/24 AsIs: (/39 } Tile{ AsIs: e.ScopeVars$a/37 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/27 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/29 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/31 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.PatternFunctionsAndErrors/35 } Tile{ AsIs: )/40 } </41 & FixBacktrackForOpenEVars/42 Tile{ AsIs: e.Pattern0/33 } # OneWay/43 >/44 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_FixBacktrackForOpenEVars]);
    refalrts::alloc_ident(vm, context[43], identifiers[ident_OneWay]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[41] );
    refalrts::link_brackets( context[23], context[40] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[39], context[8] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[8], context[23] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[24], context[39] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=4@1/4 (/7 e.Assignments0/5 )/8 (/11 e.Errors0/9 )/12 (/15 e.ResultFunctionsAndErrors0/13 )/16 (/19 e.BlocksFunctionsAndErrors0/17 )/20 (/23 e.Pattern0/21 )/24 e.dyn/2 >/1
  // closed e.Assignments0 as range 5
  // closed e.Errors0 as range 9
  // closed e.ResultFunctionsAndErrors0 as range 13
  // closed e.BlocksFunctionsAndErrors0 as range 17
  // closed e.Pattern0 as range 21
  // closed e.dyn as range 2
  //DEBUG: e.Assignments0: 5
  //DEBUG: e.Errors0: 9
  //DEBUG: e.ResultFunctionsAndErrors0: 13
  //DEBUG: e.BlocksFunctionsAndErrors0: 17
  //DEBUG: e.Pattern0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@0/4 AsIs: (/7 AsIs: e.Assignments0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/9 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/13 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Pattern0/21 AsIs: )/24 } # OneWay/25 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[25], identifiers[ident_OneWay]);
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A4Z1("DoCheckAssignments$2=4@1", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A4Z1);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A4Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & DoCheckAssignments$2=4@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=4@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 2
  do {
    // </0 & DoCheckAssignments$2=4@2/4 (/7 e.Assignments0/25 )/8 (/11 e.Errors0/27 )/12 (/15 e.ResultFunctionsAndErrors0/29 )/16 (/19 e.BlocksFunctionsAndErrors0/31 )/20 (/23 e.Pattern0/33 )/24 (/39 e.ScopeVars$a/37 )/40 e.PatternFunctionsAndErrors/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::brackets_left( context[37], context[38], context[35], context[36] );
    if( ! context[39] )
      continue;
    refalrts::bracket_pointers(context[39], context[40]);
    // closed e.Assignments0 as range 25
    // closed e.Errors0 as range 27
    // closed e.ResultFunctionsAndErrors0 as range 29
    // closed e.BlocksFunctionsAndErrors0 as range 31
    // closed e.Pattern0 as range 33
    // closed e.ScopeVars$a as range 37
    // closed e.PatternFunctionsAndErrors as range 35
    //DEBUG: e.Assignments0: 25
    //DEBUG: e.Errors0: 27
    //DEBUG: e.ResultFunctionsAndErrors0: 29
    //DEBUG: e.BlocksFunctionsAndErrors0: 31
    //DEBUG: e.Pattern0: 33
    //DEBUG: e.ScopeVars$a: 37
    //DEBUG: e.PatternFunctionsAndErrors: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=5/4 AsIs: (/7 } Tile{ AsIs: e.Assignments0/25 } Tile{ AsIs: )/24 AsIs: (/39 } Tile{ AsIs: e.ScopeVars$a/37 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/27 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/29 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/31 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.PatternFunctionsAndErrors/35 } Tile{ AsIs: )/40 } </41 & FixBacktrackForOpenEVars/42 Tile{ AsIs: e.Pattern0/33 } # WithBacktrack/43 >/44 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_FixBacktrackForOpenEVars]);
    refalrts::alloc_ident(vm, context[43], identifiers[ident_WithBacktrack]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[41] );
    refalrts::link_brackets( context[23], context[40] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[39], context[8] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[8], context[23] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[24], context[39] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=4@2/4 (/7 e.Assignments0/5 )/8 (/11 e.Errors0/9 )/12 (/15 e.ResultFunctionsAndErrors0/13 )/16 (/19 e.BlocksFunctionsAndErrors0/17 )/20 (/23 e.Pattern0/21 )/24 e.dyn/2 >/1
  // closed e.Assignments0 as range 5
  // closed e.Errors0 as range 9
  // closed e.ResultFunctionsAndErrors0 as range 13
  // closed e.BlocksFunctionsAndErrors0 as range 17
  // closed e.Pattern0 as range 21
  // closed e.dyn as range 2
  //DEBUG: e.Assignments0: 5
  //DEBUG: e.Errors0: 9
  //DEBUG: e.ResultFunctionsAndErrors0: 13
  //DEBUG: e.BlocksFunctionsAndErrors0: 17
  //DEBUG: e.Pattern0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@0/4 AsIs: (/7 AsIs: e.Assignments0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/9 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/13 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Pattern0/21 AsIs: )/24 } # WithBacktrack/25 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[25], identifiers[ident_WithBacktrack]);
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A4Z2("DoCheckAssignments$2=4@2", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A4Z2);


static refalrts::FnResult func_gen_Map_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@14/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@14/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@14/4 (/7 # Brackets/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOpenEVars/4 } Tile{ AsIs: e.0/14 } Tile{ HalfReuse: >/7 HalfReuse: </13 } Tile{ HalfReuse: & Map@14/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_FindOpenEVars]);
        refalrts::reinit_close_call(context[7]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[7], context[13] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@14/4 (/7 # ADT-Brackets/13 t.0/18 (/22 e.3/20 )/23 e.2/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
        continue;
      // closed e.Tail as range 16
      context[19] = refalrts::tvar_left( context[18], context[14], context[15] );
      if( ! context[19] )
        continue;
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::brackets_left( context[20], context[21], context[14], context[15] );
      if( ! context[22] )
        continue;
      refalrts::bracket_pointers(context[22], context[23]);
      // closed e.3 as range 20
      // closed e.2 as range 14
      //DEBUG: e.Tail: 16
      //DEBUG: t.0: 18
      //DEBUG: e.3: 20
      //DEBUG: e.2: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} t.0/18 (/22 e.3/20 )/23 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOpenEVars/4 } Tile{ AsIs: e.2/14 } Tile{ HalfReuse: >/7 HalfReuse: </13 } Tile{ HalfReuse: & Map@14/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_FindOpenEVars]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[7], context[13] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@14/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Next/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@14/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@14/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@14/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@14/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FindOpenEVars$2\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOpenEVars_S2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z14("Map@14", COOKIE1_, COOKIE2_, func_gen_Map_Z14);


static refalrts::FnResult func_gen_DoMapAccum_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@5/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@5/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@5/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & CheckPattern-Flatten$3\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_CheckPatternm_Flatten_S3L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@5/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@5/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@5/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & CheckPattern-Flatten$3\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternm_Flatten_S3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z5("DoMapAccum@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z5);


static refalrts::FnResult func_gen_Map_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Map@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@15/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@15/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@15/4 (/7 e.ScopeVars/15 )/8 (/13 # Var/21 t.0/22 s.Mode/24 '_'/25 e.3/19 )/14 e.Tail/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = refalrts::ident_left( identifiers[ident_Var], context[19], context[20] );
      if( ! context[21] )
        continue;
      // closed e.ScopeVars as range 15
      // closed e.Tail as range 17
      context[23] = refalrts::tvar_left( context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      if( ! refalrts::svar_left( context[24], context[19], context[20] ) )
        continue;
      context[25] = refalrts::char_left( '_', context[19], context[20] );
      if( ! context[25] )
        continue;
      // closed e.3 as range 19
      //DEBUG: e.ScopeVars: 15
      //DEBUG: e.Tail: 17
      //DEBUG: t.0: 22
      //DEBUG: s.Mode: 24
      //DEBUG: e.3: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 Reuse: # Error/21 AsIs: t.0/22 } # UnnamedVariableInResult/26 Tile{ AsIs: s.Mode/24 AsIs: '_'/25 AsIs: e.3/19 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.ScopeVars/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[26], identifiers[ident_UnnamedVariableInResult]);
      refalrts::update_ident(context[21], identifiers[ident_Error]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[24], context[14] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[13], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@15/4 (/7 e.ScopeVars/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.ScopeVars as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.ScopeVars: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & CheckResult\1*1/20 e.ScopeVars/15/21 Tile{ AsIs: t.Next/13 } >/23 Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.ScopeVars/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_CheckResult_L1D1]);
    refalrts::copy_evar(vm, context[21], context[22], context[15], context[16]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@15/4 (/7 e.ScopeVars/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScopeVars as range 9
    //DEBUG: e.ScopeVars: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@15/4 (/7 e.ScopeVars/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@15/4 (/7 e.ScopeVars/5 )/8 e.items/2 >/1
  // closed e.ScopeVars as range 5
  // closed e.items as range 2
  //DEBUG: e.ScopeVars: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 Tile{ HalfReuse: & Map@0/0 HalfReuse: (/4 HalfReuse: & CheckResult\1@0/7 AsIs: e.ScopeVars/5 AsIs: )/8 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_CheckResult_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z15("Map@15", COOKIE1_, COOKIE2_, func_gen_Map_Z15);


static refalrts::FnResult func_gen_Map_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Map@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@16/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@16/4 (/7 s.new3/13 t.new4/14 t.new5/16 e.new6/11 )/8 e.new7/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new7 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      context[15] = refalrts::tvar_left( context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      // closed e.new6 as range 11
      do {
        // </0 & Map@16/4 (/7 # Error/13 t.0/14 s.Type/16 e.2/18 )/8 e.Tail/20 >/1
        context[18] = context[11];
        context[19] = context[12];
        context[20] = context[9];
        context[21] = context[10];
        if( ! refalrts::svar_term( context[16], context[16] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Error], context[13] ) )
          continue;
        // closed e.2 as range 18
        // closed e.Tail as range 20
        //DEBUG: t.0: 14
        //DEBUG: s.Type: 16
        //DEBUG: e.2: 18
        //DEBUG: e.Tail: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Error/13 AsIs: t.0/14 AsIs: s.Type/16 AsIs: e.2/18 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@16/4 } Tile{ AsIs: e.Tail/20 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@16/4 (/7 # Warning/13 s.WarningId/14 t.1/16 s.Type/22 e.3/18 )/8 e.Tail/20 >/1
      context[18] = context[11];
      context[19] = context[12];
      context[20] = context[9];
      context[21] = context[10];
      if( ! refalrts::svar_term( context[14], context[14] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Warning], context[13] ) )
        continue;
      // closed e.Tail as range 20
      if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
        continue;
      // closed e.3 as range 18
      //DEBUG: t.1: 16
      //DEBUG: s.WarningId: 14
      //DEBUG: e.Tail: 20
      //DEBUG: s.Type: 22
      //DEBUG: e.3: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Warning/13 AsIs: s.WarningId/14 AsIs: t.1/16 AsIs: s.Type/22 AsIs: e.3/18 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@16/4 } Tile{ AsIs: e.Tail/20 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@16/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Next/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@16/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@16/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@16/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@16/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CheckValidUsings$6\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckValidUsings_S6L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z16("Map@16", COOKIE1_, COOKIE2_, func_gen_Map_Z16);


static refalrts::FnResult func_gen_CheckResult_L1D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & CheckResult\1*1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckResult\1*1/4 e.new1/2 (/7 s.new2/9 e.new3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 5
  do {
    // </0 & CheckResult\1*1/4 e.new4/10 (/7 s.new5/9 t.new6/14 e.new7/12 )/8 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = context[5];
    context[13] = context[6];
    // closed e.new4 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    // closed e.new7 as range 12
    do {
      // </0 & CheckResult\1*1/4 e.new8/16 (/7 s.new9/9 t.new10/14 t.new11/20 e.new12/18 )/8 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      // closed e.new8 as range 16
      context[21] = refalrts::tvar_left( context[20], context[18], context[19] );
      if( ! context[21] )
        continue;
      // closed e.new12 as range 18
      do {
        // </0 & CheckResult\1*1/4 e.new13/22 (/7 # Var/9 t.new14/14 s.new15/20 e.new16/24 )/8 >/1
        context[22] = context[16];
        context[23] = context[17];
        context[24] = context[18];
        context[25] = context[19];
        if( ! refalrts::svar_term( context[20], context[20] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Var], context[9] ) )
          continue;
        // closed e.new13 as range 22
        // closed e.new16 as range 24
        do {
          // </0 & CheckResult\1*1/4 e.KnownVars-B/30 (/36 s.Mode/38 e.Index/39 )/37 e.KnownVars-E/32 (/7 # Var/9 t.SrcPos/14 s.Mode/20 e.Index/28 )/8 >/1
          context[26] = context[22];
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          // closed e.Index as range 28
          context[30] = 0;
          context[31] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[32] = context[26];
            context[33] = context[27];
            context[34] = 0;
            context[35] = 0;
            context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
            if( ! context[36] )
              continue;
            refalrts::bracket_pointers(context[36], context[37]);
            if( ! refalrts::repeated_stvar_left( vm, context[38], context[20], context[34], context[35] ) )
              continue;
            if( ! refalrts::repeated_evar_left( vm, context[39], context[40], context[28], context[29], context[34], context[35] ) )
              continue;
            if( ! refalrts::empty_seq( context[34], context[35] ) )
              continue;
            // closed e.KnownVars-E as range 32
            //DEBUG: t.SrcPos: 14
            //DEBUG: s.Mode: 20
            //DEBUG: e.Index: 28
            //DEBUG: e.KnownVars-B: 30
            //DEBUG: e.KnownVars-E: 32

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & CheckResult\1*1/4 e.KnownVars-B/30 (/36 s.Mode/38 e.Index/39 )/37 e.KnownVars-E/32 (/7 # Var/9 t.SrcPos/14 s.Mode/20 e.Index/28 )/8 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ ]] }
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[30], context[31], context[26], context[27] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & CheckResult\1*1/4 e.KnownVars-B/30 (/36 s.OldMode/40 e.Index/38 )/37 e.KnownVars-E/32 (/7 # Var/9 t.SrcPos/14 s.NewMode/20 e.Index/28 )/8 >/1
          context[26] = context[22];
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          // closed e.Index as range 28
          context[30] = 0;
          context[31] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[32] = context[26];
            context[33] = context[27];
            context[34] = 0;
            context[35] = 0;
            context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
            if( ! context[36] )
              continue;
            refalrts::bracket_pointers(context[36], context[37]);
            if( ! refalrts::repeated_evar_right( vm, context[38], context[39], context[28], context[29], context[34], context[35] ) )
              continue;
            // closed e.KnownVars-E as range 32
            if( ! refalrts::svar_left( context[40], context[34], context[35] ) )
              continue;
            if( ! refalrts::empty_seq( context[34], context[35] ) )
              continue;
            //DEBUG: t.SrcPos: 14
            //DEBUG: s.NewMode: 20
            //DEBUG: e.Index: 28
            //DEBUG: e.KnownVars-B: 30
            //DEBUG: e.KnownVars-E: 32
            //DEBUG: s.OldMode: 40

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & CheckResult\1*1/4 e.KnownVars-B/30 {REMOVED TILE} e.Index/38 )/37 e.KnownVars-E/32 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # Error/9 AsIs: t.SrcPos/14 } Tile{ HalfReuse: # InvalidMode/36 AsIs: s.OldMode/40 } Tile{ AsIs: s.NewMode/20 AsIs: e.Index/28 AsIs: )/8 } Tile{ ]] }
            refalrts::update_ident(context[9], identifiers[ident_Error]);
            refalrts::reinit_ident(context[36], identifiers[ident_InvalidMode]);
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[20], context[8] );
            res = refalrts::splice_evar( res, context[36], context[40] );
            res = refalrts::splice_evar( res, context[7], context[15] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[30], context[31], context[26], context[27] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & CheckResult\1*1/4 e.KnownVars/26 (/7 # Var/9 t.SrcPos/14 s.Mode/20 e.Index/28 )/8 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        // closed e.KnownVars as range 26
        // closed e.Index as range 28
        //DEBUG: t.SrcPos: 14
        //DEBUG: s.Mode: 20
        //DEBUG: e.KnownVars: 26
        //DEBUG: e.Index: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & CheckResult\1*1/4 e.KnownVars/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # Error/9 AsIs: t.SrcPos/14 } Tile{ HalfReuse: # VariableNotFound/1 } Tile{ AsIs: s.Mode/20 AsIs: e.Index/28 AsIs: )/8 } Tile{ ]] }
        refalrts::update_ident(context[9], identifiers[ident_Error]);
        refalrts::reinit_ident(context[1], identifiers[ident_VariableNotFound]);
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[20], context[8] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[7], context[15] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckResult\1*1/4 e.KnownVars/22 (/7 # Symbol/9 # Name/14 t.SrcPos/20 e.Name/24 )/8 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_Name], context[14] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[9] ) )
        continue;
      // closed e.KnownVars as range 22
      // closed e.Name as range 24
      //DEBUG: t.SrcPos: 20
      //DEBUG: e.KnownVars: 22
      //DEBUG: e.Name: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CheckResult\1*1/4 e.KnownVars/22 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Symbol/9 AsIs: # Name/14 AsIs: t.SrcPos/20 AsIs: e.Name/24 AsIs: )/8 } Tile{ ]] }
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckResult\1*1/4 e.new8/16 (/7 # Closure/9 s.new9/14 e.new10/18 )/8 >/1
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    if( ! refalrts::svar_term( context[14], context[14] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Closure], context[9] ) )
      continue;
    // closed e.new8 as range 16
    // closed e.new10 as range 18
    do {
      // </0 & CheckResult\1*1/4 e.KnownVars/20 (/7 # Closure/9 # Sentences/14 e./22 )/8 >/1
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      context[23] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_Sentences], context[14] ) )
        continue;
      // closed e.KnownVars as range 20
      // closed e. as range 22
      //DEBUG: e.KnownVars: 20
      //DEBUG: e.: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Closure/9 # Sentences/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceRec/4 } Tile{ AsIs: (/7 } Tile{ AsIs: e.KnownVars/20 } Tile{ AsIs: )/8 } Tile{ AsIs: e./22 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CheckSentenceRec]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_elem( res, context[7] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckResult\1*1/4 e.KnownVars/20 (/7 # Closure/9 # NativeBody/14 e./22 )/8 >/1
    context[20] = context[16];
    context[21] = context[17];
    context[22] = context[18];
    context[23] = context[19];
    if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[14] ) )
      continue;
    // closed e.KnownVars as range 20
    // closed e. as range 22
    //DEBUG: e.KnownVars: 20
    //DEBUG: e.: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckResult\1*1/4 e.KnownVars/20 (/7 # Closure/9 # NativeBody/14 e./22 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckResult\1*1/4 e.KnownVars/10 (/7 # Closure/9 e.Body/12 )/8 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = context[5];
    context[13] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Closure], context[9] ) )
      continue;
    // closed e.KnownVars as range 10
    // closed e.Body as range 12
    //DEBUG: e.KnownVars: 10
    //DEBUG: e.Body: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Closure/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckFunctionBodyRec*2/4 } Tile{ AsIs: (/7 } Tile{ AsIs: e.KnownVars/10 } Tile{ AsIs: )/8 } Tile{ AsIs: e.Body/12 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_CheckFunctionBodyRec_D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckResult\1*1/4 e.KnownVars/2 (/7 # Error/9 t.SrcPos/10 s.Type/12 e.Info/5 )/8 >/1
  if( ! refalrts::ident_term( identifiers[ident_Error], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.KnownVars as range 2
  context[11] = refalrts::tvar_left( context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Info as range 5
  //DEBUG: e.KnownVars: 2
  //DEBUG: t.SrcPos: 10
  //DEBUG: s.Type: 12
  //DEBUG: e.Info: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckResult\1*1/4 e.KnownVars/2 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Error/9 AsIs: t.SrcPos/10 AsIs: s.Type/12 AsIs: e.Info/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckResult_L1D1("CheckResult\\1*1", COOKIE1_, COOKIE2_, func_gen_CheckResult_L1D1);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_Reduce_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Reduce$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@1/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@1/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@1/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 Tile{ HalfReuse: & Reduce$1=1@0/0 Reuse: & CheckProgram\1@0/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckProgram_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z1("Reduce$1=1@1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & SeparateDefines\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SeparateDefines_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@2/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & SeparateErrors\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SeparateErrors_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z2("DoMapAccum$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z2);


static refalrts::FnResult func_gen_Reduce_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Reduce$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & Reduce$1=1@2/4 (/7 e./13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e. as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    //DEBUG: e.: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@4/4 AsIs: (/7 AsIs: e./13 AsIs: )/8 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@2/4 (/7 e./5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e. as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@0/4 AsIs: (/7 } & ValidBodyForSpec-CheckSentensePattern@0/13 (/14 Tile{ AsIs: e./5 } )/15 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_Z0]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z2("Reduce$1=1@2", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z2);


static refalrts::FnResult func_gen_Reduce_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Reduce$1=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@3/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & Reduce$1=1@3/4 t.Pattern/5 (/9 e.Tail0/11 )/10 t.Acc$a/15 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Tail0 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: t.Pattern: 5
    //DEBUG: e.Tail0: 11
    //DEBUG: t.Acc$a: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@2/4 AsIs: t.Pattern/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: e.Tail0/11 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@3/4 t.Pattern/5 (/9 e.Tail0/7 )/10 e.dyn/2 >/1
  // closed e.Tail0 as range 7
  // closed e.dyn as range 2
  //DEBUG: t.Pattern: 5
  //DEBUG: e.Tail0: 7
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@0/4 } (/11 & ValidBodyForSpec-CheckSentensePattern@0/12 Tile{ AsIs: t.Pattern/5 } )/13 Tile{ AsIs: (/9 AsIs: e.Tail0/7 AsIs: )/10 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_Z0]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[11], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z3("Reduce$1=1@3", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z3);


static refalrts::FnResult func_gen_Reduce_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Reduce$1=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@4/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@4/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@3/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@4/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 Tile{ HalfReuse: & Reduce$1=1@0/0 Reuse: & ValidBodyForSpec-CheckSentensePattern$1:1$1=1\1@0/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1S1A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z4("Reduce$1=1@4", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z4);


static refalrts::FnResult func_gen_Fetch_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Fetch@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@1/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 & Fetch@2/8 Tile{ AsIs: </0 Reuse: & Map@10/4 AsIs: e.Argument/5 AsIs: >/1 } >/9 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[8], functions[efunc_gen_Fetch_Z2]);
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@1/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: [*]/1 } & Pipe$2\1@0/5 & FindInvalidEntry@0/6 (/7 & CleanupValidForwards@0/8 & FindInvalidForwards@0/9 & FindInvalidDriveInline@0/10 & CheckRedefinitions@0/11 & FindFinalInitEntry@0/12 )/13 {*}/14 >/15 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_FindInvalidEntry_Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_CleanupValidForwards_Z0]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_FindInvalidForwards_Z0]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_FindInvalidDriveInline_Z0]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_CheckRedefinitions_Z0]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_FindFinalInitEntry_Z0]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[1]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[1]);
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z1("Fetch@1", COOKIE1_, COOKIE2_, func_gen_Fetch_Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@3/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & FindInvalidDriveInline=3\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindInvalidDriveInline_A3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z3("DoMapAccum$1=1@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@4/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@4/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & FindInvalidDriveInline=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindInvalidDriveInline_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z4("DoMapAccum$1=1@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z4);


static refalrts::FnResult func_gen_CheckPatternm_Flatten_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & CheckPattern-Flatten@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CheckPattern-Flatten@1/4 e.Items-B/7 (/13 # NewVar/15 t.SrcPos/16 s.Mode/18 '_'/19 e.Index/11 )/14 e.Items-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_NewVar], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Items-E as range 9
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
        continue;
      context[19] = refalrts::char_left( '_', context[11], context[12] );
      if( ! context[19] )
        continue;
      // closed e.Index as range 11
      //DEBUG: e.Items-B: 7
      //DEBUG: e.Items-E: 9
      //DEBUG: t.SrcPos: 16
      //DEBUG: s.Mode: 18
      //DEBUG: e.Index: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-Flatten@1/4 AsIs: e.Items-B/7 AsIs: (/13 Reuse: # Var/15 AsIs: t.SrcPos/16 AsIs: s.Mode/18 AsIs: '_'/19 AsIs: e.Index/11 AsIs: )/14 } (/20 # Error/21 t.SrcPos/16/22 # UnnamedNewVariable/24 s.Mode/18/25 '_'/26 e.Index/11/27 )/29 Tile{ AsIs: e.Items-E/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Error]);
      refalrts::copy_evar(vm, context[22], context[23], context[16], context[17]);
      refalrts::alloc_ident(vm, context[24], identifiers[ident_UnnamedNewVariable]);
      refalrts::copy_stvar(vm, context[25], context[18]);
      refalrts::alloc_char(vm, context[26], '_');
      refalrts::copy_evar(vm, context[27], context[28], context[11], context[12]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::update_ident(context[15], identifiers[ident_Var]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[29] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[20], context[29] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPattern-Flatten@1/4 e.Items-B/7 (/13 # Var/15 t.SrcPos1/16 s.Mode1/18 e.Index/11 )/14 e.Items-M/19 (/25 # NewVar/27 t.SrcPos2/30 s.Mode2/32 e.Index/28 )/26 e.Items-E/21 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
        continue;
      // closed e.Index as range 11
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = refalrts::ident_left( identifiers[ident_NewVar], context[23], context[24] );
        if( ! context[27] )
          continue;
        if( ! refalrts::repeated_evar_right( vm, context[28], context[29], context[11], context[12], context[23], context[24] ) )
          continue;
        // closed e.Items-E as range 21
        context[31] = refalrts::tvar_left( context[30], context[23], context[24] );
        if( ! context[31] )
          continue;
        if( ! refalrts::svar_left( context[32], context[23], context[24] ) )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        //DEBUG: e.Items-B: 7
        //DEBUG: t.SrcPos1: 16
        //DEBUG: s.Mode1: 18
        //DEBUG: e.Index: 11
        //DEBUG: e.Items-M: 19
        //DEBUG: e.Items-E: 21
        //DEBUG: t.SrcPos2: 30
        //DEBUG: s.Mode2: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-Flatten@1/4 AsIs: e.Items-B/7 AsIs: (/13 AsIs: # Var/15 AsIs: t.SrcPos1/16 AsIs: s.Mode1/18 AsIs: e.Index/11 AsIs: )/14 AsIs: e.Items-M/19 AsIs: (/25 Reuse: # Var/27 AsIs: t.SrcPos2/30 AsIs: s.Mode2/32 AsIs: e.Index/28 AsIs: )/26 } (/33 # Error/34 t.SrcPos2/30/35 # AlreadyBounded/37 s.Mode2/32/38 e.Index/28/39 )/41 Tile{ AsIs: e.Items-E/21 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[33]);
        refalrts::alloc_ident(vm, context[34], identifiers[ident_Error]);
        refalrts::copy_evar(vm, context[35], context[36], context[30], context[31]);
        refalrts::alloc_ident(vm, context[37], identifiers[ident_AlreadyBounded]);
        refalrts::copy_stvar(vm, context[38], context[32]);
        refalrts::copy_evar(vm, context[39], context[40], context[28], context[29]);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::update_ident(context[27], identifiers[ident_Var]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[33], context[41] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[33], context[41] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPattern-Flatten@1/4 e.Items/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Items as range 5
    //DEBUG: e.Items: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 & DoMapAccum@5/8 (/9 )/10 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.Items/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[8], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPattern-Flatten@1/4 e.dyn1/2 >/1
  // closed e.dyn1 as range 2
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & CheckPattern-Flatten@0/6 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_CheckPatternm_Flatten_Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternm_Flatten_Z1("CheckPattern-Flatten@1", COOKIE1_, COOKIE2_, func_gen_CheckPatternm_Flatten_Z1);


static refalrts::FnResult func_gen_CheckPatternm_WarnRepeatedRec_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & CheckPattern-WarnRepeatedRec@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CheckPattern-WarnRepeatedRec@1/4 e.OpenEPattern/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.OpenEPattern as range 5
    //DEBUG: e.OpenEPattern: 5
    //5: e.OpenEPattern
    //10: e.OpenEPattern

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_Z1S1C1]);
    refalrts::copy_evar(vm, context[10], context[11], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & CheckPattern-WarnRepeatedRec@1$1?1/11 e._/12 (/18 # Var/20 t._/21 'e'/23 e._0/16 )/19 e._1/24 (/30 # Var/32 t._0/33 'e'/35 e._2/28 )/31 e._3/26 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = 0;
      context[13] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[14] = context[9];
        context[15] = context[10];
        context[16] = 0;
        context[17] = 0;
        context[18] = refalrts::brackets_left( context[16], context[17], context[14], context[15] );
        if( ! context[18] )
          continue;
        refalrts::bracket_pointers(context[18], context[19]);
        context[20] = refalrts::ident_left( identifiers[ident_Var], context[16], context[17] );
        if( ! context[20] )
          continue;
        context[22] = refalrts::tvar_left( context[21], context[16], context[17] );
        if( ! context[22] )
          continue;
        context[23] = refalrts::char_left( 'e', context[16], context[17] );
        if( ! context[23] )
          continue;
        // closed e._0 as range 16
        context[24] = 0;
        context[25] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[26] = context[14];
          context[27] = context[15];
          context[28] = 0;
          context[29] = 0;
          context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
          if( ! context[30] )
            continue;
          refalrts::bracket_pointers(context[30], context[31]);
          context[32] = refalrts::ident_left( identifiers[ident_Var], context[28], context[29] );
          if( ! context[32] )
            continue;
          // closed e._3 as range 26
          context[34] = refalrts::tvar_left( context[33], context[28], context[29] );
          if( ! context[34] )
            continue;
          context[35] = refalrts::char_left( 'e', context[28], context[29] );
          if( ! context[35] )
            continue;
          // closed e._2 as range 28
          //DEBUG: e.OpenEPattern: 5
          //DEBUG: e._: 12
          //DEBUG: t._: 21
          //DEBUG: e._0: 16
          //DEBUG: e._1: 24
          //DEBUG: e._3: 26
          //DEBUG: t._0: 33
          //DEBUG: e._2: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} e._/12 {REMOVED TILE} t._/21 'e'/23 e._0/16 )/19 e._1/24 (/30 # Var/32 t._0/33 'e'/35 e._2/28 )/31 e._3/26 >/8 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & CheckPattern-WarnRepeatedRec@1/20 } Tile{ AsIs: </0 Reuse: & ReducePattern/4 AsIs: e.OpenEPattern/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
          refalrts::reinit_open_call(context[18]);
          refalrts::reinit_name(context[20], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_Z1]);
          refalrts::update_name(context[4], functions[efunc_ReducePattern]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_close_call(context[11]);
          refalrts::push_stack( vm, context[11] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[0], context[11] );
          res = refalrts::splice_evar( res, context[18], context[20] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[24], context[25], context[14], context[15] ) );
      } while ( refalrts::open_evar_advance( context[12], context[13], context[9], context[10] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPattern-WarnRepeatedRec@1/4 (/9 s.new1/11 e.new2/7 )/10 e.new3/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new3 as range 5
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    // closed e.new2 as range 7
    do {
      // </0 & CheckPattern-WarnRepeatedRec@1/4 (/9 # Var/11 e.new5/12 )/10 e.new4/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::ident_term( identifiers[ident_Var], context[11] ) )
        continue;
      // closed e.new5 as range 12
      // closed e.new4 as range 14
      do {
        // </0 & CheckPattern-WarnRepeatedRec@1/4 (/9 # Var/11 t./20 s.Mode/22 '_'/23 e.1/16 )/10 e.Tail/18 >/1
        context[16] = context[12];
        context[17] = context[13];
        context[18] = context[14];
        context[19] = context[15];
        // closed e.Tail as range 18
        context[21] = refalrts::tvar_left( context[20], context[16], context[17] );
        if( ! context[21] )
          continue;
        if( ! refalrts::svar_left( context[22], context[16], context[17] ) )
          continue;
        context[23] = refalrts::char_left( '_', context[16], context[17] );
        if( ! context[23] )
          continue;
        // closed e.1 as range 16
        //DEBUG: e.Tail: 18
        //DEBUG: t.: 20
        //DEBUG: s.Mode: 22
        //DEBUG: e.1: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & CheckPattern-WarnRepeatedRec@1/4 (/9 # Var/11 t./20 s.Mode/22 '_'/23 e.1/16 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckPattern-WarnRepeatedRec@1/10 AsIs: e.Tail/18 AsIs: >/1 ]] }
        refalrts::reinit_name(context[10], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckPattern-WarnRepeatedRec@1/4 (/9 # Var/11 e.Info/16 )/10 e.Tail/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      // closed e.Info as range 16
      // closed e.Tail as range 18
      //DEBUG: e.Info: 16
      //DEBUG: e.Tail: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </20 & CheckVariableRepeating*1/21 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/9 AsIs: # Var/11 AsIs: e.Info/16 AsIs: )/10 } >/22 </23 & CheckPattern-WarnRepeatedRec@1/24 Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_gen_CheckVariableRepeating_D1]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_Z1]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[0], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[0], context[10] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckPattern-WarnRepeatedRec@1/4 (/9 # NewVar/11 e.Info/12 )/10 e.Tail/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::ident_term( identifiers[ident_NewVar], context[11] ) )
        continue;
      // closed e.Info as range 12
      // closed e.Tail as range 14
      //DEBUG: e.Info: 12
      //DEBUG: e.Tail: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckPattern-WarnRepeatedRec@1/4 (/9 # NewVar/11 e.Info/12 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckPattern-WarnRepeatedRec@1/10 AsIs: e.Tail/14 AsIs: >/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckPattern-WarnRepeatedRec@1/4 (/9 # Symbol/11 e.Info/12 )/10 e.Tail/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[11] ) )
        continue;
      // closed e.Info as range 12
      // closed e.Tail as range 14
      //DEBUG: e.Info: 12
      //DEBUG: e.Tail: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckPattern-WarnRepeatedRec@1/4 (/9 # Symbol/11 e.Info/12 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckPattern-WarnRepeatedRec@1/10 AsIs: e.Tail/14 AsIs: >/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckPattern-WarnRepeatedRec@1/4 (/9 # Brackets/11 e.InBrackets/12 )/10 e.Tail/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[11] ) )
        continue;
      // closed e.InBrackets as range 12
      // closed e.Tail as range 14
      //DEBUG: e.InBrackets: 12
      //DEBUG: e.Tail: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-WarnRepeatedRec@1/4 } Tile{ AsIs: e.InBrackets/12 } Tile{ HalfReuse: >/9 HalfReuse: </11 } Tile{ HalfReuse: & CheckPattern-WarnRepeatedRec@1/10 AsIs: e.Tail/14 AsIs: >/1 ]] }
      refalrts::reinit_close_call(context[9]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[10], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[9], context[11] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckPattern-WarnRepeatedRec@1/4 (/9 # ADT-Brackets/11 t.SrcPos/16 (/20 e.Name/18 )/21 e.InBrackets/12 )/10 e.Tail/14 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[11] ) )
      continue;
    // closed e.Tail as range 14
    context[17] = refalrts::tvar_left( context[16], context[12], context[13] );
    if( ! context[17] )
      continue;
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[12], context[13] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    // closed e.Name as range 18
    // closed e.InBrackets as range 12
    //DEBUG: e.Tail: 14
    //DEBUG: t.SrcPos: 16
    //DEBUG: e.Name: 18
    //DEBUG: e.InBrackets: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.SrcPos/16 (/20 e.Name/18 )/21 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckPattern-WarnRepeatedRec@1/4 } Tile{ AsIs: e.InBrackets/12 } Tile{ HalfReuse: >/9 HalfReuse: </11 } Tile{ HalfReuse: & CheckPattern-WarnRepeatedRec@1/10 AsIs: e.Tail/14 AsIs: >/1 ]] }
    refalrts::reinit_close_call(context[9]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[10], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_evar( res, context[9], context[11] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPattern-WarnRepeatedRec@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckPattern-WarnRepeatedRec@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPattern-WarnRepeatedRec@1/4 e.dyn1/2 >/1
  // closed e.dyn1 as range 2
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPattern-WarnRepeatedRec@0/4 } (/5 )/6 (/7 Tile{ AsIs: e.dyn1/2 } )/8 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternm_WarnRepeatedRec_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternm_WarnRepeatedRec_Z1("CheckPattern-WarnRepeatedRec@1", COOKIE1_, COOKIE2_, func_gen_CheckPatternm_WarnRepeatedRec_Z1);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 64 elems
  refalrts::Iter context[64];
  refalrts::zeros( context, 64 );
  // </0 & DoCheckAssignments$2=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 s.new8/33 s.new9/34 (/37 e.new10/35 )/38 e.new11/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  if( ! refalrts::svar_left( context[33], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[34], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  // closed e.new10 as range 35
  // closed e.new11 as range 2
  do {
    // </0 & DoCheckAssignments$2=1@1/4 (/7 e.Assignments0/39 )/8 (/11 e.Errors0/41 )/12 (/15 e.ResultFunctionsAndErrors0/43 )/16 (/19 e.BlocksFunctionsAndErrors/45 )/20 (/23 e.PatternFunctionsAndErrors/47 )/24 (/27 e.Pattern0/49 )/28 (/31 e.ScopeVars$a/51 )/32 s.Backtrack$b/33 s.ChainType0/34 (/37 e.Blocks0/53 )/38 e.ResultFunctionsAndErrors/55 >/1
    context[39] = context[5];
    context[40] = context[6];
    context[41] = context[9];
    context[42] = context[10];
    context[43] = context[13];
    context[44] = context[14];
    context[45] = context[17];
    context[46] = context[18];
    context[47] = context[21];
    context[48] = context[22];
    context[49] = context[25];
    context[50] = context[26];
    context[51] = context[29];
    context[52] = context[30];
    context[53] = context[35];
    context[54] = context[36];
    context[55] = context[2];
    context[56] = context[3];
    // closed e.Assignments0 as range 39
    // closed e.Errors0 as range 41
    // closed e.ResultFunctionsAndErrors0 as range 43
    // closed e.BlocksFunctionsAndErrors as range 45
    // closed e.PatternFunctionsAndErrors as range 47
    // closed e.Pattern0 as range 49
    // closed e.ScopeVars$a as range 51
    // closed e.Blocks0 as range 53
    // closed e.ResultFunctionsAndErrors as range 55
    //DEBUG: s.Backtrack$b: 33
    //DEBUG: s.ChainType0: 34
    //DEBUG: e.Assignments0: 39
    //DEBUG: e.Errors0: 41
    //DEBUG: e.ResultFunctionsAndErrors0: 43
    //DEBUG: e.BlocksFunctionsAndErrors: 45
    //DEBUG: e.PatternFunctionsAndErrors: 47
    //DEBUG: e.Pattern0: 49
    //DEBUG: e.ScopeVars$a: 51
    //DEBUG: e.Blocks0: 53
    //DEBUG: e.ResultFunctionsAndErrors: 55

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=2@1/4 AsIs: (/7 AsIs: e.Assignments0/39 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/41 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/43 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors/45 AsIs: )/20 AsIs: (/23 AsIs: e.PatternFunctionsAndErrors/47 AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.ResultFunctionsAndErrors/55 } )/57 (/58 Tile{ AsIs: e.Pattern0/49 } Tile{ AsIs: )/28 AsIs: (/31 AsIs: e.ScopeVars$a/51 AsIs: )/32 AsIs: s.Backtrack$b/33 AsIs: s.ChainType0/34 HalfReuse: </37 } & Map@13/59 (/60 e.ScopeVars$a/51/61 Tile{ AsIs: )/38 } Tile{ AsIs: e.Blocks0/53 } >/63 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_gen_Map_Z13]);
    refalrts::alloc_open_bracket(vm, context[60]);
    refalrts::copy_evar(vm, context[61], context[62], context[51], context[52]);
    refalrts::alloc_close_call(vm, context[63]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A2Z1]);
    refalrts::reinit_open_call(context[37]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[63] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[60], context[38] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[58], context[28] );
    refalrts::link_brackets( context[27], context[57] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[63] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_evar( res, context[28], context[37] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=1@1/4 (/7 e.Assignments0/5 )/8 (/11 e.Errors0/9 )/12 (/15 e.ResultFunctionsAndErrors0/13 )/16 (/19 e.BlocksFunctionsAndErrors/17 )/20 (/23 e.PatternFunctionsAndErrors/21 )/24 (/27 e.Pattern0/25 )/28 (/31 e.ScopeVars$a/29 )/32 s.Backtrack$b/33 s.ChainType0/34 (/37 e.Blocks0/35 )/38 e.dyn/2 >/1
  // closed e.Assignments0 as range 5
  // closed e.Errors0 as range 9
  // closed e.ResultFunctionsAndErrors0 as range 13
  // closed e.BlocksFunctionsAndErrors as range 17
  // closed e.PatternFunctionsAndErrors as range 21
  // closed e.Pattern0 as range 25
  // closed e.ScopeVars$a as range 29
  // closed e.Blocks0 as range 35
  // closed e.dyn as range 2
  //DEBUG: s.Backtrack$b: 33
  //DEBUG: s.ChainType0: 34
  //DEBUG: e.Assignments0: 5
  //DEBUG: e.Errors0: 9
  //DEBUG: e.ResultFunctionsAndErrors0: 13
  //DEBUG: e.BlocksFunctionsAndErrors: 17
  //DEBUG: e.PatternFunctionsAndErrors: 21
  //DEBUG: e.Pattern0: 25
  //DEBUG: e.ScopeVars$a: 29
  //DEBUG: e.Blocks0: 35
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} )/20 (/23 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=1@0/4 AsIs: (/7 AsIs: e.Assignments0/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Errors0/9 } Tile{ AsIs: e.ResultFunctionsAndErrors0/13 } Tile{ AsIs: e.BlocksFunctionsAndErrors/17 } Tile{ AsIs: e.PatternFunctionsAndErrors/21 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.Pattern0/25 AsIs: )/28 AsIs: (/31 AsIs: e.ScopeVars$a/29 AsIs: )/32 AsIs: s.Backtrack$b/33 AsIs: s.ChainType0/34 AsIs: (/37 AsIs: e.Blocks0/35 AsIs: )/38 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[11], context[24] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[24];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A1Z1("DoCheckAssignments$2=1@1", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@5/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@5/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@5/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@5/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & CheckPattern-Flatten$3\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternm_Flatten_S3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z5("DoMapAccum$1=1@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z5);


static refalrts::FnResult func_gen_Reduce_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & Reduce@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@4/4 (/7 e.new1/5 )/8 t.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce@4/4 (/7 e.new7/11 )/8 t.new4/9 t.new5/15 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & Reduce@4/4 (/7 e.new12/17 )/8 (/9 s.new8/23 e.new9/21 )/10 t.new10/15 e.new11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[9] ) )
        continue;
      // closed e.new12 as range 17
      // closed e.new11 as range 19
      if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
        continue;
      // closed e.new9 as range 21
      do {
        // </0 & Reduce@4/4 (/7 e./24 )/8 (/9 # True/23 e.2/26 )/10 (/15 (/34 e.4/32 )/35 e.3/30 )/16 e.Tail/28 >/1
        context[24] = context[17];
        context[25] = context[18];
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[19];
        context[29] = context[20];
        context[30] = 0;
        context[31] = 0;
        if( ! refalrts::brackets_term( context[30], context[31], context[15] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_True], context[23] ) )
          continue;
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        refalrts::bracket_pointers(context[34], context[35]);
        // closed e. as range 24
        // closed e.2 as range 26
        // closed e.4 as range 32
        // closed e.3 as range 30
        // closed e.Tail as range 28
        //DEBUG: e.: 24
        //DEBUG: e.2: 26
        //DEBUG: e.4: 32
        //DEBUG: e.3: 30
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.3/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@2/4 AsIs: (/7 AsIs: e./24 AsIs: )/8 AsIs: (/9 } Tile{ AsIs: e.Tail/28 } Tile{ AsIs: )/16 } </36 & ValidBodyForSpec-CheckSentensePattern$1:1/37 Tile{ HalfReuse: (/23 AsIs: e.2/26 AsIs: )/10 HalfReuse: </15 HalfReuse: & GenericMatch/34 } (/38 </39 & RemovePos-Expr/40 Tile{ AsIs: e.4/32 } >/41 Tile{ AsIs: )/35 } (/42 </43 & RemovePos-Expr/44 e./24/45 >/47 )/48 >/49 >/50 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_S1B1]);
        refalrts::alloc_open_bracket(vm, context[38]);
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_name(vm, context[40], functions[efunc_RemovePosm_Expr]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::alloc_open_bracket(vm, context[42]);
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[44], functions[efunc_RemovePosm_Expr]);
        refalrts::copy_evar(vm, context[45], context[46], context[24], context[25]);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_close_bracket(vm, context[48]);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z2]);
        refalrts::reinit_open_bracket(context[23]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[34], functions[efunc_GenericMatch]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[42], context[48] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[43] );
        refalrts::link_brackets( context[38], context[35] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[39] );
        refalrts::link_brackets( context[23], context[10] );
        refalrts::link_brackets( context[9], context[16] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[42], context[50] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[23], context[34] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@4/4 (/7 e./24 )/8 (/9 # False/23 e.1/26 )/10 t.Next/15 e.Tail/28 >/1
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[19];
      context[29] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_False], context[23] ) )
        continue;
      // closed e. as range 24
      // closed e.1 as range 26
      // closed e.Tail as range 28
      //DEBUG: t.Next: 15
      //DEBUG: e.: 24
      //DEBUG: e.1: 26
      //DEBUG: e.Tail: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@4/4 AsIs: (/7 AsIs: e./24 AsIs: )/8 AsIs: (/9 AsIs: # False/23 AsIs: e.1/26 AsIs: )/10 } Tile{ AsIs: e.Tail/28 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, context[10], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@4/4 (/7 e./17 )/8 t.Acc/9 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e. as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 9
    //DEBUG: t.Next: 15
    //DEBUG: e.: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </21 & Reduce$1=1@2/22 (/23 e./17/24 )/26 (/27 Tile{ AsIs: e.Tail/19 } )/28 Tile{ AsIs: </0 Reuse: & ValidBodyForSpec-CheckSentensePattern*2/4 AsIs: (/7 AsIs: e./17 AsIs: )/8 AsIs: t.Acc/9 AsIs: t.Next/15 } >/29 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Reduce_S1A1Z2]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::copy_evar(vm, context[24], context[25], context[17], context[18]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[0], context[16] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[21], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@4/4 (/7 e./11 )/8 t.Acc/9 >/1
    context[11] = context[5];
    context[12] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e. as range 11
    //DEBUG: t.Acc: 9
    //DEBUG: e.: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@4/4 (/7 e./11 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/9 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@4/4 (/7 e./5 )/8 t.accum/9 e.items/2 >/1
  // closed e. as range 5
  // closed e.items as range 2
  //DEBUG: t.accum: 9
  //DEBUG: e.: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@0/4 AsIs: (/7 } & ValidBodyForSpec-CheckSentensePattern@0/11 (/12 Tile{ AsIs: e./5 } )/13 Tile{ AsIs: )/8 AsIs: t.accum/9 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_ValidBodyForSpecm_CheckSentensePattern_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z4("Reduce@4", COOKIE1_, COOKIE2_, func_gen_Reduce_Z4);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 96 elems
  refalrts::Iter context[96];
  refalrts::zeros( context, 96 );
  // </0 & DoCheckAssignments$2=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=2@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 (/35 e.new8/33 )/36 s.new9/37 s.new10/38 e.new11/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  // closed e.new8 as range 33
  if( ! refalrts::svar_left( context[37], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[38], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new11 as range 2
  do {
    // </0 & DoCheckAssignments$2=2@1/4 (/7 e.Assignments0/39 )/8 (/11 e.Errors0/41 )/12 (/15 e.ResultFunctionsAndErrors0/43 )/16 (/19 e.BlocksFunctionsAndErrors0/45 )/20 (/23 e.PatternFunctionsAndErrors/47 )/24 (/27 e.ResultFunctionsAndErrors1/49 )/28 (/31 e.Pattern0/51 )/32 (/35 e.ScopeVars$a/53 )/36 s.Backtrack$b/37 # Assign/38 e.BlocksFunctionsAndErrors/55 >/1
    context[39] = context[5];
    context[40] = context[6];
    context[41] = context[9];
    context[42] = context[10];
    context[43] = context[13];
    context[44] = context[14];
    context[45] = context[17];
    context[46] = context[18];
    context[47] = context[21];
    context[48] = context[22];
    context[49] = context[25];
    context[50] = context[26];
    context[51] = context[29];
    context[52] = context[30];
    context[53] = context[33];
    context[54] = context[34];
    context[55] = context[2];
    context[56] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[38] ) )
      continue;
    // closed e.Assignments0 as range 39
    // closed e.Errors0 as range 41
    // closed e.ResultFunctionsAndErrors0 as range 43
    // closed e.BlocksFunctionsAndErrors0 as range 45
    // closed e.PatternFunctionsAndErrors as range 47
    // closed e.ResultFunctionsAndErrors1 as range 49
    // closed e.Pattern0 as range 51
    // closed e.ScopeVars$a as range 53
    // closed e.BlocksFunctionsAndErrors as range 55
    //DEBUG: s.Backtrack$b: 37
    //DEBUG: e.Assignments0: 39
    //DEBUG: e.Errors0: 41
    //DEBUG: e.ResultFunctionsAndErrors0: 43
    //DEBUG: e.BlocksFunctionsAndErrors0: 45
    //DEBUG: e.PatternFunctionsAndErrors: 47
    //DEBUG: e.ResultFunctionsAndErrors1: 49
    //DEBUG: e.Pattern0: 51
    //DEBUG: e.ScopeVars$a: 53
    //DEBUG: e.BlocksFunctionsAndErrors: 55

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Backtrack$b/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@3/4 AsIs: (/7 AsIs: e.Assignments0/39 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/41 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/43 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/45 AsIs: )/20 AsIs: (/23 AsIs: e.PatternFunctionsAndErrors/47 AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/49 AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.BlocksFunctionsAndErrors/55 } )/57 (/58 Tile{ AsIs: e.Pattern0/51 } Tile{ HalfReuse: )/38 } </59 Tile{ HalfReuse: & CheckPattern-Flatten/32 AsIs: (/35 AsIs: e.ScopeVars$a/53 AsIs: )/36 } </60 & Map@12/61 e.Pattern0/51/62 >/64 >/65 </66 & CheckPattern-WarnRepeatedRec/67 (/68 e.ScopeVars$a/53/69 )/71 (/72 e.Pattern0/51/73 )/75 >/76 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::alloc_open_call(vm, context[59]);
    refalrts::alloc_open_call(vm, context[60]);
    refalrts::alloc_name(vm, context[61], functions[efunc_gen_Map_Z12]);
    refalrts::copy_evar(vm, context[62], context[63], context[51], context[52]);
    refalrts::alloc_close_call(vm, context[64]);
    refalrts::alloc_close_call(vm, context[65]);
    refalrts::alloc_open_call(vm, context[66]);
    refalrts::alloc_name(vm, context[67], functions[efunc_CheckPatternm_WarnRepeatedRec]);
    refalrts::alloc_open_bracket(vm, context[68]);
    refalrts::copy_evar(vm, context[69], context[70], context[53], context[54]);
    refalrts::alloc_close_bracket(vm, context[71]);
    refalrts::alloc_open_bracket(vm, context[72]);
    refalrts::copy_evar(vm, context[73], context[74], context[51], context[52]);
    refalrts::alloc_close_bracket(vm, context[75]);
    refalrts::alloc_close_call(vm, context[76]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z3]);
    refalrts::reinit_close_bracket(context[38]);
    refalrts::reinit_name(context[32], functions[efunc_CheckPatternm_Flatten]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[76] );
    refalrts::push_stack( vm, context[66] );
    refalrts::link_brackets( context[72], context[75] );
    refalrts::link_brackets( context[68], context[71] );
    refalrts::push_stack( vm, context[65] );
    refalrts::push_stack( vm, context[59] );
    refalrts::push_stack( vm, context[64] );
    refalrts::push_stack( vm, context[60] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[58], context[38] );
    refalrts::link_brackets( context[31], context[57] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[60], context[76] );
    res = refalrts::splice_evar( res, context[32], context[36] );
    res = refalrts::splice_elem( res, context[59] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    refalrts::splice_to_freelist_open( vm, context[31], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoCheckAssignments$2=2@1/4 (/7 e.new14/39 )/8 (/11 e.new15/41 )/12 (/15 e.new16/43 )/16 (/19 e.new17/45 )/20 (/23 e.new18/47 )/24 (/27 e.new19/49 )/28 (/31 e.new20/51 )/32 (/35 e.new21/53 )/36 s.new12/37 # Condition/38 e.new13/55 >/1
    context[39] = context[5];
    context[40] = context[6];
    context[41] = context[9];
    context[42] = context[10];
    context[43] = context[13];
    context[44] = context[14];
    context[45] = context[17];
    context[46] = context[18];
    context[47] = context[21];
    context[48] = context[22];
    context[49] = context[25];
    context[50] = context[26];
    context[51] = context[29];
    context[52] = context[30];
    context[53] = context[33];
    context[54] = context[34];
    context[55] = context[2];
    context[56] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Condition], context[38] ) )
      continue;
    // closed e.new14 as range 39
    // closed e.new15 as range 41
    // closed e.new16 as range 43
    // closed e.new17 as range 45
    // closed e.new18 as range 47
    // closed e.new19 as range 49
    // closed e.new20 as range 51
    // closed e.new21 as range 53
    // closed e.new13 as range 55
    do {
      // </0 & DoCheckAssignments$2=2@1/4 (/7 e.Assignments0/57 )/8 (/11 e.Errors0/59 )/12 (/15 e.ResultFunctionsAndErrors0/61 )/16 (/19 e.BlocksFunctionsAndErrors0/63 )/20 (/23 e.PatternFunctionsAndErrors/65 )/24 (/27 e.ResultFunctionsAndErrors1/67 )/28 (/31 e.Pattern0/69 )/32 (/35 e.ScopeVars$a/71 )/36 # OneWay/37 # Condition/38 e.BlocksFunctionsAndErrors/73 >/1
      context[57] = context[39];
      context[58] = context[40];
      context[59] = context[41];
      context[60] = context[42];
      context[61] = context[43];
      context[62] = context[44];
      context[63] = context[45];
      context[64] = context[46];
      context[65] = context[47];
      context[66] = context[48];
      context[67] = context[49];
      context[68] = context[50];
      context[69] = context[51];
      context[70] = context[52];
      context[71] = context[53];
      context[72] = context[54];
      context[73] = context[55];
      context[74] = context[56];
      if( ! refalrts::ident_term( identifiers[ident_OneWay], context[37] ) )
        continue;
      // closed e.Assignments0 as range 57
      // closed e.Errors0 as range 59
      // closed e.ResultFunctionsAndErrors0 as range 61
      // closed e.BlocksFunctionsAndErrors0 as range 63
      // closed e.PatternFunctionsAndErrors as range 65
      // closed e.ResultFunctionsAndErrors1 as range 67
      // closed e.Pattern0 as range 69
      // closed e.ScopeVars$a as range 71
      // closed e.BlocksFunctionsAndErrors as range 73
      //DEBUG: e.Assignments0: 57
      //DEBUG: e.Errors0: 59
      //DEBUG: e.ResultFunctionsAndErrors0: 61
      //DEBUG: e.BlocksFunctionsAndErrors0: 63
      //DEBUG: e.PatternFunctionsAndErrors: 65
      //DEBUG: e.ResultFunctionsAndErrors1: 67
      //DEBUG: e.Pattern0: 69
      //DEBUG: e.ScopeVars$a: 71
      //DEBUG: e.BlocksFunctionsAndErrors: 73

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@3/4 AsIs: (/7 AsIs: e.Assignments0/57 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/59 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/61 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/63 AsIs: )/20 AsIs: (/23 AsIs: e.PatternFunctionsAndErrors/65 AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/67 AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.BlocksFunctionsAndErrors/73 } )/75 (/76 Tile{ AsIs: e.Pattern0/69 } )/77 </78 Tile{ HalfReuse: & CheckPattern-Flatten/32 AsIs: (/35 AsIs: e.ScopeVars$a/71 AsIs: )/36 HalfReuse: </37 HalfReuse: & Map@12/38 } e.Pattern0/69/79 >/81 >/82 </83 & CheckPattern-WarnRepeatedRec/84 (/85 e.ScopeVars$a/71/86 )/88 (/89 e.Pattern0/69/90 )/92 >/93 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[75]);
      refalrts::alloc_open_bracket(vm, context[76]);
      refalrts::alloc_close_bracket(vm, context[77]);
      refalrts::alloc_open_call(vm, context[78]);
      refalrts::copy_evar(vm, context[79], context[80], context[69], context[70]);
      refalrts::alloc_close_call(vm, context[81]);
      refalrts::alloc_close_call(vm, context[82]);
      refalrts::alloc_open_call(vm, context[83]);
      refalrts::alloc_name(vm, context[84], functions[efunc_CheckPatternm_WarnRepeatedRec]);
      refalrts::alloc_open_bracket(vm, context[85]);
      refalrts::copy_evar(vm, context[86], context[87], context[71], context[72]);
      refalrts::alloc_close_bracket(vm, context[88]);
      refalrts::alloc_open_bracket(vm, context[89]);
      refalrts::copy_evar(vm, context[90], context[91], context[69], context[70]);
      refalrts::alloc_close_bracket(vm, context[92]);
      refalrts::alloc_close_call(vm, context[93]);
      refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z3]);
      refalrts::reinit_name(context[32], functions[efunc_CheckPatternm_Flatten]);
      refalrts::reinit_open_call(context[37]);
      refalrts::reinit_name(context[38], functions[efunc_gen_Map_Z12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[93] );
      refalrts::push_stack( vm, context[83] );
      refalrts::link_brackets( context[89], context[92] );
      refalrts::link_brackets( context[85], context[88] );
      refalrts::push_stack( vm, context[82] );
      refalrts::push_stack( vm, context[78] );
      refalrts::push_stack( vm, context[81] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[76], context[77] );
      refalrts::link_brackets( context[31], context[75] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[81], context[93] );
      res = refalrts::splice_evar( res, context[79], context[80] );
      res = refalrts::splice_evar( res, context[32], context[38] );
      res = refalrts::splice_evar( res, context[77], context[78] );
      res = refalrts::splice_evar( res, context[69], context[70] );
      res = refalrts::splice_evar( res, context[75], context[76] );
      res = refalrts::splice_evar( res, context[73], context[74] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoCheckAssignments$2=2@1/4 (/7 e.Assignments0/57 )/8 (/11 e.Errors0/59 )/12 (/15 e.ResultFunctionsAndErrors0/61 )/16 (/19 e.BlocksFunctionsAndErrors0/63 )/20 (/23 e.PatternFunctionsAndErrors/65 )/24 (/27 e.ResultFunctionsAndErrors1/67 )/28 (/31 e.Pattern0/69 )/32 (/35 e.ScopeVars$a/71 )/36 # WithBacktrack/37 # Condition/38 e.BlocksFunctionsAndErrors/73 >/1
      context[57] = context[39];
      context[58] = context[40];
      context[59] = context[41];
      context[60] = context[42];
      context[61] = context[43];
      context[62] = context[44];
      context[63] = context[45];
      context[64] = context[46];
      context[65] = context[47];
      context[66] = context[48];
      context[67] = context[49];
      context[68] = context[50];
      context[69] = context[51];
      context[70] = context[52];
      context[71] = context[53];
      context[72] = context[54];
      context[73] = context[55];
      context[74] = context[56];
      if( ! refalrts::ident_term( identifiers[ident_WithBacktrack], context[37] ) )
        continue;
      // closed e.Assignments0 as range 57
      // closed e.Errors0 as range 59
      // closed e.ResultFunctionsAndErrors0 as range 61
      // closed e.BlocksFunctionsAndErrors0 as range 63
      // closed e.PatternFunctionsAndErrors as range 65
      // closed e.ResultFunctionsAndErrors1 as range 67
      // closed e.Pattern0 as range 69
      // closed e.ScopeVars$a as range 71
      // closed e.BlocksFunctionsAndErrors as range 73
      //DEBUG: e.Assignments0: 57
      //DEBUG: e.Errors0: 59
      //DEBUG: e.ResultFunctionsAndErrors0: 61
      //DEBUG: e.BlocksFunctionsAndErrors0: 63
      //DEBUG: e.PatternFunctionsAndErrors: 65
      //DEBUG: e.ResultFunctionsAndErrors1: 67
      //DEBUG: e.Pattern0: 69
      //DEBUG: e.ScopeVars$a: 71
      //DEBUG: e.BlocksFunctionsAndErrors: 73

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@4/4 AsIs: (/7 AsIs: e.Assignments0/57 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/59 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/61 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/63 AsIs: )/20 AsIs: (/23 AsIs: e.PatternFunctionsAndErrors/65 AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/67 AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.BlocksFunctionsAndErrors/73 } )/75 (/76 Tile{ AsIs: e.Pattern0/69 } )/77 </78 Tile{ HalfReuse: & CheckPattern-Flatten/32 AsIs: (/35 AsIs: e.ScopeVars$a/71 AsIs: )/36 HalfReuse: </37 HalfReuse: & Map@12/38 } e.Pattern0/69/79 >/81 >/82 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[75]);
      refalrts::alloc_open_bracket(vm, context[76]);
      refalrts::alloc_close_bracket(vm, context[77]);
      refalrts::alloc_open_call(vm, context[78]);
      refalrts::copy_evar(vm, context[79], context[80], context[69], context[70]);
      refalrts::alloc_close_call(vm, context[81]);
      refalrts::alloc_close_call(vm, context[82]);
      refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z4]);
      refalrts::reinit_name(context[32], functions[efunc_CheckPatternm_Flatten]);
      refalrts::reinit_open_call(context[37]);
      refalrts::reinit_name(context[38], functions[efunc_gen_Map_Z12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[82] );
      refalrts::push_stack( vm, context[78] );
      refalrts::push_stack( vm, context[81] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[76], context[77] );
      refalrts::link_brackets( context[31], context[75] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[81], context[82] );
      res = refalrts::splice_evar( res, context[79], context[80] );
      res = refalrts::splice_evar( res, context[32], context[38] );
      res = refalrts::splice_evar( res, context[77], context[78] );
      res = refalrts::splice_evar( res, context[69], context[70] );
      res = refalrts::splice_evar( res, context[75], context[76] );
      res = refalrts::splice_evar( res, context[73], context[74] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoCheckAssignments$2=2@1/4 (/7 e.Assignments0/57 )/8 (/11 e.Errors0/59 )/12 (/15 e.ResultFunctionsAndErrors0/61 )/16 (/19 e.BlocksFunctionsAndErrors0/63 )/20 (/23 e.PatternFunctionsAndErrors/65 )/24 (/27 e.ResultFunctionsAndErrors1/67 )/28 (/31 e.Pattern0/69 )/32 (/35 e.ScopeVars$a/71 )/36 s.Backtrack$b/37 # Condition/38 e.BlocksFunctionsAndErrors/73 >/1
    context[57] = context[39];
    context[58] = context[40];
    context[59] = context[41];
    context[60] = context[42];
    context[61] = context[43];
    context[62] = context[44];
    context[63] = context[45];
    context[64] = context[46];
    context[65] = context[47];
    context[66] = context[48];
    context[67] = context[49];
    context[68] = context[50];
    context[69] = context[51];
    context[70] = context[52];
    context[71] = context[53];
    context[72] = context[54];
    context[73] = context[55];
    context[74] = context[56];
    // closed e.Assignments0 as range 57
    // closed e.Errors0 as range 59
    // closed e.ResultFunctionsAndErrors0 as range 61
    // closed e.BlocksFunctionsAndErrors0 as range 63
    // closed e.PatternFunctionsAndErrors as range 65
    // closed e.ResultFunctionsAndErrors1 as range 67
    // closed e.Pattern0 as range 69
    // closed e.ScopeVars$a as range 71
    // closed e.BlocksFunctionsAndErrors as range 73
    //DEBUG: s.Backtrack$b: 37
    //DEBUG: e.Assignments0: 57
    //DEBUG: e.Errors0: 59
    //DEBUG: e.ResultFunctionsAndErrors0: 61
    //DEBUG: e.BlocksFunctionsAndErrors0: 63
    //DEBUG: e.PatternFunctionsAndErrors: 65
    //DEBUG: e.ResultFunctionsAndErrors1: 67
    //DEBUG: e.Pattern0: 69
    //DEBUG: e.ScopeVars$a: 71
    //DEBUG: e.BlocksFunctionsAndErrors: 73

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@5/4 AsIs: (/7 AsIs: e.Assignments0/57 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/59 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/61 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/63 AsIs: )/20 AsIs: (/23 AsIs: e.PatternFunctionsAndErrors/65 AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/67 AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.BlocksFunctionsAndErrors/73 } )/75 (/76 Tile{ AsIs: e.Pattern0/69 } )/77 s.Backtrack$b/37/78 </79 & CheckPattern-Flatten/80 (/81 e.ScopeVars$a/71/82 )/84 </85 & Map@12/86 e.Pattern0/69/87 >/89 >/90 </91 Tile{ HalfReuse: & CheckPattern-WarnRepeated*2/32 AsIs: (/35 AsIs: e.ScopeVars$a/71 AsIs: )/36 AsIs: s.Backtrack$b/37 HalfReuse: (/38 } e.Pattern0/69/92 )/94 >/95 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[75]);
    refalrts::alloc_open_bracket(vm, context[76]);
    refalrts::alloc_close_bracket(vm, context[77]);
    refalrts::copy_stvar(vm, context[78], context[37]);
    refalrts::alloc_open_call(vm, context[79]);
    refalrts::alloc_name(vm, context[80], functions[efunc_CheckPatternm_Flatten]);
    refalrts::alloc_open_bracket(vm, context[81]);
    refalrts::copy_evar(vm, context[82], context[83], context[71], context[72]);
    refalrts::alloc_close_bracket(vm, context[84]);
    refalrts::alloc_open_call(vm, context[85]);
    refalrts::alloc_name(vm, context[86], functions[efunc_gen_Map_Z12]);
    refalrts::copy_evar(vm, context[87], context[88], context[69], context[70]);
    refalrts::alloc_close_call(vm, context[89]);
    refalrts::alloc_close_call(vm, context[90]);
    refalrts::alloc_open_call(vm, context[91]);
    refalrts::copy_evar(vm, context[92], context[93], context[69], context[70]);
    refalrts::alloc_close_bracket(vm, context[94]);
    refalrts::alloc_close_call(vm, context[95]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z5]);
    refalrts::reinit_name(context[32], functions[efunc_gen_CheckPatternm_WarnRepeated_D2]);
    refalrts::reinit_open_bracket(context[38]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[95] );
    refalrts::push_stack( vm, context[91] );
    refalrts::link_brackets( context[38], context[94] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::push_stack( vm, context[90] );
    refalrts::push_stack( vm, context[79] );
    refalrts::push_stack( vm, context[89] );
    refalrts::push_stack( vm, context[85] );
    refalrts::link_brackets( context[81], context[84] );
    refalrts::link_brackets( context[76], context[77] );
    refalrts::link_brackets( context[31], context[75] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[94], context[95] );
    res = refalrts::splice_evar( res, context[92], context[93] );
    res = refalrts::splice_evar( res, context[32], context[38] );
    res = refalrts::splice_evar( res, context[77], context[91] );
    res = refalrts::splice_evar( res, context[69], context[70] );
    res = refalrts::splice_evar( res, context[75], context[76] );
    res = refalrts::splice_evar( res, context[73], context[74] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoCheckAssignments$2=2@1/4 (/7 e.Assignments0/39 )/8 (/11 e.Errors0/41 )/12 (/15 e.ResultFunctionsAndErrors0/43 )/16 (/19 e.BlocksFunctionsAndErrors0/45 )/20 (/23 e.PatternFunctionsAndErrors/47 )/24 (/27 e.ResultFunctionsAndErrors1/49 )/28 (/31 e.Pattern0/51 )/32 (/35 e.ScopeVars$a/53 )/36 s.Backtrack$b/37 s.ChainType0/38 e.BlocksFunctionsAndErrors/55 >/1
    context[39] = context[5];
    context[40] = context[6];
    context[41] = context[9];
    context[42] = context[10];
    context[43] = context[13];
    context[44] = context[14];
    context[45] = context[17];
    context[46] = context[18];
    context[47] = context[21];
    context[48] = context[22];
    context[49] = context[25];
    context[50] = context[26];
    context[51] = context[29];
    context[52] = context[30];
    context[53] = context[33];
    context[54] = context[34];
    context[55] = context[2];
    context[56] = context[3];
    // closed e.Assignments0 as range 39
    // closed e.Errors0 as range 41
    // closed e.ResultFunctionsAndErrors0 as range 43
    // closed e.BlocksFunctionsAndErrors0 as range 45
    // closed e.PatternFunctionsAndErrors as range 47
    // closed e.ResultFunctionsAndErrors1 as range 49
    // closed e.Pattern0 as range 51
    // closed e.ScopeVars$a as range 53
    // closed e.BlocksFunctionsAndErrors as range 55
    //DEBUG: s.Backtrack$b: 37
    //DEBUG: s.ChainType0: 38
    //DEBUG: e.Assignments0: 39
    //DEBUG: e.Errors0: 41
    //DEBUG: e.ResultFunctionsAndErrors0: 43
    //DEBUG: e.BlocksFunctionsAndErrors0: 45
    //DEBUG: e.PatternFunctionsAndErrors: 47
    //DEBUG: e.ResultFunctionsAndErrors1: 49
    //DEBUG: e.Pattern0: 51
    //DEBUG: e.ScopeVars$a: 53
    //DEBUG: e.BlocksFunctionsAndErrors: 55

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=3@1/4 AsIs: (/7 AsIs: e.Assignments0/39 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/41 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/43 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/45 AsIs: )/20 AsIs: (/23 AsIs: e.PatternFunctionsAndErrors/47 AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/49 AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.BlocksFunctionsAndErrors/55 } )/57 (/58 Tile{ AsIs: e.Pattern0/51 } Tile{ AsIs: )/32 AsIs: (/35 AsIs: e.ScopeVars$a/53 AsIs: )/36 } </59 & DoCheckAssignments$2=3:1*2/60 Tile{ AsIs: s.Backtrack$b/37 AsIs: s.ChainType0/38 } >/61 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::alloc_open_call(vm, context[59]);
    refalrts::alloc_name(vm, context[60], functions[efunc_gen_DoCheckAssignments_S2A3B1D2]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A3Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[59] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[58], context[32] );
    refalrts::link_brackets( context[31], context[57] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[61] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_evar( res, context[32], context[36] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=2@1/4 (/7 e.Assignments0/5 )/8 (/11 e.Errors0/9 )/12 (/15 e.ResultFunctionsAndErrors0/13 )/16 (/19 e.BlocksFunctionsAndErrors0/17 )/20 (/23 e.PatternFunctionsAndErrors/21 )/24 (/27 e.ResultFunctionsAndErrors1/25 )/28 (/31 e.Pattern0/29 )/32 (/35 e.ScopeVars$a/33 )/36 s.Backtrack$b/37 s.ChainType0/38 e.dyn/2 >/1
  // closed e.Assignments0 as range 5
  // closed e.Errors0 as range 9
  // closed e.ResultFunctionsAndErrors0 as range 13
  // closed e.BlocksFunctionsAndErrors0 as range 17
  // closed e.PatternFunctionsAndErrors as range 21
  // closed e.ResultFunctionsAndErrors1 as range 25
  // closed e.Pattern0 as range 29
  // closed e.ScopeVars$a as range 33
  // closed e.dyn as range 2
  //DEBUG: s.Backtrack$b: 37
  //DEBUG: s.ChainType0: 38
  //DEBUG: e.Assignments0: 5
  //DEBUG: e.Errors0: 9
  //DEBUG: e.ResultFunctionsAndErrors0: 13
  //DEBUG: e.BlocksFunctionsAndErrors0: 17
  //DEBUG: e.PatternFunctionsAndErrors: 21
  //DEBUG: e.ResultFunctionsAndErrors1: 25
  //DEBUG: e.Pattern0: 29
  //DEBUG: e.ScopeVars$a: 33
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} )/20 (/23 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=2@0/4 AsIs: (/7 AsIs: e.Assignments0/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Errors0/9 } Tile{ AsIs: e.ResultFunctionsAndErrors0/13 } Tile{ AsIs: e.BlocksFunctionsAndErrors0/17 } Tile{ AsIs: e.PatternFunctionsAndErrors/21 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/25 AsIs: )/28 AsIs: (/31 AsIs: e.Pattern0/29 AsIs: )/32 AsIs: (/35 AsIs: e.ScopeVars$a/33 AsIs: )/36 AsIs: s.Backtrack$b/37 AsIs: s.ChainType0/38 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[11], context[24] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[24];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A2Z1("DoCheckAssignments$2=2@1", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A2Z1);


static refalrts::FnResult func_gen_Fetch_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Fetch@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@2/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 & Fetch@3/8 Tile{ AsIs: </0 Reuse: & CleanupValidForwards/4 AsIs: e.Argument/5 AsIs: >/1 } >/9 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[8], functions[efunc_gen_Fetch_Z3]);
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_CleanupValidForwards]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@2/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: [*]/1 } & Pipe$2\1@0/5 & CleanupValidForwards@0/6 (/7 & FindInvalidForwards@0/8 & FindInvalidDriveInline@0/9 & CheckRedefinitions@0/10 & FindFinalInitEntry@0/11 )/12 {*}/13 >/14 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_CleanupValidForwards_Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_FindInvalidForwards_Z0]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_FindInvalidDriveInline_Z0]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_CheckRedefinitions_Z0]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_FindFinalInitEntry_Z0]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[1]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[1]);
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z2("Fetch@2", COOKIE1_, COOKIE2_, func_gen_Fetch_Z2);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A4Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & DoCheckAssignments$2=4@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=4@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 (/35 e.new8/33 )/36 e.new9/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  // closed e.new8 as range 33
  // closed e.new9 as range 2
  do {
    // </0 & DoCheckAssignments$2=4@3/4 (/7 e.Assignments0/37 )/8 (/11 e.Errors0/39 )/12 (/15 e.ResultFunctionsAndErrors0/41 )/16 (/19 e.BlocksFunctionsAndErrors0/43 )/20 (/23 e.PatternFunctionsAndErrors0/45 )/24 (/27 e.ResultFunctionsAndErrors1/47 )/28 (/31 e.BlocksFunctionsAndErrors1/49 )/32 (/35 e.Pattern0/51 )/36 (/57 e.ScopeVars$a/55 )/58 e.PatternFunctionsAndErrors/53 >/1
    context[37] = context[5];
    context[38] = context[6];
    context[39] = context[9];
    context[40] = context[10];
    context[41] = context[13];
    context[42] = context[14];
    context[43] = context[17];
    context[44] = context[18];
    context[45] = context[21];
    context[46] = context[22];
    context[47] = context[25];
    context[48] = context[26];
    context[49] = context[29];
    context[50] = context[30];
    context[51] = context[33];
    context[52] = context[34];
    context[53] = context[2];
    context[54] = context[3];
    context[55] = 0;
    context[56] = 0;
    context[57] = refalrts::brackets_left( context[55], context[56], context[53], context[54] );
    if( ! context[57] )
      continue;
    refalrts::bracket_pointers(context[57], context[58]);
    // closed e.Assignments0 as range 37
    // closed e.Errors0 as range 39
    // closed e.ResultFunctionsAndErrors0 as range 41
    // closed e.BlocksFunctionsAndErrors0 as range 43
    // closed e.PatternFunctionsAndErrors0 as range 45
    // closed e.ResultFunctionsAndErrors1 as range 47
    // closed e.BlocksFunctionsAndErrors1 as range 49
    // closed e.Pattern0 as range 51
    // closed e.ScopeVars$a as range 55
    // closed e.PatternFunctionsAndErrors as range 53
    //DEBUG: e.Assignments0: 37
    //DEBUG: e.Errors0: 39
    //DEBUG: e.ResultFunctionsAndErrors0: 41
    //DEBUG: e.BlocksFunctionsAndErrors0: 43
    //DEBUG: e.PatternFunctionsAndErrors0: 45
    //DEBUG: e.ResultFunctionsAndErrors1: 47
    //DEBUG: e.BlocksFunctionsAndErrors1: 49
    //DEBUG: e.Pattern0: 51
    //DEBUG: e.ScopeVars$a: 55
    //DEBUG: e.PatternFunctionsAndErrors: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/58 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=5/4 AsIs: (/7 AsIs: e.Assignments0/37 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.ScopeVars$a/55 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Errors0/39 } Tile{ AsIs: e.ResultFunctionsAndErrors0/41 } Tile{ AsIs: e.BlocksFunctionsAndErrors0/43 } Tile{ AsIs: e.PatternFunctionsAndErrors0/45 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/47 AsIs: )/28 AsIs: (/31 AsIs: e.BlocksFunctionsAndErrors1/49 AsIs: )/32 AsIs: (/35 } Tile{ AsIs: e.PatternFunctionsAndErrors/53 } Tile{ AsIs: )/36 HalfReuse: </57 } Tile{ HalfReuse: & FixBacktrackForOpenEVars/15 } Tile{ AsIs: e.Pattern0/51 } Tile{ HalfReuse: # OneWay/16 HalfReuse: >/19 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A5]);
    refalrts::reinit_open_call(context[57]);
    refalrts::reinit_name(context[15], functions[efunc_FixBacktrackForOpenEVars]);
    refalrts::reinit_ident(context[16], identifiers[ident_OneWay]);
    refalrts::reinit_close_call(context[19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[57] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[36], context[57] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_evar( res, context[24], context[35] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=4@3/4 (/7 e.Assignments0/5 )/8 (/11 e.Errors0/9 )/12 (/15 e.ResultFunctionsAndErrors0/13 )/16 (/19 e.BlocksFunctionsAndErrors0/17 )/20 (/23 e.PatternFunctionsAndErrors0/21 )/24 (/27 e.ResultFunctionsAndErrors1/25 )/28 (/31 e.BlocksFunctionsAndErrors1/29 )/32 (/35 e.Pattern0/33 )/36 e.dyn/2 >/1
  // closed e.Assignments0 as range 5
  // closed e.Errors0 as range 9
  // closed e.ResultFunctionsAndErrors0 as range 13
  // closed e.BlocksFunctionsAndErrors0 as range 17
  // closed e.PatternFunctionsAndErrors0 as range 21
  // closed e.ResultFunctionsAndErrors1 as range 25
  // closed e.BlocksFunctionsAndErrors1 as range 29
  // closed e.Pattern0 as range 33
  // closed e.dyn as range 2
  //DEBUG: e.Assignments0: 5
  //DEBUG: e.Errors0: 9
  //DEBUG: e.ResultFunctionsAndErrors0: 13
  //DEBUG: e.BlocksFunctionsAndErrors0: 17
  //DEBUG: e.PatternFunctionsAndErrors0: 21
  //DEBUG: e.ResultFunctionsAndErrors1: 25
  //DEBUG: e.BlocksFunctionsAndErrors1: 29
  //DEBUG: e.Pattern0: 33
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} )/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@0/4 AsIs: (/7 AsIs: e.Assignments0/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Errors0/9 } Tile{ AsIs: e.ResultFunctionsAndErrors0/13 } Tile{ AsIs: e.BlocksFunctionsAndErrors0/17 } Tile{ AsIs: e.PatternFunctionsAndErrors0/21 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/25 AsIs: )/28 AsIs: (/31 AsIs: e.BlocksFunctionsAndErrors1/29 AsIs: )/32 AsIs: (/35 AsIs: e.Pattern0/33 AsIs: )/36 } Tile{ HalfReuse: # OneWay/23 } Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z0]);
  refalrts::reinit_ident(context[23], identifiers[ident_OneWay]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[11], context[24] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[24], context[36] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A4Z3("DoCheckAssignments$2=4@3", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A4Z3);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A4Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & DoCheckAssignments$2=4@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=4@4/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 (/35 e.new8/33 )/36 e.new9/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  // closed e.new8 as range 33
  // closed e.new9 as range 2
  do {
    // </0 & DoCheckAssignments$2=4@4/4 (/7 e.Assignments0/37 )/8 (/11 e.Errors0/39 )/12 (/15 e.ResultFunctionsAndErrors0/41 )/16 (/19 e.BlocksFunctionsAndErrors0/43 )/20 (/23 e.PatternFunctionsAndErrors0/45 )/24 (/27 e.ResultFunctionsAndErrors1/47 )/28 (/31 e.BlocksFunctionsAndErrors1/49 )/32 (/35 e.Pattern0/51 )/36 (/57 e.ScopeVars$a/55 )/58 e.PatternFunctionsAndErrors/53 >/1
    context[37] = context[5];
    context[38] = context[6];
    context[39] = context[9];
    context[40] = context[10];
    context[41] = context[13];
    context[42] = context[14];
    context[43] = context[17];
    context[44] = context[18];
    context[45] = context[21];
    context[46] = context[22];
    context[47] = context[25];
    context[48] = context[26];
    context[49] = context[29];
    context[50] = context[30];
    context[51] = context[33];
    context[52] = context[34];
    context[53] = context[2];
    context[54] = context[3];
    context[55] = 0;
    context[56] = 0;
    context[57] = refalrts::brackets_left( context[55], context[56], context[53], context[54] );
    if( ! context[57] )
      continue;
    refalrts::bracket_pointers(context[57], context[58]);
    // closed e.Assignments0 as range 37
    // closed e.Errors0 as range 39
    // closed e.ResultFunctionsAndErrors0 as range 41
    // closed e.BlocksFunctionsAndErrors0 as range 43
    // closed e.PatternFunctionsAndErrors0 as range 45
    // closed e.ResultFunctionsAndErrors1 as range 47
    // closed e.BlocksFunctionsAndErrors1 as range 49
    // closed e.Pattern0 as range 51
    // closed e.ScopeVars$a as range 55
    // closed e.PatternFunctionsAndErrors as range 53
    //DEBUG: e.Assignments0: 37
    //DEBUG: e.Errors0: 39
    //DEBUG: e.ResultFunctionsAndErrors0: 41
    //DEBUG: e.BlocksFunctionsAndErrors0: 43
    //DEBUG: e.PatternFunctionsAndErrors0: 45
    //DEBUG: e.ResultFunctionsAndErrors1: 47
    //DEBUG: e.BlocksFunctionsAndErrors1: 49
    //DEBUG: e.Pattern0: 51
    //DEBUG: e.ScopeVars$a: 55
    //DEBUG: e.PatternFunctionsAndErrors: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/58 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=5/4 AsIs: (/7 AsIs: e.Assignments0/37 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.ScopeVars$a/55 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Errors0/39 } Tile{ AsIs: e.ResultFunctionsAndErrors0/41 } Tile{ AsIs: e.BlocksFunctionsAndErrors0/43 } Tile{ AsIs: e.PatternFunctionsAndErrors0/45 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/47 AsIs: )/28 AsIs: (/31 AsIs: e.BlocksFunctionsAndErrors1/49 AsIs: )/32 AsIs: (/35 } Tile{ AsIs: e.PatternFunctionsAndErrors/53 } Tile{ AsIs: )/36 HalfReuse: </57 } Tile{ HalfReuse: & FixBacktrackForOpenEVars/15 } Tile{ AsIs: e.Pattern0/51 } Tile{ HalfReuse: # WithBacktrack/16 HalfReuse: >/19 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A5]);
    refalrts::reinit_open_call(context[57]);
    refalrts::reinit_name(context[15], functions[efunc_FixBacktrackForOpenEVars]);
    refalrts::reinit_ident(context[16], identifiers[ident_WithBacktrack]);
    refalrts::reinit_close_call(context[19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[57] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[36], context[57] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_evar( res, context[24], context[35] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=4@4/4 (/7 e.Assignments0/5 )/8 (/11 e.Errors0/9 )/12 (/15 e.ResultFunctionsAndErrors0/13 )/16 (/19 e.BlocksFunctionsAndErrors0/17 )/20 (/23 e.PatternFunctionsAndErrors0/21 )/24 (/27 e.ResultFunctionsAndErrors1/25 )/28 (/31 e.BlocksFunctionsAndErrors1/29 )/32 (/35 e.Pattern0/33 )/36 e.dyn/2 >/1
  // closed e.Assignments0 as range 5
  // closed e.Errors0 as range 9
  // closed e.ResultFunctionsAndErrors0 as range 13
  // closed e.BlocksFunctionsAndErrors0 as range 17
  // closed e.PatternFunctionsAndErrors0 as range 21
  // closed e.ResultFunctionsAndErrors1 as range 25
  // closed e.BlocksFunctionsAndErrors1 as range 29
  // closed e.Pattern0 as range 33
  // closed e.dyn as range 2
  //DEBUG: e.Assignments0: 5
  //DEBUG: e.Errors0: 9
  //DEBUG: e.ResultFunctionsAndErrors0: 13
  //DEBUG: e.BlocksFunctionsAndErrors0: 17
  //DEBUG: e.PatternFunctionsAndErrors0: 21
  //DEBUG: e.ResultFunctionsAndErrors1: 25
  //DEBUG: e.BlocksFunctionsAndErrors1: 29
  //DEBUG: e.Pattern0: 33
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} )/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@0/4 AsIs: (/7 AsIs: e.Assignments0/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Errors0/9 } Tile{ AsIs: e.ResultFunctionsAndErrors0/13 } Tile{ AsIs: e.BlocksFunctionsAndErrors0/17 } Tile{ AsIs: e.PatternFunctionsAndErrors0/21 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/25 AsIs: )/28 AsIs: (/31 AsIs: e.BlocksFunctionsAndErrors1/29 AsIs: )/32 AsIs: (/35 AsIs: e.Pattern0/33 AsIs: )/36 } Tile{ HalfReuse: # WithBacktrack/23 } Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z0]);
  refalrts::reinit_ident(context[23], identifiers[ident_WithBacktrack]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[11], context[24] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[24], context[36] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A4Z4("DoCheckAssignments$2=4@4", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A4Z4);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A4Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 60 elems
  refalrts::Iter context[60];
  refalrts::zeros( context, 60 );
  // </0 & DoCheckAssignments$2=4@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=4@5/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 (/35 e.new8/33 )/36 s.new9/37 e.new10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  // closed e.new8 as range 33
  if( ! refalrts::svar_left( context[37], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new10 as range 2
  do {
    // </0 & DoCheckAssignments$2=4@5/4 (/7 e.Assignments0/38 )/8 (/11 e.Errors0/40 )/12 (/15 e.ResultFunctionsAndErrors0/42 )/16 (/19 e.BlocksFunctionsAndErrors0/44 )/20 (/23 e.PatternFunctionsAndErrors0/46 )/24 (/27 e.ResultFunctionsAndErrors1/48 )/28 (/31 e.BlocksFunctionsAndErrors1/50 )/32 (/35 e.Pattern0/52 )/36 s.Backtrack$b/37 (/58 e.ScopeVars$a/56 )/59 e.PatternFunctionsAndErrors/54 >/1
    context[38] = context[5];
    context[39] = context[6];
    context[40] = context[9];
    context[41] = context[10];
    context[42] = context[13];
    context[43] = context[14];
    context[44] = context[17];
    context[45] = context[18];
    context[46] = context[21];
    context[47] = context[22];
    context[48] = context[25];
    context[49] = context[26];
    context[50] = context[29];
    context[51] = context[30];
    context[52] = context[33];
    context[53] = context[34];
    context[54] = context[2];
    context[55] = context[3];
    context[56] = 0;
    context[57] = 0;
    context[58] = refalrts::brackets_left( context[56], context[57], context[54], context[55] );
    if( ! context[58] )
      continue;
    refalrts::bracket_pointers(context[58], context[59]);
    // closed e.Assignments0 as range 38
    // closed e.Errors0 as range 40
    // closed e.ResultFunctionsAndErrors0 as range 42
    // closed e.BlocksFunctionsAndErrors0 as range 44
    // closed e.PatternFunctionsAndErrors0 as range 46
    // closed e.ResultFunctionsAndErrors1 as range 48
    // closed e.BlocksFunctionsAndErrors1 as range 50
    // closed e.Pattern0 as range 52
    // closed e.ScopeVars$a as range 56
    // closed e.PatternFunctionsAndErrors as range 54
    //DEBUG: s.Backtrack$b: 37
    //DEBUG: e.Assignments0: 38
    //DEBUG: e.Errors0: 40
    //DEBUG: e.ResultFunctionsAndErrors0: 42
    //DEBUG: e.BlocksFunctionsAndErrors0: 44
    //DEBUG: e.PatternFunctionsAndErrors0: 46
    //DEBUG: e.ResultFunctionsAndErrors1: 48
    //DEBUG: e.BlocksFunctionsAndErrors1: 50
    //DEBUG: e.Pattern0: 52
    //DEBUG: e.ScopeVars$a: 56
    //DEBUG: e.PatternFunctionsAndErrors: 54

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 (/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/59 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=5/4 AsIs: (/7 AsIs: e.Assignments0/38 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.ScopeVars$a/56 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Errors0/40 } Tile{ AsIs: e.ResultFunctionsAndErrors0/42 } Tile{ AsIs: e.BlocksFunctionsAndErrors0/44 } Tile{ AsIs: e.PatternFunctionsAndErrors0/46 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/48 AsIs: )/28 AsIs: (/31 AsIs: e.BlocksFunctionsAndErrors1/50 AsIs: )/32 AsIs: (/35 } Tile{ AsIs: e.PatternFunctionsAndErrors/54 } Tile{ AsIs: )/16 HalfReuse: </19 } Tile{ HalfReuse: & FixBacktrackForOpenEVars/36 } Tile{ AsIs: e.Pattern0/52 } Tile{ AsIs: s.Backtrack$b/37 HalfReuse: >/58 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A5]);
    refalrts::reinit_open_call(context[19]);
    refalrts::reinit_name(context[36], functions[efunc_FixBacktrackForOpenEVars]);
    refalrts::reinit_close_call(context[58]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[35], context[16] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[37], context[58] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[24], context[35] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=4@5/4 (/7 e.Assignments0/5 )/8 (/11 e.Errors0/9 )/12 (/15 e.ResultFunctionsAndErrors0/13 )/16 (/19 e.BlocksFunctionsAndErrors0/17 )/20 (/23 e.PatternFunctionsAndErrors0/21 )/24 (/27 e.ResultFunctionsAndErrors1/25 )/28 (/31 e.BlocksFunctionsAndErrors1/29 )/32 (/35 e.Pattern0/33 )/36 s.Backtrack$b/37 e.dyn/2 >/1
  // closed e.Assignments0 as range 5
  // closed e.Errors0 as range 9
  // closed e.ResultFunctionsAndErrors0 as range 13
  // closed e.BlocksFunctionsAndErrors0 as range 17
  // closed e.PatternFunctionsAndErrors0 as range 21
  // closed e.ResultFunctionsAndErrors1 as range 25
  // closed e.BlocksFunctionsAndErrors1 as range 29
  // closed e.Pattern0 as range 33
  // closed e.dyn as range 2
  //DEBUG: s.Backtrack$b: 37
  //DEBUG: e.Assignments0: 5
  //DEBUG: e.Errors0: 9
  //DEBUG: e.ResultFunctionsAndErrors0: 13
  //DEBUG: e.BlocksFunctionsAndErrors0: 17
  //DEBUG: e.PatternFunctionsAndErrors0: 21
  //DEBUG: e.ResultFunctionsAndErrors1: 25
  //DEBUG: e.BlocksFunctionsAndErrors1: 29
  //DEBUG: e.Pattern0: 33
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} )/20 (/23 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@0/4 AsIs: (/7 AsIs: e.Assignments0/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Errors0/9 } Tile{ AsIs: e.ResultFunctionsAndErrors0/13 } Tile{ AsIs: e.BlocksFunctionsAndErrors0/17 } Tile{ AsIs: e.PatternFunctionsAndErrors0/21 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/25 AsIs: )/28 AsIs: (/31 AsIs: e.BlocksFunctionsAndErrors1/29 AsIs: )/32 AsIs: (/35 AsIs: e.Pattern0/33 AsIs: )/36 AsIs: s.Backtrack$b/37 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[11], context[24] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[24];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A4Z5("DoCheckAssignments$2=4@5", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A4Z5);


static refalrts::FnResult func_gen_DoCheckAssignments_S2A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 100 elems
  refalrts::Iter context[100];
  refalrts::zeros( context, 100 );
  // </0 & DoCheckAssignments$2=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckAssignments$2=3@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 (/35 e.new8/33 )/36 (/39 e.new9/37 )/40 e.new10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  context[37] = 0;
  context[38] = 0;
  context[39] = refalrts::brackets_left( context[37], context[38], context[2], context[3] );
  if( ! context[39] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[39], context[40]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  // closed e.new8 as range 33
  // closed e.new9 as range 37
  // closed e.new10 as range 2
  do {
    // </0 & DoCheckAssignments$2=3@1/4 (/7 e.new12/41 )/8 (/11 e.new13/43 )/12 (/15 e.new14/45 )/16 (/19 e.new15/47 )/20 (/23 e.new16/49 )/24 (/27 e.new17/51 )/28 (/31 e.new18/53 )/32 (/35 e.new19/55 )/36 (/39 e.new20/57 )/40 s.new11/61 >/1
    context[41] = context[5];
    context[42] = context[6];
    context[43] = context[9];
    context[44] = context[10];
    context[45] = context[13];
    context[46] = context[14];
    context[47] = context[17];
    context[48] = context[18];
    context[49] = context[21];
    context[50] = context[22];
    context[51] = context[25];
    context[52] = context[26];
    context[53] = context[29];
    context[54] = context[30];
    context[55] = context[33];
    context[56] = context[34];
    context[57] = context[37];
    context[58] = context[38];
    context[59] = context[2];
    context[60] = context[3];
    // closed e.new12 as range 41
    // closed e.new13 as range 43
    // closed e.new14 as range 45
    // closed e.new15 as range 47
    // closed e.new16 as range 49
    // closed e.new17 as range 51
    // closed e.new18 as range 53
    // closed e.new19 as range 55
    // closed e.new20 as range 57
    if( ! refalrts::svar_left( context[61], context[59], context[60] ) )
      continue;
    if( ! refalrts::empty_seq( context[59], context[60] ) )
      continue;
    do {
      // </0 & DoCheckAssignments$2=3@1/4 (/7 e.Assignments0/62 )/8 (/11 e.Errors0/64 )/12 (/15 e.ResultFunctionsAndErrors0/66 )/16 (/19 e.BlocksFunctionsAndErrors0/68 )/20 (/23 e.PatternFunctionsAndErrors/70 )/24 (/27 e.ResultFunctionsAndErrors1/72 )/28 (/31 e.BlocksFunctionsAndErrors1/74 )/32 (/35 e.Pattern0/76 )/36 (/39 e.ScopeVars$a/78 )/40 # OneWay/61 >/1
      context[62] = context[41];
      context[63] = context[42];
      context[64] = context[43];
      context[65] = context[44];
      context[66] = context[45];
      context[67] = context[46];
      context[68] = context[47];
      context[69] = context[48];
      context[70] = context[49];
      context[71] = context[50];
      context[72] = context[51];
      context[73] = context[52];
      context[74] = context[53];
      context[75] = context[54];
      context[76] = context[55];
      context[77] = context[56];
      context[78] = context[57];
      context[79] = context[58];
      if( ! refalrts::ident_term( identifiers[ident_OneWay], context[61] ) )
        continue;
      // closed e.Assignments0 as range 62
      // closed e.Errors0 as range 64
      // closed e.ResultFunctionsAndErrors0 as range 66
      // closed e.BlocksFunctionsAndErrors0 as range 68
      // closed e.PatternFunctionsAndErrors as range 70
      // closed e.ResultFunctionsAndErrors1 as range 72
      // closed e.BlocksFunctionsAndErrors1 as range 74
      // closed e.Pattern0 as range 76
      // closed e.ScopeVars$a as range 78
      //DEBUG: e.Assignments0: 62
      //DEBUG: e.Errors0: 64
      //DEBUG: e.ResultFunctionsAndErrors0: 66
      //DEBUG: e.BlocksFunctionsAndErrors0: 68
      //DEBUG: e.PatternFunctionsAndErrors: 70
      //DEBUG: e.ResultFunctionsAndErrors1: 72
      //DEBUG: e.BlocksFunctionsAndErrors1: 74
      //DEBUG: e.Pattern0: 76
      //DEBUG: e.ScopeVars$a: 78

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@3/4 AsIs: (/7 AsIs: e.Assignments0/62 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/64 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/66 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/68 AsIs: )/20 AsIs: (/23 AsIs: e.PatternFunctionsAndErrors/70 AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/72 AsIs: )/28 AsIs: (/31 AsIs: e.BlocksFunctionsAndErrors1/74 AsIs: )/32 AsIs: (/35 AsIs: e.Pattern0/76 AsIs: )/36 HalfReuse: </39 } & CheckPattern-Flatten/80 (/81 Tile{ AsIs: e.ScopeVars$a/78 } )/82 </83 & Map@12/84 e.Pattern0/76/85 >/87 >/88 </89 & CheckPattern-WarnRepeatedRec/90 (/91 e.ScopeVars$a/78/92 )/94 (/95 e.Pattern0/76/96 Tile{ AsIs: )/40 HalfReuse: >/61 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[80], functions[efunc_CheckPatternm_Flatten]);
      refalrts::alloc_open_bracket(vm, context[81]);
      refalrts::alloc_close_bracket(vm, context[82]);
      refalrts::alloc_open_call(vm, context[83]);
      refalrts::alloc_name(vm, context[84], functions[efunc_gen_Map_Z12]);
      refalrts::copy_evar(vm, context[85], context[86], context[76], context[77]);
      refalrts::alloc_close_call(vm, context[87]);
      refalrts::alloc_close_call(vm, context[88]);
      refalrts::alloc_open_call(vm, context[89]);
      refalrts::alloc_name(vm, context[90], functions[efunc_CheckPatternm_WarnRepeatedRec]);
      refalrts::alloc_open_bracket(vm, context[91]);
      refalrts::copy_evar(vm, context[92], context[93], context[78], context[79]);
      refalrts::alloc_close_bracket(vm, context[94]);
      refalrts::alloc_open_bracket(vm, context[95]);
      refalrts::copy_evar(vm, context[96], context[97], context[76], context[77]);
      refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z3]);
      refalrts::reinit_open_call(context[39]);
      refalrts::reinit_close_call(context[61]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[89] );
      refalrts::link_brackets( context[95], context[40] );
      refalrts::link_brackets( context[91], context[94] );
      refalrts::push_stack( vm, context[88] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[87] );
      refalrts::push_stack( vm, context[83] );
      refalrts::link_brackets( context[81], context[82] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[40];
      res = refalrts::splice_evar( res, context[96], context[97] );
      res = refalrts::splice_evar( res, context[82], context[95] );
      res = refalrts::splice_evar( res, context[78], context[79] );
      res = refalrts::splice_evar( res, context[80], context[81] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoCheckAssignments$2=3@1/4 (/7 e.Assignments0/62 )/8 (/11 e.Errors0/64 )/12 (/15 e.ResultFunctionsAndErrors0/66 )/16 (/19 e.BlocksFunctionsAndErrors0/68 )/20 (/23 e.PatternFunctionsAndErrors/70 )/24 (/27 e.ResultFunctionsAndErrors1/72 )/28 (/31 e.BlocksFunctionsAndErrors1/74 )/32 (/35 e.Pattern0/76 )/36 (/39 e.ScopeVars$a/78 )/40 # WithBacktrack/61 >/1
      context[62] = context[41];
      context[63] = context[42];
      context[64] = context[43];
      context[65] = context[44];
      context[66] = context[45];
      context[67] = context[46];
      context[68] = context[47];
      context[69] = context[48];
      context[70] = context[49];
      context[71] = context[50];
      context[72] = context[51];
      context[73] = context[52];
      context[74] = context[53];
      context[75] = context[54];
      context[76] = context[55];
      context[77] = context[56];
      context[78] = context[57];
      context[79] = context[58];
      if( ! refalrts::ident_term( identifiers[ident_WithBacktrack], context[61] ) )
        continue;
      // closed e.Assignments0 as range 62
      // closed e.Errors0 as range 64
      // closed e.ResultFunctionsAndErrors0 as range 66
      // closed e.BlocksFunctionsAndErrors0 as range 68
      // closed e.PatternFunctionsAndErrors as range 70
      // closed e.ResultFunctionsAndErrors1 as range 72
      // closed e.BlocksFunctionsAndErrors1 as range 74
      // closed e.Pattern0 as range 76
      // closed e.ScopeVars$a as range 78
      //DEBUG: e.Assignments0: 62
      //DEBUG: e.Errors0: 64
      //DEBUG: e.ResultFunctionsAndErrors0: 66
      //DEBUG: e.BlocksFunctionsAndErrors0: 68
      //DEBUG: e.PatternFunctionsAndErrors: 70
      //DEBUG: e.ResultFunctionsAndErrors1: 72
      //DEBUG: e.BlocksFunctionsAndErrors1: 74
      //DEBUG: e.Pattern0: 76
      //DEBUG: e.ScopeVars$a: 78

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@4/4 AsIs: (/7 AsIs: e.Assignments0/62 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/64 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/66 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/68 AsIs: )/20 AsIs: (/23 AsIs: e.PatternFunctionsAndErrors/70 AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/72 AsIs: )/28 AsIs: (/31 AsIs: e.BlocksFunctionsAndErrors1/74 AsIs: )/32 AsIs: (/35 AsIs: e.Pattern0/76 AsIs: )/36 HalfReuse: </39 } & CheckPattern-Flatten/80 (/81 Tile{ AsIs: e.ScopeVars$a/78 } )/82 </83 & Map@12/84 e.Pattern0/76/85 Tile{ HalfReuse: >/40 HalfReuse: >/61 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[80], functions[efunc_CheckPatternm_Flatten]);
      refalrts::alloc_open_bracket(vm, context[81]);
      refalrts::alloc_close_bracket(vm, context[82]);
      refalrts::alloc_open_call(vm, context[83]);
      refalrts::alloc_name(vm, context[84], functions[efunc_gen_Map_Z12]);
      refalrts::copy_evar(vm, context[85], context[86], context[76], context[77]);
      refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z4]);
      refalrts::reinit_open_call(context[39]);
      refalrts::reinit_close_call(context[40]);
      refalrts::reinit_close_call(context[61]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[83] );
      refalrts::link_brackets( context[81], context[82] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[40];
      res = refalrts::splice_evar( res, context[85], context[86] );
      res = refalrts::splice_evar( res, context[82], context[84] );
      res = refalrts::splice_evar( res, context[78], context[79] );
      res = refalrts::splice_evar( res, context[80], context[81] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoCheckAssignments$2=3@1/4 (/7 e.Assignments0/62 )/8 (/11 e.Errors0/64 )/12 (/15 e.ResultFunctionsAndErrors0/66 )/16 (/19 e.BlocksFunctionsAndErrors0/68 )/20 (/23 e.PatternFunctionsAndErrors/70 )/24 (/27 e.ResultFunctionsAndErrors1/72 )/28 (/31 e.BlocksFunctionsAndErrors1/74 )/32 (/35 e.Pattern0/76 )/36 (/39 e.ScopeVars$a/78 )/40 s.Backtrack$a/61 >/1
    context[62] = context[41];
    context[63] = context[42];
    context[64] = context[43];
    context[65] = context[44];
    context[66] = context[45];
    context[67] = context[46];
    context[68] = context[47];
    context[69] = context[48];
    context[70] = context[49];
    context[71] = context[50];
    context[72] = context[51];
    context[73] = context[52];
    context[74] = context[53];
    context[75] = context[54];
    context[76] = context[55];
    context[77] = context[56];
    context[78] = context[57];
    context[79] = context[58];
    // closed e.Assignments0 as range 62
    // closed e.Errors0 as range 64
    // closed e.ResultFunctionsAndErrors0 as range 66
    // closed e.BlocksFunctionsAndErrors0 as range 68
    // closed e.PatternFunctionsAndErrors as range 70
    // closed e.ResultFunctionsAndErrors1 as range 72
    // closed e.BlocksFunctionsAndErrors1 as range 74
    // closed e.Pattern0 as range 76
    // closed e.ScopeVars$a as range 78
    //DEBUG: s.Backtrack$a: 61
    //DEBUG: e.Assignments0: 62
    //DEBUG: e.Errors0: 64
    //DEBUG: e.ResultFunctionsAndErrors0: 66
    //DEBUG: e.BlocksFunctionsAndErrors0: 68
    //DEBUG: e.PatternFunctionsAndErrors: 70
    //DEBUG: e.ResultFunctionsAndErrors1: 72
    //DEBUG: e.BlocksFunctionsAndErrors1: 74
    //DEBUG: e.Pattern0: 76
    //DEBUG: e.ScopeVars$a: 78

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=4@5/4 AsIs: (/7 AsIs: e.Assignments0/62 AsIs: )/8 AsIs: (/11 AsIs: e.Errors0/64 AsIs: )/12 AsIs: (/15 AsIs: e.ResultFunctionsAndErrors0/66 AsIs: )/16 AsIs: (/19 AsIs: e.BlocksFunctionsAndErrors0/68 AsIs: )/20 AsIs: (/23 AsIs: e.PatternFunctionsAndErrors/70 AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/72 AsIs: )/28 AsIs: (/31 AsIs: e.BlocksFunctionsAndErrors1/74 AsIs: )/32 AsIs: (/35 AsIs: e.Pattern0/76 AsIs: )/36 HalfReuse: s.Backtrack$a61 /39 } </80 & CheckPattern-Flatten/81 (/82 e.ScopeVars$a/78/83 )/85 </86 & Map@12/87 e.Pattern0/76/88 >/90 >/91 </92 & CheckPattern-WarnRepeated*2/93 (/94 Tile{ AsIs: e.ScopeVars$a/78 } Tile{ AsIs: )/40 AsIs: s.Backtrack$a/61 HalfReuse: (/1 } e.Pattern0/76/95 )/97 >/98 >/99 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[80]);
    refalrts::alloc_name(vm, context[81], functions[efunc_CheckPatternm_Flatten]);
    refalrts::alloc_open_bracket(vm, context[82]);
    refalrts::copy_evar(vm, context[83], context[84], context[78], context[79]);
    refalrts::alloc_close_bracket(vm, context[85]);
    refalrts::alloc_open_call(vm, context[86]);
    refalrts::alloc_name(vm, context[87], functions[efunc_gen_Map_Z12]);
    refalrts::copy_evar(vm, context[88], context[89], context[76], context[77]);
    refalrts::alloc_close_call(vm, context[90]);
    refalrts::alloc_close_call(vm, context[91]);
    refalrts::alloc_open_call(vm, context[92]);
    refalrts::alloc_name(vm, context[93], functions[efunc_gen_CheckPatternm_WarnRepeated_D2]);
    refalrts::alloc_open_bracket(vm, context[94]);
    refalrts::copy_evar(vm, context[95], context[96], context[76], context[77]);
    refalrts::alloc_close_bracket(vm, context[97]);
    refalrts::alloc_close_call(vm, context[98]);
    refalrts::alloc_close_call(vm, context[99]);
    refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A4Z5]);
    refalrts::reinit_svar( context[39], context[61] );
    refalrts::reinit_open_bracket(context[1]);
    refalrts::push_stack( vm, context[99] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[98] );
    refalrts::push_stack( vm, context[92] );
    refalrts::link_brackets( context[1], context[97] );
    refalrts::link_brackets( context[94], context[40] );
    refalrts::push_stack( vm, context[91] );
    refalrts::push_stack( vm, context[80] );
    refalrts::push_stack( vm, context[90] );
    refalrts::push_stack( vm, context[86] );
    refalrts::link_brackets( context[82], context[85] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[97], context[99] );
    res = refalrts::splice_evar( res, context[95], context[96] );
    res = refalrts::splice_evar( res, context[40], context[1] );
    res = refalrts::splice_evar( res, context[78], context[79] );
    res = refalrts::splice_evar( res, context[80], context[94] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckAssignments$2=3@1/4 (/7 e.Assignments0/5 )/8 (/11 e.Errors0/9 )/12 (/15 e.ResultFunctionsAndErrors0/13 )/16 (/19 e.BlocksFunctionsAndErrors0/17 )/20 (/23 e.PatternFunctionsAndErrors/21 )/24 (/27 e.ResultFunctionsAndErrors1/25 )/28 (/31 e.BlocksFunctionsAndErrors1/29 )/32 (/35 e.Pattern0/33 )/36 (/39 e.ScopeVars$a/37 )/40 e.dyn/2 >/1
  // closed e.Assignments0 as range 5
  // closed e.Errors0 as range 9
  // closed e.ResultFunctionsAndErrors0 as range 13
  // closed e.BlocksFunctionsAndErrors0 as range 17
  // closed e.PatternFunctionsAndErrors as range 21
  // closed e.ResultFunctionsAndErrors1 as range 25
  // closed e.BlocksFunctionsAndErrors1 as range 29
  // closed e.Pattern0 as range 33
  // closed e.ScopeVars$a as range 37
  // closed e.dyn as range 2
  //DEBUG: e.Assignments0: 5
  //DEBUG: e.Errors0: 9
  //DEBUG: e.ResultFunctionsAndErrors0: 13
  //DEBUG: e.BlocksFunctionsAndErrors0: 17
  //DEBUG: e.PatternFunctionsAndErrors: 21
  //DEBUG: e.ResultFunctionsAndErrors1: 25
  //DEBUG: e.BlocksFunctionsAndErrors1: 29
  //DEBUG: e.Pattern0: 33
  //DEBUG: e.ScopeVars$a: 37
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} )/20 (/23 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckAssignments$2=3@0/4 AsIs: (/7 AsIs: e.Assignments0/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Errors0/9 } Tile{ AsIs: e.ResultFunctionsAndErrors0/13 } Tile{ AsIs: e.BlocksFunctionsAndErrors0/17 } Tile{ AsIs: e.PatternFunctionsAndErrors/21 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.ResultFunctionsAndErrors1/25 AsIs: )/28 AsIs: (/31 AsIs: e.BlocksFunctionsAndErrors1/29 AsIs: )/32 AsIs: (/35 AsIs: e.Pattern0/33 AsIs: )/36 AsIs: (/39 AsIs: e.ScopeVars$a/37 AsIs: )/40 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckAssignments_S2A3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[39], context[40] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[11], context[24] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[24];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckAssignments_S2A3Z1("DoCheckAssignments$2=3@1", COOKIE1_, COOKIE2_, func_gen_DoCheckAssignments_S2A3Z1);


static refalrts::FnResult func_gen_Fetch_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Fetch@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@3/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 & Fetch@4/8 Tile{ AsIs: </0 Reuse: & FindInvalidForwards/4 AsIs: e.Argument/5 AsIs: >/1 } >/9 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[8], functions[efunc_gen_Fetch_Z4]);
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_FindInvalidForwards]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@3/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: [*]/1 } & Pipe$2\1@0/5 & FindInvalidForwards@0/6 (/7 & FindInvalidDriveInline@0/8 & CheckRedefinitions@0/9 & FindFinalInitEntry@0/10 )/11 {*}/12 >/13 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_FindInvalidForwards_Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_FindInvalidDriveInline_Z0]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_CheckRedefinitions_Z0]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_FindFinalInitEntry_Z0]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[1]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[1]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z3("Fetch@3", COOKIE1_, COOKIE2_, func_gen_Fetch_Z3);


static refalrts::FnResult func_gen_Fetch_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Fetch@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@4/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@5/4 } </7 & FindInvalidDriveInline=1/8 </9 & DoMapAccum@4/10 (/11 )/12 (/13 )/14 Tile{ AsIs: e.Argument/5 } >/15 >/16 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[8], functions[efunc_gen_FindInvalidDriveInline_A1]);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_DoMapAccum_Z4]);
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[7], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@4/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: [*]/1 } & Pipe$2\1@0/5 & FindInvalidDriveInline@0/6 (/7 & CheckRedefinitions@0/8 & FindFinalInitEntry@0/9 )/10 {*}/11 >/12 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_FindInvalidDriveInline_Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_CheckRedefinitions_Z0]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_FindFinalInitEntry_Z0]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[1]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[1]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[12] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z4("Fetch@4", COOKIE1_, COOKIE2_, func_gen_Fetch_Z4);


static refalrts::FnResult func_gen_Fetch_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Fetch@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@5/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 & Fetch@6/8 Tile{ AsIs: </0 Reuse: & CheckRedefinitions/4 AsIs: e.Argument/5 AsIs: >/1 } >/9 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[8], functions[efunc_gen_Fetch_Z6]);
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_CheckRedefinitions]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@5/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: [*]/1 } & Pipe$2\1@0/5 & CheckRedefinitions@0/6 (/7 & FindFinalInitEntry@0/8 )/9 {*}/10 >/11 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_CheckRedefinitions_Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_FindFinalInitEntry_Z0]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_unwrapped_closure(vm, context[10], context[1]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[1]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[10] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z5("Fetch@5", COOKIE1_, COOKIE2_, func_gen_Fetch_Z5);


static refalrts::FnResult func_gen_Fetch_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@6/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@11/4 AsIs: e.Argument/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@6/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: & FindFinalInitEntry@0/1 } >/5 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[5]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_name(context[1], functions[efunc_gen_FindFinalInitEntry_Z0]);
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z6("Fetch@6", COOKIE1_, COOKIE2_, func_gen_Fetch_Z6);


//End of file
