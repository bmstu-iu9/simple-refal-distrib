// This file automatically generated from 'Desugaring-UnCondition.ref'
// Don't edit! Edit 'Desugaring-UnCondition.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_1575766601_1237944469
#define COOKIE1_ 1575766601U
#define COOKIE2_ 1237944469U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_gen_Map_Z1 = 18,
  efunc_UnConditionm_RemFunctions = 19,
  efunc_gen_UnConditionm_RemFunctions_S1L1D2 = 20,
  efunc_gen_UnConditionm_RemFunctions_Z0 = 21,
  efunc_gen_UnConditionm_Unit_S1A4 = 22,
  efunc_gen_DoMapAccum_Z1 = 23,
  efunc_gen_UnConditionm_Unitm_Sentence_S1A3 = 24,
  efunc_gen_UnConditionm_Sentence_Z1 = 25,
  efunc_gen_UnConditionm_Unitm_Sentence_S1C1 = 26,
  efunc_gen_UnConditionm_Unitm_Sentence_S1A2 = 27,
  efunc_AddSuffix = 28,
  efunc_gen_DoPatternSteps_B1Z1 = 29,
  efunc_gen_DoPatternSteps_B1S1C1 = 30,
  efunc_HardItem = 31,
  efunc_gen_DoPatternSteps_Z2 = 32,
  efunc_gen_DoPatternSteps_B1S2C1 = 33,
  efunc_gen_DoPatternSteps_Z3 = 34,
  efunc_gen_Map_Z2 = 35,
  efunc_T1 = 36,
  efunc_T2 = 37,
  efunc_T3 = 38,
  efunc_T4 = 39,
  efunc_T5 = 40,
  efunc_T5m_sub = 41,
  efunc_T6 = 42,
  efunc_T7 = 43,
  efunc_BindBrackets = 44,
  efunc_DoT0 = 45,
  efunc_gen_DoPatternSteps_B1 = 46,
  efunc_DoBindBrackets = 47,
  efunc_gen_T1_C1 = 48,
  efunc_NewVarName = 49,
  efunc_gen_T1_C2 = 50,
  efunc_gen_T1_C3 = 51,
  efunc_PassiveHoles = 52,
  efunc_gen_PassiveHoles_S1C1 = 53,
  efunc_gen_T2_C1 = 54,
  efunc_gen_T2_C2 = 55,
  efunc_gen_T2_C3 = 56,
  efunc_gen_T3_C1 = 57,
  efunc_gen_T4_C1 = 58,
  efunc_gen_T5_C1 = 59,
  efunc_gen_Substitute_Z1 = 60,
  efunc_T5m_UnHole = 61,
  efunc_gen_T5m_sub_C1 = 62,
  efunc_gen_T5m_sub_C2 = 63,
  efunc_Substitute = 64,
  efunc_gen_T6_C1 = 65,
  efunc_gen_T6_C2 = 66,
  efunc_gen_T7_C1 = 67,
  efunc_gen_T7_C2 = 68,
  efunc_gen_UnConditionm_Sentence_C1 = 69,
  efunc_gen_UnConditionm_Sentence_C2 = 70,
  efunc_gen_UnConditionm_Sentence_C3 = 71,
  efunc_ExtractVariables = 72,
  efunc_gen_UnConditionm_Sentence_C4 = 73,
  efunc_ConditionContext = 74,
  efunc_gen_UnConditionm_Sentence_C5 = 75,
  efunc_PatternSteps = 76,
  efunc_gen_UnConditionm_Sentence_C6 = 77,
  efunc_OpenEChain = 78,
  efunc_gen_UnConditionm_Sentence_C7 = 79,
  efunc_CreateSpecPatternForContext = 80,
  efunc_Unique = 81,
  efunc_ExtractVariablesm_Expr = 82,
  efunc_CreateContext = 83,
  efunc_gen_OpenEChain_S1C1 = 84,
  efunc_gen_OpenEChain_S2C1 = 85,
  efunc_gen_OpenEChain_S2C2 = 86,
  efunc_DoOpenEChain = 87,
  efunc_gen_OpenEChain_S2C3 = 88,
  efunc_gen_DoOpenEChain_S1C1 = 89,
  efunc_MakeOpenEm_ForwardNext = 90,
  efunc_gen_DoOpenEChain_S2C1 = 91,
  efunc_gen_DoOpenEChain_S2C2 = 92,
  efunc_gen_DoOpenEChain_S2C3 = 93,
  efunc_gen_MakeOpenEm_ForwardNext_C1 = 94,
  efunc_gen_MakeOpenEm_ForwardNext_C2 = 95,
  efunc_Mu = 96,
  efunc_Up = 97,
  efunc_Evm_met = 98,
  efunc_Residue = 99,
  efunc_u_u_Metau_Residue = 100,
  efunc_MapAccum = 101,
  efunc_UnBracket = 102,
  efunc_DelAccumulator = 103,
  efunc_Inc = 104,
  efunc_Dec = 105,
  efunc_Passm_UnCondition = 106,
  efunc_UnConditionm_Unit = 107,
  efunc_UnConditionm_Unitm_Sentence = 108,
  efunc_DoPatternSteps = 109,
  efunc_T0 = 110,
  efunc_UnConditionm_Sentence = 111,
  efunc_gen_Apply_Z4 = 112,
  efunc_gen_UnConditionm_Unit_Z0 = 113,
  efunc_gen_Map_Z0 = 114,
  efunc_gen_DoMapAccum_S1A1Z1 = 115,
  efunc_gen_UnConditionm_Unitm_Sentence_Z0 = 116,
  efunc_gen_DoMapAccum_Z0 = 117,
  efunc_gen_UnConditionm_Sentence_Z1C1 = 118,
  efunc_gen_UnConditionm_Sentence_Z1C2 = 119,
  efunc_gen_UnConditionm_Sentence_Z1C3 = 120,
  efunc_gen_UnConditionm_Sentence_Z1C4 = 121,
  efunc_gen_UnConditionm_Sentence_Z1C5 = 122,
  efunc_gen_UnConditionm_Sentence_Z1C6 = 123,
  efunc_gen_UnConditionm_Sentence_Z1C7 = 124,
  efunc_gen_UnConditionm_Sentence_Z0 = 125,
  efunc_gen_DoPatternSteps_Z0 = 126,
  efunc_gen_BindBrackets_D1 = 127,
  efunc_gen_BindBrackets_Z0 = 128,
  efunc_gen_Substitute_Z0 = 129,
  efunc_gen_DoMapAccum_S1A1Z0 = 130,
  efunc_gen_DoPatternSteps_B1Z1S1C1 = 131,
  efunc_gen_DoPatternSteps_Z11 = 132,
  efunc_gen_DoPatternSteps_B1Z1S2C1 = 133,
  efunc_gen_DoPatternSteps_B1Z3 = 134,
  efunc_gen_DoPatternSteps_Z13 = 135,
  efunc_gen_T1_Z1 = 136,
  efunc_gen_T2_Z1 = 137,
  efunc_gen_T3_Z1 = 138,
  efunc_gen_T4_Z1 = 139,
  efunc_gen_T5_Z1 = 140,
  efunc_gen_T5m_sub_Z1 = 141,
  efunc_gen_T6_Z1 = 142,
  efunc_gen_T7_Z1 = 143,
  efunc_gen_DoPatternSteps_Z14 = 144,
  efunc_gen_DoPatternSteps_B1Z0 = 145,
  efunc_gen_DoPatternSteps_B1Z2 = 146,
  efunc_gen_DoPatternSteps_B1Z4 = 147,
  efunc_gen_DoPatternSteps_B1Z5 = 148,
  efunc_gen_T1_Z1C1 = 149,
  efunc_gen_T1_Z1C2 = 150,
  efunc_gen_T1_Z1C3 = 151,
  efunc_gen_T1_Z0 = 152,
  efunc_gen_T2_Z1C1 = 153,
  efunc_gen_T2_Z1C2 = 154,
  efunc_gen_T2_Z1C3 = 155,
  efunc_gen_T2_Z0 = 156,
  efunc_gen_T3_Z1C1 = 157,
  efunc_gen_T3_Z0 = 158,
  efunc_gen_T4_Z1C1 = 159,
  efunc_gen_T4_Z0 = 160,
  efunc_gen_T5_Z1C1 = 161,
  efunc_gen_T5_Z0 = 162,
  efunc_gen_T5m_sub_Z1C1 = 163,
  efunc_gen_T5m_sub_Z1C2 = 164,
  efunc_gen_T5m_sub_Z0 = 165,
  efunc_gen_T6_Z1C1 = 166,
  efunc_gen_T6_Z1C2 = 167,
  efunc_gen_T6_Z0 = 168,
  efunc_gen_T7_Z1C1 = 169,
  efunc_gen_T7_Z1C2 = 170,
  efunc_gen_T7_Z0 = 171,
  efunc_gen_DoPatternSteps_B1Z2S1C1 = 172,
  efunc_gen_DoPatternSteps_B1Z2S2C1 = 173,
  efunc_gen_DoPatternSteps_B1Z3S1C1 = 174,
  efunc_gen_DoPatternSteps_B1Z3S2C1 = 175,
  efunc_gen_DoPatternSteps_Z15 = 176,
  efunc_gen_DoPatternSteps_Z16 = 177,
  efunc_gen_DoPatternSteps_B1Z4S1C1 = 178,
  efunc_gen_DoPatternSteps_B1Z4S2C1 = 179,
  efunc_gen_DoPatternSteps_B1Z5S1C1 = 180,
  efunc_gen_DoPatternSteps_B1Z5S2C1 = 181,
  efunc_gen_DoPatternSteps_B1Z6 = 182,
  efunc_gen_DoPatternSteps_B1Z7 = 183,
  efunc_gen_DoPatternSteps_B1Z6S1C1 = 184,
  efunc_gen_DoPatternSteps_B1Z6S2C1 = 185,
  efunc_gen_DoPatternSteps_B1Z7S1C1 = 186,
  efunc_gen_DoPatternSteps_Z17 = 187,
  efunc_gen_DoPatternSteps_B1Z7S2C1 = 188,
  efunc_gen_DoPatternSteps_B1Z8 = 189,
  efunc_gen_DoPatternSteps_B1Z8S1C1 = 190,
  efunc_gen_DoPatternSteps_B1Z8S2C1 = 191,
};


enum ident {
  ident_Function = 0,
  ident_GNm_Local = 1,
  ident_Sentences = 2,
  ident_Condition = 3,
  ident_HOLE = 4,
  ident_True = 5,
  ident_Var = 6,
  ident_Brackets = 7,
  ident_LeftBracket = 8,
  ident_RightBracket = 9,
  ident_ADTm_Brackets = 10,
  ident_RightADT = 11,
  ident_LeftADT = 12,
  ident_OpenE = 13,
  ident_Symbol = 14,
  ident_False = 15,
  ident_CallBrackets = 16,
  ident_ClosureBrackets = 17,
  ident_Name = 18,
  ident_Drive = 19,
  ident_Spec = 20,
  ident_Mu = 21,
  ident_Up = 22,
  ident_Evm_met = 23,
  ident_Residue = 24,
  ident_u_u_Metau_Residue = 25,
  ident_Apply = 26,
  ident_Map = 27,
  ident_Reduce = 28,
  ident_Fetch = 29,
  ident_MapAccum = 30,
  ident_DoMapAccum = 31,
  ident_UnBracket = 32,
  ident_DelAccumulator = 33,
  ident_Inc = 34,
  ident_Dec = 35,
  ident_Pipe = 36,
  ident_Passm_UnCondition = 37,
  ident_UnConditionm_Unit = 38,
  ident_UnConditionm_Unitm_Sentence = 39,
  ident_UnConditionm_RemFunctions = 40,
  ident_PatternSteps = 41,
  ident_DoPatternSteps = 42,
  ident_HardItem = 43,
  ident_BindBrackets = 44,
  ident_DoBindBrackets = 45,
  ident_T1 = 46,
  ident_PassiveHoles = 47,
  ident_T2 = 48,
  ident_T3 = 49,
  ident_T4 = 50,
  ident_T5 = 51,
  ident_T5m_UnHole = 52,
  ident_T5m_sub = 53,
  ident_Substitute = 54,
  ident_T6 = 55,
  ident_T7 = 56,
  ident_T0 = 57,
  ident_DoT0 = 58,
  ident_UnConditionm_Sentence = 59,
  ident_ConditionContext = 60,
  ident_OpenEChain = 61,
  ident_DoOpenEChain = 62,
  ident_MakeOpenEm_ForwardNext = 63,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_Passm_UnCondition(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Pass-UnCondition/4 s.MarkupContext/5 e.Units/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Units as range 2
  //DEBUG: s.MarkupContext: 5
  //DEBUG: e.Units: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@1/4 AsIs: s.MarkupContext/5 AsIs: e.Units/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Passm_UnCondition("Pass-UnCondition", 0U, 0U, func_Passm_UnCondition);


static refalrts::FnResult func_gen_UnConditionm_Unit_S1A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 58 elems
  refalrts::Iter context[58];
  refalrts::zeros( context, 58 );
  // </0 & UnCondition-Unit$1=4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UnCondition-Unit$1=4/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 (/13 s.new4/19 e.new5/11 (/17 e.new6/15 )/18 )/14 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_right( context[15], context[16], context[11], context[12] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new6 as range 15
  // closed e.new7 as range 2
  if( ! refalrts::svar_left( context[19], context[11], context[12] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 11
  do {
    // </0 & UnCondition-Unit$1=4/4 s.new8/5 (/8 e.new12/20 )/9 s.new9/10 (/13 s.new13/19 t.new14/28 e.new15/22 (/17 e.new16/24 )/18 )/14 t.new10/30 e.new11/26 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[11];
    context[23] = context[12];
    context[24] = context[15];
    context[25] = context[16];
    context[26] = context[2];
    context[27] = context[3];
    // closed e.new12 as range 20
    // closed e.new16 as range 24
    context[29] = refalrts::tvar_left( context[28], context[22], context[23] );
    if( ! context[29] )
      continue;
    // closed e.new15 as range 22
    context[31] = refalrts::tvar_left( context[30], context[26], context[27] );
    if( ! context[31] )
      continue;
    // closed e.new11 as range 26
    do {
      // </0 & UnCondition-Unit$1=4/4 s.Scope/5 (/8 e.Name/32 )/9 s.MarkupContext/10 (/13 s.SkipNo$a/19 (/28 e.1/40 )/29 e.0/34 (/17 e.NewFunctions$a/36 )/18 )/14 t./30 e./38 >/1
      context[32] = context[20];
      context[33] = context[21];
      context[34] = context[22];
      context[35] = context[23];
      context[36] = context[24];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = 0;
      context[41] = 0;
      if( ! refalrts::brackets_term( context[40], context[41], context[28] ) )
        continue;
      // closed e.Name as range 32
      // closed e.1 as range 40
      // closed e.0 as range 34
      // closed e.NewFunctions$a as range 36
      // closed e. as range 38
      //DEBUG: t.: 30
      //DEBUG: s.Scope: 5
      //DEBUG: s.MarkupContext: 10
      //DEBUG: s.SkipNo$a: 19
      //DEBUG: e.Name: 32
      //DEBUG: e.1: 40
      //DEBUG: e.0: 34
      //DEBUG: e.NewFunctions$a: 36
      //DEBUG: e.: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.MarkupContext/10 {REMOVED TILE} s.SkipNo$a/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: s.Scope/5 AsIs: (/8 AsIs: e.Name/32 AsIs: )/9 } Tile{ HalfReuse: # Sentences/14 AsIs: t./30 AsIs: e./38 HalfReuse: )/1 } Tile{ AsIs: (/13 } # Function/42 # GN-Local/43 Tile{ AsIs: (/28 AsIs: e.1/40 AsIs: )/29 } # Sentences/44 e./38/45 )/47 </48 & UnCondition-RemFunctions/49 2/50 (/51 Tile{ AsIs: e.0/34 } )/52 e./38/53 >/55 </56 & Map@1/57 Tile{ HalfReuse: s.MarkupContext10 /17 AsIs: e.NewFunctions$a/36 HalfReuse: >/18 } Tile{ ]] }
      refalrts::alloc_ident(vm, context[42], identifiers[ident_Function]);
      refalrts::alloc_ident(vm, context[43], identifiers[ident_GNm_Local]);
      refalrts::alloc_ident(vm, context[44], identifiers[ident_Sentences]);
      refalrts::copy_evar(vm, context[45], context[46], context[38], context[39]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_UnConditionm_RemFunctions]);
      refalrts::alloc_number(vm, context[50], 2UL);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::copy_evar(vm, context[53], context[54], context[38], context[39]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_name(vm, context[57], functions[efunc_gen_Map_Z1]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Function]);
      refalrts::reinit_ident(context[14], identifiers[ident_Sentences]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_svar( context[17], context[10] );
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[51], context[52] );
      refalrts::link_brackets( context[13], context[47] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[0], context[1] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[52], context[57] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[44], context[51] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & UnCondition-Unit$1=4/4 s.Scope/5 (/8 e.Name/32 )/9 s.MarkupContext/10 (/13 s.SkipNo$a/19 '-'/28 e.0/34 (/17 e.NewFunctions$a/36 )/18 )/14 t./30 e./38 >/1
      context[32] = context[20];
      context[33] = context[21];
      context[34] = context[22];
      context[35] = context[23];
      context[36] = context[24];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[27];
      if( ! refalrts::char_term( '-', context[28] ) )
        continue;
      // closed e.Name as range 32
      // closed e.0 as range 34
      // closed e.NewFunctions$a as range 36
      // closed e. as range 38
      //DEBUG: t.: 30
      //DEBUG: s.Scope: 5
      //DEBUG: s.MarkupContext: 10
      //DEBUG: s.SkipNo$a: 19
      //DEBUG: e.Name: 32
      //DEBUG: e.0: 34
      //DEBUG: e.NewFunctions$a: 36
      //DEBUG: e.: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SkipNo$a/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: s.Scope/5 AsIs: (/8 AsIs: e.Name/32 AsIs: )/9 } Tile{ HalfReuse: # Sentences/14 AsIs: t./30 AsIs: e./38 HalfReuse: )/1 } Tile{ HalfReuse: </13 } & UnCondition-RemFunctions/40 2/41 Tile{ HalfReuse: (/28 AsIs: e.0/34 HalfReuse: )/17 } e./38/42 Tile{ HalfReuse: >/18 } </44 & Map@1/45 Tile{ AsIs: s.MarkupContext/10 } Tile{ AsIs: e.NewFunctions$a/36 } >/46 Tile{ ]] }
      refalrts::alloc_name(vm, context[40], functions[efunc_UnConditionm_RemFunctions]);
      refalrts::alloc_number(vm, context[41], 2UL);
      refalrts::copy_evar(vm, context[42], context[43], context[38], context[39]);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_gen_Map_Z1]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Function]);
      refalrts::reinit_ident(context[14], identifiers[ident_Sentences]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_open_bracket(context[28]);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[28], context[17] );
      refalrts::link_brackets( context[0], context[1] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[28], context[17] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & UnCondition-Unit$1=4/4 s.Scope/5 (/8 e.Name/32 )/9 s.MarkupContext/10 (/13 s.SkipNo$a/19 t.0/28 e.0/34 (/17 e.NewFunctions$a/36 )/18 )/14 t./30 e./38 >/1
    context[32] = context[20];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[27];
    // closed e.Name as range 32
    // closed e.0 as range 34
    // closed e.NewFunctions$a as range 36
    // closed e. as range 38
    //DEBUG: t.0: 28
    //DEBUG: t.: 30
    //DEBUG: s.Scope: 5
    //DEBUG: s.MarkupContext: 10
    //DEBUG: s.SkipNo$a: 19
    //DEBUG: e.Name: 32
    //DEBUG: e.0: 34
    //DEBUG: e.NewFunctions$a: 36
    //DEBUG: e.: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.MarkupContext/10 {REMOVED TILE} s.SkipNo$a/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: s.Scope/5 AsIs: (/8 AsIs: e.Name/32 AsIs: )/9 } Tile{ HalfReuse: # Sentences/14 AsIs: t./30 AsIs: e./38 HalfReuse: )/1 } </40 & UnCondition-RemFunctions$1\1*2/41 Tile{ AsIs: (/13 } e./38/42 )/44 Tile{ AsIs: t.0/28 } >/45 </46 & UnCondition-RemFunctions/47 2/48 (/49 Tile{ AsIs: e.0/34 } )/50 e./38/51 >/53 </54 & Map@1/55 Tile{ HalfReuse: s.MarkupContext10 /17 AsIs: e.NewFunctions$a/36 HalfReuse: >/18 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_UnConditionm_RemFunctions_S1L1D2]);
    refalrts::copy_evar(vm, context[42], context[43], context[38], context[39]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_UnConditionm_RemFunctions]);
    refalrts::alloc_number(vm, context[48], 2UL);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::copy_evar(vm, context[51], context[52], context[38], context[39]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_open_call(vm, context[54]);
    refalrts::alloc_name(vm, context[55], functions[efunc_gen_Map_Z1]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Function]);
    refalrts::reinit_ident(context[14], identifiers[ident_Sentences]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_svar( context[17], context[10] );
    refalrts::reinit_close_call(context[18]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[46] );
    refalrts::link_brackets( context[49], context[50] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[40] );
    refalrts::link_brackets( context[13], context[44] );
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[50], context[55] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[45], context[49] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & UnCondition-Unit$1=4/4 s.Scope/5 (/8 e.Name/20 )/9 s.MarkupContext/10 (/13 s.SkipNo$a/19 (/17 e.NewFunctions$a/22 )/18 )/14 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[15];
    context[23] = context[16];
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Name as range 20
    // closed e.NewFunctions$a as range 22
    //DEBUG: s.Scope: 5
    //DEBUG: s.MarkupContext: 10
    //DEBUG: s.SkipNo$a: 19
    //DEBUG: e.Name: 20
    //DEBUG: e.NewFunctions$a: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SkipNo$a/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: s.Scope/5 AsIs: (/8 AsIs: e.Name/20 AsIs: )/9 } Tile{ HalfReuse: # Sentences/13 } Tile{ AsIs: )/18 HalfReuse: </14 } Tile{ HalfReuse: & Map@1/17 } Tile{ AsIs: s.MarkupContext/10 } Tile{ AsIs: e.NewFunctions$a/22 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Function]);
    refalrts::reinit_ident(context[13], identifiers[ident_Sentences]);
    refalrts::reinit_open_call(context[14]);
    refalrts::reinit_name(context[17], functions[efunc_gen_Map_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[0], context[18] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[18], context[14] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UnCondition-Unit$1=4/4 s.Scope/5 (/8 e.Name/6 )/9 s.MarkupContext/10 (/13 s.SkipNo$a/19 e.RemNames$a/11 (/17 e.NewFunctions$a/15 )/18 )/14 e.Sentences$a/2 >/1
  // closed e.Name as range 6
  // closed e.RemNames$a as range 11
  // closed e.NewFunctions$a as range 15
  // closed e.Sentences$a as range 2
  //DEBUG: s.Scope: 5
  //DEBUG: s.MarkupContext: 10
  //DEBUG: s.SkipNo$a: 19
  //DEBUG: e.Name: 6
  //DEBUG: e.RemNames$a: 11
  //DEBUG: e.NewFunctions$a: 15
  //DEBUG: e.Sentences$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.MarkupContext/10 {REMOVED TILE} s.SkipNo$a/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: s.Scope/5 AsIs: (/8 AsIs: e.Name/6 AsIs: )/9 } # Sentences/20 e.Sentences$a/2/21 )/23 </24 & UnCondition-RemFunctions@0/25 1/26 Tile{ AsIs: (/13 } Tile{ AsIs: e.RemNames$a/11 } Tile{ AsIs: )/14 AsIs: e.Sentences$a/2 AsIs: >/1 } </27 & Map@1/28 Tile{ HalfReuse: s.MarkupContext10 /17 AsIs: e.NewFunctions$a/15 HalfReuse: >/18 } Tile{ ]] }
  refalrts::alloc_ident(vm, context[20], identifiers[ident_Sentences]);
  refalrts::copy_evar(vm, context[21], context[22], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_UnConditionm_RemFunctions_Z0]);
  refalrts::alloc_number(vm, context[26], 1UL);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_gen_Map_Z1]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Function]);
  refalrts::reinit_svar( context[17], context[10] );
  refalrts::reinit_close_call(context[18]);
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[0], context[23] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[14], context[1] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[20], context[26] );
  refalrts::splice_to_freelist_open( vm, context[9], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UnConditionm_Unit_S1A4("UnCondition-Unit$1=4", COOKIE1_, COOKIE2_, func_gen_UnConditionm_Unit_S1A4);


static refalrts::FnResult func_UnConditionm_Unit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & UnCondition-Unit/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UnCondition-Unit/4 s.new1/5 t.new2/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & UnCondition-Unit/4 s.MarkupContext/5 (/6 # Function/10 s.Scope/11 (/14 e.Name/12 )/15 # Sentences/16 e.Sentences/8 )/7 >/1
    context[8] = 0;
    context[9] = 0;
    if( ! refalrts::brackets_term( context[8], context[9], context[6] ) )
      continue;
    context[10] = refalrts::ident_left( identifiers[ident_Function], context[8], context[9] );
    if( ! context[10] )
      continue;
    if( ! refalrts::svar_left( context[11], context[8], context[9] ) )
      continue;
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[8], context[9] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Sentences], context[8], context[9] );
    if( ! context[16] )
      continue;
    // closed e.Name as range 12
    // closed e.Sentences as range 8
    //DEBUG: s.MarkupContext: 5
    //DEBUG: s.Scope: 11
    //DEBUG: e.Name: 12
    //DEBUG: e.Sentences: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </6 HalfReuse: & UnCondition-Unit$1=4/10 AsIs: s.Scope/11 AsIs: (/14 AsIs: e.Name/12 AsIs: )/15 HalfReuse: s.MarkupContext5 /16 } Tile{ AsIs: </0 Reuse: & DoMapAccum@1/4 } (/17 e.Name/12/18 )/20 Tile{ AsIs: s.MarkupContext/5 } (/21 1/22 (/23 )/24 )/25 (/26 )/27 Tile{ AsIs: e.Sentences/8 } Tile{ HalfReuse: >/7 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::copy_evar(vm, context[18], context[19], context[12], context[13]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_number(vm, context[22], 1UL);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::reinit_open_call(context[6]);
    refalrts::reinit_name(context[10], functions[efunc_gen_UnConditionm_Unit_S1A4]);
    refalrts::reinit_svar( context[16], context[5] );
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::reinit_close_call(context[7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[21], context[25] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[21], context[27] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[6], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UnCondition-Unit/4 s.MarkupContext/5 t.Other/6 >/1
  //DEBUG: t.Other: 6
  //DEBUG: s.MarkupContext: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnCondition-Unit/4 s.MarkupContext/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Other/6 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnConditionm_Unit("UnCondition-Unit", COOKIE1_, COOKIE2_, func_UnConditionm_Unit);


static refalrts::FnResult func_gen_UnConditionm_Unitm_Sentence_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & UnCondition-Unit-Sentence$1=3/4 s.SkipNo/5 (/8 e.RemNames/6 )/9 (/12 e.RemName/10 )/13 (/16 e.NewFunctions/14 )/17 (/20 e.Sentence$a/18 )/21 e.NewSentenceFunctions/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.RemNames as range 6
  // closed e.RemName as range 10
  // closed e.NewFunctions as range 14
  // closed e.Sentence$a as range 18
  // closed e.NewSentenceFunctions as range 2
  //DEBUG: s.SkipNo: 5
  //DEBUG: e.RemNames: 6
  //DEBUG: e.RemName: 10
  //DEBUG: e.NewFunctions: 14
  //DEBUG: e.Sentence$a: 18
  //DEBUG: e.NewSentenceFunctions: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/22 Tile{ HalfReuse: </1 } Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.SkipNo/5 HalfReuse: >/8 } Tile{ AsIs: e.RemNames/6 } Tile{ AsIs: (/12 AsIs: e.RemName/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.NewFunctions/14 } Tile{ AsIs: e.NewSentenceFunctions/2 } Tile{ AsIs: )/9 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.Sentence$a/18 AsIs: )/21 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::reinit_open_call(context[1]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::reinit_close_call(context[8]);
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[22], context[17] );
  refalrts::link_brackets( context[16], context[9] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[21] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UnConditionm_Unitm_Sentence_S1A3("UnCondition-Unit-Sentence$1=3", COOKIE1_, COOKIE2_, func_gen_UnConditionm_Unitm_Sentence_S1A3);


static refalrts::FnResult func_gen_UnConditionm_Unitm_Sentence_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & UnCondition-Unit-Sentence$1=2/4 s.SkipNo/5 (/8 e.RemNames/6 )/9 (/12 e.NewFunctions/10 )/13 s.MarkupContext/14 (/17 e.Sentence/15 )/18 e.RemName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.RemNames as range 6
  // closed e.NewFunctions as range 10
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.Sentence as range 15
  // closed e.RemName as range 2
  //DEBUG: s.SkipNo: 5
  //DEBUG: e.RemNames: 6
  //DEBUG: e.NewFunctions: 10
  //DEBUG: s.MarkupContext: 14
  //DEBUG: e.Sentence: 15
  //DEBUG: e.RemName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnCondition-Unit-Sentence$1=3/4 AsIs: s.SkipNo/5 AsIs: (/8 AsIs: e.RemNames/6 AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.RemName/2 } Tile{ AsIs: )/18 } (/19 Tile{ AsIs: e.NewFunctions/10 } )/20 </21 Tile{ HalfReuse: & UnCondition-Sentence@1/13 AsIs: s.MarkupContext/14 AsIs: (/17 } e.RemName/2/22 )/24 Tile{ AsIs: e.Sentence/15 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::copy_evar(vm, context[22], context[23], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_UnConditionm_Unitm_Sentence_S1A3]);
  refalrts::reinit_name(context[13], functions[efunc_gen_UnConditionm_Sentence_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[17], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[12], context[18] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[13], context[17] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UnConditionm_Unitm_Sentence_S1A2("UnCondition-Unit-Sentence$1=2", COOKIE1_, COOKIE2_, func_gen_UnConditionm_Unitm_Sentence_S1A2);


static refalrts::FnResult func_UnConditionm_Unitm_Sentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & UnCondition-Unit-Sentence/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UnCondition-Unit-Sentence/4 e.new1/2 s.new2/18 (/11 s.new3/17 e.new4/9 (/15 e.new5/13 )/16 )/12 (/7 e.new6/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new5 as range 13
  // closed e.new6 as range 5
  if( ! refalrts::svar_left( context[17], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 9
  if( ! refalrts::svar_right( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & UnCondition-Unit-Sentence/4 e.Name/19 s.MarkupContext/18 (/11 s.SkipNo/17 e.RemNames/21 (/15 e.NewFunctions/23 )/16 )/12 (/7 e.Sentence/25 )/8 >/1
    context[19] = context[2];
    context[20] = context[3];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[13];
    context[24] = context[14];
    context[25] = context[5];
    context[26] = context[6];
    // closed e.Name as range 19
    // closed e.RemNames as range 21
    // closed e.NewFunctions as range 23
    // closed e.Sentence as range 25
    //DEBUG: s.MarkupContext: 18
    //DEBUG: s.SkipNo: 17
    //DEBUG: e.Name: 19
    //DEBUG: e.RemNames: 21
    //DEBUG: e.NewFunctions: 23
    //DEBUG: e.Sentence: 25
    //17: s.SkipNo
    //18: s.MarkupContext
    //19: e.Name
    //21: e.RemNames
    //23: e.NewFunctions
    //25: e.Sentence
    //30: e.Sentence

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_UnConditionm_Unitm_Sentence_S1C1]);
    refalrts::copy_evar(vm, context[30], context[31], context[25], context[26]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[27] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_elem( res, context[27] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </27 & UnCondition-Unit-Sentence$1?1/31 (/34 e._/32 )/35 (/38 # Condition/40 (/43 e.ConditionName/41 )/44 (/47 e._0/45 )/48 (/51 e._1/49 )/52 )/39 e._2/29 >/28
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::call_left( context[29], context[30], context[27], context[28] );
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::brackets_left( context[32], context[33], context[29], context[30] );
      if( ! context[34] )
        continue;
      refalrts::bracket_pointers(context[34], context[35]);
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[29], context[30] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Condition], context[36], context[37] );
      if( ! context[40] )
        continue;
      context[41] = 0;
      context[42] = 0;
      context[43] = refalrts::brackets_left( context[41], context[42], context[36], context[37] );
      if( ! context[43] )
        continue;
      refalrts::bracket_pointers(context[43], context[44]);
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[36], context[37] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      context[49] = 0;
      context[50] = 0;
      context[51] = refalrts::brackets_left( context[49], context[50], context[36], context[37] );
      if( ! context[51] )
        continue;
      refalrts::bracket_pointers(context[51], context[52]);
      if( ! refalrts::empty_seq( context[36], context[37] ) )
        continue;
      // closed e._ as range 32
      // closed e.ConditionName as range 41
      // closed e._0 as range 45
      // closed e._1 as range 49
      // closed e._2 as range 29
      //DEBUG: s.MarkupContext: 18
      //DEBUG: s.SkipNo: 17
      //DEBUG: e.Name: 19
      //DEBUG: e.RemNames: 21
      //DEBUG: e.NewFunctions: 23
      //DEBUG: e.Sentence: 25
      //DEBUG: e._: 32
      //DEBUG: e.ConditionName: 41
      //DEBUG: e._0: 45
      //DEBUG: e._1: 49
      //DEBUG: e._2: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.MarkupContext/18 (/11 s.SkipNo/17 {REMOVED TILE} {REMOVED TILE} (/34 e._/32 )/35 {REMOVED TILE} e.ConditionName/41 )/44 (/47 e._0/45 {REMOVED TILE} e._1/49 {REMOVED TILE} {REMOVED TILE} e._2/29 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnCondition-Unit-Sentence$1=2/4 } Tile{ HalfReuse: s.SkipNo17 /48 AsIs: (/51 } Tile{ AsIs: e.RemNames/21 } Tile{ AsIs: )/39 } Tile{ AsIs: (/15 AsIs: e.NewFunctions/23 AsIs: )/16 HalfReuse: s.MarkupContext18 /12 AsIs: (/7 AsIs: e.Sentence/25 AsIs: )/8 AsIs: </27 Reuse: & AddSuffix/31 } Tile{ AsIs: e.Name/19 } Tile{ AsIs: (/38 HalfReuse: '*'/40 HalfReuse: s.SkipNo17 /43 } Tile{ AsIs: )/52 } Tile{ AsIs: >/28 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_UnConditionm_Unitm_Sentence_S1A2]);
      refalrts::reinit_svar( context[48], context[17] );
      refalrts::reinit_svar( context[12], context[18] );
      refalrts::update_name(context[31], functions[efunc_AddSuffix]);
      refalrts::reinit_char(context[40], '*');
      refalrts::reinit_svar( context[43], context[17] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[38], context[52] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[51], context[39] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_evar( res, context[38], context[43] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[15], context[31] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[48], context[51] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[27], context[28]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UnCondition-Unit-Sentence/4 e.Name/2 s.MarkupContext/18 (/11 s.SkipNo/17 e.RemNames/9 (/15 e.NewFunctions/13 )/16 )/12 (/7 e.Sentence/5 )/8 >/1
  // closed e.Name as range 2
  // closed e.RemNames as range 9
  // closed e.NewFunctions as range 13
  // closed e.Sentence as range 5
  //DEBUG: s.MarkupContext: 18
  //DEBUG: s.SkipNo: 17
  //DEBUG: e.Name: 2
  //DEBUG: e.RemNames: 9
  //DEBUG: e.NewFunctions: 13
  //DEBUG: e.Sentence: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Name/2 s.MarkupContext/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/19 Tile{ AsIs: </0 Reuse: & Add/4 } Tile{ HalfReuse: 1/11 AsIs: s.SkipNo/17 } Tile{ AsIs: >/1 } Tile{ AsIs: e.RemNames/9 } '-'/20 Tile{ AsIs: (/15 AsIs: e.NewFunctions/13 AsIs: )/16 AsIs: )/12 AsIs: (/7 AsIs: e.Sentence/5 AsIs: )/8 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_char(vm, context[20], '-');
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_number(context[11], 1UL);
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[8] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[11], context[17] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_elem( res, context[19] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnConditionm_Unitm_Sentence("UnCondition-Unit-Sentence", COOKIE1_, COOKIE2_, func_UnConditionm_Unitm_Sentence);


static refalrts::FnResult func_UnConditionm_RemFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & UnCondition-RemFunctions/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UnCondition-RemFunctions/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & UnCondition-RemFunctions/4 s.new4/5 (/8 t.new7/14 e.new8/10 )/9 t.new5/16 e.new6/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    context[15] = refalrts::tvar_left( context[14], context[10], context[11] );
    if( ! context[15] )
      continue;
    // closed e.new8 as range 10
    context[17] = refalrts::tvar_left( context[16], context[12], context[13] );
    if( ! context[17] )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & UnCondition-RemFunctions/4 s.SkipNo/5 (/8 (/14 e./22 )/15 e.RemNames/18 )/9 t.Skip/16 e.Sentences/20 >/1
      context[18] = context[10];
      context[19] = context[11];
      context[20] = context[12];
      context[21] = context[13];
      context[22] = 0;
      context[23] = 0;
      if( ! refalrts::brackets_term( context[22], context[23], context[14] ) )
        continue;
      // closed e. as range 22
      // closed e.RemNames as range 18
      // closed e.Sentences as range 20
      //DEBUG: t.Skip: 16
      //DEBUG: s.SkipNo: 5
      //DEBUG: e.: 22
      //DEBUG: e.RemNames: 18
      //DEBUG: e.Sentences: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Skip/16 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/24 # Function/25 Tile{ HalfReuse: # GN-Local/8 AsIs: (/14 AsIs: e./22 AsIs: )/15 } # Sentences/26 e.Sentences/20/27 Tile{ AsIs: )/9 } Tile{ AsIs: </0 AsIs: & UnCondition-RemFunctions/4 } </29 & Add/30 1/31 Tile{ AsIs: s.SkipNo/5 } >/32 (/33 Tile{ AsIs: e.RemNames/18 } )/34 Tile{ AsIs: e.Sentences/20 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::alloc_ident(vm, context[25], identifiers[ident_Function]);
      refalrts::alloc_ident(vm, context[26], identifiers[ident_Sentences]);
      refalrts::copy_evar(vm, context[27], context[28], context[20], context[21]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[31], 1UL);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_ident(context[8], identifiers[ident_GNm_Local]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[24], context[9] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & UnCondition-RemFunctions/4 s.SkipNo/5 (/8 '-'/14 e.RemNames/18 )/9 t.Skip/16 e.Sentences/20 >/1
      context[18] = context[10];
      context[19] = context[11];
      context[20] = context[12];
      context[21] = context[13];
      if( ! refalrts::char_term( '-', context[14] ) )
        continue;
      // closed e.RemNames as range 18
      // closed e.Sentences as range 20
      //DEBUG: t.Skip: 16
      //DEBUG: s.SkipNo: 5
      //DEBUG: e.RemNames: 18
      //DEBUG: e.Sentences: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} t.Skip/16 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </22 & UnCondition-RemFunctions/23 </24 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.SkipNo/5 HalfReuse: >/8 HalfReuse: (/14 AsIs: e.RemNames/18 AsIs: )/9 } Tile{ AsIs: e.Sentences/20 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_UnConditionm_RemFunctions]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::reinit_name(context[0], functions[efunc_Add]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[14], context[9] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & UnCondition-RemFunctions/4 s.SkipNo/5 (/8 t.RemainderName/14 e.RemNames/18 )/9 t.Skip/16 e.Sentences/20 >/1
    context[18] = context[10];
    context[19] = context[11];
    context[20] = context[12];
    context[21] = context[13];
    // closed e.RemNames as range 18
    // closed e.Sentences as range 20
    //DEBUG: t.RemainderName: 14
    //DEBUG: t.Skip: 16
    //DEBUG: s.SkipNo: 5
    //DEBUG: e.RemNames: 18
    //DEBUG: e.Sentences: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Skip/16 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnCondition-RemFunctions$1\1*2/4 } (/22 Tile{ AsIs: e.Sentences/20 } Tile{ HalfReuse: )/8 AsIs: t.RemainderName/14 } >/23 </24 & UnCondition-RemFunctions/25 </26 & Add/27 1/28 Tile{ AsIs: s.SkipNo/5 } >/29 (/30 Tile{ AsIs: e.RemNames/18 } Tile{ AsIs: )/9 } e.Sentences/20/31 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_UnConditionm_RemFunctions]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[28], 1UL);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::copy_evar(vm, context[31], context[32], context[20], context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_UnConditionm_RemFunctions_S1L1D2]);
    refalrts::reinit_close_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[30], context[9] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[22], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[23], context[28] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UnCondition-RemFunctions/4 s.SkipNo/5 (/8 )/9 >/1
  if( ! refalrts::empty_seq( context[6], context[7] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.SkipNo: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnCondition-RemFunctions/4 s.SkipNo/5 (/8 )/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnConditionm_RemFunctions("UnCondition-RemFunctions", COOKIE1_, COOKIE2_, func_UnConditionm_RemFunctions);


static refalrts::FnResult func_PatternSteps(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & PatternSteps/4 (/7 e.UsedVariables/5 )/8 e.Pattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.UsedVariables as range 5
  // closed e.Pattern as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.Pattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1@1/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 } (/9 e.Pattern/2/10 )/12 (/13 # HOLE/14 Tile{ AsIs: e.Pattern/2 } )/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::copy_evar(vm, context[10], context[11], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_HOLE]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[15] );
  refalrts::link_brackets( context[9], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatternSteps("PatternSteps", COOKIE1_, COOKIE2_, func_PatternSteps);


static refalrts::FnResult func_gen_DoPatternSteps_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 114 elems
  refalrts::Iter context[114];
  refalrts::zeros( context, 114 );
  // </0 & DoPatternSteps:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps:1/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & DoPatternSteps:1/4 (/7 e.BoundEVariables/15 )/8 t.UsedVariables/9 (/13 e.HolesAndItems/17 )/14 e.HolesAndItems-B/21 (/27 # HOLE/29 t.Item/30 e.Pattern/25 )/28 e.HolesAndItems-E/23 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.BoundEVariables as range 15
    // closed e.HolesAndItems as range 17
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[19];
      context[24] = context[20];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_HOLE], context[25], context[26] );
      if( ! context[29] )
        continue;
      // closed e.HolesAndItems-E as range 23
      context[31] = refalrts::tvar_left( context[30], context[25], context[26] );
      if( ! context[31] )
        continue;
      // closed e.Pattern as range 25
      //DEBUG: t.UsedVariables: 9
      //DEBUG: e.BoundEVariables: 15
      //DEBUG: e.HolesAndItems: 17
      //DEBUG: e.HolesAndItems-B: 21
      //DEBUG: e.HolesAndItems-E: 23
      //DEBUG: t.Item: 30
      //DEBUG: e.Pattern: 25
      //9: t.UsedVariables
      //15: e.BoundEVariables
      //17: e.HolesAndItems
      //21: e.HolesAndItems-B
      //23: e.HolesAndItems-E
      //25: e.Pattern
      //30: t.Item
      //38: e.BoundEVariables
      //41: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_DoPatternSteps_B1S1C1]);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::copy_evar(vm, context[38], context[39], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::copy_stvar(vm, context[41], context[30]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[32] );
      res = refalrts::splice_elem( res, context[33] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[35] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_stvar( res, context[41] );
      refalrts::link_brackets( context[37], context[40] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </32 & DoPatternSteps:1$1?1/36 # True/37 >/33
        context[34] = 0;
        context[35] = 0;
        context[36] = refalrts::call_left( context[34], context[35], context[32], context[33] );
        context[37] = refalrts::ident_left( identifiers[ident_True], context[34], context[35] );
        if( ! context[37] )
          continue;
        if( ! refalrts::empty_seq( context[34], context[35] ) )
          continue;
        //DEBUG: t.UsedVariables: 9
        //DEBUG: e.BoundEVariables: 15
        //DEBUG: e.HolesAndItems: 17
        //DEBUG: e.HolesAndItems-B: 21
        //DEBUG: e.HolesAndItems-E: 23
        //DEBUG: t.Item: 30
        //DEBUG: e.Pattern: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems/17 {REMOVED TILE} # HOLE/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & DoPatternSteps:1$1?1/36 # True/37 >/33 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@2/4 } Tile{ AsIs: t.UsedVariables/9 } Tile{ AsIs: (/7 AsIs: e.BoundEVariables/15 AsIs: )/8 } Tile{ HalfReuse: (/14 AsIs: e.HolesAndItems-B/21 HalfReuse: )/27 } Tile{ AsIs: t.Item/30 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Pattern/25 } Tile{ AsIs: )/28 AsIs: e.HolesAndItems-E/23 HalfReuse: >/32 } Tile{ ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z2]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::reinit_close_call(context[32]);
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[28] );
        refalrts::link_brackets( context[14], context[27] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[14], context[27] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[32], context[33]);
      continue;
    } while ( refalrts::open_evar_advance( context[21], context[22], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1/4 (/7 e.BoundEVariables/15 )/8 t.UsedVariables/9 (/13 e.HolesAndItems/17 )/14 e.HolesAndItems-B/21 (/27 # HOLE/29 e.Pattern/25 t.Item/30 )/28 e.HolesAndItems-E/23 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.BoundEVariables as range 15
    // closed e.HolesAndItems as range 17
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[19];
      context[24] = context[20];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_HOLE], context[25], context[26] );
      if( ! context[29] )
        continue;
      // closed e.HolesAndItems-E as range 23
      context[31] = refalrts::tvar_right( context[30], context[25], context[26] );
      if( ! context[31] )
        continue;
      // closed e.Pattern as range 25
      //DEBUG: t.UsedVariables: 9
      //DEBUG: e.BoundEVariables: 15
      //DEBUG: e.HolesAndItems: 17
      //DEBUG: e.HolesAndItems-B: 21
      //DEBUG: e.HolesAndItems-E: 23
      //DEBUG: t.Item: 30
      //DEBUG: e.Pattern: 25
      //9: t.UsedVariables
      //15: e.BoundEVariables
      //17: e.HolesAndItems
      //21: e.HolesAndItems-B
      //23: e.HolesAndItems-E
      //25: e.Pattern
      //30: t.Item
      //38: e.BoundEVariables
      //41: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_DoPatternSteps_B1S2C1]);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::copy_evar(vm, context[38], context[39], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::copy_stvar(vm, context[41], context[30]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[32] );
      res = refalrts::splice_elem( res, context[33] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[35] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_stvar( res, context[41] );
      refalrts::link_brackets( context[37], context[40] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[32] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </32 & DoPatternSteps:1$2?1/36 # True/37 >/33
        context[34] = 0;
        context[35] = 0;
        context[36] = refalrts::call_left( context[34], context[35], context[32], context[33] );
        context[37] = refalrts::ident_left( identifiers[ident_True], context[34], context[35] );
        if( ! context[37] )
          continue;
        if( ! refalrts::empty_seq( context[34], context[35] ) )
          continue;
        //DEBUG: t.UsedVariables: 9
        //DEBUG: e.BoundEVariables: 15
        //DEBUG: e.HolesAndItems: 17
        //DEBUG: e.HolesAndItems-B: 21
        //DEBUG: e.HolesAndItems-E: 23
        //DEBUG: t.Item: 30
        //DEBUG: e.Pattern: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/13 e.HolesAndItems/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} </32 & DoPatternSteps:1$2?1/36 # True/37 >/33 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@3/4 } Tile{ AsIs: t.UsedVariables/9 } Tile{ AsIs: (/7 AsIs: e.BoundEVariables/15 AsIs: )/8 } Tile{ HalfReuse: (/14 AsIs: e.HolesAndItems-B/21 HalfReuse: )/27 HalfReuse: (/29 } Tile{ AsIs: e.Pattern/25 } Tile{ AsIs: )/28 } Tile{ AsIs: t.Item/30 } Tile{ AsIs: e.HolesAndItems-E/23 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z3]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::reinit_open_bracket(context[29]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[29], context[28] );
        refalrts::link_brackets( context[14], context[27] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[32], context[33]);
      continue;
    } while ( refalrts::open_evar_advance( context[21], context[22], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1/4 (/7 e.BoundEVariables/15 )/8 t.UsedVariables/9 (/13 e.HolesAndItems/17 )/14 e.HolesAndItems-B/21 (/27 # HOLE/29 (/32 # Var/34 'e'/35 e.Index/30 )/33 )/28 e.HolesAndItems-E/23 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.BoundEVariables as range 15
    // closed e.HolesAndItems as range 17
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[19];
      context[24] = context[20];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_HOLE], context[25], context[26] );
      if( ! context[29] )
        continue;
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[25], context[26] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = refalrts::ident_left( identifiers[ident_Var], context[30], context[31] );
      if( ! context[34] )
        continue;
      context[35] = refalrts::char_left( 'e', context[30], context[31] );
      if( ! context[35] )
        continue;
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      // closed e.Index as range 30
      // closed e.HolesAndItems-E as range 23
      //DEBUG: t.UsedVariables: 9
      //DEBUG: e.BoundEVariables: 15
      //DEBUG: e.HolesAndItems: 17
      //DEBUG: e.HolesAndItems-B: 21
      //DEBUG: e.Index: 30
      //DEBUG: e.HolesAndItems-E: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.HolesAndItems/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoPatternSteps:1/4 AsIs: (/7 AsIs: e.BoundEVariables/15 HalfReuse: (/8 } e.Index/30/36 )/38 )/39 Tile{ AsIs: t.UsedVariables/9 AsIs: (/13 } e.HolesAndItems-B/21/40 Tile{ AsIs: (/32 AsIs: # Var/34 AsIs: 'e'/35 AsIs: e.Index/30 AsIs: )/33 } e.HolesAndItems-E/23/42 Tile{ AsIs: )/14 AsIs: e.HolesAndItems-B/21 AsIs: (/27 Reuse: # Var/29 } 'e'/44 e.Index/30/45 Tile{ AsIs: )/28 AsIs: e.HolesAndItems-E/23 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[36], context[37], context[30], context[31]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::copy_evar(vm, context[40], context[41], context[21], context[22]);
      refalrts::copy_evar(vm, context[42], context[43], context[23], context[24]);
      refalrts::alloc_char(vm, context[44], 'e');
      refalrts::copy_evar(vm, context[45], context[46], context[30], context[31]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::update_ident(context[29], identifiers[ident_Var]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[32], context[33] );
      refalrts::link_brackets( context[7], context[39] );
      refalrts::link_brackets( context[8], context[38] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[14], context[29] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[21], context[22], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1/4 (/7 e.BoundEVariables/15 )/8 t.UsedVariables/9 (/13 e.HolesAndItems/17 )/14 e.HolesAndItems-B/21 (/27 # HOLE/29 )/28 e.HolesAndItems-E/23 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.BoundEVariables as range 15
    // closed e.HolesAndItems as range 17
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[19];
      context[24] = context[20];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_HOLE], context[25], context[26] );
      if( ! context[29] )
        continue;
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      // closed e.HolesAndItems-E as range 23
      //DEBUG: t.UsedVariables: 9
      //DEBUG: e.BoundEVariables: 15
      //DEBUG: e.HolesAndItems: 17
      //DEBUG: e.HolesAndItems-B: 21
      //DEBUG: e.HolesAndItems-E: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.HolesAndItems/17 )/14 {REMOVED TILE} (/27 # HOLE/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoPatternSteps:1/4 AsIs: (/7 AsIs: e.BoundEVariables/15 AsIs: )/8 AsIs: t.UsedVariables/9 AsIs: (/13 } Tile{ AsIs: e.HolesAndItems-B/21 } e.HolesAndItems-E/23/30 Tile{ AsIs: )/28 } e.HolesAndItems-B/21/32 Tile{ AsIs: e.HolesAndItems-E/23 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[30], context[31], context[23], context[24]);
      refalrts::copy_evar(vm, context[32], context[33], context[21], context[22]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[28] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[21], context[22], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1/4 (/7 e.BoundEVariables/15 )/8 t.UsedVariables/9 (/13 e.HolesAndItems/17 )/14 e.HolesAndItems-B/21 (/27 # HOLE/29 (/32 # Brackets/34 e.InBrackets/30 )/33 e.Pattern/25 )/28 e.HolesAndItems-E/23 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.BoundEVariables as range 15
    // closed e.HolesAndItems as range 17
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[19];
      context[24] = context[20];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_HOLE], context[25], context[26] );
      if( ! context[29] )
        continue;
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[25], context[26] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = refalrts::ident_left( identifiers[ident_Brackets], context[30], context[31] );
      if( ! context[34] )
        continue;
      // closed e.InBrackets as range 30
      // closed e.Pattern as range 25
      // closed e.HolesAndItems-E as range 23
      //DEBUG: t.UsedVariables: 9
      //DEBUG: e.BoundEVariables: 15
      //DEBUG: e.HolesAndItems: 17
      //DEBUG: e.HolesAndItems-B: 21
      //DEBUG: e.InBrackets: 30
      //DEBUG: e.Pattern: 25
      //DEBUG: e.HolesAndItems-E: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.HolesAndItems/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoPatternSteps:1/4 AsIs: (/7 AsIs: e.BoundEVariables/15 AsIs: )/8 AsIs: t.UsedVariables/9 AsIs: (/13 } e.HolesAndItems-B/21/35 (/37 # LeftBracket/38 )/39 (/40 # HOLE/41 e.InBrackets/30/42 )/44 (/45 # RightBracket/46 )/47 (/48 # HOLE/49 e.Pattern/25/50 )/52 e.HolesAndItems-E/23/53 Tile{ AsIs: )/14 AsIs: e.HolesAndItems-B/21 AsIs: (/27 Reuse: # LeftBracket/29 HalfReuse: )/32 HalfReuse: (/34 } # HOLE/55 Tile{ AsIs: e.InBrackets/30 } )/56 (/57 # RightBracket/58 )/59 (/60 Tile{ HalfReuse: # HOLE/33 AsIs: e.Pattern/25 AsIs: )/28 AsIs: e.HolesAndItems-E/23 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[35], context[36], context[21], context[22]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_ident(vm, context[38], identifiers[ident_LeftBracket]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::alloc_ident(vm, context[41], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[42], context[43], context[30], context[31]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_ident(vm, context[46], identifiers[ident_RightBracket]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::alloc_ident(vm, context[49], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[50], context[51], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::copy_evar(vm, context[53], context[54], context[23], context[24]);
      refalrts::alloc_ident(vm, context[55], identifiers[ident_HOLE]);
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::alloc_ident(vm, context[58], identifiers[ident_RightBracket]);
      refalrts::alloc_close_bracket(vm, context[59]);
      refalrts::alloc_open_bracket(vm, context[60]);
      refalrts::update_ident(context[29], identifiers[ident_LeftBracket]);
      refalrts::reinit_close_bracket(context[32]);
      refalrts::reinit_open_bracket(context[34]);
      refalrts::reinit_ident(context[33], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[60], context[28] );
      refalrts::link_brackets( context[57], context[59] );
      refalrts::link_brackets( context[34], context[56] );
      refalrts::link_brackets( context[27], context[32] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[48], context[52] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[40], context[44] );
      refalrts::link_brackets( context[37], context[39] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[33];
      res = refalrts::splice_evar( res, context[56], context[60] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[14], context[34] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[37], context[52] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[21], context[22], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1/4 (/7 e.BoundEVariables/15 )/8 t.UsedVariables/9 (/13 e.HolesAndItems/17 )/14 e.HolesAndItems-B/21 (/27 # HOLE/29 e.Pattern/25 (/32 # Brackets/34 e.InBrackets/30 )/33 )/28 e.HolesAndItems-E/23 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.BoundEVariables as range 15
    // closed e.HolesAndItems as range 17
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[19];
      context[24] = context[20];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_HOLE], context[25], context[26] );
      if( ! context[29] )
        continue;
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_right( context[30], context[31], context[25], context[26] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = refalrts::ident_left( identifiers[ident_Brackets], context[30], context[31] );
      if( ! context[34] )
        continue;
      // closed e.Pattern as range 25
      // closed e.InBrackets as range 30
      // closed e.HolesAndItems-E as range 23
      //DEBUG: t.UsedVariables: 9
      //DEBUG: e.BoundEVariables: 15
      //DEBUG: e.HolesAndItems: 17
      //DEBUG: e.HolesAndItems-B: 21
      //DEBUG: e.Pattern: 25
      //DEBUG: e.InBrackets: 30
      //DEBUG: e.HolesAndItems-E: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.HolesAndItems/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoPatternSteps:1/4 AsIs: (/7 AsIs: e.BoundEVariables/15 AsIs: )/8 AsIs: t.UsedVariables/9 AsIs: (/13 } e.HolesAndItems-B/21/35 (/37 # HOLE/38 e.Pattern/25/39 )/41 (/42 # LeftBracket/43 )/44 (/45 # HOLE/46 Tile{ AsIs: e.InBrackets/30 } )/47 (/48 # RightBracket/49 )/50 e.HolesAndItems-E/23/51 Tile{ AsIs: )/14 AsIs: e.HolesAndItems-B/21 AsIs: (/27 AsIs: # HOLE/29 AsIs: e.Pattern/25 HalfReuse: )/32 HalfReuse: (/34 } # LeftBracket/53 )/54 (/55 # HOLE/56 e.InBrackets/30/57 )/59 (/60 Tile{ HalfReuse: # RightBracket/33 AsIs: )/28 AsIs: e.HolesAndItems-E/23 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[35], context[36], context[21], context[22]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_ident(vm, context[38], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[39], context[40], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::alloc_ident(vm, context[43], identifiers[ident_LeftBracket]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_ident(vm, context[46], identifiers[ident_HOLE]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::alloc_ident(vm, context[49], identifiers[ident_RightBracket]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::copy_evar(vm, context[51], context[52], context[23], context[24]);
      refalrts::alloc_ident(vm, context[53], identifiers[ident_LeftBracket]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_ident(vm, context[56], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[57], context[58], context[30], context[31]);
      refalrts::alloc_close_bracket(vm, context[59]);
      refalrts::alloc_open_bracket(vm, context[60]);
      refalrts::reinit_close_bracket(context[32]);
      refalrts::reinit_open_bracket(context[34]);
      refalrts::reinit_ident(context[33], identifiers[ident_RightBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[60], context[28] );
      refalrts::link_brackets( context[55], context[59] );
      refalrts::link_brackets( context[34], context[54] );
      refalrts::link_brackets( context[27], context[32] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[48], context[50] );
      refalrts::link_brackets( context[45], context[47] );
      refalrts::link_brackets( context[42], context[44] );
      refalrts::link_brackets( context[37], context[41] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[33];
      res = refalrts::splice_evar( res, context[53], context[60] );
      res = refalrts::splice_evar( res, context[14], context[34] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[47], context[50] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[37], context[46] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[21], context[22], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1/4 (/7 e.BoundEVariables/15 )/8 t.UsedVariables/9 (/13 e.HolesAndItems/17 )/14 e.HolesAndItems-B/21 (/27 # HOLE/29 (/32 # ADT-Brackets/34 (/37 e.Name/35 )/38 e.InBrackets/30 )/33 e.Pattern/25 )/28 e.HolesAndItems-E/23 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.BoundEVariables as range 15
    // closed e.HolesAndItems as range 17
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[19];
      context[24] = context[20];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_HOLE], context[25], context[26] );
      if( ! context[29] )
        continue;
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[25], context[26] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[30], context[31] );
      if( ! context[34] )
        continue;
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[30], context[31] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      // closed e.Name as range 35
      // closed e.InBrackets as range 30
      // closed e.Pattern as range 25
      // closed e.HolesAndItems-E as range 23
      //DEBUG: t.UsedVariables: 9
      //DEBUG: e.BoundEVariables: 15
      //DEBUG: e.HolesAndItems: 17
      //DEBUG: e.HolesAndItems-B: 21
      //DEBUG: e.Name: 35
      //DEBUG: e.InBrackets: 30
      //DEBUG: e.Pattern: 25
      //DEBUG: e.HolesAndItems-E: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.HolesAndItems/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoPatternSteps:1/4 AsIs: (/7 AsIs: e.BoundEVariables/15 AsIs: )/8 AsIs: t.UsedVariables/9 AsIs: (/13 } e.HolesAndItems-B/21/39 Tile{ HalfReuse: (/34 HalfReuse: # LeftADT/37 AsIs: e.Name/35 AsIs: )/38 } Tile{ AsIs: (/32 } # HOLE/41 Tile{ AsIs: e.InBrackets/30 } )/42 (/43 # RightADT/44 )/45 (/46 # HOLE/47 e.Pattern/25/48 )/50 e.HolesAndItems-E/23/51 Tile{ AsIs: )/14 AsIs: e.HolesAndItems-B/21 AsIs: (/27 Reuse: # LeftADT/29 } e.Name/35/53 )/55 (/56 # HOLE/57 e.InBrackets/30/58 )/60 (/61 # RightADT/62 )/63 (/64 Tile{ HalfReuse: # HOLE/33 AsIs: e.Pattern/25 AsIs: )/28 AsIs: e.HolesAndItems-E/23 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[39], context[40], context[21], context[22]);
      refalrts::alloc_ident(vm, context[41], identifiers[ident_HOLE]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_ident(vm, context[44], identifiers[ident_RightADT]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[48], context[49], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::copy_evar(vm, context[51], context[52], context[23], context[24]);
      refalrts::copy_evar(vm, context[53], context[54], context[35], context[36]);
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::alloc_open_bracket(vm, context[56]);
      refalrts::alloc_ident(vm, context[57], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[58], context[59], context[30], context[31]);
      refalrts::alloc_close_bracket(vm, context[60]);
      refalrts::alloc_open_bracket(vm, context[61]);
      refalrts::alloc_ident(vm, context[62], identifiers[ident_RightADT]);
      refalrts::alloc_close_bracket(vm, context[63]);
      refalrts::alloc_open_bracket(vm, context[64]);
      refalrts::reinit_open_bracket(context[34]);
      refalrts::reinit_ident(context[37], identifiers[ident_LeftADT]);
      refalrts::update_ident(context[29], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[33], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[64], context[28] );
      refalrts::link_brackets( context[61], context[63] );
      refalrts::link_brackets( context[56], context[60] );
      refalrts::link_brackets( context[27], context[55] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[46], context[50] );
      refalrts::link_brackets( context[43], context[45] );
      refalrts::link_brackets( context[32], context[42] );
      refalrts::link_brackets( context[34], context[38] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[33];
      res = refalrts::splice_evar( res, context[55], context[64] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[14], context[29] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[42], context[50] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[34], context[38] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[21], context[22], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1/4 (/7 e.BoundEVariables/15 )/8 t.UsedVariables/9 (/13 e.HolesAndItems/17 )/14 e.HolesAndItems-B/21 (/27 # HOLE/29 e.Pattern/25 (/32 # ADT-Brackets/34 (/37 e.Name/35 )/38 e.InBrackets/30 )/33 )/28 e.HolesAndItems-E/23 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.BoundEVariables as range 15
    // closed e.HolesAndItems as range 17
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[19];
      context[24] = context[20];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_HOLE], context[25], context[26] );
      if( ! context[29] )
        continue;
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_right( context[30], context[31], context[25], context[26] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[30], context[31] );
      if( ! context[34] )
        continue;
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[30], context[31] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      // closed e.Pattern as range 25
      // closed e.Name as range 35
      // closed e.InBrackets as range 30
      // closed e.HolesAndItems-E as range 23
      //DEBUG: t.UsedVariables: 9
      //DEBUG: e.BoundEVariables: 15
      //DEBUG: e.HolesAndItems: 17
      //DEBUG: e.HolesAndItems-B: 21
      //DEBUG: e.Pattern: 25
      //DEBUG: e.Name: 35
      //DEBUG: e.InBrackets: 30
      //DEBUG: e.HolesAndItems-E: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.HolesAndItems/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoPatternSteps:1/4 AsIs: (/7 AsIs: e.BoundEVariables/15 AsIs: )/8 AsIs: t.UsedVariables/9 AsIs: (/13 } e.HolesAndItems-B/21/39 (/41 # HOLE/42 e.Pattern/25/43 )/45 (/46 # LeftADT/47 e.Name/35/48 )/50 (/51 # HOLE/52 Tile{ AsIs: e.InBrackets/30 } )/53 (/54 # RightADT/55 )/56 e.HolesAndItems-E/23/57 Tile{ AsIs: )/14 AsIs: e.HolesAndItems-B/21 AsIs: (/27 AsIs: # HOLE/29 AsIs: e.Pattern/25 HalfReuse: )/32 HalfReuse: (/34 HalfReuse: # LeftADT/37 AsIs: e.Name/35 AsIs: )/38 } (/59 # HOLE/60 e.InBrackets/30/61 )/63 (/64 Tile{ HalfReuse: # RightADT/33 AsIs: )/28 AsIs: e.HolesAndItems-E/23 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[39], context[40], context[21], context[22]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_ident(vm, context[42], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[43], context[44], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_LeftADT]);
      refalrts::copy_evar(vm, context[48], context[49], context[35], context[36]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_ident(vm, context[52], identifiers[ident_HOLE]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::alloc_ident(vm, context[55], identifiers[ident_RightADT]);
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::copy_evar(vm, context[57], context[58], context[23], context[24]);
      refalrts::alloc_open_bracket(vm, context[59]);
      refalrts::alloc_ident(vm, context[60], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[61], context[62], context[30], context[31]);
      refalrts::alloc_close_bracket(vm, context[63]);
      refalrts::alloc_open_bracket(vm, context[64]);
      refalrts::reinit_close_bracket(context[32]);
      refalrts::reinit_open_bracket(context[34]);
      refalrts::reinit_ident(context[37], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[33], identifiers[ident_RightADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[64], context[28] );
      refalrts::link_brackets( context[59], context[63] );
      refalrts::link_brackets( context[34], context[38] );
      refalrts::link_brackets( context[27], context[32] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[54], context[56] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[46], context[50] );
      refalrts::link_brackets( context[41], context[45] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[33];
      res = refalrts::splice_evar( res, context[59], context[64] );
      res = refalrts::splice_evar( res, context[14], context[38] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[53], context[56] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[41], context[52] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[21], context[22], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1/4 (/7 e.BoundEVariables/15 )/8 t.UsedVariables/9 (/13 e.HolesAndItems/17 )/14 e.HolesAndItems-B/21 (/27 # HOLE/29 (/32 # Var/34 'e'/35 e.Index/30 )/33 e.Pattern/25 )/28 e.HolesAndItems-E/23 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.BoundEVariables as range 15
    // closed e.HolesAndItems as range 17
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[19];
      context[24] = context[20];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_HOLE], context[25], context[26] );
      if( ! context[29] )
        continue;
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[25], context[26] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = refalrts::ident_left( identifiers[ident_Var], context[30], context[31] );
      if( ! context[34] )
        continue;
      context[35] = refalrts::char_left( 'e', context[30], context[31] );
      if( ! context[35] )
        continue;
      // closed e.Index as range 30
      // closed e.Pattern as range 25
      // closed e.HolesAndItems-E as range 23
      //DEBUG: t.UsedVariables: 9
      //DEBUG: e.BoundEVariables: 15
      //DEBUG: e.HolesAndItems: 17
      //DEBUG: e.HolesAndItems-B: 21
      //DEBUG: e.Index: 30
      //DEBUG: e.Pattern: 25
      //DEBUG: e.HolesAndItems-E: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoPatternSteps:1/4 AsIs: (/7 AsIs: e.BoundEVariables/15 HalfReuse: (/8 } e.Index/30/36 )/38 )/39 Tile{ AsIs: t.UsedVariables/9 AsIs: (/13 } e.HolesAndItems-B/21/40 Tile{ AsIs: (/32 Reuse: # OpenE/34 AsIs: 'e'/35 AsIs: e.Index/30 AsIs: )/33 } (/42 # HOLE/43 e.Pattern/25/44 )/46 e.HolesAndItems-E/23/47 Tile{ AsIs: )/14 AsIs: e.HolesAndItems-B/21 AsIs: (/27 Reuse: # OpenE/29 } 'e'/49 e.Index/30/50 )/52 (/53 # HOLE/54 Tile{ AsIs: e.Pattern/25 } Tile{ AsIs: )/28 AsIs: e.HolesAndItems-E/23 AsIs: >/1 } (/55 </56 & Map@2/57 </58 & T1/59 t.UsedVariables/9/60 Tile{ AsIs: e.HolesAndItems/17 } >/62 </63 & T2/64 t.UsedVariables/9/65 e.HolesAndItems/17/67 >/69 </70 & T3/71 t.UsedVariables/9/72 e.HolesAndItems/17/74 >/76 </77 & T4/78 t.UsedVariables/9/79 e.HolesAndItems/17/81 >/83 </84 & T5/85 t.UsedVariables/9/86 e.HolesAndItems/17/88 >/90 </91 & T5-sub/92 t.UsedVariables/9/93 e.Index/30/95 >/97 </98 & T6/99 t.UsedVariables/9/100 e.HolesAndItems/17/102 >/104 </105 & T7/106 t.UsedVariables/9/107 e.HolesAndItems/17/109 >/111 >/112 )/113 Tile{ ]] }
      refalrts::copy_evar(vm, context[36], context[37], context[30], context[31]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::copy_evar(vm, context[40], context[41], context[21], context[22]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::alloc_ident(vm, context[43], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[44], context[45], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::copy_evar(vm, context[47], context[48], context[23], context[24]);
      refalrts::alloc_char(vm, context[49], 'e');
      refalrts::copy_evar(vm, context[50], context[51], context[30], context[31]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_open_bracket(vm, context[53]);
      refalrts::alloc_ident(vm, context[54], identifiers[ident_HOLE]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_name(vm, context[57], functions[efunc_gen_Map_Z2]);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_T1]);
      refalrts::copy_evar(vm, context[60], context[61], context[9], context[10]);
      refalrts::alloc_close_call(vm, context[62]);
      refalrts::alloc_open_call(vm, context[63]);
      refalrts::alloc_name(vm, context[64], functions[efunc_T2]);
      refalrts::copy_evar(vm, context[65], context[66], context[9], context[10]);
      refalrts::copy_evar(vm, context[67], context[68], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::alloc_open_call(vm, context[70]);
      refalrts::alloc_name(vm, context[71], functions[efunc_T3]);
      refalrts::copy_evar(vm, context[72], context[73], context[9], context[10]);
      refalrts::copy_evar(vm, context[74], context[75], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[76]);
      refalrts::alloc_open_call(vm, context[77]);
      refalrts::alloc_name(vm, context[78], functions[efunc_T4]);
      refalrts::copy_evar(vm, context[79], context[80], context[9], context[10]);
      refalrts::copy_evar(vm, context[81], context[82], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[83]);
      refalrts::alloc_open_call(vm, context[84]);
      refalrts::alloc_name(vm, context[85], functions[efunc_T5]);
      refalrts::copy_evar(vm, context[86], context[87], context[9], context[10]);
      refalrts::copy_evar(vm, context[88], context[89], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[90]);
      refalrts::alloc_open_call(vm, context[91]);
      refalrts::alloc_name(vm, context[92], functions[efunc_T5m_sub]);
      refalrts::copy_evar(vm, context[93], context[94], context[9], context[10]);
      refalrts::copy_evar(vm, context[95], context[96], context[30], context[31]);
      refalrts::alloc_close_call(vm, context[97]);
      refalrts::alloc_open_call(vm, context[98]);
      refalrts::alloc_name(vm, context[99], functions[efunc_T6]);
      refalrts::copy_evar(vm, context[100], context[101], context[9], context[10]);
      refalrts::copy_evar(vm, context[102], context[103], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[104]);
      refalrts::alloc_open_call(vm, context[105]);
      refalrts::alloc_name(vm, context[106], functions[efunc_T7]);
      refalrts::copy_evar(vm, context[107], context[108], context[9], context[10]);
      refalrts::copy_evar(vm, context[109], context[110], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[111]);
      refalrts::alloc_close_call(vm, context[112]);
      refalrts::alloc_close_bracket(vm, context[113]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::update_ident(context[34], identifiers[ident_OpenE]);
      refalrts::update_ident(context[29], identifiers[ident_OpenE]);
      refalrts::link_brackets( context[55], context[113] );
      refalrts::push_stack( vm, context[112] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[111] );
      refalrts::push_stack( vm, context[105] );
      refalrts::push_stack( vm, context[104] );
      refalrts::push_stack( vm, context[98] );
      refalrts::push_stack( vm, context[97] );
      refalrts::push_stack( vm, context[91] );
      refalrts::push_stack( vm, context[90] );
      refalrts::push_stack( vm, context[84] );
      refalrts::push_stack( vm, context[83] );
      refalrts::push_stack( vm, context[77] );
      refalrts::push_stack( vm, context[76] );
      refalrts::push_stack( vm, context[70] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[63] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[53], context[28] );
      refalrts::link_brackets( context[27], context[52] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[42], context[46] );
      refalrts::link_brackets( context[32], context[33] );
      refalrts::link_brackets( context[7], context[39] );
      refalrts::link_brackets( context[8], context[38] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[62], context[113] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[55], context[61] );
      res = refalrts::splice_evar( res, context[28], context[1] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[49], context[54] );
      res = refalrts::splice_evar( res, context[14], context[29] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[42], context[46] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[21], context[22], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps:1/4 (/7 e.BoundEVariables/5 )/8 t.UsedVariables/9 (/13 e.HolesAndItems/11 )/14 e.OnlyItems/2 >/1
  // closed e.BoundEVariables as range 5
  // closed e.HolesAndItems as range 11
  // closed e.OnlyItems as range 2
  //DEBUG: t.UsedVariables: 9
  //DEBUG: e.BoundEVariables: 5
  //DEBUG: e.HolesAndItems: 11
  //DEBUG: e.OnlyItems: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.BoundEVariables/5 {REMOVED TILE} t.UsedVariables/9 {REMOVED TILE} e.HolesAndItems/11 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/13 } Tile{ AsIs: </0 Reuse: & BindBrackets/4 AsIs: (/7 } </15 Tile{ HalfReuse: & DoT0/14 AsIs: e.OnlyItems/2 AsIs: >/1 } Tile{ AsIs: )/8 } >/16 )/17 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_BindBrackets]);
  refalrts::reinit_name(context[14], functions[efunc_DoT0]);
  refalrts::link_brackets( context[13], context[17] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[14], context[1] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_B1("DoPatternSteps:1", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_B1);


static refalrts::FnResult func_DoPatternSteps(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & DoPatternSteps/4 t.UsedVariables/5 (/9 e.BoundEVariables/7 )/10 e.HolesAndItems/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.BoundEVariables as range 7
  // closed e.HolesAndItems as range 2
  //DEBUG: t.UsedVariables: 5
  //DEBUG: e.BoundEVariables: 7
  //DEBUG: e.HolesAndItems: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1/4 } (/11 Tile{ AsIs: e.BoundEVariables/7 } )/12 Tile{ AsIs: t.UsedVariables/5 AsIs: (/9 } e.HolesAndItems/2/13 Tile{ AsIs: )/10 AsIs: e.HolesAndItems/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[5], context[9] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPatternSteps("DoPatternSteps", COOKIE1_, COOKIE2_, func_DoPatternSteps);


static refalrts::FnResult func_HardItem(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & HardItem/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & HardItem/4 (/7 e.new1/5 )/8 (/11 s.new2/13 e.new3/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 9
  do {
    // </0 & HardItem/4 (/7 e.new4/14 )/8 (/11 s.new5/13 s.new6/18 e.new7/16 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    // closed e.new4 as range 14
    if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
      continue;
    // closed e.new7 as range 16
    do {
      // </0 & HardItem/4 (/7 e.BoundEVariables/19 )/8 (/11 # Symbol/13 s.Type/18 e.Info/21 )/12 >/1
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      context[22] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
        continue;
      // closed e.BoundEVariables as range 19
      // closed e.Info as range 21
      //DEBUG: s.Type: 18
      //DEBUG: e.BoundEVariables: 19
      //DEBUG: e.Info: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.BoundEVariables/19 )/8 (/11 # Symbol/13 s.Type/18 e.Info/21 )/12 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & HardItem/4 (/7 e.new8/19 )/8 (/11 # Var/13 s.new9/18 e.new10/21 )/12 >/1
    context[19] = context[14];
    context[20] = context[15];
    context[21] = context[16];
    context[22] = context[17];
    if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
      continue;
    // closed e.new8 as range 19
    // closed e.new10 as range 21
    do {
      // </0 & HardItem/4 (/7 e.BoundEVariables/23 )/8 (/11 # Var/13 's'/18 e.Index/25 )/12 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::char_term( 's', context[18] ) )
        continue;
      // closed e.BoundEVariables as range 23
      // closed e.Index as range 25
      //DEBUG: e.BoundEVariables: 23
      //DEBUG: e.Index: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.BoundEVariables/23 )/8 (/11 # Var/13 's'/18 e.Index/25 )/12 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & HardItem/4 (/7 e.BoundEVariables/23 )/8 (/11 # Var/13 't'/18 e.Index/25 )/12 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::char_term( 't', context[18] ) )
        continue;
      // closed e.BoundEVariables as range 23
      // closed e.Index as range 25
      //DEBUG: e.BoundEVariables: 23
      //DEBUG: e.Index: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.BoundEVariables/23 )/8 (/11 # Var/13 't'/18 e.Index/25 )/12 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & HardItem/4 (/7 e.new11/23 )/8 (/11 # Var/13 'e'/18 e.new12/25 )/12 >/1
    context[23] = context[19];
    context[24] = context[20];
    context[25] = context[21];
    context[26] = context[22];
    if( ! refalrts::char_term( 'e', context[18] ) )
      continue;
    // closed e.new11 as range 23
    // closed e.new12 as range 25
    do {
      // </0 & HardItem/4 (/7 e.BoundEVariables-B/31 (/37 e.Index/39 )/38 e.BoundEVariables-E/33 )/8 (/11 # Var/13 'e'/18 e.Index/29 )/12 >/1
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      // closed e.Index as range 29
      context[31] = 0;
      context[32] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[33] = context[27];
        context[34] = context[28];
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        if( ! refalrts::repeated_evar_left( vm, context[39], context[40], context[29], context[30], context[35], context[36] ) )
          continue;
        if( ! refalrts::empty_seq( context[35], context[36] ) )
          continue;
        // closed e.BoundEVariables-E as range 33
        //DEBUG: e.Index: 29
        //DEBUG: e.BoundEVariables-B: 31
        //DEBUG: e.BoundEVariables-E: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.BoundEVariables-B/31 (/37 e.Index/39 )/38 e.BoundEVariables-E/33 )/8 (/11 # Var/13 'e'/18 e.Index/29 )/12 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_True]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[31], context[32], context[27], context[28] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & HardItem/4 (/7 e.BoundEVariables/27 )/8 (/11 # Var/13 'e'/18 e.Index/29 )/12 >/1
    context[27] = context[23];
    context[28] = context[24];
    context[29] = context[25];
    context[30] = context[26];
    // closed e.BoundEVariables as range 27
    // closed e.Index as range 29
    //DEBUG: e.BoundEVariables: 27
    //DEBUG: e.Index: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.BoundEVariables/27 )/8 (/11 # Var/13 'e'/18 e.Index/29 )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HardItem/4 (/7 e.BoundEVariables/14 )/8 (/11 # Brackets/13 e.Pattern/16 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
      continue;
    // closed e.BoundEVariables as range 14
    // closed e.Pattern as range 16
    //DEBUG: e.BoundEVariables: 14
    //DEBUG: e.Pattern: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.BoundEVariables/14 )/8 (/11 # Brackets/13 e.Pattern/16 )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & HardItem/4 (/7 e.BoundEVariables/5 )/8 (/11 # ADT-Brackets/13 (/16 e.Name/14 )/17 e.Pattern/9 )/12 >/1
  if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[9], context[10] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.BoundEVariables as range 5
  // closed e.Name as range 14
  // closed e.Pattern as range 9
  //DEBUG: e.BoundEVariables: 5
  //DEBUG: e.Name: 14
  //DEBUG: e.Pattern: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & HardItem/4 (/7 e.BoundEVariables/5 )/8 (/11 # ADT-Brackets/13 (/16 e.Name/14 )/17 e.Pattern/9 )/12 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HardItem("HardItem", COOKIE1_, COOKIE2_, func_HardItem);


static refalrts::FnResult func_BindBrackets(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & BindBrackets/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 </10 & DoBindBrackets/11 Tile{ HalfReuse: (/0 HalfReuse: '$'/4 HalfReuse: )/7 AsIs: e.Expr/5 HalfReuse: >/8 HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_DoBindBrackets]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_char(context[4], '$');
  refalrts::reinit_close_bracket(context[7]);
  refalrts::reinit_close_call(context[8]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[9], context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[0], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BindBrackets("BindBrackets", COOKIE1_, COOKIE2_, func_BindBrackets);


static refalrts::FnResult func_DoBindBrackets(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & DoBindBrackets/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoBindBrackets/4 (/7 t.new1/9 e.new2/5 )/8 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new3 as range 2
  context[10] = refalrts::tvar_left( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 5
  do {
    // </0 & DoBindBrackets/4 (/7 t.new7/9 e.new8/11 )/8 (/17 s.new4/19 e.new5/15 )/18 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new8 as range 11
    // closed e.new6 as range 13
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    // closed e.new5 as range 15
    do {
      // </0 & DoBindBrackets/4 (/7 t.new13/9 e.new14/20 )/8 (/17 s.new10/19 s.new11/26 e.new12/22 )/18 e.new9/24 >/1
      context[20] = context[11];
      context[21] = context[12];
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[13];
      context[25] = context[14];
      // closed e.new14 as range 20
      // closed e.new9 as range 24
      if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
        continue;
      // closed e.new12 as range 22
      do {
        // </0 & DoBindBrackets/4 (/7 t.MultiBracket/9 e.Scanned/27 )/8 (/17 # Symbol/19 s.Type/26 e.Info/29 )/18 e.Tail/31 >/1
        context[27] = context[20];
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[19] ) )
          continue;
        // closed e.Scanned as range 27
        // closed e.Info as range 29
        // closed e.Tail as range 31
        //DEBUG: t.MultiBracket: 9
        //DEBUG: s.Type: 26
        //DEBUG: e.Scanned: 27
        //DEBUG: e.Info: 29
        //DEBUG: e.Tail: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Type/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoBindBrackets/4 AsIs: (/7 AsIs: t.MultiBracket/9 AsIs: e.Scanned/27 HalfReuse: (/8 HalfReuse: # Symbol/17 HalfReuse: s.Type26 /19 } Tile{ AsIs: e.Info/29 } )/33 Tile{ AsIs: )/18 AsIs: e.Tail/31 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[33]);
        refalrts::reinit_open_bracket(context[8]);
        refalrts::reinit_ident(context[17], identifiers[ident_Symbol]);
        refalrts::reinit_svar( context[19], context[26] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[18] );
        refalrts::link_brackets( context[8], context[33] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::splice_to_freelist_open( vm, context[19], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoBindBrackets/4 (/7 t.MultiBracket/9 e.Scanned/27 )/8 (/17 # Var/19 s.Type/26 e.Index/29 )/18 e.Tail/31 >/1
        context[27] = context[20];
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[19] ) )
          continue;
        // closed e.Scanned as range 27
        // closed e.Index as range 29
        // closed e.Tail as range 31
        //DEBUG: t.MultiBracket: 9
        //DEBUG: s.Type: 26
        //DEBUG: e.Scanned: 27
        //DEBUG: e.Index: 29
        //DEBUG: e.Tail: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Type/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoBindBrackets/4 AsIs: (/7 AsIs: t.MultiBracket/9 AsIs: e.Scanned/27 HalfReuse: (/8 HalfReuse: # Var/17 HalfReuse: s.Type26 /19 } Tile{ AsIs: e.Index/29 } )/33 Tile{ AsIs: )/18 AsIs: e.Tail/31 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[33]);
        refalrts::reinit_open_bracket(context[8]);
        refalrts::reinit_ident(context[17], identifiers[ident_Var]);
        refalrts::reinit_svar( context[19], context[26] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[18] );
        refalrts::link_brackets( context[8], context[33] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::splice_to_freelist_open( vm, context[19], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoBindBrackets/4 (/7 t.MultiBracket/9 e.Scanned/27 )/8 (/17 # OpenE/19 s.Type/26 e.Index/29 )/18 e.Tail/31 >/1
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[23];
      context[31] = context[24];
      context[32] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_OpenE], context[19] ) )
        continue;
      // closed e.Scanned as range 27
      // closed e.Index as range 29
      // closed e.Tail as range 31
      //DEBUG: t.MultiBracket: 9
      //DEBUG: s.Type: 26
      //DEBUG: e.Scanned: 27
      //DEBUG: e.Index: 29
      //DEBUG: e.Tail: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoBindBrackets/4 AsIs: (/7 AsIs: t.MultiBracket/9 AsIs: e.Scanned/27 HalfReuse: (/8 HalfReuse: # Brackets/17 HalfReuse: (/19 } # Var/33 Tile{ AsIs: s.Type/26 } Tile{ AsIs: e.Index/29 } )/34 )/35 Tile{ AsIs: )/18 AsIs: e.Tail/31 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[33], identifiers[ident_Var]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[17], identifiers[ident_Brackets]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[18] );
      refalrts::link_brackets( context[8], context[35] );
      refalrts::link_brackets( context[19], context[34] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[33] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoBindBrackets/4 (/7 t.MultiBracket/9 e.Scanned/20 )/8 (/17 # Brackets/19 e.InBrackets/22 )/18 e.Tail/24 >/1
      context[20] = context[11];
      context[21] = context[12];
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[13];
      context[25] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[19] ) )
        continue;
      // closed e.Scanned as range 20
      // closed e.InBrackets as range 22
      // closed e.Tail as range 24
      //DEBUG: t.MultiBracket: 9
      //DEBUG: e.Scanned: 20
      //DEBUG: e.InBrackets: 22
      //DEBUG: e.Tail: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoBindBrackets/4 AsIs: (/7 AsIs: t.MultiBracket/9 AsIs: e.Scanned/20 HalfReuse: (/8 HalfReuse: # Brackets/17 } Tile{ AsIs: e.InBrackets/22 } Tile{ HalfReuse: )/19 } Tile{ AsIs: )/18 AsIs: e.Tail/24 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[17], identifiers[ident_Brackets]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[18] );
      refalrts::link_brackets( context[8], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoBindBrackets/4 (/7 t.new11/9 e.new12/20 )/8 (/17 s.new10/19 )/18 e.new9/22 >/1
      context[20] = context[11];
      context[21] = context[12];
      context[22] = context[13];
      context[23] = context[14];
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.new12 as range 20
      // closed e.new9 as range 22
      do {
        // </0 & DoBindBrackets/4 (/7 t.MultiBracket/9 e.Scanned/24 )/8 (/17 # LeftBracket/19 )/18 e.Tail/26 >/1
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_LeftBracket], context[19] ) )
          continue;
        // closed e.Scanned as range 24
        // closed e.Tail as range 26
        //DEBUG: t.MultiBracket: 9
        //DEBUG: e.Scanned: 24
        //DEBUG: e.Tail: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/18 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </19 } Tile{ HalfReuse: & DoBindBrackets/0 HalfReuse: (/4 AsIs: (/7 AsIs: t.MultiBracket/9 AsIs: e.Scanned/24 AsIs: )/8 HalfReuse: )/17 } Tile{ AsIs: e.Tail/26 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[0], functions[efunc_DoBindBrackets]);
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[4], context[17] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[0], context[17] );
        res = refalrts::splice_elem( res, context[19] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoBindBrackets/4 (/7 (/9 t.MultiBracket/30 e.Scanned/28 )/10 e.InBrackets/24 )/8 (/17 # RightBracket/19 )/18 e.Tail/26 >/1
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = 0;
      context[29] = 0;
      if( ! refalrts::brackets_term( context[28], context[29], context[9] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_RightBracket], context[19] ) )
        continue;
      // closed e.InBrackets as range 24
      // closed e.Tail as range 26
      context[31] = refalrts::tvar_left( context[30], context[28], context[29] );
      if( ! context[31] )
        continue;
      // closed e.Scanned as range 28
      //DEBUG: e.InBrackets: 24
      //DEBUG: e.Tail: 26
      //DEBUG: t.MultiBracket: 30
      //DEBUG: e.Scanned: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoBindBrackets/7 AsIs: (/9 AsIs: t.MultiBracket/30 AsIs: e.Scanned/28 HalfReuse: (/10 } Tile{ HalfReuse: # Brackets/17 } Tile{ AsIs: e.InBrackets/24 } Tile{ HalfReuse: )/19 AsIs: )/18 AsIs: e.Tail/26 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_DoBindBrackets]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[17], identifiers[ident_Brackets]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::link_brackets( context[10], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[4], context[10] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoBindBrackets/4 (/7 t.MultiBracket/9 e.Scanned/20 )/8 (/17 # LeftADT/19 e.Name/22 )/18 e.Tail/24 >/1
      context[20] = context[11];
      context[21] = context[12];
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[13];
      context[25] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_LeftADT], context[19] ) )
        continue;
      // closed e.Scanned as range 20
      // closed e.Name as range 22
      // closed e.Tail as range 24
      //DEBUG: t.MultiBracket: 9
      //DEBUG: e.Scanned: 20
      //DEBUG: e.Name: 22
      //DEBUG: e.Tail: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </19 } Tile{ HalfReuse: & DoBindBrackets/0 HalfReuse: (/4 AsIs: (/7 AsIs: t.MultiBracket/9 AsIs: e.Scanned/20 AsIs: )/8 AsIs: (/17 } Tile{ AsIs: e.Name/22 } )/26 Tile{ AsIs: )/18 AsIs: e.Tail/24 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[0], functions[efunc_DoBindBrackets]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[4], context[18] );
      refalrts::link_brackets( context[17], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[0], context[17] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoBindBrackets/4 (/7 (/9 t.MultiBracket/30 e.Scanned/24 )/10 (/28 e.Name/26 )/29 e.InBrackets/20 )/8 (/17 # RightADT/19 )/18 e.Tail/22 >/1
    context[20] = context[11];
    context[21] = context[12];
    context[22] = context[13];
    context[23] = context[14];
    context[24] = 0;
    context[25] = 0;
    if( ! refalrts::brackets_term( context[24], context[25], context[9] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_RightADT], context[19] ) )
      continue;
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[20], context[21] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e.Name as range 26
    // closed e.InBrackets as range 20
    // closed e.Tail as range 22
    context[31] = refalrts::tvar_left( context[30], context[24], context[25] );
    if( ! context[31] )
      continue;
    // closed e.Scanned as range 24
    //DEBUG: e.Name: 26
    //DEBUG: e.InBrackets: 20
    //DEBUG: e.Tail: 22
    //DEBUG: t.MultiBracket: 30
    //DEBUG: e.Scanned: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # RightADT/19 )/18 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoBindBrackets/4 AsIs: (/7 } Tile{ AsIs: t.MultiBracket/30 } Tile{ AsIs: e.Scanned/24 } Tile{ AsIs: (/9 } Tile{ HalfReuse: # ADT-Brackets/10 AsIs: (/28 AsIs: e.Name/26 AsIs: )/29 AsIs: e.InBrackets/20 AsIs: )/8 HalfReuse: )/17 } Tile{ AsIs: e.Tail/22 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_ident(context[10], identifiers[ident_ADTm_Brackets]);
    refalrts::reinit_close_bracket(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[17] );
    refalrts::link_brackets( context[9], context[8] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[10], context[17] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoBindBrackets/4 (/7 '$'/9 e.Scanned/5 )/8 >/1
  if( ! refalrts::char_term( '$', context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 5
  //DEBUG: e.Scanned: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoBindBrackets/4 (/7 '$'/9 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Scanned/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoBindBrackets("DoBindBrackets", COOKIE1_, COOKIE2_, func_DoBindBrackets);


static refalrts::FnResult func_T1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & T1/4 t.UsedVars/5 e.Items/7 (/13 # HOLE/15 (/18 # Var/20 'e'/21 e.Index/16 )/19 e.Pattern/11 )/14 e.ItemsAndHoles/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left( identifiers[ident_HOLE], context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[11], context[12] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    context[20] = refalrts::ident_left( identifiers[ident_Var], context[16], context[17] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[16], context[17] );
    if( ! context[21] )
      continue;
    // closed e.Index as range 16
    // closed e.Pattern as range 11
    // closed e.ItemsAndHoles as range 9
    //DEBUG: t.UsedVars: 5
    //DEBUG: e.Items: 7
    //DEBUG: e.Index: 16
    //DEBUG: e.Pattern: 11
    //DEBUG: e.ItemsAndHoles: 9
    //5: t.UsedVars
    //7: e.Items
    //9: e.ItemsAndHoles
    //11: e.Pattern
    //16: e.Index
    //27: t.UsedVars
    //29: e.Index

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_T1_C1]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_NewVarName]);
    refalrts::copy_stvar(vm, context[27], context[5]);
    refalrts::alloc_char(vm, context[28], 'e');
    refalrts::copy_evar(vm, context[29], context[30], context[16], context[17]);
    refalrts::alloc_chars(vm, context[31], context[32], "_fix", 4);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[25] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_stvar( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </22 & T1?1/26 t.UsedVars1/27 e.eX_fix/24 >/23
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
      context[28] = refalrts::tvar_left( context[27], context[24], context[25] );
      if( ! context[28] )
        continue;
      // closed e.eX_fix as range 24
      //DEBUG: t.UsedVars: 5
      //DEBUG: e.Items: 7
      //DEBUG: e.Index: 16
      //DEBUG: e.Pattern: 11
      //DEBUG: e.ItemsAndHoles: 9
      //DEBUG: t.UsedVars1: 27
      //DEBUG: e.eX_fix: 24
      //5: t.UsedVars
      //7: e.Items
      //9: e.ItemsAndHoles
      //11: e.Pattern
      //16: e.Index
      //24: e.eX_fix
      //27: t.UsedVars1
      //34: t.UsedVars1
      //36: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_T1_C2]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_NewVarName]);
      refalrts::copy_stvar(vm, context[34], context[27]);
      refalrts::alloc_char(vm, context[35], 't');
      refalrts::copy_evar(vm, context[36], context[37], context[16], context[17]);
      refalrts::alloc_chars(vm, context[38], context[39], "_next", 5);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[29] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[32] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_stvar( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </29 & T1?2/33 t.UsedVars2/34 e.tX_next/31 >/30
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::call_left( context[31], context[32], context[29], context[30] );
        context[35] = refalrts::tvar_left( context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        // closed e.tX_next as range 31
        //DEBUG: t.UsedVars: 5
        //DEBUG: e.Items: 7
        //DEBUG: e.Index: 16
        //DEBUG: e.Pattern: 11
        //DEBUG: e.ItemsAndHoles: 9
        //DEBUG: t.UsedVars1: 27
        //DEBUG: e.eX_fix: 24
        //DEBUG: t.UsedVars2: 34
        //DEBUG: e.tX_next: 31
        //5: t.UsedVars
        //7: e.Items
        //9: e.ItemsAndHoles
        //11: e.Pattern
        //16: e.Index
        //24: e.eX_fix
        //27: t.UsedVars1
        //31: e.tX_next
        //34: t.UsedVars2
        //41: t.UsedVars2
        //43: e.Index

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[38], functions[efunc_gen_T1_C3]);
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_name(vm, context[40], functions[efunc_NewVarName]);
        refalrts::copy_stvar(vm, context[41], context[34]);
        refalrts::alloc_char(vm, context[42], 'e');
        refalrts::copy_evar(vm, context[43], context[44], context[16], context[17]);
        refalrts::alloc_chars(vm, context[45], context[46], "_rest", 5);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[36] );
        res = refalrts::splice_elem( res, context[37] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[39] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_stvar( res, context[41] );
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </36 & T1?3/40 t.UsedVars3/41 e.eX_rest/38 >/37
          context[38] = 0;
          context[39] = 0;
          context[40] = refalrts::call_left( context[38], context[39], context[36], context[37] );
          context[42] = refalrts::tvar_left( context[41], context[38], context[39] );
          if( ! context[42] )
            continue;
          // closed e.eX_rest as range 38
          //DEBUG: t.UsedVars: 5
          //DEBUG: e.Items: 7
          //DEBUG: e.Index: 16
          //DEBUG: e.Pattern: 11
          //DEBUG: e.ItemsAndHoles: 9
          //DEBUG: t.UsedVars1: 27
          //DEBUG: e.eX_fix: 24
          //DEBUG: t.UsedVars2: 34
          //DEBUG: e.tX_next: 31
          //DEBUG: t.UsedVars3: 41
          //DEBUG: e.eX_rest: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} & T1/4 t.UsedVars/5 {REMOVED TILE} {REMOVED TILE} 'e'/21 e.Index/16 {REMOVED TILE} e.Pattern/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.UsedVars1/27 {REMOVED TILE} {REMOVED TILE} t.UsedVars2/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Items/7 } Tile{ AsIs: (/13 Reuse: # Brackets/15 AsIs: (/18 AsIs: # Var/20 } Tile{ AsIs: e.eX_fix/24 } Tile{ HalfReuse: )/23 HalfReuse: )/29 HalfReuse: (/33 } Tile{ HalfReuse: # Var/19 } Tile{ AsIs: e.tX_next/31 } Tile{ AsIs: )/14 } Tile{ HalfReuse: (/22 HalfReuse: # Var/26 } Tile{ AsIs: e.eX_rest/38 } Tile{ HalfReuse: )/30 AsIs: </36 Reuse: & PassiveHoles/40 AsIs: t.UsedVars3/41 } Tile{ AsIs: e.ItemsAndHoles/9 } Tile{ AsIs: >/37 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[0]);
          refalrts::update_ident(context[15], identifiers[ident_Brackets]);
          refalrts::reinit_close_bracket(context[23]);
          refalrts::reinit_close_bracket(context[29]);
          refalrts::reinit_open_bracket(context[33]);
          refalrts::reinit_ident(context[19], identifiers[ident_Var]);
          refalrts::reinit_open_bracket(context[22]);
          refalrts::reinit_ident(context[26], identifiers[ident_Var]);
          refalrts::reinit_close_bracket(context[30]);
          refalrts::update_name(context[40], functions[efunc_PassiveHoles]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[0], context[1] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[36] );
          refalrts::link_brackets( context[22], context[30] );
          refalrts::link_brackets( context[33], context[14] );
          refalrts::link_brackets( context[13], context[29] );
          refalrts::link_brackets( context[18], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[37];
          res = refalrts::splice_evar( res, context[9], context[10] );
          res = refalrts::splice_evar( res, context[30], context[42] );
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_evar( res, context[22], context[26] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[31], context[32] );
          res = refalrts::splice_elem( res, context[19] );
          res = refalrts::splice_evar( res, context[23], context[33] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[13], context[20] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::splice_to_freelist_open( vm, context[0], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[36], context[37]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[29], context[30]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[22], context[23]);
    continue;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T1("T1", COOKIE1_, COOKIE2_, func_T1);


static refalrts::FnResult func_PassiveHoles(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & PassiveHoles/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PassiveHoles/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & PassiveHoles/4 t.UsedVariables/5 e.Items/9 (/15 # HOLE/17 (/20 # Var/22 'e'/23 e.Index/18 )/21 e.Pattern/13 )/16 e.ItemsAndHoles/11 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[9] = 0;
    context[10] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = refalrts::ident_left( identifiers[ident_HOLE], context[13], context[14] );
      if( ! context[17] )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[13], context[14] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left( identifiers[ident_Var], context[18], context[19] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::char_left( 'e', context[18], context[19] );
      if( ! context[23] )
        continue;
      // closed e.Index as range 18
      // closed e.Pattern as range 13
      // closed e.ItemsAndHoles as range 11
      //DEBUG: t.UsedVariables: 5
      //DEBUG: e.Items: 9
      //DEBUG: e.Index: 18
      //DEBUG: e.Pattern: 13
      //DEBUG: e.ItemsAndHoles: 11
      //5: t.UsedVariables
      //9: e.Items
      //11: e.ItemsAndHoles
      //13: e.Pattern
      //18: e.Index
      //29: t.UsedVariables
      //31: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[26], functions[efunc_gen_PassiveHoles_S1C1]);
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_NewVarName]);
      refalrts::copy_stvar(vm, context[29], context[5]);
      refalrts::alloc_char(vm, context[30], 'e');
      refalrts::copy_evar(vm, context[31], context[32], context[18], context[19]);
      refalrts::alloc_chars(vm, context[33], context[34], "_rest", 5);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[24] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[27] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_stvar( res, context[29] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </24 & PassiveHoles$1?1/28 t.NewVars/29 e.eX_rest/26 >/25
        context[26] = 0;
        context[27] = 0;
        context[28] = refalrts::call_left( context[26], context[27], context[24], context[25] );
        context[30] = refalrts::tvar_left( context[29], context[26], context[27] );
        if( ! context[30] )
          continue;
        // closed e.eX_rest as range 26
        //DEBUG: t.UsedVariables: 5
        //DEBUG: e.Items: 9
        //DEBUG: e.Index: 18
        //DEBUG: e.Pattern: 13
        //DEBUG: e.ItemsAndHoles: 11
        //DEBUG: t.NewVars: 29
        //DEBUG: e.eX_rest: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & PassiveHoles/4 t.UsedVariables/5 {REMOVED TILE} (/15 # HOLE/17 {REMOVED TILE} 'e'/23 e.Index/18 )/21 e.Pattern/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/25 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: e.Items/9 } Tile{ AsIs: (/20 AsIs: # Var/22 } Tile{ AsIs: e.eX_rest/26 } Tile{ AsIs: )/16 } Tile{ AsIs: </24 Reuse: & PassiveHoles/28 AsIs: t.NewVars/29 } Tile{ AsIs: e.ItemsAndHoles/11 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[28], functions[efunc_PassiveHoles]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[20], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[24], context[30] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[20], context[22] );
        res = refalrts::splice_evar( res, context[9], context[10] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[24], context[25]);
      continue;
    } while ( refalrts::open_evar_advance( context[9], context[10], context[7], context[8] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PassiveHoles/4 t.UsedVariables/5 e.Items/2 >/1
  // closed e.Items as range 2
  //DEBUG: t.UsedVariables: 5
  //DEBUG: e.Items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & PassiveHoles/4 t.UsedVariables/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Items/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PassiveHoles("PassiveHoles", COOKIE1_, COOKIE2_, func_PassiveHoles);


static refalrts::FnResult func_T2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & T2/4 t.UsedVars/5 e.Items/7 (/13 # HOLE/15 (/18 # Var/20 'e'/21 e.Index/16 )/19 e.Pattern/11 )/14 e.ItemsAndHoles/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left( identifiers[ident_HOLE], context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[11], context[12] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    context[20] = refalrts::ident_left( identifiers[ident_Var], context[16], context[17] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[16], context[17] );
    if( ! context[21] )
      continue;
    // closed e.Index as range 16
    // closed e.Pattern as range 11
    // closed e.ItemsAndHoles as range 9
    //DEBUG: t.UsedVars: 5
    //DEBUG: e.Items: 7
    //DEBUG: e.Index: 16
    //DEBUG: e.Pattern: 11
    //DEBUG: e.ItemsAndHoles: 9
    //5: t.UsedVars
    //7: e.Items
    //9: e.ItemsAndHoles
    //11: e.Pattern
    //16: e.Index
    //27: t.UsedVars
    //29: e.Index

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_T2_C1]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_NewVarName]);
    refalrts::copy_stvar(vm, context[27], context[5]);
    refalrts::alloc_char(vm, context[28], 'e');
    refalrts::copy_evar(vm, context[29], context[30], context[16], context[17]);
    refalrts::alloc_chars(vm, context[31], context[32], "_fix", 4);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[25] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_stvar( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </22 & T2?1/26 t.UsedVars1/27 e.eX_fix/24 >/23
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
      context[28] = refalrts::tvar_left( context[27], context[24], context[25] );
      if( ! context[28] )
        continue;
      // closed e.eX_fix as range 24
      //DEBUG: t.UsedVars: 5
      //DEBUG: e.Items: 7
      //DEBUG: e.Index: 16
      //DEBUG: e.Pattern: 11
      //DEBUG: e.ItemsAndHoles: 9
      //DEBUG: t.UsedVars1: 27
      //DEBUG: e.eX_fix: 24
      //5: t.UsedVars
      //7: e.Items
      //9: e.ItemsAndHoles
      //11: e.Pattern
      //16: e.Index
      //24: e.eX_fix
      //27: t.UsedVars1
      //34: t.UsedVars1
      //36: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_T2_C2]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_NewVarName]);
      refalrts::copy_stvar(vm, context[34], context[27]);
      refalrts::alloc_char(vm, context[35], 't');
      refalrts::copy_evar(vm, context[36], context[37], context[16], context[17]);
      refalrts::alloc_chars(vm, context[38], context[39], "_next", 5);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[29] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[32] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_stvar( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </29 & T2?2/33 t.UsedVars2/34 e.tX_next/31 >/30
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::call_left( context[31], context[32], context[29], context[30] );
        context[35] = refalrts::tvar_left( context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        // closed e.tX_next as range 31
        //DEBUG: t.UsedVars: 5
        //DEBUG: e.Items: 7
        //DEBUG: e.Index: 16
        //DEBUG: e.Pattern: 11
        //DEBUG: e.ItemsAndHoles: 9
        //DEBUG: t.UsedVars1: 27
        //DEBUG: e.eX_fix: 24
        //DEBUG: t.UsedVars2: 34
        //DEBUG: e.tX_next: 31
        //5: t.UsedVars
        //7: e.Items
        //9: e.ItemsAndHoles
        //11: e.Pattern
        //16: e.Index
        //24: e.eX_fix
        //27: t.UsedVars1
        //31: e.tX_next
        //34: t.UsedVars2
        //41: t.UsedVars2
        //43: e.Index

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[38], functions[efunc_gen_T2_C3]);
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_name(vm, context[40], functions[efunc_NewVarName]);
        refalrts::copy_stvar(vm, context[41], context[34]);
        refalrts::alloc_char(vm, context[42], 'e');
        refalrts::copy_evar(vm, context[43], context[44], context[16], context[17]);
        refalrts::alloc_chars(vm, context[45], context[46], "_rest", 5);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[36] );
        res = refalrts::splice_elem( res, context[37] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[39] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_stvar( res, context[41] );
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </36 & T2?3/40 t.UsedVars3/41 e.eX_rest/38 >/37
          context[38] = 0;
          context[39] = 0;
          context[40] = refalrts::call_left( context[38], context[39], context[36], context[37] );
          context[42] = refalrts::tvar_left( context[41], context[38], context[39] );
          if( ! context[42] )
            continue;
          // closed e.eX_rest as range 38
          //DEBUG: t.UsedVars: 5
          //DEBUG: e.Items: 7
          //DEBUG: e.Index: 16
          //DEBUG: e.Pattern: 11
          //DEBUG: e.ItemsAndHoles: 9
          //DEBUG: t.UsedVars1: 27
          //DEBUG: e.eX_fix: 24
          //DEBUG: t.UsedVars2: 34
          //DEBUG: e.tX_next: 31
          //DEBUG: t.UsedVars3: 41
          //DEBUG: e.eX_rest: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} & T2/4 t.UsedVars/5 {REMOVED TILE} {REMOVED TILE} 'e'/21 e.Index/16 {REMOVED TILE} e.Pattern/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.UsedVars1/27 {REMOVED TILE} {REMOVED TILE} t.UsedVars2/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Items/7 } Tile{ AsIs: (/13 Reuse: # Brackets/15 AsIs: (/18 AsIs: # Var/20 } Tile{ AsIs: e.eX_fix/24 } Tile{ HalfReuse: )/23 HalfReuse: (/29 HalfReuse: # Var/33 } Tile{ AsIs: e.tX_next/31 } Tile{ AsIs: )/14 } Tile{ AsIs: )/19 } Tile{ HalfReuse: (/22 HalfReuse: # Var/26 } Tile{ AsIs: e.eX_rest/38 } Tile{ HalfReuse: )/30 AsIs: </36 Reuse: & PassiveHoles/40 AsIs: t.UsedVars3/41 } Tile{ AsIs: e.ItemsAndHoles/9 } Tile{ AsIs: >/37 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[0]);
          refalrts::update_ident(context[15], identifiers[ident_Brackets]);
          refalrts::reinit_close_bracket(context[23]);
          refalrts::reinit_open_bracket(context[29]);
          refalrts::reinit_ident(context[33], identifiers[ident_Var]);
          refalrts::reinit_open_bracket(context[22]);
          refalrts::reinit_ident(context[26], identifiers[ident_Var]);
          refalrts::reinit_close_bracket(context[30]);
          refalrts::update_name(context[40], functions[efunc_PassiveHoles]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[0], context[1] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[36] );
          refalrts::link_brackets( context[22], context[30] );
          refalrts::link_brackets( context[13], context[19] );
          refalrts::link_brackets( context[29], context[14] );
          refalrts::link_brackets( context[18], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[37];
          res = refalrts::splice_evar( res, context[9], context[10] );
          res = refalrts::splice_evar( res, context[30], context[42] );
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_evar( res, context[22], context[26] );
          res = refalrts::splice_elem( res, context[19] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[31], context[32] );
          res = refalrts::splice_evar( res, context[23], context[33] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[13], context[20] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::splice_to_freelist_open( vm, context[0], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[36], context[37]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[29], context[30]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[22], context[23]);
    continue;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T2("T2", COOKIE1_, COOKIE2_, func_T2);


static refalrts::FnResult func_T3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & T3/4 t.UsedVars/5 e.Items/7 (/13 # HOLE/15 (/18 # Var/20 'e'/21 e.Index/16 )/19 e.Pattern/11 )/14 e.ItemsAndHoles/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left( identifiers[ident_HOLE], context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[11], context[12] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    context[20] = refalrts::ident_left( identifiers[ident_Var], context[16], context[17] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[16], context[17] );
    if( ! context[21] )
      continue;
    // closed e.Index as range 16
    // closed e.Pattern as range 11
    // closed e.ItemsAndHoles as range 9
    //DEBUG: t.UsedVars: 5
    //DEBUG: e.Items: 7
    //DEBUG: e.Index: 16
    //DEBUG: e.Pattern: 11
    //DEBUG: e.ItemsAndHoles: 9
    //5: t.UsedVars
    //7: e.Items
    //9: e.ItemsAndHoles
    //11: e.Pattern
    //16: e.Index
    //27: t.UsedVars
    //29: e.Index

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_T3_C1]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_NewVarName]);
    refalrts::copy_stvar(vm, context[27], context[5]);
    refalrts::alloc_char(vm, context[28], 'e');
    refalrts::copy_evar(vm, context[29], context[30], context[16], context[17]);
    refalrts::alloc_chars(vm, context[31], context[32], "_fix", 4);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[25] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_stvar( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </22 & T3?1/26 t.UsedVars1/27 e.eX_fix/24 >/23
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
      context[28] = refalrts::tvar_left( context[27], context[24], context[25] );
      if( ! context[28] )
        continue;
      // closed e.eX_fix as range 24
      //DEBUG: t.UsedVars: 5
      //DEBUG: e.Items: 7
      //DEBUG: e.Index: 16
      //DEBUG: e.Pattern: 11
      //DEBUG: e.ItemsAndHoles: 9
      //DEBUG: t.UsedVars1: 27
      //DEBUG: e.eX_fix: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & T3/4 t.UsedVars/5 {REMOVED TILE} {REMOVED TILE} 'e'/21 e.Index/16 {REMOVED TILE} e.Pattern/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Items/7 } Tile{ AsIs: (/13 Reuse: # Brackets/15 AsIs: (/18 AsIs: # Var/20 } Tile{ AsIs: e.eX_fix/24 } Tile{ AsIs: )/19 } Tile{ AsIs: )/14 } Tile{ AsIs: </22 Reuse: & PassiveHoles/26 AsIs: t.UsedVars1/27 } Tile{ AsIs: e.ItemsAndHoles/9 } Tile{ AsIs: >/23 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_ident(context[15], identifiers[ident_Brackets]);
      refalrts::update_name(context[26], functions[efunc_PassiveHoles]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[23];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[28] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[13], context[20] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[22], context[23]);
    continue;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T3("T3", COOKIE1_, COOKIE2_, func_T3);


static refalrts::FnResult func_T4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & T4/4 t.UsedVars/5 e.Items/7 (/13 # HOLE/15 (/18 # Var/20 'e'/21 e.Index/16 )/19 e.Pattern/11 )/14 e.ItemsAndHoles/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left( identifiers[ident_HOLE], context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[11], context[12] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    context[20] = refalrts::ident_left( identifiers[ident_Var], context[16], context[17] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[16], context[17] );
    if( ! context[21] )
      continue;
    // closed e.Index as range 16
    // closed e.Pattern as range 11
    // closed e.ItemsAndHoles as range 9
    //DEBUG: t.UsedVars: 5
    //DEBUG: e.Items: 7
    //DEBUG: e.Index: 16
    //DEBUG: e.Pattern: 11
    //DEBUG: e.ItemsAndHoles: 9
    //5: t.UsedVars
    //7: e.Items
    //9: e.ItemsAndHoles
    //11: e.Pattern
    //16: e.Index
    //27: t.UsedVars
    //29: e.Index

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_T4_C1]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_NewVarName]);
    refalrts::copy_stvar(vm, context[27], context[5]);
    refalrts::alloc_char(vm, context[28], 'e');
    refalrts::copy_evar(vm, context[29], context[30], context[16], context[17]);
    refalrts::alloc_chars(vm, context[31], context[32], "_fix", 4);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[25] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_stvar( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </22 & T4?1/26 t.UsedVars1/27 e.eX_fix/24 >/23
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
      context[28] = refalrts::tvar_left( context[27], context[24], context[25] );
      if( ! context[28] )
        continue;
      // closed e.eX_fix as range 24
      //DEBUG: t.UsedVars: 5
      //DEBUG: e.Items: 7
      //DEBUG: e.Index: 16
      //DEBUG: e.Pattern: 11
      //DEBUG: e.ItemsAndHoles: 9
      //DEBUG: t.UsedVars1: 27
      //DEBUG: e.eX_fix: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & T4/4 t.UsedVars/5 {REMOVED TILE} (/13 # HOLE/15 {REMOVED TILE} 'e'/21 e.Index/16 {REMOVED TILE} e.Pattern/11 )/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Items/7 } Tile{ AsIs: (/18 AsIs: # Var/20 } Tile{ AsIs: e.eX_fix/24 } Tile{ AsIs: )/19 } Tile{ AsIs: </22 Reuse: & PassiveHoles/26 AsIs: t.UsedVars1/27 } Tile{ AsIs: e.ItemsAndHoles/9 } Tile{ AsIs: >/23 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_name(context[26], functions[efunc_PassiveHoles]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[23];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[28] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[18], context[20] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[22], context[23]);
    continue;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T4("T4", COOKIE1_, COOKIE2_, func_T4);


static refalrts::FnResult func_T5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & T5/4 t.UsedVars/5 e.Items/7 (/13 # HOLE/15 (/18 # Var/20 'e'/21 e.Index/16 )/19 e.Pattern/11 )/14 e.ItemsAndHoles/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left( identifiers[ident_HOLE], context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[11], context[12] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    context[20] = refalrts::ident_left( identifiers[ident_Var], context[16], context[17] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[16], context[17] );
    if( ! context[21] )
      continue;
    // closed e.Index as range 16
    // closed e.Pattern as range 11
    // closed e.ItemsAndHoles as range 9
    //DEBUG: t.UsedVars: 5
    //DEBUG: e.Items: 7
    //DEBUG: e.Index: 16
    //DEBUG: e.Pattern: 11
    //DEBUG: e.ItemsAndHoles: 9
    //5: t.UsedVars
    //7: e.Items
    //9: e.ItemsAndHoles
    //11: e.Pattern
    //16: e.Index
    //27: t.UsedVars
    //28: e.Index

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_T5_C1]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_T5m_sub]);
    refalrts::copy_stvar(vm, context[27], context[5]);
    refalrts::copy_evar(vm, context[28], context[29], context[16], context[17]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[25] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_stvar( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </22 & T5?1/26 (/29 t.SourceVar/31 t.eX_fix/33 t.eX_var/35 )/30 >/23
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
      context[27] = 0;
      context[28] = 0;
      context[29] = refalrts::brackets_left( context[27], context[28], context[24], context[25] );
      if( ! context[29] )
        continue;
      refalrts::bracket_pointers(context[29], context[30]);
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      context[32] = refalrts::tvar_left( context[31], context[27], context[28] );
      if( ! context[32] )
        continue;
      context[34] = refalrts::tvar_left( context[33], context[27], context[28] );
      if( ! context[34] )
        continue;
      context[36] = refalrts::tvar_left( context[35], context[27], context[28] );
      if( ! context[36] )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      //DEBUG: t.UsedVars: 5
      //DEBUG: e.Items: 7
      //DEBUG: e.Index: 16
      //DEBUG: e.Pattern: 11
      //DEBUG: e.ItemsAndHoles: 9
      //DEBUG: t.SourceVar: 31
      //DEBUG: t.eX_fix: 33
      //DEBUG: t.eX_var: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} t.UsedVars/5 {REMOVED TILE} {REMOVED TILE} # HOLE/15 {REMOVED TILE} 'e'/21 e.Index/16 )/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 } Tile{ AsIs: e.Items/7 } Tile{ AsIs: (/18 Reuse: # Brackets/20 } t.eX_fix/33/37 Tile{ AsIs: )/14 } t.eX_var/35/39 Tile{ AsIs: </22 Reuse: & Substitute@1/26 } Tile{ AsIs: e.Pattern/11 } Tile{ AsIs: </0 Reuse: & T5-UnHole/4 } Tile{ AsIs: e.ItemsAndHoles/9 } Tile{ HalfReuse: >/29 AsIs: t.SourceVar/31 AsIs: t.eX_fix/33 AsIs: t.eX_var/35 HalfReuse: >/30 HalfReuse: )/23 } Tile{ ]] }
      refalrts::copy_evar(vm, context[37], context[38], context[33], context[34]);
      refalrts::copy_evar(vm, context[39], context[40], context[35], context[36]);
      refalrts::update_ident(context[20], identifiers[ident_Brackets]);
      refalrts::update_name(context[26], functions[efunc_gen_Substitute_Z1]);
      refalrts::update_name(context[4], functions[efunc_T5m_UnHole]);
      refalrts::reinit_close_call(context[29]);
      refalrts::reinit_close_call(context[30]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::link_brackets( context[13], context[23] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[29], context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[22], context[26] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[18], context[20] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_elem( res, context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[22], context[23]);
    continue;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T5("T5", COOKIE1_, COOKIE2_, func_T5);


static refalrts::FnResult func_T5m_UnHole(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & T5-UnHole/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & T5-UnHole/4 e.Items/7 (/13 # HOLE/15 e.Pattern/11 )/14 e.ItemsAndHoles/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_HOLE], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Pattern as range 11
      // closed e.ItemsAndHoles as range 9
      //DEBUG: e.Items: 7
      //DEBUG: e.Pattern: 11
      //DEBUG: e.ItemsAndHoles: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} & T5-UnHole/4 {REMOVED TILE} (/13 # HOLE/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Items/7 } Tile{ AsIs: e.Pattern/11 } Tile{ AsIs: </0 } Tile{ HalfReuse: & T5-UnHole/14 AsIs: e.ItemsAndHoles/9 AsIs: >/1 ]] }
      refalrts::reinit_name(context[14], functions[efunc_T5m_UnHole]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & T5-UnHole/4 e.Items/2 >/1
  // closed e.Items as range 2
  //DEBUG: e.Items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & T5-UnHole/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Items/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T5m_UnHole("T5-UnHole", COOKIE1_, COOKIE2_, func_T5m_UnHole);


static refalrts::FnResult func_T5m_sub(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & T5-sub/4 t.UsedVars/5 e.Index/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Index as range 2
  //DEBUG: t.UsedVars: 5
  //DEBUG: e.Index: 2
  //2: e.Index
  //5: t.UsedVars
  //12: t.UsedVars
  //14: e.Index

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_T5m_sub_C1]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_NewVarName]);
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_char(vm, context[13], 'e');
  refalrts::copy_evar(vm, context[14], context[15], context[2], context[3]);
  refalrts::alloc_chars(vm, context[16], context[17], "_fix", 4);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[10] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_stvar( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </7 & T5-sub?1/11 t.UsedVars1/12 e.eX_fix/9 >/8
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
    context[13] = refalrts::tvar_left( context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    // closed e.eX_fix as range 9
    //DEBUG: t.UsedVars: 5
    //DEBUG: e.Index: 2
    //DEBUG: t.UsedVars1: 12
    //DEBUG: e.eX_fix: 9
    //2: e.Index
    //5: t.UsedVars
    //9: e.eX_fix
    //12: t.UsedVars1
    //19: t.UsedVars
    //21: e.Index

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_T5m_sub_C2]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_NewVarName]);
    refalrts::copy_stvar(vm, context[19], context[5]);
    refalrts::alloc_char(vm, context[20], 'e');
    refalrts::copy_evar(vm, context[21], context[22], context[2], context[3]);
    refalrts::alloc_chars(vm, context[23], context[24], "_var", 4);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[14] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_stvar( res, context[19] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </14 & T5-sub?2/18 t.UsedVars2/19 e.eX_var/16 >/15
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
      context[20] = refalrts::tvar_left( context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      // closed e.eX_var as range 16
      //DEBUG: t.UsedVars: 5
      //DEBUG: e.Index: 2
      //DEBUG: t.UsedVars1: 12
      //DEBUG: e.eX_fix: 9
      //DEBUG: t.UsedVars2: 19
      //DEBUG: e.eX_var: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.UsedVars/5 {REMOVED TILE} {REMOVED TILE} t.UsedVars1/12 {REMOVED TILE} {REMOVED TILE} t.UsedVars2/19 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ HalfReuse: # Var/7 HalfReuse: 'e'/11 } Tile{ AsIs: e.Index/2 } Tile{ HalfReuse: )/8 HalfReuse: (/14 HalfReuse: # Var/18 } Tile{ AsIs: e.eX_fix/9 } )/21 (/22 # Var/23 Tile{ AsIs: e.eX_var/16 } Tile{ HalfReuse: )/15 HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_ident(vm, context[23], identifiers[ident_Var]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_ident(context[7], identifiers[ident_Var]);
      refalrts::reinit_char(context[11], 'e');
      refalrts::reinit_close_bracket(context[8]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_ident(context[18], identifiers[ident_Var]);
      refalrts::reinit_close_bracket(context[15]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::link_brackets( context[22], context[15] );
      refalrts::link_brackets( context[14], context[21] );
      refalrts::link_brackets( context[4], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[8], context[18] );
      res = refalrts::splice_evar( res, context[2], context[3] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[14], context[15]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[7], context[8]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T5m_sub("T5-sub", COOKIE1_, COOKIE2_, func_T5m_sub);


static refalrts::FnResult func_Substitute(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & Substitute/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Substitute/4 e.new1/2 (/7 t.new2/9 e.new3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  context[10] = refalrts::tvar_left( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 5
  do {
    // </0 & Substitute/4 t.new4/15 e.new5/11 (/7 t.new6/9 e.new7/13 )/8 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[5];
    context[14] = context[6];
    // closed e.new7 as range 13
    context[16] = refalrts::tvar_left( context[15], context[11], context[12] );
    if( ! context[16] )
      continue;
    // closed e.new5 as range 11
    do {
      // </0 & Substitute/4 (/15 s.new8/23 e.new9/21 )/16 e.new10/17 (/7 t.new11/9 e.new12/19 )/8 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      // closed e.new10 as range 17
      // closed e.new12 as range 19
      if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
        continue;
      // closed e.new9 as range 21
      do {
        // </0 & Substitute/4 (/15 # Var/23 s.Type/33 e.Index/24 )/16 e.Tail/26 (/7 (/9 # Var/32 s.Type/34 e.Index/35 )/10 e.Expr/28 )/8 >/1
        context[24] = context[21];
        context[25] = context[22];
        context[26] = context[17];
        context[27] = context[18];
        context[28] = context[19];
        context[29] = context[20];
        context[30] = 0;
        context[31] = 0;
        if( ! refalrts::brackets_term( context[30], context[31], context[9] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Var], context[23] ) )
          continue;
        context[32] = refalrts::ident_left( identifiers[ident_Var], context[30], context[31] );
        if( ! context[32] )
          continue;
        // closed e.Tail as range 26
        // closed e.Expr as range 28
        if( ! refalrts::svar_left( context[33], context[24], context[25] ) )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[34], context[33], context[30], context[31] ) )
          continue;
        // closed e.Index as range 24
        if( ! refalrts::repeated_evar_left( vm, context[35], context[36], context[24], context[25], context[30], context[31] ) )
          continue;
        if( ! refalrts::empty_seq( context[30], context[31] ) )
          continue;
        //DEBUG: e.Tail: 26
        //DEBUG: e.Expr: 28
        //DEBUG: s.Type: 33
        //DEBUG: e.Index: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} & Substitute/4 (/15 # Var/23 s.Type/33 e.Index/24 {REMOVED TILE}
        //RESULT: Tile{ [[ } e.Expr/28/37 Tile{ AsIs: </0 } Tile{ HalfReuse: & Substitute/16 AsIs: e.Tail/26 AsIs: (/7 AsIs: (/9 AsIs: # Var/32 AsIs: s.Type/34 AsIs: e.Index/35 AsIs: )/10 AsIs: e.Expr/28 AsIs: )/8 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[37], context[38], context[28], context[29]);
        refalrts::reinit_name(context[16], functions[efunc_Substitute]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_evar( res, context[37], context[38] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Substitute/4 (/15 # Brackets/23 e.InBrackets/24 )/16 e.Tail/26 (/7 t.Variable/9 e.Expr/28 )/8 >/1
        context[24] = context[21];
        context[25] = context[22];
        context[26] = context[17];
        context[27] = context[18];
        context[28] = context[19];
        context[29] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[23] ) )
          continue;
        // closed e.InBrackets as range 24
        // closed e.Tail as range 26
        // closed e.Expr as range 28
        //DEBUG: t.Variable: 9
        //DEBUG: e.InBrackets: 24
        //DEBUG: e.Tail: 26
        //DEBUG: e.Expr: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </15 HalfReuse: & Substitute/23 } Tile{ AsIs: e.InBrackets/24 } (/30 t.Variable/9/31 e.Expr/28/33 )/35 >/36 )/37 </38 Tile{ HalfReuse: & Substitute/16 AsIs: e.Tail/26 AsIs: (/7 AsIs: t.Variable/9 AsIs: e.Expr/28 AsIs: )/8 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::copy_evar(vm, context[31], context[32], context[9], context[10]);
        refalrts::copy_evar(vm, context[33], context[34], context[28], context[29]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[23], functions[efunc_Substitute]);
        refalrts::reinit_name(context[16], functions[efunc_Substitute]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[0], context[37] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[30], context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[30], context[38] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Substitute/4 (/15 # ADT-Brackets/23 (/32 e.Name/30 )/33 e.InBrackets/24 )/16 e.Tail/26 (/7 t.Variable/9 e.Expr/28 )/8 >/1
        context[24] = context[21];
        context[25] = context[22];
        context[26] = context[17];
        context[27] = context[18];
        context[28] = context[19];
        context[29] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[23] ) )
          continue;
        context[30] = 0;
        context[31] = 0;
        context[32] = refalrts::brackets_left( context[30], context[31], context[24], context[25] );
        if( ! context[32] )
          continue;
        refalrts::bracket_pointers(context[32], context[33]);
        // closed e.Name as range 30
        // closed e.InBrackets as range 24
        // closed e.Tail as range 26
        // closed e.Expr as range 28
        //DEBUG: t.Variable: 9
        //DEBUG: e.Name: 30
        //DEBUG: e.InBrackets: 24
        //DEBUG: e.Tail: 26
        //DEBUG: e.Expr: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/15 AsIs: # ADT-Brackets/23 AsIs: (/32 AsIs: e.Name/30 AsIs: )/33 } Tile{ AsIs: </0 AsIs: & Substitute/4 } Tile{ AsIs: e.InBrackets/24 } (/34 t.Variable/9/35 e.Expr/28/37 )/39 >/40 )/41 </42 Tile{ HalfReuse: & Substitute/16 AsIs: e.Tail/26 AsIs: (/7 AsIs: t.Variable/9 AsIs: e.Expr/28 AsIs: )/8 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[34]);
        refalrts::copy_evar(vm, context[35], context[36], context[9], context[10]);
        refalrts::copy_evar(vm, context[37], context[38], context[28], context[29]);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::reinit_name(context[16], functions[efunc_Substitute]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[42] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[15], context[41] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[34], context[39] );
        refalrts::link_brackets( context[32], context[33] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[34], context[42] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[15], context[33] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Substitute/4 (/15 # CallBrackets/23 e.InBrackets/24 )/16 e.Tail/26 (/7 t.Variable/9 e.Expr/28 )/8 >/1
        context[24] = context[21];
        context[25] = context[22];
        context[26] = context[17];
        context[27] = context[18];
        context[28] = context[19];
        context[29] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[23] ) )
          continue;
        // closed e.InBrackets as range 24
        // closed e.Tail as range 26
        // closed e.Expr as range 28
        //DEBUG: t.Variable: 9
        //DEBUG: e.InBrackets: 24
        //DEBUG: e.Tail: 26
        //DEBUG: e.Expr: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </15 HalfReuse: & Substitute/23 } Tile{ AsIs: e.InBrackets/24 } (/30 t.Variable/9/31 e.Expr/28/33 )/35 >/36 )/37 </38 Tile{ HalfReuse: & Substitute/16 AsIs: e.Tail/26 AsIs: (/7 AsIs: t.Variable/9 AsIs: e.Expr/28 AsIs: )/8 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::copy_evar(vm, context[31], context[32], context[9], context[10]);
        refalrts::copy_evar(vm, context[33], context[34], context[28], context[29]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[23], functions[efunc_Substitute]);
        refalrts::reinit_name(context[16], functions[efunc_Substitute]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[0], context[37] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[30], context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[30], context[38] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Substitute/4 (/15 # ClosureBrackets/23 e.InBrackets/24 )/16 e.Tail/26 (/7 t.Variable/9 e.Expr/28 )/8 >/1
      context[24] = context[21];
      context[25] = context[22];
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[23] ) )
        continue;
      // closed e.InBrackets as range 24
      // closed e.Tail as range 26
      // closed e.Expr as range 28
      //DEBUG: t.Variable: 9
      //DEBUG: e.InBrackets: 24
      //DEBUG: e.Tail: 26
      //DEBUG: e.Expr: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # ClosureBrackets/4 HalfReuse: </15 HalfReuse: & Substitute/23 } Tile{ AsIs: e.InBrackets/24 } (/30 t.Variable/9/31 e.Expr/28/33 )/35 >/36 )/37 </38 Tile{ HalfReuse: & Substitute/16 AsIs: e.Tail/26 AsIs: (/7 AsIs: t.Variable/9 AsIs: e.Expr/28 AsIs: )/8 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::copy_evar(vm, context[31], context[32], context[9], context[10]);
      refalrts::copy_evar(vm, context[33], context[34], context[28], context[29]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_ClosureBrackets]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[23], functions[efunc_Substitute]);
      refalrts::reinit_name(context[16], functions[efunc_Substitute]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[38] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[0], context[37] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[30], context[35] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_evar( res, context[30], context[38] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Substitute/4 t.OtherItem/15 e.Tail/17 (/7 t.Variable/9 e.Expr/19 )/8 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Tail as range 17
    // closed e.Expr as range 19
    //DEBUG: t.OtherItem: 15
    //DEBUG: t.Variable: 9
    //DEBUG: e.Tail: 17
    //DEBUG: e.Expr: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.OtherItem/15 } Tile{ AsIs: </0 AsIs: & Substitute/4 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: (/7 AsIs: t.Variable/9 AsIs: e.Expr/19 AsIs: )/8 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Substitute/4 (/7 t.Variable/9 e.Expr/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: t.Variable: 9
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Substitute/4 (/7 t.Variable/9 e.Expr/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Substitute("Substitute", COOKIE1_, COOKIE2_, func_Substitute);


static refalrts::FnResult func_T6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & T6/4 t.UsedVars/5 e.Items/7 (/13 # HOLE/15 (/18 # Var/20 'e'/21 e.Index/16 )/19 e.Pattern/11 )/14 e.ItemsAndHoles/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left( identifiers[ident_HOLE], context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[11], context[12] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    context[20] = refalrts::ident_left( identifiers[ident_Var], context[16], context[17] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[16], context[17] );
    if( ! context[21] )
      continue;
    // closed e.Index as range 16
    // closed e.Pattern as range 11
    // closed e.ItemsAndHoles as range 9
    //DEBUG: t.UsedVars: 5
    //DEBUG: e.Items: 7
    //DEBUG: e.Index: 16
    //DEBUG: e.Pattern: 11
    //DEBUG: e.ItemsAndHoles: 9
    //5: t.UsedVars
    //7: e.Items
    //9: e.ItemsAndHoles
    //11: e.Pattern
    //16: e.Index
    //27: t.UsedVars
    //29: e.Index

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_T6_C1]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_NewVarName]);
    refalrts::copy_stvar(vm, context[27], context[5]);
    refalrts::alloc_char(vm, context[28], 'e');
    refalrts::copy_evar(vm, context[29], context[30], context[16], context[17]);
    refalrts::alloc_chars(vm, context[31], context[32], "_fix", 4);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[25] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_stvar( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </22 & T6?1/26 t.UsedVars1/27 e.eX_fix/24 >/23
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
      context[28] = refalrts::tvar_left( context[27], context[24], context[25] );
      if( ! context[28] )
        continue;
      // closed e.eX_fix as range 24
      //DEBUG: t.UsedVars: 5
      //DEBUG: e.Items: 7
      //DEBUG: e.Index: 16
      //DEBUG: e.Pattern: 11
      //DEBUG: e.ItemsAndHoles: 9
      //DEBUG: t.UsedVars1: 27
      //DEBUG: e.eX_fix: 24
      //5: t.UsedVars
      //7: e.Items
      //9: e.ItemsAndHoles
      //11: e.Pattern
      //16: e.Index
      //24: e.eX_fix
      //27: t.UsedVars1
      //34: t.UsedVars1
      //36: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_T6_C2]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_NewVarName]);
      refalrts::copy_stvar(vm, context[34], context[27]);
      refalrts::alloc_char(vm, context[35], 'e');
      refalrts::copy_evar(vm, context[36], context[37], context[16], context[17]);
      refalrts::alloc_chars(vm, context[38], context[39], "_rest", 5);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[29] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[32] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_stvar( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </29 & T6?2/33 t.UsedVars2/34 e.eX_rest/31 >/30
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::call_left( context[31], context[32], context[29], context[30] );
        context[35] = refalrts::tvar_left( context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        // closed e.eX_rest as range 31
        //DEBUG: t.UsedVars: 5
        //DEBUG: e.Items: 7
        //DEBUG: e.Index: 16
        //DEBUG: e.Pattern: 11
        //DEBUG: e.ItemsAndHoles: 9
        //DEBUG: t.UsedVars1: 27
        //DEBUG: e.eX_fix: 24
        //DEBUG: t.UsedVars2: 34
        //DEBUG: e.eX_rest: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & T6/4 t.UsedVars/5 {REMOVED TILE} {REMOVED TILE} 'e'/21 e.Index/16 {REMOVED TILE} e.Pattern/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.UsedVars1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Items/7 } Tile{ AsIs: (/13 Reuse: # Brackets/15 AsIs: (/18 AsIs: # Var/20 } Tile{ AsIs: e.eX_fix/24 } Tile{ AsIs: )/14 } Tile{ AsIs: )/19 } Tile{ HalfReuse: (/22 HalfReuse: # Var/26 } Tile{ AsIs: e.eX_rest/31 } Tile{ HalfReuse: )/23 AsIs: </29 Reuse: & PassiveHoles/33 AsIs: t.UsedVars2/34 } Tile{ AsIs: e.ItemsAndHoles/9 } Tile{ AsIs: >/30 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::update_ident(context[15], identifiers[ident_Brackets]);
        refalrts::reinit_open_bracket(context[22]);
        refalrts::reinit_ident(context[26], identifiers[ident_Var]);
        refalrts::reinit_close_bracket(context[23]);
        refalrts::update_name(context[33], functions[efunc_PassiveHoles]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[0], context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::link_brackets( context[13], context[19] );
        refalrts::link_brackets( context[18], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_evar( res, context[23], context[35] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[22], context[26] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[13], context[20] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[29], context[30]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[22], context[23]);
    continue;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T6("T6", COOKIE1_, COOKIE2_, func_T6);


static refalrts::FnResult func_T7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & T7/4 t.UsedVars/5 e.Items/7 (/13 # HOLE/15 (/18 # Var/20 'e'/21 e.Index/16 )/19 e.Pattern/11 )/14 e.ItemsAndHoles/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left( identifiers[ident_HOLE], context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[11], context[12] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    context[20] = refalrts::ident_left( identifiers[ident_Var], context[16], context[17] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 'e', context[16], context[17] );
    if( ! context[21] )
      continue;
    // closed e.Index as range 16
    // closed e.Pattern as range 11
    // closed e.ItemsAndHoles as range 9
    //DEBUG: t.UsedVars: 5
    //DEBUG: e.Items: 7
    //DEBUG: e.Index: 16
    //DEBUG: e.Pattern: 11
    //DEBUG: e.ItemsAndHoles: 9
    //5: t.UsedVars
    //7: e.Items
    //9: e.ItemsAndHoles
    //11: e.Pattern
    //16: e.Index
    //27: t.UsedVars
    //29: e.Index

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_T7_C1]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_NewVarName]);
    refalrts::copy_stvar(vm, context[27], context[5]);
    refalrts::alloc_char(vm, context[28], 'e');
    refalrts::copy_evar(vm, context[29], context[30], context[16], context[17]);
    refalrts::alloc_chars(vm, context[31], context[32], "_fix", 4);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[25] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_stvar( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </22 & T7?1/26 t.UsedVars1/27 e.eX_fix/24 >/23
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
      context[28] = refalrts::tvar_left( context[27], context[24], context[25] );
      if( ! context[28] )
        continue;
      // closed e.eX_fix as range 24
      //DEBUG: t.UsedVars: 5
      //DEBUG: e.Items: 7
      //DEBUG: e.Index: 16
      //DEBUG: e.Pattern: 11
      //DEBUG: e.ItemsAndHoles: 9
      //DEBUG: t.UsedVars1: 27
      //DEBUG: e.eX_fix: 24
      //5: t.UsedVars
      //7: e.Items
      //9: e.ItemsAndHoles
      //11: e.Pattern
      //16: e.Index
      //24: e.eX_fix
      //27: t.UsedVars1
      //34: t.UsedVars1
      //36: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_T7_C2]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_NewVarName]);
      refalrts::copy_stvar(vm, context[34], context[27]);
      refalrts::alloc_char(vm, context[35], 'e');
      refalrts::copy_evar(vm, context[36], context[37], context[16], context[17]);
      refalrts::alloc_chars(vm, context[38], context[39], "_rest", 5);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[29] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[32] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_stvar( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </29 & T7?2/33 t.UsedVars2/34 e.eX_rest/31 >/30
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::call_left( context[31], context[32], context[29], context[30] );
        context[35] = refalrts::tvar_left( context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        // closed e.eX_rest as range 31
        //DEBUG: t.UsedVars: 5
        //DEBUG: e.Items: 7
        //DEBUG: e.Index: 16
        //DEBUG: e.Pattern: 11
        //DEBUG: e.ItemsAndHoles: 9
        //DEBUG: t.UsedVars1: 27
        //DEBUG: e.eX_fix: 24
        //DEBUG: t.UsedVars2: 34
        //DEBUG: e.eX_rest: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & T7/4 t.UsedVars/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Index/16 )/19 e.Pattern/11 )/14 {REMOVED TILE} </22 & T7?1/26 t.UsedVars1/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Items/7 } Tile{ AsIs: (/13 } Tile{ HalfReuse: # Var/21 } Tile{ AsIs: e.eX_fix/24 } Tile{ HalfReuse: )/15 AsIs: (/18 AsIs: # Var/20 } Tile{ AsIs: e.eX_rest/31 } Tile{ HalfReuse: )/23 AsIs: </29 Reuse: & PassiveHoles/33 AsIs: t.UsedVars2/34 } Tile{ AsIs: e.ItemsAndHoles/9 } Tile{ AsIs: >/30 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[21], identifiers[ident_Var]);
        refalrts::reinit_close_bracket(context[15]);
        refalrts::reinit_close_bracket(context[23]);
        refalrts::update_name(context[33], functions[efunc_PassiveHoles]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[0], context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[18], context[23] );
        refalrts::link_brackets( context[13], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_evar( res, context[23], context[35] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[15], context[20] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[29], context[30]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[22], context[23]);
    continue;
  } while ( refalrts::open_evar_advance( context[7], context[8], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_T7("T7", COOKIE1_, COOKIE2_, func_T7);


static refalrts::FnResult func_T0(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & T0/4 e.Items/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Items as range 2
  //DEBUG: e.Items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/5 Tile{ AsIs: </0 Reuse: & DoT0/4 AsIs: e.Items/2 AsIs: >/1 } )/6 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::update_name(context[4], functions[efunc_DoT0]);
  refalrts::link_brackets( context[5], context[6] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_T0("T0", COOKIE1_, COOKIE2_, func_T0);


static refalrts::FnResult func_DoT0(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & DoT0/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & DoT0/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & DoT0/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & DoT0/4 (/7 # OpenE/13 'e'/18 e.Index/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_OpenE], context[13] ) )
          continue;
        context[18] = refalrts::char_left( 'e', context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.Index as range 14
        // closed e.Tail as range 16
        //DEBUG: e.Index: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 AsIs: (/7 Reuse: # Var/13 AsIs: 'e'/18 AsIs: e.Index/14 AsIs: )/8 } )/19 </20 & DoT0/21 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_DoT0]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
        refalrts::update_ident(context[13], identifiers[ident_Var]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[0], context[19] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoT0/4 (/7 # Brackets/13 e.InBrackets/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.InBrackets as range 14
        // closed e.Tail as range 16
        //DEBUG: e.InBrackets: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </7 HalfReuse: & DoT0/13 AsIs: e.InBrackets/14 HalfReuse: >/8 } )/18 </19 & DoT0/20 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_DoT0]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_DoT0]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[0], context[18] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoT0/4 (/7 # ADT-Brackets/13 (/20 e.Name/18 )/21 e.InBrackets/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.Name as range 18
      // closed e.InBrackets as range 14
      // closed e.Tail as range 16
      //DEBUG: e.Name: 18
      //DEBUG: e.InBrackets: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # ADT-Brackets/13 AsIs: (/20 AsIs: e.Name/18 AsIs: )/21 } Tile{ AsIs: </0 AsIs: & DoT0/4 } Tile{ AsIs: e.InBrackets/14 } >/22 )/23 </24 Tile{ HalfReuse: & DoT0/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::reinit_name(context[8], functions[efunc_DoT0]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[7], context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoT0/4 t.OtherItem/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.OtherItem: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.OtherItem/7 } Tile{ AsIs: </0 AsIs: & DoT0/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoT0/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoT0/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoT0("DoT0", COOKIE1_, COOKIE2_, func_DoT0);


static refalrts::FnResult func_UnConditionm_Sentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 87 elems
  refalrts::Iter context[87];
  refalrts::zeros( context, 87 );
  // </0 & UnCondition-Sentence/4 s.MarkupContext/5 t.ContName/6 e.Sentence/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  // closed e.Sentence as range 2
  //DEBUG: s.MarkupContext: 5
  //DEBUG: t.ContName: 6
  //DEBUG: e.Sentence: 2
  //2: e.Sentence
  //5: s.MarkupContext
  //6: t.ContName
  //11: e.Sentence

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_UnConditionm_Sentence_C1]);
  refalrts::copy_evar(vm, context[11], context[12], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[8] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </8 & UnCondition-Sentence?1/12 (/15 e.Pattern/13 )/16 (/19 # Condition/21 (/24 e.ConditionName/22 )/25 (/28 e.CondResult/26 )/29 (/32 e.CondPattern/30 )/33 )/20 e.SentenceTail/10 >/9
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::call_left( context[10], context[11], context[8], context[9] );
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[10], context[11] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[10], context[11] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = refalrts::ident_left( identifiers[ident_Condition], context[17], context[18] );
    if( ! context[21] )
      continue;
    context[22] = 0;
    context[23] = 0;
    context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
    if( ! context[24] )
      continue;
    refalrts::bracket_pointers(context[24], context[25]);
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[17], context[18] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    context[30] = 0;
    context[31] = 0;
    context[32] = refalrts::brackets_left( context[30], context[31], context[17], context[18] );
    if( ! context[32] )
      continue;
    refalrts::bracket_pointers(context[32], context[33]);
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.Pattern as range 13
    // closed e.ConditionName as range 22
    // closed e.CondResult as range 26
    // closed e.CondPattern as range 30
    // closed e.SentenceTail as range 10
    //DEBUG: s.MarkupContext: 5
    //DEBUG: t.ContName: 6
    //DEBUG: e.Sentence: 2
    //DEBUG: e.Pattern: 13
    //DEBUG: e.ConditionName: 22
    //DEBUG: e.CondResult: 26
    //DEBUG: e.CondPattern: 30
    //DEBUG: e.SentenceTail: 10
    //2: e.Sentence
    //5: s.MarkupContext
    //6: t.ContName
    //10: e.SentenceTail
    //13: e.Pattern
    //22: e.ConditionName
    //26: e.CondResult
    //30: e.CondPattern
    //37: e.ConditionName

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[36], functions[efunc_gen_UnConditionm_Sentence_C2]);
    refalrts::copy_evar(vm, context[37], context[38], context[22], context[23]);
    refalrts::alloc_char(vm, context[39], '?');
    refalrts::alloc_number(vm, context[40], 0UL);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[34] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_elem( res, context[34] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </34 & UnCondition-Sentence?2/38 e.CheckFunction/36 >/35
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::call_left( context[36], context[37], context[34], context[35] );
      // closed e.CheckFunction as range 36
      //DEBUG: s.MarkupContext: 5
      //DEBUG: t.ContName: 6
      //DEBUG: e.Sentence: 2
      //DEBUG: e.Pattern: 13
      //DEBUG: e.ConditionName: 22
      //DEBUG: e.CondResult: 26
      //DEBUG: e.CondPattern: 30
      //DEBUG: e.SentenceTail: 10
      //DEBUG: e.CheckFunction: 36
      //2: e.Sentence
      //5: s.MarkupContext
      //6: t.ContName
      //10: e.SentenceTail
      //13: e.Pattern
      //22: e.ConditionName
      //26: e.CondResult
      //30: e.CondPattern
      //36: e.CheckFunction
      //45: e.Sentence

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_UnConditionm_Sentence_C3]);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_ExtractVariables]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::copy_evar(vm, context[45], context[46], context[2], context[3]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[39] );
      res = refalrts::splice_elem( res, context[40] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[42] );
      res = refalrts::splice_elem( res, context[48] );
      refalrts::link_brackets( context[44], context[47] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[39] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </39 & UnCondition-Sentence?3/43 e.SentenceVariables/41 >/40
        context[41] = 0;
        context[42] = 0;
        context[43] = refalrts::call_left( context[41], context[42], context[39], context[40] );
        // closed e.SentenceVariables as range 41
        //DEBUG: s.MarkupContext: 5
        //DEBUG: t.ContName: 6
        //DEBUG: e.Sentence: 2
        //DEBUG: e.Pattern: 13
        //DEBUG: e.ConditionName: 22
        //DEBUG: e.CondResult: 26
        //DEBUG: e.CondPattern: 30
        //DEBUG: e.SentenceTail: 10
        //DEBUG: e.CheckFunction: 36
        //DEBUG: e.SentenceVariables: 41
        //2: e.Sentence
        //5: s.MarkupContext
        //6: t.ContName
        //10: e.SentenceTail
        //13: e.Pattern
        //22: e.ConditionName
        //26: e.CondResult
        //30: e.CondPattern
        //36: e.CheckFunction
        //41: e.SentenceVariables
        //49: s.MarkupContext
        //50: e.Pattern

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_UnConditionm_Sentence_C4]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_ConditionContext]);
        refalrts::copy_stvar(vm, context[49], context[5]);
        refalrts::copy_evar(vm, context[50], context[51], context[13], context[14]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[44] );
        res = refalrts::splice_elem( res, context[45] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[47] );
        res = refalrts::splice_elem( res, context[52] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_stvar( res, context[49] );
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </44 & UnCondition-Sentence?4/48 e.Context/46 >/45
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
          // closed e.Context as range 46
          //DEBUG: s.MarkupContext: 5
          //DEBUG: t.ContName: 6
          //DEBUG: e.Sentence: 2
          //DEBUG: e.Pattern: 13
          //DEBUG: e.ConditionName: 22
          //DEBUG: e.CondResult: 26
          //DEBUG: e.CondPattern: 30
          //DEBUG: e.SentenceTail: 10
          //DEBUG: e.CheckFunction: 36
          //DEBUG: e.SentenceVariables: 41
          //DEBUG: e.Context: 46
          //2: e.Sentence
          //5: s.MarkupContext
          //6: t.ContName
          //10: e.SentenceTail
          //13: e.Pattern
          //22: e.ConditionName
          //26: e.CondResult
          //30: e.CondPattern
          //36: e.CheckFunction
          //41: e.SentenceVariables
          //46: e.Context
          //55: e.SentenceVariables
          //58: e.Pattern

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[49]);
          refalrts::alloc_name(vm, context[51], functions[efunc_gen_UnConditionm_Sentence_C5]);
          refalrts::alloc_open_call(vm, context[52]);
          refalrts::alloc_name(vm, context[53], functions[efunc_PatternSteps]);
          refalrts::alloc_open_bracket(vm, context[54]);
          refalrts::copy_evar(vm, context[55], context[56], context[41], context[42]);
          refalrts::alloc_close_bracket(vm, context[57]);
          refalrts::copy_evar(vm, context[58], context[59], context[13], context[14]);
          refalrts::alloc_close_call(vm, context[60]);
          refalrts::alloc_close_call(vm, context[50]);
          refalrts::push_stack( vm, context[50] );
          refalrts::push_stack( vm, context[49] );
          res = refalrts::splice_elem( res, context[50] );
          refalrts::push_stack( vm, context[60] );
          refalrts::push_stack( vm, context[52] );
          res = refalrts::splice_elem( res, context[60] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          refalrts::link_brackets( context[54], context[57] );
          res = refalrts::splice_elem( res, context[57] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_elem( res, context[54] );
          res = refalrts::splice_elem( res, context[53] );
          res = refalrts::splice_elem( res, context[52] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_elem( res, context[49] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </49 & UnCondition-Sentence?5/53 e.PatternSteps/51 >/50
            context[51] = 0;
            context[52] = 0;
            context[53] = refalrts::call_left( context[51], context[52], context[49], context[50] );
            // closed e.PatternSteps as range 51
            //DEBUG: s.MarkupContext: 5
            //DEBUG: t.ContName: 6
            //DEBUG: e.Sentence: 2
            //DEBUG: e.Pattern: 13
            //DEBUG: e.ConditionName: 22
            //DEBUG: e.CondResult: 26
            //DEBUG: e.CondPattern: 30
            //DEBUG: e.SentenceTail: 10
            //DEBUG: e.CheckFunction: 36
            //DEBUG: e.SentenceVariables: 41
            //DEBUG: e.Context: 46
            //DEBUG: e.PatternSteps: 51
            //2: e.Sentence
            //5: s.MarkupContext
            //6: t.ContName
            //10: e.SentenceTail
            //13: e.Pattern
            //22: e.ConditionName
            //26: e.CondResult
            //30: e.CondPattern
            //36: e.CheckFunction
            //41: e.SentenceVariables
            //46: e.Context
            //51: e.PatternSteps
            //60: e.ConditionName
            //64: e.SentenceVariables
            //67: t.ContName
            //69: e.CheckFunction
            //73: e.Context
            //77: e.CondResult
            //80: e.PatternSteps

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[54]);
            refalrts::alloc_name(vm, context[56], functions[efunc_gen_UnConditionm_Sentence_C6]);
            refalrts::alloc_open_call(vm, context[57]);
            refalrts::alloc_name(vm, context[58], functions[efunc_OpenEChain]);
            refalrts::alloc_open_bracket(vm, context[59]);
            refalrts::copy_evar(vm, context[60], context[61], context[22], context[23]);
            refalrts::alloc_close_bracket(vm, context[62]);
            refalrts::alloc_open_bracket(vm, context[63]);
            refalrts::copy_evar(vm, context[64], context[65], context[41], context[42]);
            refalrts::alloc_close_bracket(vm, context[66]);
            refalrts::copy_stvar(vm, context[67], context[6]);
            refalrts::alloc_open_bracket(vm, context[68]);
            refalrts::copy_evar(vm, context[69], context[70], context[36], context[37]);
            refalrts::alloc_close_bracket(vm, context[71]);
            refalrts::alloc_open_bracket(vm, context[72]);
            refalrts::copy_evar(vm, context[73], context[74], context[46], context[47]);
            refalrts::alloc_close_bracket(vm, context[75]);
            refalrts::alloc_open_bracket(vm, context[76]);
            refalrts::copy_evar(vm, context[77], context[78], context[26], context[27]);
            refalrts::alloc_close_bracket(vm, context[79]);
            refalrts::copy_evar(vm, context[80], context[81], context[51], context[52]);
            refalrts::alloc_close_call(vm, context[82]);
            refalrts::alloc_close_call(vm, context[55]);
            refalrts::push_stack( vm, context[55] );
            refalrts::push_stack( vm, context[54] );
            res = refalrts::splice_elem( res, context[55] );
            refalrts::push_stack( vm, context[82] );
            refalrts::push_stack( vm, context[57] );
            res = refalrts::splice_elem( res, context[82] );
            res = refalrts::splice_evar( res, context[80], context[81] );
            refalrts::link_brackets( context[76], context[79] );
            res = refalrts::splice_elem( res, context[79] );
            res = refalrts::splice_evar( res, context[77], context[78] );
            res = refalrts::splice_elem( res, context[76] );
            refalrts::link_brackets( context[72], context[75] );
            res = refalrts::splice_elem( res, context[75] );
            res = refalrts::splice_evar( res, context[73], context[74] );
            res = refalrts::splice_elem( res, context[72] );
            refalrts::link_brackets( context[68], context[71] );
            res = refalrts::splice_elem( res, context[71] );
            res = refalrts::splice_evar( res, context[69], context[70] );
            res = refalrts::splice_elem( res, context[68] );
            res = refalrts::splice_stvar( res, context[67] );
            refalrts::link_brackets( context[63], context[66] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_evar( res, context[64], context[65] );
            res = refalrts::splice_elem( res, context[63] );
            refalrts::link_brackets( context[59], context[62] );
            res = refalrts::splice_elem( res, context[62] );
            res = refalrts::splice_evar( res, context[60], context[61] );
            res = refalrts::splice_elem( res, context[59] );
            res = refalrts::splice_elem( res, context[58] );
            res = refalrts::splice_elem( res, context[57] );
            res = refalrts::splice_elem( res, context[56] );
            res = refalrts::splice_elem( res, context[54] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </54 & UnCondition-Sentence?6/58 (/61 e.ContSentence/59 )/62 e.OpenEFunctions/56 >/55
              context[56] = 0;
              context[57] = 0;
              context[58] = refalrts::call_left( context[56], context[57], context[54], context[55] );
              context[59] = 0;
              context[60] = 0;
              context[61] = refalrts::brackets_left( context[59], context[60], context[56], context[57] );
              if( ! context[61] )
                continue;
              refalrts::bracket_pointers(context[61], context[62]);
              // closed e.ContSentence as range 59
              // closed e.OpenEFunctions as range 56
              //DEBUG: s.MarkupContext: 5
              //DEBUG: t.ContName: 6
              //DEBUG: e.Sentence: 2
              //DEBUG: e.Pattern: 13
              //DEBUG: e.ConditionName: 22
              //DEBUG: e.CondResult: 26
              //DEBUG: e.CondPattern: 30
              //DEBUG: e.SentenceTail: 10
              //DEBUG: e.CheckFunction: 36
              //DEBUG: e.SentenceVariables: 41
              //DEBUG: e.Context: 46
              //DEBUG: e.PatternSteps: 51
              //DEBUG: e.ContSentence: 59
              //DEBUG: e.OpenEFunctions: 56
              //2: e.Sentence
              //5: s.MarkupContext
              //6: t.ContName
              //10: e.SentenceTail
              //13: e.Pattern
              //22: e.ConditionName
              //26: e.CondResult
              //30: e.CondPattern
              //36: e.CheckFunction
              //41: e.SentenceVariables
              //46: e.Context
              //51: e.PatternSteps
              //56: e.OpenEFunctions
              //59: e.ContSentence
              //70: e.CheckFunction
              //76: e.Context
              //78: e.CondPattern
              //81: e.SentenceTail
              //84: e.ContSentence

              refalrts::reset_allocator(vm);
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              refalrts::alloc_open_call(vm, context[63]);
              refalrts::alloc_name(vm, context[65], functions[efunc_gen_UnConditionm_Sentence_C7]);
              refalrts::alloc_open_bracket(vm, context[66]);
              refalrts::alloc_ident(vm, context[67], identifiers[ident_Function]);
              refalrts::alloc_ident(vm, context[68], identifiers[ident_GNm_Local]);
              refalrts::alloc_open_bracket(vm, context[69]);
              refalrts::copy_evar(vm, context[70], context[71], context[36], context[37]);
              refalrts::alloc_close_bracket(vm, context[72]);
              refalrts::alloc_ident(vm, context[73], identifiers[ident_Sentences]);
              refalrts::alloc_open_bracket(vm, context[74]);
              refalrts::alloc_open_bracket(vm, context[75]);
              refalrts::copy_evar(vm, context[76], context[77], context[46], context[47]);
              refalrts::copy_evar(vm, context[78], context[79], context[30], context[31]);
              refalrts::alloc_close_bracket(vm, context[80]);
              refalrts::copy_evar(vm, context[81], context[82], context[10], context[11]);
              refalrts::alloc_close_bracket(vm, context[83]);
              refalrts::copy_evar(vm, context[84], context[85], context[59], context[60]);
              refalrts::alloc_close_bracket(vm, context[86]);
              refalrts::alloc_close_call(vm, context[64]);
              refalrts::push_stack( vm, context[64] );
              refalrts::push_stack( vm, context[63] );
              res = refalrts::splice_elem( res, context[64] );
              refalrts::link_brackets( context[66], context[86] );
              res = refalrts::splice_elem( res, context[86] );
              res = refalrts::splice_evar( res, context[84], context[85] );
              refalrts::link_brackets( context[74], context[83] );
              res = refalrts::splice_elem( res, context[83] );
              res = refalrts::splice_evar( res, context[81], context[82] );
              refalrts::link_brackets( context[75], context[80] );
              res = refalrts::splice_elem( res, context[80] );
              res = refalrts::splice_evar( res, context[78], context[79] );
              res = refalrts::splice_evar( res, context[76], context[77] );
              res = refalrts::splice_elem( res, context[75] );
              res = refalrts::splice_elem( res, context[74] );
              res = refalrts::splice_elem( res, context[73] );
              refalrts::link_brackets( context[69], context[72] );
              res = refalrts::splice_elem( res, context[72] );
              res = refalrts::splice_evar( res, context[70], context[71] );
              res = refalrts::splice_elem( res, context[69] );
              res = refalrts::splice_elem( res, context[68] );
              res = refalrts::splice_elem( res, context[67] );
              res = refalrts::splice_elem( res, context[66] );
              res = refalrts::splice_elem( res, context[65] );
              res = refalrts::splice_elem( res, context[63] );
              refalrts::use( res );
              refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
              if (rec_res != refalrts::cSuccess)
                return rec_res;
              refalrts::this_is_generated_function(vm);
              do {
                // </63 & UnCondition-Sentence?7/67 t.CheckFunction/68 >/64
                context[65] = 0;
                context[66] = 0;
                context[67] = refalrts::call_left( context[65], context[66], context[63], context[64] );
                context[69] = refalrts::tvar_left( context[68], context[65], context[66] );
                if( ! context[69] )
                  continue;
                if( ! refalrts::empty_seq( context[65], context[66] ) )
                  continue;
                //DEBUG: s.MarkupContext: 5
                //DEBUG: t.ContName: 6
                //DEBUG: e.Sentence: 2
                //DEBUG: e.Pattern: 13
                //DEBUG: e.ConditionName: 22
                //DEBUG: e.CondResult: 26
                //DEBUG: e.CondPattern: 30
                //DEBUG: e.SentenceTail: 10
                //DEBUG: e.CheckFunction: 36
                //DEBUG: e.SentenceVariables: 41
                //DEBUG: e.Context: 46
                //DEBUG: e.PatternSteps: 51
                //DEBUG: e.ContSentence: 59
                //DEBUG: e.OpenEFunctions: 56
                //DEBUG: t.CheckFunction: 68

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} </0 & UnCondition-Sentence/4 s.MarkupContext/5 t.ContName/6 e.Sentence/2 </8 {REMOVED TILE} e.ConditionName/22 )/25 (/28 {REMOVED TILE} {REMOVED TILE} (/32 e.CondPattern/30 {REMOVED TILE} e.SentenceTail/10 {REMOVED TILE} e.SentenceVariables/41 {REMOVED TILE} & UnCondition-Sentence?5/53 e.PatternSteps/51 {REMOVED TILE} {REMOVED TILE} e.ContSentence/59 )/62 {REMOVED TILE} >/55 </63 & UnCondition-Sentence?7/67 {REMOVED TILE} >/64 >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ } Tile{ HalfReuse: (/12 AsIs: (/15 AsIs: e.Pattern/13 AsIs: )/16 AsIs: (/19 HalfReuse: (/21 HalfReuse: # CallBrackets/24 } Tile{ HalfReuse: (/50 HalfReuse: # Symbol/54 HalfReuse: # Name/58 } e.CheckFunction/36/70 Tile{ AsIs: )/29 } e.Context/46/72 Tile{ AsIs: e.CondResult/26 } Tile{ AsIs: )/33 AsIs: )/20 } Tile{ HalfReuse: )/9 HalfReuse: (/34 HalfReuse: # Drive/38 AsIs: e.CheckFunction/36 HalfReuse: )/35 HalfReuse: (/39 HalfReuse: # Spec/43 } Tile{ AsIs: (/61 } e.CheckFunction/36/74 Tile{ HalfReuse: )/40 AsIs: </44 Reuse: & CreateSpecPatternForContext/48 AsIs: e.Context/46 AsIs: >/45 HalfReuse: )/49 } Tile{ AsIs: t.CheckFunction/68 } Tile{ AsIs: e.OpenEFunctions/56 } Tile{ ]] }
                refalrts::copy_evar(vm, context[70], context[71], context[36], context[37]);
                refalrts::copy_evar(vm, context[72], context[73], context[46], context[47]);
                refalrts::copy_evar(vm, context[74], context[75], context[36], context[37]);
                refalrts::reinit_open_bracket(context[12]);
                refalrts::reinit_open_bracket(context[21]);
                refalrts::reinit_ident(context[24], identifiers[ident_CallBrackets]);
                refalrts::reinit_open_bracket(context[50]);
                refalrts::reinit_ident(context[54], identifiers[ident_Symbol]);
                refalrts::reinit_ident(context[58], identifiers[ident_Name]);
                refalrts::reinit_close_bracket(context[9]);
                refalrts::reinit_open_bracket(context[34]);
                refalrts::reinit_ident(context[38], identifiers[ident_Drive]);
                refalrts::reinit_close_bracket(context[35]);
                refalrts::reinit_open_bracket(context[39]);
                refalrts::reinit_ident(context[43], identifiers[ident_Spec]);
                refalrts::reinit_close_bracket(context[40]);
                refalrts::update_name(context[48], functions[efunc_CreateSpecPatternForContext]);
                refalrts::reinit_close_bracket(context[49]);
                refalrts::link_brackets( context[39], context[49] );
                refalrts::push_stack( vm, context[45] );
                refalrts::push_stack( vm, context[44] );
                refalrts::link_brackets( context[61], context[40] );
                refalrts::link_brackets( context[34], context[35] );
                refalrts::link_brackets( context[12], context[9] );
                refalrts::link_brackets( context[19], context[20] );
                refalrts::link_brackets( context[21], context[33] );
                refalrts::link_brackets( context[50], context[29] );
                refalrts::link_brackets( context[15], context[16] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[56], context[57] );
                res = refalrts::splice_evar( res, context[68], context[69] );
                res = refalrts::splice_evar( res, context[40], context[49] );
                res = refalrts::splice_evar( res, context[74], context[75] );
                res = refalrts::splice_elem( res, context[61] );
                res = refalrts::splice_evar( res, context[9], context[43] );
                res = refalrts::splice_evar( res, context[33], context[20] );
                res = refalrts::splice_evar( res, context[26], context[27] );
                res = refalrts::splice_evar( res, context[72], context[73] );
                res = refalrts::splice_elem( res, context[29] );
                res = refalrts::splice_evar( res, context[70], context[71] );
                res = refalrts::splice_evar( res, context[50], context[58] );
                res = refalrts::splice_evar( res, context[12], context[24] );
                refalrts::splice_to_freelist_open( vm, trash_prev, res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              refalrts::splice_to_freelist(vm, context[63], context[64]);
              continue;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[54], context[55]);
            continue;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[49], context[50]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[44], context[45]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[39], context[40]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[34], context[35]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[8], context[9]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_UnConditionm_Sentence("UnCondition-Sentence", COOKIE1_, COOKIE2_, func_UnConditionm_Sentence);


static refalrts::FnResult func_ConditionContext(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & ConditionContext/4 s.MarkupContext/5 e.Pattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Pattern as range 2
  //DEBUG: s.MarkupContext: 5
  //DEBUG: e.Pattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateContext/4 AsIs: s.MarkupContext/5 } </6 & Unique/7 </8 & ExtractVariables-Expr/9 Tile{ AsIs: e.Pattern/2 } >/10 >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_Unique]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_ExtractVariablesm_Expr]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_CreateContext]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ConditionContext("ConditionContext", COOKIE1_, COOKIE2_, func_ConditionContext);


static refalrts::FnResult func_OpenEChain(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 70 elems
  refalrts::Iter context[70];
  refalrts::zeros( context, 70 );
  // </0 & OpenEChain/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OpenEChain/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 t.new3/13 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 (/33 e.new7/31 )/34 )/30 e.new8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[27], context[28] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  if( ! refalrts::empty_seq( context[27], context[28] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 31
  // closed e.new8 as range 2
  do {
    // </0 & OpenEChain/4 (/7 e.ConditionName/35 )/8 (/11 e.VarNames/37 )/12 (/13 e.ContName/47 )/14 (/17 e.CheckFunction/39 )/18 (/21 e.Context/41 )/22 (/25 e.CondResult/43 )/26 (/29 (/33 e.T0/45 )/34 )/30 >/1
    context[35] = context[5];
    context[36] = context[6];
    context[37] = context[9];
    context[38] = context[10];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[31];
    context[46] = context[32];
    context[47] = 0;
    context[48] = 0;
    if( ! refalrts::brackets_term( context[47], context[48], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ConditionName as range 35
    // closed e.VarNames as range 37
    // closed e.ContName as range 47
    // closed e.CheckFunction as range 39
    // closed e.Context as range 41
    // closed e.CondResult as range 43
    // closed e.T0 as range 45
    //DEBUG: e.ConditionName: 35
    //DEBUG: e.VarNames: 37
    //DEBUG: e.ContName: 47
    //DEBUG: e.CheckFunction: 39
    //DEBUG: e.Context: 41
    //DEBUG: e.CondResult: 43
    //DEBUG: e.T0: 45
    //35: e.ConditionName
    //37: e.VarNames
    //39: e.CheckFunction
    //41: e.Context
    //43: e.CondResult
    //45: e.T0
    //47: e.ContName
    //55: e.VarNames

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[51], functions[efunc_gen_OpenEChain_S1C1]);
    refalrts::alloc_open_call(vm, context[52]);
    refalrts::alloc_name(vm, context[53], functions[efunc_NewVarName]);
    refalrts::alloc_open_bracket(vm, context[54]);
    refalrts::copy_evar(vm, context[55], context[56], context[37], context[38]);
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::alloc_chars(vm, context[58], context[59], "eOther", 6);
    refalrts::alloc_number(vm, context[60], 0UL);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[49] );
    res = refalrts::splice_elem( res, context[50] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[52] );
    res = refalrts::splice_elem( res, context[61] );
    res = refalrts::splice_elem( res, context[60] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    refalrts::link_brackets( context[54], context[57] );
    res = refalrts::splice_elem( res, context[57] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_elem( res, context[54] );
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_elem( res, context[52] );
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_elem( res, context[49] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </49 & OpenEChain$1?1/53 (/56 e.NewVarNames/54 )/57 e.eOther/51 >/50
      context[51] = 0;
      context[52] = 0;
      context[53] = refalrts::call_left( context[51], context[52], context[49], context[50] );
      context[54] = 0;
      context[55] = 0;
      context[56] = refalrts::brackets_left( context[54], context[55], context[51], context[52] );
      if( ! context[56] )
        continue;
      refalrts::bracket_pointers(context[56], context[57]);
      // closed e.NewVarNames as range 54
      // closed e.eOther as range 51
      //DEBUG: e.ConditionName: 35
      //DEBUG: e.VarNames: 37
      //DEBUG: e.ContName: 47
      //DEBUG: e.CheckFunction: 39
      //DEBUG: e.Context: 41
      //DEBUG: e.CondResult: 43
      //DEBUG: e.T0: 45
      //DEBUG: e.NewVarNames: 54
      //DEBUG: e.eOther: 51

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.ConditionName/35 )/8 (/11 e.VarNames/37 )/12 (/13 {REMOVED TILE} )/14 {REMOVED TILE} e.CheckFunction/39 {REMOVED TILE} e.CondResult/43 {REMOVED TILE} {REMOVED TILE} (/56 e.NewVarNames/54 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/17 } Tile{ HalfReuse: (/18 AsIs: (/21 AsIs: e.Context/41 HalfReuse: (/22 HalfReuse: # Var/25 } Tile{ AsIs: e.eOther/51 } Tile{ AsIs: )/57 } Tile{ AsIs: )/26 AsIs: (/29 } Tile{ HalfReuse: (/0 HalfReuse: # CallBrackets/4 AsIs: (/7 } Tile{ HalfReuse: # Symbol/50 HalfReuse: # Name/1 } Tile{ AsIs: e.ContName/47 } Tile{ HalfReuse: )/33 AsIs: e.T0/45 AsIs: )/34 AsIs: )/30 HalfReuse: )/49 HalfReuse: )/53 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[18]);
      refalrts::reinit_open_bracket(context[22]);
      refalrts::reinit_ident(context[25], identifiers[ident_Var]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
      refalrts::reinit_ident(context[50], identifiers[ident_Symbol]);
      refalrts::reinit_ident(context[1], identifiers[ident_Name]);
      refalrts::reinit_close_bracket(context[33]);
      refalrts::reinit_close_bracket(context[49]);
      refalrts::reinit_close_bracket(context[53]);
      refalrts::link_brackets( context[17], context[53] );
      refalrts::link_brackets( context[18], context[49] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[0], context[34] );
      refalrts::link_brackets( context[7], context[33] );
      refalrts::link_brackets( context[21], context[26] );
      refalrts::link_brackets( context[22], context[57] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[33], context[53] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[50], context[1] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[26], context[29] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[18], context[25] );
      res = refalrts::splice_elem( res, context[17] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[49], context[50]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OpenEChain/4 (/7 e.ConditionName/5 )/8 (/11 e.VarNames/9 )/12 t.ContName/13 (/17 e.CheckFunction/15 )/18 (/21 e.Context/19 )/22 (/25 e.CondResult/23 )/26 (/29 (/33 e.T0/31 )/34 )/30 e.Templates/2 >/1
  // closed e.ConditionName as range 5
  // closed e.VarNames as range 9
  // closed e.CheckFunction as range 15
  // closed e.Context as range 19
  // closed e.CondResult as range 23
  // closed e.T0 as range 31
  // closed e.Templates as range 2
  //DEBUG: t.ContName: 13
  //DEBUG: e.ConditionName: 5
  //DEBUG: e.VarNames: 9
  //DEBUG: e.CheckFunction: 15
  //DEBUG: e.Context: 19
  //DEBUG: e.CondResult: 23
  //DEBUG: e.T0: 31
  //DEBUG: e.Templates: 2
  //2: e.Templates
  //5: e.ConditionName
  //9: e.VarNames
  //13: t.ContName
  //15: e.CheckFunction
  //19: e.Context
  //23: e.CondResult
  //31: e.T0
  //38: e.ConditionName

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[35]);
  refalrts::alloc_name(vm, context[37], functions[efunc_gen_OpenEChain_S2C1]);
  refalrts::copy_evar(vm, context[38], context[39], context[5], context[6]);
  refalrts::alloc_char(vm, context[40], '?');
  refalrts::alloc_number(vm, context[41], 2UL);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[35] );
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_elem( res, context[41] );
  res = refalrts::splice_elem( res, context[40] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_elem( res, context[37] );
  res = refalrts::splice_elem( res, context[35] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </35 & OpenEChain$2?1/39 e.NextForward/37 >/36
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::call_left( context[37], context[38], context[35], context[36] );
    // closed e.NextForward as range 37
    //DEBUG: t.ContName: 13
    //DEBUG: e.ConditionName: 5
    //DEBUG: e.VarNames: 9
    //DEBUG: e.CheckFunction: 15
    //DEBUG: e.Context: 19
    //DEBUG: e.CondResult: 23
    //DEBUG: e.T0: 31
    //DEBUG: e.Templates: 2
    //DEBUG: e.NextForward: 37
    //2: e.Templates
    //5: e.ConditionName
    //9: e.VarNames
    //13: t.ContName
    //15: e.CheckFunction
    //19: e.Context
    //23: e.CondResult
    //31: e.T0
    //37: e.NextForward
    //46: e.ConditionName
    //51: e.NextForward
    //54: t.ContName
    //56: e.CheckFunction
    //60: e.Context
    //62: e.CondResult
    //67: e.Templates

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[42], functions[efunc_gen_OpenEChain_S2C2]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_DoOpenEChain]);
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::copy_evar(vm, context[46], context[47], context[5], context[6]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_number(vm, context[49], 2UL);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::copy_evar(vm, context[51], context[52], context[37], context[38]);
    refalrts::alloc_close_bracket(vm, context[53]);
    refalrts::copy_stvar(vm, context[54], context[13]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::copy_evar(vm, context[56], context[57], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[58]);
    refalrts::alloc_open_bracket(vm, context[59]);
    refalrts::copy_evar(vm, context[60], context[61], context[19], context[20]);
    refalrts::copy_evar(vm, context[62], context[63], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::alloc_close_bracket(vm, context[66]);
    refalrts::copy_evar(vm, context[67], context[68], context[2], context[3]);
    refalrts::alloc_close_call(vm, context[69]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[40] );
    res = refalrts::splice_elem( res, context[41] );
    refalrts::push_stack( vm, context[69] );
    refalrts::push_stack( vm, context[43] );
    res = refalrts::splice_elem( res, context[69] );
    res = refalrts::splice_evar( res, context[67], context[68] );
    refalrts::link_brackets( context[65], context[66] );
    res = refalrts::splice_elem( res, context[66] );
    res = refalrts::splice_elem( res, context[65] );
    refalrts::link_brackets( context[59], context[64] );
    res = refalrts::splice_elem( res, context[64] );
    res = refalrts::splice_evar( res, context[62], context[63] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_elem( res, context[59] );
    refalrts::link_brackets( context[55], context[58] );
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_elem( res, context[55] );
    res = refalrts::splice_stvar( res, context[54] );
    refalrts::link_brackets( context[50], context[53] );
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_elem( res, context[49] );
    refalrts::link_brackets( context[45], context[48] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_elem( res, context[40] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </40 & OpenEChain$2?2/44 e.NewFunctions/42 >/41
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::call_left( context[42], context[43], context[40], context[41] );
      // closed e.NewFunctions as range 42
      //DEBUG: t.ContName: 13
      //DEBUG: e.ConditionName: 5
      //DEBUG: e.VarNames: 9
      //DEBUG: e.CheckFunction: 15
      //DEBUG: e.Context: 19
      //DEBUG: e.CondResult: 23
      //DEBUG: e.T0: 31
      //DEBUG: e.Templates: 2
      //DEBUG: e.NextForward: 37
      //DEBUG: e.NewFunctions: 42
      //2: e.Templates
      //5: e.ConditionName
      //9: e.VarNames
      //13: t.ContName
      //15: e.CheckFunction
      //19: e.Context
      //23: e.CondResult
      //31: e.T0
      //37: e.NextForward
      //42: e.NewFunctions
      //51: e.VarNames

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[47], functions[efunc_gen_OpenEChain_S2C3]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_NewVarName]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::copy_evar(vm, context[51], context[52], context[9], context[10]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_chars(vm, context[54], context[55], "eOther", 6);
      refalrts::alloc_number(vm, context[56], 0UL);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[45] );
      res = refalrts::splice_elem( res, context[46] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[48] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      refalrts::link_brackets( context[50], context[53] );
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[45] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </45 & OpenEChain$2?3/49 (/52 e.NewVarNames/50 )/53 e.eOther/47 >/46
        context[47] = 0;
        context[48] = 0;
        context[49] = refalrts::call_left( context[47], context[48], context[45], context[46] );
        context[50] = 0;
        context[51] = 0;
        context[52] = refalrts::brackets_left( context[50], context[51], context[47], context[48] );
        if( ! context[52] )
          continue;
        refalrts::bracket_pointers(context[52], context[53]);
        // closed e.NewVarNames as range 50
        // closed e.eOther as range 47
        //DEBUG: t.ContName: 13
        //DEBUG: e.ConditionName: 5
        //DEBUG: e.VarNames: 9
        //DEBUG: e.CheckFunction: 15
        //DEBUG: e.Context: 19
        //DEBUG: e.CondResult: 23
        //DEBUG: e.T0: 31
        //DEBUG: e.Templates: 2
        //DEBUG: e.NextForward: 37
        //DEBUG: e.NewFunctions: 42
        //DEBUG: e.NewVarNames: 50
        //DEBUG: e.eOther: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & OpenEChain/4 (/7 e.ConditionName/5 {REMOVED TILE} e.VarNames/9 )/12 t.ContName/13 (/17 e.CheckFunction/15 {REMOVED TILE} e.CondResult/23 {REMOVED TILE} {REMOVED TILE} e.Templates/2 </35 & OpenEChain$2?1/39 {REMOVED TILE} >/36 </40 & OpenEChain$2?2/44 {REMOVED TILE} {REMOVED TILE} e.NewVarNames/50 )/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: (/18 AsIs: (/21 AsIs: e.Context/19 HalfReuse: (/22 HalfReuse: # Var/25 } Tile{ AsIs: e.eOther/47 } Tile{ AsIs: )/26 HalfReuse: )/29 } Tile{ HalfReuse: (/41 HalfReuse: (/45 HalfReuse: # CallBrackets/49 AsIs: (/52 } Tile{ HalfReuse: # Symbol/46 HalfReuse: # Name/1 } Tile{ AsIs: e.NextForward/37 } Tile{ HalfReuse: )/33 AsIs: e.T0/31 AsIs: )/34 AsIs: )/30 } Tile{ AsIs: )/8 HalfReuse: )/11 } Tile{ AsIs: e.NewFunctions/42 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_open_bracket(context[22]);
        refalrts::reinit_ident(context[25], identifiers[ident_Var]);
        refalrts::reinit_close_bracket(context[29]);
        refalrts::reinit_open_bracket(context[41]);
        refalrts::reinit_open_bracket(context[45]);
        refalrts::reinit_ident(context[49], identifiers[ident_CallBrackets]);
        refalrts::reinit_ident(context[46], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[1], identifiers[ident_Name]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::reinit_close_bracket(context[11]);
        refalrts::link_brackets( context[0], context[11] );
        refalrts::link_brackets( context[18], context[8] );
        refalrts::link_brackets( context[41], context[30] );
        refalrts::link_brackets( context[45], context[34] );
        refalrts::link_brackets( context[52], context[33] );
        refalrts::link_brackets( context[21], context[29] );
        refalrts::link_brackets( context[22], context[26] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_evar( res, context[33], context[30] );
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[46], context[1] );
        res = refalrts::splice_evar( res, context[41], context[52] );
        res = refalrts::splice_evar( res, context[26], context[29] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[18], context[25] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[45], context[46]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[40], context[41]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[35], context[36]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_OpenEChain("OpenEChain", COOKIE1_, COOKIE2_, func_OpenEChain);


static refalrts::FnResult func_DoOpenEChain(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & DoOpenEChain/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoOpenEChain/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 t.new4/14 (/18 e.new5/16 )/19 (/22 e.new6/20 )/23 (/26 e.new7/24 )/27 (/30 e.new8/28 )/31 e.new9/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new3 as range 10
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  // closed e.new5 as range 16
  // closed e.new6 as range 20
  // closed e.new7 as range 24
  // closed e.new8 as range 28
  // closed e.new9 as range 2
  do {
    // </0 & DoOpenEChain/4 (/7 e.ConditionName/32 )/8 s.CurrentForwardId/9 (/12 e.CurrentForward/34 )/13 t.ContName/14 (/18 e.CheckFunction/36 )/19 (/22 e.CheckFunctionArg/38 )/23 (/26 e.GeneratedFunctions/40 )/27 (/30 e.TemplateSet/42 )/31 >/1
    context[32] = context[5];
    context[33] = context[6];
    context[34] = context[10];
    context[35] = context[11];
    context[36] = context[16];
    context[37] = context[17];
    context[38] = context[20];
    context[39] = context[21];
    context[40] = context[24];
    context[41] = context[25];
    context[42] = context[28];
    context[43] = context[29];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ConditionName as range 32
    // closed e.CurrentForward as range 34
    // closed e.CheckFunction as range 36
    // closed e.CheckFunctionArg as range 38
    // closed e.GeneratedFunctions as range 40
    // closed e.TemplateSet as range 42
    //DEBUG: t.ContName: 14
    //DEBUG: s.CurrentForwardId: 9
    //DEBUG: e.ConditionName: 32
    //DEBUG: e.CurrentForward: 34
    //DEBUG: e.CheckFunction: 36
    //DEBUG: e.CheckFunctionArg: 38
    //DEBUG: e.GeneratedFunctions: 40
    //DEBUG: e.TemplateSet: 42
    //9: s.CurrentForwardId
    //14: t.ContName
    //32: e.ConditionName
    //34: e.CurrentForward
    //36: e.CheckFunction
    //38: e.CheckFunctionArg
    //40: e.GeneratedFunctions
    //42: e.TemplateSet
    //50: e.ConditionName
    //53: s.CurrentForwardId
    //55: e.CurrentForward
    //58: t.ContName
    //60: e.CheckFunction
    //64: e.CheckFunctionArg
    //67: e.TemplateSet

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_DoOpenEChain_S1C1]);
    refalrts::alloc_open_call(vm, context[47]);
    refalrts::alloc_name(vm, context[48], functions[efunc_MakeOpenEm_ForwardNext]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::copy_evar(vm, context[50], context[51], context[32], context[33]);
    refalrts::alloc_close_bracket(vm, context[52]);
    refalrts::copy_stvar(vm, context[53], context[9]);
    refalrts::alloc_open_bracket(vm, context[54]);
    refalrts::copy_evar(vm, context[55], context[56], context[34], context[35]);
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::copy_stvar(vm, context[58], context[14]);
    refalrts::alloc_open_bracket(vm, context[59]);
    refalrts::copy_evar(vm, context[60], context[61], context[36], context[37]);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::copy_evar(vm, context[64], context[65], context[38], context[39]);
    refalrts::alloc_close_bracket(vm, context[66]);
    refalrts::copy_evar(vm, context[67], context[68], context[42], context[43]);
    refalrts::alloc_close_call(vm, context[69]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[44] );
    res = refalrts::splice_elem( res, context[45] );
    refalrts::push_stack( vm, context[69] );
    refalrts::push_stack( vm, context[47] );
    res = refalrts::splice_elem( res, context[69] );
    res = refalrts::splice_evar( res, context[67], context[68] );
    refalrts::link_brackets( context[63], context[66] );
    res = refalrts::splice_elem( res, context[66] );
    res = refalrts::splice_evar( res, context[64], context[65] );
    res = refalrts::splice_elem( res, context[63] );
    refalrts::link_brackets( context[59], context[62] );
    res = refalrts::splice_elem( res, context[62] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_elem( res, context[59] );
    res = refalrts::splice_stvar( res, context[58] );
    refalrts::link_brackets( context[54], context[57] );
    res = refalrts::splice_elem( res, context[57] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_elem( res, context[54] );
    res = refalrts::splice_stvar( res, context[53] );
    refalrts::link_brackets( context[49], context[52] );
    res = refalrts::splice_elem( res, context[52] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_elem( res, context[46] );
    res = refalrts::splice_elem( res, context[44] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </44 & DoOpenEChain$1?1/48 e.NewFunctions/46 >/45
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
      // closed e.NewFunctions as range 46
      //DEBUG: t.ContName: 14
      //DEBUG: s.CurrentForwardId: 9
      //DEBUG: e.ConditionName: 32
      //DEBUG: e.CurrentForward: 34
      //DEBUG: e.CheckFunction: 36
      //DEBUG: e.CheckFunctionArg: 38
      //DEBUG: e.GeneratedFunctions: 40
      //DEBUG: e.TemplateSet: 42
      //DEBUG: e.NewFunctions: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DoOpenEChain/4 (/7 e.ConditionName/32 )/8 s.CurrentForwardId/9 (/12 e.CurrentForward/34 )/13 t.ContName/14 (/18 e.CheckFunction/36 )/19 (/22 e.CheckFunctionArg/38 )/23 (/26 {REMOVED TILE} )/27 (/30 e.TemplateSet/42 )/31 </44 & DoOpenEChain$1?1/48 {REMOVED TILE} >/45 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.GeneratedFunctions/40 } Tile{ AsIs: e.NewFunctions/46 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[44], context[45]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOpenEChain/4 (/7 e.ConditionName/5 )/8 s.CurrentForwardId/9 (/12 e.CurrentForward/10 )/13 t.ContName/14 (/18 e.CheckFunction/16 )/19 (/22 e.CheckFunctionArg/20 )/23 (/26 e.GeneratedFunctions/24 )/27 (/30 e.TemplateSet/28 )/31 e.TemplateSets/2 >/1
  // closed e.ConditionName as range 5
  // closed e.CurrentForward as range 10
  // closed e.CheckFunction as range 16
  // closed e.CheckFunctionArg as range 20
  // closed e.GeneratedFunctions as range 24
  // closed e.TemplateSet as range 28
  // closed e.TemplateSets as range 2
  //DEBUG: t.ContName: 14
  //DEBUG: s.CurrentForwardId: 9
  //DEBUG: e.ConditionName: 5
  //DEBUG: e.CurrentForward: 10
  //DEBUG: e.CheckFunction: 16
  //DEBUG: e.CheckFunctionArg: 20
  //DEBUG: e.GeneratedFunctions: 24
  //DEBUG: e.TemplateSet: 28
  //DEBUG: e.TemplateSets: 2
  //2: e.TemplateSets
  //5: e.ConditionName
  //9: s.CurrentForwardId
  //10: e.CurrentForward
  //14: t.ContName
  //16: e.CheckFunction
  //20: e.CheckFunctionArg
  //24: e.GeneratedFunctions
  //28: e.TemplateSet
  //38: s.CurrentForwardId

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_name(vm, context[34], functions[efunc_gen_DoOpenEChain_S2C1]);
  refalrts::alloc_open_call(vm, context[35]);
  refalrts::alloc_name(vm, context[36], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[37], 2UL);
  refalrts::copy_stvar(vm, context[38], context[9]);
  refalrts::alloc_close_call(vm, context[39]);
  refalrts::alloc_close_call(vm, context[33]);
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[32] );
  res = refalrts::splice_elem( res, context[33] );
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[35] );
  res = refalrts::splice_elem( res, context[39] );
  res = refalrts::splice_stvar( res, context[38] );
  res = refalrts::splice_elem( res, context[37] );
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_elem( res, context[35] );
  res = refalrts::splice_elem( res, context[34] );
  res = refalrts::splice_elem( res, context[32] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </32 & DoOpenEChain$2?1/36 s.NextForwardId/37 >/33
    context[34] = 0;
    context[35] = 0;
    context[36] = refalrts::call_left( context[34], context[35], context[32], context[33] );
    if( ! refalrts::svar_left( context[37], context[34], context[35] ) )
      continue;
    if( ! refalrts::empty_seq( context[34], context[35] ) )
      continue;
    //DEBUG: t.ContName: 14
    //DEBUG: s.CurrentForwardId: 9
    //DEBUG: e.ConditionName: 5
    //DEBUG: e.CurrentForward: 10
    //DEBUG: e.CheckFunction: 16
    //DEBUG: e.CheckFunctionArg: 20
    //DEBUG: e.GeneratedFunctions: 24
    //DEBUG: e.TemplateSet: 28
    //DEBUG: e.TemplateSets: 2
    //DEBUG: s.NextForwardId: 37
    //2: e.TemplateSets
    //5: e.ConditionName
    //9: s.CurrentForwardId
    //10: e.CurrentForward
    //14: t.ContName
    //16: e.CheckFunction
    //20: e.CheckFunctionArg
    //24: e.GeneratedFunctions
    //28: e.TemplateSet
    //37: s.NextForwardId
    //41: e.ConditionName
    //44: s.NextForwardId

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_DoOpenEChain_S2C2]);
    refalrts::copy_evar(vm, context[41], context[42], context[5], context[6]);
    refalrts::alloc_char(vm, context[43], '?');
    refalrts::copy_stvar(vm, context[44], context[37]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[38] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_stvar( res, context[44] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_elem( res, context[38] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </38 & DoOpenEChain$2?2/42 e.NextForward/40 >/39
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::call_left( context[40], context[41], context[38], context[39] );
      // closed e.NextForward as range 40
      //DEBUG: t.ContName: 14
      //DEBUG: s.CurrentForwardId: 9
      //DEBUG: e.ConditionName: 5
      //DEBUG: e.CurrentForward: 10
      //DEBUG: e.CheckFunction: 16
      //DEBUG: e.CheckFunctionArg: 20
      //DEBUG: e.GeneratedFunctions: 24
      //DEBUG: e.TemplateSet: 28
      //DEBUG: e.TemplateSets: 2
      //DEBUG: s.NextForwardId: 37
      //DEBUG: e.NextForward: 40
      //2: e.TemplateSets
      //5: e.ConditionName
      //9: s.CurrentForwardId
      //10: e.CurrentForward
      //14: t.ContName
      //16: e.CheckFunction
      //20: e.CheckFunctionArg
      //24: e.GeneratedFunctions
      //28: e.TemplateSet
      //37: s.NextForwardId
      //40: e.NextForward
      //49: e.ConditionName
      //52: s.CurrentForwardId
      //54: e.CurrentForward
      //58: e.NextForward
      //62: e.CheckFunction
      //66: e.CheckFunctionArg
      //69: e.TemplateSet

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::alloc_name(vm, context[45], functions[efunc_gen_DoOpenEChain_S2C3]);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_MakeOpenEm_ForwardNext]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_evar(vm, context[49], context[50], context[5], context[6]);
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::copy_stvar(vm, context[52], context[9]);
      refalrts::alloc_open_bracket(vm, context[53]);
      refalrts::copy_evar(vm, context[54], context[55], context[10], context[11]);
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::copy_evar(vm, context[58], context[59], context[40], context[41]);
      refalrts::alloc_close_bracket(vm, context[60]);
      refalrts::alloc_open_bracket(vm, context[61]);
      refalrts::copy_evar(vm, context[62], context[63], context[16], context[17]);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::copy_evar(vm, context[66], context[67], context[20], context[21]);
      refalrts::alloc_close_bracket(vm, context[68]);
      refalrts::copy_evar(vm, context[69], context[70], context[28], context[29]);
      refalrts::alloc_close_call(vm, context[71]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[43] );
      res = refalrts::splice_elem( res, context[44] );
      refalrts::push_stack( vm, context[71] );
      refalrts::push_stack( vm, context[46] );
      res = refalrts::splice_elem( res, context[71] );
      res = refalrts::splice_evar( res, context[69], context[70] );
      refalrts::link_brackets( context[65], context[68] );
      res = refalrts::splice_elem( res, context[68] );
      res = refalrts::splice_evar( res, context[66], context[67] );
      res = refalrts::splice_elem( res, context[65] );
      refalrts::link_brackets( context[61], context[64] );
      res = refalrts::splice_elem( res, context[64] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      res = refalrts::splice_elem( res, context[61] );
      refalrts::link_brackets( context[57], context[60] );
      res = refalrts::splice_elem( res, context[60] );
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_elem( res, context[57] );
      refalrts::link_brackets( context[53], context[56] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_stvar( res, context[52] );
      refalrts::link_brackets( context[48], context[51] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </43 & DoOpenEChain$2?3/47 e.NewFunctions/45 >/44
        context[45] = 0;
        context[46] = 0;
        context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
        // closed e.NewFunctions as range 45
        //DEBUG: t.ContName: 14
        //DEBUG: s.CurrentForwardId: 9
        //DEBUG: e.ConditionName: 5
        //DEBUG: e.CurrentForward: 10
        //DEBUG: e.CheckFunction: 16
        //DEBUG: e.CheckFunctionArg: 20
        //DEBUG: e.GeneratedFunctions: 24
        //DEBUG: e.TemplateSet: 28
        //DEBUG: e.TemplateSets: 2
        //DEBUG: s.NextForwardId: 37
        //DEBUG: e.NextForward: 40
        //DEBUG: e.NewFunctions: 45

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.CurrentForwardId/9 (/12 e.CurrentForward/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.TemplateSet/28 {REMOVED TILE} & DoOpenEChain$2?1/36 s.NextForwardId/37 >/33 </38 & DoOpenEChain$2?2/42 {REMOVED TILE} >/39 </43 & DoOpenEChain$2?3/47 {REMOVED TILE} >/44 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoOpenEChain/4 AsIs: (/7 AsIs: e.ConditionName/5 AsIs: )/8 } Tile{ HalfReuse: s.NextForwardId37 /27 AsIs: (/30 } Tile{ AsIs: e.NextForward/40 } Tile{ AsIs: )/13 AsIs: t.ContName/14 AsIs: (/18 AsIs: e.CheckFunction/16 AsIs: )/19 AsIs: (/22 AsIs: e.CheckFunctionArg/20 AsIs: )/23 AsIs: (/26 } Tile{ AsIs: e.GeneratedFunctions/24 } Tile{ AsIs: e.NewFunctions/45 } Tile{ AsIs: )/31 AsIs: e.TemplateSets/2 HalfReuse: >/32 } Tile{ ]] }
        refalrts::reinit_svar( context[27], context[37] );
        refalrts::reinit_close_call(context[32]);
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[26], context[31] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::link_brackets( context[18], context[19] );
        refalrts::link_brackets( context[30], context[13] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[13], context[26] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[27], context[30] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[43], context[44]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[38], context[39]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[32], context[33]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_DoOpenEChain("DoOpenEChain", COOKIE1_, COOKIE2_, func_DoOpenEChain);


static refalrts::FnResult func_MakeOpenEm_ForwardNext(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 108 elems
  refalrts::Iter context[108];
  refalrts::zeros( context, 108 );
  // </0 & MakeOpenE-ForwardNext/4 (/7 e.ConditionName/5 )/8 s.CurrentForwardId/57 (/55 e.CurrentForwardName/53 )/56 (/51 e.ContName/49 )/52 (/47 e.CheckFunction/45 )/48 (/43 e.CheckFunctionArg/41 )/44 (/39 e.T1/37 )/40 (/35 e.T2/33 )/36 (/31 e.T3/29 )/32 (/27 e.T4/25 )/28 (/23 e.T5/21 )/24 (/19 e.T5-sub/17 )/20 (/15 e.T6/13 )/16 (/11 e.T7/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_right( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_right( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  context[37] = 0;
  context[38] = 0;
  context[39] = refalrts::brackets_right( context[37], context[38], context[2], context[3] );
  if( ! context[39] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[39], context[40]);
  context[41] = 0;
  context[42] = 0;
  context[43] = refalrts::brackets_right( context[41], context[42], context[2], context[3] );
  if( ! context[43] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[43], context[44]);
  context[45] = 0;
  context[46] = 0;
  context[47] = refalrts::brackets_right( context[45], context[46], context[2], context[3] );
  if( ! context[47] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[47], context[48]);
  context[49] = 0;
  context[50] = 0;
  context[51] = refalrts::brackets_right( context[49], context[50], context[2], context[3] );
  if( ! context[51] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[51], context[52]);
  context[53] = 0;
  context[54] = 0;
  context[55] = refalrts::brackets_right( context[53], context[54], context[2], context[3] );
  if( ! context[55] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[55], context[56]);
  // closed e.ConditionName as range 5
  // closed e.CurrentForwardName as range 53
  // closed e.ContName as range 49
  // closed e.CheckFunction as range 45
  // closed e.CheckFunctionArg as range 41
  // closed e.T1 as range 37
  // closed e.T2 as range 33
  // closed e.T3 as range 29
  // closed e.T4 as range 25
  // closed e.T5 as range 21
  // closed e.T5-sub as range 17
  // closed e.T6 as range 13
  // closed e.T7 as range 9
  if( ! refalrts::svar_left( context[57], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.ConditionName: 5
  //DEBUG: e.CurrentForwardName: 53
  //DEBUG: e.ContName: 49
  //DEBUG: e.CheckFunction: 45
  //DEBUG: e.CheckFunctionArg: 41
  //DEBUG: e.T1: 37
  //DEBUG: e.T2: 33
  //DEBUG: e.T3: 29
  //DEBUG: e.T4: 25
  //DEBUG: e.T5: 21
  //DEBUG: e.T5-sub: 17
  //DEBUG: e.T6: 13
  //DEBUG: e.T7: 9
  //DEBUG: s.CurrentForwardId: 57
  //5: e.ConditionName
  //9: e.T7
  //13: e.T6
  //17: e.T5-sub
  //21: e.T5
  //25: e.T4
  //29: e.T3
  //33: e.T2
  //37: e.T1
  //41: e.CheckFunctionArg
  //45: e.CheckFunction
  //49: e.ContName
  //53: e.CurrentForwardName
  //57: s.CurrentForwardId
  //61: e.ConditionName
  //67: s.CurrentForwardId

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[58]);
  refalrts::alloc_name(vm, context[60], functions[efunc_gen_MakeOpenEm_ForwardNext_C1]);
  refalrts::copy_evar(vm, context[61], context[62], context[5], context[6]);
  refalrts::alloc_char(vm, context[63], '?');
  refalrts::alloc_open_call(vm, context[64]);
  refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[66], 1UL);
  refalrts::copy_stvar(vm, context[67], context[57]);
  refalrts::alloc_close_call(vm, context[68]);
  refalrts::alloc_close_call(vm, context[59]);
  refalrts::push_stack( vm, context[59] );
  refalrts::push_stack( vm, context[58] );
  res = refalrts::splice_elem( res, context[59] );
  refalrts::push_stack( vm, context[68] );
  refalrts::push_stack( vm, context[64] );
  res = refalrts::splice_elem( res, context[68] );
  res = refalrts::splice_stvar( res, context[67] );
  res = refalrts::splice_elem( res, context[66] );
  res = refalrts::splice_elem( res, context[65] );
  res = refalrts::splice_elem( res, context[64] );
  res = refalrts::splice_elem( res, context[63] );
  res = refalrts::splice_evar( res, context[61], context[62] );
  res = refalrts::splice_elem( res, context[60] );
  res = refalrts::splice_elem( res, context[58] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </58 & MakeOpenE-ForwardNext?1/62 e.NextName/60 >/59
    context[60] = 0;
    context[61] = 0;
    context[62] = refalrts::call_left( context[60], context[61], context[58], context[59] );
    // closed e.NextName as range 60
    //DEBUG: e.ConditionName: 5
    //DEBUG: e.CurrentForwardName: 53
    //DEBUG: e.ContName: 49
    //DEBUG: e.CheckFunction: 45
    //DEBUG: e.CheckFunctionArg: 41
    //DEBUG: e.T1: 37
    //DEBUG: e.T2: 33
    //DEBUG: e.T3: 29
    //DEBUG: e.T4: 25
    //DEBUG: e.T5: 21
    //DEBUG: e.T5-sub: 17
    //DEBUG: e.T6: 13
    //DEBUG: e.T7: 9
    //DEBUG: s.CurrentForwardId: 57
    //DEBUG: e.NextName: 60
    //5: e.ConditionName
    //9: e.T7
    //13: e.T6
    //17: e.T5-sub
    //21: e.T5
    //25: e.T4
    //29: e.T3
    //33: e.T2
    //37: e.T1
    //41: e.CheckFunctionArg
    //45: e.CheckFunction
    //49: e.ContName
    //53: e.CurrentForwardName
    //57: s.CurrentForwardId
    //60: e.NextName
    //68: e.CheckFunctionArg
    //71: e.T5-sub

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[63]);
    refalrts::alloc_name(vm, context[65], functions[efunc_gen_MakeOpenEm_ForwardNext_C2]);
    refalrts::alloc_open_call(vm, context[66]);
    refalrts::alloc_name(vm, context[67], functions[efunc_Substitute]);
    refalrts::copy_evar(vm, context[68], context[69], context[41], context[42]);
    refalrts::alloc_open_bracket(vm, context[70]);
    refalrts::copy_evar(vm, context[71], context[72], context[17], context[18]);
    refalrts::alloc_close_bracket(vm, context[73]);
    refalrts::alloc_close_call(vm, context[74]);
    refalrts::alloc_close_call(vm, context[64]);
    refalrts::push_stack( vm, context[64] );
    refalrts::push_stack( vm, context[63] );
    res = refalrts::splice_elem( res, context[64] );
    refalrts::push_stack( vm, context[74] );
    refalrts::push_stack( vm, context[66] );
    res = refalrts::splice_elem( res, context[74] );
    refalrts::link_brackets( context[70], context[73] );
    res = refalrts::splice_elem( res, context[73] );
    res = refalrts::splice_evar( res, context[71], context[72] );
    res = refalrts::splice_elem( res, context[70] );
    res = refalrts::splice_evar( res, context[68], context[69] );
    res = refalrts::splice_elem( res, context[67] );
    res = refalrts::splice_elem( res, context[66] );
    res = refalrts::splice_elem( res, context[65] );
    res = refalrts::splice_elem( res, context[63] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </63 & MakeOpenE-ForwardNext?2/67 e.CheckFuncArgSubst/65 >/64
      context[65] = 0;
      context[66] = 0;
      context[67] = refalrts::call_left( context[65], context[66], context[63], context[64] );
      // closed e.CheckFuncArgSubst as range 65
      //DEBUG: e.ConditionName: 5
      //DEBUG: e.CurrentForwardName: 53
      //DEBUG: e.ContName: 49
      //DEBUG: e.CheckFunction: 45
      //DEBUG: e.CheckFunctionArg: 41
      //DEBUG: e.T1: 37
      //DEBUG: e.T2: 33
      //DEBUG: e.T3: 29
      //DEBUG: e.T4: 25
      //DEBUG: e.T5: 21
      //DEBUG: e.T5-sub: 17
      //DEBUG: e.T6: 13
      //DEBUG: e.T7: 9
      //DEBUG: s.CurrentForwardId: 57
      //DEBUG: e.NextName: 60
      //DEBUG: e.CheckFuncArgSubst: 65

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.ConditionName/5 {REMOVED TILE} s.CurrentForwardId/57 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.CheckFunctionArg/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.T5-sub/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Function/4 HalfReuse: # GN-Local/7 } Tile{ AsIs: (/55 AsIs: e.CurrentForwardName/53 AsIs: )/56 HalfReuse: # Sentences/51 } Tile{ HalfReuse: (/44 AsIs: (/39 AsIs: e.T1/37 AsIs: )/40 AsIs: (/35 } (/68 # CallBrackets/69 Tile{ AsIs: (/43 } # Symbol/70 # Name/71 e.NextName/60/72 Tile{ AsIs: )/8 } Tile{ AsIs: e.T2/33 } )/74 )/75 )/76 Tile{ HalfReuse: (/36 AsIs: (/31 AsIs: e.T3/29 AsIs: )/32 AsIs: (/27 } Tile{ HalfReuse: (/67 } # CallBrackets/77 (/78 # Symbol/79 # Name/80 Tile{ AsIs: e.ContName/49 } )/81 Tile{ AsIs: e.T4/25 } )/82 )/83 )/84 )/85 (/86 # Drive/87 e.CurrentForwardName/53/88 )/90 (/91 Tile{ HalfReuse: # Function/12 HalfReuse: # GN-Local/58 HalfReuse: (/62 AsIs: e.NextName/60 HalfReuse: )/59 HalfReuse: # Sentences/63 } Tile{ HalfReuse: (/28 AsIs: (/23 AsIs: e.T5/21 AsIs: )/24 AsIs: (/19 } (/92 # CallBrackets/93 (/94 Tile{ HalfReuse: # Symbol/52 HalfReuse: # Name/47 AsIs: e.CheckFunction/45 AsIs: )/48 } Tile{ AsIs: e.CheckFuncArgSubst/65 } )/95 )/96 )/97 Tile{ HalfReuse: (/20 AsIs: (/15 AsIs: e.T6/13 AsIs: )/16 AsIs: (/11 } (/98 # CallBrackets/99 (/100 # Symbol/101 # Name/102 e.ContName/49/103 )/105 Tile{ AsIs: e.T7/9 } )/106 )/107 Tile{ HalfReuse: )/64 HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[68]);
      refalrts::alloc_ident(vm, context[69], identifiers[ident_CallBrackets]);
      refalrts::alloc_ident(vm, context[70], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[71], identifiers[ident_Name]);
      refalrts::copy_evar(vm, context[72], context[73], context[60], context[61]);
      refalrts::alloc_close_bracket(vm, context[74]);
      refalrts::alloc_close_bracket(vm, context[75]);
      refalrts::alloc_close_bracket(vm, context[76]);
      refalrts::alloc_ident(vm, context[77], identifiers[ident_CallBrackets]);
      refalrts::alloc_open_bracket(vm, context[78]);
      refalrts::alloc_ident(vm, context[79], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[80], identifiers[ident_Name]);
      refalrts::alloc_close_bracket(vm, context[81]);
      refalrts::alloc_close_bracket(vm, context[82]);
      refalrts::alloc_close_bracket(vm, context[83]);
      refalrts::alloc_close_bracket(vm, context[84]);
      refalrts::alloc_close_bracket(vm, context[85]);
      refalrts::alloc_open_bracket(vm, context[86]);
      refalrts::alloc_ident(vm, context[87], identifiers[ident_Drive]);
      refalrts::copy_evar(vm, context[88], context[89], context[53], context[54]);
      refalrts::alloc_close_bracket(vm, context[90]);
      refalrts::alloc_open_bracket(vm, context[91]);
      refalrts::alloc_open_bracket(vm, context[92]);
      refalrts::alloc_ident(vm, context[93], identifiers[ident_CallBrackets]);
      refalrts::alloc_open_bracket(vm, context[94]);
      refalrts::alloc_close_bracket(vm, context[95]);
      refalrts::alloc_close_bracket(vm, context[96]);
      refalrts::alloc_close_bracket(vm, context[97]);
      refalrts::alloc_open_bracket(vm, context[98]);
      refalrts::alloc_ident(vm, context[99], identifiers[ident_CallBrackets]);
      refalrts::alloc_open_bracket(vm, context[100]);
      refalrts::alloc_ident(vm, context[101], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[102], identifiers[ident_Name]);
      refalrts::copy_evar(vm, context[103], context[104], context[49], context[50]);
      refalrts::alloc_close_bracket(vm, context[105]);
      refalrts::alloc_close_bracket(vm, context[106]);
      refalrts::alloc_close_bracket(vm, context[107]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Function]);
      refalrts::reinit_ident(context[7], identifiers[ident_GNm_Local]);
      refalrts::reinit_ident(context[51], identifiers[ident_Sentences]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_open_bracket(context[36]);
      refalrts::reinit_open_bracket(context[67]);
      refalrts::reinit_ident(context[12], identifiers[ident_Function]);
      refalrts::reinit_ident(context[58], identifiers[ident_GNm_Local]);
      refalrts::reinit_open_bracket(context[62]);
      refalrts::reinit_close_bracket(context[59]);
      refalrts::reinit_ident(context[63], identifiers[ident_Sentences]);
      refalrts::reinit_open_bracket(context[28]);
      refalrts::reinit_ident(context[52], identifiers[ident_Symbol]);
      refalrts::reinit_ident(context[47], identifiers[ident_Name]);
      refalrts::reinit_open_bracket(context[20]);
      refalrts::reinit_close_bracket(context[64]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[91], context[1] );
      refalrts::link_brackets( context[20], context[64] );
      refalrts::link_brackets( context[11], context[107] );
      refalrts::link_brackets( context[98], context[106] );
      refalrts::link_brackets( context[100], context[105] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[28], context[97] );
      refalrts::link_brackets( context[19], context[96] );
      refalrts::link_brackets( context[92], context[95] );
      refalrts::link_brackets( context[94], context[48] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[62], context[59] );
      refalrts::link_brackets( context[86], context[90] );
      refalrts::link_brackets( context[0], context[85] );
      refalrts::link_brackets( context[36], context[84] );
      refalrts::link_brackets( context[27], context[83] );
      refalrts::link_brackets( context[67], context[82] );
      refalrts::link_brackets( context[78], context[81] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[44], context[76] );
      refalrts::link_brackets( context[35], context[75] );
      refalrts::link_brackets( context[68], context[74] );
      refalrts::link_brackets( context[43], context[8] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[55], context[56] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[64];
      res = refalrts::splice_evar( res, context[106], context[107] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[98], context[105] );
      res = refalrts::splice_evar( res, context[20], context[11] );
      res = refalrts::splice_evar( res, context[95], context[97] );
      res = refalrts::splice_evar( res, context[65], context[66] );
      res = refalrts::splice_evar( res, context[52], context[48] );
      res = refalrts::splice_evar( res, context[92], context[94] );
      res = refalrts::splice_evar( res, context[28], context[19] );
      res = refalrts::splice_evar( res, context[12], context[63] );
      res = refalrts::splice_evar( res, context[82], context[91] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[81] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[77], context[80] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_evar( res, context[36], context[27] );
      res = refalrts::splice_evar( res, context[74], context[76] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[72], context[73] );
      res = refalrts::splice_evar( res, context[70], context[71] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_evar( res, context[44], context[35] );
      res = refalrts::splice_evar( res, context[55], context[51] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[63], context[64]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[58], context[59]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_MakeOpenEm_ForwardNext("MakeOpenE-ForwardNext", COOKIE1_, COOKIE2_, func_MakeOpenEm_ForwardNext);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & Map@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map@1/4 s.new3/5 t.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & Map@1/4 s.MarkupContext/5 (/8 # Function/14 s.Scope/15 (/18 e.3/16 )/19 # Sentences/20 e.4/12 )/9 e.Tail/10 >/1
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
        continue;
      context[14] = refalrts::ident_left( identifiers[ident_Function], context[12], context[13] );
      if( ! context[14] )
        continue;
      // closed e.Tail as range 10
      if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
        continue;
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::brackets_left( context[16], context[17], context[12], context[13] );
      if( ! context[18] )
        continue;
      refalrts::bracket_pointers(context[18], context[19]);
      context[20] = refalrts::ident_left( identifiers[ident_Sentences], context[12], context[13] );
      if( ! context[20] )
        continue;
      // closed e.3 as range 16
      // closed e.4 as range 12
      //DEBUG: s.MarkupContext: 5
      //DEBUG: e.Tail: 10
      //DEBUG: s.Scope: 15
      //DEBUG: e.3: 16
      //DEBUG: e.4: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & UnCondition-Unit$1=4/14 AsIs: s.Scope/15 AsIs: (/18 AsIs: e.3/16 AsIs: )/19 HalfReuse: s.MarkupContext5 /20 } </21 & DoMapAccum@1/22 (/23 e.3/16/24 )/26 Tile{ AsIs: s.MarkupContext/5 } (/27 1/28 (/29 )/30 )/31 (/32 )/33 Tile{ AsIs: e.4/12 } >/34 >/35 Tile{ AsIs: </0 AsIs: & Map@1/4 } Tile{ HalfReuse: s.MarkupContext5 /9 AsIs: e.Tail/10 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_DoMapAccum_Z1]);
      refalrts::alloc_open_bracket(vm, context[23]);
      refalrts::copy_evar(vm, context[24], context[25], context[16], context[17]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_number(vm, context[28], 1UL);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[14], functions[efunc_gen_UnConditionm_Unit_S1A4]);
      refalrts::reinit_svar( context[20], context[5] );
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[32], context[33] );
      refalrts::link_brackets( context[27], context[31] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[23], context[26] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[27], context[33] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[21], context[26] );
      res = refalrts::splice_evar( res, context[8], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 s.MarkupContext/5 t.Next/8 e.Tail/10 >/1
    context[10] = context[6];
    context[11] = context[7];
    // closed e.Tail as range 10
    //DEBUG: t.Next: 8
    //DEBUG: s.MarkupContext: 5
    //DEBUG: e.Tail: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/8 } Tile{ AsIs: </0 AsIs: & Map@1/4 AsIs: s.MarkupContext/5 } Tile{ AsIs: e.Tail/10 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 s.MarkupContext/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.MarkupContext: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 s.MarkupContext/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 s.MarkupContext/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: s.MarkupContext: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } (/6 & UnCondition-Unit@0/7 Tile{ AsIs: s.MarkupContext/5 } )/8 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_UnConditionm_Unit_Z0]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[6], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 (/7 e.new1/5 )/8 s.new2/9 t.new3/10 (/14 e.new4/12 )/15 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new4 as range 12
  // closed e.new5 as range 2
  do {
    // </0 & DoMapAccum@1/4 (/7 e.Name/16 )/8 s.MarkupContext/9 t.Acc/10 (/14 e.Scanned/18 )/15 t.Next/22 e.Tail/20 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.Name as range 16
    // closed e.Scanned as range 18
    context[23] = refalrts::tvar_left( context[22], context[20], context[21] );
    if( ! context[23] )
      continue;
    // closed e.Tail as range 20
    //DEBUG: t.Acc: 10
    //DEBUG: s.MarkupContext: 9
    //DEBUG: e.Name: 16
    //DEBUG: e.Scanned: 18
    //DEBUG: t.Next: 22
    //DEBUG: e.Tail: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 AsIs: (/7 AsIs: e.Name/16 AsIs: )/8 AsIs: s.MarkupContext/9 } Tile{ AsIs: (/14 AsIs: e.Scanned/18 AsIs: )/15 } (/24 Tile{ AsIs: e.Tail/20 } )/25 </26 & UnCondition-Unit-Sentence/27 e.Name/16/28 s.MarkupContext/9/30 Tile{ AsIs: t.Acc/10 } Tile{ AsIs: t.Next/22 } >/31 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_UnConditionm_Unitm_Sentence]);
    refalrts::copy_evar(vm, context[28], context[29], context[16], context[17]);
    refalrts::copy_stvar(vm, context[30], context[9]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[25], context[30] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 (/7 e.Name/16 )/8 s.MarkupContext/9 t.Acc/10 (/14 e.Scanned/18 )/15 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[12];
    context[19] = context[13];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Name as range 16
    // closed e.Scanned as range 18
    //DEBUG: t.Acc: 10
    //DEBUG: s.MarkupContext: 9
    //DEBUG: e.Name: 16
    //DEBUG: e.Scanned: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 (/7 e.Name/16 )/8 s.MarkupContext/9 {REMOVED TILE} (/14 {REMOVED TILE} )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/10 } Tile{ AsIs: e.Scanned/18 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 (/7 e.Name/5 )/8 s.MarkupContext/9 t.acc/10 (/14 e.scanned/12 )/15 e.items/2 >/1
  // closed e.Name as range 5
  // closed e.scanned as range 12
  // closed e.items as range 2
  //DEBUG: t.acc: 10
  //DEBUG: s.MarkupContext: 9
  //DEBUG: e.Name: 5
  //DEBUG: e.scanned: 12
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 AsIs: (/7 } & UnCondition-Unit-Sentence@0/16 Tile{ AsIs: e.Name/5 } Tile{ AsIs: s.MarkupContext/9 } Tile{ AsIs: )/8 } Tile{ AsIs: t.acc/10 AsIs: (/14 AsIs: e.scanned/12 AsIs: )/15 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_UnConditionm_Unitm_Sentence_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_UnConditionm_Sentence_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 93 elems
  refalrts::Iter context[93];
  refalrts::zeros( context, 93 );
  // </0 & UnCondition-Sentence@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UnCondition-Sentence@1/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & UnCondition-Sentence@1/4 s.MarkupContext0/5 (/8 e.RemName/10 )/9 e.Sentence0/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.RemName as range 10
    // closed e.Sentence0 as range 12
    //DEBUG: s.MarkupContext0: 5
    //DEBUG: e.RemName: 10
    //DEBUG: e.Sentence0: 12
    //5: s.MarkupContext0
    //10: e.RemName
    //12: e.Sentence0
    //17: e.Sentence0

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_UnConditionm_Sentence_Z1C1]);
    refalrts::copy_evar(vm, context[17], context[18], context[12], context[13]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[14] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </14 & UnCondition-Sentence@1?1/18 (/21 e.Pattern/19 )/22 (/25 # Condition/27 (/30 e.ConditionName/28 )/31 (/34 e.CondResult/32 )/35 (/38 e.CondPattern/36 )/39 )/26 e.SentenceTail/16 >/15
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[16], context[17] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[16], context[17] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_Condition], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::brackets_left( context[32], context[33], context[23], context[24] );
      if( ! context[34] )
        continue;
      refalrts::bracket_pointers(context[34], context[35]);
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[23], context[24] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Pattern as range 19
      // closed e.ConditionName as range 28
      // closed e.CondResult as range 32
      // closed e.CondPattern as range 36
      // closed e.SentenceTail as range 16
      //DEBUG: s.MarkupContext0: 5
      //DEBUG: e.RemName: 10
      //DEBUG: e.Sentence0: 12
      //DEBUG: e.Pattern: 19
      //DEBUG: e.ConditionName: 28
      //DEBUG: e.CondResult: 32
      //DEBUG: e.CondPattern: 36
      //DEBUG: e.SentenceTail: 16
      //5: s.MarkupContext0
      //10: e.RemName
      //12: e.Sentence0
      //16: e.SentenceTail
      //19: e.Pattern
      //28: e.ConditionName
      //32: e.CondResult
      //36: e.CondPattern
      //43: e.ConditionName

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[42], functions[efunc_gen_UnConditionm_Sentence_Z1C2]);
      refalrts::copy_evar(vm, context[43], context[44], context[28], context[29]);
      refalrts::alloc_char(vm, context[45], '?');
      refalrts::alloc_number(vm, context[46], 0UL);
      refalrts::alloc_close_call(vm, context[41]);
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[40] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[40] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </40 & UnCondition-Sentence@1?2/44 e.CheckFunction/42 >/41
        context[42] = 0;
        context[43] = 0;
        context[44] = refalrts::call_left( context[42], context[43], context[40], context[41] );
        // closed e.CheckFunction as range 42
        //DEBUG: s.MarkupContext0: 5
        //DEBUG: e.RemName: 10
        //DEBUG: e.Sentence0: 12
        //DEBUG: e.Pattern: 19
        //DEBUG: e.ConditionName: 28
        //DEBUG: e.CondResult: 32
        //DEBUG: e.CondPattern: 36
        //DEBUG: e.SentenceTail: 16
        //DEBUG: e.CheckFunction: 42
        //5: s.MarkupContext0
        //10: e.RemName
        //12: e.Sentence0
        //16: e.SentenceTail
        //19: e.Pattern
        //28: e.ConditionName
        //32: e.CondResult
        //36: e.CondPattern
        //42: e.CheckFunction
        //51: e.Sentence0

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[47], functions[efunc_gen_UnConditionm_Sentence_Z1C3]);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_name(vm, context[49], functions[efunc_ExtractVariables]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::copy_evar(vm, context[51], context[52], context[12], context[13]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[46]);
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[45] );
        res = refalrts::splice_elem( res, context[46] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[48] );
        res = refalrts::splice_elem( res, context[54] );
        refalrts::link_brackets( context[50], context[53] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_elem( res, context[50] );
        res = refalrts::splice_elem( res, context[49] );
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_elem( res, context[45] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </45 & UnCondition-Sentence@1?3/49 e.SentenceVariables/47 >/46
          context[47] = 0;
          context[48] = 0;
          context[49] = refalrts::call_left( context[47], context[48], context[45], context[46] );
          // closed e.SentenceVariables as range 47
          //DEBUG: s.MarkupContext0: 5
          //DEBUG: e.RemName: 10
          //DEBUG: e.Sentence0: 12
          //DEBUG: e.Pattern: 19
          //DEBUG: e.ConditionName: 28
          //DEBUG: e.CondResult: 32
          //DEBUG: e.CondPattern: 36
          //DEBUG: e.SentenceTail: 16
          //DEBUG: e.CheckFunction: 42
          //DEBUG: e.SentenceVariables: 47
          //5: s.MarkupContext0
          //10: e.RemName
          //12: e.Sentence0
          //16: e.SentenceTail
          //19: e.Pattern
          //28: e.ConditionName
          //32: e.CondResult
          //36: e.CondPattern
          //42: e.CheckFunction
          //47: e.SentenceVariables
          //55: s.MarkupContext0
          //56: e.Pattern

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[50]);
          refalrts::alloc_name(vm, context[52], functions[efunc_gen_UnConditionm_Sentence_Z1C4]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_ConditionContext]);
          refalrts::copy_stvar(vm, context[55], context[5]);
          refalrts::copy_evar(vm, context[56], context[57], context[19], context[20]);
          refalrts::alloc_close_call(vm, context[58]);
          refalrts::alloc_close_call(vm, context[51]);
          refalrts::push_stack( vm, context[51] );
          refalrts::push_stack( vm, context[50] );
          res = refalrts::splice_elem( res, context[51] );
          refalrts::push_stack( vm, context[58] );
          refalrts::push_stack( vm, context[53] );
          res = refalrts::splice_elem( res, context[58] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          res = refalrts::splice_stvar( res, context[55] );
          res = refalrts::splice_elem( res, context[54] );
          res = refalrts::splice_elem( res, context[53] );
          res = refalrts::splice_elem( res, context[52] );
          res = refalrts::splice_elem( res, context[50] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </50 & UnCondition-Sentence@1?4/54 e.Context/52 >/51
            context[52] = 0;
            context[53] = 0;
            context[54] = refalrts::call_left( context[52], context[53], context[50], context[51] );
            // closed e.Context as range 52
            //DEBUG: s.MarkupContext0: 5
            //DEBUG: e.RemName: 10
            //DEBUG: e.Sentence0: 12
            //DEBUG: e.Pattern: 19
            //DEBUG: e.ConditionName: 28
            //DEBUG: e.CondResult: 32
            //DEBUG: e.CondPattern: 36
            //DEBUG: e.SentenceTail: 16
            //DEBUG: e.CheckFunction: 42
            //DEBUG: e.SentenceVariables: 47
            //DEBUG: e.Context: 52
            //5: s.MarkupContext0
            //10: e.RemName
            //12: e.Sentence0
            //16: e.SentenceTail
            //19: e.Pattern
            //28: e.ConditionName
            //32: e.CondResult
            //36: e.CondPattern
            //42: e.CheckFunction
            //47: e.SentenceVariables
            //52: e.Context
            //61: e.SentenceVariables
            //64: e.Pattern

            refalrts::reset_allocator(vm);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::alloc_open_call(vm, context[55]);
            refalrts::alloc_name(vm, context[57], functions[efunc_gen_UnConditionm_Sentence_Z1C5]);
            refalrts::alloc_open_call(vm, context[58]);
            refalrts::alloc_name(vm, context[59], functions[efunc_PatternSteps]);
            refalrts::alloc_open_bracket(vm, context[60]);
            refalrts::copy_evar(vm, context[61], context[62], context[47], context[48]);
            refalrts::alloc_close_bracket(vm, context[63]);
            refalrts::copy_evar(vm, context[64], context[65], context[19], context[20]);
            refalrts::alloc_close_call(vm, context[66]);
            refalrts::alloc_close_call(vm, context[56]);
            refalrts::push_stack( vm, context[56] );
            refalrts::push_stack( vm, context[55] );
            res = refalrts::splice_elem( res, context[56] );
            refalrts::push_stack( vm, context[66] );
            refalrts::push_stack( vm, context[58] );
            res = refalrts::splice_elem( res, context[66] );
            res = refalrts::splice_evar( res, context[64], context[65] );
            refalrts::link_brackets( context[60], context[63] );
            res = refalrts::splice_elem( res, context[63] );
            res = refalrts::splice_evar( res, context[61], context[62] );
            res = refalrts::splice_elem( res, context[60] );
            res = refalrts::splice_elem( res, context[59] );
            res = refalrts::splice_elem( res, context[58] );
            res = refalrts::splice_elem( res, context[57] );
            res = refalrts::splice_elem( res, context[55] );
            refalrts::use( res );
            refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
            if (rec_res != refalrts::cSuccess)
              return rec_res;
            refalrts::this_is_generated_function(vm);
            do {
              // </55 & UnCondition-Sentence@1?5/59 e.PatternSteps/57 >/56
              context[57] = 0;
              context[58] = 0;
              context[59] = refalrts::call_left( context[57], context[58], context[55], context[56] );
              // closed e.PatternSteps as range 57
              //DEBUG: s.MarkupContext0: 5
              //DEBUG: e.RemName: 10
              //DEBUG: e.Sentence0: 12
              //DEBUG: e.Pattern: 19
              //DEBUG: e.ConditionName: 28
              //DEBUG: e.CondResult: 32
              //DEBUG: e.CondPattern: 36
              //DEBUG: e.SentenceTail: 16
              //DEBUG: e.CheckFunction: 42
              //DEBUG: e.SentenceVariables: 47
              //DEBUG: e.Context: 52
              //DEBUG: e.PatternSteps: 57
              //5: s.MarkupContext0
              //10: e.RemName
              //12: e.Sentence0
              //16: e.SentenceTail
              //19: e.Pattern
              //28: e.ConditionName
              //32: e.CondResult
              //36: e.CondPattern
              //42: e.CheckFunction
              //47: e.SentenceVariables
              //52: e.Context
              //57: e.PatternSteps
              //66: e.ConditionName
              //70: e.SentenceVariables
              //74: e.RemName
              //78: e.CheckFunction
              //82: e.Context
              //86: e.CondResult
              //89: e.PatternSteps

              refalrts::reset_allocator(vm);
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              refalrts::alloc_open_call(vm, context[60]);
              refalrts::alloc_name(vm, context[62], functions[efunc_gen_UnConditionm_Sentence_Z1C6]);
              refalrts::alloc_open_call(vm, context[63]);
              refalrts::alloc_name(vm, context[64], functions[efunc_OpenEChain]);
              refalrts::alloc_open_bracket(vm, context[65]);
              refalrts::copy_evar(vm, context[66], context[67], context[28], context[29]);
              refalrts::alloc_close_bracket(vm, context[68]);
              refalrts::alloc_open_bracket(vm, context[69]);
              refalrts::copy_evar(vm, context[70], context[71], context[47], context[48]);
              refalrts::alloc_close_bracket(vm, context[72]);
              refalrts::alloc_open_bracket(vm, context[73]);
              refalrts::copy_evar(vm, context[74], context[75], context[10], context[11]);
              refalrts::alloc_close_bracket(vm, context[76]);
              refalrts::alloc_open_bracket(vm, context[77]);
              refalrts::copy_evar(vm, context[78], context[79], context[42], context[43]);
              refalrts::alloc_close_bracket(vm, context[80]);
              refalrts::alloc_open_bracket(vm, context[81]);
              refalrts::copy_evar(vm, context[82], context[83], context[52], context[53]);
              refalrts::alloc_close_bracket(vm, context[84]);
              refalrts::alloc_open_bracket(vm, context[85]);
              refalrts::copy_evar(vm, context[86], context[87], context[32], context[33]);
              refalrts::alloc_close_bracket(vm, context[88]);
              refalrts::copy_evar(vm, context[89], context[90], context[57], context[58]);
              refalrts::alloc_close_call(vm, context[91]);
              refalrts::alloc_close_call(vm, context[61]);
              refalrts::push_stack( vm, context[61] );
              refalrts::push_stack( vm, context[60] );
              res = refalrts::splice_elem( res, context[61] );
              refalrts::push_stack( vm, context[91] );
              refalrts::push_stack( vm, context[63] );
              res = refalrts::splice_elem( res, context[91] );
              res = refalrts::splice_evar( res, context[89], context[90] );
              refalrts::link_brackets( context[85], context[88] );
              res = refalrts::splice_elem( res, context[88] );
              res = refalrts::splice_evar( res, context[86], context[87] );
              res = refalrts::splice_elem( res, context[85] );
              refalrts::link_brackets( context[81], context[84] );
              res = refalrts::splice_elem( res, context[84] );
              res = refalrts::splice_evar( res, context[82], context[83] );
              res = refalrts::splice_elem( res, context[81] );
              refalrts::link_brackets( context[77], context[80] );
              res = refalrts::splice_elem( res, context[80] );
              res = refalrts::splice_evar( res, context[78], context[79] );
              res = refalrts::splice_elem( res, context[77] );
              refalrts::link_brackets( context[73], context[76] );
              res = refalrts::splice_elem( res, context[76] );
              res = refalrts::splice_evar( res, context[74], context[75] );
              res = refalrts::splice_elem( res, context[73] );
              refalrts::link_brackets( context[69], context[72] );
              res = refalrts::splice_elem( res, context[72] );
              res = refalrts::splice_evar( res, context[70], context[71] );
              res = refalrts::splice_elem( res, context[69] );
              refalrts::link_brackets( context[65], context[68] );
              res = refalrts::splice_elem( res, context[68] );
              res = refalrts::splice_evar( res, context[66], context[67] );
              res = refalrts::splice_elem( res, context[65] );
              res = refalrts::splice_elem( res, context[64] );
              res = refalrts::splice_elem( res, context[63] );
              res = refalrts::splice_elem( res, context[62] );
              res = refalrts::splice_elem( res, context[60] );
              refalrts::use( res );
              refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
              if (rec_res != refalrts::cSuccess)
                return rec_res;
              refalrts::this_is_generated_function(vm);
              do {
                // </60 & UnCondition-Sentence@1?6/64 (/67 e.ContSentence/65 )/68 e.OpenEFunctions/62 >/61
                context[62] = 0;
                context[63] = 0;
                context[64] = refalrts::call_left( context[62], context[63], context[60], context[61] );
                context[65] = 0;
                context[66] = 0;
                context[67] = refalrts::brackets_left( context[65], context[66], context[62], context[63] );
                if( ! context[67] )
                  continue;
                refalrts::bracket_pointers(context[67], context[68]);
                // closed e.ContSentence as range 65
                // closed e.OpenEFunctions as range 62
                //DEBUG: s.MarkupContext0: 5
                //DEBUG: e.RemName: 10
                //DEBUG: e.Sentence0: 12
                //DEBUG: e.Pattern: 19
                //DEBUG: e.ConditionName: 28
                //DEBUG: e.CondResult: 32
                //DEBUG: e.CondPattern: 36
                //DEBUG: e.SentenceTail: 16
                //DEBUG: e.CheckFunction: 42
                //DEBUG: e.SentenceVariables: 47
                //DEBUG: e.Context: 52
                //DEBUG: e.PatternSteps: 57
                //DEBUG: e.ContSentence: 65
                //DEBUG: e.OpenEFunctions: 62
                //5: s.MarkupContext0
                //10: e.RemName
                //12: e.Sentence0
                //16: e.SentenceTail
                //19: e.Pattern
                //28: e.ConditionName
                //32: e.CondResult
                //36: e.CondPattern
                //42: e.CheckFunction
                //47: e.SentenceVariables
                //52: e.Context
                //57: e.PatternSteps
                //62: e.OpenEFunctions
                //65: e.ContSentence
                //76: e.CheckFunction
                //82: e.Context
                //84: e.CondPattern
                //87: e.SentenceTail
                //90: e.ContSentence

                refalrts::reset_allocator(vm);
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = context[1];
                refalrts::alloc_open_call(vm, context[69]);
                refalrts::alloc_name(vm, context[71], functions[efunc_gen_UnConditionm_Sentence_Z1C7]);
                refalrts::alloc_open_bracket(vm, context[72]);
                refalrts::alloc_ident(vm, context[73], identifiers[ident_Function]);
                refalrts::alloc_ident(vm, context[74], identifiers[ident_GNm_Local]);
                refalrts::alloc_open_bracket(vm, context[75]);
                refalrts::copy_evar(vm, context[76], context[77], context[42], context[43]);
                refalrts::alloc_close_bracket(vm, context[78]);
                refalrts::alloc_ident(vm, context[79], identifiers[ident_Sentences]);
                refalrts::alloc_open_bracket(vm, context[80]);
                refalrts::alloc_open_bracket(vm, context[81]);
                refalrts::copy_evar(vm, context[82], context[83], context[52], context[53]);
                refalrts::copy_evar(vm, context[84], context[85], context[36], context[37]);
                refalrts::alloc_close_bracket(vm, context[86]);
                refalrts::copy_evar(vm, context[87], context[88], context[16], context[17]);
                refalrts::alloc_close_bracket(vm, context[89]);
                refalrts::copy_evar(vm, context[90], context[91], context[65], context[66]);
                refalrts::alloc_close_bracket(vm, context[92]);
                refalrts::alloc_close_call(vm, context[70]);
                refalrts::push_stack( vm, context[70] );
                refalrts::push_stack( vm, context[69] );
                res = refalrts::splice_elem( res, context[70] );
                refalrts::link_brackets( context[72], context[92] );
                res = refalrts::splice_elem( res, context[92] );
                res = refalrts::splice_evar( res, context[90], context[91] );
                refalrts::link_brackets( context[80], context[89] );
                res = refalrts::splice_elem( res, context[89] );
                res = refalrts::splice_evar( res, context[87], context[88] );
                refalrts::link_brackets( context[81], context[86] );
                res = refalrts::splice_elem( res, context[86] );
                res = refalrts::splice_evar( res, context[84], context[85] );
                res = refalrts::splice_evar( res, context[82], context[83] );
                res = refalrts::splice_elem( res, context[81] );
                res = refalrts::splice_elem( res, context[80] );
                res = refalrts::splice_elem( res, context[79] );
                refalrts::link_brackets( context[75], context[78] );
                res = refalrts::splice_elem( res, context[78] );
                res = refalrts::splice_evar( res, context[76], context[77] );
                res = refalrts::splice_elem( res, context[75] );
                res = refalrts::splice_elem( res, context[74] );
                res = refalrts::splice_elem( res, context[73] );
                res = refalrts::splice_elem( res, context[72] );
                res = refalrts::splice_elem( res, context[71] );
                res = refalrts::splice_elem( res, context[69] );
                refalrts::use( res );
                refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
                if (rec_res != refalrts::cSuccess)
                  return rec_res;
                refalrts::this_is_generated_function(vm);
                do {
                  // </69 & UnCondition-Sentence@1?7/73 t.CheckFunction/74 >/70
                  context[71] = 0;
                  context[72] = 0;
                  context[73] = refalrts::call_left( context[71], context[72], context[69], context[70] );
                  context[75] = refalrts::tvar_left( context[74], context[71], context[72] );
                  if( ! context[75] )
                    continue;
                  if( ! refalrts::empty_seq( context[71], context[72] ) )
                    continue;
                  //DEBUG: s.MarkupContext0: 5
                  //DEBUG: e.RemName: 10
                  //DEBUG: e.Sentence0: 12
                  //DEBUG: e.Pattern: 19
                  //DEBUG: e.ConditionName: 28
                  //DEBUG: e.CondResult: 32
                  //DEBUG: e.CondPattern: 36
                  //DEBUG: e.SentenceTail: 16
                  //DEBUG: e.CheckFunction: 42
                  //DEBUG: e.SentenceVariables: 47
                  //DEBUG: e.Context: 52
                  //DEBUG: e.PatternSteps: 57
                  //DEBUG: e.ContSentence: 65
                  //DEBUG: e.OpenEFunctions: 62
                  //DEBUG: t.CheckFunction: 74

                  refalrts::reset_allocator(vm);
                  //TRASH: {REMOVED TILE} </0 & UnCondition-Sentence@1/4 s.MarkupContext0/5 (/8 e.RemName/10 )/9 e.Sentence0/12 </14 {REMOVED TILE} e.ConditionName/28 )/31 (/34 {REMOVED TILE} {REMOVED TILE} (/38 e.CondPattern/36 {REMOVED TILE} e.SentenceTail/16 {REMOVED TILE} e.SentenceVariables/47 {REMOVED TILE} & UnCondition-Sentence@1?5/59 e.PatternSteps/57 {REMOVED TILE} {REMOVED TILE} e.ContSentence/65 )/68 {REMOVED TILE} >/61 </69 & UnCondition-Sentence@1?7/73 {REMOVED TILE} >/70 >/1 {REMOVED TILE}
                  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/18 AsIs: (/21 AsIs: e.Pattern/19 AsIs: )/22 AsIs: (/25 HalfReuse: (/27 HalfReuse: # CallBrackets/30 } Tile{ HalfReuse: (/56 HalfReuse: # Symbol/60 HalfReuse: # Name/64 } e.CheckFunction/42/76 Tile{ AsIs: )/35 } e.Context/52/78 Tile{ AsIs: e.CondResult/32 } Tile{ AsIs: )/39 AsIs: )/26 } Tile{ HalfReuse: )/15 HalfReuse: (/40 HalfReuse: # Drive/44 AsIs: e.CheckFunction/42 HalfReuse: )/41 HalfReuse: (/45 HalfReuse: # Spec/49 } Tile{ AsIs: (/67 } e.CheckFunction/42/80 Tile{ HalfReuse: )/46 AsIs: </50 Reuse: & CreateSpecPatternForContext/54 AsIs: e.Context/52 AsIs: >/51 HalfReuse: )/55 } Tile{ AsIs: t.CheckFunction/74 } Tile{ AsIs: e.OpenEFunctions/62 } Tile{ ]] }
                  refalrts::copy_evar(vm, context[76], context[77], context[42], context[43]);
                  refalrts::copy_evar(vm, context[78], context[79], context[52], context[53]);
                  refalrts::copy_evar(vm, context[80], context[81], context[42], context[43]);
                  refalrts::reinit_open_bracket(context[18]);
                  refalrts::reinit_open_bracket(context[27]);
                  refalrts::reinit_ident(context[30], identifiers[ident_CallBrackets]);
                  refalrts::reinit_open_bracket(context[56]);
                  refalrts::reinit_ident(context[60], identifiers[ident_Symbol]);
                  refalrts::reinit_ident(context[64], identifiers[ident_Name]);
                  refalrts::reinit_close_bracket(context[15]);
                  refalrts::reinit_open_bracket(context[40]);
                  refalrts::reinit_ident(context[44], identifiers[ident_Drive]);
                  refalrts::reinit_close_bracket(context[41]);
                  refalrts::reinit_open_bracket(context[45]);
                  refalrts::reinit_ident(context[49], identifiers[ident_Spec]);
                  refalrts::reinit_close_bracket(context[46]);
                  refalrts::update_name(context[54], functions[efunc_CreateSpecPatternForContext]);
                  refalrts::reinit_close_bracket(context[55]);
                  refalrts::link_brackets( context[45], context[55] );
                  refalrts::push_stack( vm, context[51] );
                  refalrts::push_stack( vm, context[50] );
                  refalrts::link_brackets( context[67], context[46] );
                  refalrts::link_brackets( context[40], context[41] );
                  refalrts::link_brackets( context[18], context[15] );
                  refalrts::link_brackets( context[25], context[26] );
                  refalrts::link_brackets( context[27], context[39] );
                  refalrts::link_brackets( context[56], context[35] );
                  refalrts::link_brackets( context[21], context[22] );
                  refalrts::Iter trash_prev = arg_begin->prev;
                  refalrts::use(trash_prev);
                  refalrts::Iter res = arg_end->next;
                  res = refalrts::splice_evar( res, context[62], context[63] );
                  res = refalrts::splice_evar( res, context[74], context[75] );
                  res = refalrts::splice_evar( res, context[46], context[55] );
                  res = refalrts::splice_evar( res, context[80], context[81] );
                  res = refalrts::splice_elem( res, context[67] );
                  res = refalrts::splice_evar( res, context[15], context[49] );
                  res = refalrts::splice_evar( res, context[39], context[26] );
                  res = refalrts::splice_evar( res, context[32], context[33] );
                  res = refalrts::splice_evar( res, context[78], context[79] );
                  res = refalrts::splice_elem( res, context[35] );
                  res = refalrts::splice_evar( res, context[76], context[77] );
                  res = refalrts::splice_evar( res, context[56], context[64] );
                  res = refalrts::splice_evar( res, context[18], context[30] );
                  refalrts::splice_to_freelist_open( vm, trash_prev, res );
                  return refalrts::cSuccess;
                } while ( 0 );
                refalrts::stop_sentence(vm);

                refalrts::splice_to_freelist(vm, context[69], context[70]);
                continue;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              refalrts::splice_to_freelist(vm, context[60], context[61]);
              continue;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            refalrts::splice_to_freelist(vm, context[55], context[56]);
            continue;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[50], context[51]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[45], context[46]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[40], context[41]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[14], context[15]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UnCondition-Sentence@1/4 s.MarkupContext0/5 (/8 e.RemName/6 )/9 e.Sentence0/2 >/1
  // closed e.RemName as range 6
  // closed e.Sentence0 as range 2
  //DEBUG: s.MarkupContext0: 5
  //DEBUG: e.RemName: 6
  //DEBUG: e.Sentence0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnCondition-Sentence@0/4 AsIs: s.MarkupContext0/5 AsIs: (/8 AsIs: e.RemName/6 AsIs: )/9 AsIs: e.Sentence0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_UnConditionm_Sentence_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UnConditionm_Sentence_Z1("UnCondition-Sentence@1", COOKIE1_, COOKIE2_, func_gen_UnConditionm_Sentence_Z1);


static refalrts::FnResult func_gen_DoPatternSteps_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & DoPatternSteps@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps@2/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 t.new4/15 (/19 e.new5/17 )/20 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new5 as range 17
  // closed e.new6 as range 2
  do {
    // </0 & DoPatternSteps@2/4 t.UsedVariables0/5 (/9 e.BoundEVariables0/21 )/10 (/13 e.HolesAndItems-B/23 )/14 t.Item/15 (/19 e.Pattern/25 )/20 e.HolesAndItems-E/27 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[2];
    context[28] = context[3];
    // closed e.BoundEVariables0 as range 21
    // closed e.HolesAndItems-B as range 23
    // closed e.Pattern as range 25
    // closed e.HolesAndItems-E as range 27
    //DEBUG: t.UsedVariables0: 5
    //DEBUG: t.Item: 15
    //DEBUG: e.BoundEVariables0: 21
    //DEBUG: e.HolesAndItems-B: 23
    //DEBUG: e.Pattern: 25
    //DEBUG: e.HolesAndItems-E: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1/4 } Tile{ AsIs: (/9 AsIs: e.BoundEVariables0/21 AsIs: )/10 } Tile{ AsIs: t.UsedVariables0/5 } Tile{ AsIs: (/13 } Tile{ AsIs: e.HolesAndItems-B/23 } Tile{ AsIs: t.Item/15 } (/29 # HOLE/30 e.Pattern/25/31 Tile{ AsIs: )/14 } e.HolesAndItems-E/27/33 )/35 e.HolesAndItems-B/23/36 t.Item/15/38 (/40 Tile{ HalfReuse: # HOLE/19 AsIs: e.Pattern/25 AsIs: )/20 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_HOLE]);
    refalrts::copy_evar(vm, context[31], context[32], context[25], context[26]);
    refalrts::copy_evar(vm, context[33], context[34], context[27], context[28]);
    refalrts::alloc_close_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[23], context[24]);
    refalrts::copy_evar(vm, context[38], context[39], context[15], context[16]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1]);
    refalrts::reinit_ident(context[19], identifiers[ident_HOLE]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[40], context[20] );
    refalrts::link_brackets( context[13], context[35] );
    refalrts::link_brackets( context[29], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    res = refalrts::splice_evar( res, context[35], context[40] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps@2/4 t.UsedVariables0/5 (/9 e.BoundEVariables0/7 )/10 (/13 e.HolesAndItems-B/11 )/14 t.Item/15 (/19 e.Pattern/17 )/20 e.HolesAndItems-E/2 >/1
  // closed e.BoundEVariables0 as range 7
  // closed e.HolesAndItems-B as range 11
  // closed e.Pattern as range 17
  // closed e.HolesAndItems-E as range 2
  //DEBUG: t.UsedVariables0: 5
  //DEBUG: t.Item: 15
  //DEBUG: e.BoundEVariables0: 7
  //DEBUG: e.HolesAndItems-B: 11
  //DEBUG: e.Pattern: 17
  //DEBUG: e.HolesAndItems-E: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@0/4 AsIs: t.UsedVariables0/5 AsIs: (/9 AsIs: e.BoundEVariables0/7 AsIs: )/10 } Tile{ AsIs: e.HolesAndItems-B/11 } Tile{ AsIs: t.Item/15 } Tile{ AsIs: (/13 } Tile{ HalfReuse: # HOLE/19 AsIs: e.Pattern/17 AsIs: )/20 AsIs: e.HolesAndItems-E/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z0]);
  refalrts::reinit_ident(context[19], identifiers[ident_HOLE]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[20] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[19];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_Z2("DoPatternSteps@2", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_Z2);


static refalrts::FnResult func_gen_DoPatternSteps_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & DoPatternSteps@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 t.new5/19 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  // closed e.new6 as range 2
  do {
    // </0 & DoPatternSteps@3/4 t.UsedVariables0/5 (/9 e.BoundEVariables0/21 )/10 (/13 e.HolesAndItems-B/23 )/14 (/17 e.Pattern/25 )/18 t.Item/19 e.HolesAndItems-E/27 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[2];
    context[28] = context[3];
    // closed e.BoundEVariables0 as range 21
    // closed e.HolesAndItems-B as range 23
    // closed e.Pattern as range 25
    // closed e.HolesAndItems-E as range 27
    //DEBUG: t.UsedVariables0: 5
    //DEBUG: t.Item: 19
    //DEBUG: e.BoundEVariables0: 21
    //DEBUG: e.HolesAndItems-B: 23
    //DEBUG: e.Pattern: 25
    //DEBUG: e.HolesAndItems-E: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1/4 } Tile{ AsIs: (/9 AsIs: e.BoundEVariables0/21 AsIs: )/10 } Tile{ AsIs: t.UsedVariables0/5 } (/29 e.HolesAndItems-B/23/30 (/32 # HOLE/33 e.Pattern/25/34 )/36 t.Item/19/37 e.HolesAndItems-E/27/39 Tile{ HalfReuse: )/13 AsIs: e.HolesAndItems-B/23 HalfReuse: (/14 HalfReuse: # HOLE/17 AsIs: e.Pattern/25 AsIs: )/18 AsIs: t.Item/19 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::copy_evar(vm, context[30], context[31], context[23], context[24]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_ident(vm, context[33], identifiers[ident_HOLE]);
    refalrts::copy_evar(vm, context[34], context[35], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::copy_evar(vm, context[37], context[38], context[19], context[20]);
    refalrts::copy_evar(vm, context[39], context[40], context[27], context[28]);
    refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::reinit_open_bracket(context[14]);
    refalrts::reinit_ident(context[17], identifiers[ident_HOLE]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[18] );
    refalrts::link_brackets( context[29], context[13] );
    refalrts::link_brackets( context[32], context[36] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[29], context[38] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps@3/4 t.UsedVariables0/5 (/9 e.BoundEVariables0/7 )/10 (/13 e.HolesAndItems-B/11 )/14 (/17 e.Pattern/15 )/18 t.Item/19 e.HolesAndItems-E/2 >/1
  // closed e.BoundEVariables0 as range 7
  // closed e.HolesAndItems-B as range 11
  // closed e.Pattern as range 15
  // closed e.HolesAndItems-E as range 2
  //DEBUG: t.UsedVariables0: 5
  //DEBUG: t.Item: 19
  //DEBUG: e.BoundEVariables0: 7
  //DEBUG: e.HolesAndItems-B: 11
  //DEBUG: e.Pattern: 15
  //DEBUG: e.HolesAndItems-E: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/10 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@0/4 AsIs: t.UsedVariables0/5 AsIs: (/9 } Tile{ AsIs: e.BoundEVariables0/7 } Tile{ HalfReuse: )/13 AsIs: e.HolesAndItems-B/11 HalfReuse: (/14 HalfReuse: # HOLE/17 AsIs: e.Pattern/15 AsIs: )/18 AsIs: t.Item/19 AsIs: e.HolesAndItems-E/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z0]);
  refalrts::reinit_close_bracket(context[13]);
  refalrts::reinit_open_bracket(context[14]);
  refalrts::reinit_ident(context[17], identifiers[ident_HOLE]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[14], context[18] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, context[9], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_Z3("DoPatternSteps@3", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_Z3);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Map@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@2/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@2/4 (/7 e./11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e. as range 11
      // closed e.Tail as range 9
      //DEBUG: e.: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/13 Tile{ AsIs: </0 Reuse: & DoBindBrackets/4 AsIs: (/7 } '$'/14 )/15 Tile{ AsIs: e./11 } >/16 )/17 </18 Tile{ HalfReuse: & Map@2/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[13]);
      refalrts::alloc_char(vm, context[14], '$');
      refalrts::alloc_close_bracket(vm, context[15]);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::update_name(context[4], functions[efunc_DoBindBrackets]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[13], context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[16], context[18] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@2/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BindBrackets*1/4 AsIs: t.Next/7 } >/11 </12 & Map@2/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_gen_BindBrackets_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & BindBrackets@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_BindBrackets_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_Substitute_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & Substitute@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Substitute@1/4 e.new1/2 t.new2/9 t.new3/7 t.new4/5 >/1
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & Substitute@1/4 t.new8/13 e.new9/11 t.new7/9 t.new6/7 t.new5/5 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new9 as range 11
    do {
      // </0 & Substitute@1/4 (/13 s.new13/19 e.new14/17 )/14 e.new15/15 t.new12/9 t.new11/7 t.new10/5 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      if( ! refalrts::brackets_term( context[17], context[18], context[13] ) )
        continue;
      // closed e.new15 as range 15
      if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
        continue;
      // closed e.new14 as range 17
      do {
        // </0 & Substitute@1/4 (/13 # Var/19 s.Type/27 e.Index/20 )/14 e.Tail/22 (/9 # Var/26 s.Type/28 e.Index/29 )/10 t.eX_fix/7 t.eX_var/5 >/1
        context[20] = context[17];
        context[21] = context[18];
        context[22] = context[15];
        context[23] = context[16];
        context[24] = 0;
        context[25] = 0;
        if( ! refalrts::brackets_term( context[24], context[25], context[9] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Var], context[19] ) )
          continue;
        context[26] = refalrts::ident_left( identifiers[ident_Var], context[24], context[25] );
        if( ! context[26] )
          continue;
        // closed e.Tail as range 22
        if( ! refalrts::svar_left( context[27], context[20], context[21] ) )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[28], context[27], context[24], context[25] ) )
          continue;
        // closed e.Index as range 20
        if( ! refalrts::repeated_evar_left( vm, context[29], context[30], context[20], context[21], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: t.eX_fix: 7
        //DEBUG: t.eX_var: 5
        //DEBUG: e.Tail: 22
        //DEBUG: s.Type: 27
        //DEBUG: e.Index: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} & Substitute@1/4 (/13 # Var/19 s.Type/27 e.Index/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } t.eX_fix/7/31 t.eX_var/5/33 Tile{ AsIs: </0 } Tile{ HalfReuse: & Substitute@1/14 AsIs: e.Tail/22 AsIs: (/9 AsIs: # Var/26 AsIs: s.Type/28 AsIs: e.Index/29 AsIs: )/10 AsIs: t.eX_fix/7 AsIs: t.eX_var/5 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[7], context[8]);
        refalrts::copy_evar(vm, context[33], context[34], context[5], context[6]);
        refalrts::reinit_name(context[14], functions[efunc_gen_Substitute_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_evar( res, context[31], context[34] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Substitute@1/4 (/13 # Brackets/19 e.InBrackets/20 )/14 e.Tail/22 t.Variable/9 t.eX_fix/7 t.eX_var/5 >/1
        context[20] = context[17];
        context[21] = context[18];
        context[22] = context[15];
        context[23] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[19] ) )
          continue;
        // closed e.InBrackets as range 20
        // closed e.Tail as range 22
        //DEBUG: t.Variable: 9
        //DEBUG: t.eX_fix: 7
        //DEBUG: t.eX_var: 5
        //DEBUG: e.InBrackets: 20
        //DEBUG: e.Tail: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </13 HalfReuse: & Substitute@1/19 } Tile{ AsIs: e.InBrackets/20 } t.Variable/9/24 t.eX_fix/7/26 t.eX_var/5/28 >/30 )/31 </32 Tile{ HalfReuse: & Substitute@1/14 AsIs: e.Tail/22 AsIs: t.Variable/9 AsIs: t.eX_fix/7 AsIs: t.eX_var/5 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[24], context[25], context[9], context[10]);
        refalrts::copy_evar(vm, context[26], context[27], context[7], context[8]);
        refalrts::copy_evar(vm, context[28], context[29], context[5], context[6]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_bracket(vm, context[31]);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[19], functions[efunc_gen_Substitute_Z1]);
        refalrts::reinit_name(context[14], functions[efunc_gen_Substitute_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[0], context[31] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[24], context[32] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Substitute@1/4 (/13 # ADT-Brackets/19 (/26 e.Name/24 )/27 e.InBrackets/20 )/14 e.Tail/22 t.Variable/9 t.eX_fix/7 t.eX_var/5 >/1
        context[20] = context[17];
        context[21] = context[18];
        context[22] = context[15];
        context[23] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[19] ) )
          continue;
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[20], context[21] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        // closed e.Name as range 24
        // closed e.InBrackets as range 20
        // closed e.Tail as range 22
        //DEBUG: t.Variable: 9
        //DEBUG: t.eX_fix: 7
        //DEBUG: t.eX_var: 5
        //DEBUG: e.Name: 24
        //DEBUG: e.InBrackets: 20
        //DEBUG: e.Tail: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ADT-Brackets/19 AsIs: (/26 AsIs: e.Name/24 AsIs: )/27 } Tile{ AsIs: </0 AsIs: & Substitute@1/4 } Tile{ AsIs: e.InBrackets/20 } t.Variable/9/28 t.eX_fix/7/30 t.eX_var/5/32 >/34 )/35 </36 Tile{ HalfReuse: & Substitute@1/14 AsIs: e.Tail/22 AsIs: t.Variable/9 AsIs: t.eX_fix/7 AsIs: t.eX_var/5 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[28], context[29], context[9], context[10]);
        refalrts::copy_evar(vm, context[30], context[31], context[7], context[8]);
        refalrts::copy_evar(vm, context[32], context[33], context[5], context[6]);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::reinit_name(context[14], functions[efunc_gen_Substitute_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[36] );
        refalrts::link_brackets( context[13], context[35] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[26], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[28], context[36] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[13], context[27] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Substitute@1/4 (/13 # CallBrackets/19 e.InBrackets/20 )/14 e.Tail/22 t.Variable/9 t.eX_fix/7 t.eX_var/5 >/1
        context[20] = context[17];
        context[21] = context[18];
        context[22] = context[15];
        context[23] = context[16];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[19] ) )
          continue;
        // closed e.InBrackets as range 20
        // closed e.Tail as range 22
        //DEBUG: t.Variable: 9
        //DEBUG: t.eX_fix: 7
        //DEBUG: t.eX_var: 5
        //DEBUG: e.InBrackets: 20
        //DEBUG: e.Tail: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </13 HalfReuse: & Substitute@1/19 } Tile{ AsIs: e.InBrackets/20 } t.Variable/9/24 t.eX_fix/7/26 t.eX_var/5/28 >/30 )/31 </32 Tile{ HalfReuse: & Substitute@1/14 AsIs: e.Tail/22 AsIs: t.Variable/9 AsIs: t.eX_fix/7 AsIs: t.eX_var/5 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[24], context[25], context[9], context[10]);
        refalrts::copy_evar(vm, context[26], context[27], context[7], context[8]);
        refalrts::copy_evar(vm, context[28], context[29], context[5], context[6]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_bracket(vm, context[31]);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[19], functions[efunc_gen_Substitute_Z1]);
        refalrts::reinit_name(context[14], functions[efunc_gen_Substitute_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[0], context[31] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[24], context[32] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Substitute@1/4 (/13 # ClosureBrackets/19 e.InBrackets/20 )/14 e.Tail/22 t.Variable/9 t.eX_fix/7 t.eX_var/5 >/1
      context[20] = context[17];
      context[21] = context[18];
      context[22] = context[15];
      context[23] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[19] ) )
        continue;
      // closed e.InBrackets as range 20
      // closed e.Tail as range 22
      //DEBUG: t.Variable: 9
      //DEBUG: t.eX_fix: 7
      //DEBUG: t.eX_var: 5
      //DEBUG: e.InBrackets: 20
      //DEBUG: e.Tail: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # ClosureBrackets/4 HalfReuse: </13 HalfReuse: & Substitute@1/19 } Tile{ AsIs: e.InBrackets/20 } t.Variable/9/24 t.eX_fix/7/26 t.eX_var/5/28 >/30 )/31 </32 Tile{ HalfReuse: & Substitute@1/14 AsIs: e.Tail/22 AsIs: t.Variable/9 AsIs: t.eX_fix/7 AsIs: t.eX_var/5 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[24], context[25], context[9], context[10]);
      refalrts::copy_evar(vm, context[26], context[27], context[7], context[8]);
      refalrts::copy_evar(vm, context[28], context[29], context[5], context[6]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_ClosureBrackets]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[19], functions[efunc_gen_Substitute_Z1]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Substitute_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[0], context[31] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[24], context[32] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Substitute@1/4 t.OtherItem/13 e.Tail/15 t.Variable/9 t.eX_fix/7 t.eX_var/5 >/1
    context[15] = context[11];
    context[16] = context[12];
    // closed e.Tail as range 15
    //DEBUG: t.OtherItem: 13
    //DEBUG: t.Variable: 9
    //DEBUG: t.eX_fix: 7
    //DEBUG: t.eX_var: 5
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.OtherItem/13 } Tile{ AsIs: </0 AsIs: & Substitute@1/4 } Tile{ AsIs: e.Tail/15 } Tile{ AsIs: t.Variable/9 AsIs: t.eX_fix/7 AsIs: t.eX_var/5 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Substitute@1/4 t.Variable/9 t.eX_fix/7 t.eX_var/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Variable: 9
    //DEBUG: t.eX_fix: 7
    //DEBUG: t.eX_var: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Substitute@1/4 t.Variable/9 t.eX_fix/7 t.eX_var/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Substitute@1/4 e.dyn0/2 t.dyn0/9 t.eX_fix/7 t.eX_var/5 >/1
  // closed e.dyn0 as range 2
  //DEBUG: t.dyn0: 9
  //DEBUG: t.eX_fix: 7
  //DEBUG: t.eX_var: 5
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Substitute@0/4 } Tile{ AsIs: e.dyn0/2 } (/11 Tile{ AsIs: t.dyn0/9 AsIs: t.eX_fix/7 AsIs: t.eX_var/5 HalfReuse: )/1 } >/12 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_Substitute_Z0]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Substitute_Z1("Substitute@1", COOKIE1_, COOKIE2_, func_gen_Substitute_Z1);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Name/18 )/8 s.MarkupContext/9 (/12 e.Scanned0/20 )/13 (/16 e.Tail0/22 )/17 t.Acc$a/26 e.StepScanned/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Name as range 18
    // closed e.Scanned0 as range 20
    // closed e.Tail0 as range 22
    context[27] = refalrts::tvar_left( context[26], context[24], context[25] );
    if( ! context[27] )
      continue;
    // closed e.StepScanned as range 24
    //DEBUG: s.MarkupContext: 9
    //DEBUG: e.Name: 18
    //DEBUG: e.Scanned0: 20
    //DEBUG: e.Tail0: 22
    //DEBUG: t.Acc$a: 26
    //DEBUG: e.StepScanned: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/12 {REMOVED TILE} )/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: (/7 AsIs: e.Name/18 AsIs: )/8 AsIs: s.MarkupContext/9 } Tile{ AsIs: t.Acc$a/26 } Tile{ AsIs: (/16 } Tile{ AsIs: e.Scanned0/20 } Tile{ AsIs: e.StepScanned/24 } Tile{ AsIs: )/17 } Tile{ AsIs: e.Tail0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Name/5 )/8 s.MarkupContext/9 (/12 e.Scanned0/10 )/13 (/16 e.Tail0/14 )/17 e.dyn/2 >/1
  // closed e.Name as range 5
  // closed e.Scanned0 as range 10
  // closed e.Tail0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.MarkupContext: 9
  //DEBUG: e.Name: 5
  //DEBUG: e.Scanned0: 10
  //DEBUG: e.Tail0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 AsIs: (/7 } & UnCondition-Unit-Sentence@0/18 Tile{ AsIs: e.Name/5 } Tile{ AsIs: s.MarkupContext/9 } Tile{ AsIs: )/8 } Tile{ AsIs: (/12 AsIs: e.Scanned0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Tail0/14 AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_UnConditionm_Unitm_Sentence_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_DoPatternSteps_B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 134 elems
  refalrts::Iter context[134];
  refalrts::zeros( context, 134 );
  // </0 & DoPatternSteps:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps:1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/13 )/8 (/11 e.Pattern0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 t.Item/28 e.Pattern/23 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.Pattern0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.HolesAndItems-E as range 21
      context[29] = refalrts::tvar_left( context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      // closed e.Pattern as range 23
      //DEBUG: e.UsedVariables: 13
      //DEBUG: e.Pattern0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.HolesAndItems-E: 21
      //DEBUG: t.Item: 28
      //DEBUG: e.Pattern: 23
      //13: e.UsedVariables
      //15: e.Pattern0
      //19: e.HolesAndItems-B
      //21: e.HolesAndItems-E
      //23: e.Pattern
      //28: t.Item
      //37: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoPatternSteps_B1Z1S1C1]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::copy_stvar(vm, context[37], context[28]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_stvar( res, context[37] );
      refalrts::link_brackets( context[35], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </30 & DoPatternSteps:1@1$1?1/34 # True/35 >/31
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::call_left( context[32], context[33], context[30], context[31] );
        context[35] = refalrts::ident_left( identifiers[ident_True], context[32], context[33] );
        if( ! context[35] )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        //DEBUG: e.UsedVariables: 13
        //DEBUG: e.Pattern0: 15
        //DEBUG: e.HolesAndItems-B: 19
        //DEBUG: e.HolesAndItems-E: 21
        //DEBUG: t.Item: 28
        //DEBUG: e.Pattern: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/11 e.Pattern0/15 )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & DoPatternSteps:1@1$1?1/34 # True/35 >/31 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.UsedVariables/13 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: t.Item/28 } Tile{ AsIs: (/25 AsIs: # HOLE/27 } Tile{ AsIs: e.Pattern/23 } Tile{ AsIs: )/26 AsIs: e.HolesAndItems-E/21 HalfReuse: >/30 } Tile{ ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
        refalrts::reinit_close_call(context[30]);
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[30], context[31]);
      continue;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/13 )/8 (/11 e.Pattern0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 e.Pattern/23 t.Item/28 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.Pattern0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.HolesAndItems-E as range 21
      context[29] = refalrts::tvar_right( context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      // closed e.Pattern as range 23
      //DEBUG: e.UsedVariables: 13
      //DEBUG: e.Pattern0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.HolesAndItems-E: 21
      //DEBUG: t.Item: 28
      //DEBUG: e.Pattern: 23
      //13: e.UsedVariables
      //15: e.Pattern0
      //19: e.HolesAndItems-B
      //21: e.HolesAndItems-E
      //23: e.Pattern
      //28: t.Item
      //37: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoPatternSteps_B1Z1S2C1]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::copy_stvar(vm, context[37], context[28]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_stvar( res, context[37] );
      refalrts::link_brackets( context[35], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </30 & DoPatternSteps:1@1$2?1/34 # True/35 >/31
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::call_left( context[32], context[33], context[30], context[31] );
        context[35] = refalrts::ident_left( identifiers[ident_True], context[32], context[33] );
        if( ! context[35] )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        //DEBUG: e.UsedVariables: 13
        //DEBUG: e.Pattern0: 15
        //DEBUG: e.HolesAndItems-B: 19
        //DEBUG: e.HolesAndItems-E: 21
        //DEBUG: t.Item: 28
        //DEBUG: e.Pattern: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/11 e.Pattern0/15 )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} </30 & DoPatternSteps:1@1$2?1/34 # True/35 >/31 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.UsedVariables/13 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: (/25 AsIs: # HOLE/27 } Tile{ AsIs: e.Pattern/23 } Tile{ AsIs: )/26 } Tile{ AsIs: t.Item/28 } Tile{ AsIs: e.HolesAndItems-E/21 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[30], context[31]);
      continue;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/13 )/8 (/11 e.Pattern0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 (/30 # Var/32 'e'/33 e.Index/28 )/31 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.Pattern0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_Var], context[28], context[29] );
      if( ! context[32] )
        continue;
      context[33] = refalrts::char_left( 'e', context[28], context[29] );
      if( ! context[33] )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Index as range 28
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.UsedVariables: 13
      //DEBUG: e.Pattern0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.Index: 28
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Pattern0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps:1@3/27 } Tile{ AsIs: (/25 } e.Index/28/34 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.UsedVariables/13 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: )/12 } (/36 e.HolesAndItems-E/21/37 Tile{ AsIs: )/26 } e.HolesAndItems-B/19/39 Tile{ AsIs: (/30 AsIs: # Var/32 AsIs: 'e'/33 AsIs: e.Index/28 AsIs: )/31 } Tile{ AsIs: e.HolesAndItems-E/21 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[34], context[35], context[28], context[29]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[21], context[22]);
      refalrts::copy_evar(vm, context[39], context[40], context[19], context[20]);
      refalrts::reinit_name(context[27], functions[efunc_gen_DoPatternSteps_B1Z3]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[36], context[26] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[25], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[4], context[11] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/13 )/8 (/11 e.Pattern0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.Pattern0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.UsedVariables: 13
      //DEBUG: e.Pattern0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Pattern0/15 )/12 {REMOVED TILE} (/25 # HOLE/27 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@13/4 AsIs: (/7 AsIs: e.UsedVariables/13 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/13 )/8 (/11 e.Pattern0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 (/30 # Brackets/32 e.InBrackets/28 )/31 e.Pattern/23 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.Pattern0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_Brackets], context[28], context[29] );
      if( ! context[32] )
        continue;
      // closed e.InBrackets as range 28
      // closed e.Pattern as range 23
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.UsedVariables: 13
      //DEBUG: e.Pattern0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.InBrackets: 28
      //DEBUG: e.Pattern: 23
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Pattern0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.UsedVariables/13 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: (/25 Reuse: # LeftBracket/27 HalfReuse: )/30 HalfReuse: (/32 } # HOLE/33 Tile{ AsIs: e.InBrackets/28 } Tile{ AsIs: )/12 } Tile{ AsIs: (/11 } # RightBracket/34 )/35 (/36 Tile{ HalfReuse: # HOLE/31 AsIs: e.Pattern/23 AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[33], identifiers[ident_HOLE]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_RightBracket]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::update_ident(context[27], identifiers[ident_LeftBracket]);
      refalrts::reinit_close_bracket(context[30]);
      refalrts::reinit_open_bracket(context[32]);
      refalrts::reinit_ident(context[31], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[36], context[26] );
      refalrts::link_brackets( context[11], context[35] );
      refalrts::link_brackets( context[32], context[12] );
      refalrts::link_brackets( context[25], context[30] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[32] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/13 )/8 (/11 e.Pattern0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 e.Pattern/23 (/30 # Brackets/32 e.InBrackets/28 )/31 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.Pattern0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_right( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_Brackets], context[28], context[29] );
      if( ! context[32] )
        continue;
      // closed e.Pattern as range 23
      // closed e.InBrackets as range 28
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.UsedVariables: 13
      //DEBUG: e.Pattern0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.Pattern: 23
      //DEBUG: e.InBrackets: 28
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Pattern0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 } Tile{ AsIs: e.UsedVariables/13 } Tile{ AsIs: )/12 AsIs: e.HolesAndItems-B/19 AsIs: (/25 AsIs: # HOLE/27 AsIs: e.Pattern/23 HalfReuse: )/30 HalfReuse: (/32 } # LeftBracket/33 Tile{ AsIs: )/8 AsIs: (/11 } # HOLE/34 Tile{ AsIs: e.InBrackets/28 } )/35 (/36 Tile{ HalfReuse: # RightBracket/31 AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[33], identifiers[ident_LeftBracket]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_HOLE]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::reinit_close_bracket(context[30]);
      refalrts::reinit_open_bracket(context[32]);
      refalrts::reinit_ident(context[31], identifiers[ident_RightBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[36], context[26] );
      refalrts::link_brackets( context[11], context[35] );
      refalrts::link_brackets( context[32], context[8] );
      refalrts::link_brackets( context[25], context[30] );
      refalrts::link_brackets( context[7], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[12], context[32] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/13 )/8 (/11 e.Pattern0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 (/30 # ADT-Brackets/32 (/35 e.Name/33 )/36 e.InBrackets/28 )/31 e.Pattern/23 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.Pattern0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[28], context[29] );
      if( ! context[32] )
        continue;
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::brackets_left( context[33], context[34], context[28], context[29] );
      if( ! context[35] )
        continue;
      refalrts::bracket_pointers(context[35], context[36]);
      // closed e.Name as range 33
      // closed e.InBrackets as range 28
      // closed e.Pattern as range 23
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.UsedVariables: 13
      //DEBUG: e.Pattern0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.Name: 33
      //DEBUG: e.InBrackets: 28
      //DEBUG: e.Pattern: 23
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Pattern0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.UsedVariables/13 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ HalfReuse: (/32 HalfReuse: # LeftADT/35 AsIs: e.Name/33 AsIs: )/36 } Tile{ AsIs: (/25 AsIs: # HOLE/27 } Tile{ AsIs: e.InBrackets/28 } Tile{ AsIs: )/12 } Tile{ AsIs: (/30 } # RightADT/37 )/38 Tile{ AsIs: (/11 } Tile{ HalfReuse: # HOLE/31 AsIs: e.Pattern/23 AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[37], identifiers[ident_RightADT]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::reinit_open_bracket(context[32]);
      refalrts::reinit_ident(context[35], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[31], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[26] );
      refalrts::link_brackets( context[30], context[38] );
      refalrts::link_brackets( context[25], context[12] );
      refalrts::link_brackets( context[32], context[36] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[32], context[36] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/13 )/8 (/11 e.Pattern0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 e.Pattern/23 (/30 # ADT-Brackets/32 (/35 e.Name/33 )/36 e.InBrackets/28 )/31 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.Pattern0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_right( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[28], context[29] );
      if( ! context[32] )
        continue;
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::brackets_left( context[33], context[34], context[28], context[29] );
      if( ! context[35] )
        continue;
      refalrts::bracket_pointers(context[35], context[36]);
      // closed e.Pattern as range 23
      // closed e.Name as range 33
      // closed e.InBrackets as range 28
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.UsedVariables: 13
      //DEBUG: e.Pattern0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.Pattern: 23
      //DEBUG: e.Name: 33
      //DEBUG: e.InBrackets: 28
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Pattern0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 } Tile{ AsIs: e.UsedVariables/13 } Tile{ AsIs: )/12 AsIs: e.HolesAndItems-B/19 AsIs: (/25 AsIs: # HOLE/27 AsIs: e.Pattern/23 HalfReuse: )/30 HalfReuse: (/32 HalfReuse: # LeftADT/35 AsIs: e.Name/33 AsIs: )/36 } (/37 # HOLE/38 Tile{ AsIs: e.InBrackets/28 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: # RightADT/31 AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_ident(vm, context[38], identifiers[ident_HOLE]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::reinit_close_bracket(context[30]);
      refalrts::reinit_open_bracket(context[32]);
      refalrts::reinit_ident(context[35], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[31], identifiers[ident_RightADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[26] );
      refalrts::link_brackets( context[37], context[8] );
      refalrts::link_brackets( context[32], context[36] );
      refalrts::link_brackets( context[25], context[30] );
      refalrts::link_brackets( context[7], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[12], context[36] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/13 )/8 (/11 e.Pattern0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 (/30 # Var/32 'e'/33 e.Index/28 )/31 e.Pattern/23 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.Pattern0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_Var], context[28], context[29] );
      if( ! context[32] )
        continue;
      context[33] = refalrts::char_left( 'e', context[28], context[29] );
      if( ! context[33] )
        continue;
      // closed e.Index as range 28
      // closed e.Pattern as range 23
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.UsedVariables: 13
      //DEBUG: e.Pattern0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.Index: 28
      //DEBUG: e.Pattern: 23
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@14/4 AsIs: (/7 AsIs: e.UsedVariables/13 AsIs: )/8 AsIs: (/11 } (/34 e.Index/28/35 Tile{ AsIs: )/12 } )/37 Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: (/30 Reuse: # OpenE/32 AsIs: 'e'/33 AsIs: e.Index/28 AsIs: )/31 } Tile{ AsIs: (/25 AsIs: # HOLE/27 } Tile{ AsIs: e.Pattern/23 } Tile{ AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 } (/38 </39 & Map@2/40 </41 & T1@1/42 (/43 e.UsedVariables/13/44 )/46 (/47 # HOLE/48 Tile{ AsIs: e.Pattern0/15 } )/49 >/50 </51 & T2@1/52 (/53 e.UsedVariables/13/54 )/56 (/57 # HOLE/58 e.Pattern0/15/59 )/61 >/62 </63 & T3@1/64 (/65 e.UsedVariables/13/66 )/68 (/69 # HOLE/70 e.Pattern0/15/71 )/73 >/74 </75 & T4@1/76 (/77 e.UsedVariables/13/78 )/80 (/81 # HOLE/82 e.Pattern0/15/83 )/85 >/86 </87 & T5@1/88 (/89 e.UsedVariables/13/90 )/92 (/93 # HOLE/94 e.Pattern0/15/95 )/97 >/98 </99 & T5-sub@1/100 (/101 e.UsedVariables/13/102 )/104 e.Index/28/105 >/107 </108 & T6@1/109 (/110 e.UsedVariables/13/111 )/113 (/114 # HOLE/115 e.Pattern0/15/116 )/118 >/119 </120 & T7@1/121 (/122 e.UsedVariables/13/123 )/125 (/126 # HOLE/127 e.Pattern0/15/128 )/130 >/131 >/132 )/133 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::copy_evar(vm, context[35], context[36], context[28], context[29]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_gen_Map_Z2]);
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_gen_T1_Z1]);
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::copy_evar(vm, context[44], context[45], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_ident(vm, context[48], identifiers[ident_HOLE]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_name(vm, context[52], functions[efunc_gen_T2_Z1]);
      refalrts::alloc_open_bracket(vm, context[53]);
      refalrts::copy_evar(vm, context[54], context[55], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::alloc_ident(vm, context[58], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[59], context[60], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[61]);
      refalrts::alloc_close_call(vm, context[62]);
      refalrts::alloc_open_call(vm, context[63]);
      refalrts::alloc_name(vm, context[64], functions[efunc_gen_T3_Z1]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::copy_evar(vm, context[66], context[67], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[68]);
      refalrts::alloc_open_bracket(vm, context[69]);
      refalrts::alloc_ident(vm, context[70], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[71], context[72], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[73]);
      refalrts::alloc_close_call(vm, context[74]);
      refalrts::alloc_open_call(vm, context[75]);
      refalrts::alloc_name(vm, context[76], functions[efunc_gen_T4_Z1]);
      refalrts::alloc_open_bracket(vm, context[77]);
      refalrts::copy_evar(vm, context[78], context[79], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[80]);
      refalrts::alloc_open_bracket(vm, context[81]);
      refalrts::alloc_ident(vm, context[82], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[83], context[84], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[85]);
      refalrts::alloc_close_call(vm, context[86]);
      refalrts::alloc_open_call(vm, context[87]);
      refalrts::alloc_name(vm, context[88], functions[efunc_gen_T5_Z1]);
      refalrts::alloc_open_bracket(vm, context[89]);
      refalrts::copy_evar(vm, context[90], context[91], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[92]);
      refalrts::alloc_open_bracket(vm, context[93]);
      refalrts::alloc_ident(vm, context[94], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[95], context[96], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[97]);
      refalrts::alloc_close_call(vm, context[98]);
      refalrts::alloc_open_call(vm, context[99]);
      refalrts::alloc_name(vm, context[100], functions[efunc_gen_T5m_sub_Z1]);
      refalrts::alloc_open_bracket(vm, context[101]);
      refalrts::copy_evar(vm, context[102], context[103], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[104]);
      refalrts::copy_evar(vm, context[105], context[106], context[28], context[29]);
      refalrts::alloc_close_call(vm, context[107]);
      refalrts::alloc_open_call(vm, context[108]);
      refalrts::alloc_name(vm, context[109], functions[efunc_gen_T6_Z1]);
      refalrts::alloc_open_bracket(vm, context[110]);
      refalrts::copy_evar(vm, context[111], context[112], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[113]);
      refalrts::alloc_open_bracket(vm, context[114]);
      refalrts::alloc_ident(vm, context[115], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[116], context[117], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[118]);
      refalrts::alloc_close_call(vm, context[119]);
      refalrts::alloc_open_call(vm, context[120]);
      refalrts::alloc_name(vm, context[121], functions[efunc_gen_T7_Z1]);
      refalrts::alloc_open_bracket(vm, context[122]);
      refalrts::copy_evar(vm, context[123], context[124], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[125]);
      refalrts::alloc_open_bracket(vm, context[126]);
      refalrts::alloc_ident(vm, context[127], identifiers[ident_HOLE]);
      refalrts::copy_evar(vm, context[128], context[129], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[130]);
      refalrts::alloc_close_call(vm, context[131]);
      refalrts::alloc_close_call(vm, context[132]);
      refalrts::alloc_close_bracket(vm, context[133]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::update_ident(context[32], identifiers[ident_OpenE]);
      refalrts::link_brackets( context[38], context[133] );
      refalrts::push_stack( vm, context[132] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[131] );
      refalrts::push_stack( vm, context[120] );
      refalrts::link_brackets( context[126], context[130] );
      refalrts::link_brackets( context[122], context[125] );
      refalrts::push_stack( vm, context[119] );
      refalrts::push_stack( vm, context[108] );
      refalrts::link_brackets( context[114], context[118] );
      refalrts::link_brackets( context[110], context[113] );
      refalrts::push_stack( vm, context[107] );
      refalrts::push_stack( vm, context[99] );
      refalrts::link_brackets( context[101], context[104] );
      refalrts::push_stack( vm, context[98] );
      refalrts::push_stack( vm, context[87] );
      refalrts::link_brackets( context[93], context[97] );
      refalrts::link_brackets( context[89], context[92] );
      refalrts::push_stack( vm, context[86] );
      refalrts::push_stack( vm, context[75] );
      refalrts::link_brackets( context[81], context[85] );
      refalrts::link_brackets( context[77], context[80] );
      refalrts::push_stack( vm, context[74] );
      refalrts::push_stack( vm, context[63] );
      refalrts::link_brackets( context[69], context[73] );
      refalrts::link_brackets( context[65], context[68] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[51] );
      refalrts::link_brackets( context[57], context[61] );
      refalrts::link_brackets( context[53], context[56] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[41] );
      refalrts::link_brackets( context[47], context[49] );
      refalrts::link_brackets( context[43], context[46] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[11], context[37] );
      refalrts::link_brackets( context[34], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[49], context[133] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[38], context[48] );
      res = refalrts::splice_evar( res, context[26], context[1] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/13 )/8 (/11 e.Pattern0/15 )/12 e.OnlyItems/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.Pattern0 as range 15
    // closed e.OnlyItems as range 17
    //DEBUG: e.UsedVariables: 13
    //DEBUG: e.Pattern0: 15
    //DEBUG: e.OnlyItems: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.UsedVariables/13 {REMOVED TILE} e.Pattern0/15 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 Tile{ AsIs: </0 Reuse: & BindBrackets/4 AsIs: (/7 } </20 Tile{ HalfReuse: & DoT0/12 AsIs: e.OnlyItems/17 AsIs: >/1 } Tile{ AsIs: )/8 HalfReuse: >/11 } )/21 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_BindBrackets]);
    refalrts::reinit_name(context[12], functions[efunc_DoT0]);
    refalrts::reinit_close_call(context[11]);
    refalrts::link_brackets( context[19], context[21] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps:1@1/4 (/7 e.UsedVariables/5 )/8 (/11 e.Pattern0/9 )/12 e.dyn/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.Pattern0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.Pattern0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoPatternSteps:1@0/14 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: (/11 } (/15 # HOLE/16 Tile{ AsIs: e.Pattern0/9 } )/17 Tile{ AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoPatternSteps_B1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_HOLE]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[17] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_B1Z1("DoPatternSteps:1@1", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_B1Z1);


static refalrts::FnResult func_gen_DoPatternSteps_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoPatternSteps@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps@11/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DoPatternSteps@11/4 (/7 e.X/9 )/8 e.X0/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.X as range 9
    // closed e.X0 as range 11
    //DEBUG: e.X: 9
    //DEBUG: e.X0: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1@2/4 AsIs: (/7 AsIs: e.X/9 AsIs: )/8 } (/13 e.X0/11/14 )/16 Tile{ AsIs: e.X0/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::copy_evar(vm, context[14], context[15], context[11], context[12]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps@11/4 (/7 e.X/5 )/8 e.X0/2 >/1
  // closed e.X as range 5
  // closed e.X0 as range 2
  //DEBUG: e.X: 5
  //DEBUG: e.X0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@0/4 AsIs: (/7 AsIs: e.X/5 AsIs: )/8 } (/9 )/10 Tile{ AsIs: e.X0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_Z11("DoPatternSteps@11", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_Z11);


static refalrts::FnResult func_gen_DoPatternSteps_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & DoPatternSteps@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps@13/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoPatternSteps@13/4 (/7 e.UsedVariables/13 )/8 (/11 e.HolesAndItems-B/15 )/12 e.HolesAndItems-E/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.UsedVariables as range 13
    // closed e.HolesAndItems-B as range 15
    // closed e.HolesAndItems-E as range 17
    //DEBUG: e.UsedVariables: 13
    //DEBUG: e.HolesAndItems-B: 15
    //DEBUG: e.HolesAndItems-E: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1@4/4 AsIs: (/7 AsIs: e.UsedVariables/13 AsIs: )/8 AsIs: (/11 AsIs: e.HolesAndItems-B/15 AsIs: )/12 } (/19 e.HolesAndItems-E/17/20 )/22 e.HolesAndItems-B/15/23 Tile{ AsIs: e.HolesAndItems-E/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[17], context[18]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[22] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps@13/4 (/7 e.UsedVariables/5 )/8 (/11 e.HolesAndItems-B/9 )/12 e.HolesAndItems-E/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.HolesAndItems-B as range 9
  // closed e.HolesAndItems-E as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.HolesAndItems-B: 9
  //DEBUG: e.HolesAndItems-E: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@0/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: )/12 } Tile{ AsIs: e.HolesAndItems-B/9 } Tile{ AsIs: e.HolesAndItems-E/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_Z13("DoPatternSteps@13", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_Z13);


static refalrts::FnResult func_gen_DoPatternSteps_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & DoPatternSteps@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps@14/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoPatternSteps@14/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.X1/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    // closed e.X1 as range 17
    //DEBUG: e.X: 13
    //DEBUG: e.X0: 15
    //DEBUG: e.X1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoPatternSteps:1@5/19 (/20 Tile{ AsIs: e.X0/15 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X/13 AsIs: )/8 AsIs: (/11 } e.X1/17/21 Tile{ AsIs: )/12 AsIs: e.X1/17 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_DoPatternSteps_B1Z5]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[17], context[18]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[4], context[11] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps@14/4 (/7 e.X/5 )/8 (/11 e.X0/9 )/12 e.X1/2 >/1
  // closed e.X as range 5
  // closed e.X0 as range 9
  // closed e.X1 as range 2
  //DEBUG: e.X: 5
  //DEBUG: e.X0: 9
  //DEBUG: e.X1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@0/4 AsIs: (/7 AsIs: e.X/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0/9 AsIs: )/12 AsIs: e.X1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_Z14("DoPatternSteps@14", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_Z14);


static refalrts::FnResult func_gen_T1_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & T1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & T1@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & T1@1/4 (/7 e.UsedVariables/9 )/8 e.Items/13 (/19 # HOLE/21 (/24 # Var/26 'e'/27 e.Index/22 )/25 e.Pattern/17 )/20 e.ItemsAndHoles/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.UsedVariables as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_HOLE], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left( identifiers[ident_Var], context[22], context[23] );
      if( ! context[26] )
        continue;
      context[27] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[27] )
        continue;
      // closed e.Index as range 22
      // closed e.Pattern as range 17
      // closed e.ItemsAndHoles as range 15
      //DEBUG: e.UsedVariables: 9
      //DEBUG: e.Items: 13
      //DEBUG: e.Index: 22
      //DEBUG: e.Pattern: 17
      //DEBUG: e.ItemsAndHoles: 15
      //9: e.UsedVariables
      //13: e.Items
      //15: e.ItemsAndHoles
      //17: e.Pattern
      //22: e.Index
      //34: e.UsedVariables
      //38: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_T1_Z1C1]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_NewVarName]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_char(vm, context[37], 'e');
      refalrts::copy_evar(vm, context[38], context[39], context[22], context[23]);
      refalrts::alloc_chars(vm, context[40], context[41], "_fix", 4);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[31] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::link_brackets( context[33], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </28 & T1@1?1/32 t.UsedVars1/33 e.eX_fix/30 >/29
        context[30] = 0;
        context[31] = 0;
        context[32] = refalrts::call_left( context[30], context[31], context[28], context[29] );
        context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        // closed e.eX_fix as range 30
        //DEBUG: e.UsedVariables: 9
        //DEBUG: e.Items: 13
        //DEBUG: e.Index: 22
        //DEBUG: e.Pattern: 17
        //DEBUG: e.ItemsAndHoles: 15
        //DEBUG: t.UsedVars1: 33
        //DEBUG: e.eX_fix: 30
        //9: e.UsedVariables
        //13: e.Items
        //15: e.ItemsAndHoles
        //17: e.Pattern
        //22: e.Index
        //30: e.eX_fix
        //33: t.UsedVars1
        //40: t.UsedVars1
        //42: e.Index

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[37], functions[efunc_gen_T1_Z1C2]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_NewVarName]);
        refalrts::copy_stvar(vm, context[40], context[33]);
        refalrts::alloc_char(vm, context[41], 't');
        refalrts::copy_evar(vm, context[42], context[43], context[22], context[23]);
        refalrts::alloc_chars(vm, context[44], context[45], "_next", 5);
        refalrts::alloc_close_call(vm, context[46]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[35] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[38] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_stvar( res, context[40] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </35 & T1@1?2/39 t.UsedVars2/40 e.tX_next/37 >/36
          context[37] = 0;
          context[38] = 0;
          context[39] = refalrts::call_left( context[37], context[38], context[35], context[36] );
          context[41] = refalrts::tvar_left( context[40], context[37], context[38] );
          if( ! context[41] )
            continue;
          // closed e.tX_next as range 37
          //DEBUG: e.UsedVariables: 9
          //DEBUG: e.Items: 13
          //DEBUG: e.Index: 22
          //DEBUG: e.Pattern: 17
          //DEBUG: e.ItemsAndHoles: 15
          //DEBUG: t.UsedVars1: 33
          //DEBUG: e.eX_fix: 30
          //DEBUG: t.UsedVars2: 40
          //DEBUG: e.tX_next: 37
          //9: e.UsedVariables
          //13: e.Items
          //15: e.ItemsAndHoles
          //17: e.Pattern
          //22: e.Index
          //30: e.eX_fix
          //33: t.UsedVars1
          //37: e.tX_next
          //40: t.UsedVars2
          //47: t.UsedVars2
          //49: e.Index

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[44], functions[efunc_gen_T1_Z1C3]);
          refalrts::alloc_open_call(vm, context[45]);
          refalrts::alloc_name(vm, context[46], functions[efunc_NewVarName]);
          refalrts::copy_stvar(vm, context[47], context[40]);
          refalrts::alloc_char(vm, context[48], 'e');
          refalrts::copy_evar(vm, context[49], context[50], context[22], context[23]);
          refalrts::alloc_chars(vm, context[51], context[52], "_rest", 5);
          refalrts::alloc_close_call(vm, context[53]);
          refalrts::alloc_close_call(vm, context[43]);
          refalrts::push_stack( vm, context[43] );
          refalrts::push_stack( vm, context[42] );
          res = refalrts::splice_elem( res, context[43] );
          refalrts::push_stack( vm, context[53] );
          refalrts::push_stack( vm, context[45] );
          res = refalrts::splice_elem( res, context[53] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_stvar( res, context[47] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_elem( res, context[44] );
          res = refalrts::splice_elem( res, context[42] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </42 & T1@1?3/46 t.UsedVars3/47 e.eX_rest/44 >/43
            context[44] = 0;
            context[45] = 0;
            context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
            context[48] = refalrts::tvar_left( context[47], context[44], context[45] );
            if( ! context[48] )
              continue;
            // closed e.eX_rest as range 44
            //DEBUG: e.UsedVariables: 9
            //DEBUG: e.Items: 13
            //DEBUG: e.Index: 22
            //DEBUG: e.Pattern: 17
            //DEBUG: e.ItemsAndHoles: 15
            //DEBUG: t.UsedVars1: 33
            //DEBUG: e.eX_fix: 30
            //DEBUG: t.UsedVars2: 40
            //DEBUG: e.tX_next: 37
            //DEBUG: t.UsedVars3: 47
            //DEBUG: e.eX_rest: 44

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} e.UsedVariables/9 {REMOVED TILE} 'e'/27 e.Index/22 {REMOVED TILE} e.Pattern/17 )/20 {REMOVED TILE} </28 & T1@1?1/32 t.UsedVars1/33 {REMOVED TILE} {REMOVED TILE} t.UsedVars2/40 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 AsIs: e.Items/13 AsIs: (/19 Reuse: # Brackets/21 AsIs: (/24 AsIs: # Var/26 } Tile{ AsIs: e.eX_fix/30 } Tile{ HalfReuse: )/0 HalfReuse: )/4 AsIs: (/7 } Tile{ HalfReuse: # Var/25 } Tile{ AsIs: e.tX_next/37 } Tile{ HalfReuse: )/29 HalfReuse: (/35 HalfReuse: # Var/39 } Tile{ AsIs: e.eX_rest/44 } Tile{ HalfReuse: )/36 AsIs: </42 Reuse: & PassiveHoles/46 AsIs: t.UsedVars3/47 } Tile{ AsIs: e.ItemsAndHoles/15 } Tile{ AsIs: >/43 HalfReuse: )/1 ]] }
            refalrts::reinit_open_bracket(context[8]);
            refalrts::update_ident(context[21], identifiers[ident_Brackets]);
            refalrts::reinit_close_bracket(context[0]);
            refalrts::reinit_close_bracket(context[4]);
            refalrts::reinit_ident(context[25], identifiers[ident_Var]);
            refalrts::reinit_close_bracket(context[29]);
            refalrts::reinit_open_bracket(context[35]);
            refalrts::reinit_ident(context[39], identifiers[ident_Var]);
            refalrts::reinit_close_bracket(context[36]);
            refalrts::update_name(context[46], functions[efunc_PassiveHoles]);
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[8], context[1] );
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[42] );
            refalrts::link_brackets( context[35], context[36] );
            refalrts::link_brackets( context[7], context[29] );
            refalrts::link_brackets( context[19], context[4] );
            refalrts::link_brackets( context[24], context[0] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[43];
            res = refalrts::splice_evar( res, context[15], context[16] );
            res = refalrts::splice_evar( res, context[36], context[48] );
            res = refalrts::splice_evar( res, context[44], context[45] );
            res = refalrts::splice_evar( res, context[29], context[39] );
            res = refalrts::splice_evar( res, context[37], context[38] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[0], context[7] );
            res = refalrts::splice_evar( res, context[30], context[31] );
            res = refalrts::splice_evar( res, context[8], context[26] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[42], context[43]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[35], context[36]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[28], context[29]);
      continue;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & T1@1/4 (/7 e.UsedVariables/5 )/8 e.dyn0/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.dyn0 as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T1@0/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: e.dyn0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_T1_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_T1_Z1("T1@1", COOKIE1_, COOKIE2_, func_gen_T1_Z1);


static refalrts::FnResult func_gen_T2_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & T2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & T2@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & T2@1/4 (/7 e.UsedVariables/9 )/8 e.Items/13 (/19 # HOLE/21 (/24 # Var/26 'e'/27 e.Index/22 )/25 e.Pattern/17 )/20 e.ItemsAndHoles/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.UsedVariables as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_HOLE], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left( identifiers[ident_Var], context[22], context[23] );
      if( ! context[26] )
        continue;
      context[27] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[27] )
        continue;
      // closed e.Index as range 22
      // closed e.Pattern as range 17
      // closed e.ItemsAndHoles as range 15
      //DEBUG: e.UsedVariables: 9
      //DEBUG: e.Items: 13
      //DEBUG: e.Index: 22
      //DEBUG: e.Pattern: 17
      //DEBUG: e.ItemsAndHoles: 15
      //9: e.UsedVariables
      //13: e.Items
      //15: e.ItemsAndHoles
      //17: e.Pattern
      //22: e.Index
      //34: e.UsedVariables
      //38: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_T2_Z1C1]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_NewVarName]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_char(vm, context[37], 'e');
      refalrts::copy_evar(vm, context[38], context[39], context[22], context[23]);
      refalrts::alloc_chars(vm, context[40], context[41], "_fix", 4);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[31] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::link_brackets( context[33], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </28 & T2@1?1/32 t.UsedVars1/33 e.eX_fix/30 >/29
        context[30] = 0;
        context[31] = 0;
        context[32] = refalrts::call_left( context[30], context[31], context[28], context[29] );
        context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        // closed e.eX_fix as range 30
        //DEBUG: e.UsedVariables: 9
        //DEBUG: e.Items: 13
        //DEBUG: e.Index: 22
        //DEBUG: e.Pattern: 17
        //DEBUG: e.ItemsAndHoles: 15
        //DEBUG: t.UsedVars1: 33
        //DEBUG: e.eX_fix: 30
        //9: e.UsedVariables
        //13: e.Items
        //15: e.ItemsAndHoles
        //17: e.Pattern
        //22: e.Index
        //30: e.eX_fix
        //33: t.UsedVars1
        //40: t.UsedVars1
        //42: e.Index

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[37], functions[efunc_gen_T2_Z1C2]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_NewVarName]);
        refalrts::copy_stvar(vm, context[40], context[33]);
        refalrts::alloc_char(vm, context[41], 't');
        refalrts::copy_evar(vm, context[42], context[43], context[22], context[23]);
        refalrts::alloc_chars(vm, context[44], context[45], "_next", 5);
        refalrts::alloc_close_call(vm, context[46]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[35] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[38] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_stvar( res, context[40] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </35 & T2@1?2/39 t.UsedVars2/40 e.tX_next/37 >/36
          context[37] = 0;
          context[38] = 0;
          context[39] = refalrts::call_left( context[37], context[38], context[35], context[36] );
          context[41] = refalrts::tvar_left( context[40], context[37], context[38] );
          if( ! context[41] )
            continue;
          // closed e.tX_next as range 37
          //DEBUG: e.UsedVariables: 9
          //DEBUG: e.Items: 13
          //DEBUG: e.Index: 22
          //DEBUG: e.Pattern: 17
          //DEBUG: e.ItemsAndHoles: 15
          //DEBUG: t.UsedVars1: 33
          //DEBUG: e.eX_fix: 30
          //DEBUG: t.UsedVars2: 40
          //DEBUG: e.tX_next: 37
          //9: e.UsedVariables
          //13: e.Items
          //15: e.ItemsAndHoles
          //17: e.Pattern
          //22: e.Index
          //30: e.eX_fix
          //33: t.UsedVars1
          //37: e.tX_next
          //40: t.UsedVars2
          //47: t.UsedVars2
          //49: e.Index

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[44], functions[efunc_gen_T2_Z1C3]);
          refalrts::alloc_open_call(vm, context[45]);
          refalrts::alloc_name(vm, context[46], functions[efunc_NewVarName]);
          refalrts::copy_stvar(vm, context[47], context[40]);
          refalrts::alloc_char(vm, context[48], 'e');
          refalrts::copy_evar(vm, context[49], context[50], context[22], context[23]);
          refalrts::alloc_chars(vm, context[51], context[52], "_rest", 5);
          refalrts::alloc_close_call(vm, context[53]);
          refalrts::alloc_close_call(vm, context[43]);
          refalrts::push_stack( vm, context[43] );
          refalrts::push_stack( vm, context[42] );
          res = refalrts::splice_elem( res, context[43] );
          refalrts::push_stack( vm, context[53] );
          refalrts::push_stack( vm, context[45] );
          res = refalrts::splice_elem( res, context[53] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_stvar( res, context[47] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_elem( res, context[44] );
          res = refalrts::splice_elem( res, context[42] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </42 & T2@1?3/46 t.UsedVars3/47 e.eX_rest/44 >/43
            context[44] = 0;
            context[45] = 0;
            context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
            context[48] = refalrts::tvar_left( context[47], context[44], context[45] );
            if( ! context[48] )
              continue;
            // closed e.eX_rest as range 44
            //DEBUG: e.UsedVariables: 9
            //DEBUG: e.Items: 13
            //DEBUG: e.Index: 22
            //DEBUG: e.Pattern: 17
            //DEBUG: e.ItemsAndHoles: 15
            //DEBUG: t.UsedVars1: 33
            //DEBUG: e.eX_fix: 30
            //DEBUG: t.UsedVars2: 40
            //DEBUG: e.tX_next: 37
            //DEBUG: t.UsedVars3: 47
            //DEBUG: e.eX_rest: 44

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} e.UsedVariables/9 {REMOVED TILE} 'e'/27 e.Index/22 )/25 e.Pattern/17 {REMOVED TILE} {REMOVED TILE} </28 & T2@1?1/32 t.UsedVars1/33 {REMOVED TILE} {REMOVED TILE} t.UsedVars2/40 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 AsIs: e.Items/13 AsIs: (/19 Reuse: # Brackets/21 AsIs: (/24 AsIs: # Var/26 } Tile{ AsIs: e.eX_fix/30 } Tile{ HalfReuse: )/29 HalfReuse: (/35 HalfReuse: # Var/39 } Tile{ AsIs: e.tX_next/37 } Tile{ HalfReuse: )/0 HalfReuse: )/4 AsIs: (/7 } Tile{ HalfReuse: # Var/20 } Tile{ AsIs: e.eX_rest/44 } Tile{ HalfReuse: )/36 AsIs: </42 Reuse: & PassiveHoles/46 AsIs: t.UsedVars3/47 } Tile{ AsIs: e.ItemsAndHoles/15 } Tile{ AsIs: >/43 HalfReuse: )/1 ]] }
            refalrts::reinit_open_bracket(context[8]);
            refalrts::update_ident(context[21], identifiers[ident_Brackets]);
            refalrts::reinit_close_bracket(context[29]);
            refalrts::reinit_open_bracket(context[35]);
            refalrts::reinit_ident(context[39], identifiers[ident_Var]);
            refalrts::reinit_close_bracket(context[0]);
            refalrts::reinit_close_bracket(context[4]);
            refalrts::reinit_ident(context[20], identifiers[ident_Var]);
            refalrts::reinit_close_bracket(context[36]);
            refalrts::update_name(context[46], functions[efunc_PassiveHoles]);
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[8], context[1] );
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[42] );
            refalrts::link_brackets( context[7], context[36] );
            refalrts::link_brackets( context[19], context[4] );
            refalrts::link_brackets( context[35], context[0] );
            refalrts::link_brackets( context[24], context[29] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[43];
            res = refalrts::splice_evar( res, context[15], context[16] );
            res = refalrts::splice_evar( res, context[36], context[48] );
            res = refalrts::splice_evar( res, context[44], context[45] );
            res = refalrts::splice_elem( res, context[20] );
            res = refalrts::splice_evar( res, context[0], context[7] );
            res = refalrts::splice_evar( res, context[37], context[38] );
            res = refalrts::splice_evar( res, context[29], context[39] );
            res = refalrts::splice_evar( res, context[30], context[31] );
            res = refalrts::splice_evar( res, context[8], context[26] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[42], context[43]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[35], context[36]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[28], context[29]);
      continue;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & T2@1/4 (/7 e.UsedVariables/5 )/8 e.dyn0/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.dyn0 as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T2@0/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: e.dyn0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_T2_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_T2_Z1("T2@1", COOKIE1_, COOKIE2_, func_gen_T2_Z1);


static refalrts::FnResult func_gen_T3_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & T3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & T3@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & T3@1/4 (/7 e.UsedVariables/9 )/8 e.Items/13 (/19 # HOLE/21 (/24 # Var/26 'e'/27 e.Index/22 )/25 e.Pattern/17 )/20 e.ItemsAndHoles/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.UsedVariables as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_HOLE], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left( identifiers[ident_Var], context[22], context[23] );
      if( ! context[26] )
        continue;
      context[27] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[27] )
        continue;
      // closed e.Index as range 22
      // closed e.Pattern as range 17
      // closed e.ItemsAndHoles as range 15
      //DEBUG: e.UsedVariables: 9
      //DEBUG: e.Items: 13
      //DEBUG: e.Index: 22
      //DEBUG: e.Pattern: 17
      //DEBUG: e.ItemsAndHoles: 15
      //9: e.UsedVariables
      //13: e.Items
      //15: e.ItemsAndHoles
      //17: e.Pattern
      //22: e.Index
      //34: e.UsedVariables
      //38: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_T3_Z1C1]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_NewVarName]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_char(vm, context[37], 'e');
      refalrts::copy_evar(vm, context[38], context[39], context[22], context[23]);
      refalrts::alloc_chars(vm, context[40], context[41], "_fix", 4);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[31] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::link_brackets( context[33], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </28 & T3@1?1/32 t.UsedVars1/33 e.eX_fix/30 >/29
        context[30] = 0;
        context[31] = 0;
        context[32] = refalrts::call_left( context[30], context[31], context[28], context[29] );
        context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        // closed e.eX_fix as range 30
        //DEBUG: e.UsedVariables: 9
        //DEBUG: e.Items: 13
        //DEBUG: e.Index: 22
        //DEBUG: e.Pattern: 17
        //DEBUG: e.ItemsAndHoles: 15
        //DEBUG: t.UsedVars1: 33
        //DEBUG: e.eX_fix: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & T3@1/4 (/7 e.UsedVariables/9 {REMOVED TILE} 'e'/27 e.Index/22 {REMOVED TILE} e.Pattern/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 AsIs: e.Items/13 AsIs: (/19 Reuse: # Brackets/21 AsIs: (/24 AsIs: # Var/26 } Tile{ AsIs: e.eX_fix/30 } Tile{ AsIs: )/25 } Tile{ AsIs: )/20 } Tile{ AsIs: </28 Reuse: & PassiveHoles/32 AsIs: t.UsedVars1/33 } Tile{ AsIs: e.ItemsAndHoles/15 } Tile{ AsIs: >/29 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[8]);
        refalrts::update_ident(context[21], identifiers[ident_Brackets]);
        refalrts::update_name(context[32], functions[efunc_PassiveHoles]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[8], context[1] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[29];
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[28], context[34] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[8], context[26] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[28], context[29]);
      continue;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & T3@1/4 (/7 e.UsedVariables/5 )/8 e.dyn0/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.dyn0 as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T3@0/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: e.dyn0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_T3_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_T3_Z1("T3@1", COOKIE1_, COOKIE2_, func_gen_T3_Z1);


static refalrts::FnResult func_gen_T4_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & T4@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & T4@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & T4@1/4 (/7 e.UsedVariables/9 )/8 e.Items/13 (/19 # HOLE/21 (/24 # Var/26 'e'/27 e.Index/22 )/25 e.Pattern/17 )/20 e.ItemsAndHoles/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.UsedVariables as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_HOLE], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left( identifiers[ident_Var], context[22], context[23] );
      if( ! context[26] )
        continue;
      context[27] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[27] )
        continue;
      // closed e.Index as range 22
      // closed e.Pattern as range 17
      // closed e.ItemsAndHoles as range 15
      //DEBUG: e.UsedVariables: 9
      //DEBUG: e.Items: 13
      //DEBUG: e.Index: 22
      //DEBUG: e.Pattern: 17
      //DEBUG: e.ItemsAndHoles: 15
      //9: e.UsedVariables
      //13: e.Items
      //15: e.ItemsAndHoles
      //17: e.Pattern
      //22: e.Index
      //34: e.UsedVariables
      //38: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_T4_Z1C1]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_NewVarName]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_char(vm, context[37], 'e');
      refalrts::copy_evar(vm, context[38], context[39], context[22], context[23]);
      refalrts::alloc_chars(vm, context[40], context[41], "_fix", 4);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[31] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::link_brackets( context[33], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </28 & T4@1?1/32 t.UsedVars1/33 e.eX_fix/30 >/29
        context[30] = 0;
        context[31] = 0;
        context[32] = refalrts::call_left( context[30], context[31], context[28], context[29] );
        context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        // closed e.eX_fix as range 30
        //DEBUG: e.UsedVariables: 9
        //DEBUG: e.Items: 13
        //DEBUG: e.Index: 22
        //DEBUG: e.Pattern: 17
        //DEBUG: e.ItemsAndHoles: 15
        //DEBUG: t.UsedVars1: 33
        //DEBUG: e.eX_fix: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & T4@1/4 (/7 e.UsedVariables/9 {REMOVED TILE} (/24 # Var/26 'e'/27 e.Index/22 )/25 e.Pattern/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 AsIs: e.Items/13 AsIs: (/19 Reuse: # Var/21 } Tile{ AsIs: e.eX_fix/30 } Tile{ AsIs: )/20 } Tile{ AsIs: </28 Reuse: & PassiveHoles/32 AsIs: t.UsedVars1/33 } Tile{ AsIs: e.ItemsAndHoles/15 } Tile{ AsIs: >/29 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[8]);
        refalrts::update_ident(context[21], identifiers[ident_Var]);
        refalrts::update_name(context[32], functions[efunc_PassiveHoles]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[8], context[1] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[29];
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[28], context[34] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[28], context[29]);
      continue;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & T4@1/4 (/7 e.UsedVariables/5 )/8 e.dyn0/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.dyn0 as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T4@0/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: e.dyn0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_T4_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_T4_Z1("T4@1", COOKIE1_, COOKIE2_, func_gen_T4_Z1);


static refalrts::FnResult func_gen_T5_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & T5@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & T5@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & T5@1/4 (/7 e.UsedVariables/9 )/8 e.Items/13 (/19 # HOLE/21 (/24 # Var/26 'e'/27 e.Index/22 )/25 e.Pattern/17 )/20 e.ItemsAndHoles/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.UsedVariables as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_HOLE], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left( identifiers[ident_Var], context[22], context[23] );
      if( ! context[26] )
        continue;
      context[27] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[27] )
        continue;
      // closed e.Index as range 22
      // closed e.Pattern as range 17
      // closed e.ItemsAndHoles as range 15
      //DEBUG: e.UsedVariables: 9
      //DEBUG: e.Items: 13
      //DEBUG: e.Index: 22
      //DEBUG: e.Pattern: 17
      //DEBUG: e.ItemsAndHoles: 15
      //9: e.UsedVariables
      //13: e.Items
      //15: e.ItemsAndHoles
      //17: e.Pattern
      //22: e.Index
      //34: e.UsedVariables
      //37: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_T5_Z1C1]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_T5m_sub_Z1]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[22], context[23]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[31] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::link_brackets( context[33], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </28 & T5@1?1/32 (/35 t.SourceVar/37 t.eX_fix/39 t.eX_var/41 )/36 >/29
        context[30] = 0;
        context[31] = 0;
        context[32] = refalrts::call_left( context[30], context[31], context[28], context[29] );
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[30], context[31] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        if( ! refalrts::empty_seq( context[30], context[31] ) )
          continue;
        context[38] = refalrts::tvar_left( context[37], context[33], context[34] );
        if( ! context[38] )
          continue;
        context[40] = refalrts::tvar_left( context[39], context[33], context[34] );
        if( ! context[40] )
          continue;
        context[42] = refalrts::tvar_left( context[41], context[33], context[34] );
        if( ! context[42] )
          continue;
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        //DEBUG: e.UsedVariables: 9
        //DEBUG: e.Items: 13
        //DEBUG: e.Index: 22
        //DEBUG: e.Pattern: 17
        //DEBUG: e.ItemsAndHoles: 15
        //DEBUG: t.SourceVar: 37
        //DEBUG: t.eX_fix: 39
        //DEBUG: t.eX_var: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 e.UsedVariables/9 {REMOVED TILE} (/24 # Var/26 'e'/27 e.Index/22 )/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 AsIs: e.Items/13 AsIs: (/19 Reuse: # Brackets/21 } t.eX_fix/39/43 Tile{ AsIs: )/20 } t.eX_var/41/45 Tile{ AsIs: </0 Reuse: & Substitute@1/4 } Tile{ AsIs: e.Pattern/17 } Tile{ AsIs: </28 Reuse: & T5-UnHole/32 } Tile{ AsIs: e.ItemsAndHoles/15 } Tile{ HalfReuse: >/35 AsIs: t.SourceVar/37 AsIs: t.eX_fix/39 AsIs: t.eX_var/41 HalfReuse: >/36 HalfReuse: )/29 } Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::copy_evar(vm, context[45], context[46], context[41], context[42]);
        refalrts::reinit_open_bracket(context[8]);
        refalrts::update_ident(context[21], identifiers[ident_Brackets]);
        refalrts::update_name(context[4], functions[efunc_gen_Substitute_Z1]);
        refalrts::update_name(context[32], functions[efunc_T5m_UnHole]);
        refalrts::reinit_close_call(context[35]);
        refalrts::reinit_close_call(context[36]);
        refalrts::reinit_close_bracket(context[29]);
        refalrts::link_brackets( context[8], context[29] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[35], context[29] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[28], context[29]);
      continue;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & T5@1/4 (/7 e.UsedVariables/5 )/8 e.dyn0/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.dyn0 as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T5@0/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: e.dyn0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_T5_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_T5_Z1("T5@1", COOKIE1_, COOKIE2_, func_gen_T5_Z1);


static refalrts::FnResult func_gen_T5m_sub_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & T5-sub@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & T5-sub@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & T5-sub@1/4 (/7 e.UsedVariables/9 )/8 e.Index0/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.UsedVariables as range 9
    // closed e.Index0 as range 11
    //DEBUG: e.UsedVariables: 9
    //DEBUG: e.Index0: 11
    //9: e.UsedVariables
    //11: e.Index0
    //19: e.UsedVariables
    //23: e.Index0

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_T5m_sub_Z1C1]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_NewVarName]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::copy_evar(vm, context[19], context[20], context[9], context[10]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_char(vm, context[22], 'e');
    refalrts::copy_evar(vm, context[23], context[24], context[11], context[12]);
    refalrts::alloc_chars(vm, context[25], context[26], "_fix", 4);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[16] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::link_brackets( context[18], context[21] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </13 & T5-sub@1?1/17 t.UsedVars1/18 e.eX_fix/15 >/14
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::call_left( context[15], context[16], context[13], context[14] );
      context[19] = refalrts::tvar_left( context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      // closed e.eX_fix as range 15
      //DEBUG: e.UsedVariables: 9
      //DEBUG: e.Index0: 11
      //DEBUG: t.UsedVars1: 18
      //DEBUG: e.eX_fix: 15
      //9: e.UsedVariables
      //11: e.Index0
      //15: e.eX_fix
      //18: t.UsedVars1
      //26: e.UsedVariables
      //30: e.Index0

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_T5m_sub_Z1C2]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_NewVarName]);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::copy_evar(vm, context[26], context[27], context[9], context[10]);
      refalrts::alloc_close_bracket(vm, context[28]);
      refalrts::alloc_char(vm, context[29], 'e');
      refalrts::copy_evar(vm, context[30], context[31], context[11], context[12]);
      refalrts::alloc_chars(vm, context[32], context[33], "_var", 4);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[23] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::link_brackets( context[25], context[28] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[20] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </20 & T5-sub@1?2/24 t.UsedVars2/25 e.eX_var/22 >/21
        context[22] = 0;
        context[23] = 0;
        context[24] = refalrts::call_left( context[22], context[23], context[20], context[21] );
        context[26] = refalrts::tvar_left( context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        // closed e.eX_var as range 22
        //DEBUG: e.UsedVariables: 9
        //DEBUG: e.Index0: 11
        //DEBUG: t.UsedVars1: 18
        //DEBUG: e.eX_fix: 15
        //DEBUG: t.UsedVars2: 25
        //DEBUG: e.eX_var: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} e.UsedVariables/9 {REMOVED TILE} t.UsedVars1/18 {REMOVED TILE} {REMOVED TILE} t.UsedVars2/25 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 HalfReuse: # Var/7 } Tile{ HalfReuse: 'e'/8 AsIs: e.Index0/11 HalfReuse: )/13 HalfReuse: (/17 } # Var/27 Tile{ AsIs: e.eX_fix/15 } Tile{ HalfReuse: )/14 HalfReuse: (/20 HalfReuse: # Var/24 } Tile{ AsIs: e.eX_var/22 } Tile{ HalfReuse: )/21 HalfReuse: )/1 ]] }
        refalrts::alloc_ident(vm, context[27], identifiers[ident_Var]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_ident(context[7], identifiers[ident_Var]);
        refalrts::reinit_char(context[8], 'e');
        refalrts::reinit_close_bracket(context[13]);
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_close_bracket(context[14]);
        refalrts::reinit_open_bracket(context[20]);
        refalrts::reinit_ident(context[24], identifiers[ident_Var]);
        refalrts::reinit_close_bracket(context[21]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[0], context[1] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::link_brackets( context[17], context[14] );
        refalrts::link_brackets( context[4], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[14], context[24] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[8], context[17] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[20], context[21]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[13], context[14]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & T5-sub@1/4 (/7 e.UsedVariables/5 )/8 e.Index0/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.Index0 as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.Index0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T5-sub@0/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: e.Index0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_T5m_sub_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_T5m_sub_Z1("T5-sub@1", COOKIE1_, COOKIE2_, func_gen_T5m_sub_Z1);


static refalrts::FnResult func_gen_T6_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & T6@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & T6@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & T6@1/4 (/7 e.UsedVariables/9 )/8 e.Items/13 (/19 # HOLE/21 (/24 # Var/26 'e'/27 e.Index/22 )/25 e.Pattern/17 )/20 e.ItemsAndHoles/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.UsedVariables as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_HOLE], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left( identifiers[ident_Var], context[22], context[23] );
      if( ! context[26] )
        continue;
      context[27] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[27] )
        continue;
      // closed e.Index as range 22
      // closed e.Pattern as range 17
      // closed e.ItemsAndHoles as range 15
      //DEBUG: e.UsedVariables: 9
      //DEBUG: e.Items: 13
      //DEBUG: e.Index: 22
      //DEBUG: e.Pattern: 17
      //DEBUG: e.ItemsAndHoles: 15
      //9: e.UsedVariables
      //13: e.Items
      //15: e.ItemsAndHoles
      //17: e.Pattern
      //22: e.Index
      //34: e.UsedVariables
      //38: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_T6_Z1C1]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_NewVarName]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_char(vm, context[37], 'e');
      refalrts::copy_evar(vm, context[38], context[39], context[22], context[23]);
      refalrts::alloc_chars(vm, context[40], context[41], "_fix", 4);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[31] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::link_brackets( context[33], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </28 & T6@1?1/32 t.UsedVars1/33 e.eX_fix/30 >/29
        context[30] = 0;
        context[31] = 0;
        context[32] = refalrts::call_left( context[30], context[31], context[28], context[29] );
        context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        // closed e.eX_fix as range 30
        //DEBUG: e.UsedVariables: 9
        //DEBUG: e.Items: 13
        //DEBUG: e.Index: 22
        //DEBUG: e.Pattern: 17
        //DEBUG: e.ItemsAndHoles: 15
        //DEBUG: t.UsedVars1: 33
        //DEBUG: e.eX_fix: 30
        //9: e.UsedVariables
        //13: e.Items
        //15: e.ItemsAndHoles
        //17: e.Pattern
        //22: e.Index
        //30: e.eX_fix
        //33: t.UsedVars1
        //40: t.UsedVars1
        //42: e.Index

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[37], functions[efunc_gen_T6_Z1C2]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_NewVarName]);
        refalrts::copy_stvar(vm, context[40], context[33]);
        refalrts::alloc_char(vm, context[41], 'e');
        refalrts::copy_evar(vm, context[42], context[43], context[22], context[23]);
        refalrts::alloc_chars(vm, context[44], context[45], "_rest", 5);
        refalrts::alloc_close_call(vm, context[46]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[35] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[38] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_stvar( res, context[40] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </35 & T6@1?2/39 t.UsedVars2/40 e.eX_rest/37 >/36
          context[37] = 0;
          context[38] = 0;
          context[39] = refalrts::call_left( context[37], context[38], context[35], context[36] );
          context[41] = refalrts::tvar_left( context[40], context[37], context[38] );
          if( ! context[41] )
            continue;
          // closed e.eX_rest as range 37
          //DEBUG: e.UsedVariables: 9
          //DEBUG: e.Items: 13
          //DEBUG: e.Index: 22
          //DEBUG: e.Pattern: 17
          //DEBUG: e.ItemsAndHoles: 15
          //DEBUG: t.UsedVars1: 33
          //DEBUG: e.eX_fix: 30
          //DEBUG: t.UsedVars2: 40
          //DEBUG: e.eX_rest: 37

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} e.UsedVariables/9 {REMOVED TILE} 'e'/27 e.Index/22 {REMOVED TILE} e.Pattern/17 )/20 {REMOVED TILE} </28 & T6@1?1/32 t.UsedVars1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 AsIs: e.Items/13 AsIs: (/19 Reuse: # Brackets/21 AsIs: (/24 AsIs: # Var/26 } Tile{ AsIs: e.eX_fix/30 } Tile{ HalfReuse: )/0 HalfReuse: )/4 AsIs: (/7 } Tile{ HalfReuse: # Var/25 } Tile{ AsIs: e.eX_rest/37 } Tile{ HalfReuse: )/29 AsIs: </35 Reuse: & PassiveHoles/39 AsIs: t.UsedVars2/40 } Tile{ AsIs: e.ItemsAndHoles/15 } Tile{ AsIs: >/36 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_ident(context[21], identifiers[ident_Brackets]);
          refalrts::reinit_close_bracket(context[0]);
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_ident(context[25], identifiers[ident_Var]);
          refalrts::reinit_close_bracket(context[29]);
          refalrts::update_name(context[39], functions[efunc_PassiveHoles]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[8], context[1] );
          refalrts::push_stack( vm, context[36] );
          refalrts::push_stack( vm, context[35] );
          refalrts::link_brackets( context[7], context[29] );
          refalrts::link_brackets( context[19], context[4] );
          refalrts::link_brackets( context[24], context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[36];
          res = refalrts::splice_evar( res, context[15], context[16] );
          res = refalrts::splice_evar( res, context[29], context[41] );
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[0], context[7] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[8], context[26] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[35], context[36]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[28], context[29]);
      continue;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & T6@1/4 (/7 e.UsedVariables/5 )/8 e.dyn0/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.dyn0 as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T6@0/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: e.dyn0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_T6_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_T6_Z1("T6@1", COOKIE1_, COOKIE2_, func_gen_T6_Z1);


static refalrts::FnResult func_gen_T7_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & T7@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & T7@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & T7@1/4 (/7 e.UsedVariables/9 )/8 e.Items/13 (/19 # HOLE/21 (/24 # Var/26 'e'/27 e.Index/22 )/25 e.Pattern/17 )/20 e.ItemsAndHoles/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.UsedVariables as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_HOLE], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = refalrts::ident_left( identifiers[ident_Var], context[22], context[23] );
      if( ! context[26] )
        continue;
      context[27] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[27] )
        continue;
      // closed e.Index as range 22
      // closed e.Pattern as range 17
      // closed e.ItemsAndHoles as range 15
      //DEBUG: e.UsedVariables: 9
      //DEBUG: e.Items: 13
      //DEBUG: e.Index: 22
      //DEBUG: e.Pattern: 17
      //DEBUG: e.ItemsAndHoles: 15
      //9: e.UsedVariables
      //13: e.Items
      //15: e.ItemsAndHoles
      //17: e.Pattern
      //22: e.Index
      //34: e.UsedVariables
      //38: e.Index

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_T7_Z1C1]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_NewVarName]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_char(vm, context[37], 'e');
      refalrts::copy_evar(vm, context[38], context[39], context[22], context[23]);
      refalrts::alloc_chars(vm, context[40], context[41], "_fix", 4);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[31] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::link_brackets( context[33], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </28 & T7@1?1/32 t.UsedVars1/33 e.eX_fix/30 >/29
        context[30] = 0;
        context[31] = 0;
        context[32] = refalrts::call_left( context[30], context[31], context[28], context[29] );
        context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        // closed e.eX_fix as range 30
        //DEBUG: e.UsedVariables: 9
        //DEBUG: e.Items: 13
        //DEBUG: e.Index: 22
        //DEBUG: e.Pattern: 17
        //DEBUG: e.ItemsAndHoles: 15
        //DEBUG: t.UsedVars1: 33
        //DEBUG: e.eX_fix: 30
        //9: e.UsedVariables
        //13: e.Items
        //15: e.ItemsAndHoles
        //17: e.Pattern
        //22: e.Index
        //30: e.eX_fix
        //33: t.UsedVars1
        //40: t.UsedVars1
        //42: e.Index

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[37], functions[efunc_gen_T7_Z1C2]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_NewVarName]);
        refalrts::copy_stvar(vm, context[40], context[33]);
        refalrts::alloc_char(vm, context[41], 'e');
        refalrts::copy_evar(vm, context[42], context[43], context[22], context[23]);
        refalrts::alloc_chars(vm, context[44], context[45], "_rest", 5);
        refalrts::alloc_close_call(vm, context[46]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[35] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[38] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_stvar( res, context[40] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </35 & T7@1?2/39 t.UsedVars2/40 e.eX_rest/37 >/36
          context[37] = 0;
          context[38] = 0;
          context[39] = refalrts::call_left( context[37], context[38], context[35], context[36] );
          context[41] = refalrts::tvar_left( context[40], context[37], context[38] );
          if( ! context[41] )
            continue;
          // closed e.eX_rest as range 37
          //DEBUG: e.UsedVariables: 9
          //DEBUG: e.Items: 13
          //DEBUG: e.Index: 22
          //DEBUG: e.Pattern: 17
          //DEBUG: e.ItemsAndHoles: 15
          //DEBUG: t.UsedVars1: 33
          //DEBUG: e.eX_fix: 30
          //DEBUG: t.UsedVars2: 40
          //DEBUG: e.eX_rest: 37

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & T7@1/4 (/7 e.UsedVariables/9 {REMOVED TILE} {REMOVED TILE} 'e'/27 e.Index/22 )/25 e.Pattern/17 {REMOVED TILE} {REMOVED TILE} </28 & T7@1?1/32 t.UsedVars1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 AsIs: e.Items/13 AsIs: (/19 Reuse: # Var/21 } Tile{ AsIs: e.eX_fix/30 } Tile{ AsIs: )/20 } Tile{ AsIs: (/24 AsIs: # Var/26 } Tile{ AsIs: e.eX_rest/37 } Tile{ HalfReuse: )/29 AsIs: </35 Reuse: & PassiveHoles/39 AsIs: t.UsedVars2/40 } Tile{ AsIs: e.ItemsAndHoles/15 } Tile{ AsIs: >/36 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_ident(context[21], identifiers[ident_Var]);
          refalrts::reinit_close_bracket(context[29]);
          refalrts::update_name(context[39], functions[efunc_PassiveHoles]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[8], context[1] );
          refalrts::push_stack( vm, context[36] );
          refalrts::push_stack( vm, context[35] );
          refalrts::link_brackets( context[24], context[29] );
          refalrts::link_brackets( context[19], context[20] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[36];
          res = refalrts::splice_evar( res, context[15], context[16] );
          res = refalrts::splice_evar( res, context[29], context[41] );
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[24], context[26] );
          res = refalrts::splice_elem( res, context[20] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[35], context[36]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[28], context[29]);
      continue;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & T7@1/4 (/7 e.UsedVariables/5 )/8 e.dyn0/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.dyn0 as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & T7@0/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: e.dyn0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_T7_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_T7_Z1("T7@1", COOKIE1_, COOKIE2_, func_gen_T7_Z1);


static refalrts::FnResult func_gen_DoPatternSteps_B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 113 elems
  refalrts::Iter context[113];
  refalrts::zeros( context, 113 );
  // </0 & DoPatternSteps:1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps:1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoPatternSteps:1@2/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 t.Item/28 e.Pattern/23 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.HolesAndItems-E as range 21
      context[29] = refalrts::tvar_left( context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      // closed e.Pattern as range 23
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.HolesAndItems-E: 21
      //DEBUG: t.Item: 28
      //DEBUG: e.Pattern: 23
      //13: e.X
      //15: e.X0
      //19: e.HolesAndItems-B
      //21: e.HolesAndItems-E
      //23: e.Pattern
      //28: t.Item
      //37: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoPatternSteps_B1Z2S1C1]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::copy_stvar(vm, context[37], context[28]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_stvar( res, context[37] );
      refalrts::link_brackets( context[35], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </30 & DoPatternSteps:1@2$1?1/34 # True/35 >/31
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::call_left( context[32], context[33], context[30], context[31] );
        context[35] = refalrts::ident_left( identifiers[ident_True], context[32], context[33] );
        if( ! context[35] )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        //DEBUG: e.X: 13
        //DEBUG: e.X0: 15
        //DEBUG: e.HolesAndItems-B: 19
        //DEBUG: e.HolesAndItems-E: 21
        //DEBUG: t.Item: 28
        //DEBUG: e.Pattern: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/11 e.X0/15 )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & DoPatternSteps:1@2$1?1/34 # True/35 >/31 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.X/13 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: t.Item/28 } Tile{ AsIs: (/25 AsIs: # HOLE/27 } Tile{ AsIs: e.Pattern/23 } Tile{ AsIs: )/26 AsIs: e.HolesAndItems-E/21 HalfReuse: >/30 } Tile{ ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
        refalrts::reinit_close_call(context[30]);
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[30] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[30], context[31]);
      continue;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@2/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 e.Pattern/23 t.Item/28 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.HolesAndItems-E as range 21
      context[29] = refalrts::tvar_right( context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      // closed e.Pattern as range 23
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.HolesAndItems-E: 21
      //DEBUG: t.Item: 28
      //DEBUG: e.Pattern: 23
      //13: e.X
      //15: e.X0
      //19: e.HolesAndItems-B
      //21: e.HolesAndItems-E
      //23: e.Pattern
      //28: t.Item
      //37: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoPatternSteps_B1Z2S2C1]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::copy_stvar(vm, context[37], context[28]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_stvar( res, context[37] );
      refalrts::link_brackets( context[35], context[36] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </30 & DoPatternSteps:1@2$2?1/34 # True/35 >/31
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::call_left( context[32], context[33], context[30], context[31] );
        context[35] = refalrts::ident_left( identifiers[ident_True], context[32], context[33] );
        if( ! context[35] )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        //DEBUG: e.X: 13
        //DEBUG: e.X0: 15
        //DEBUG: e.HolesAndItems-B: 19
        //DEBUG: e.HolesAndItems-E: 21
        //DEBUG: t.Item: 28
        //DEBUG: e.Pattern: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/11 e.X0/15 )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} </30 & DoPatternSteps:1@2$2?1/34 # True/35 >/31 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.X/13 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: (/25 AsIs: # HOLE/27 } Tile{ AsIs: e.Pattern/23 } Tile{ AsIs: )/26 } Tile{ AsIs: t.Item/28 } Tile{ AsIs: e.HolesAndItems-E/21 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[30], context[31]);
      continue;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@2/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 (/30 # Var/32 'e'/33 e.Index/28 )/31 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_Var], context[28], context[29] );
      if( ! context[32] )
        continue;
      context[33] = refalrts::char_left( 'e', context[28], context[29] );
      if( ! context[33] )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Index as range 28
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.Index: 28
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.X0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps:1@3/27 } Tile{ AsIs: (/25 } e.Index/28/34 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X/13 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: )/12 } (/36 e.HolesAndItems-E/21/37 Tile{ AsIs: )/26 } e.HolesAndItems-B/19/39 Tile{ AsIs: (/30 AsIs: # Var/32 AsIs: 'e'/33 AsIs: e.Index/28 AsIs: )/31 } Tile{ AsIs: e.HolesAndItems-E/21 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[34], context[35], context[28], context[29]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[21], context[22]);
      refalrts::copy_evar(vm, context[39], context[40], context[19], context[20]);
      refalrts::reinit_name(context[27], functions[efunc_gen_DoPatternSteps_B1Z3]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[36], context[26] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[25], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[4], context[11] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@2/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.X0/15 )/12 {REMOVED TILE} (/25 # HOLE/27 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@13/4 AsIs: (/7 AsIs: e.X/13 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@2/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 (/30 # Brackets/32 e.InBrackets/28 )/31 e.Pattern/23 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_Brackets], context[28], context[29] );
      if( ! context[32] )
        continue;
      // closed e.InBrackets as range 28
      // closed e.Pattern as range 23
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.InBrackets: 28
      //DEBUG: e.Pattern: 23
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.X0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.X/13 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: (/25 Reuse: # LeftBracket/27 HalfReuse: )/30 HalfReuse: (/32 } # HOLE/33 Tile{ AsIs: e.InBrackets/28 } Tile{ AsIs: )/12 } Tile{ AsIs: (/11 } # RightBracket/34 )/35 (/36 Tile{ HalfReuse: # HOLE/31 AsIs: e.Pattern/23 AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[33], identifiers[ident_HOLE]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_RightBracket]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::update_ident(context[27], identifiers[ident_LeftBracket]);
      refalrts::reinit_close_bracket(context[30]);
      refalrts::reinit_open_bracket(context[32]);
      refalrts::reinit_ident(context[31], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[36], context[26] );
      refalrts::link_brackets( context[11], context[35] );
      refalrts::link_brackets( context[32], context[12] );
      refalrts::link_brackets( context[25], context[30] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[25], context[32] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@2/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 e.Pattern/23 (/30 # Brackets/32 e.InBrackets/28 )/31 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_right( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_Brackets], context[28], context[29] );
      if( ! context[32] )
        continue;
      // closed e.Pattern as range 23
      // closed e.InBrackets as range 28
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.Pattern: 23
      //DEBUG: e.InBrackets: 28
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 } Tile{ AsIs: e.X/13 } Tile{ AsIs: )/12 AsIs: e.HolesAndItems-B/19 AsIs: (/25 AsIs: # HOLE/27 AsIs: e.Pattern/23 HalfReuse: )/30 HalfReuse: (/32 } # LeftBracket/33 Tile{ AsIs: )/8 AsIs: (/11 } # HOLE/34 Tile{ AsIs: e.InBrackets/28 } )/35 (/36 Tile{ HalfReuse: # RightBracket/31 AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[33], identifiers[ident_LeftBracket]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_HOLE]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::reinit_close_bracket(context[30]);
      refalrts::reinit_open_bracket(context[32]);
      refalrts::reinit_ident(context[31], identifiers[ident_RightBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[36], context[26] );
      refalrts::link_brackets( context[11], context[35] );
      refalrts::link_brackets( context[32], context[8] );
      refalrts::link_brackets( context[25], context[30] );
      refalrts::link_brackets( context[7], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[12], context[32] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@2/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 (/30 # ADT-Brackets/32 (/35 e.Name/33 )/36 e.InBrackets/28 )/31 e.Pattern/23 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[28], context[29] );
      if( ! context[32] )
        continue;
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::brackets_left( context[33], context[34], context[28], context[29] );
      if( ! context[35] )
        continue;
      refalrts::bracket_pointers(context[35], context[36]);
      // closed e.Name as range 33
      // closed e.InBrackets as range 28
      // closed e.Pattern as range 23
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.Name: 33
      //DEBUG: e.InBrackets: 28
      //DEBUG: e.Pattern: 23
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.X0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.X/13 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ HalfReuse: (/32 HalfReuse: # LeftADT/35 AsIs: e.Name/33 AsIs: )/36 } Tile{ AsIs: (/25 AsIs: # HOLE/27 } Tile{ AsIs: e.InBrackets/28 } Tile{ AsIs: )/12 } Tile{ AsIs: (/30 } # RightADT/37 )/38 Tile{ AsIs: (/11 } Tile{ HalfReuse: # HOLE/31 AsIs: e.Pattern/23 AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[37], identifiers[ident_RightADT]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::reinit_open_bracket(context[32]);
      refalrts::reinit_ident(context[35], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[31], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[26] );
      refalrts::link_brackets( context[30], context[38] );
      refalrts::link_brackets( context[25], context[12] );
      refalrts::link_brackets( context[32], context[36] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[32], context[36] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@2/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 e.Pattern/23 (/30 # ADT-Brackets/32 (/35 e.Name/33 )/36 e.InBrackets/28 )/31 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_right( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[28], context[29] );
      if( ! context[32] )
        continue;
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::brackets_left( context[33], context[34], context[28], context[29] );
      if( ! context[35] )
        continue;
      refalrts::bracket_pointers(context[35], context[36]);
      // closed e.Pattern as range 23
      // closed e.Name as range 33
      // closed e.InBrackets as range 28
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.Pattern: 23
      //DEBUG: e.Name: 33
      //DEBUG: e.InBrackets: 28
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X0/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 } Tile{ AsIs: e.X/13 } Tile{ AsIs: )/12 AsIs: e.HolesAndItems-B/19 AsIs: (/25 AsIs: # HOLE/27 AsIs: e.Pattern/23 HalfReuse: )/30 HalfReuse: (/32 HalfReuse: # LeftADT/35 AsIs: e.Name/33 AsIs: )/36 } (/37 # HOLE/38 Tile{ AsIs: e.InBrackets/28 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: # RightADT/31 AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_ident(vm, context[38], identifiers[ident_HOLE]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::reinit_close_bracket(context[30]);
      refalrts::reinit_open_bracket(context[32]);
      refalrts::reinit_ident(context[35], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[31], identifiers[ident_RightADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[26] );
      refalrts::link_brackets( context[37], context[8] );
      refalrts::link_brackets( context[32], context[36] );
      refalrts::link_brackets( context[25], context[30] );
      refalrts::link_brackets( context[7], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[12], context[36] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@2/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.HolesAndItems-B/19 (/25 # HOLE/27 (/30 # Var/32 'e'/33 e.Index/28 )/31 e.Pattern/23 )/26 e.HolesAndItems-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_HOLE], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = refalrts::ident_left( identifiers[ident_Var], context[28], context[29] );
      if( ! context[32] )
        continue;
      context[33] = refalrts::char_left( 'e', context[28], context[29] );
      if( ! context[33] )
        continue;
      // closed e.Index as range 28
      // closed e.Pattern as range 23
      // closed e.HolesAndItems-E as range 21
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.HolesAndItems-B: 19
      //DEBUG: e.Index: 28
      //DEBUG: e.Pattern: 23
      //DEBUG: e.HolesAndItems-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@14/4 AsIs: (/7 AsIs: e.X/13 AsIs: )/8 AsIs: (/11 } (/34 e.Index/28/35 Tile{ AsIs: )/12 } )/37 Tile{ AsIs: e.HolesAndItems-B/19 } Tile{ AsIs: (/30 Reuse: # OpenE/32 AsIs: 'e'/33 AsIs: e.Index/28 AsIs: )/31 } Tile{ AsIs: (/25 AsIs: # HOLE/27 } Tile{ AsIs: e.Pattern/23 } Tile{ AsIs: )/26 AsIs: e.HolesAndItems-E/21 AsIs: >/1 } (/38 </39 & Map@2/40 </41 & T1@1/42 (/43 e.X/13/44 )/46 Tile{ AsIs: e.X0/15 } >/47 </48 & T2@1/49 (/50 e.X/13/51 )/53 e.X0/15/54 >/56 </57 & T3@1/58 (/59 e.X/13/60 )/62 e.X0/15/63 >/65 </66 & T4@1/67 (/68 e.X/13/69 )/71 e.X0/15/72 >/74 </75 & T5@1/76 (/77 e.X/13/78 )/80 e.X0/15/81 >/83 </84 & T5-sub@1/85 (/86 e.X/13/87 )/89 e.Index/28/90 >/92 </93 & T6@1/94 (/95 e.X/13/96 )/98 e.X0/15/99 >/101 </102 & T7@1/103 (/104 e.X/13/105 )/107 e.X0/15/108 >/110 >/111 )/112 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::copy_evar(vm, context[35], context[36], context[28], context[29]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_gen_Map_Z2]);
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_gen_T1_Z1]);
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::copy_evar(vm, context[44], context[45], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_gen_T2_Z1]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::copy_evar(vm, context[51], context[52], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::copy_evar(vm, context[54], context[55], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_name(vm, context[58], functions[efunc_gen_T3_Z1]);
      refalrts::alloc_open_bracket(vm, context[59]);
      refalrts::copy_evar(vm, context[60], context[61], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[62]);
      refalrts::copy_evar(vm, context[63], context[64], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::alloc_open_call(vm, context[66]);
      refalrts::alloc_name(vm, context[67], functions[efunc_gen_T4_Z1]);
      refalrts::alloc_open_bracket(vm, context[68]);
      refalrts::copy_evar(vm, context[69], context[70], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[71]);
      refalrts::copy_evar(vm, context[72], context[73], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[74]);
      refalrts::alloc_open_call(vm, context[75]);
      refalrts::alloc_name(vm, context[76], functions[efunc_gen_T5_Z1]);
      refalrts::alloc_open_bracket(vm, context[77]);
      refalrts::copy_evar(vm, context[78], context[79], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[80]);
      refalrts::copy_evar(vm, context[81], context[82], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[83]);
      refalrts::alloc_open_call(vm, context[84]);
      refalrts::alloc_name(vm, context[85], functions[efunc_gen_T5m_sub_Z1]);
      refalrts::alloc_open_bracket(vm, context[86]);
      refalrts::copy_evar(vm, context[87], context[88], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[89]);
      refalrts::copy_evar(vm, context[90], context[91], context[28], context[29]);
      refalrts::alloc_close_call(vm, context[92]);
      refalrts::alloc_open_call(vm, context[93]);
      refalrts::alloc_name(vm, context[94], functions[efunc_gen_T6_Z1]);
      refalrts::alloc_open_bracket(vm, context[95]);
      refalrts::copy_evar(vm, context[96], context[97], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[98]);
      refalrts::copy_evar(vm, context[99], context[100], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[101]);
      refalrts::alloc_open_call(vm, context[102]);
      refalrts::alloc_name(vm, context[103], functions[efunc_gen_T7_Z1]);
      refalrts::alloc_open_bracket(vm, context[104]);
      refalrts::copy_evar(vm, context[105], context[106], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[107]);
      refalrts::copy_evar(vm, context[108], context[109], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[110]);
      refalrts::alloc_close_call(vm, context[111]);
      refalrts::alloc_close_bracket(vm, context[112]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::update_ident(context[32], identifiers[ident_OpenE]);
      refalrts::link_brackets( context[38], context[112] );
      refalrts::push_stack( vm, context[111] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[110] );
      refalrts::push_stack( vm, context[102] );
      refalrts::link_brackets( context[104], context[107] );
      refalrts::push_stack( vm, context[101] );
      refalrts::push_stack( vm, context[93] );
      refalrts::link_brackets( context[95], context[98] );
      refalrts::push_stack( vm, context[92] );
      refalrts::push_stack( vm, context[84] );
      refalrts::link_brackets( context[86], context[89] );
      refalrts::push_stack( vm, context[83] );
      refalrts::push_stack( vm, context[75] );
      refalrts::link_brackets( context[77], context[80] );
      refalrts::push_stack( vm, context[74] );
      refalrts::push_stack( vm, context[66] );
      refalrts::link_brackets( context[68], context[71] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[59], context[62] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[50], context[53] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[41] );
      refalrts::link_brackets( context[43], context[46] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[11], context[37] );
      refalrts::link_brackets( context[34], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[47], context[112] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[38], context[46] );
      res = refalrts::splice_evar( res, context[26], context[1] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@2/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.OnlyItems/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    // closed e.OnlyItems as range 17
    //DEBUG: e.X: 13
    //DEBUG: e.X0: 15
    //DEBUG: e.OnlyItems: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.X/13 {REMOVED TILE} e.X0/15 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 Tile{ AsIs: </0 Reuse: & BindBrackets/4 AsIs: (/7 } </20 Tile{ HalfReuse: & DoT0/12 AsIs: e.OnlyItems/17 AsIs: >/1 } Tile{ AsIs: )/8 HalfReuse: >/11 } )/21 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_BindBrackets]);
    refalrts::reinit_name(context[12], functions[efunc_DoT0]);
    refalrts::reinit_close_call(context[11]);
    refalrts::link_brackets( context[19], context[21] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps:1@2/4 (/7 e.X/5 )/8 (/11 e.X0/9 )/12 e.dyn/2 >/1
  // closed e.X as range 5
  // closed e.X0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.X: 5
  //DEBUG: e.X0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoPatternSteps:1@0/14 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.X/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoPatternSteps_B1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_B1Z2("DoPatternSteps:1@2", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_B1Z2);


static refalrts::FnResult func_gen_DoPatternSteps_B1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 177 elems
  refalrts::Iter context[177];
  refalrts::zeros( context, 177 );
  // </0 & DoPatternSteps:1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps:1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 t.Item/40 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      // closed e.HolesAndItems-E as range 33
      context[41] = refalrts::tvar_left( context[40], context[35], context[36] );
      if( ! context[41] )
        continue;
      // closed e.Pattern as range 35
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.HolesAndItems-E: 33
      //DEBUG: t.Item: 40
      //DEBUG: e.Pattern: 35
      //21: e.Index0
      //23: e.UsedVariables
      //25: e.HolesAndItems-B0
      //27: e.HolesAndItems-E0
      //31: e.HolesAndItems-B
      //33: e.HolesAndItems-E
      //35: e.Pattern
      //40: t.Item
      //49: e.Index0
      //53: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_DoPatternSteps_B1Z3S1C1]);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_evar(vm, context[49], context[50], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::copy_stvar(vm, context[53], context[40]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[42] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[45] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_stvar( res, context[53] );
      refalrts::link_brackets( context[47], context[52] );
      res = refalrts::splice_elem( res, context[52] );
      refalrts::link_brackets( context[48], context[51] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[42] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </42 & DoPatternSteps:1@3$1?1/46 # True/47 >/43
        context[44] = 0;
        context[45] = 0;
        context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
        context[47] = refalrts::ident_left( identifiers[ident_True], context[44], context[45] );
        if( ! context[47] )
          continue;
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        //DEBUG: e.Index0: 21
        //DEBUG: e.UsedVariables: 23
        //DEBUG: e.HolesAndItems-B0: 25
        //DEBUG: e.HolesAndItems-E0: 27
        //DEBUG: e.HolesAndItems-B: 31
        //DEBUG: e.HolesAndItems-E: 33
        //DEBUG: t.Item: 40
        //DEBUG: e.Pattern: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & DoPatternSteps:1@3/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 )/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & DoPatternSteps:1@3$1?1/46 # True/47 >/43 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/16 HalfReuse: )/19 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: t.Item/40 } Tile{ AsIs: (/37 AsIs: # HOLE/39 } Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/38 AsIs: e.HolesAndItems-E/33 HalfReuse: >/42 } Tile{ ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
        refalrts::reinit_close_bracket(context[19]);
        refalrts::reinit_close_call(context[42]);
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[15], context[19] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[38], context[42] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[37], context[39] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[16], context[19] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[42], context[43]);
      continue;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 e.Pattern/35 t.Item/40 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      // closed e.HolesAndItems-E as range 33
      context[41] = refalrts::tvar_right( context[40], context[35], context[36] );
      if( ! context[41] )
        continue;
      // closed e.Pattern as range 35
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.HolesAndItems-E: 33
      //DEBUG: t.Item: 40
      //DEBUG: e.Pattern: 35
      //21: e.Index0
      //23: e.UsedVariables
      //25: e.HolesAndItems-B0
      //27: e.HolesAndItems-E0
      //31: e.HolesAndItems-B
      //33: e.HolesAndItems-E
      //35: e.Pattern
      //40: t.Item
      //49: e.Index0
      //53: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_DoPatternSteps_B1Z3S2C1]);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_evar(vm, context[49], context[50], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::copy_stvar(vm, context[53], context[40]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[42] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[45] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_stvar( res, context[53] );
      refalrts::link_brackets( context[47], context[52] );
      res = refalrts::splice_elem( res, context[52] );
      refalrts::link_brackets( context[48], context[51] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[42] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </42 & DoPatternSteps:1@3$2?1/46 # True/47 >/43
        context[44] = 0;
        context[45] = 0;
        context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
        context[47] = refalrts::ident_left( identifiers[ident_True], context[44], context[45] );
        if( ! context[47] )
          continue;
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        //DEBUG: e.Index0: 21
        //DEBUG: e.UsedVariables: 23
        //DEBUG: e.HolesAndItems-B0: 25
        //DEBUG: e.HolesAndItems-E0: 27
        //DEBUG: e.HolesAndItems-B: 31
        //DEBUG: e.HolesAndItems-E: 33
        //DEBUG: t.Item: 40
        //DEBUG: e.Pattern: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & DoPatternSteps:1@3/4 (/7 {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} </42 & DoPatternSteps:1@3$2?1/46 # True/47 >/43 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: (/19 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/16 } Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 AsIs: # HOLE/39 } Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/38 } Tile{ AsIs: t.Item/40 } Tile{ AsIs: e.HolesAndItems-E/33 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[15], context[20] );
        refalrts::link_brackets( context[19], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[20], context[39] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[42], context[43]);
      continue;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # Var/44 'e'/45 e.Index/40 )/43 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Var], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = refalrts::char_left( 'e', context[40], context[41] );
      if( ! context[45] )
        continue;
      if( ! refalrts::empty_seq( context[35], context[36] ) )
        continue;
      // closed e.Index as range 40
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Index: 40
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoPatternSteps:1@3/4 (/7 {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # HOLE/39 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@15/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: (/37 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/20 } Tile{ AsIs: )/16 AsIs: (/19 } e.Index/40/46 Tile{ AsIs: )/38 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: (/42 AsIs: # Var/44 AsIs: 'e'/45 AsIs: e.Index/40 AsIs: )/43 } Tile{ AsIs: e.HolesAndItems-E/33 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[46], context[47], context[40], context[41]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[19], context[38] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[37], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      if( ! refalrts::empty_seq( context[35], context[36] ) )
        continue;
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoPatternSteps:1@3/4 (/7 {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 )/20 {REMOVED TILE} (/37 # HOLE/39 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@16/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[38] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[38];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # Brackets/44 e.InBrackets/40 )/43 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      // closed e.InBrackets as range 40
      // closed e.Pattern as range 35
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.Pattern: 35
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } (/45 Tile{ AsIs: e.Index0/21 } )/46 Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 Reuse: # LeftBracket/39 HalfReuse: )/42 HalfReuse: (/44 } # HOLE/47 Tile{ AsIs: e.InBrackets/40 } Tile{ AsIs: )/16 AsIs: (/19 } # RightBracket/48 Tile{ HalfReuse: )/4 AsIs: (/7 } Tile{ HalfReuse: # HOLE/43 AsIs: e.Pattern/35 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_HOLE]);
      refalrts::alloc_ident(vm, context[48], identifiers[ident_RightBracket]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::update_ident(context[39], identifiers[ident_LeftBracket]);
      refalrts::reinit_close_bracket(context[42]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[43], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[38] );
      refalrts::link_brackets( context[19], context[4] );
      refalrts::link_brackets( context[44], context[16] );
      refalrts::link_brackets( context[37], context[42] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[20], context[44] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 e.Pattern/35 (/42 # Brackets/44 e.InBrackets/40 )/43 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_right( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      // closed e.Pattern as range 35
      // closed e.InBrackets as range 40
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Pattern: 35
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } (/45 Tile{ AsIs: e.Index0/21 } )/46 Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 AsIs: # HOLE/39 AsIs: e.Pattern/35 HalfReuse: )/42 HalfReuse: (/44 } # LeftBracket/47 Tile{ AsIs: )/16 AsIs: (/19 } # HOLE/48 Tile{ AsIs: e.InBrackets/40 } Tile{ HalfReuse: )/4 AsIs: (/7 } Tile{ HalfReuse: # RightBracket/43 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_LeftBracket]);
      refalrts::alloc_ident(vm, context[48], identifiers[ident_HOLE]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::reinit_close_bracket(context[42]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[43], identifiers[ident_RightBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[38] );
      refalrts::link_brackets( context[19], context[4] );
      refalrts::link_brackets( context[44], context[16] );
      refalrts::link_brackets( context[37], context[42] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[20], context[44] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # ADT-Brackets/44 (/47 e.Name/45 )/48 e.InBrackets/40 )/43 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[40], context[41] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.Name as range 45
      // closed e.InBrackets as range 40
      // closed e.Pattern as range 35
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Name: 45
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.Pattern: 35
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/48 } Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 Reuse: # LeftADT/39 } Tile{ AsIs: e.Name/45 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ HalfReuse: # HOLE/4 } Tile{ AsIs: e.InBrackets/40 } )/49 Tile{ AsIs: (/42 Reuse: # RightADT/44 HalfReuse: )/47 } (/50 Tile{ HalfReuse: # HOLE/43 AsIs: e.Pattern/35 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::update_ident(context[39], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[4], identifiers[ident_HOLE]);
      refalrts::update_ident(context[44], identifiers[ident_RightADT]);
      refalrts::reinit_close_bracket(context[47]);
      refalrts::reinit_ident(context[43], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[50], context[38] );
      refalrts::link_brackets( context[42], context[47] );
      refalrts::link_brackets( context[19], context[49] );
      refalrts::link_brackets( context[37], context[16] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::link_brackets( context[7], context[48] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[42], context[47] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[20], context[39] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 e.Pattern/35 (/42 # ADT-Brackets/44 (/47 e.Name/45 )/48 e.InBrackets/40 )/43 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_right( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[40], context[41] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.Pattern as range 35
      // closed e.Name as range 45
      // closed e.InBrackets as range 40
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Pattern: 35
      //DEBUG: e.Name: 45
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Index0/21 } Tile{ HalfReuse: )/4 } Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 AsIs: # HOLE/39 AsIs: e.Pattern/35 HalfReuse: )/42 HalfReuse: (/44 HalfReuse: # LeftADT/47 AsIs: e.Name/45 AsIs: )/48 } (/49 # HOLE/50 Tile{ AsIs: e.InBrackets/40 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ HalfReuse: # RightADT/43 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_ident(vm, context[50], identifiers[ident_HOLE]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_bracket(context[42]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_ident(context[47], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[43], identifiers[ident_RightADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[38] );
      refalrts::link_brackets( context[49], context[16] );
      refalrts::link_brackets( context[44], context[48] );
      refalrts::link_brackets( context[37], context[42] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::link_brackets( context[7], context[4] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[20], context[48] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # Var/44 'e'/45 e.Index/40 )/43 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Var], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = refalrts::char_left( 'e', context[40], context[41] );
      if( ! context[45] )
        continue;
      // closed e.Index as range 40
      // closed e.Pattern as range 35
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Index: 40
      //DEBUG: e.Pattern: 35
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </46 & DoPatternSteps@14/47 (/48 Tile{ AsIs: e.UsedVariables/23 } Tile{ HalfReuse: )/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.Index0/21 AsIs: )/8 AsIs: (/11 } e.Index/40/49 Tile{ AsIs: )/12 } Tile{ AsIs: )/20 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: (/42 Reuse: # OpenE/44 AsIs: 'e'/45 AsIs: e.Index/40 AsIs: )/43 } Tile{ AsIs: (/37 AsIs: # HOLE/39 } Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 } (/51 </52 & Map@2/53 </54 & T1@1/55 (/56 e.UsedVariables/23/57 Tile{ HalfReuse: )/15 AsIs: e.HolesAndItems-B0/25 HalfReuse: (/16 HalfReuse: # Var/19 } 'e'/59 e.Index0/21/60 )/62 Tile{ AsIs: e.HolesAndItems-E0/27 } >/63 </64 & T2@1/65 (/66 e.UsedVariables/23/67 )/69 e.HolesAndItems-B0/25/70 (/72 # Var/73 'e'/74 e.Index0/21/75 )/77 e.HolesAndItems-E0/27/78 >/80 </81 & T3@1/82 (/83 e.UsedVariables/23/84 )/86 e.HolesAndItems-B0/25/87 (/89 # Var/90 'e'/91 e.Index0/21/92 )/94 e.HolesAndItems-E0/27/95 >/97 </98 & T4@1/99 (/100 e.UsedVariables/23/101 )/103 e.HolesAndItems-B0/25/104 (/106 # Var/107 'e'/108 e.Index0/21/109 )/111 e.HolesAndItems-E0/27/112 >/114 </115 & T5@1/116 (/117 e.UsedVariables/23/118 )/120 e.HolesAndItems-B0/25/121 (/123 # Var/124 'e'/125 e.Index0/21/126 )/128 e.HolesAndItems-E0/27/129 >/131 </132 & T5-sub@1/133 (/134 e.UsedVariables/23/135 )/137 e.Index/40/138 >/140 </141 & T6@1/142 (/143 e.UsedVariables/23/144 )/146 e.HolesAndItems-B0/25/147 (/149 # Var/150 'e'/151 e.Index0/21/152 )/154 e.HolesAndItems-E0/27/155 >/157 </158 & T7@1/159 (/160 e.UsedVariables/23/161 )/163 e.HolesAndItems-B0/25/164 (/166 # Var/167 'e'/168 e.Index0/21/169 )/171 e.HolesAndItems-E0/27/172 >/174 >/175 )/176 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_evar(vm, context[49], context[50], context[40], context[41]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_open_call(vm, context[52]);
      refalrts::alloc_name(vm, context[53], functions[efunc_gen_Map_Z2]);
      refalrts::alloc_open_call(vm, context[54]);
      refalrts::alloc_name(vm, context[55], functions[efunc_gen_T1_Z1]);
      refalrts::alloc_open_bracket(vm, context[56]);
      refalrts::copy_evar(vm, context[57], context[58], context[23], context[24]);
      refalrts::alloc_char(vm, context[59], 'e');
      refalrts::copy_evar(vm, context[60], context[61], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[62]);
      refalrts::alloc_close_call(vm, context[63]);
      refalrts::alloc_open_call(vm, context[64]);
      refalrts::alloc_name(vm, context[65], functions[efunc_gen_T2_Z1]);
      refalrts::alloc_open_bracket(vm, context[66]);
      refalrts::copy_evar(vm, context[67], context[68], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[69]);
      refalrts::copy_evar(vm, context[70], context[71], context[25], context[26]);
      refalrts::alloc_open_bracket(vm, context[72]);
      refalrts::alloc_ident(vm, context[73], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[74], 'e');
      refalrts::copy_evar(vm, context[75], context[76], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[77]);
      refalrts::copy_evar(vm, context[78], context[79], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[80]);
      refalrts::alloc_open_call(vm, context[81]);
      refalrts::alloc_name(vm, context[82], functions[efunc_gen_T3_Z1]);
      refalrts::alloc_open_bracket(vm, context[83]);
      refalrts::copy_evar(vm, context[84], context[85], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[86]);
      refalrts::copy_evar(vm, context[87], context[88], context[25], context[26]);
      refalrts::alloc_open_bracket(vm, context[89]);
      refalrts::alloc_ident(vm, context[90], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[91], 'e');
      refalrts::copy_evar(vm, context[92], context[93], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[94]);
      refalrts::copy_evar(vm, context[95], context[96], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[97]);
      refalrts::alloc_open_call(vm, context[98]);
      refalrts::alloc_name(vm, context[99], functions[efunc_gen_T4_Z1]);
      refalrts::alloc_open_bracket(vm, context[100]);
      refalrts::copy_evar(vm, context[101], context[102], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[103]);
      refalrts::copy_evar(vm, context[104], context[105], context[25], context[26]);
      refalrts::alloc_open_bracket(vm, context[106]);
      refalrts::alloc_ident(vm, context[107], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[108], 'e');
      refalrts::copy_evar(vm, context[109], context[110], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[111]);
      refalrts::copy_evar(vm, context[112], context[113], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[114]);
      refalrts::alloc_open_call(vm, context[115]);
      refalrts::alloc_name(vm, context[116], functions[efunc_gen_T5_Z1]);
      refalrts::alloc_open_bracket(vm, context[117]);
      refalrts::copy_evar(vm, context[118], context[119], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[120]);
      refalrts::copy_evar(vm, context[121], context[122], context[25], context[26]);
      refalrts::alloc_open_bracket(vm, context[123]);
      refalrts::alloc_ident(vm, context[124], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[125], 'e');
      refalrts::copy_evar(vm, context[126], context[127], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[128]);
      refalrts::copy_evar(vm, context[129], context[130], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[131]);
      refalrts::alloc_open_call(vm, context[132]);
      refalrts::alloc_name(vm, context[133], functions[efunc_gen_T5m_sub_Z1]);
      refalrts::alloc_open_bracket(vm, context[134]);
      refalrts::copy_evar(vm, context[135], context[136], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[137]);
      refalrts::copy_evar(vm, context[138], context[139], context[40], context[41]);
      refalrts::alloc_close_call(vm, context[140]);
      refalrts::alloc_open_call(vm, context[141]);
      refalrts::alloc_name(vm, context[142], functions[efunc_gen_T6_Z1]);
      refalrts::alloc_open_bracket(vm, context[143]);
      refalrts::copy_evar(vm, context[144], context[145], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[146]);
      refalrts::copy_evar(vm, context[147], context[148], context[25], context[26]);
      refalrts::alloc_open_bracket(vm, context[149]);
      refalrts::alloc_ident(vm, context[150], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[151], 'e');
      refalrts::copy_evar(vm, context[152], context[153], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[154]);
      refalrts::copy_evar(vm, context[155], context[156], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[157]);
      refalrts::alloc_open_call(vm, context[158]);
      refalrts::alloc_name(vm, context[159], functions[efunc_gen_T7_Z1]);
      refalrts::alloc_open_bracket(vm, context[160]);
      refalrts::copy_evar(vm, context[161], context[162], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[163]);
      refalrts::copy_evar(vm, context[164], context[165], context[25], context[26]);
      refalrts::alloc_open_bracket(vm, context[166]);
      refalrts::alloc_ident(vm, context[167], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[168], 'e');
      refalrts::copy_evar(vm, context[169], context[170], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[171]);
      refalrts::copy_evar(vm, context[172], context[173], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[174]);
      refalrts::alloc_close_call(vm, context[175]);
      refalrts::alloc_close_bracket(vm, context[176]);
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::update_ident(context[44], identifiers[ident_OpenE]);
      refalrts::reinit_close_bracket(context[15]);
      refalrts::reinit_open_bracket(context[16]);
      refalrts::reinit_ident(context[19], identifiers[ident_Var]);
      refalrts::link_brackets( context[51], context[176] );
      refalrts::push_stack( vm, context[175] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[174] );
      refalrts::push_stack( vm, context[158] );
      refalrts::link_brackets( context[166], context[171] );
      refalrts::link_brackets( context[160], context[163] );
      refalrts::push_stack( vm, context[157] );
      refalrts::push_stack( vm, context[141] );
      refalrts::link_brackets( context[149], context[154] );
      refalrts::link_brackets( context[143], context[146] );
      refalrts::push_stack( vm, context[140] );
      refalrts::push_stack( vm, context[132] );
      refalrts::link_brackets( context[134], context[137] );
      refalrts::push_stack( vm, context[131] );
      refalrts::push_stack( vm, context[115] );
      refalrts::link_brackets( context[123], context[128] );
      refalrts::link_brackets( context[117], context[120] );
      refalrts::push_stack( vm, context[114] );
      refalrts::push_stack( vm, context[98] );
      refalrts::link_brackets( context[106], context[111] );
      refalrts::link_brackets( context[100], context[103] );
      refalrts::push_stack( vm, context[97] );
      refalrts::push_stack( vm, context[81] );
      refalrts::link_brackets( context[89], context[94] );
      refalrts::link_brackets( context[83], context[86] );
      refalrts::push_stack( vm, context[80] );
      refalrts::push_stack( vm, context[64] );
      refalrts::link_brackets( context[72], context[77] );
      refalrts::link_brackets( context[66], context[69] );
      refalrts::push_stack( vm, context[63] );
      refalrts::push_stack( vm, context[54] );
      refalrts::link_brackets( context[16], context[62] );
      refalrts::link_brackets( context[56], context[15] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[46] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[4], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[48], context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[63], context[176] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[59], context[62] );
      res = refalrts::splice_evar( res, context[15], context[19] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[51], context[56] );
      res = refalrts::splice_evar( res, context[38], context[1] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[46], context[48] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.OnlyItems/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    // closed e.OnlyItems as range 29
    //DEBUG: e.Index0: 21
    //DEBUG: e.UsedVariables: 23
    //DEBUG: e.HolesAndItems-B0: 25
    //DEBUG: e.HolesAndItems-E0: 27
    //DEBUG: e.OnlyItems: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Index0/21 {REMOVED TILE} {REMOVED TILE} e.UsedVariables/23 {REMOVED TILE} (/15 e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 } Tile{ AsIs: </0 Reuse: & BindBrackets/4 AsIs: (/7 } Tile{ HalfReuse: </8 } Tile{ HalfReuse: & DoT0/20 AsIs: e.OnlyItems/29 AsIs: >/1 } Tile{ AsIs: )/16 HalfReuse: >/19 } Tile{ AsIs: )/12 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_BindBrackets]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[20], functions[efunc_DoT0]);
    refalrts::reinit_close_call(context[19]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[16] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[20], context[1] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps:1@3/4 (/7 e.Index0/5 )/8 (/11 e.UsedVariables/9 )/12 (/15 e.HolesAndItems-B0/13 )/16 (/19 e.HolesAndItems-E0/17 )/20 e.dyn/2 >/1
  // closed e.Index0 as range 5
  // closed e.UsedVariables as range 9
  // closed e.HolesAndItems-B0 as range 13
  // closed e.HolesAndItems-E0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.Index0: 5
  //DEBUG: e.UsedVariables: 9
  //DEBUG: e.HolesAndItems-B0: 13
  //DEBUG: e.HolesAndItems-E0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1@0/4 AsIs: (/7 } (/21 Tile{ AsIs: e.Index0/5 } )/22 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.UsedVariables/9 AsIs: )/12 AsIs: (/15 AsIs: e.HolesAndItems-B0/13 HalfReuse: (/16 HalfReuse: # Var/19 } 'e'/23 e.Index0/5/24 )/26 Tile{ AsIs: e.HolesAndItems-E0/17 } Tile{ AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_char(vm, context[23], 'e');
  refalrts::copy_evar(vm, context[24], context[25], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1Z0]);
  refalrts::reinit_open_bracket(context[16]);
  refalrts::reinit_ident(context[19], identifiers[ident_Var]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[20] );
  refalrts::link_brackets( context[16], context[26] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[20];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[23], context[26] );
  res = refalrts::splice_evar( res, context[8], context[19] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_B1Z3("DoPatternSteps:1@3", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_B1Z3);


static refalrts::FnResult func_gen_DoPatternSteps_B1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 129 elems
  refalrts::Iter context[129];
  refalrts::zeros( context, 129 );
  // </0 & DoPatternSteps:1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps:1@4/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/17 )/8 (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 t.Item/34 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.HolesAndItems-B0 as range 19
    // closed e.HolesAndItems-E0 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      // closed e.HolesAndItems-E as range 27
      context[35] = refalrts::tvar_left( context[34], context[29], context[30] );
      if( ! context[35] )
        continue;
      // closed e.Pattern as range 29
      //DEBUG: e.UsedVariables: 17
      //DEBUG: e.HolesAndItems-B0: 19
      //DEBUG: e.HolesAndItems-E0: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.HolesAndItems-E: 27
      //DEBUG: t.Item: 34
      //DEBUG: e.Pattern: 29
      //17: e.UsedVariables
      //19: e.HolesAndItems-B0
      //21: e.HolesAndItems-E0
      //25: e.HolesAndItems-B
      //27: e.HolesAndItems-E
      //29: e.Pattern
      //34: t.Item
      //43: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_DoPatternSteps_B1Z4S1C1]);
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::copy_stvar(vm, context[43], context[34]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[36] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[39] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_stvar( res, context[43] );
      refalrts::link_brackets( context[41], context[42] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </36 & DoPatternSteps:1@4$1?1/40 # True/41 >/37
        context[38] = 0;
        context[39] = 0;
        context[40] = refalrts::call_left( context[38], context[39], context[36], context[37] );
        context[41] = refalrts::ident_left( identifiers[ident_True], context[38], context[39] );
        if( ! context[41] )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        //DEBUG: e.UsedVariables: 17
        //DEBUG: e.HolesAndItems-B0: 19
        //DEBUG: e.HolesAndItems-E0: 21
        //DEBUG: e.HolesAndItems-B: 25
        //DEBUG: e.HolesAndItems-E: 27
        //DEBUG: t.Item: 34
        //DEBUG: e.Pattern: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & DoPatternSteps:1@4$1?1/40 # True/41 >/37 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.UsedVariables/17 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: t.Item/34 } Tile{ AsIs: (/31 AsIs: # HOLE/33 } Tile{ AsIs: e.Pattern/29 } Tile{ AsIs: )/32 AsIs: e.HolesAndItems-E/27 HalfReuse: >/36 } Tile{ ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
        refalrts::reinit_close_call(context[36]);
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[36] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[31], context[33] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[36], context[37]);
      continue;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/17 )/8 (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 e.Pattern/29 t.Item/34 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.HolesAndItems-B0 as range 19
    // closed e.HolesAndItems-E0 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      // closed e.HolesAndItems-E as range 27
      context[35] = refalrts::tvar_right( context[34], context[29], context[30] );
      if( ! context[35] )
        continue;
      // closed e.Pattern as range 29
      //DEBUG: e.UsedVariables: 17
      //DEBUG: e.HolesAndItems-B0: 19
      //DEBUG: e.HolesAndItems-E0: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.HolesAndItems-E: 27
      //DEBUG: t.Item: 34
      //DEBUG: e.Pattern: 29
      //17: e.UsedVariables
      //19: e.HolesAndItems-B0
      //21: e.HolesAndItems-E0
      //25: e.HolesAndItems-B
      //27: e.HolesAndItems-E
      //29: e.Pattern
      //34: t.Item
      //43: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_DoPatternSteps_B1Z4S2C1]);
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::copy_stvar(vm, context[43], context[34]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[36] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[39] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_stvar( res, context[43] );
      refalrts::link_brackets( context[41], context[42] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </36 & DoPatternSteps:1@4$2?1/40 # True/41 >/37
        context[38] = 0;
        context[39] = 0;
        context[40] = refalrts::call_left( context[38], context[39], context[36], context[37] );
        context[41] = refalrts::ident_left( identifiers[ident_True], context[38], context[39] );
        if( ! context[41] )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        //DEBUG: e.UsedVariables: 17
        //DEBUG: e.HolesAndItems-B0: 19
        //DEBUG: e.HolesAndItems-E0: 21
        //DEBUG: e.HolesAndItems-B: 25
        //DEBUG: e.HolesAndItems-E: 27
        //DEBUG: t.Item: 34
        //DEBUG: e.Pattern: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} </36 & DoPatternSteps:1@4$2?1/40 # True/41 >/37 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.UsedVariables/17 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: (/31 AsIs: # HOLE/33 } Tile{ AsIs: e.Pattern/29 } Tile{ AsIs: )/32 } Tile{ AsIs: t.Item/34 } Tile{ AsIs: e.HolesAndItems-E/27 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[31], context[33] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[36], context[37]);
      continue;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/17 )/8 (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # Var/38 'e'/39 e.Index/34 )/37 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.HolesAndItems-B0 as range 19
    // closed e.HolesAndItems-E0 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Var], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = refalrts::char_left( 'e', context[34], context[35] );
      if( ! context[39] )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Index as range 34
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.UsedVariables: 17
      //DEBUG: e.HolesAndItems-B0: 19
      //DEBUG: e.HolesAndItems-E0: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Index: 34
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/19 {REMOVED TILE} e.HolesAndItems-E0/21 )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps:1@3/33 } Tile{ AsIs: (/31 } e.Index/34/40 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.UsedVariables/17 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: )/12 AsIs: (/15 } e.HolesAndItems-E/27/42 Tile{ AsIs: )/32 } e.HolesAndItems-B/25/44 Tile{ AsIs: (/36 AsIs: # Var/38 AsIs: 'e'/39 AsIs: e.Index/34 AsIs: )/37 } Tile{ AsIs: e.HolesAndItems-E/27 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[40], context[41], context[34], context[35]);
      refalrts::copy_evar(vm, context[42], context[43], context[27], context[28]);
      refalrts::copy_evar(vm, context[44], context[45], context[25], context[26]);
      refalrts::reinit_name(context[33], functions[efunc_gen_DoPatternSteps_B1Z3]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[15], context[32] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[31], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[4], context[11] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[33] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/17 )/8 (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.HolesAndItems-B0 as range 19
    // closed e.HolesAndItems-E0 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.UsedVariables: 17
      //DEBUG: e.HolesAndItems-B0: 19
      //DEBUG: e.HolesAndItems-E0: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 {REMOVED TILE} (/31 # HOLE/33 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@13/4 AsIs: (/7 AsIs: e.UsedVariables/17 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[32] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[32];
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/17 )/8 (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # Brackets/38 e.InBrackets/34 )/37 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.HolesAndItems-B0 as range 19
    // closed e.HolesAndItems-E0 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      // closed e.InBrackets as range 34
      // closed e.Pattern as range 29
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.UsedVariables: 17
      //DEBUG: e.HolesAndItems-B0: 19
      //DEBUG: e.HolesAndItems-E0: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.Pattern: 29
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/19 {REMOVED TILE} e.HolesAndItems-E0/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.UsedVariables/17 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: (/31 Reuse: # LeftBracket/33 HalfReuse: )/36 HalfReuse: (/38 } # HOLE/39 Tile{ AsIs: e.InBrackets/34 } Tile{ AsIs: )/12 AsIs: (/15 } # RightBracket/40 Tile{ AsIs: )/16 } Tile{ AsIs: (/11 } Tile{ HalfReuse: # HOLE/37 AsIs: e.Pattern/29 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[39], identifiers[ident_HOLE]);
      refalrts::alloc_ident(vm, context[40], identifiers[ident_RightBracket]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::update_ident(context[33], identifiers[ident_LeftBracket]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::reinit_open_bracket(context[38]);
      refalrts::reinit_ident(context[37], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[32] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[38], context[12] );
      refalrts::link_brackets( context[31], context[36] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[31], context[38] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/17 )/8 (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 e.Pattern/29 (/36 # Brackets/38 e.InBrackets/34 )/37 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.HolesAndItems-B0 as range 19
    // closed e.HolesAndItems-E0 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_right( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      // closed e.Pattern as range 29
      // closed e.InBrackets as range 34
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.UsedVariables: 17
      //DEBUG: e.HolesAndItems-B0: 19
      //DEBUG: e.HolesAndItems-E0: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Pattern: 29
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/19 {REMOVED TILE} e.HolesAndItems-E0/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 } Tile{ AsIs: e.UsedVariables/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 AsIs: # HOLE/33 AsIs: e.Pattern/29 HalfReuse: )/36 HalfReuse: (/38 } # LeftBracket/39 Tile{ AsIs: )/12 AsIs: (/15 } # HOLE/40 Tile{ AsIs: e.InBrackets/34 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: # RightBracket/37 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[39], identifiers[ident_LeftBracket]);
      refalrts::alloc_ident(vm, context[40], identifiers[ident_HOLE]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::reinit_open_bracket(context[38]);
      refalrts::reinit_ident(context[37], identifiers[ident_RightBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[32] );
      refalrts::link_brackets( context[15], context[8] );
      refalrts::link_brackets( context[38], context[12] );
      refalrts::link_brackets( context[31], context[36] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[16], context[38] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/17 )/8 (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # ADT-Brackets/38 (/41 e.Name/39 )/42 e.InBrackets/34 )/37 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.HolesAndItems-B0 as range 19
    // closed e.HolesAndItems-E0 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[34], context[35] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      // closed e.Name as range 39
      // closed e.InBrackets as range 34
      // closed e.Pattern as range 29
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.UsedVariables: 17
      //DEBUG: e.HolesAndItems-B0: 19
      //DEBUG: e.HolesAndItems-E0: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Name: 39
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.Pattern: 29
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/19 {REMOVED TILE} e.HolesAndItems-E0/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 AsIs: e.UsedVariables/17 AsIs: )/8 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ HalfReuse: (/38 HalfReuse: # LeftADT/41 AsIs: e.Name/39 AsIs: )/42 } Tile{ AsIs: (/31 AsIs: # HOLE/33 } Tile{ AsIs: e.InBrackets/34 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ HalfReuse: # RightADT/11 } Tile{ AsIs: )/16 } Tile{ AsIs: (/36 } Tile{ HalfReuse: # HOLE/37 AsIs: e.Pattern/29 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::reinit_open_bracket(context[38]);
      refalrts::reinit_ident(context[41], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[11], identifiers[ident_RightADT]);
      refalrts::reinit_ident(context[37], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[36], context[32] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[31], context[12] );
      refalrts::link_brackets( context[38], context[42] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[31], context[33] );
      res = refalrts::splice_evar( res, context[38], context[42] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/17 )/8 (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 e.Pattern/29 (/36 # ADT-Brackets/38 (/41 e.Name/39 )/42 e.InBrackets/34 )/37 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.HolesAndItems-B0 as range 19
    // closed e.HolesAndItems-E0 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_right( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[34], context[35] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      // closed e.Pattern as range 29
      // closed e.Name as range 39
      // closed e.InBrackets as range 34
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.UsedVariables: 17
      //DEBUG: e.HolesAndItems-B0: 19
      //DEBUG: e.HolesAndItems-E0: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Pattern: 29
      //DEBUG: e.Name: 39
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/19 {REMOVED TILE} e.HolesAndItems-E0/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@11/4 AsIs: (/7 } Tile{ AsIs: e.UsedVariables/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 AsIs: # HOLE/33 AsIs: e.Pattern/29 HalfReuse: )/36 HalfReuse: (/38 HalfReuse: # LeftADT/41 AsIs: e.Name/39 AsIs: )/42 } Tile{ AsIs: (/11 } Tile{ HalfReuse: # HOLE/8 } Tile{ AsIs: e.InBrackets/34 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ HalfReuse: # RightADT/37 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z11]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::reinit_open_bracket(context[38]);
      refalrts::reinit_ident(context[41], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[8], identifiers[ident_HOLE]);
      refalrts::reinit_ident(context[37], identifiers[ident_RightADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[32] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[38], context[42] );
      refalrts::link_brackets( context[31], context[36] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[16], context[42] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/17 )/8 (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # Var/38 'e'/39 e.Index/34 )/37 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.HolesAndItems-B0 as range 19
    // closed e.HolesAndItems-E0 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Var], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = refalrts::char_left( 'e', context[34], context[35] );
      if( ! context[39] )
        continue;
      // closed e.Index as range 34
      // closed e.Pattern as range 29
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.UsedVariables: 17
      //DEBUG: e.HolesAndItems-B0: 19
      //DEBUG: e.HolesAndItems-E0: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Index: 34
      //DEBUG: e.Pattern: 29
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@14/4 AsIs: (/7 AsIs: e.UsedVariables/17 AsIs: )/8 AsIs: (/11 } (/40 e.Index/34/41 Tile{ AsIs: )/12 HalfReuse: )/15 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: (/36 Reuse: # OpenE/38 AsIs: 'e'/39 AsIs: e.Index/34 AsIs: )/37 } Tile{ AsIs: (/31 AsIs: # HOLE/33 } Tile{ AsIs: e.Pattern/29 } Tile{ AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 } (/43 </44 & Map@2/45 </46 & T1@1/47 (/48 e.UsedVariables/17/49 Tile{ AsIs: )/16 } Tile{ AsIs: e.HolesAndItems-B0/19 } Tile{ AsIs: e.HolesAndItems-E0/21 } >/51 </52 & T2@1/53 (/54 e.UsedVariables/17/55 )/57 e.HolesAndItems-B0/19/58 e.HolesAndItems-E0/21/60 >/62 </63 & T3@1/64 (/65 e.UsedVariables/17/66 )/68 e.HolesAndItems-B0/19/69 e.HolesAndItems-E0/21/71 >/73 </74 & T4@1/75 (/76 e.UsedVariables/17/77 )/79 e.HolesAndItems-B0/19/80 e.HolesAndItems-E0/21/82 >/84 </85 & T5@1/86 (/87 e.UsedVariables/17/88 )/90 e.HolesAndItems-B0/19/91 e.HolesAndItems-E0/21/93 >/95 </96 & T5-sub@1/97 (/98 e.UsedVariables/17/99 )/101 e.Index/34/102 >/104 </105 & T6@1/106 (/107 e.UsedVariables/17/108 )/110 e.HolesAndItems-B0/19/111 e.HolesAndItems-E0/21/113 >/115 </116 & T7@1/117 (/118 e.UsedVariables/17/119 )/121 e.HolesAndItems-B0/19/122 e.HolesAndItems-E0/21/124 >/126 >/127 )/128 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::copy_evar(vm, context[41], context[42], context[34], context[35]);
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_gen_Map_Z2]);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_gen_T1_Z1]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_evar(vm, context[49], context[50], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_open_call(vm, context[52]);
      refalrts::alloc_name(vm, context[53], functions[efunc_gen_T2_Z1]);
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::copy_evar(vm, context[55], context[56], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[57]);
      refalrts::copy_evar(vm, context[58], context[59], context[19], context[20]);
      refalrts::copy_evar(vm, context[60], context[61], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[62]);
      refalrts::alloc_open_call(vm, context[63]);
      refalrts::alloc_name(vm, context[64], functions[efunc_gen_T3_Z1]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::copy_evar(vm, context[66], context[67], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[68]);
      refalrts::copy_evar(vm, context[69], context[70], context[19], context[20]);
      refalrts::copy_evar(vm, context[71], context[72], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[73]);
      refalrts::alloc_open_call(vm, context[74]);
      refalrts::alloc_name(vm, context[75], functions[efunc_gen_T4_Z1]);
      refalrts::alloc_open_bracket(vm, context[76]);
      refalrts::copy_evar(vm, context[77], context[78], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[79]);
      refalrts::copy_evar(vm, context[80], context[81], context[19], context[20]);
      refalrts::copy_evar(vm, context[82], context[83], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[84]);
      refalrts::alloc_open_call(vm, context[85]);
      refalrts::alloc_name(vm, context[86], functions[efunc_gen_T5_Z1]);
      refalrts::alloc_open_bracket(vm, context[87]);
      refalrts::copy_evar(vm, context[88], context[89], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[90]);
      refalrts::copy_evar(vm, context[91], context[92], context[19], context[20]);
      refalrts::copy_evar(vm, context[93], context[94], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[95]);
      refalrts::alloc_open_call(vm, context[96]);
      refalrts::alloc_name(vm, context[97], functions[efunc_gen_T5m_sub_Z1]);
      refalrts::alloc_open_bracket(vm, context[98]);
      refalrts::copy_evar(vm, context[99], context[100], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[101]);
      refalrts::copy_evar(vm, context[102], context[103], context[34], context[35]);
      refalrts::alloc_close_call(vm, context[104]);
      refalrts::alloc_open_call(vm, context[105]);
      refalrts::alloc_name(vm, context[106], functions[efunc_gen_T6_Z1]);
      refalrts::alloc_open_bracket(vm, context[107]);
      refalrts::copy_evar(vm, context[108], context[109], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[110]);
      refalrts::copy_evar(vm, context[111], context[112], context[19], context[20]);
      refalrts::copy_evar(vm, context[113], context[114], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[115]);
      refalrts::alloc_open_call(vm, context[116]);
      refalrts::alloc_name(vm, context[117], functions[efunc_gen_T7_Z1]);
      refalrts::alloc_open_bracket(vm, context[118]);
      refalrts::copy_evar(vm, context[119], context[120], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[121]);
      refalrts::copy_evar(vm, context[122], context[123], context[19], context[20]);
      refalrts::copy_evar(vm, context[124], context[125], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[126]);
      refalrts::alloc_close_call(vm, context[127]);
      refalrts::alloc_close_bracket(vm, context[128]);
      refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::reinit_close_bracket(context[15]);
      refalrts::update_ident(context[38], identifiers[ident_OpenE]);
      refalrts::link_brackets( context[43], context[128] );
      refalrts::push_stack( vm, context[127] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[126] );
      refalrts::push_stack( vm, context[116] );
      refalrts::link_brackets( context[118], context[121] );
      refalrts::push_stack( vm, context[115] );
      refalrts::push_stack( vm, context[105] );
      refalrts::link_brackets( context[107], context[110] );
      refalrts::push_stack( vm, context[104] );
      refalrts::push_stack( vm, context[96] );
      refalrts::link_brackets( context[98], context[101] );
      refalrts::push_stack( vm, context[95] );
      refalrts::push_stack( vm, context[85] );
      refalrts::link_brackets( context[87], context[90] );
      refalrts::push_stack( vm, context[84] );
      refalrts::push_stack( vm, context[74] );
      refalrts::link_brackets( context[76], context[79] );
      refalrts::push_stack( vm, context[73] );
      refalrts::push_stack( vm, context[63] );
      refalrts::link_brackets( context[65], context[68] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[52] );
      refalrts::link_brackets( context[54], context[57] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[46] );
      refalrts::link_brackets( context[48], context[16] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[11], context[15] );
      refalrts::link_brackets( context[40], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[51], context[128] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[43], context[48] );
      res = refalrts::splice_evar( res, context[32], context[1] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[31], context[33] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[40] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/17 )/8 (/11 e.HolesAndItems-B0/19 )/12 (/15 e.HolesAndItems-E0/21 )/16 e.OnlyItems/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.HolesAndItems-B0 as range 19
    // closed e.HolesAndItems-E0 as range 21
    // closed e.OnlyItems as range 23
    //DEBUG: e.UsedVariables: 17
    //DEBUG: e.HolesAndItems-B0: 19
    //DEBUG: e.HolesAndItems-E0: 21
    //DEBUG: e.OnlyItems: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.UsedVariables/17 {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/19 {REMOVED TILE} e.HolesAndItems-E0/21 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 } Tile{ AsIs: </0 Reuse: & BindBrackets/4 AsIs: (/7 } </25 Tile{ HalfReuse: & DoT0/16 AsIs: e.OnlyItems/23 AsIs: >/1 } Tile{ AsIs: )/12 HalfReuse: >/15 } Tile{ AsIs: )/8 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_BindBrackets]);
    refalrts::reinit_name(context[16], functions[efunc_DoT0]);
    refalrts::reinit_close_call(context[15]);
    refalrts::link_brackets( context[11], context[8] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps:1@4/4 (/7 e.UsedVariables/5 )/8 (/11 e.HolesAndItems-B0/9 )/12 (/15 e.HolesAndItems-E0/13 )/16 e.dyn/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.HolesAndItems-B0 as range 9
  // closed e.HolesAndItems-E0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.HolesAndItems-B0: 9
  //DEBUG: e.HolesAndItems-E0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & DoPatternSteps:1@0/15 } Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.HolesAndItems-B0/9 } Tile{ AsIs: e.HolesAndItems-E0/13 } Tile{ AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[12]);
  refalrts::reinit_name(context[15], functions[efunc_gen_DoPatternSteps_B1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_B1Z4("DoPatternSteps:1@4", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_B1Z4);


static refalrts::FnResult func_gen_DoPatternSteps_B1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 117 elems
  refalrts::Iter context[117];
  refalrts::zeros( context, 117 );
  // </0 & DoPatternSteps:1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps:1@5/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoPatternSteps:1@5/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 t.Item/34 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      // closed e.HolesAndItems-E as range 27
      context[35] = refalrts::tvar_left( context[34], context[29], context[30] );
      if( ! context[35] )
        continue;
      // closed e.Pattern as range 29
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.HolesAndItems-E: 27
      //DEBUG: t.Item: 34
      //DEBUG: e.Pattern: 29
      //17: e.X0
      //19: e.X
      //21: e.X1
      //25: e.HolesAndItems-B
      //27: e.HolesAndItems-E
      //29: e.Pattern
      //34: t.Item
      //42: e.X0
      //45: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_DoPatternSteps_B1Z5S1C1]);
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::copy_evar(vm, context[42], context[43], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::copy_stvar(vm, context[45], context[34]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[36] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[39] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_stvar( res, context[45] );
      refalrts::link_brackets( context[41], context[44] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </36 & DoPatternSteps:1@5$1?1/40 # True/41 >/37
        context[38] = 0;
        context[39] = 0;
        context[40] = refalrts::call_left( context[38], context[39], context[36], context[37] );
        context[41] = refalrts::ident_left( identifiers[ident_True], context[38], context[39] );
        if( ! context[41] )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        //DEBUG: e.X0: 17
        //DEBUG: e.X: 19
        //DEBUG: e.X1: 21
        //DEBUG: e.HolesAndItems-B: 25
        //DEBUG: e.HolesAndItems-E: 27
        //DEBUG: t.Item: 34
        //DEBUG: e.Pattern: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & DoPatternSteps:1@5/4 (/7 {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & DoPatternSteps:1@5$1?1/40 # True/41 >/37 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: t.Item/34 } Tile{ AsIs: (/31 AsIs: # HOLE/33 } Tile{ AsIs: e.Pattern/29 } Tile{ AsIs: )/32 AsIs: e.HolesAndItems-E/27 HalfReuse: >/36 } Tile{ ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
        refalrts::reinit_close_call(context[36]);
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[36] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[31], context[33] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[36], context[37]);
      continue;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@5/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 e.Pattern/29 t.Item/34 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      // closed e.HolesAndItems-E as range 27
      context[35] = refalrts::tvar_right( context[34], context[29], context[30] );
      if( ! context[35] )
        continue;
      // closed e.Pattern as range 29
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.HolesAndItems-E: 27
      //DEBUG: t.Item: 34
      //DEBUG: e.Pattern: 29
      //17: e.X0
      //19: e.X
      //21: e.X1
      //25: e.HolesAndItems-B
      //27: e.HolesAndItems-E
      //29: e.Pattern
      //34: t.Item
      //42: e.X0
      //45: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_DoPatternSteps_B1Z5S2C1]);
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::copy_evar(vm, context[42], context[43], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::copy_stvar(vm, context[45], context[34]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[36] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[39] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_stvar( res, context[45] );
      refalrts::link_brackets( context[41], context[44] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </36 & DoPatternSteps:1@5$2?1/40 # True/41 >/37
        context[38] = 0;
        context[39] = 0;
        context[40] = refalrts::call_left( context[38], context[39], context[36], context[37] );
        context[41] = refalrts::ident_left( identifiers[ident_True], context[38], context[39] );
        if( ! context[41] )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        //DEBUG: e.X0: 17
        //DEBUG: e.X: 19
        //DEBUG: e.X1: 21
        //DEBUG: e.HolesAndItems-B: 25
        //DEBUG: e.HolesAndItems-E: 27
        //DEBUG: t.Item: 34
        //DEBUG: e.Pattern: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & DoPatternSteps:1@5/4 (/7 {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} </36 & DoPatternSteps:1@5$2?1/40 # True/41 >/37 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 AsIs: # HOLE/33 } Tile{ AsIs: e.Pattern/29 } Tile{ AsIs: )/32 } Tile{ AsIs: t.Item/34 } Tile{ AsIs: e.HolesAndItems-E/27 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[16], context[33] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[36], context[37]);
      continue;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@5/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # Var/38 'e'/39 e.Index/34 )/37 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Var], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = refalrts::char_left( 'e', context[34], context[35] );
      if( ! context[39] )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Index as range 34
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Index: 34
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoPatternSteps:1@5/4 (/7 {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # HOLE/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: (/31 } e.Index/34/40 Tile{ AsIs: )/16 } Tile{ AsIs: )/32 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: (/36 AsIs: # Var/38 AsIs: 'e'/39 AsIs: e.Index/34 AsIs: )/37 } Tile{ AsIs: e.HolesAndItems-E/27 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[40], context[41], context[34], context[35]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[15], context[32] );
      refalrts::link_brackets( context[31], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@5/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoPatternSteps:1@5/4 (/7 {REMOVED TILE} {REMOVED TILE} e.X1/21 )/16 {REMOVED TILE} (/31 # HOLE/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/32 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: e.HolesAndItems-E/27 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[32] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@5/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # Brackets/38 e.InBrackets/34 )/37 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      // closed e.InBrackets as range 34
      // closed e.Pattern as range 29
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.Pattern: 29
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 Reuse: # LeftBracket/33 HalfReuse: )/36 HalfReuse: (/38 } # HOLE/39 Tile{ AsIs: e.InBrackets/34 } Tile{ HalfReuse: )/4 AsIs: (/7 } # RightBracket/40 )/41 (/42 Tile{ HalfReuse: # HOLE/37 AsIs: e.Pattern/29 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[39], identifiers[ident_HOLE]);
      refalrts::alloc_ident(vm, context[40], identifiers[ident_RightBracket]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::update_ident(context[33], identifiers[ident_LeftBracket]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::reinit_open_bracket(context[38]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[37], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[42], context[32] );
      refalrts::link_brackets( context[7], context[41] );
      refalrts::link_brackets( context[38], context[4] );
      refalrts::link_brackets( context[31], context[36] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_evar( res, context[40], context[42] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[16], context[38] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@5/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 e.Pattern/29 (/36 # Brackets/38 e.InBrackets/34 )/37 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_right( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      // closed e.Pattern as range 29
      // closed e.InBrackets as range 34
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Pattern: 29
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 AsIs: # HOLE/33 AsIs: e.Pattern/29 HalfReuse: )/36 HalfReuse: (/38 } # LeftBracket/39 Tile{ HalfReuse: )/4 AsIs: (/7 } # HOLE/40 Tile{ AsIs: e.InBrackets/34 } )/41 (/42 Tile{ HalfReuse: # RightBracket/37 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[39], identifiers[ident_LeftBracket]);
      refalrts::alloc_ident(vm, context[40], identifiers[ident_HOLE]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::reinit_open_bracket(context[38]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[37], identifiers[ident_RightBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[42], context[32] );
      refalrts::link_brackets( context[7], context[41] );
      refalrts::link_brackets( context[38], context[4] );
      refalrts::link_brackets( context[31], context[36] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[16], context[38] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@5/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # ADT-Brackets/38 (/41 e.Name/39 )/42 e.InBrackets/34 )/37 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[34], context[35] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      // closed e.Name as range 39
      // closed e.InBrackets as range 34
      // closed e.Pattern as range 29
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Name: 39
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.Pattern: 29
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 Reuse: # LeftADT/33 } Tile{ AsIs: e.Name/39 } Tile{ HalfReuse: )/4 AsIs: (/7 } # HOLE/43 Tile{ AsIs: e.InBrackets/34 } Tile{ AsIs: )/42 } Tile{ AsIs: (/36 Reuse: # RightADT/38 HalfReuse: )/41 } (/44 Tile{ HalfReuse: # HOLE/37 AsIs: e.Pattern/29 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[43], identifiers[ident_HOLE]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::update_ident(context[33], identifiers[ident_LeftADT]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::update_ident(context[38], identifiers[ident_RightADT]);
      refalrts::reinit_close_bracket(context[41]);
      refalrts::reinit_ident(context[37], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[44], context[32] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[7], context[42] );
      refalrts::link_brackets( context[31], context[4] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[36], context[41] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[16], context[33] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@5/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 e.Pattern/29 (/36 # ADT-Brackets/38 (/41 e.Name/39 )/42 e.InBrackets/34 )/37 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_right( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[34], context[35] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      // closed e.Pattern as range 29
      // closed e.Name as range 39
      // closed e.InBrackets as range 34
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Pattern: 29
      //DEBUG: e.Name: 39
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 AsIs: # HOLE/33 AsIs: e.Pattern/29 HalfReuse: )/36 HalfReuse: (/38 HalfReuse: # LeftADT/41 AsIs: e.Name/39 AsIs: )/42 } (/43 # HOLE/44 Tile{ AsIs: e.InBrackets/34 } Tile{ HalfReuse: )/4 AsIs: (/7 } Tile{ HalfReuse: # RightADT/37 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_ident(vm, context[44], identifiers[ident_HOLE]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::reinit_open_bracket(context[38]);
      refalrts::reinit_ident(context[41], identifiers[ident_LeftADT]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[37], identifiers[ident_RightADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[32] );
      refalrts::link_brackets( context[43], context[4] );
      refalrts::link_brackets( context[38], context[42] );
      refalrts::link_brackets( context[31], context[36] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[16], context[42] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@5/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # Var/38 'e'/39 e.Index/34 )/37 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Var], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = refalrts::char_left( 'e', context[34], context[35] );
      if( ! context[39] )
        continue;
      // closed e.Index as range 34
      // closed e.Pattern as range 29
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Index: 34
      //DEBUG: e.Pattern: 29
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </40 Tile{ HalfReuse: & DoPatternSteps@14/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } (/41 e.Index/34/42 )/44 Tile{ AsIs: )/16 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: (/36 Reuse: # OpenE/38 AsIs: 'e'/39 AsIs: e.Index/34 AsIs: )/37 } Tile{ AsIs: (/31 AsIs: # HOLE/33 } Tile{ AsIs: e.Pattern/29 } Tile{ AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 } (/45 </46 & Map@2/47 Tile{ AsIs: </0 Reuse: & T1@1/4 AsIs: (/7 } e.X/19/48 )/50 Tile{ AsIs: e.X1/21 } >/51 </52 & T2@1/53 (/54 e.X/19/55 )/57 e.X1/21/58 >/60 </61 & T3@1/62 (/63 e.X/19/64 )/66 e.X1/21/67 >/69 </70 & T4@1/71 (/72 e.X/19/73 )/75 e.X1/21/76 >/78 </79 & T5@1/80 (/81 e.X/19/82 )/84 e.X1/21/85 >/87 </88 & T5-sub@1/89 (/90 e.X/19/91 )/93 e.Index/34/94 >/96 </97 & T6@1/98 (/99 e.X/19/100 )/102 e.X1/21/103 >/105 </106 & T7@1/107 (/108 e.X/19/109 )/111 e.X1/21/112 >/114 >/115 )/116 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::copy_evar(vm, context[42], context[43], context[34], context[35]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_gen_Map_Z2]);
      refalrts::copy_evar(vm, context[48], context[49], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_open_call(vm, context[52]);
      refalrts::alloc_name(vm, context[53], functions[efunc_gen_T2_Z1]);
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::copy_evar(vm, context[55], context[56], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[57]);
      refalrts::copy_evar(vm, context[58], context[59], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::alloc_open_call(vm, context[61]);
      refalrts::alloc_name(vm, context[62], functions[efunc_gen_T3_Z1]);
      refalrts::alloc_open_bracket(vm, context[63]);
      refalrts::copy_evar(vm, context[64], context[65], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[66]);
      refalrts::copy_evar(vm, context[67], context[68], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::alloc_open_call(vm, context[70]);
      refalrts::alloc_name(vm, context[71], functions[efunc_gen_T4_Z1]);
      refalrts::alloc_open_bracket(vm, context[72]);
      refalrts::copy_evar(vm, context[73], context[74], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[75]);
      refalrts::copy_evar(vm, context[76], context[77], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[78]);
      refalrts::alloc_open_call(vm, context[79]);
      refalrts::alloc_name(vm, context[80], functions[efunc_gen_T5_Z1]);
      refalrts::alloc_open_bracket(vm, context[81]);
      refalrts::copy_evar(vm, context[82], context[83], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[84]);
      refalrts::copy_evar(vm, context[85], context[86], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[87]);
      refalrts::alloc_open_call(vm, context[88]);
      refalrts::alloc_name(vm, context[89], functions[efunc_gen_T5m_sub_Z1]);
      refalrts::alloc_open_bracket(vm, context[90]);
      refalrts::copy_evar(vm, context[91], context[92], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[93]);
      refalrts::copy_evar(vm, context[94], context[95], context[34], context[35]);
      refalrts::alloc_close_call(vm, context[96]);
      refalrts::alloc_open_call(vm, context[97]);
      refalrts::alloc_name(vm, context[98], functions[efunc_gen_T6_Z1]);
      refalrts::alloc_open_bracket(vm, context[99]);
      refalrts::copy_evar(vm, context[100], context[101], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[102]);
      refalrts::copy_evar(vm, context[103], context[104], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[105]);
      refalrts::alloc_open_call(vm, context[106]);
      refalrts::alloc_name(vm, context[107], functions[efunc_gen_T7_Z1]);
      refalrts::alloc_open_bracket(vm, context[108]);
      refalrts::copy_evar(vm, context[109], context[110], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[111]);
      refalrts::copy_evar(vm, context[112], context[113], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[114]);
      refalrts::alloc_close_call(vm, context[115]);
      refalrts::alloc_close_bracket(vm, context[116]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z14]);
      refalrts::update_ident(context[38], identifiers[ident_OpenE]);
      refalrts::update_name(context[4], functions[efunc_gen_T1_Z1]);
      refalrts::link_brackets( context[45], context[116] );
      refalrts::push_stack( vm, context[115] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[114] );
      refalrts::push_stack( vm, context[106] );
      refalrts::link_brackets( context[108], context[111] );
      refalrts::push_stack( vm, context[105] );
      refalrts::push_stack( vm, context[97] );
      refalrts::link_brackets( context[99], context[102] );
      refalrts::push_stack( vm, context[96] );
      refalrts::push_stack( vm, context[88] );
      refalrts::link_brackets( context[90], context[93] );
      refalrts::push_stack( vm, context[87] );
      refalrts::push_stack( vm, context[79] );
      refalrts::link_brackets( context[81], context[84] );
      refalrts::push_stack( vm, context[78] );
      refalrts::push_stack( vm, context[70] );
      refalrts::link_brackets( context[72], context[75] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[61] );
      refalrts::link_brackets( context[63], context[66] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[52] );
      refalrts::link_brackets( context[54], context[57] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[50] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[41], context[44] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[51], context[116] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[45], context[47] );
      res = refalrts::splice_evar( res, context[32], context[1] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[31], context[33] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[41], context[44] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_elem( res, context[40] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@5/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.OnlyItems/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    // closed e.OnlyItems as range 23
    //DEBUG: e.X0: 17
    //DEBUG: e.X: 19
    //DEBUG: e.X1: 21
    //DEBUG: e.OnlyItems: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.X0/17 {REMOVED TILE} {REMOVED TILE} e.X/19 {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 } Tile{ AsIs: </0 Reuse: & BindBrackets/4 AsIs: (/7 } </25 Tile{ HalfReuse: & DoT0/16 AsIs: e.OnlyItems/23 AsIs: >/1 } Tile{ AsIs: )/12 HalfReuse: >/15 } Tile{ AsIs: )/8 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_BindBrackets]);
    refalrts::reinit_name(context[16], functions[efunc_DoT0]);
    refalrts::reinit_close_call(context[15]);
    refalrts::link_brackets( context[11], context[8] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps:1@5/4 (/7 e.X0/5 )/8 (/11 e.X/9 )/12 (/15 e.X1/13 )/16 e.dyn/2 >/1
  // closed e.X0 as range 5
  // closed e.X as range 9
  // closed e.X1 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.X0: 5
  //DEBUG: e.X: 9
  //DEBUG: e.X1: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1@0/4 AsIs: (/7 AsIs: e.X0/5 AsIs: )/8 AsIs: (/11 AsIs: e.X/9 AsIs: )/12 AsIs: (/15 AsIs: e.X1/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_B1Z5("DoPatternSteps:1@5", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_B1Z5);


static refalrts::FnResult func_gen_DoPatternSteps_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & DoPatternSteps@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps@15/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoPatternSteps@15/4 (/7 e.X/17 )/8 (/11 e.X0/19 )/12 (/15 e.X1/21 )/16 e.X2/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X as range 17
    // closed e.X0 as range 19
    // closed e.X1 as range 21
    // closed e.X2 as range 23
    //DEBUG: e.X: 17
    //DEBUG: e.X0: 19
    //DEBUG: e.X1: 21
    //DEBUG: e.X2: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps:1@6/8 AsIs: (/11 AsIs: e.X0/19 AsIs: )/12 AsIs: (/15 AsIs: e.X1/21 AsIs: )/16 } (/25 Tile{ AsIs: e.X/17 } Tile{ HalfReuse: )/4 AsIs: (/7 } Tile{ AsIs: e.X2/23 } )/26 e.X2/23/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_B1Z6]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[26] );
    refalrts::link_brackets( context[25], context[4] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps@15/4 (/7 e.X/5 )/8 (/11 e.X0/9 )/12 (/15 e.X1/13 )/16 e.X2/2 >/1
  // closed e.X as range 5
  // closed e.X0 as range 9
  // closed e.X1 as range 13
  // closed e.X2 as range 2
  //DEBUG: e.X: 5
  //DEBUG: e.X0: 9
  //DEBUG: e.X1: 13
  //DEBUG: e.X2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@0/4 AsIs: (/7 AsIs: e.X/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0/9 HalfReuse: (/12 } Tile{ AsIs: e.X1/13 } Tile{ HalfReuse: )/15 } Tile{ AsIs: )/16 AsIs: e.X2/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z0]);
  refalrts::reinit_open_bracket(context[12]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_Z15("DoPatternSteps@15", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_Z15);


static refalrts::FnResult func_gen_DoPatternSteps_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoPatternSteps@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps@16/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoPatternSteps@16/4 (/7 e.UsedVariables/17 )/8 (/11 e.Index0/19 )/12 (/15 e.HolesAndItems-B/21 )/16 e.HolesAndItems-E/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.UsedVariables as range 17
    // closed e.Index0 as range 19
    // closed e.HolesAndItems-B as range 21
    // closed e.HolesAndItems-E as range 23
    //DEBUG: e.UsedVariables: 17
    //DEBUG: e.Index0: 19
    //DEBUG: e.HolesAndItems-B: 21
    //DEBUG: e.HolesAndItems-E: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps:1@7/8 AsIs: (/11 AsIs: e.Index0/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.UsedVariables/17 } Tile{ HalfReuse: )/4 AsIs: (/7 } e.HolesAndItems-B/21/25 Tile{ AsIs: )/16 } (/27 e.HolesAndItems-E/23/28 )/30 Tile{ AsIs: e.HolesAndItems-B/21 } Tile{ AsIs: e.HolesAndItems-E/23 } Tile{ AsIs: >/1 ]] }
    refalrts::copy_evar(vm, context[25], context[26], context[21], context[22]);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_B1Z7]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[27], context[30] );
    refalrts::link_brackets( context[7], context[16] );
    refalrts::link_brackets( context[15], context[4] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps@16/4 (/7 e.UsedVariables/5 )/8 (/11 e.Index0/9 )/12 (/15 e.HolesAndItems-B/13 )/16 e.HolesAndItems-E/2 >/1
  // closed e.UsedVariables as range 5
  // closed e.Index0 as range 9
  // closed e.HolesAndItems-B as range 13
  // closed e.HolesAndItems-E as range 2
  //DEBUG: e.UsedVariables: 5
  //DEBUG: e.Index0: 9
  //DEBUG: e.HolesAndItems-B: 13
  //DEBUG: e.HolesAndItems-E: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@0/4 AsIs: (/7 AsIs: e.UsedVariables/5 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: (/16 } Tile{ AsIs: e.Index0/9 } Tile{ AsIs: )/12 HalfReuse: )/15 } Tile{ AsIs: e.HolesAndItems-B/13 } Tile{ AsIs: e.HolesAndItems-E/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z0]);
  refalrts::reinit_open_bracket(context[16]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[15] );
  refalrts::link_brackets( context[16], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_Z16("DoPatternSteps@16", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_Z16);


static refalrts::FnResult func_gen_DoPatternSteps_B1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 123 elems
  refalrts::Iter context[123];
  refalrts::zeros( context, 123 );
  // </0 & DoPatternSteps:1@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps:1@6/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & DoPatternSteps:1@6/4 (/7 e.X0/21 )/8 (/11 e.X1/23 )/12 (/15 e.X/25 )/16 (/19 e.X2/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 t.Item/40 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.X0 as range 21
    // closed e.X1 as range 23
    // closed e.X as range 25
    // closed e.X2 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      // closed e.HolesAndItems-E as range 33
      context[41] = refalrts::tvar_left( context[40], context[35], context[36] );
      if( ! context[41] )
        continue;
      // closed e.Pattern as range 35
      //DEBUG: e.X0: 21
      //DEBUG: e.X1: 23
      //DEBUG: e.X: 25
      //DEBUG: e.X2: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.HolesAndItems-E: 33
      //DEBUG: t.Item: 40
      //DEBUG: e.Pattern: 35
      //21: e.X0
      //23: e.X1
      //25: e.X
      //27: e.X2
      //31: e.HolesAndItems-B
      //33: e.HolesAndItems-E
      //35: e.Pattern
      //40: t.Item
      //48: e.X0
      //51: e.X1
      //55: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_DoPatternSteps_B1Z6S1C1]);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::copy_evar(vm, context[48], context[49], context[21], context[22]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::copy_evar(vm, context[51], context[52], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::copy_stvar(vm, context[55], context[40]);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[42] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[45] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_stvar( res, context[55] );
      refalrts::link_brackets( context[47], context[54] );
      res = refalrts::splice_elem( res, context[54] );
      refalrts::link_brackets( context[50], context[53] );
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[42] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </42 & DoPatternSteps:1@6$1?1/46 # True/47 >/43
        context[44] = 0;
        context[45] = 0;
        context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
        context[47] = refalrts::ident_left( identifiers[ident_True], context[44], context[45] );
        if( ! context[47] )
          continue;
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        //DEBUG: e.X0: 21
        //DEBUG: e.X1: 23
        //DEBUG: e.X: 25
        //DEBUG: e.X2: 27
        //DEBUG: e.HolesAndItems-B: 31
        //DEBUG: e.HolesAndItems-E: 33
        //DEBUG: t.Item: 40
        //DEBUG: e.Pattern: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/15 {REMOVED TILE} {REMOVED TILE} e.X2/27 )/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & DoPatternSteps:1@6$1?1/46 # True/47 >/43 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@15/16 AsIs: (/19 } Tile{ AsIs: e.X/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X0/21 AsIs: )/8 AsIs: (/11 AsIs: e.X1/23 AsIs: )/12 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: t.Item/40 } Tile{ AsIs: (/37 AsIs: # HOLE/39 } Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/38 AsIs: e.HolesAndItems-E/33 HalfReuse: >/42 } Tile{ ]] }
        refalrts::reinit_name(context[16], functions[efunc_gen_DoPatternSteps_Z15]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_close_call(context[42]);
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[19], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[38], context[42] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[37], context[39] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[4], context[12] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[16], context[19] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[42], context[43]);
      continue;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@6/4 (/7 e.X0/21 )/8 (/11 e.X1/23 )/12 (/15 e.X/25 )/16 (/19 e.X2/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 e.Pattern/35 t.Item/40 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.X0 as range 21
    // closed e.X1 as range 23
    // closed e.X as range 25
    // closed e.X2 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      // closed e.HolesAndItems-E as range 33
      context[41] = refalrts::tvar_right( context[40], context[35], context[36] );
      if( ! context[41] )
        continue;
      // closed e.Pattern as range 35
      //DEBUG: e.X0: 21
      //DEBUG: e.X1: 23
      //DEBUG: e.X: 25
      //DEBUG: e.X2: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.HolesAndItems-E: 33
      //DEBUG: t.Item: 40
      //DEBUG: e.Pattern: 35
      //21: e.X0
      //23: e.X1
      //25: e.X
      //27: e.X2
      //31: e.HolesAndItems-B
      //33: e.HolesAndItems-E
      //35: e.Pattern
      //40: t.Item
      //48: e.X0
      //51: e.X1
      //55: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_DoPatternSteps_B1Z6S2C1]);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::copy_evar(vm, context[48], context[49], context[21], context[22]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::copy_evar(vm, context[51], context[52], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::copy_stvar(vm, context[55], context[40]);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[42] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[45] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_stvar( res, context[55] );
      refalrts::link_brackets( context[47], context[54] );
      res = refalrts::splice_elem( res, context[54] );
      refalrts::link_brackets( context[50], context[53] );
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[42] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </42 & DoPatternSteps:1@6$2?1/46 # True/47 >/43
        context[44] = 0;
        context[45] = 0;
        context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
        context[47] = refalrts::ident_left( identifiers[ident_True], context[44], context[45] );
        if( ! context[47] )
          continue;
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        //DEBUG: e.X0: 21
        //DEBUG: e.X1: 23
        //DEBUG: e.X: 25
        //DEBUG: e.X2: 27
        //DEBUG: e.HolesAndItems-B: 31
        //DEBUG: e.HolesAndItems-E: 33
        //DEBUG: t.Item: 40
        //DEBUG: e.Pattern: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 {REMOVED TILE} (/15 {REMOVED TILE} )/16 (/19 e.X2/27 )/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/43 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: </42 Reuse: & DoPatternSteps@15/46 HalfReuse: (/47 } Tile{ AsIs: e.X/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X0/21 AsIs: )/8 AsIs: (/11 AsIs: e.X1/23 AsIs: )/12 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: (/37 AsIs: # HOLE/39 } Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/38 } Tile{ AsIs: t.Item/40 } Tile{ AsIs: e.HolesAndItems-E/33 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[46], functions[efunc_gen_DoPatternSteps_Z15]);
        refalrts::reinit_open_bracket(context[47]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[42] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[47], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[37], context[39] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[4], context[12] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[42], context[47] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[42], context[43]);
      continue;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@6/4 (/7 e.X0/21 )/8 (/11 e.X1/23 )/12 (/15 e.X/25 )/16 (/19 e.X2/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # Var/44 'e'/45 e.Index/40 )/43 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.X0 as range 21
    // closed e.X1 as range 23
    // closed e.X as range 25
    // closed e.X2 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Var], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = refalrts::char_left( 'e', context[40], context[41] );
      if( ! context[45] )
        continue;
      if( ! refalrts::empty_seq( context[35], context[36] ) )
        continue;
      // closed e.Index as range 40
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.X0: 21
      //DEBUG: e.X1: 23
      //DEBUG: e.X: 25
      //DEBUG: e.X2: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Index: 40
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoPatternSteps:1@6/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X2/27 {REMOVED TILE} {REMOVED TILE} (/37 # HOLE/39 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@15/12 AsIs: (/15 AsIs: e.X/25 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.X0/21 } Tile{ AsIs: (/7 } Tile{ AsIs: e.X1/23 } Tile{ AsIs: )/20 } Tile{ AsIs: )/8 AsIs: (/11 } e.Index/40/46 Tile{ AsIs: )/38 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: (/42 AsIs: # Var/44 AsIs: 'e'/45 AsIs: e.Index/40 AsIs: )/43 } Tile{ AsIs: e.HolesAndItems-E/33 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[46], context[47], context[40], context[41]);
      refalrts::reinit_name(context[12], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[11], context[38] );
      refalrts::link_brackets( context[19], context[8] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[12], context[19] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@6/4 (/7 e.X0/21 )/8 (/11 e.X1/23 )/12 (/15 e.X/25 )/16 (/19 e.X2/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.X0 as range 21
    // closed e.X1 as range 23
    // closed e.X as range 25
    // closed e.X2 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      if( ! refalrts::empty_seq( context[35], context[36] ) )
        continue;
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.X0: 21
      //DEBUG: e.X1: 23
      //DEBUG: e.X: 25
      //DEBUG: e.X2: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/15 {REMOVED TILE} {REMOVED TILE} e.X2/27 )/20 {REMOVED TILE} (/37 # HOLE/39 )/38 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@15/16 AsIs: (/19 } Tile{ AsIs: e.X/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X0/21 AsIs: )/8 AsIs: (/11 AsIs: e.X1/23 AsIs: )/12 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: e.HolesAndItems-E/33 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_name(context[16], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[19], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@6/4 (/7 e.X0/21 )/8 (/11 e.X1/23 )/12 (/15 e.X/25 )/16 (/19 e.X2/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # Brackets/44 e.InBrackets/40 )/43 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.X0 as range 21
    // closed e.X1 as range 23
    // closed e.X as range 25
    // closed e.X2 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      // closed e.InBrackets as range 40
      // closed e.Pattern as range 35
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.X0: 21
      //DEBUG: e.X1: 23
      //DEBUG: e.X: 25
      //DEBUG: e.X2: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.Pattern: 35
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X2/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DoPatternSteps@15/45 Tile{ AsIs: (/15 } Tile{ AsIs: e.X/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X0/21 AsIs: )/8 AsIs: (/11 AsIs: e.X1/23 AsIs: )/12 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: (/37 Reuse: # LeftBracket/39 HalfReuse: )/42 HalfReuse: (/44 } # HOLE/46 Tile{ AsIs: e.InBrackets/40 } Tile{ AsIs: )/16 AsIs: (/19 } # RightBracket/47 Tile{ AsIs: )/20 } (/48 Tile{ HalfReuse: # HOLE/43 AsIs: e.Pattern/35 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::alloc_ident(vm, context[46], identifiers[ident_HOLE]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_RightBracket]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::update_ident(context[39], identifiers[ident_LeftBracket]);
      refalrts::reinit_close_bracket(context[42]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_ident(context[43], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[48], context[38] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[44], context[16] );
      refalrts::link_brackets( context[37], context[42] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[15], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[37], context[44] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_elem( res, context[45] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@6/4 (/7 e.X0/21 )/8 (/11 e.X1/23 )/12 (/15 e.X/25 )/16 (/19 e.X2/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 e.Pattern/35 (/42 # Brackets/44 e.InBrackets/40 )/43 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.X0 as range 21
    // closed e.X1 as range 23
    // closed e.X as range 25
    // closed e.X2 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_right( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      // closed e.Pattern as range 35
      // closed e.InBrackets as range 40
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.X0: 21
      //DEBUG: e.X1: 23
      //DEBUG: e.X: 25
      //DEBUG: e.X2: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Pattern: 35
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X2/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DoPatternSteps@15/45 Tile{ AsIs: (/15 } Tile{ AsIs: e.X/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X0/21 AsIs: )/8 AsIs: (/11 AsIs: e.X1/23 AsIs: )/12 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: (/37 AsIs: # HOLE/39 AsIs: e.Pattern/35 HalfReuse: )/42 HalfReuse: (/44 } # LeftBracket/46 Tile{ AsIs: )/16 AsIs: (/19 } # HOLE/47 Tile{ AsIs: e.InBrackets/40 } Tile{ AsIs: )/20 } (/48 Tile{ HalfReuse: # RightBracket/43 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[45], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::alloc_ident(vm, context[46], identifiers[ident_LeftBracket]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_HOLE]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_bracket(context[42]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_ident(context[43], identifiers[ident_RightBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[48], context[38] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[44], context[16] );
      refalrts::link_brackets( context[37], context[42] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[15], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[37], context[44] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_elem( res, context[45] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@6/4 (/7 e.X0/21 )/8 (/11 e.X1/23 )/12 (/15 e.X/25 )/16 (/19 e.X2/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # ADT-Brackets/44 (/47 e.Name/45 )/48 e.InBrackets/40 )/43 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.X0 as range 21
    // closed e.X1 as range 23
    // closed e.X as range 25
    // closed e.X2 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[40], context[41] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.Name as range 45
      // closed e.InBrackets as range 40
      // closed e.Pattern as range 35
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.X0: 21
      //DEBUG: e.X1: 23
      //DEBUG: e.X: 25
      //DEBUG: e.X2: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Name: 45
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.Pattern: 35
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X2/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DoPatternSteps@15/49 Tile{ AsIs: (/42 } Tile{ AsIs: e.X/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X0/21 AsIs: )/8 AsIs: (/11 AsIs: e.X1/23 AsIs: )/12 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ HalfReuse: (/44 HalfReuse: # LeftADT/47 AsIs: e.Name/45 AsIs: )/48 } Tile{ AsIs: (/37 AsIs: # HOLE/39 } Tile{ AsIs: e.InBrackets/40 } Tile{ AsIs: )/16 AsIs: (/19 } # RightADT/50 Tile{ AsIs: )/20 } Tile{ AsIs: (/15 } Tile{ HalfReuse: # HOLE/43 AsIs: e.Pattern/35 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[49], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::alloc_ident(vm, context[50], identifiers[ident_RightADT]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_ident(context[47], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[43], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[38] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[37], context[16] );
      refalrts::link_brackets( context[44], context[48] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[42], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      res = refalrts::splice_evar( res, context[44], context[48] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[49] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@6/4 (/7 e.X0/21 )/8 (/11 e.X1/23 )/12 (/15 e.X/25 )/16 (/19 e.X2/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 e.Pattern/35 (/42 # ADT-Brackets/44 (/47 e.Name/45 )/48 e.InBrackets/40 )/43 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.X0 as range 21
    // closed e.X1 as range 23
    // closed e.X as range 25
    // closed e.X2 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_right( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[40], context[41] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.Pattern as range 35
      // closed e.Name as range 45
      // closed e.InBrackets as range 40
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.X0: 21
      //DEBUG: e.X1: 23
      //DEBUG: e.X: 25
      //DEBUG: e.X2: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Pattern: 35
      //DEBUG: e.Name: 45
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X2/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@15/12 AsIs: (/15 AsIs: e.X/25 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.X0/21 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.X1/23 } Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 AsIs: # HOLE/39 AsIs: e.Pattern/35 HalfReuse: )/42 HalfReuse: (/44 HalfReuse: # LeftADT/47 AsIs: e.Name/45 AsIs: )/48 } (/49 # HOLE/50 Tile{ AsIs: e.InBrackets/40 } Tile{ HalfReuse: )/4 AsIs: (/7 } Tile{ HalfReuse: # RightADT/43 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_ident(vm, context[50], identifiers[ident_HOLE]);
      refalrts::reinit_name(context[12], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::reinit_close_bracket(context[42]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_ident(context[47], identifiers[ident_LeftADT]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[43], identifiers[ident_RightADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[38] );
      refalrts::link_brackets( context[49], context[4] );
      refalrts::link_brackets( context[44], context[48] );
      refalrts::link_brackets( context[37], context[42] );
      refalrts::link_brackets( context[11], context[20] );
      refalrts::link_brackets( context[19], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[20], context[48] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[12], context[19] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@6/4 (/7 e.X0/21 )/8 (/11 e.X1/23 )/12 (/15 e.X/25 )/16 (/19 e.X2/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # Var/44 'e'/45 e.Index/40 )/43 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.X0 as range 21
    // closed e.X1 as range 23
    // closed e.X as range 25
    // closed e.X2 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Var], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = refalrts::char_left( 'e', context[40], context[41] );
      if( ! context[45] )
        continue;
      // closed e.Index as range 40
      // closed e.Pattern as range 35
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.X0: 21
      //DEBUG: e.X1: 23
      //DEBUG: e.X: 25
      //DEBUG: e.X2: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Index: 40
      //DEBUG: e.Pattern: 35
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </46 Tile{ HalfReuse: & DoPatternSteps@15/12 AsIs: (/15 AsIs: e.X/25 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.X0/21 } (/47 Tile{ AsIs: e.X1/23 } )/48 Tile{ AsIs: )/8 AsIs: (/11 } e.Index/40/49 Tile{ AsIs: )/20 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: (/42 Reuse: # OpenE/44 AsIs: 'e'/45 AsIs: e.Index/40 AsIs: )/43 } Tile{ AsIs: (/37 AsIs: # HOLE/39 } Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 } (/51 </52 & Map@2/53 Tile{ AsIs: </0 Reuse: & T1@1/4 AsIs: (/7 } e.X/25/54 )/56 Tile{ AsIs: e.X2/27 } >/57 </58 & T2@1/59 (/60 e.X/25/61 )/63 e.X2/27/64 >/66 </67 & T3@1/68 (/69 e.X/25/70 )/72 e.X2/27/73 >/75 </76 & T4@1/77 (/78 e.X/25/79 )/81 e.X2/27/82 >/84 </85 & T5@1/86 (/87 e.X/25/88 )/90 e.X2/27/91 >/93 </94 & T5-sub@1/95 (/96 e.X/25/97 )/99 e.Index/40/100 >/102 </103 & T6@1/104 (/105 e.X/25/106 )/108 e.X2/27/109 >/111 </112 & T7@1/113 (/114 e.X/25/115 )/117 e.X2/27/118 >/120 >/121 )/122 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::copy_evar(vm, context[49], context[50], context[40], context[41]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_open_call(vm, context[52]);
      refalrts::alloc_name(vm, context[53], functions[efunc_gen_Map_Z2]);
      refalrts::copy_evar(vm, context[54], context[55], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_gen_T2_Z1]);
      refalrts::alloc_open_bracket(vm, context[60]);
      refalrts::copy_evar(vm, context[61], context[62], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[63]);
      refalrts::copy_evar(vm, context[64], context[65], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[66]);
      refalrts::alloc_open_call(vm, context[67]);
      refalrts::alloc_name(vm, context[68], functions[efunc_gen_T3_Z1]);
      refalrts::alloc_open_bracket(vm, context[69]);
      refalrts::copy_evar(vm, context[70], context[71], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[72]);
      refalrts::copy_evar(vm, context[73], context[74], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[75]);
      refalrts::alloc_open_call(vm, context[76]);
      refalrts::alloc_name(vm, context[77], functions[efunc_gen_T4_Z1]);
      refalrts::alloc_open_bracket(vm, context[78]);
      refalrts::copy_evar(vm, context[79], context[80], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[81]);
      refalrts::copy_evar(vm, context[82], context[83], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[84]);
      refalrts::alloc_open_call(vm, context[85]);
      refalrts::alloc_name(vm, context[86], functions[efunc_gen_T5_Z1]);
      refalrts::alloc_open_bracket(vm, context[87]);
      refalrts::copy_evar(vm, context[88], context[89], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[90]);
      refalrts::copy_evar(vm, context[91], context[92], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[93]);
      refalrts::alloc_open_call(vm, context[94]);
      refalrts::alloc_name(vm, context[95], functions[efunc_gen_T5m_sub_Z1]);
      refalrts::alloc_open_bracket(vm, context[96]);
      refalrts::copy_evar(vm, context[97], context[98], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[99]);
      refalrts::copy_evar(vm, context[100], context[101], context[40], context[41]);
      refalrts::alloc_close_call(vm, context[102]);
      refalrts::alloc_open_call(vm, context[103]);
      refalrts::alloc_name(vm, context[104], functions[efunc_gen_T6_Z1]);
      refalrts::alloc_open_bracket(vm, context[105]);
      refalrts::copy_evar(vm, context[106], context[107], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[108]);
      refalrts::copy_evar(vm, context[109], context[110], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[111]);
      refalrts::alloc_open_call(vm, context[112]);
      refalrts::alloc_name(vm, context[113], functions[efunc_gen_T7_Z1]);
      refalrts::alloc_open_bracket(vm, context[114]);
      refalrts::copy_evar(vm, context[115], context[116], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[117]);
      refalrts::copy_evar(vm, context[118], context[119], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[120]);
      refalrts::alloc_close_call(vm, context[121]);
      refalrts::alloc_close_bracket(vm, context[122]);
      refalrts::reinit_name(context[12], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::update_ident(context[44], identifiers[ident_OpenE]);
      refalrts::update_name(context[4], functions[efunc_gen_T1_Z1]);
      refalrts::link_brackets( context[51], context[122] );
      refalrts::push_stack( vm, context[121] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[120] );
      refalrts::push_stack( vm, context[112] );
      refalrts::link_brackets( context[114], context[117] );
      refalrts::push_stack( vm, context[111] );
      refalrts::push_stack( vm, context[103] );
      refalrts::link_brackets( context[105], context[108] );
      refalrts::push_stack( vm, context[102] );
      refalrts::push_stack( vm, context[94] );
      refalrts::link_brackets( context[96], context[99] );
      refalrts::push_stack( vm, context[93] );
      refalrts::push_stack( vm, context[85] );
      refalrts::link_brackets( context[87], context[90] );
      refalrts::push_stack( vm, context[84] );
      refalrts::push_stack( vm, context[76] );
      refalrts::link_brackets( context[78], context[81] );
      refalrts::push_stack( vm, context[75] );
      refalrts::push_stack( vm, context[67] );
      refalrts::link_brackets( context[69], context[72] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[58] );
      refalrts::link_brackets( context[60], context[63] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[56] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[46] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[11], context[20] );
      refalrts::link_brackets( context[19], context[8] );
      refalrts::link_brackets( context[47], context[48] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[57], context[122] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[51], context[53] );
      res = refalrts::splice_evar( res, context[38], context[1] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[12], context[19] );
      res = refalrts::splice_elem( res, context[46] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@6/4 (/7 e.X0/21 )/8 (/11 e.X1/23 )/12 (/15 e.X/25 )/16 (/19 e.X2/27 )/20 e.OnlyItems/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.X0 as range 21
    // closed e.X1 as range 23
    // closed e.X as range 25
    // closed e.X2 as range 27
    // closed e.OnlyItems as range 29
    //DEBUG: e.X0: 21
    //DEBUG: e.X1: 23
    //DEBUG: e.X: 25
    //DEBUG: e.X2: 27
    //DEBUG: e.OnlyItems: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.X0/21 {REMOVED TILE} {REMOVED TILE} e.X1/23 {REMOVED TILE} (/15 e.X/25 {REMOVED TILE} e.X2/27 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 } Tile{ AsIs: </0 Reuse: & BindBrackets/4 AsIs: (/7 } Tile{ HalfReuse: </8 } Tile{ HalfReuse: & DoT0/20 AsIs: e.OnlyItems/29 AsIs: >/1 } Tile{ AsIs: )/16 HalfReuse: >/19 } Tile{ AsIs: )/12 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_BindBrackets]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[20], functions[efunc_DoT0]);
    refalrts::reinit_close_call(context[19]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[16] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[20], context[1] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps:1@6/4 (/7 e.X0/5 )/8 (/11 e.X1/9 )/12 (/15 e.X/13 )/16 (/19 e.X2/17 )/20 e.dyn/2 >/1
  // closed e.X0 as range 5
  // closed e.X1 as range 9
  // closed e.X as range 13
  // closed e.X2 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.X0: 5
  //DEBUG: e.X1: 9
  //DEBUG: e.X: 13
  //DEBUG: e.X2: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1@0/4 AsIs: (/7 AsIs: e.X0/5 HalfReuse: (/8 } Tile{ AsIs: e.X1/9 } Tile{ HalfReuse: )/11 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.X/13 AsIs: )/16 AsIs: (/19 AsIs: e.X2/17 AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_B1Z6("DoPatternSteps:1@6", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_B1Z6);


static refalrts::FnResult func_gen_DoPatternSteps_B1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 135 elems
  refalrts::Iter context[135];
  refalrts::zeros( context, 135 );
  // </0 & DoPatternSteps:1@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps:1@7/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 t.Item/40 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      // closed e.HolesAndItems-E as range 33
      context[41] = refalrts::tvar_left( context[40], context[35], context[36] );
      if( ! context[41] )
        continue;
      // closed e.Pattern as range 35
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.HolesAndItems-E: 33
      //DEBUG: t.Item: 40
      //DEBUG: e.Pattern: 35
      //21: e.Index0
      //23: e.UsedVariables
      //25: e.HolesAndItems-B0
      //27: e.HolesAndItems-E0
      //31: e.HolesAndItems-B
      //33: e.HolesAndItems-E
      //35: e.Pattern
      //40: t.Item
      //49: e.Index0
      //53: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_DoPatternSteps_B1Z7S1C1]);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_evar(vm, context[49], context[50], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::copy_stvar(vm, context[53], context[40]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[42] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[45] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_stvar( res, context[53] );
      refalrts::link_brackets( context[47], context[52] );
      res = refalrts::splice_elem( res, context[52] );
      refalrts::link_brackets( context[48], context[51] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[42] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </42 & DoPatternSteps:1@7$1?1/46 # True/47 >/43
        context[44] = 0;
        context[45] = 0;
        context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
        context[47] = refalrts::ident_left( identifiers[ident_True], context[44], context[45] );
        if( ! context[47] )
          continue;
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        //DEBUG: e.Index0: 21
        //DEBUG: e.UsedVariables: 23
        //DEBUG: e.HolesAndItems-B0: 25
        //DEBUG: e.HolesAndItems-E0: 27
        //DEBUG: e.HolesAndItems-B: 31
        //DEBUG: e.HolesAndItems-E: 33
        //DEBUG: t.Item: 40
        //DEBUG: e.Pattern: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & DoPatternSteps:1@7/4 (/7 {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & DoPatternSteps:1@7$1?1/46 # True/47 >/43 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/20 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: t.Item/40 } Tile{ AsIs: (/37 AsIs: # HOLE/39 } Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/38 AsIs: e.HolesAndItems-E/33 HalfReuse: >/42 } Tile{ ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
        refalrts::reinit_close_call(context[42]);
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[15], context[20] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[38], context[42] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[37], context[39] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[42], context[43]);
      continue;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 e.Pattern/35 t.Item/40 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      // closed e.HolesAndItems-E as range 33
      context[41] = refalrts::tvar_right( context[40], context[35], context[36] );
      if( ! context[41] )
        continue;
      // closed e.Pattern as range 35
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.HolesAndItems-E: 33
      //DEBUG: t.Item: 40
      //DEBUG: e.Pattern: 35
      //21: e.Index0
      //23: e.UsedVariables
      //25: e.HolesAndItems-B0
      //27: e.HolesAndItems-E0
      //31: e.HolesAndItems-B
      //33: e.HolesAndItems-E
      //35: e.Pattern
      //40: t.Item
      //49: e.Index0
      //53: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_DoPatternSteps_B1Z7S2C1]);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_evar(vm, context[49], context[50], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::copy_stvar(vm, context[53], context[40]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[42] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[45] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_stvar( res, context[53] );
      refalrts::link_brackets( context[47], context[52] );
      res = refalrts::splice_elem( res, context[52] );
      refalrts::link_brackets( context[48], context[51] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[42] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </42 & DoPatternSteps:1@7$2?1/46 # True/47 >/43
        context[44] = 0;
        context[45] = 0;
        context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
        context[47] = refalrts::ident_left( identifiers[ident_True], context[44], context[45] );
        if( ! context[47] )
          continue;
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        //DEBUG: e.Index0: 21
        //DEBUG: e.UsedVariables: 23
        //DEBUG: e.HolesAndItems-B0: 25
        //DEBUG: e.HolesAndItems-E0: 27
        //DEBUG: e.HolesAndItems-B: 31
        //DEBUG: e.HolesAndItems-E: 33
        //DEBUG: t.Item: 40
        //DEBUG: e.Pattern: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & DoPatternSteps:1@7/4 (/7 {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} </42 & DoPatternSteps:1@7$2?1/46 # True/47 >/43 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 AsIs: # HOLE/39 } Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/38 } Tile{ AsIs: t.Item/40 } Tile{ AsIs: e.HolesAndItems-E/33 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[15], context[20] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[20], context[39] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[42], context[43]);
      continue;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # Var/44 'e'/45 e.Index/40 )/43 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Var], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = refalrts::char_left( 'e', context[40], context[41] );
      if( ! context[45] )
        continue;
      if( ! refalrts::empty_seq( context[35], context[36] ) )
        continue;
      // closed e.Index as range 40
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Index: 40
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoPatternSteps:1@7/4 (/7 {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # HOLE/39 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@15/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: (/37 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/20 } Tile{ AsIs: )/16 AsIs: (/19 } e.Index/40/46 Tile{ AsIs: )/38 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: (/42 AsIs: # Var/44 AsIs: 'e'/45 AsIs: e.Index/40 AsIs: )/43 } Tile{ AsIs: e.HolesAndItems-E/33 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[46], context[47], context[40], context[41]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[19], context[38] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[37], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      if( ! refalrts::empty_seq( context[35], context[36] ) )
        continue;
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DoPatternSteps:1@7/4 (/7 {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 )/20 {REMOVED TILE} (/37 # HOLE/39 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@16/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[38] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[38];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # Brackets/44 e.InBrackets/40 )/43 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      // closed e.InBrackets as range 40
      // closed e.Pattern as range 35
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.Pattern: 35
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 Reuse: # LeftBracket/39 HalfReuse: )/42 HalfReuse: (/44 } # HOLE/45 Tile{ AsIs: e.InBrackets/40 } Tile{ AsIs: )/16 AsIs: (/19 } # RightBracket/46 Tile{ HalfReuse: )/4 AsIs: (/7 } Tile{ HalfReuse: # HOLE/43 AsIs: e.Pattern/35 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[45], identifiers[ident_HOLE]);
      refalrts::alloc_ident(vm, context[46], identifiers[ident_RightBracket]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
      refalrts::update_ident(context[39], identifiers[ident_LeftBracket]);
      refalrts::reinit_close_bracket(context[42]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[43], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[38] );
      refalrts::link_brackets( context[19], context[4] );
      refalrts::link_brackets( context[44], context[16] );
      refalrts::link_brackets( context[37], context[42] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[20], context[44] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 e.Pattern/35 (/42 # Brackets/44 e.InBrackets/40 )/43 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_right( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      // closed e.Pattern as range 35
      // closed e.InBrackets as range 40
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Pattern: 35
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 AsIs: # HOLE/39 AsIs: e.Pattern/35 HalfReuse: )/42 HalfReuse: (/44 } # LeftBracket/45 Tile{ AsIs: )/16 AsIs: (/19 } # HOLE/46 Tile{ AsIs: e.InBrackets/40 } Tile{ HalfReuse: )/4 AsIs: (/7 } Tile{ HalfReuse: # RightBracket/43 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[45], identifiers[ident_LeftBracket]);
      refalrts::alloc_ident(vm, context[46], identifiers[ident_HOLE]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
      refalrts::reinit_close_bracket(context[42]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[43], identifiers[ident_RightBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[38] );
      refalrts::link_brackets( context[19], context[4] );
      refalrts::link_brackets( context[44], context[16] );
      refalrts::link_brackets( context[37], context[42] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[20], context[44] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # ADT-Brackets/44 (/47 e.Name/45 )/48 e.InBrackets/40 )/43 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[40], context[41] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.Name as range 45
      // closed e.InBrackets as range 40
      // closed e.Pattern as range 35
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Name: 45
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.Pattern: 35
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 Reuse: # LeftADT/39 } Tile{ AsIs: e.Name/45 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ HalfReuse: # HOLE/4 } Tile{ AsIs: e.InBrackets/40 } Tile{ AsIs: )/48 } Tile{ AsIs: (/42 Reuse: # RightADT/44 HalfReuse: )/47 } Tile{ AsIs: (/7 } Tile{ HalfReuse: # HOLE/43 AsIs: e.Pattern/35 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
      refalrts::update_ident(context[39], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[4], identifiers[ident_HOLE]);
      refalrts::update_ident(context[44], identifiers[ident_RightADT]);
      refalrts::reinit_close_bracket(context[47]);
      refalrts::reinit_ident(context[43], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[38] );
      refalrts::link_brackets( context[42], context[47] );
      refalrts::link_brackets( context[19], context[48] );
      refalrts::link_brackets( context[37], context[16] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[42], context[47] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[20], context[39] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 e.Pattern/35 (/42 # ADT-Brackets/44 (/47 e.Name/45 )/48 e.InBrackets/40 )/43 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_right( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[40], context[41] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.Pattern as range 35
      // closed e.Name as range 45
      // closed e.InBrackets as range 40
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Pattern: 35
      //DEBUG: e.Name: 45
      //DEBUG: e.InBrackets: 40
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Index0/21 } Tile{ AsIs: )/20 AsIs: e.HolesAndItems-B/31 AsIs: (/37 AsIs: # HOLE/39 AsIs: e.Pattern/35 HalfReuse: )/42 HalfReuse: (/44 HalfReuse: # LeftADT/47 AsIs: e.Name/45 AsIs: )/48 } Tile{ AsIs: (/7 } Tile{ HalfReuse: # HOLE/4 } Tile{ AsIs: e.InBrackets/40 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ HalfReuse: # RightADT/43 AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
      refalrts::reinit_close_bracket(context[42]);
      refalrts::reinit_open_bracket(context[44]);
      refalrts::reinit_ident(context[47], identifiers[ident_LeftADT]);
      refalrts::reinit_ident(context[4], identifiers[ident_HOLE]);
      refalrts::reinit_ident(context[43], identifiers[ident_RightADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[38] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::link_brackets( context[44], context[48] );
      refalrts::link_brackets( context[37], context[42] );
      refalrts::link_brackets( context[15], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[43];
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[20], context[48] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.HolesAndItems-B/31 (/37 # HOLE/39 (/42 # Var/44 'e'/45 e.Index/40 )/43 e.Pattern/35 )/38 e.HolesAndItems-E/33 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    context[31] = 0;
    context[32] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[33] = context[29];
      context[34] = context[30];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_HOLE], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[35], context[36] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = refalrts::ident_left( identifiers[ident_Var], context[40], context[41] );
      if( ! context[44] )
        continue;
      context[45] = refalrts::char_left( 'e', context[40], context[41] );
      if( ! context[45] )
        continue;
      // closed e.Index as range 40
      // closed e.Pattern as range 35
      // closed e.HolesAndItems-E as range 33
      //DEBUG: e.Index0: 21
      //DEBUG: e.UsedVariables: 23
      //DEBUG: e.HolesAndItems-B0: 25
      //DEBUG: e.HolesAndItems-E0: 27
      //DEBUG: e.HolesAndItems-B: 31
      //DEBUG: e.Index: 40
      //DEBUG: e.Pattern: 35
      //DEBUG: e.HolesAndItems-E: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </46 Tile{ HalfReuse: & DoPatternSteps@15/8 AsIs: (/11 AsIs: e.UsedVariables/23 AsIs: )/12 AsIs: (/15 } (/47 Tile{ AsIs: e.Index0/21 } )/48 Tile{ AsIs: )/16 AsIs: (/19 } e.Index/40/49 Tile{ AsIs: )/20 } Tile{ AsIs: e.HolesAndItems-B/31 } Tile{ AsIs: (/42 Reuse: # OpenE/44 AsIs: 'e'/45 AsIs: e.Index/40 AsIs: )/43 } Tile{ AsIs: (/37 AsIs: # HOLE/39 } Tile{ AsIs: e.Pattern/35 } Tile{ AsIs: )/38 AsIs: e.HolesAndItems-E/33 AsIs: >/1 } (/51 </52 & Map@2/53 Tile{ AsIs: </0 Reuse: & T1@1/4 AsIs: (/7 } e.UsedVariables/23/54 )/56 Tile{ AsIs: e.HolesAndItems-B0/25 } Tile{ AsIs: e.HolesAndItems-E0/27 } >/57 </58 & T2@1/59 (/60 e.UsedVariables/23/61 )/63 e.HolesAndItems-B0/25/64 e.HolesAndItems-E0/27/66 >/68 </69 & T3@1/70 (/71 e.UsedVariables/23/72 )/74 e.HolesAndItems-B0/25/75 e.HolesAndItems-E0/27/77 >/79 </80 & T4@1/81 (/82 e.UsedVariables/23/83 )/85 e.HolesAndItems-B0/25/86 e.HolesAndItems-E0/27/88 >/90 </91 & T5@1/92 (/93 e.UsedVariables/23/94 )/96 e.HolesAndItems-B0/25/97 e.HolesAndItems-E0/27/99 >/101 </102 & T5-sub@1/103 (/104 e.UsedVariables/23/105 )/107 e.Index/40/108 >/110 </111 & T6@1/112 (/113 e.UsedVariables/23/114 )/116 e.HolesAndItems-B0/25/117 e.HolesAndItems-E0/27/119 >/121 </122 & T7@1/123 (/124 e.UsedVariables/23/125 )/127 e.HolesAndItems-B0/25/128 e.HolesAndItems-E0/27/130 >/132 >/133 )/134 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::copy_evar(vm, context[49], context[50], context[40], context[41]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_open_call(vm, context[52]);
      refalrts::alloc_name(vm, context[53], functions[efunc_gen_Map_Z2]);
      refalrts::copy_evar(vm, context[54], context[55], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_gen_T2_Z1]);
      refalrts::alloc_open_bracket(vm, context[60]);
      refalrts::copy_evar(vm, context[61], context[62], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[63]);
      refalrts::copy_evar(vm, context[64], context[65], context[25], context[26]);
      refalrts::copy_evar(vm, context[66], context[67], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[68]);
      refalrts::alloc_open_call(vm, context[69]);
      refalrts::alloc_name(vm, context[70], functions[efunc_gen_T3_Z1]);
      refalrts::alloc_open_bracket(vm, context[71]);
      refalrts::copy_evar(vm, context[72], context[73], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[74]);
      refalrts::copy_evar(vm, context[75], context[76], context[25], context[26]);
      refalrts::copy_evar(vm, context[77], context[78], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[79]);
      refalrts::alloc_open_call(vm, context[80]);
      refalrts::alloc_name(vm, context[81], functions[efunc_gen_T4_Z1]);
      refalrts::alloc_open_bracket(vm, context[82]);
      refalrts::copy_evar(vm, context[83], context[84], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[85]);
      refalrts::copy_evar(vm, context[86], context[87], context[25], context[26]);
      refalrts::copy_evar(vm, context[88], context[89], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[90]);
      refalrts::alloc_open_call(vm, context[91]);
      refalrts::alloc_name(vm, context[92], functions[efunc_gen_T5_Z1]);
      refalrts::alloc_open_bracket(vm, context[93]);
      refalrts::copy_evar(vm, context[94], context[95], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[96]);
      refalrts::copy_evar(vm, context[97], context[98], context[25], context[26]);
      refalrts::copy_evar(vm, context[99], context[100], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[101]);
      refalrts::alloc_open_call(vm, context[102]);
      refalrts::alloc_name(vm, context[103], functions[efunc_gen_T5m_sub_Z1]);
      refalrts::alloc_open_bracket(vm, context[104]);
      refalrts::copy_evar(vm, context[105], context[106], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[107]);
      refalrts::copy_evar(vm, context[108], context[109], context[40], context[41]);
      refalrts::alloc_close_call(vm, context[110]);
      refalrts::alloc_open_call(vm, context[111]);
      refalrts::alloc_name(vm, context[112], functions[efunc_gen_T6_Z1]);
      refalrts::alloc_open_bracket(vm, context[113]);
      refalrts::copy_evar(vm, context[114], context[115], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[116]);
      refalrts::copy_evar(vm, context[117], context[118], context[25], context[26]);
      refalrts::copy_evar(vm, context[119], context[120], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[121]);
      refalrts::alloc_open_call(vm, context[122]);
      refalrts::alloc_name(vm, context[123], functions[efunc_gen_T7_Z1]);
      refalrts::alloc_open_bracket(vm, context[124]);
      refalrts::copy_evar(vm, context[125], context[126], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[127]);
      refalrts::copy_evar(vm, context[128], context[129], context[25], context[26]);
      refalrts::copy_evar(vm, context[130], context[131], context[27], context[28]);
      refalrts::alloc_close_call(vm, context[132]);
      refalrts::alloc_close_call(vm, context[133]);
      refalrts::alloc_close_bracket(vm, context[134]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::update_ident(context[44], identifiers[ident_OpenE]);
      refalrts::update_name(context[4], functions[efunc_gen_T1_Z1]);
      refalrts::link_brackets( context[51], context[134] );
      refalrts::push_stack( vm, context[133] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[132] );
      refalrts::push_stack( vm, context[122] );
      refalrts::link_brackets( context[124], context[127] );
      refalrts::push_stack( vm, context[121] );
      refalrts::push_stack( vm, context[111] );
      refalrts::link_brackets( context[113], context[116] );
      refalrts::push_stack( vm, context[110] );
      refalrts::push_stack( vm, context[102] );
      refalrts::link_brackets( context[104], context[107] );
      refalrts::push_stack( vm, context[101] );
      refalrts::push_stack( vm, context[91] );
      refalrts::link_brackets( context[93], context[96] );
      refalrts::push_stack( vm, context[90] );
      refalrts::push_stack( vm, context[80] );
      refalrts::link_brackets( context[82], context[85] );
      refalrts::push_stack( vm, context[79] );
      refalrts::push_stack( vm, context[69] );
      refalrts::link_brackets( context[71], context[74] );
      refalrts::push_stack( vm, context[68] );
      refalrts::push_stack( vm, context[58] );
      refalrts::link_brackets( context[60], context[63] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[56] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[46] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[47], context[48] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[57], context[134] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[51], context[53] );
      res = refalrts::splice_evar( res, context[38], context[1] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_elem( res, context[46] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[31], context[32], context[29], context[30] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/21 )/8 (/11 e.UsedVariables/23 )/12 (/15 e.HolesAndItems-B0/25 )/16 (/19 e.HolesAndItems-E0/27 )/20 e.OnlyItems/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Index0 as range 21
    // closed e.UsedVariables as range 23
    // closed e.HolesAndItems-B0 as range 25
    // closed e.HolesAndItems-E0 as range 27
    // closed e.OnlyItems as range 29
    //DEBUG: e.Index0: 21
    //DEBUG: e.UsedVariables: 23
    //DEBUG: e.HolesAndItems-B0: 25
    //DEBUG: e.HolesAndItems-E0: 27
    //DEBUG: e.OnlyItems: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Index0/21 {REMOVED TILE} {REMOVED TILE} e.UsedVariables/23 {REMOVED TILE} (/15 e.HolesAndItems-B0/25 {REMOVED TILE} e.HolesAndItems-E0/27 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 } Tile{ AsIs: </0 Reuse: & BindBrackets/4 AsIs: (/7 } Tile{ HalfReuse: </8 } Tile{ HalfReuse: & DoT0/20 AsIs: e.OnlyItems/29 AsIs: >/1 } Tile{ AsIs: )/16 HalfReuse: >/19 } Tile{ AsIs: )/12 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_BindBrackets]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[20], functions[efunc_DoT0]);
    refalrts::reinit_close_call(context[19]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[16] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[20], context[1] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps:1@7/4 (/7 e.Index0/5 )/8 (/11 e.UsedVariables/9 )/12 (/15 e.HolesAndItems-B0/13 )/16 (/19 e.HolesAndItems-E0/17 )/20 e.dyn/2 >/1
  // closed e.Index0 as range 5
  // closed e.UsedVariables as range 9
  // closed e.HolesAndItems-B0 as range 13
  // closed e.HolesAndItems-E0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.Index0: 5
  //DEBUG: e.UsedVariables: 9
  //DEBUG: e.HolesAndItems-B0: 13
  //DEBUG: e.HolesAndItems-E0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1@0/4 AsIs: (/7 } Tile{ AsIs: (/19 } Tile{ AsIs: e.Index0/5 } Tile{ AsIs: )/16 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.UsedVariables/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.HolesAndItems-B0/13 } Tile{ AsIs: e.HolesAndItems-E0/17 } Tile{ AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[20];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[8], context[15] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_B1Z7("DoPatternSteps:1@7", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_B1Z7);


static refalrts::FnResult func_gen_DoPatternSteps_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & DoPatternSteps@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps@17/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoPatternSteps@17/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.X1/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    // closed e.X1 as range 17
    //DEBUG: e.X: 13
    //DEBUG: e.X0: 15
    //DEBUG: e.X1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoPatternSteps:1@8/19 (/20 Tile{ AsIs: e.X0/15 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.X/13 AsIs: )/8 AsIs: (/11 } e.X1/17/21 Tile{ AsIs: )/12 AsIs: e.X1/17 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_DoPatternSteps_B1Z8]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[17], context[18]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[4], context[11] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps@17/4 (/7 e.X/5 )/8 (/11 e.X0/9 )/12 e.X1/2 >/1
  // closed e.X as range 5
  // closed e.X0 as range 9
  // closed e.X1 as range 2
  //DEBUG: e.X: 5
  //DEBUG: e.X0: 9
  //DEBUG: e.X1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps@0/4 AsIs: (/7 AsIs: e.X/5 AsIs: )/8 AsIs: (/11 } (/13 Tile{ AsIs: e.X0/9 } )/14 Tile{ AsIs: )/12 AsIs: e.X1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_Z17("DoPatternSteps@17", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_Z17);


static refalrts::FnResult func_gen_DoPatternSteps_B1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 119 elems
  refalrts::Iter context[119];
  refalrts::zeros( context, 119 );
  // </0 & DoPatternSteps:1@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPatternSteps:1@8/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoPatternSteps:1@8/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 t.Item/34 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      // closed e.HolesAndItems-E as range 27
      context[35] = refalrts::tvar_left( context[34], context[29], context[30] );
      if( ! context[35] )
        continue;
      // closed e.Pattern as range 29
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.HolesAndItems-E: 27
      //DEBUG: t.Item: 34
      //DEBUG: e.Pattern: 29
      //17: e.X0
      //19: e.X
      //21: e.X1
      //25: e.HolesAndItems-B
      //27: e.HolesAndItems-E
      //29: e.Pattern
      //34: t.Item
      //43: e.X0
      //47: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_DoPatternSteps_B1Z8S1C1]);
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::copy_evar(vm, context[43], context[44], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::copy_stvar(vm, context[47], context[34]);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[36] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[39] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_stvar( res, context[47] );
      refalrts::link_brackets( context[41], context[46] );
      res = refalrts::splice_elem( res, context[46] );
      refalrts::link_brackets( context[42], context[45] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </36 & DoPatternSteps:1@8$1?1/40 # True/41 >/37
        context[38] = 0;
        context[39] = 0;
        context[40] = refalrts::call_left( context[38], context[39], context[36], context[37] );
        context[41] = refalrts::ident_left( identifiers[ident_True], context[38], context[39] );
        if( ! context[41] )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        //DEBUG: e.X0: 17
        //DEBUG: e.X: 19
        //DEBUG: e.X1: 21
        //DEBUG: e.HolesAndItems-B: 25
        //DEBUG: e.HolesAndItems-E: 27
        //DEBUG: t.Item: 34
        //DEBUG: e.Pattern: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & DoPatternSteps:1@8/4 (/7 {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & DoPatternSteps:1@8$1?1/40 # True/41 >/37 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: t.Item/34 } Tile{ AsIs: (/31 AsIs: # HOLE/33 } Tile{ AsIs: e.Pattern/29 } Tile{ AsIs: )/32 AsIs: e.HolesAndItems-E/27 HalfReuse: >/36 } Tile{ ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
        refalrts::reinit_close_call(context[36]);
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[36] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[31], context[33] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[36], context[37]);
      continue;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@8/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 e.Pattern/29 t.Item/34 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      // closed e.HolesAndItems-E as range 27
      context[35] = refalrts::tvar_right( context[34], context[29], context[30] );
      if( ! context[35] )
        continue;
      // closed e.Pattern as range 29
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.HolesAndItems-E: 27
      //DEBUG: t.Item: 34
      //DEBUG: e.Pattern: 29
      //17: e.X0
      //19: e.X
      //21: e.X1
      //25: e.HolesAndItems-B
      //27: e.HolesAndItems-E
      //29: e.Pattern
      //34: t.Item
      //43: e.X0
      //47: t.Item

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_DoPatternSteps_B1Z8S2C1]);
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_HardItem]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::copy_evar(vm, context[43], context[44], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::copy_stvar(vm, context[47], context[34]);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[36] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[39] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_stvar( res, context[47] );
      refalrts::link_brackets( context[41], context[46] );
      res = refalrts::splice_elem( res, context[46] );
      refalrts::link_brackets( context[42], context[45] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </36 & DoPatternSteps:1@8$2?1/40 # True/41 >/37
        context[38] = 0;
        context[39] = 0;
        context[40] = refalrts::call_left( context[38], context[39], context[36], context[37] );
        context[41] = refalrts::ident_left( identifiers[ident_True], context[38], context[39] );
        if( ! context[41] )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        //DEBUG: e.X0: 17
        //DEBUG: e.X: 19
        //DEBUG: e.X1: 21
        //DEBUG: e.HolesAndItems-B: 25
        //DEBUG: e.HolesAndItems-E: 27
        //DEBUG: t.Item: 34
        //DEBUG: e.Pattern: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & DoPatternSteps:1@8/4 (/7 {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} </36 & DoPatternSteps:1@8$2?1/40 # True/41 >/37 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 AsIs: # HOLE/33 } Tile{ AsIs: e.Pattern/29 } Tile{ AsIs: )/32 } Tile{ AsIs: t.Item/34 } Tile{ AsIs: e.HolesAndItems-E/27 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[16], context[33] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[36], context[37]);
      continue;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@8/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # Var/38 'e'/39 e.Index/34 )/37 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Var], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = refalrts::char_left( 'e', context[34], context[35] );
      if( ! context[39] )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Index as range 34
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Index: 34
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # HOLE/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@15/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: (/31 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 } Tile{ HalfReuse: )/4 AsIs: (/7 } e.Index/34/40 Tile{ AsIs: )/32 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: (/36 AsIs: # Var/38 AsIs: 'e'/39 AsIs: e.Index/34 AsIs: )/37 } Tile{ AsIs: e.HolesAndItems-E/27 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[40], context[41], context[34], context[35]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[7], context[32] );
      refalrts::link_brackets( context[15], context[4] );
      refalrts::link_brackets( context[31], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@8/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X1/21 )/16 {REMOVED TILE} (/31 # HOLE/33 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@16/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ HalfReuse: )/4 AsIs: (/7 } Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z16]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[32] );
      refalrts::link_brackets( context[15], context[4] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[32];
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@8/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # Brackets/38 e.InBrackets/34 )/37 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      // closed e.InBrackets as range 34
      // closed e.Pattern as range 29
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.Pattern: 29
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 Reuse: # LeftBracket/33 HalfReuse: )/36 HalfReuse: (/38 } # HOLE/39 Tile{ AsIs: e.InBrackets/34 } Tile{ HalfReuse: )/4 AsIs: (/7 } # RightBracket/40 )/41 (/42 Tile{ HalfReuse: # HOLE/37 AsIs: e.Pattern/29 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[39], identifiers[ident_HOLE]);
      refalrts::alloc_ident(vm, context[40], identifiers[ident_RightBracket]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
      refalrts::update_ident(context[33], identifiers[ident_LeftBracket]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::reinit_open_bracket(context[38]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[37], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[42], context[32] );
      refalrts::link_brackets( context[7], context[41] );
      refalrts::link_brackets( context[38], context[4] );
      refalrts::link_brackets( context[31], context[36] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_evar( res, context[40], context[42] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[16], context[38] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@8/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 e.Pattern/29 (/36 # Brackets/38 e.InBrackets/34 )/37 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_right( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      // closed e.Pattern as range 29
      // closed e.InBrackets as range 34
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Pattern: 29
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 AsIs: # HOLE/33 AsIs: e.Pattern/29 HalfReuse: )/36 HalfReuse: (/38 } # LeftBracket/39 Tile{ HalfReuse: )/4 AsIs: (/7 } # HOLE/40 Tile{ AsIs: e.InBrackets/34 } )/41 (/42 Tile{ HalfReuse: # RightBracket/37 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[39], identifiers[ident_LeftBracket]);
      refalrts::alloc_ident(vm, context[40], identifiers[ident_HOLE]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::reinit_open_bracket(context[38]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[37], identifiers[ident_RightBracket]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[42], context[32] );
      refalrts::link_brackets( context[7], context[41] );
      refalrts::link_brackets( context[38], context[4] );
      refalrts::link_brackets( context[31], context[36] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[16], context[38] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@8/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # ADT-Brackets/38 (/41 e.Name/39 )/42 e.InBrackets/34 )/37 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[34], context[35] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      // closed e.Name as range 39
      // closed e.InBrackets as range 34
      // closed e.Pattern as range 29
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Name: 39
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.Pattern: 29
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 Reuse: # LeftADT/33 } Tile{ AsIs: e.Name/39 } Tile{ HalfReuse: )/4 AsIs: (/7 } # HOLE/43 Tile{ AsIs: e.InBrackets/34 } Tile{ AsIs: )/42 } Tile{ AsIs: (/36 Reuse: # RightADT/38 HalfReuse: )/41 } (/44 Tile{ HalfReuse: # HOLE/37 AsIs: e.Pattern/29 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[43], identifiers[ident_HOLE]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
      refalrts::update_ident(context[33], identifiers[ident_LeftADT]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::update_ident(context[38], identifiers[ident_RightADT]);
      refalrts::reinit_close_bracket(context[41]);
      refalrts::reinit_ident(context[37], identifiers[ident_HOLE]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[44], context[32] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[7], context[42] );
      refalrts::link_brackets( context[31], context[4] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[36], context[41] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[16], context[33] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@8/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 e.Pattern/29 (/36 # ADT-Brackets/38 (/41 e.Name/39 )/42 e.InBrackets/34 )/37 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_right( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_ADTm_Brackets], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[34], context[35] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      // closed e.Pattern as range 29
      // closed e.Name as range 39
      // closed e.InBrackets as range 34
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Pattern: 29
      //DEBUG: e.Name: 39
      //DEBUG: e.InBrackets: 34
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoPatternSteps@17/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.X0/17 } Tile{ AsIs: )/16 AsIs: e.HolesAndItems-B/25 AsIs: (/31 AsIs: # HOLE/33 AsIs: e.Pattern/29 HalfReuse: )/36 HalfReuse: (/38 HalfReuse: # LeftADT/41 AsIs: e.Name/39 AsIs: )/42 } (/43 # HOLE/44 Tile{ AsIs: e.InBrackets/34 } Tile{ HalfReuse: )/4 AsIs: (/7 } Tile{ HalfReuse: # RightADT/37 AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_ident(vm, context[44], identifiers[ident_HOLE]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z17]);
      refalrts::reinit_close_bracket(context[36]);
      refalrts::reinit_open_bracket(context[38]);
      refalrts::reinit_ident(context[41], identifiers[ident_LeftADT]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_ident(context[37], identifiers[ident_RightADT]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[32] );
      refalrts::link_brackets( context[43], context[4] );
      refalrts::link_brackets( context[38], context[42] );
      refalrts::link_brackets( context[31], context[36] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[37];
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[16], context[42] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@8/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.HolesAndItems-B/25 (/31 # HOLE/33 (/36 # Var/38 'e'/39 e.Index/34 )/37 e.Pattern/29 )/32 e.HolesAndItems-E/27 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    context[25] = 0;
    context[26] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[27] = context[23];
      context[28] = context[24];
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = refalrts::ident_left( identifiers[ident_HOLE], context[29], context[30] );
      if( ! context[33] )
        continue;
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[29], context[30] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = refalrts::ident_left( identifiers[ident_Var], context[34], context[35] );
      if( ! context[38] )
        continue;
      context[39] = refalrts::char_left( 'e', context[34], context[35] );
      if( ! context[39] )
        continue;
      // closed e.Index as range 34
      // closed e.Pattern as range 29
      // closed e.HolesAndItems-E as range 27
      //DEBUG: e.X0: 17
      //DEBUG: e.X: 19
      //DEBUG: e.X1: 21
      //DEBUG: e.HolesAndItems-B: 25
      //DEBUG: e.Index: 34
      //DEBUG: e.Pattern: 29
      //DEBUG: e.HolesAndItems-E: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </40 Tile{ HalfReuse: & DoPatternSteps@15/8 AsIs: (/11 AsIs: e.X/19 AsIs: )/12 AsIs: (/15 } (/41 Tile{ AsIs: e.X0/17 } )/42 Tile{ AsIs: )/16 } (/43 e.Index/34/44 )/46 Tile{ AsIs: e.HolesAndItems-B/25 } Tile{ AsIs: (/36 Reuse: # OpenE/38 AsIs: 'e'/39 AsIs: e.Index/34 AsIs: )/37 } Tile{ AsIs: (/31 AsIs: # HOLE/33 } Tile{ AsIs: e.Pattern/29 } Tile{ AsIs: )/32 AsIs: e.HolesAndItems-E/27 AsIs: >/1 } (/47 </48 & Map@2/49 Tile{ AsIs: </0 Reuse: & T1@1/4 AsIs: (/7 } e.X/19/50 )/52 Tile{ AsIs: e.X1/21 } >/53 </54 & T2@1/55 (/56 e.X/19/57 )/59 e.X1/21/60 >/62 </63 & T3@1/64 (/65 e.X/19/66 )/68 e.X1/21/69 >/71 </72 & T4@1/73 (/74 e.X/19/75 )/77 e.X1/21/78 >/80 </81 & T5@1/82 (/83 e.X/19/84 )/86 e.X1/21/87 >/89 </90 & T5-sub@1/91 (/92 e.X/19/93 )/95 e.Index/34/96 >/98 </99 & T6@1/100 (/101 e.X/19/102 )/104 e.X1/21/105 >/107 </108 & T7@1/109 (/110 e.X/19/111 )/113 e.X1/21/114 >/116 >/117 )/118 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::copy_evar(vm, context[44], context[45], context[34], context[35]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_gen_Map_Z2]);
      refalrts::copy_evar(vm, context[50], context[51], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::alloc_open_call(vm, context[54]);
      refalrts::alloc_name(vm, context[55], functions[efunc_gen_T2_Z1]);
      refalrts::alloc_open_bracket(vm, context[56]);
      refalrts::copy_evar(vm, context[57], context[58], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[59]);
      refalrts::copy_evar(vm, context[60], context[61], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[62]);
      refalrts::alloc_open_call(vm, context[63]);
      refalrts::alloc_name(vm, context[64], functions[efunc_gen_T3_Z1]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::copy_evar(vm, context[66], context[67], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[68]);
      refalrts::copy_evar(vm, context[69], context[70], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[71]);
      refalrts::alloc_open_call(vm, context[72]);
      refalrts::alloc_name(vm, context[73], functions[efunc_gen_T4_Z1]);
      refalrts::alloc_open_bracket(vm, context[74]);
      refalrts::copy_evar(vm, context[75], context[76], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[77]);
      refalrts::copy_evar(vm, context[78], context[79], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[80]);
      refalrts::alloc_open_call(vm, context[81]);
      refalrts::alloc_name(vm, context[82], functions[efunc_gen_T5_Z1]);
      refalrts::alloc_open_bracket(vm, context[83]);
      refalrts::copy_evar(vm, context[84], context[85], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[86]);
      refalrts::copy_evar(vm, context[87], context[88], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[89]);
      refalrts::alloc_open_call(vm, context[90]);
      refalrts::alloc_name(vm, context[91], functions[efunc_gen_T5m_sub_Z1]);
      refalrts::alloc_open_bracket(vm, context[92]);
      refalrts::copy_evar(vm, context[93], context[94], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[95]);
      refalrts::copy_evar(vm, context[96], context[97], context[34], context[35]);
      refalrts::alloc_close_call(vm, context[98]);
      refalrts::alloc_open_call(vm, context[99]);
      refalrts::alloc_name(vm, context[100], functions[efunc_gen_T6_Z1]);
      refalrts::alloc_open_bracket(vm, context[101]);
      refalrts::copy_evar(vm, context[102], context[103], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[104]);
      refalrts::copy_evar(vm, context[105], context[106], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[107]);
      refalrts::alloc_open_call(vm, context[108]);
      refalrts::alloc_name(vm, context[109], functions[efunc_gen_T7_Z1]);
      refalrts::alloc_open_bracket(vm, context[110]);
      refalrts::copy_evar(vm, context[111], context[112], context[19], context[20]);
      refalrts::alloc_close_bracket(vm, context[113]);
      refalrts::copy_evar(vm, context[114], context[115], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[116]);
      refalrts::alloc_close_call(vm, context[117]);
      refalrts::alloc_close_bracket(vm, context[118]);
      refalrts::reinit_name(context[8], functions[efunc_gen_DoPatternSteps_Z15]);
      refalrts::update_ident(context[38], identifiers[ident_OpenE]);
      refalrts::update_name(context[4], functions[efunc_gen_T1_Z1]);
      refalrts::link_brackets( context[47], context[118] );
      refalrts::push_stack( vm, context[117] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[116] );
      refalrts::push_stack( vm, context[108] );
      refalrts::link_brackets( context[110], context[113] );
      refalrts::push_stack( vm, context[107] );
      refalrts::push_stack( vm, context[99] );
      refalrts::link_brackets( context[101], context[104] );
      refalrts::push_stack( vm, context[98] );
      refalrts::push_stack( vm, context[90] );
      refalrts::link_brackets( context[92], context[95] );
      refalrts::push_stack( vm, context[89] );
      refalrts::push_stack( vm, context[81] );
      refalrts::link_brackets( context[83], context[86] );
      refalrts::push_stack( vm, context[80] );
      refalrts::push_stack( vm, context[72] );
      refalrts::link_brackets( context[74], context[77] );
      refalrts::push_stack( vm, context[71] );
      refalrts::push_stack( vm, context[63] );
      refalrts::link_brackets( context[65], context[68] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[54] );
      refalrts::link_brackets( context[56], context[59] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[52] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[43], context[46] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[53], context[118] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[47], context[49] );
      res = refalrts::splice_evar( res, context[32], context[1] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[31], context[33] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[43], context[46] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_elem( res, context[40] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[25], context[26], context[23], context[24] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoPatternSteps:1@8/4 (/7 e.X0/17 )/8 (/11 e.X/19 )/12 (/15 e.X1/21 )/16 e.OnlyItems/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.X0 as range 17
    // closed e.X as range 19
    // closed e.X1 as range 21
    // closed e.OnlyItems as range 23
    //DEBUG: e.X0: 17
    //DEBUG: e.X: 19
    //DEBUG: e.X1: 21
    //DEBUG: e.OnlyItems: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.X0/17 {REMOVED TILE} {REMOVED TILE} e.X/19 {REMOVED TILE} e.X1/21 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/11 } Tile{ AsIs: </0 Reuse: & BindBrackets/4 AsIs: (/7 } </25 Tile{ HalfReuse: & DoT0/16 AsIs: e.OnlyItems/23 AsIs: >/1 } Tile{ AsIs: )/12 HalfReuse: >/15 } Tile{ AsIs: )/8 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_BindBrackets]);
    refalrts::reinit_name(context[16], functions[efunc_DoT0]);
    refalrts::reinit_close_call(context[15]);
    refalrts::link_brackets( context[11], context[8] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPatternSteps:1@8/4 (/7 e.X0/5 )/8 (/11 e.X/9 )/12 (/15 e.X1/13 )/16 e.dyn/2 >/1
  // closed e.X0 as range 5
  // closed e.X as range 9
  // closed e.X1 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.X0: 5
  //DEBUG: e.X: 9
  //DEBUG: e.X1: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPatternSteps:1@0/4 AsIs: (/7 } (/17 Tile{ AsIs: e.X0/5 } )/18 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.X/9 AsIs: )/12 AsIs: (/15 AsIs: e.X1/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_DoPatternSteps_B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoPatternSteps_B1Z8("DoPatternSteps:1@8", COOKIE1_, COOKIE2_, func_gen_DoPatternSteps_B1Z8);


//End of file
