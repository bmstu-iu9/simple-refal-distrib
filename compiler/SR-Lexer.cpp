// This file automatically generated from 'SR-Lexer.sref'
// Don't edit! Edit 'SR-Lexer.sref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_2294075534_3927251482
#define COOKIE1_ 2294075534U
#define COOKIE2_ 3927251482U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_LexFolding = 18,
  efunc_gen_LoadSource_B1 = 19,
  efunc_gen_Map_Z1 = 20,
  efunc_LoadFile = 21,
  efunc_Root = 22,
  efunc_NormalizeTokens = 23,
  efunc_EscapeChar = 24,
  efunc_EscapeString = 25,
  efunc_gen_StrDirective_D11 = 26,
  efunc_Symb = 27,
  efunc_SRm_StrFromToken = 28,
  efunc_gen_NormalizeToken_S16B1 = 29,
  efunc_gen_Map_Z2 = 30,
  efunc_Chr = 31,
  efunc_gen_Map_Z3 = 32,
  efunc_gen_Numbm_Overflow_A1 = 33,
  efunc_Numb = 34,
  efunc_gen_Map_Z4 = 35,
  efunc_CharFromNum = 36,
  efunc_gen_NormalizeToken_S16A1 = 37,
  efunc_UnEscapeStringm_SR = 38,
  efunc_gen_SwPunctuation_D14 = 39,
  efunc_Trimm_R = 40,
  efunc_TokenError = 41,
  efunc_gen_Fetch_Z1 = 42,
  efunc_gen_Map_Z5 = 43,
  efunc_gen_CollectNativeLinesm_Aux_Z1 = 44,
  efunc_CollectNativeLines = 45,
  efunc_StartNativem_NewLine = 46,
  efunc_Main = 47,
  efunc_VariableIndex = 48,
  efunc_Name = 49,
  efunc_Number = 50,
  efunc_Directive = 51,
  efunc_StringLiteral = 52,
  efunc_CompoundSymbol = 53,
  efunc_CComment = 54,
  efunc_CppComment = 55,
  efunc_Nativem_Begin = 56,
  efunc_DirectiveTail = 57,
  efunc_Compoundm_Escape = 58,
  efunc_Nativem_CheckEnd2 = 59,
  efunc_Native = 60,
  efunc_VariableIndexTail = 61,
  efunc_StringLiteralm_Escape = 62,
  efunc_Compoundm_Escapem_Hex = 63,
  efunc_StringLiteralm_Escapem_DNext = 64,
  efunc_StringLiteralm_Escapem_OCode = 65,
  efunc_StringLiteralm_Escapem_XCode = 66,
  efunc_StringLiteralm_Escapem_Xnext = 67,
  efunc_Mu = 68,
  efunc_Up = 69,
  efunc_Evm_met = 70,
  efunc_Residue = 71,
  efunc_u_u_Metau_Residue = 72,
  efunc_MapAccum = 73,
  efunc_UnBracket = 74,
  efunc_DelAccumulator = 75,
  efunc_Inc = 76,
  efunc_Dec = 77,
  efunc_SRm_Scan = 78,
  efunc_LoadSource = 79,
  efunc_StrDirective = 80,
  efunc_NormalizeToken = 81,
  efunc_Numbm_Overflow = 82,
  efunc_ValidDirective = 83,
  efunc_SwPunctuation = 84,
  efunc_AddLineNumber = 85,
  efunc_CollectNativeLinesm_Aux = 86,
  efunc_StartNativem_Percent = 87,
  efunc_VariableStart = 88,
  efunc_StringLiteralm_Start = 89,
  efunc_StartComment = 90,
  efunc_Nativem_CheckEnd = 91,
  efunc_StringLiteralm_Quote = 92,
  efunc_Compoundm_Escapem_Dec = 93,
  efunc_CCommentm_CheckNested = 94,
  efunc_CCommentm_CheckEnd = 95,
  efunc_StringLiteralm_Escapem_DCode = 96,
  efunc_gen_Apply_Z4 = 97,
  efunc_gen_LoadSource_L1D1 = 98,
  efunc_gen_Map_Z0 = 99,
  efunc_gen_LoadSource_L1Z0 = 100,
  efunc_gen_ValidDirective_S10L1D1 = 101,
  efunc_gen_ValidDirective_S10L1Z0 = 102,
  efunc_gen_NormalizeToken_S4L1D1 = 103,
  efunc_gen_NormalizeToken_S4L1Z0 = 104,
  efunc_gen_NormalizeToken_S6L1D1 = 105,
  efunc_gen_NormalizeToken_S6L1Z0 = 106,
  efunc_gen_CollectNativeLinesm_Aux_Z2 = 107,
  efunc_gen_CollectNativeLinesm_Aux_Z0 = 108,
  efunc_gen_NormalizeToken_Z0 = 109,
  efunc_gen_DoMapAccum_Z1 = 110,
  efunc_gen_Fetch_Z2 = 111,
  efunc_gen_Pipe_S2L1Z0 = 112,
  efunc_gen_MapAccum_Z0 = 113,
  efunc_gen_AddLineNumber_Z0 = 114,
  efunc_gen_DelAccumulator_Z0 = 115,
  efunc_gen_CollectNativeLines_Z0 = 116,
  efunc_gen_Fetch_Z0 = 117,
  efunc_gen_DoMapAccum_S1A1Z1 = 118,
  efunc_gen_AddLineNumber_D3 = 119,
  efunc_gen_DoMapAccum_Z0 = 120,
  efunc_gen_Fetch_Z3 = 121,
  efunc_gen_DelAccumulator_D1 = 122,
  efunc_gen_DoMapAccum_S1A1Z0 = 123,
};


enum ident {
  ident_EEnum = 0,
  ident_Entry = 1,
  ident_Enum = 2,
  ident_Extern = 3,
  ident_Forward = 4,
  ident_Swap = 5,
  ident_ESwap = 6,
  ident_Ident = 7,
  ident_Include = 8,
  ident_Spec = 9,
  ident_Meta = 10,
  ident_TkChar = 11,
  ident_TkCompound = 12,
  ident_TkCloseADT = 13,
  ident_TkCloseCall = 14,
  ident_TkCloseBlock = 15,
  ident_TkCloseBracket = 16,
  ident_TkComma = 17,
  ident_TkDirective = 18,
  ident_TkEOF = 19,
  ident_TkError = 20,
  ident_TkIdentMarker = 21,
  ident_TkName = 22,
  ident_TkNumber = 23,
  ident_Cookie1 = 24,
  ident_Cookie2 = 25,
  ident_TkOpenADT = 26,
  ident_TkOpenCall = 27,
  ident_TkOpenBlock = 28,
  ident_TkOpenBracket = 29,
  ident_TkReplace = 30,
  ident_TkSemicolon = 31,
  ident_TkColon = 32,
  ident_TkUnexpected = 33,
  ident_TkVariable = 34,
  ident_TkRedefinition = 35,
  ident_TkNativeBlock = 36,
  ident_Open = 37,
  ident_Close = 38,
  ident_TkWarning = 39,
  ident_nulm_inm_compound = 40,
  ident_Success = 41,
  ident_deprecated = 42,
  ident_TkLiteralm_Char = 43,
  ident_TkLiteralm_Code = 44,
  ident_TkLiteralm_OCode = 45,
  ident_TkLiteralm_XCode = 46,
  ident_TkLiteralm_NewLine = 47,
  ident_TkLiteralm_CarriageReturn = 48,
  ident_TkLiteralm_Tab = 49,
  ident_TkLiteralm_Bell = 50,
  ident_TkLiteralm_BS = 51,
  ident_TkLiteralm_FF = 52,
  ident_TkLiteralm_VT = 53,
  ident_TkNewLine = 54,
  ident_TkPunctuation = 55,
  ident_TkNativeLine = 56,
  ident_Mu = 57,
  ident_Up = 58,
  ident_Evm_met = 59,
  ident_Residue = 60,
  ident_u_u_Metau_Residue = 61,
  ident_Apply = 62,
  ident_Map = 63,
  ident_Reduce = 64,
  ident_Fetch = 65,
  ident_MapAccum = 66,
  ident_DoMapAccum = 67,
  ident_UnBracket = 68,
  ident_DelAccumulator = 69,
  ident_Inc = 70,
  ident_Dec = 71,
  ident_Pipe = 72,
  ident_SRm_Scan = 73,
  ident_LoadSource = 74,
  ident_LexFolding = 75,
  ident_StrDirective = 76,
  ident_SRm_StrFromToken = 77,
  ident_NormalizeToken = 78,
  ident_Numbm_Overflow = 79,
  ident_ValidDirective = 80,
  ident_SwPunctuation = 81,
  ident_AddLineNumber = 82,
  ident_NormalizeTokens = 83,
  ident_CollectNativeLines = 84,
  ident_CollectNativeLinesm_Aux = 85,
  ident_TokenError = 86,
  ident_Root = 87,
  ident_StartNativem_Percent = 88,
  ident_Main = 89,
  ident_StartNativem_NewLine = 90,
  ident_VariableStart = 91,
  ident_Name = 92,
  ident_Number = 93,
  ident_Directive = 94,
  ident_StringLiteralm_Start = 95,
  ident_CompoundSymbol = 96,
  ident_StartComment = 97,
  ident_Nativem_Begin = 98,
  ident_VariableIndex = 99,
  ident_DirectiveTail = 100,
  ident_StringLiteral = 101,
  ident_Compoundm_Escape = 102,
  ident_CComment = 103,
  ident_CppComment = 104,
  ident_Nativem_CheckEnd = 105,
  ident_Native = 106,
  ident_VariableIndexTail = 107,
  ident_StringLiteralm_Escape = 108,
  ident_StringLiteralm_Quote = 109,
  ident_Compoundm_Escapem_Dec = 110,
  ident_Compoundm_Escapem_Hex = 111,
  ident_CCommentm_CheckNested = 112,
  ident_CCommentm_CheckEnd = 113,
  ident_Nativem_CheckEnd2 = 114,
  ident_StringLiteralm_Escapem_DCode = 115,
  ident_StringLiteralm_Escapem_OCode = 116,
  ident_StringLiteralm_Escapem_XCode = 117,
  ident_StringLiteralm_Escapem_DNext = 118,
  ident_StringLiteralm_Escapem_Xnext = 119,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_SRm_Scan(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & SR-Scan/4 e.SrcName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.SrcName as range 2
  //DEBUG: e.SrcName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & LexFolding/6 </7 & LoadSource:1/8 </9 & Map@1/10 Tile{ AsIs: </0 Reuse: & LoadFile/4 AsIs: e.SrcName/2 AsIs: >/1 } >/11 >/12 >/13 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_LexFolding]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_LoadSource_B1]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z1]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_LoadFile]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SRm_Scan("SR-Scan", 0U, 0U, func_SRm_Scan);


static refalrts::FnResult func_gen_LoadSource_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & LoadSource:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & LoadSource:1/4 '\357'/7 '\273'/8 '\277'/9 e.Content/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::char_left( '\357', context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = refalrts::char_left( '\273', context[5], context[6] );
    if( ! context[8] )
      continue;
    context[9] = refalrts::char_left( '\277', context[5], context[6] );
    if( ! context[9] )
      continue;
    // closed e.Content as range 5
    //DEBUG: e.Content: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & LoadSource:1/4 '\357'/7 '\273'/8 '\277'/9 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Content/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & LoadSource:1/4 e.Content/2 >/1
  // closed e.Content as range 2
  //DEBUG: e.Content: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & LoadSource:1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Content/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadSource_B1("LoadSource:1", COOKIE1_, COOKIE2_, func_gen_LoadSource_B1);


static refalrts::FnResult func_LoadSource(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & LoadSource/4 e.FileName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.FileName as range 2
  //DEBUG: e.FileName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & LoadSource:1/6 </7 & Map@1/8 Tile{ AsIs: </0 Reuse: & LoadFile/4 AsIs: e.FileName/2 AsIs: >/1 } >/9 >/10 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_LoadSource_B1]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Map_Z1]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_LoadFile]);
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_LoadSource("LoadSource", COOKIE1_, COOKIE2_, func_LoadSource);


static refalrts::FnResult func_LexFolding(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & LexFolding/4 e.SourceText/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.SourceText as range 2
  //DEBUG: e.SourceText: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & NormalizeTokens/4 } </5 & Root/6 (/7 )/8 Tile{ AsIs: e.SourceText/2 } >/9 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_Root]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_NormalizeTokens]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_LexFolding("LexFolding", COOKIE1_, COOKIE2_, func_LexFolding);


static refalrts::FnResult func_StrDirective(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & StrDirective/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StrDirective/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & StrDirective/4 # EEnum/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_EEnum], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'E'/0 HalfReuse: 'E'/4 HalfReuse: 'N'/5 HalfReuse: 'U'/1 } 'M'/6 Tile{ ]] }
    refalrts::alloc_char(vm, context[6], 'M');
    refalrts::reinit_char(context[0], 'E');
    refalrts::reinit_char(context[4], 'E');
    refalrts::reinit_char(context[5], 'N');
    refalrts::reinit_char(context[1], 'U');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrDirective/4 # Entry/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Entry], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'E'/0 HalfReuse: 'N'/4 HalfReuse: 'T'/5 HalfReuse: 'R'/1 } 'Y'/6 Tile{ ]] }
    refalrts::alloc_char(vm, context[6], 'Y');
    refalrts::reinit_char(context[0], 'E');
    refalrts::reinit_char(context[4], 'N');
    refalrts::reinit_char(context[5], 'T');
    refalrts::reinit_char(context[1], 'R');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrDirective/4 # Enum/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Enum], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'E'/0 HalfReuse: 'N'/4 HalfReuse: 'U'/5 HalfReuse: 'M'/1 ]] }
    refalrts::reinit_char(context[0], 'E');
    refalrts::reinit_char(context[4], 'N');
    refalrts::reinit_char(context[5], 'U');
    refalrts::reinit_char(context[1], 'M');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrDirective/4 # Extern/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Extern], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'E'/0 HalfReuse: 'X'/4 HalfReuse: 'T'/5 HalfReuse: 'E'/1 }"RN"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "RN", 2);
    refalrts::reinit_char(context[0], 'E');
    refalrts::reinit_char(context[4], 'X');
    refalrts::reinit_char(context[5], 'T');
    refalrts::reinit_char(context[1], 'E');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrDirective/4 # Forward/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Forward], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'F'/0 HalfReuse: 'O'/4 HalfReuse: 'R'/5 HalfReuse: 'W'/1 }"ARD"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "ARD", 3);
    refalrts::reinit_char(context[0], 'F');
    refalrts::reinit_char(context[4], 'O');
    refalrts::reinit_char(context[5], 'R');
    refalrts::reinit_char(context[1], 'W');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrDirective/4 # Swap/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Swap], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'S'/0 HalfReuse: 'W'/4 HalfReuse: 'A'/5 HalfReuse: 'P'/1 ]] }
    refalrts::reinit_char(context[0], 'S');
    refalrts::reinit_char(context[4], 'W');
    refalrts::reinit_char(context[5], 'A');
    refalrts::reinit_char(context[1], 'P');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrDirective/4 # ESwap/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ESwap], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'E'/0 HalfReuse: 'S'/4 HalfReuse: 'W'/5 HalfReuse: 'A'/1 } 'P'/6 Tile{ ]] }
    refalrts::alloc_char(vm, context[6], 'P');
    refalrts::reinit_char(context[0], 'E');
    refalrts::reinit_char(context[4], 'S');
    refalrts::reinit_char(context[5], 'W');
    refalrts::reinit_char(context[1], 'A');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrDirective/4 # Ident/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Ident], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'L'/0 HalfReuse: 'A'/4 HalfReuse: 'B'/5 HalfReuse: 'E'/1 } 'L'/6 Tile{ ]] }
    refalrts::alloc_char(vm, context[6], 'L');
    refalrts::reinit_char(context[0], 'L');
    refalrts::reinit_char(context[4], 'A');
    refalrts::reinit_char(context[5], 'B');
    refalrts::reinit_char(context[1], 'E');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrDirective/4 # Include/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Include], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'I'/0 HalfReuse: 'N'/4 HalfReuse: 'C'/5 HalfReuse: 'L'/1 }"UDE"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "UDE", 3);
    refalrts::reinit_char(context[0], 'I');
    refalrts::reinit_char(context[4], 'N');
    refalrts::reinit_char(context[5], 'C');
    refalrts::reinit_char(context[1], 'L');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StrDirective/4 # Spec/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Spec], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'S'/0 HalfReuse: 'P'/4 HalfReuse: 'E'/5 HalfReuse: 'C'/1 ]] }
    refalrts::reinit_char(context[0], 'S');
    refalrts::reinit_char(context[4], 'P');
    refalrts::reinit_char(context[5], 'E');
    refalrts::reinit_char(context[1], 'C');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StrDirective/4 # Meta/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_Meta], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'M'/0 HalfReuse: 'E'/4 HalfReuse: 'T'/5 HalfReuse: 'A'/1 ]] }
  refalrts::reinit_char(context[0], 'M');
  refalrts::reinit_char(context[4], 'E');
  refalrts::reinit_char(context[5], 'T');
  refalrts::reinit_char(context[1], 'A');
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StrDirective("StrDirective", COOKIE1_, COOKIE2_, func_StrDirective);


static refalrts::FnResult func_SRm_StrFromToken(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & SR-StrFromToken/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SR-StrFromToken/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & SR-StrFromToken/4 # TkChar/5 s.Char/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkChar], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.Char: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\''/0 HalfReuse: </4 HalfReuse: & EscapeChar/5 AsIs: s.Char/8 AsIs: >/1 } '\''/9 Tile{ ]] }
    refalrts::alloc_char(vm, context[9], '\'');
    refalrts::reinit_char(context[0], '\'');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_EscapeChar]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkCompound/5 e.Chars/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[5] ) )
      continue;
    // closed e.Chars as range 6
    //DEBUG: e.Chars: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: </4 HalfReuse: & EscapeString/5 AsIs: e.Chars/6 AsIs: >/1 } '\"'/8 Tile{ ]] }
    refalrts::alloc_char(vm, context[8], '\"');
    refalrts::reinit_char(context[0], '\"');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_EscapeString]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 s.new3/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    do {
      // </0 & SR-StrFromToken/4 # TkCloseADT/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: ']'/5 HalfReuse: '\"'/1 ]] }
      refalrts::reinit_char(context[4], '\"');
      refalrts::reinit_char(context[5], ']');
      refalrts::reinit_char(context[1], '\"');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkCloseCall/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: '>'/5 HalfReuse: '\"'/1 ]] }
      refalrts::reinit_char(context[4], '\"');
      refalrts::reinit_char(context[5], '>');
      refalrts::reinit_char(context[1], '\"');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkCloseBlock/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: '}'/5 HalfReuse: '\"'/1 ]] }
      refalrts::reinit_char(context[4], '\"');
      refalrts::reinit_char(context[5], '}');
      refalrts::reinit_char(context[1], '\"');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkCloseBracket/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: ')'/5 HalfReuse: '\"'/1 ]] }
      refalrts::reinit_char(context[4], '\"');
      refalrts::reinit_char(context[5], ')');
      refalrts::reinit_char(context[1], '\"');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SR-StrFromToken/4 # TkComma/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkComma], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: ','/5 HalfReuse: '\"'/1 ]] }
    refalrts::reinit_char(context[4], '\"');
    refalrts::reinit_char(context[5], ',');
    refalrts::reinit_char(context[1], '\"');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkDirective/5 s.new3/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkDirective], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # EEnum/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_EEnum], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'E'/5 HalfReuse: 'E'/8 HalfReuse: 'N'/1 }"UM\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "UM\"", 3);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'E');
      refalrts::reinit_char(context[8], 'E');
      refalrts::reinit_char(context[1], 'N');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # Entry/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Entry], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'E'/5 HalfReuse: 'N'/8 HalfReuse: 'T'/1 }"RY\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "RY\"", 3);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'E');
      refalrts::reinit_char(context[8], 'N');
      refalrts::reinit_char(context[1], 'T');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # Enum/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Enum], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'E'/5 HalfReuse: 'N'/8 HalfReuse: 'U'/1 }"M\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "M\"", 2);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'E');
      refalrts::reinit_char(context[8], 'N');
      refalrts::reinit_char(context[1], 'U');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # Extern/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Extern], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'E'/5 HalfReuse: 'X'/8 HalfReuse: 'T'/1 }"ERN\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "ERN\"", 4);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'E');
      refalrts::reinit_char(context[8], 'X');
      refalrts::reinit_char(context[1], 'T');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # Forward/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Forward], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'F'/5 HalfReuse: 'O'/8 HalfReuse: 'R'/1 }"WARD\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "WARD\"", 5);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'F');
      refalrts::reinit_char(context[8], 'O');
      refalrts::reinit_char(context[1], 'R');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # Swap/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Swap], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'S'/5 HalfReuse: 'W'/8 HalfReuse: 'A'/1 }"P\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "P\"", 2);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'S');
      refalrts::reinit_char(context[8], 'W');
      refalrts::reinit_char(context[1], 'A');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # ESwap/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_ESwap], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'E'/5 HalfReuse: 'S'/8 HalfReuse: 'W'/1 }"AP\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "AP\"", 3);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'E');
      refalrts::reinit_char(context[8], 'S');
      refalrts::reinit_char(context[1], 'W');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # Ident/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Ident], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'L'/5 HalfReuse: 'A'/8 HalfReuse: 'B'/1 }"EL\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "EL\"", 3);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'L');
      refalrts::reinit_char(context[8], 'A');
      refalrts::reinit_char(context[1], 'B');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # Include/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Include], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'I'/5 HalfReuse: 'N'/8 HalfReuse: 'C'/1 }"LUDE\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "LUDE\"", 5);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'I');
      refalrts::reinit_char(context[8], 'N');
      refalrts::reinit_char(context[1], 'C');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # Spec/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Spec], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'S'/5 HalfReuse: 'P'/8 HalfReuse: 'E'/1 }"C\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "C\"", 2);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'S');
      refalrts::reinit_char(context[8], 'P');
      refalrts::reinit_char(context[1], 'E');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkDirective/5 # Meta/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Meta], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '\"'/0 HalfReuse: '$'/4 HalfReuse: 'M'/5 HalfReuse: 'E'/8 HalfReuse: 'T'/1 }"A\""/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "A\"", 2);
      refalrts::reinit_char(context[0], '\"');
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[5], 'M');
      refalrts::reinit_char(context[8], 'E');
      refalrts::reinit_char(context[1], 'T');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SR-StrFromToken/4 # TkDirective/5 s.Directive/8 >/1
    //DEBUG: s.Directive: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } '\"'/9 Tile{ HalfReuse: '$'/0 HalfReuse: </4 HalfReuse: & StrDirective*11/5 AsIs: s.Directive/8 AsIs: >/1 } '\"'/10 Tile{ ]] }
    refalrts::alloc_char(vm, context[9], '\"');
    refalrts::alloc_char(vm, context[10], '\"');
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_gen_StrDirective_D11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkEOF/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'e'/0 HalfReuse: 'n'/4 HalfReuse: 'd'/5 HalfReuse: '-'/1 }"of-file"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "of-file", 7);
    refalrts::reinit_char(context[0], 'e');
    refalrts::reinit_char(context[4], 'n');
    refalrts::reinit_char(context[5], 'd');
    refalrts::reinit_char(context[1], '-');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkError/5 e.Message/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkError], context[5] ) )
      continue;
    // closed e.Message as range 6
    //DEBUG: e.Message: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'L'/0 HalfReuse: 'E'/4 HalfReuse: 'X'/5 }"ER"/8 Tile{ HalfReuse: ' '/1 }"ERROR: "/10 Tile{ AsIs: e.Message/6 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "ER", 2);
    refalrts::alloc_chars(vm, context[10], context[11], "ERROR: ", 7);
    refalrts::reinit_char(context[0], 'L');
    refalrts::reinit_char(context[4], 'E');
    refalrts::reinit_char(context[5], 'X');
    refalrts::reinit_char(context[1], ' ');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkIdentMarker/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkIdentMarker], context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: '#'/5 HalfReuse: '\"'/1 ]] }
    refalrts::reinit_char(context[4], '\"');
    refalrts::reinit_char(context[5], '#');
    refalrts::reinit_char(context[1], '\"');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkName/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkName], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'N'/0 HalfReuse: 'a'/4 HalfReuse: 'm'/5 } Tile{ HalfReuse: 'e'/1 } ' '/8 Tile{ AsIs: e.Name/6 } Tile{ ]] }
    refalrts::alloc_char(vm, context[8], ' ');
    refalrts::reinit_char(context[0], 'N');
    refalrts::reinit_char(context[4], 'a');
    refalrts::reinit_char(context[5], 'm');
    refalrts::reinit_char(context[1], 'e');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkNumber/5 s.new3/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    do {
      // </0 & SR-StrFromToken/4 # TkNumber/5 # Cookie1/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Cookie1], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: 'N'/0 HalfReuse: 'u'/4 HalfReuse: 'm'/5 HalfReuse: 'b'/8 HalfReuse: 'e'/1 }"r <Cookie1>"/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "r <Cookie1>", 11);
      refalrts::reinit_char(context[0], 'N');
      refalrts::reinit_char(context[4], 'u');
      refalrts::reinit_char(context[5], 'm');
      refalrts::reinit_char(context[8], 'b');
      refalrts::reinit_char(context[1], 'e');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkNumber/5 # Cookie2/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_Cookie2], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: 'N'/0 HalfReuse: 'u'/4 HalfReuse: 'm'/5 HalfReuse: 'b'/8 HalfReuse: 'e'/1 }"r <Cookie2>"/9 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], "r <Cookie2>", 11);
      refalrts::reinit_char(context[0], 'N');
      refalrts::reinit_char(context[4], 'u');
      refalrts::reinit_char(context[5], 'm');
      refalrts::reinit_char(context[8], 'b');
      refalrts::reinit_char(context[1], 'e');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SR-StrFromToken/4 # TkNumber/5 s.Number/8 >/1
    //DEBUG: s.Number: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"Number"/9 Tile{ HalfReuse: ' '/0 HalfReuse: </4 HalfReuse: & Symb/5 AsIs: s.Number/8 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[9], context[10], "Number", 6);
    refalrts::reinit_char(context[0], ' ');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Symb]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 s.new3/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    do {
      // </0 & SR-StrFromToken/4 # TkOpenADT/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: '['/5 HalfReuse: '\"'/1 ]] }
      refalrts::reinit_char(context[4], '\"');
      refalrts::reinit_char(context[5], '[');
      refalrts::reinit_char(context[1], '\"');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkOpenCall/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: '<'/5 HalfReuse: '\"'/1 ]] }
      refalrts::reinit_char(context[4], '\"');
      refalrts::reinit_char(context[5], '<');
      refalrts::reinit_char(context[1], '\"');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkOpenBlock/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: '{'/5 HalfReuse: '\"'/1 ]] }
      refalrts::reinit_char(context[4], '\"');
      refalrts::reinit_char(context[5], '{');
      refalrts::reinit_char(context[1], '\"');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkOpenBracket/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: '('/5 HalfReuse: '\"'/1 ]] }
      refalrts::reinit_char(context[4], '\"');
      refalrts::reinit_char(context[5], '(');
      refalrts::reinit_char(context[1], '\"');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkReplace/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkReplace], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: '='/5 HalfReuse: '\"'/1 ]] }
      refalrts::reinit_char(context[4], '\"');
      refalrts::reinit_char(context[5], '=');
      refalrts::reinit_char(context[1], '\"');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SR-StrFromToken/4 # TkSemicolon/5 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[5] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: ';'/5 HalfReuse: '\"'/1 ]] }
      refalrts::reinit_char(context[4], '\"');
      refalrts::reinit_char(context[5], ';');
      refalrts::reinit_char(context[1], '\"');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SR-StrFromToken/4 # TkColon/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkColon], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: ':'/5 HalfReuse: '\"'/1 ]] }
    refalrts::reinit_char(context[4], '\"');
    refalrts::reinit_char(context[5], ':');
    refalrts::reinit_char(context[1], '\"');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkUnexpected/5 e.Unexpected/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[5] ) )
      continue;
    // closed e.Unexpected as range 6
    //DEBUG: e.Unexpected: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }"Unexpected character"/8 Tile{ HalfReuse: 's'/0 HalfReuse: ' '/4 HalfReuse: '<'/5 AsIs: e.Unexpected/6 HalfReuse: '>'/1 ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "Unexpected character", 20);
    refalrts::reinit_char(context[0], 's');
    refalrts::reinit_char(context[4], ' ');
    refalrts::reinit_char(context[5], '<');
    refalrts::reinit_char(context[1], '>');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkVariable/5 s.Mode/8 e.Index/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    // closed e.Index as range 6
    //DEBUG: s.Mode: 8
    //DEBUG: e.Index: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} # TkVariable/5 s.Mode/8 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: s.Mode8 /0 HalfReuse: '.'/4 } Tile{ AsIs: e.Index/6 } Tile{ ]] }
    refalrts::reinit_svar( context[0], context[8] );
    refalrts::reinit_char(context[4], '.');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkRedefinition/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkRedefinition], context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\"'/4 HalfReuse: '^'/5 HalfReuse: '\"'/1 ]] }
    refalrts::reinit_char(context[4], '\"');
    refalrts::reinit_char(context[5], '^');
    refalrts::reinit_char(context[1], '\"');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SR-StrFromToken/4 # TkNativeBlock/5 e.Block/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkNativeBlock], context[5] ) )
      continue;
    // closed e.Block as range 6
    //DEBUG: e.Block: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Block/6 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'a'/4 HalfReuse: 't'/5 }"ive code insertio"/8 Tile{ HalfReuse: 'n'/1 ]] }
    refalrts::alloc_chars(vm, context[8], context[9], "ive code insertio", 17);
    refalrts::reinit_char(context[0], 'n');
    refalrts::reinit_char(context[4], 'a');
    refalrts::reinit_char(context[5], 't');
    refalrts::reinit_char(context[1], 'n');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::splice_to_freelist_open( vm, context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SR-StrFromToken/4 s.new3/5 s.new4/6 >/1
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & SR-StrFromToken/4 # Open/5 s.OpenBracket/6 >/1
    if( ! refalrts::ident_term( identifiers[ident_Open], context[5] ) )
      continue;
    //DEBUG: s.OpenBracket: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & SR-StrFromToken/5 AsIs: s.OpenBracket/6 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_SRm_StrFromToken]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SR-StrFromToken/4 # Close/5 s.CloseBracket/6 >/1
  if( ! refalrts::ident_term( identifiers[ident_Close], context[5] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.CloseBracket: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & SR-StrFromToken/5 AsIs: s.CloseBracket/6 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[5], functions[efunc_SRm_StrFromToken]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[4];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SRm_StrFromToken("SR-StrFromToken", 0U, 0U, func_SRm_StrFromToken);


static refalrts::FnResult func_gen_NormalizeToken_S16B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & NormalizeToken$16:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & NormalizeToken$16:1/4 e.Compound-B/7 '\000'/11 e.Compound-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = refalrts::char_left( '\000', context[9], context[10] );
      if( ! context[11] )
        continue;
      // closed e.Compound-E as range 9
      //DEBUG: e.Compound-B: 7
      //DEBUG: e.Compound-E: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Compound-E/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/12 # TkWarning/13 # nul-in-compound/14 Tile{ HalfReuse: 'Z'/1 }"ero byte in compound symbol"/15 )/17 Tile{ HalfReuse: (/0 HalfReuse: # TkCompound/4 AsIs: e.Compound-B/7 HalfReuse: )/11 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_TkWarning]);
      refalrts::alloc_ident(vm, context[14], identifiers[ident_nulm_inm_compound]);
      refalrts::alloc_chars(vm, context[15], context[16], "ero byte in compound symbol", 27);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::reinit_char(context[1], 'Z');
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkCompound]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::link_brackets( context[0], context[11] );
      refalrts::link_brackets( context[12], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[12], context[14] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NormalizeToken$16:1/4 e.Compound$a/2 >/1
  // closed e.Compound$a as range 2
  //DEBUG: e.Compound$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkCompound/4 AsIs: e.Compound$a/2 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_TkCompound]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NormalizeToken_S16B1("NormalizeToken$16:1", COOKIE1_, COOKIE2_, func_gen_NormalizeToken_S16B1);


static refalrts::FnResult func_gen_NormalizeToken_S16A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & NormalizeToken$16=1/4 # Success/5 e.Compound/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = refalrts::ident_left( identifiers[ident_Success], context[2], context[3] );
  if( ! context[5] )
    return refalrts::cRecognitionImpossible;
  // closed e.Compound as range 2
  //DEBUG: e.Compound: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & NormalizeToken$16:1/5 AsIs: e.Compound/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[5], functions[efunc_gen_NormalizeToken_S16B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[4];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NormalizeToken_S16A1("NormalizeToken$16=1", COOKIE1_, COOKIE2_, func_gen_NormalizeToken_S16A1);


static refalrts::FnResult func_NormalizeToken(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & NormalizeToken/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & NormalizeToken/4 (/9 s.new1/11 e.new2/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    // closed e.new2 as range 7
    do {
      // </0 & NormalizeToken/4 (/9 # TkDirective/11 e.new3/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_TkDirective], context[11] ) )
        continue;
      // closed e.new3 as range 12
      do {
        // </0 & NormalizeToken/4 (/9 # TkDirective/11 e.new4/14 s.new5/19 s.new6/18 s.new7/17 s.new8/16 )/10 >/1
        context[14] = context[12];
        context[15] = context[13];
        if( ! refalrts::svar_right( context[16], context[14], context[15] ) )
          continue;
        if( ! refalrts::svar_right( context[17], context[14], context[15] ) )
          continue;
        if( ! refalrts::svar_right( context[18], context[14], context[15] ) )
          continue;
        if( ! refalrts::svar_right( context[19], context[14], context[15] ) )
          continue;
        // closed e.new4 as range 14
        do {
          // </0 & NormalizeToken/4 (/9 # TkDirective/11 e.new9/20 'E'/19 'N'/18 'U'/17 'M'/16 )/10 >/1
          context[20] = context[14];
          context[21] = context[15];
          if( ! refalrts::char_term( 'E', context[19] ) )
            continue;
          if( ! refalrts::char_term( 'N', context[18] ) )
            continue;
          if( ! refalrts::char_term( 'U', context[17] ) )
            continue;
          if( ! refalrts::char_term( 'M', context[16] ) )
            continue;
          // closed e.new9 as range 20
          do {
            // </0 & NormalizeToken/4 (/9 # TkDirective/11 'E'/19 'N'/18 'U'/17 'M'/16 )/10 >/1
            if( ! refalrts::empty_seq( context[20], context[21] ) )
              continue;

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'U'/17 'M'/16 )/10 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # Enum/19 HalfReuse: )/18 } Tile{ ]] }
            refalrts::reinit_ident(context[19], identifiers[ident_Enum]);
            refalrts::reinit_close_bracket(context[18]);
            refalrts::link_brackets( context[9], context[18] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[9], context[18] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & NormalizeToken/4 (/9 # TkDirective/11 'E'/24 'E'/19 'N'/18 'U'/17 'M'/16 )/10 >/1
          context[22] = context[20];
          context[23] = context[21];
          context[24] = refalrts::char_left( 'E', context[22], context[23] );
          if( ! context[24] )
            continue;
          if( ! refalrts::empty_seq( context[22], context[23] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'N'/18 'U'/17 'M'/16 )/10 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # EEnum/24 HalfReuse: )/19 } Tile{ ]] }
          refalrts::reinit_ident(context[24], identifiers[ident_EEnum]);
          refalrts::reinit_close_bracket(context[19]);
          refalrts::link_brackets( context[9], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[19] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkDirective/11 e.new12/20 s.new13/22 s.new11/19 s.new10/18 'R'/17 s.new9/16 )/10 >/1
          context[20] = context[14];
          context[21] = context[15];
          if( ! refalrts::char_term( 'R', context[17] ) )
            continue;
          if( ! refalrts::svar_right( context[22], context[20], context[21] ) )
            continue;
          // closed e.new12 as range 20
          do {
            // </0 & NormalizeToken/4 (/9 # TkDirective/11 'E'/22 'N'/19 'T'/18 'R'/17 'Y'/16 )/10 >/1
            if( ! refalrts::char_term( 'E', context[22] ) )
              continue;
            if( ! refalrts::char_term( 'N', context[19] ) )
              continue;
            if( ! refalrts::char_term( 'T', context[18] ) )
              continue;
            if( ! refalrts::char_term( 'Y', context[16] ) )
              continue;
            if( ! refalrts::empty_seq( context[20], context[21] ) )
              continue;

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'T'/18 'R'/17 'Y'/16 )/10 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # Entry/22 HalfReuse: )/19 } Tile{ ]] }
            refalrts::reinit_ident(context[22], identifiers[ident_Entry]);
            refalrts::reinit_close_bracket(context[19]);
            refalrts::link_brackets( context[9], context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[9], context[19] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & NormalizeToken/4 (/9 # TkDirective/11 e.new18/23 s.new19/25 s.new17/22 s.new16/19 s.new15/18 'R'/17 s.new14/16 )/10 >/1
          context[23] = context[20];
          context[24] = context[21];
          if( ! refalrts::svar_right( context[25], context[23], context[24] ) )
            continue;
          // closed e.new18 as range 23
          do {
            // </0 & NormalizeToken/4 (/9 # TkDirective/11 'E'/25 'X'/22 'T'/19 'E'/18 'R'/17 'N'/16 )/10 >/1
            if( ! refalrts::char_term( 'E', context[25] ) )
              continue;
            if( ! refalrts::char_term( 'X', context[22] ) )
              continue;
            if( ! refalrts::char_term( 'T', context[19] ) )
              continue;
            if( ! refalrts::char_term( 'E', context[18] ) )
              continue;
            if( ! refalrts::char_term( 'N', context[16] ) )
              continue;
            if( ! refalrts::empty_seq( context[23], context[24] ) )
              continue;

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'T'/19 'E'/18 'R'/17 'N'/16 )/10 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # Extern/25 HalfReuse: )/22 } Tile{ ]] }
            refalrts::reinit_ident(context[25], identifiers[ident_Extern]);
            refalrts::reinit_close_bracket(context[22]);
            refalrts::link_brackets( context[9], context[22] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[9], context[22] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & NormalizeToken/4 (/9 # TkDirective/11 'F'/28 'O'/25 'R'/22 'W'/19 'A'/18 'R'/17 'D'/16 )/10 >/1
          context[26] = context[23];
          context[27] = context[24];
          if( ! refalrts::char_term( 'O', context[25] ) )
            continue;
          if( ! refalrts::char_term( 'R', context[22] ) )
            continue;
          if( ! refalrts::char_term( 'W', context[19] ) )
            continue;
          if( ! refalrts::char_term( 'A', context[18] ) )
            continue;
          if( ! refalrts::char_term( 'D', context[16] ) )
            continue;
          context[28] = refalrts::char_left( 'F', context[26], context[27] );
          if( ! context[28] )
            continue;
          if( ! refalrts::empty_seq( context[26], context[27] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'R'/22 'W'/19 'A'/18 'R'/17 'D'/16 )/10 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # Forward/28 HalfReuse: )/25 } Tile{ ]] }
          refalrts::reinit_ident(context[28], identifiers[ident_Forward]);
          refalrts::reinit_close_bracket(context[25]);
          refalrts::link_brackets( context[9], context[25] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[25] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkDirective/11 e.new9/20 'S'/19 'W'/18 'A'/17 'P'/16 )/10 >/1
          context[20] = context[14];
          context[21] = context[15];
          if( ! refalrts::char_term( 'S', context[19] ) )
            continue;
          if( ! refalrts::char_term( 'W', context[18] ) )
            continue;
          if( ! refalrts::char_term( 'A', context[17] ) )
            continue;
          if( ! refalrts::char_term( 'P', context[16] ) )
            continue;
          // closed e.new9 as range 20
          do {
            // </0 & NormalizeToken/4 (/9 # TkDirective/11 'S'/19 'W'/18 'A'/17 'P'/16 )/10 >/1
            if( ! refalrts::empty_seq( context[20], context[21] ) )
              continue;

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'A'/17 'P'/16 )/10 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # Swap/19 HalfReuse: )/18 } Tile{ ]] }
            refalrts::reinit_ident(context[19], identifiers[ident_Swap]);
            refalrts::reinit_close_bracket(context[18]);
            refalrts::link_brackets( context[9], context[18] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[9], context[18] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & NormalizeToken/4 (/9 # TkDirective/11 'E'/24 'S'/19 'W'/18 'A'/17 'P'/16 )/10 >/1
          context[22] = context[20];
          context[23] = context[21];
          context[24] = refalrts::char_left( 'E', context[22], context[23] );
          if( ! context[24] )
            continue;
          if( ! refalrts::empty_seq( context[22], context[23] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'W'/18 'A'/17 'P'/16 )/10 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # ESwap/24 HalfReuse: )/19 } Tile{ ]] }
          refalrts::reinit_ident(context[24], identifiers[ident_ESwap]);
          refalrts::reinit_close_bracket(context[19]);
          refalrts::link_brackets( context[9], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[19] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkDirective/11 e.new13/20 s.new14/22 s.new12/19 s.new11/18 s.new10/17 s.new9/16 )/10 >/1
          context[20] = context[14];
          context[21] = context[15];
          if( ! refalrts::svar_right( context[22], context[20], context[21] ) )
            continue;
          // closed e.new13 as range 20
          do {
            // </0 & NormalizeToken/4 (/9 # TkDirective/11 'L'/22 'A'/19 'B'/18 'E'/17 'L'/16 )/10 >/1
            if( ! refalrts::char_term( 'L', context[22] ) )
              continue;
            if( ! refalrts::char_term( 'A', context[19] ) )
              continue;
            if( ! refalrts::char_term( 'B', context[18] ) )
              continue;
            if( ! refalrts::char_term( 'E', context[17] ) )
              continue;
            if( ! refalrts::char_term( 'L', context[16] ) )
              continue;
            if( ! refalrts::empty_seq( context[20], context[21] ) )
              continue;

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'B'/18 'E'/17 'L'/16 )/10 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # Ident/22 HalfReuse: )/19 } Tile{ ]] }
            refalrts::reinit_ident(context[22], identifiers[ident_Ident]);
            refalrts::reinit_close_bracket(context[19]);
            refalrts::link_brackets( context[9], context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[9], context[19] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & NormalizeToken/4 (/9 # TkDirective/11 e.new20/23 s.new21/26 s.new22/25 s.new19/22 s.new18/19 s.new17/18 s.new16/17 s.new15/16 )/10 >/1
          context[23] = context[20];
          context[24] = context[21];
          if( ! refalrts::svar_right( context[25], context[23], context[24] ) )
            continue;
          if( ! refalrts::svar_right( context[26], context[23], context[24] ) )
            continue;
          // closed e.new20 as range 23
          do {
            // </0 & NormalizeToken/4 (/9 # TkDirective/11 'I'/26 'N'/25 'C'/22 'L'/19 'U'/18 'D'/17 'E'/16 )/10 >/1
            if( ! refalrts::char_term( 'I', context[26] ) )
              continue;
            if( ! refalrts::char_term( 'N', context[25] ) )
              continue;
            if( ! refalrts::char_term( 'C', context[22] ) )
              continue;
            if( ! refalrts::char_term( 'L', context[19] ) )
              continue;
            if( ! refalrts::char_term( 'U', context[18] ) )
              continue;
            if( ! refalrts::char_term( 'D', context[17] ) )
              continue;
            if( ! refalrts::char_term( 'E', context[16] ) )
              continue;
            if( ! refalrts::empty_seq( context[23], context[24] ) )
              continue;

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'C'/22 'L'/19 'U'/18 'D'/17 'E'/16 )/10 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # Include/26 HalfReuse: )/25 } Tile{ ]] }
            refalrts::reinit_ident(context[26], identifiers[ident_Include]);
            refalrts::reinit_close_bracket(context[25]);
            refalrts::link_brackets( context[9], context[25] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[9], context[25] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & NormalizeToken/4 (/9 # TkDirective/11 e.new28/27 'S'/26 s.new27/25 s.new26/22 s.new25/19 'E'/18 s.new24/17 s.new23/16 )/10 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::char_term( 'S', context[26] ) )
            continue;
          if( ! refalrts::char_term( 'E', context[18] ) )
            continue;
          // closed e.new28 as range 27
          do {
            // </0 & NormalizeToken/4 (/9 # TkDirective/11 'E'/31 'A'/32 'S'/26 'T'/25 'E'/22 'R'/19 'E'/18 'G'/17 'G'/16 )/10 >/1
            context[29] = context[27];
            context[30] = context[28];
            if( ! refalrts::char_term( 'T', context[25] ) )
              continue;
            if( ! refalrts::char_term( 'E', context[22] ) )
              continue;
            if( ! refalrts::char_term( 'R', context[19] ) )
              continue;
            if( ! refalrts::char_term( 'G', context[17] ) )
              continue;
            if( ! refalrts::char_term( 'G', context[16] ) )
              continue;
            context[31] = refalrts::char_left( 'E', context[29], context[30] );
            if( ! context[31] )
              continue;
            context[32] = refalrts::char_left( 'A', context[29], context[30] );
            if( ! context[32] )
              continue;
            if( ! refalrts::empty_seq( context[29], context[30] ) )
              continue;

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@2/4 HalfReuse: 'M'/9 HalfReuse: 'e'/11 Reuse: 'd'/31 Reuse: 'v'/32 Reuse: 'e'/26 Reuse: 'd'/25 Reuse: 'n'/22 Reuse: 'o'/19 Reuse: '-'/18 Reuse: 'o'/17 Reuse: 'r'/16 HalfReuse: 'i'/10 HalfReuse: 'e'/1 }"ntirovannoe programmirovanie"/33 >/35 Tile{ ]] }
            refalrts::alloc_chars(vm, context[33], context[34], "ntirovannoe programmirovanie", 28);
            refalrts::alloc_close_call(vm, context[35]);
            refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
            refalrts::reinit_char(context[9], 'M');
            refalrts::reinit_char(context[11], 'e');
            refalrts::update_char(context[31], 'd');
            refalrts::update_char(context[32], 'v');
            refalrts::update_char(context[26], 'e');
            refalrts::update_char(context[25], 'd');
            refalrts::update_char(context[22], 'n');
            refalrts::update_char(context[19], 'o');
            refalrts::update_char(context[18], '-');
            refalrts::update_char(context[17], 'o');
            refalrts::update_char(context[16], 'r');
            refalrts::reinit_char(context[10], 'i');
            refalrts::reinit_char(context[1], 'e');
            refalrts::push_stack( vm, context[35] );
            refalrts::push_stack( vm, context[0] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[33], context[35] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & NormalizeToken/4 (/9 # TkDirective/11 'S'/26 'C'/25 'O'/22 'P'/19 'E'/18 'I'/17 'D'/16 )/10 >/1
          if( ! refalrts::char_term( 'C', context[25] ) )
            continue;
          if( ! refalrts::char_term( 'O', context[22] ) )
            continue;
          if( ! refalrts::char_term( 'P', context[19] ) )
            continue;
          if( ! refalrts::char_term( 'I', context[17] ) )
            continue;
          if( ! refalrts::char_term( 'D', context[16] ) )
            continue;
          if( ! refalrts::empty_seq( context[27], context[28] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/29 # TkNumber/30 # Cookie1/31 )/32 (/33 # TkNumber/34 # Cookie2/35 )/36 Tile{ HalfReuse: (/0 HalfReuse: # TkWarning/4 HalfReuse: # deprecated/9 HalfReuse: '$'/11 AsIs: 'S'/26 AsIs: 'C'/25 AsIs: 'O'/22 AsIs: 'P'/19 AsIs: 'E'/18 AsIs: 'I'/17 AsIs: 'D'/16 HalfReuse: ' '/10 HalfReuse: 'i'/1 }"s deprecated"/37 )/39 Tile{ ]] }
          refalrts::alloc_open_bracket(vm, context[29]);
          refalrts::alloc_ident(vm, context[30], identifiers[ident_TkNumber]);
          refalrts::alloc_ident(vm, context[31], identifiers[ident_Cookie1]);
          refalrts::alloc_close_bracket(vm, context[32]);
          refalrts::alloc_open_bracket(vm, context[33]);
          refalrts::alloc_ident(vm, context[34], identifiers[ident_TkNumber]);
          refalrts::alloc_ident(vm, context[35], identifiers[ident_Cookie2]);
          refalrts::alloc_close_bracket(vm, context[36]);
          refalrts::alloc_chars(vm, context[37], context[38], "s deprecated", 12);
          refalrts::alloc_close_bracket(vm, context[39]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_ident(context[4], identifiers[ident_TkWarning]);
          refalrts::reinit_ident(context[9], identifiers[ident_deprecated]);
          refalrts::reinit_char(context[11], '$');
          refalrts::reinit_char(context[10], ' ');
          refalrts::reinit_char(context[1], 'i');
          refalrts::link_brackets( context[0], context[39] );
          refalrts::link_brackets( context[33], context[36] );
          refalrts::link_brackets( context[29], context[32] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[37], context[39] );
          res = refalrts::splice_evar( res, context[0], context[1] );
          res = refalrts::splice_evar( res, context[29], context[36] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NormalizeToken/4 (/9 # TkDirective/11 s.new12/19 s.new11/18 s.new10/17 s.new9/16 )/10 >/1
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        do {
          // </0 & NormalizeToken/4 (/9 # TkDirective/11 'S'/19 'P'/18 'E'/17 'C'/16 )/10 >/1
          if( ! refalrts::char_term( 'S', context[19] ) )
            continue;
          if( ! refalrts::char_term( 'P', context[18] ) )
            continue;
          if( ! refalrts::char_term( 'E', context[17] ) )
            continue;
          if( ! refalrts::char_term( 'C', context[16] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'E'/17 'C'/16 )/10 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # Spec/19 HalfReuse: )/18 } Tile{ ]] }
          refalrts::reinit_ident(context[19], identifiers[ident_Spec]);
          refalrts::reinit_close_bracket(context[18]);
          refalrts::link_brackets( context[9], context[18] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[18] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NormalizeToken/4 (/9 # TkDirective/11 'M'/19 'E'/18 'T'/17 'A'/16 )/10 >/1
        if( ! refalrts::char_term( 'M', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'E', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'T', context[17] ) )
          continue;
        if( ! refalrts::char_term( 'A', context[16] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} 'T'/17 'A'/16 )/10 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkDirective/11 HalfReuse: # Meta/19 HalfReuse: )/18 } Tile{ ]] }
        refalrts::reinit_ident(context[19], identifiers[ident_Meta]);
        refalrts::reinit_close_bracket(context[18]);
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[9], context[18] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormalizeToken/4 (/9 # TkDirective/11 e.Directive/14 )/10 >/1
      context[14] = context[12];
      context[15] = context[13];
      // closed e.Directive as range 14
      //DEBUG: e.Directive: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/16 # TkError/17 'U'/18 Tile{ HalfReuse: 'n'/1 }"known directi"/19 Tile{ HalfReuse: 'v'/0 HalfReuse: 'e'/4 HalfReuse: ' '/9 HalfReuse: '$'/11 AsIs: e.Directive/14 AsIs: )/10 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_ident(vm, context[17], identifiers[ident_TkError]);
      refalrts::alloc_char(vm, context[18], 'U');
      refalrts::alloc_chars(vm, context[19], context[20], "known directi", 13);
      refalrts::reinit_char(context[1], 'n');
      refalrts::reinit_char(context[0], 'v');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_char(context[11], '$');
      refalrts::link_brackets( context[16], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[10] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[16], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 # TkEOF/11 )/10 >/1
      if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[11] ) )
        continue;
      if( ! refalrts::empty_seq( context[7], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkEOF/11 AsIs: )/10 } Tile{ ]] }
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 s.new3/11 s.new4/14 e.new5/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      // closed e.new5 as range 12
      do {
        // </0 & NormalizeToken/4 (/9 # TkLiteral-Char/11 s.Char/14 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_Char], context[11] ) )
          continue;
        if( ! refalrts::empty_seq( context[12], context[13] ) )
          continue;
        //DEBUG: s.Char: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 Reuse: # TkChar/11 AsIs: s.Char/14 AsIs: )/10 } Tile{ ]] }
        refalrts::update_ident(context[11], identifiers[ident_TkChar]);
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[9], context[10] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormalizeToken/4 (/9 # TkLiteral-Code/11 s.1/14 s.2/17 s.3/18 e.Overflow/15 )/10 >/1
      context[15] = context[12];
      context[16] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_Code], context[11] ) )
        continue;
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      if( ! refalrts::svar_left( context[18], context[15], context[16] ) )
        continue;
      // closed e.Overflow as range 15
      //DEBUG: s.1: 14
      //DEBUG: s.2: 17
      //DEBUG: s.3: 18
      //DEBUG: e.Overflow: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/19 # TkChar/20 </21 & Chr/22 Tile{ AsIs: </0 Reuse: & Numb-Overflow=1/4 HalfReuse: </9 HalfReuse: & Numb/11 AsIs: s.1/14 AsIs: s.2/17 AsIs: s.3/18 } >/23 >/24 >/25 Tile{ AsIs: )/10 } </26 & Map@3/27 Tile{ AsIs: e.Overflow/15 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_ident(vm, context[20], identifiers[ident_TkChar]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Chr]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z3]);
      refalrts::update_name(context[4], functions[efunc_gen_Numbm_Overflow_A1]);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[11], functions[efunc_Numb]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[19], context[10] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[0], context[18] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 # TkLiteral-Code/11 e.DecCode/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_Code], context[11] ) )
        continue;
      // closed e.DecCode as range 12
      //DEBUG: e.DecCode: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 # TkChar/15 </16 & Chr/17 Tile{ AsIs: </0 Reuse: & Numb-Overflow=1/4 HalfReuse: </9 HalfReuse: & Numb/11 AsIs: e.DecCode/12 HalfReuse: >/10 AsIs: >/1 } >/18 )/19 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::alloc_ident(vm, context[15], identifiers[ident_TkChar]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Chr]);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_Numbm_Overflow_A1]);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[11], functions[efunc_Numb]);
      refalrts::reinit_close_call(context[10]);
      refalrts::link_brackets( context[14], context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 # TkLiteral-OCode/11 e.new3/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_OCode], context[11] ) )
        continue;
      // closed e.new3 as range 12
      do {
        // </0 & NormalizeToken/4 (/9 # TkLiteral-OCode/11 s.1/16 s.2/17 s.3/18 e.Overflow/14 )/10 >/1
        context[14] = context[12];
        context[15] = context[13];
        if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
          continue;
        if( ! refalrts::svar_left( context[17], context[14], context[15] ) )
          continue;
        if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
          continue;
        // closed e.Overflow as range 14
        //DEBUG: s.1: 16
        //DEBUG: s.2: 17
        //DEBUG: s.3: 18
        //DEBUG: e.Overflow: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/19 Tile{ HalfReuse: # TkChar/0 HalfReuse: </4 HalfReuse: & CharFromNum/9 HalfReuse: 8/11 AsIs: s.1/16 AsIs: s.2/17 AsIs: s.3/18 } >/20 Tile{ AsIs: )/10 } </21 & Map@4/22 Tile{ AsIs: e.Overflow/14 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z4]);
        refalrts::reinit_ident(context[0], identifiers[ident_TkChar]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[9], functions[efunc_CharFromNum]);
        refalrts::reinit_number(context[11], 8UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[19], context[10] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[14], context[15] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[0], context[18] );
        res = refalrts::splice_elem( res, context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormalizeToken/4 (/9 # TkLiteral-OCode/11 e.OctCode/14 )/10 >/1
      context[14] = context[12];
      context[15] = context[13];
      // closed e.OctCode as range 14
      //DEBUG: e.OctCode: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/16 Tile{ HalfReuse: # TkChar/0 HalfReuse: </4 HalfReuse: & CharFromNum/9 HalfReuse: 8/11 AsIs: e.OctCode/14 HalfReuse: >/10 HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::reinit_ident(context[0], identifiers[ident_TkChar]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[9], functions[efunc_CharFromNum]);
      refalrts::reinit_number(context[11], 8UL);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[16], context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 # TkLiteral-XCode/11 e.HexCode/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_XCode], context[11] ) )
        continue;
      // closed e.HexCode as range 12
      //DEBUG: e.HexCode: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 Tile{ HalfReuse: # TkChar/0 HalfReuse: </4 HalfReuse: & CharFromNum/9 HalfReuse: 16/11 AsIs: e.HexCode/12 HalfReuse: >/10 HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::reinit_ident(context[0], identifiers[ident_TkChar]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[9], functions[efunc_CharFromNum]);
      refalrts::reinit_number(context[11], 16UL);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[14], context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_elem( res, context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 s.new3/11 e.new4/12 s.new5/14 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::svar_right( context[14], context[12], context[13] ) )
        continue;
      // closed e.new4 as range 12
      do {
        // </0 & NormalizeToken/4 (/9 s.new6/11 s.new7/14 )/10 >/1
        if( ! refalrts::empty_seq( context[12], context[13] ) )
          continue;
        do {
          // </0 & NormalizeToken/4 (/9 # TkLiteral-NewLine/11 'n'/14 )/10 >/1
          if( ! refalrts::char_term( 'n', context[14] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_NewLine], context[11] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 Reuse: # TkChar/11 Reuse: '\n'/14 AsIs: )/10 } Tile{ ]] }
          refalrts::update_ident(context[11], identifiers[ident_TkChar]);
          refalrts::update_char(context[14], '\n');
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[10] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkLiteral-CarriageReturn/11 'r'/14 )/10 >/1
          if( ! refalrts::char_term( 'r', context[14] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_CarriageReturn], context[11] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 Reuse: # TkChar/11 Reuse: '\r'/14 AsIs: )/10 } Tile{ ]] }
          refalrts::update_ident(context[11], identifiers[ident_TkChar]);
          refalrts::update_char(context[14], '\r');
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[10] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkLiteral-Tab/11 't'/14 )/10 >/1
          if( ! refalrts::char_term( 't', context[14] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_Tab], context[11] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 Reuse: # TkChar/11 Reuse: '\t'/14 AsIs: )/10 } Tile{ ]] }
          refalrts::update_ident(context[11], identifiers[ident_TkChar]);
          refalrts::update_char(context[14], '\t');
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[10] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkLiteral-Bell/11 'a'/14 )/10 >/1
          if( ! refalrts::char_term( 'a', context[14] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_Bell], context[11] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 Reuse: # TkChar/11 Reuse: '\007'/14 AsIs: )/10 } Tile{ ]] }
          refalrts::update_ident(context[11], identifiers[ident_TkChar]);
          refalrts::update_char(context[14], '\007');
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[10] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkLiteral-BS/11 'b'/14 )/10 >/1
          if( ! refalrts::char_term( 'b', context[14] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_BS], context[11] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 Reuse: # TkChar/11 Reuse: '\010'/14 AsIs: )/10 } Tile{ ]] }
          refalrts::update_ident(context[11], identifiers[ident_TkChar]);
          refalrts::update_char(context[14], '\010');
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[10] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkLiteral-FF/11 'f'/14 )/10 >/1
          if( ! refalrts::char_term( 'f', context[14] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_FF], context[11] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 Reuse: # TkChar/11 Reuse: '\014'/14 AsIs: )/10 } Tile{ ]] }
          refalrts::update_ident(context[11], identifiers[ident_TkChar]);
          refalrts::update_char(context[14], '\014');
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[9], context[10] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NormalizeToken/4 (/9 # TkLiteral-VT/11 'v'/14 )/10 >/1
        if( ! refalrts::char_term( 'v', context[14] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_TkLiteralm_VT], context[11] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 Reuse: # TkChar/11 Reuse: '\013'/14 AsIs: )/10 } Tile{ ]] }
        refalrts::update_ident(context[11], identifiers[ident_TkChar]);
        refalrts::update_char(context[14], '\013');
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[9], context[10] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormalizeToken/4 (/9 # TkCompound/11 '\"'/17 e.CompoundRep/15 '\"'/14 )/10 >/1
      context[15] = context[12];
      context[16] = context[13];
      if( ! refalrts::char_term( '\"', context[14] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[11] ) )
        continue;
      context[17] = refalrts::char_left( '\"', context[15], context[16] );
      if( ! context[17] )
        continue;
      // closed e.CompoundRep as range 15
      //DEBUG: e.CompoundRep: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} '\"'/17 {REMOVED TILE} '\"'/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & NormalizeToken$16=1/4 HalfReuse: </9 HalfReuse: & UnEscapeString-SR/11 } Tile{ AsIs: e.CompoundRep/15 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_NormalizeToken_S16A1]);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[11], functions[efunc_UnEscapeStringm_SR]);
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 # TkName/11 e.Name/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[11] ) )
        continue;
      // closed e.Name as range 12
      //DEBUG: e.Name: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkName/11 AsIs: e.Name/12 AsIs: )/10 } Tile{ ]] }
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 # TkNewLine/11 e.Accumulated/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_TkNewLine], context[11] ) )
        continue;
      // closed e.Accumulated as range 12
      //DEBUG: e.Accumulated: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} e.Accumulated/12 )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkNewLine/11 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 # TkNumber/11 e.Digits/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_TkNumber], context[11] ) )
        continue;
      // closed e.Digits as range 12
      //DEBUG: e.Digits: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 # TkNumber/15 Tile{ AsIs: </0 Reuse: & Numb-Overflow=1/4 HalfReuse: </9 HalfReuse: & Numb/11 AsIs: e.Digits/12 HalfReuse: >/10 AsIs: >/1 } )/16 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::alloc_ident(vm, context[15], identifiers[ident_TkNumber]);
      refalrts::alloc_close_bracket(vm, context[16]);
      refalrts::update_name(context[4], functions[efunc_gen_Numbm_Overflow_A1]);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[11], functions[efunc_Numb]);
      refalrts::reinit_close_call(context[10]);
      refalrts::link_brackets( context[14], context[16] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 s.new3/11 s.new4/14 e.new5/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      // closed e.new5 as range 12
      do {
        // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 s.new6/14 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_TkPunctuation], context[11] ) )
          continue;
        if( ! refalrts::empty_seq( context[12], context[13] ) )
          continue;
        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 '<'/14 )/10 >/1
          if( ! refalrts::char_term( '<', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkOpenCall/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkOpenCall]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 '>'/14 )/10 >/1
          if( ! refalrts::char_term( '>', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkCloseCall/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkCloseCall]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 '{'/14 )/10 >/1
          if( ! refalrts::char_term( '{', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkOpenBlock/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkOpenBlock]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 '}'/14 )/10 >/1
          if( ! refalrts::char_term( '}', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkCloseBlock/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkCloseBlock]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 '('/14 )/10 >/1
          if( ! refalrts::char_term( '(', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkOpenBracket/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkOpenBracket]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 ')'/14 )/10 >/1
          if( ! refalrts::char_term( ')', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkCloseBracket/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkCloseBracket]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 '='/14 )/10 >/1
          if( ! refalrts::char_term( '=', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkReplace/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkReplace]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 ','/14 )/10 >/1
          if( ! refalrts::char_term( ',', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkComma/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkComma]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 ';'/14 )/10 >/1
          if( ! refalrts::char_term( ';', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkSemicolon/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkSemicolon]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 ':'/14 )/10 >/1
          if( ! refalrts::char_term( ':', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkColon/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkColon]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 '['/14 )/10 >/1
          if( ! refalrts::char_term( '[', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkOpenADT/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkOpenADT]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 ']'/14 )/10 >/1
          if( ! refalrts::char_term( ']', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkCloseADT/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkCloseADT]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 '#'/14 )/10 >/1
          if( ! refalrts::char_term( '#', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkIdentMarker/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkIdentMarker]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 '^'/14 )/10 >/1
          if( ! refalrts::char_term( '^', context[14] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 (/9 # TkPunctuation/11 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 HalfReuse: # TkRedefinition/10 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[14]);
          refalrts::reinit_ident(context[10], identifiers[ident_TkRedefinition]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[14], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NormalizeToken/4 (/9 # TkPunctuation/11 s.Punctuation/14 )/10 >/1
        //DEBUG: s.Punctuation: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: </9 HalfReuse: & SwPunctuation*14/11 AsIs: s.Punctuation/14 HalfReuse: >/10 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_open_call(context[9]);
        refalrts::reinit_name(context[11], functions[efunc_gen_SwPunctuation_D14]);
        refalrts::reinit_close_call(context[10]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[4], context[1] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[4];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormalizeToken/4 (/9 # TkVariable/11 s.new6/14 '.'/17 e.new7/15 )/10 >/1
      context[15] = context[12];
      context[16] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[11] ) )
        continue;
      context[17] = refalrts::char_left( '.', context[15], context[16] );
      if( ! context[17] )
        continue;
      // closed e.new7 as range 15
      do {
        // </0 & NormalizeToken/4 (/9 # TkVariable/11 s.Type/14 '.'/17 '-'/20 e./18 )/10 >/1
        context[18] = context[15];
        context[19] = context[16];
        context[20] = refalrts::char_left( '-', context[18], context[19] );
        if( ! context[20] )
          continue;
        // closed e. as range 18
        //DEBUG: s.Type: 14
        //DEBUG: e.: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkVariable/11 } Tile{ HalfReuse: s.Type14 /17 AsIs: '-'/20 AsIs: e./18 AsIs: )/10 HalfReuse: (/1 } # TkError/21 Tile{ HalfReuse: 'V'/0 HalfReuse: 'a'/4 }"riable index can\'t start from \'-\'"/22 )/24 Tile{ ]] }
        refalrts::alloc_ident(vm, context[21], identifiers[ident_TkError]);
        refalrts::alloc_chars(vm, context[22], context[23], "riable index can\'t start from \'-\'", 33);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::reinit_svar( context[17], context[14] );
        refalrts::reinit_open_bracket(context[1]);
        refalrts::reinit_char(context[0], 'V');
        refalrts::reinit_char(context[4], 'a');
        refalrts::link_brackets( context[1], context[24] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[24] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormalizeToken/4 (/9 # TkVariable/11 s.Type/14 '.'/17 e.Index/18 )/10 >/1
      context[18] = context[15];
      context[19] = context[16];
      // closed e.Index as range 18
      //DEBUG: s.Type: 14
      //DEBUG: e.Index: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} '.'/17 {REMOVED TILE} )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkVariable/11 AsIs: s.Type/14 } Tile{ AsIs: e.Index/18 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormalizeToken/4 (/9 # TkNativeLine/11 e.Line/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_TkNativeLine], context[11] ) )
        continue;
      // closed e.Line as range 12
      //DEBUG: e.Line: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkNativeLine/4 HalfReuse: </9 HalfReuse: & Trim-R/11 AsIs: e.Line/12 HalfReuse: >/10 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkNativeLine]);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[11], functions[efunc_Trimm_R]);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[9] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NormalizeToken/4 (/9 # TkUnexpected/11 e.Unexpected/12 )/10 >/1
    context[12] = context[7];
    context[13] = context[8];
    if( ! refalrts::ident_term( identifiers[ident_TkUnexpected], context[11] ) )
      continue;
    // closed e.Unexpected as range 12
    //DEBUG: e.Unexpected: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # TkUnexpected/11 AsIs: e.Unexpected/12 AsIs: )/10 } Tile{ ]] }
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NormalizeToken/4 (/7 & TokenError/9 e.Message/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = refalrts::function_left( functions[efunc_TokenError], context[5], context[6] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Message as range 5
  //DEBUG: e.Message: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NormalizeToken/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 HalfReuse: # TkError/9 AsIs: e.Message/5 AsIs: )/8 } Tile{ ]] }
  refalrts::reinit_ident(context[9], identifiers[ident_TkError]);
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NormalizeToken("NormalizeToken", COOKIE1_, COOKIE2_, func_NormalizeToken);


static refalrts::FnResult func_gen_Numbm_Overflow_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Numb-Overflow=1/4 e.HighMacrodigits/2 s.LastMacrodigit/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.HighMacrodigits as range 2
  //DEBUG: s.LastMacrodigit: 5
  //DEBUG: e.HighMacrodigits: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Numb-Overflow=1/4 e.HighMacrodigits/2 s.LastMacrodigit/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.LastMacrodigit5 /1 ]] }
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Numbm_Overflow_A1("Numb-Overflow=1", COOKIE1_, COOKIE2_, func_gen_Numbm_Overflow_A1);


static refalrts::FnResult func_Numbm_Overflow(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Numb-Overflow/4 e.Digits/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Digits as range 2
  //DEBUG: e.Digits: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Numb-Overflow=1/6 Tile{ AsIs: </0 Reuse: & Numb/4 AsIs: e.Digits/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Numbm_Overflow_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Numb]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Numbm_Overflow("Numb-Overflow", COOKIE1_, COOKIE2_, func_Numbm_Overflow);


static refalrts::FnResult func_ValidDirective(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & ValidDirective/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & ValidDirective/4 e.new1/5 s.new2/10 s.new3/9 s.new4/8 s.new5/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_right( context[8], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_right( context[9], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_right( context[10], context[5], context[6] ) )
      continue;
    // closed e.new1 as range 5
    do {
      // </0 & ValidDirective/4 e.new6/11 'E'/10 'N'/9 'U'/8 'M'/7 >/1
      context[11] = context[5];
      context[12] = context[6];
      if( ! refalrts::char_term( 'E', context[10] ) )
        continue;
      if( ! refalrts::char_term( 'N', context[9] ) )
        continue;
      if( ! refalrts::char_term( 'U', context[8] ) )
        continue;
      if( ! refalrts::char_term( 'M', context[7] ) )
        continue;
      // closed e.new6 as range 11
      do {
        // </0 & ValidDirective/4 'E'/10 'N'/9 'U'/8 'M'/7 >/1
        if( ! refalrts::empty_seq( context[11], context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'E'/10 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # Enum/7 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
        refalrts::reinit_ident(context[7], identifiers[ident_Enum]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ValidDirective/4 'E'/15 'E'/10 'N'/9 'U'/8 'M'/7 >/1
      context[13] = context[11];
      context[14] = context[12];
      context[15] = refalrts::char_left( 'E', context[13], context[14] );
      if( ! context[15] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'E'/15 'E'/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # EEnum/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
      refalrts::reinit_ident(context[7], identifiers[ident_EEnum]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ValidDirective/4 e.new9/11 s.new10/13 s.new8/10 s.new7/9 'R'/8 s.new6/7 >/1
      context[11] = context[5];
      context[12] = context[6];
      if( ! refalrts::char_term( 'R', context[8] ) )
        continue;
      if( ! refalrts::svar_right( context[13], context[11], context[12] ) )
        continue;
      // closed e.new9 as range 11
      do {
        // </0 & ValidDirective/4 'E'/13 'N'/10 'T'/9 'R'/8 'Y'/7 >/1
        if( ! refalrts::char_term( 'E', context[13] ) )
          continue;
        if( ! refalrts::char_term( 'N', context[10] ) )
          continue;
        if( ! refalrts::char_term( 'T', context[9] ) )
          continue;
        if( ! refalrts::char_term( 'Y', context[7] ) )
          continue;
        if( ! refalrts::empty_seq( context[11], context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'E'/13 'N'/10 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # Entry/7 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
        refalrts::reinit_ident(context[7], identifiers[ident_Entry]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ValidDirective/4 e.new15/14 s.new16/16 s.new14/13 s.new13/10 s.new12/9 'R'/8 s.new11/7 >/1
      context[14] = context[11];
      context[15] = context[12];
      if( ! refalrts::svar_right( context[16], context[14], context[15] ) )
        continue;
      // closed e.new15 as range 14
      do {
        // </0 & ValidDirective/4 'E'/16 'X'/13 'T'/10 'E'/9 'R'/8 'N'/7 >/1
        if( ! refalrts::char_term( 'E', context[16] ) )
          continue;
        if( ! refalrts::char_term( 'X', context[13] ) )
          continue;
        if( ! refalrts::char_term( 'T', context[10] ) )
          continue;
        if( ! refalrts::char_term( 'E', context[9] ) )
          continue;
        if( ! refalrts::char_term( 'N', context[7] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'E'/16 'X'/13 'T'/10 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # Extern/7 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
        refalrts::reinit_ident(context[7], identifiers[ident_Extern]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ValidDirective/4 'F'/19 'O'/16 'R'/13 'W'/10 'A'/9 'R'/8 'D'/7 >/1
      context[17] = context[14];
      context[18] = context[15];
      if( ! refalrts::char_term( 'O', context[16] ) )
        continue;
      if( ! refalrts::char_term( 'R', context[13] ) )
        continue;
      if( ! refalrts::char_term( 'W', context[10] ) )
        continue;
      if( ! refalrts::char_term( 'A', context[9] ) )
        continue;
      if( ! refalrts::char_term( 'D', context[7] ) )
        continue;
      context[19] = refalrts::char_left( 'F', context[17], context[18] );
      if( ! context[19] )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'F'/19 'O'/16 'R'/13 'W'/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # Forward/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
      refalrts::reinit_ident(context[7], identifiers[ident_Forward]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ValidDirective/4 e.new6/11 'S'/10 'W'/9 'A'/8 'P'/7 >/1
      context[11] = context[5];
      context[12] = context[6];
      if( ! refalrts::char_term( 'S', context[10] ) )
        continue;
      if( ! refalrts::char_term( 'W', context[9] ) )
        continue;
      if( ! refalrts::char_term( 'A', context[8] ) )
        continue;
      if( ! refalrts::char_term( 'P', context[7] ) )
        continue;
      // closed e.new6 as range 11
      do {
        // </0 & ValidDirective/4 'S'/10 'W'/9 'A'/8 'P'/7 >/1
        if( ! refalrts::empty_seq( context[11], context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'S'/10 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # Swap/7 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
        refalrts::reinit_ident(context[7], identifiers[ident_Swap]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ValidDirective/4 'E'/15 'S'/10 'W'/9 'A'/8 'P'/7 >/1
      context[13] = context[11];
      context[14] = context[12];
      context[15] = refalrts::char_left( 'E', context[13], context[14] );
      if( ! context[15] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'E'/15 'S'/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # ESwap/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
      refalrts::reinit_ident(context[7], identifiers[ident_ESwap]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ValidDirective/4 e.new10/11 s.new11/13 s.new9/10 s.new8/9 s.new7/8 s.new6/7 >/1
      context[11] = context[5];
      context[12] = context[6];
      if( ! refalrts::svar_right( context[13], context[11], context[12] ) )
        continue;
      // closed e.new10 as range 11
      do {
        // </0 & ValidDirective/4 'L'/13 'A'/10 'B'/9 'E'/8 'L'/7 >/1
        if( ! refalrts::char_term( 'L', context[13] ) )
          continue;
        if( ! refalrts::char_term( 'A', context[10] ) )
          continue;
        if( ! refalrts::char_term( 'B', context[9] ) )
          continue;
        if( ! refalrts::char_term( 'E', context[8] ) )
          continue;
        if( ! refalrts::char_term( 'L', context[7] ) )
          continue;
        if( ! refalrts::empty_seq( context[11], context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'L'/13 'A'/10 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # Ident/7 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
        refalrts::reinit_ident(context[7], identifiers[ident_Ident]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ValidDirective/4 e.new17/14 s.new18/17 s.new19/16 s.new16/13 s.new15/10 s.new14/9 s.new13/8 s.new12/7 >/1
      context[14] = context[11];
      context[15] = context[12];
      if( ! refalrts::svar_right( context[16], context[14], context[15] ) )
        continue;
      if( ! refalrts::svar_right( context[17], context[14], context[15] ) )
        continue;
      // closed e.new17 as range 14
      do {
        // </0 & ValidDirective/4 'I'/17 'N'/16 'C'/13 'L'/10 'U'/9 'D'/8 'E'/7 >/1
        if( ! refalrts::char_term( 'I', context[17] ) )
          continue;
        if( ! refalrts::char_term( 'N', context[16] ) )
          continue;
        if( ! refalrts::char_term( 'C', context[13] ) )
          continue;
        if( ! refalrts::char_term( 'L', context[10] ) )
          continue;
        if( ! refalrts::char_term( 'U', context[9] ) )
          continue;
        if( ! refalrts::char_term( 'D', context[8] ) )
          continue;
        if( ! refalrts::char_term( 'E', context[7] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'I'/17 'N'/16 'C'/13 'L'/10 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # Include/7 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
        refalrts::reinit_ident(context[7], identifiers[ident_Include]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ValidDirective/4 e.new25/18 'S'/17 s.new24/16 s.new23/13 s.new22/10 'E'/9 s.new21/8 s.new20/7 >/1
      context[18] = context[14];
      context[19] = context[15];
      if( ! refalrts::char_term( 'S', context[17] ) )
        continue;
      if( ! refalrts::char_term( 'E', context[9] ) )
        continue;
      // closed e.new25 as range 18
      do {
        // </0 & ValidDirective/4 'E'/22 'A'/23 'S'/17 'T'/16 'E'/13 'R'/10 'E'/9 'G'/8 'G'/7 >/1
        context[20] = context[18];
        context[21] = context[19];
        if( ! refalrts::char_term( 'T', context[16] ) )
          continue;
        if( ! refalrts::char_term( 'E', context[13] ) )
          continue;
        if( ! refalrts::char_term( 'R', context[10] ) )
          continue;
        if( ! refalrts::char_term( 'G', context[8] ) )
          continue;
        if( ! refalrts::char_term( 'G', context[7] ) )
          continue;
        context[22] = refalrts::char_left( 'E', context[20], context[21] );
        if( ! context[22] )
          continue;
        context[23] = refalrts::char_left( 'A', context[20], context[21] );
        if( ! context[23] )
          continue;
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@2/4 Reuse: 'M'/22 Reuse: 'e'/23 Reuse: 'd'/17 Reuse: 'v'/16 Reuse: 'e'/13 Reuse: 'd'/10 Reuse: 'n'/9 Reuse: 'o'/8 Reuse: '-'/7 HalfReuse: 'o'/1 }"rientirovannoe programmirovanie"/24 >/26 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "rientirovannoe programmirovanie", 31);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
        refalrts::update_char(context[22], 'M');
        refalrts::update_char(context[23], 'e');
        refalrts::update_char(context[17], 'd');
        refalrts::update_char(context[16], 'v');
        refalrts::update_char(context[13], 'e');
        refalrts::update_char(context[10], 'd');
        refalrts::update_char(context[9], 'n');
        refalrts::update_char(context[8], 'o');
        refalrts::update_char(context[7], '-');
        refalrts::reinit_char(context[1], 'o');
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[26] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ValidDirective/4 'S'/17 'C'/16 'O'/13 'P'/10 'E'/9 'I'/8 'D'/7 >/1
      if( ! refalrts::char_term( 'C', context[16] ) )
        continue;
      if( ! refalrts::char_term( 'O', context[13] ) )
        continue;
      if( ! refalrts::char_term( 'P', context[10] ) )
        continue;
      if( ! refalrts::char_term( 'I', context[8] ) )
        continue;
      if( ! refalrts::char_term( 'D', context[7] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/20 # TkNumber/21 # Cookie1/22 )/23 (/24 # TkNumber/25 # Cookie2/26 )/27 (/28 # TkWarning/29 Tile{ HalfReuse: # deprecated/0 HalfReuse: '$'/4 AsIs: 'S'/17 AsIs: 'C'/16 AsIs: 'O'/13 AsIs: 'P'/10 AsIs: 'E'/9 AsIs: 'I'/8 AsIs: 'D'/7 HalfReuse: ' '/1 }"is deprecated"/30 )/32 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_TkNumber]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Cookie1]);
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::alloc_ident(vm, context[25], identifiers[ident_TkNumber]);
      refalrts::alloc_ident(vm, context[26], identifiers[ident_Cookie2]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_ident(vm, context[29], identifiers[ident_TkWarning]);
      refalrts::alloc_chars(vm, context[30], context[31], "is deprecated", 13);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::reinit_ident(context[0], identifiers[ident_deprecated]);
      refalrts::reinit_char(context[4], '$');
      refalrts::reinit_char(context[1], ' ');
      refalrts::link_brackets( context[28], context[32] );
      refalrts::link_brackets( context[24], context[27] );
      refalrts::link_brackets( context[20], context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[20], context[29] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ValidDirective/4 s.new9/10 s.new8/9 s.new7/8 s.new6/7 >/1
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & ValidDirective/4 'S'/10 'P'/9 'E'/8 'C'/7 >/1
      if( ! refalrts::char_term( 'S', context[10] ) )
        continue;
      if( ! refalrts::char_term( 'P', context[9] ) )
        continue;
      if( ! refalrts::char_term( 'E', context[8] ) )
        continue;
      if( ! refalrts::char_term( 'C', context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'S'/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # Spec/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
      refalrts::reinit_ident(context[7], identifiers[ident_Spec]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ValidDirective/4 'M'/10 'E'/9 'T'/8 'A'/7 >/1
    if( ! refalrts::char_term( 'M', context[10] ) )
      continue;
    if( ! refalrts::char_term( 'E', context[9] ) )
      continue;
    if( ! refalrts::char_term( 'T', context[8] ) )
      continue;
    if( ! refalrts::char_term( 'A', context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ValidDirective/4 'M'/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # TkDirective/8 HalfReuse: # Meta/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_ident(context[8], identifiers[ident_TkDirective]);
    refalrts::reinit_ident(context[7], identifiers[ident_Meta]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ValidDirective/4 e.Other/2 >/1
  // closed e.Other as range 2
  //DEBUG: e.Other: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/5 # TkError/6"Unknown directive"/7 Tile{ HalfReuse: ' '/0 HalfReuse: '$'/4 AsIs: e.Other/2 HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_ident(vm, context[6], identifiers[ident_TkError]);
  refalrts::alloc_chars(vm, context[7], context[8], "Unknown directive", 17);
  refalrts::reinit_char(context[0], ' ');
  refalrts::reinit_char(context[4], '$');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[5], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ValidDirective("ValidDirective", COOKIE1_, COOKIE2_, func_ValidDirective);


static refalrts::FnResult func_SwPunctuation(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & SwPunctuation/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SwPunctuation/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & SwPunctuation/4 '<'/5 >/1
    if( ! refalrts::char_term( '<', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 '<'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkOpenCall/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkOpenCall]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 '>'/5 >/1
    if( ! refalrts::char_term( '>', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 '>'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkCloseCall/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkCloseCall]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 '{'/5 >/1
    if( ! refalrts::char_term( '{', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 '{'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkOpenBlock/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkOpenBlock]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 '}'/5 >/1
    if( ! refalrts::char_term( '}', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 '}'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkCloseBlock/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkCloseBlock]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 '('/5 >/1
    if( ! refalrts::char_term( '(', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 '('/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkOpenBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkOpenBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 ')'/5 >/1
    if( ! refalrts::char_term( ')', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 ')'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkCloseBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkCloseBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 '='/5 >/1
    if( ! refalrts::char_term( '=', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 '='/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkReplace/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkReplace]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 ','/5 >/1
    if( ! refalrts::char_term( ',', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 ','/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkComma/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkComma]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 ';'/5 >/1
    if( ! refalrts::char_term( ';', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 ';'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkSemicolon/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkSemicolon]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 ':'/5 >/1
    if( ! refalrts::char_term( ':', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 ':'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkColon/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkColon]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 '['/5 >/1
    if( ! refalrts::char_term( '[', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 '['/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkOpenADT/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkOpenADT]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 ']'/5 >/1
    if( ! refalrts::char_term( ']', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 ']'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkCloseADT/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkCloseADT]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SwPunctuation/4 '#'/5 >/1
    if( ! refalrts::char_term( '#', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 '#'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkIdentMarker/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_TkIdentMarker]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SwPunctuation/4 '^'/5 >/1
  if( ! refalrts::char_term( '^', context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SwPunctuation/4 '^'/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # TkRedefinition/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_TkRedefinition]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SwPunctuation("SwPunctuation", COOKIE1_, COOKIE2_, func_SwPunctuation);


static refalrts::FnResult func_AddLineNumber(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & AddLineNumber/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AddLineNumber/4 s.new1/9 (/7 s.new2/10 e.new3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 5
  do {
    // </0 & AddLineNumber/4 s.LineNumber/9 (/7 # TkNewLine/10 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkNewLine], context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.LineNumber: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & AddLineNumber/4 s.LineNumber/9 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Add/7 HalfReuse: 1/10 HalfReuse: s.LineNumber9 /8 AsIs: >/1 ]] }
    refalrts::reinit_name(context[7], functions[efunc_Add]);
    refalrts::reinit_number(context[10], 1UL);
    refalrts::reinit_svar( context[8], context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AddLineNumber/4 s.LineNumber/9 (/7 # TkNativeLine/10 e.Line/11 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_TkNativeLine], context[10] ) )
      continue;
    // closed e.Line as range 11
    //DEBUG: s.LineNumber: 9
    //DEBUG: e.Line: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } 1/13 Tile{ AsIs: s.LineNumber/9 } Tile{ AsIs: >/1 } (/14 Tile{ HalfReuse: # TkNativeLine/7 HalfReuse: s.LineNumber9 /10 AsIs: e.Line/11 AsIs: )/8 } Tile{ ]] }
    refalrts::alloc_number(vm, context[13], 1UL);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_ident(context[7], identifiers[ident_TkNativeLine]);
    refalrts::reinit_svar( context[10], context[9] );
    refalrts::link_brackets( context[14], context[8] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddLineNumber/4 s.LineNumber/9 (/7 s.TokType/10 e.Info/5 )/8 >/1
  // closed e.Info as range 5
  //DEBUG: s.LineNumber: 9
  //DEBUG: s.TokType: 10
  //DEBUG: e.Info: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & AddLineNumber/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: s.LineNumber/9 AsIs: (/7 AsIs: s.TokType/10 } Tile{ HalfReuse: s.LineNumber9 /8 } Tile{ AsIs: e.Info/5 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_svar( context[8], context[9] );
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AddLineNumber("AddLineNumber", COOKIE1_, COOKIE2_, func_AddLineNumber);


static refalrts::FnResult func_NormalizeTokens(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & NormalizeTokens/4 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Tokens as range 2
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Fetch@1/6 Tile{ AsIs: </0 Reuse: & Map@5/4 AsIs: e.Tokens/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Fetch_Z1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NormalizeTokens("NormalizeTokens", COOKIE1_, COOKIE2_, func_NormalizeTokens);


static refalrts::FnResult func_CollectNativeLines(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & CollectNativeLines/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CollectNativeLines/4 e.SimpleTokens/7 (/13 # TkNativeLine/15 s.LineNumber/16 e.Line/11 )/14 e.Tail/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_TkNativeLine], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[16], context[11], context[12] ) )
        continue;
      // closed e.Line as range 11
      //DEBUG: e.SimpleTokens: 7
      //DEBUG: e.Tail: 9
      //DEBUG: s.LineNumber: 16
      //DEBUG: e.Line: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.SimpleTokens/7 } Tile{ HalfReuse: </13 HalfReuse: & CollectNativeLines-Aux@1/15 AsIs: s.LineNumber/16 } Tile{ HalfReuse: (/4 } Tile{ AsIs: e.Line/11 } Tile{ AsIs: )/14 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[15], functions[efunc_gen_CollectNativeLinesm_Aux_Z1]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[4], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CollectNativeLines/4 e.SimpleTokens/2 >/1
  // closed e.SimpleTokens as range 2
  //DEBUG: e.SimpleTokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CollectNativeLines/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.SimpleTokens/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CollectNativeLines("CollectNativeLines", COOKIE1_, COOKIE2_, func_CollectNativeLines);


static refalrts::FnResult func_CollectNativeLinesm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & CollectNativeLines-Aux/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CollectNativeLines-Aux/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & CollectNativeLines-Aux/4 s.StartLineNumber/5 (/8 e.Block/10 )/9 (/16 # TkNativeLine/18 s.LineNumber/19 e.Line/14 )/17 e.Tail/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left( identifiers[ident_TkNativeLine], context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.Block as range 10
    // closed e.Tail as range 12
    if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
      continue;
    // closed e.Line as range 14
    //DEBUG: s.StartLineNumber: 5
    //DEBUG: e.Block: 10
    //DEBUG: e.Tail: 12
    //DEBUG: s.LineNumber: 19
    //DEBUG: e.Line: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/16 {REMOVED TILE} s.LineNumber/19 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & CollectNativeLines-Aux/4 AsIs: s.StartLineNumber/5 AsIs: (/8 AsIs: e.Block/10 HalfReuse: (/9 } Tile{ AsIs: e.Line/14 } Tile{ HalfReuse: )/18 } Tile{ AsIs: )/17 AsIs: e.Tail/12 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_close_bracket(context[18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[17] );
    refalrts::link_brackets( context[9], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CollectNativeLines-Aux/4 s.StartLineNumber/5 (/8 e.Block/6 )/9 e.Tail/2 >/1
  // closed e.Block as range 6
  // closed e.Tail as range 2
  //DEBUG: s.StartLineNumber: 5
  //DEBUG: e.Block: 6
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkNativeBlock/4 AsIs: s.StartLineNumber/5 } Tile{ AsIs: e.Block/6 } Tile{ HalfReuse: )/8 } </10 Tile{ HalfReuse: & CollectNativeLines/9 AsIs: e.Tail/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_TkNativeBlock]);
  refalrts::reinit_close_bracket(context[8]);
  refalrts::reinit_name(context[9], functions[efunc_CollectNativeLines]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[0], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CollectNativeLinesm_Aux("CollectNativeLines-Aux", COOKIE1_, COOKIE2_, func_CollectNativeLinesm_Aux);


static refalrts::FnResult func_Root(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Root/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Root/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Root/4 (/7 e.new4/9 )/8 '%'/13 e.new3/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_left( '%', context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.new4 as range 9
    // closed e.new3 as range 11
    do {
      // </0 & Root/4 (/7 e.Accum/14 )/8 '%'/13 '%'/18 e./16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = refalrts::char_left( '%', context[16], context[17] );
      if( ! context[18] )
        continue;
      // closed e.Accum as range 14
      // closed e. as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & Root/4 (/7 e.Accum/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & StartNative-NewLine/8 HalfReuse: (/13 HalfReuse: )/18 AsIs: e./16 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_StartNativem_NewLine]);
      refalrts::reinit_open_bracket(context[13]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Root/4 (/7 e.Accum/14 )/8 '%'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Accum/14 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'N'/7 }"ative inlines expects two percents"/18 )/20 </21 & Main/22 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[18], context[19], "ative inlines expects two percents", 34);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Main]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::update_name(context[4], functions[efunc_TokenError]);
    refalrts::reinit_char(context[7], 'N');
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Root/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Main/4 AsIs: (/7 AsIs: e.Accum/5 AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Root("Root", COOKIE1_, COOKIE2_, func_Root);


static refalrts::FnResult func_StartNativem_Percent(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & StartNative-Percent/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StartNative-Percent/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StartNative-Percent/4 (/7 e.Accum/9 )/8 '%'/13 e.Text/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_left( '%', context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.Accum as range 9
    // closed e.Text as range 11
    //DEBUG: e.Accum: 9
    //DEBUG: e.Text: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 e.Accum/9 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StartNative-NewLine/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/11 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_StartNativem_NewLine]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StartNative-Percent/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Native inlines expects two percents"/11 )/13 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Native inlines expects two percents", 35);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StartNativem_Percent("StartNative-Percent", COOKIE1_, COOKIE2_, func_StartNativem_Percent);


static refalrts::FnResult func_Main(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Main/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Main/4 (/9 e.new1/7 )/10 s.new2/11 e.new3/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
      continue;
    // closed e.new3 as range 5
    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 ' '/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( ' ', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Accum/12 )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Main/4 AsIs: (/9 } Tile{ HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '\t'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '\t', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Accum/12 )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Main/4 AsIs: (/9 } Tile{ HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '\r'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '\r', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Accum/12 )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Main/4 AsIs: (/9 } Tile{ HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[11];
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '<'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '<', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } '<'/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], '<');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '>'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '>', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } '>'/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], '>');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '('/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '(', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } '('/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], '(');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 ')'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( ')', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } ')'/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], ')');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '{'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '{', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } '{'/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], '{');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '}'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '}', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } '}'/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], '}');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '['/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '[', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } '['/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], '[');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 ']'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( ']', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } ']'/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], ']');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '='/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '=', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } '='/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], '=');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 ';'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( ';', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } ';'/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], ';');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 ':'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( ':', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } ':'/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], ':');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 ','/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( ',', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } ','/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], ',');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '#'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '#', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } '#'/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], '#');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 '^'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '^', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 } # TkPunctuation/16 Tile{ AsIs: e.Accum/12 } '^'/17 )/18 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[16], identifiers[ident_TkPunctuation]);
      refalrts::alloc_char(vm, context[17], '^');
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.new5/12 )/10 's'/11 e.new4/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 's', context[11] ) )
        continue;
      // closed e.new5 as range 12
      // closed e.new4 as range 14
      do {
        // </0 & Main/4 (/9 e.Accum/16 )/10 's'/11 '.'/20 e./18 >/1
        context[16] = context[12];
        context[17] = context[13];
        context[18] = context[14];
        context[19] = context[15];
        context[20] = refalrts::char_left( '.', context[18], context[19] );
        if( ! context[20] )
          continue;
        // closed e.Accum as range 16
        // closed e. as range 18
        //DEBUG: e.Accum: 16
        //DEBUG: e.: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndex/4 AsIs: (/9 AsIs: e.Accum/16 HalfReuse: 's'/10 Reuse: '.'/11 HalfReuse: )/20 AsIs: e./18 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_VariableIndex]);
        refalrts::reinit_char(context[10], 's');
        refalrts::update_char(context[11], '.');
        refalrts::reinit_close_bracket(context[20]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[20] );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Main/4 (/9 e.Accum/16 )/10 's'/11 e.Text/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      // closed e.Accum as range 16
      // closed e.Text as range 18
      //DEBUG: e.Accum: 16
      //DEBUG: e.Text: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/16 HalfReuse: 's'/10 HalfReuse: )/11 AsIs: e.Text/18 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 's');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.new5/12 )/10 'e'/11 e.new4/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'e', context[11] ) )
        continue;
      // closed e.new5 as range 12
      // closed e.new4 as range 14
      do {
        // </0 & Main/4 (/9 e.Accum/16 )/10 'e'/11 '.'/20 e./18 >/1
        context[16] = context[12];
        context[17] = context[13];
        context[18] = context[14];
        context[19] = context[15];
        context[20] = refalrts::char_left( '.', context[18], context[19] );
        if( ! context[20] )
          continue;
        // closed e.Accum as range 16
        // closed e. as range 18
        //DEBUG: e.Accum: 16
        //DEBUG: e.: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndex/4 AsIs: (/9 AsIs: e.Accum/16 HalfReuse: 'e'/10 Reuse: '.'/11 HalfReuse: )/20 AsIs: e./18 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_VariableIndex]);
        refalrts::reinit_char(context[10], 'e');
        refalrts::update_char(context[11], '.');
        refalrts::reinit_close_bracket(context[20]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[20] );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Main/4 (/9 e.Accum/16 )/10 'e'/11 e.Text/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      // closed e.Accum as range 16
      // closed e.Text as range 18
      //DEBUG: e.Accum: 16
      //DEBUG: e.Text: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/16 HalfReuse: 'e'/10 HalfReuse: )/11 AsIs: e.Text/18 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'e');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.new5/12 )/10 't'/11 e.new4/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 't', context[11] ) )
        continue;
      // closed e.new5 as range 12
      // closed e.new4 as range 14
      do {
        // </0 & Main/4 (/9 e.Accum/16 )/10 't'/11 '.'/20 e./18 >/1
        context[16] = context[12];
        context[17] = context[13];
        context[18] = context[14];
        context[19] = context[15];
        context[20] = refalrts::char_left( '.', context[18], context[19] );
        if( ! context[20] )
          continue;
        // closed e.Accum as range 16
        // closed e. as range 18
        //DEBUG: e.Accum: 16
        //DEBUG: e.: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndex/4 AsIs: (/9 AsIs: e.Accum/16 HalfReuse: 't'/10 Reuse: '.'/11 HalfReuse: )/20 AsIs: e./18 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_VariableIndex]);
        refalrts::reinit_char(context[10], 't');
        refalrts::update_char(context[11], '.');
        refalrts::reinit_close_bracket(context[20]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[20] );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Main/4 (/9 e.Accum/16 )/10 't'/11 e.Text/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      // closed e.Accum as range 16
      // closed e.Text as range 18
      //DEBUG: e.Accum: 16
      //DEBUG: e.Text: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/16 HalfReuse: 't'/10 HalfReuse: )/11 AsIs: e.Text/18 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 't');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'a'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'a', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'a'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'a');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'b'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'b', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'b'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'b');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'c'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'c', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'c'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'c');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'd'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'd', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'd'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'd');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'f'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'f', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'f'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'f');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'g'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'g', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'g'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'g');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'h'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'h', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'h'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'h');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'i'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'i', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'i'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'i');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'j'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'j', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'j'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'j');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'k'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'k', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'k'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'k');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'l'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'l', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'l'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'l');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'm'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'm', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'm'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'm');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'n'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'n', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'n'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'n');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'o'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'o', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'o'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'o');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'p'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'p', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'p'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'p');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'q'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'q', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'q'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'q');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'r'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'r', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'r'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'u'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'u', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'u'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'u');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'v'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'v', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'v'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'v');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'w'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'w', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'w'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'w');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'x'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'x', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'x'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'y'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'y', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'y'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'y');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'z'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'z', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'z'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'z');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'A'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'A', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'A'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'A');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'B'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'B', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'B'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'B');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'C'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'C', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'C'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'C');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/9 e.Accum/12 )/10 'D'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'D', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'D'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[10], 'D');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Main/4 (/9 e.Accum/12 )/10 'E'/11 e.Text/14 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::char_term( 'E', context[11] ) )
      continue;
    // closed e.Accum as range 12
    // closed e.Text as range 14
    //DEBUG: e.Accum: 12
    //DEBUG: e.Text: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'E'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_Name]);
    refalrts::reinit_char(context[10], 'E');
    refalrts::reinit_close_bracket(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[11] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Main/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Main/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'F'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'F', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'F'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'F');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'G'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'G', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'G'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'G');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'H'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'H', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'H'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'H');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'I'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'I', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'I'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'I');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'J'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'J', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'J'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'J');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'K'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'K', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'K'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'K');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'L'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'L', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'L'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'L');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'M'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'M', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'M'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'M');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'N'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'N', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'N'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'N');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'O'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'O', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'O'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'O');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'P'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'P', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'P'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'P');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'Q'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Q', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Q'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'Q');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'R'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'R', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'R'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'R');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'S'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'S', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'S'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'S');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'T'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'T', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'T'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'T');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'U'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'U', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'U'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'U');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'V'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'V', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'V'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'V');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'W'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'W', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'W'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'W');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'X'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'X', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'X'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'X');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'Y'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Y', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Y'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'Y');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 'Z'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Z', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Z'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], 'Z');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '_'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '_', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '_'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Name]);
      refalrts::reinit_char(context[8], '_');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Number]);
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Number]);
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Number]);
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Number]);
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Number]);
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Number]);
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Number]);
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Number]);
      refalrts::reinit_char(context[8], '7');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '8'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '8', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '8'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Number]);
      refalrts::reinit_char(context[8], '8');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '9'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '9', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '9'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Number]);
      refalrts::reinit_char(context[8], '9');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '$'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '$', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 e.Accum/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Directive/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Directive]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.new7/14 )/8 '\''/13 e.new6/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\'', context[13] ) )
        continue;
      // closed e.new7 as range 14
      // closed e.new6 as range 16
      do {
        // </0 & Main/4 (/7 e.Accum/18 )/8 '\''/13 '\''/22 e./20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = refalrts::char_left( '\'', context[20], context[21] );
        if( ! context[22] )
          continue;
        // closed e.Accum as range 18
        // closed e. as range 20
        //DEBUG: e.Accum: 18
        //DEBUG: e.: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} e.Accum/18 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-Char/4 HalfReuse: '\''/7 } )/23 </24 Tile{ HalfReuse: & Main/8 HalfReuse: (/13 HalfReuse: )/22 AsIs: e./20 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_Char]);
        refalrts::reinit_char(context[7], '\'');
        refalrts::reinit_name(context[8], functions[efunc_Main]);
        refalrts::reinit_open_bracket(context[13]);
        refalrts::reinit_close_bracket(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[13], context[22] );
        refalrts::link_brackets( context[0], context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[23], context[24] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Main/4 (/7 e.Accum/18 )/8 '\''/13 e.Text/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Accum as range 18
      // closed e.Text as range 20
      //DEBUG: e.Accum: 18
      //DEBUG: e.Text: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 e.Accum/18 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/20 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.Accum/14 )/8 '\"'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\"', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '\"'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '\"');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Main/4 (/7 e.new7/14 )/8 '/'/13 e.new6/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '/', context[13] ) )
        continue;
      // closed e.new7 as range 14
      // closed e.new6 as range 16
      do {
        // </0 & Main/4 (/7 e.new10/18 )/8 '/'/13 s.new8/22 e.new9/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        // closed e.new10 as range 18
        if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
          continue;
        // closed e.new9 as range 20
        do {
          // </0 & Main/4 (/7 e.Accum/23 )/8 '/'/13 '*'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '*', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} & Main/4 (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CComment/8 HalfReuse: (/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::reinit_name(context[8], functions[efunc_CComment]);
          refalrts::reinit_open_bracket(context[13]);
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[13], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[0], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Main/4 (/7 e.Accum/23 )/8 '/'/13 '/'/22 e./25 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[21];
        if( ! refalrts::char_term( '/', context[22] ) )
          continue;
        // closed e.Accum as range 23
        // closed e. as range 25
        //DEBUG: e.Accum: 23
        //DEBUG: e.: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & Main/4 (/7 e.Accum/23 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CppComment/8 HalfReuse: (/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_CppComment]);
        refalrts::reinit_open_bracket(context[13]);
        refalrts::reinit_close_bracket(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Main/4 (/7 e.Accum/18 )/8 '/'/13 e.Text/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Accum as range 18
      // closed e.Text as range 20
      //DEBUG: e.Accum: 18
      //DEBUG: e.Text: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TkUnexpected/22 Tile{ AsIs: e.Accum/18 } '/'/23 )/24 Tile{ AsIs: </0 AsIs: & Main/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/20 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[22], identifiers[ident_TkUnexpected]);
      refalrts::alloc_char(vm, context[23], '/');
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[7], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Main/4 (/7 e.Accum/14 )/8 '\n'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '\n', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkNewLine/4 } Tile{ AsIs: e.Accum/14 } '\n'/18 Tile{ HalfReuse: )/7 } </19 & Root/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[18], '\n');
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_Root]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_TkNewLine]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Main/4 (/7 e.Accum/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Accum as range 9
    //DEBUG: e.Accum: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # TkEOF/7 AsIs: e.Accum/9 AsIs: )/8 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[7], identifiers[ident_TkEOF]);
    refalrts::link_brackets( context[4], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[4], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Main/4 (/7 e.Accum/5 )/8 s.Any/9 e.Text/2 >/1
  // closed e.Accum as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: s.Any: 9
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/10 # TkUnexpected/11 Tile{ AsIs: e.Accum/5 } Tile{ AsIs: s.Any/9 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Main/4 AsIs: (/7 } )/12 Tile{ AsIs: e.Text/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_ident(vm, context[11], identifiers[ident_TkUnexpected]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::link_brackets( context[10], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Main("Main", COOKIE1_, COOKIE2_, func_Main);


static refalrts::FnResult func_StartNativem_NewLine(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & StartNative-NewLine/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StartNative-NewLine/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StartNative-NewLine/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & StartNative-NewLine/4 (/7 e.Accum/14 )/8 '\r'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\r', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Accum/14 )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StartNative-NewLine/4 AsIs: (/7 } Tile{ HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & StartNative-NewLine/4 (/7 e.Accum/14 )/8 '\n'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '\n', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkNewLine/4 } Tile{ AsIs: e.Accum/14 } '\n'/18 Tile{ HalfReuse: )/7 } </19 & Native-Begin/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[18], '\n');
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_Nativem_Begin]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_TkNewLine]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StartNative-NewLine/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Native inlines expects new line after two percents"/11 )/13 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Native inlines expects new line after two percents", 50);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StartNativem_NewLine("StartNative-NewLine", COOKIE1_, COOKIE2_, func_StartNativem_NewLine);


static refalrts::FnResult func_VariableStart(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & VariableStart/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & VariableStart/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & VariableStart/4 (/7 e.Accum/9 )/8 '.'/13 e.Text/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_left( '.', context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.Accum as range 9
    // closed e.Text as range 11
    //DEBUG: e.Accum: 9
    //DEBUG: e.Text: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndex/4 AsIs: (/7 AsIs: e.Accum/9 HalfReuse: '.'/8 HalfReuse: )/13 AsIs: e.Text/11 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_VariableIndex]);
    refalrts::reinit_char(context[8], '.');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & VariableStart/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Name/4 AsIs: (/7 AsIs: e.Accum/5 AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Name]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_VariableStart("VariableStart", COOKIE1_, COOKIE2_, func_VariableStart);


static refalrts::FnResult func_Name(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Name/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Name/4 (/9 e.new1/7 )/10 s.new2/11 e.new3/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
      continue;
    // closed e.new3 as range 5
    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 '0'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '0', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '0'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '0');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 '1'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '1', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '1'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '1');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 '2'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '2', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '2'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '2');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 '3'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '3', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '3'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '3');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 '4'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '4', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '4'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '4');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 '5'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '5', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '5'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '5');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 '6'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '6', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '6'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '6');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 '7'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '7', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '7'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '7');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 '8'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '8', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '8'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '8');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 '9'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '9', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '9'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '9');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'a'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'a', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'a'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'a');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'b'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'b', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'b'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'b');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'c'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'c', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'c'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'c');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'd'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'd', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'd'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'd');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'e'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'e', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'e'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'e');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'f'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'f', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'f'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'f');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'g'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'g', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'g'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'g');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'h'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'h', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'h'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'h');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'i'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'i', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'i'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'i');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'j'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'j', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'j'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'j');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'k'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'k', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'k'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'k');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'l'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'l', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'l'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'l');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'm'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'm', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'm'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'm');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'n'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'n', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'n'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'n');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'o'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'o', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'o'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'o');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'p'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'p', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'p'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'p');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'q'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'q', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'q'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'q');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'r'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'r', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'r'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 's'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 's', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 's'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 's');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 't'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 't', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 't'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 't');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'u'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'u', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'u'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'u');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'v'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'v', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'v'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'v');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'w'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'w', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'w'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'w');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'x'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'x', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'x'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'y'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'y', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'y'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'y');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'z'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'z', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'z'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'z');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'A'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'A', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'A'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'A');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'B'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'B', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'B'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'B');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'C'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'C', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'C'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'C');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'D'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'D', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'D'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'D');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'E'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'E', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'E'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'E');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'F'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'F', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'F'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'G'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'G', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'G'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'G');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'H'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'H', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'H'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'H');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'I'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'I', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'I'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'I');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'J'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'J', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'J'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'J');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'K'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'K', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'K'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'K');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'L'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'L', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'L'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'L');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'M'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'M', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'M'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'M');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/9 e.Accum/12 )/10 'N'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'N', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'N'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'N');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Name/4 (/9 e.Accum/12 )/10 'O'/11 e.Text/14 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::char_term( 'O', context[11] ) )
      continue;
    // closed e.Accum as range 12
    // closed e.Text as range 14
    //DEBUG: e.Accum: 12
    //DEBUG: e.Text: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'O'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
    refalrts::reinit_char(context[10], 'O');
    refalrts::reinit_close_bracket(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[11] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Name/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Name/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'P'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'P', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'P'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'P');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'Q'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Q', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Q'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'Q');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'R'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'R', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'R'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'R');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'S'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'S', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'S'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'S');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'T'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'T', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'T'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'T');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'U'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'U', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'U'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'U');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'V'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'V', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'V'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'V');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'W'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'W', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'W'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'W');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'X'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'X', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'X'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'X');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'Y'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Y', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Y'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'Y');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 'Z'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Z', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Z'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'Z');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Name/4 (/7 e.Accum/14 )/8 '_'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '_', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '_'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '_');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Name/4 (/7 e.Accum/14 )/8 '-'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '-', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Name/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '-'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::reinit_char(context[8], '-');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Name/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkName/10 Tile{ AsIs: e.Accum/5 } )/11 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkName]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Name("Name", COOKIE1_, COOKIE2_, func_Name);


static refalrts::FnResult func_Number(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Number/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Number/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Number/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Number/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Number/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Number/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Number/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Number/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Number/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Number/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Number/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '7');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Number/4 (/7 e.Accum/14 )/8 '8'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '8', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '8'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '8');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Number/4 (/7 e.Accum/14 )/8 '9'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '9', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Number/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '9'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::reinit_char(context[8], '9');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Number/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkNumber/10 Tile{ AsIs: e.Accum/5 } )/11 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkNumber]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Number("Number", COOKIE1_, COOKIE2_, func_Number);


static refalrts::FnResult func_Directive(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Directive/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Directive/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Directive/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'A'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'A', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'A'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'A');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'B'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'B', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'B'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'B');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'C'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'C', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'C'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'C');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'D'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'D', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'D'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'D');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'E'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'E', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'E'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'E');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'F'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'F', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'F'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'F');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'G'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'G', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'G'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'G');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'H'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'H', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'H'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'H');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'I'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'I', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'I'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'I');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'J'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'J', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'J'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'J');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'K'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'K', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'K'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'K');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'L'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'L', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'L'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'L');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'M'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'M', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'M'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'M');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'N'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'N', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'N'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'N');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'O'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'O', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'O'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'O');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'P'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'P', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'P'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'P');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'Q'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Q', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Q'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'Q');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'R'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'R', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'R'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'R');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'S'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'S', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'S'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'S');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'T'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'T', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'T'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'T');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'U'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'U', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'U'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'U');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'V'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'V', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'V'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'V');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'W'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'W', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'W'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'W');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'X'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'X', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'X'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'X');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Directive/4 (/7 e.Accum/14 )/8 'Y'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Y', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Y'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
      refalrts::reinit_char(context[8], 'Y');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Directive/4 (/7 e.Accum/14 )/8 'Z'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( 'Z', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Z'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_DirectiveTail]);
    refalrts::reinit_char(context[8], 'Z');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Directive/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Expected directive name"/11 )/13 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Expected directive name", 23);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Directive("Directive", COOKIE1_, COOKIE2_, func_Directive);


static refalrts::FnResult func_StringLiteralm_Start(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & StringLiteral-Start/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StringLiteral-Start/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StringLiteral-Start/4 (/7 e.Accum/9 )/8 '\''/13 e.Text/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_left( '\'', context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.Accum as range 9
    // closed e.Text as range 11
    //DEBUG: e.Accum: 9
    //DEBUG: e.Text: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-Char/4 } Tile{ AsIs: e.Accum/9 } '\''/14 Tile{ HalfReuse: )/7 } </15 & Main/16 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/11 AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[14], '\'');
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_Main]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_Char]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StringLiteral-Start/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral/4 AsIs: (/7 AsIs: e.Accum/5 AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_StringLiteral]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StringLiteralm_Start("StringLiteral-Start", COOKIE1_, COOKIE2_, func_StringLiteralm_Start);


static refalrts::FnResult func_CompoundSymbol(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & CompoundSymbol/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CompoundSymbol/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & CompoundSymbol/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & CompoundSymbol/4 (/7 e.Accum/14 )/8 '\"'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\"', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkCompound/4 } Tile{ AsIs: e.Accum/14 } '\"'/18 Tile{ HalfReuse: )/7 } </19 & Main/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], '\"');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_Main]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkCompound]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CompoundSymbol/4 (/7 e.Accum/14 )/8 '\\'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\\', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Compound-Escape/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '\\'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Compoundm_Escape]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CompoundSymbol/4 (/7 e.Accum/14 )/8 '\n'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '\n', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Accum/14 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'U'/7 }"nclosed quote"/18 )/20 </21 & Main/22 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[18], context[19], "nclosed quote", 13);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Main]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::update_name(context[4], functions[efunc_TokenError]);
    refalrts::reinit_char(context[7], 'U');
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CompoundSymbol/4 (/7 e.Accum/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Accum as range 9
    //DEBUG: e.Accum: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Accum/9 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in compound symbo"/11 Tile{ HalfReuse: 'l'/8 HalfReuse: )/1 ]] }
    refalrts::alloc_chars(vm, context[11], context[12], "nexpected EOF in compound symbo", 31);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::update_name(context[4], functions[efunc_TokenError]);
    refalrts::reinit_char(context[7], 'U');
    refalrts::reinit_char(context[8], 'l');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CompoundSymbol/4 (/7 e.Accum/5 )/8 s.Any/9 e.Text/2 >/1
  // closed e.Accum as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: s.Any: 9
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Any/9 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/5 HalfReuse: s.Any9 /8 } )/10 Tile{ AsIs: e.Text/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::reinit_svar( context[8], context[9] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::splice_to_freelist_open( vm, context[8], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CompoundSymbol("CompoundSymbol", COOKIE1_, COOKIE2_, func_CompoundSymbol);


static refalrts::FnResult func_StartComment(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & StartComment/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StartComment/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StartComment/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & StartComment/4 (/7 e.Accum/14 )/8 '*'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '*', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 e.Accum/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CComment/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CComment]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & StartComment/4 (/7 e.Accum/14 )/8 '/'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '/', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 e.Accum/14 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CppComment/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_CppComment]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StartComment/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkUnexpected/10 Tile{ AsIs: e.Accum/5 } )/11 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkUnexpected]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StartComment("StartComment", COOKIE1_, COOKIE2_, func_StartComment);


static refalrts::FnResult func_Nativem_Begin(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Native-Begin/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Native-Begin/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Native-Begin/4 (/7 e.new4/9 )/8 '%'/13 e.new3/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_left( '%', context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.new4 as range 9
    // closed e.new3 as range 11
    do {
      // </0 & Native-Begin/4 (/7 e.Accum/14 )/8 '%'/13 '%'/18 e./16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = refalrts::char_left( '%', context[16], context[17] );
      if( ! context[18] )
        continue;
      // closed e.Accum as range 14
      // closed e. as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Native-CheckEnd2/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '%'/8 AsIs: '%'/13 HalfReuse: )/18 AsIs: e./16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Nativem_CheckEnd2]);
      refalrts::reinit_char(context[8], '%');
      refalrts::reinit_close_bracket(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[18] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Native-Begin/4 (/7 e.Accum/14 )/8 '%'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Native/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '%'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_Native]);
    refalrts::reinit_char(context[8], '%');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Native-Begin/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Native/4 AsIs: (/7 AsIs: e.Accum/5 AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Native]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Nativem_Begin("Native-Begin", COOKIE1_, COOKIE2_, func_Nativem_Begin);


static refalrts::FnResult func_VariableIndex(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & VariableIndex/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & VariableIndex/4 (/9 e.new1/7 )/10 s.new2/11 e.new3/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
      continue;
    // closed e.new3 as range 5
    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 '0'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '0', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '0'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], '0');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 '1'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '1', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '1'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], '1');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 '2'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '2', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '2'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], '2');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 '3'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '3', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '3'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], '3');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 '4'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '4', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '4'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], '4');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 '5'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '5', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '5'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], '5');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 '6'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '6', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '6'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], '6');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 '7'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '7', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '7'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], '7');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 '8'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '8', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '8'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], '8');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 '9'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '9', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '9'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], '9');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'a'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'a', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'a'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'a');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'b'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'b', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'b'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'b');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'c'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'c', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'c'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'c');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'd'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'd', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'd'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'd');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'e'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'e', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'e'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'e');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'f'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'f', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'f'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'f');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'g'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'g', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'g'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'g');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'h'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'h', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'h'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'h');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'i'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'i', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'i'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'i');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'j'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'j', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'j'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'j');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'k'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'k', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'k'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'k');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'l'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'l', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'l'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'l');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'm'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'm', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'm'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'm');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'n'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'n', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'n'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'n');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'o'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'o', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'o'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'o');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'p'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'p', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'p'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'p');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'q'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'q', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'q'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'q');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'r'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'r', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'r'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 's'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 's', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 's'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 's');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 't'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 't', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 't'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 't');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'u'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'u', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'u'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'u');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'v'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'v', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'v'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'v');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'w'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'w', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'w'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'w');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'x'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'x', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'x'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'y'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'y', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'y'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'y');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'z'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'z', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'z'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'z');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'A'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'A', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'A'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'A');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'B'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'B', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'B'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'B');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'C'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'C', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'C'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'C');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'D'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'D', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'D'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'D');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'E'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'E', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'E'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'E');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'F'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'F', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'F'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'G'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'G', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'G'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'G');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'H'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'H', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'H'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'H');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'I'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'I', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'I'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'I');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'J'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'J', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'J'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'J');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'K'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'K', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'K'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'K');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'L'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'L', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'L'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'L');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'M'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'M', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'M'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'M');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'N'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'N', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'N'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[10], 'N');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & VariableIndex/4 (/9 e.Accum/12 )/10 'O'/11 e.Text/14 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::char_term( 'O', context[11] ) )
      continue;
    // closed e.Accum as range 12
    // closed e.Text as range 14
    //DEBUG: e.Accum: 12
    //DEBUG: e.Text: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'O'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
    refalrts::reinit_char(context[10], 'O');
    refalrts::reinit_close_bracket(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[11] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & VariableIndex/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & VariableIndex/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'P'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'P', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'P'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'P');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'Q'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Q', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Q'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'Q');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'R'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'R', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'R'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'R');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'S'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'S', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'S'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'S');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'T'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'T', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'T'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'T');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'U'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'U', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'U'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'U');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'V'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'V', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'V'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'V');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'W'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'W', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'W'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'W');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'X'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'X', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'X'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'X');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'Y'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Y', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Y'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'Y');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 'Z'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Z', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Z'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], 'Z');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 '_'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '_', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '_'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
      refalrts::reinit_char(context[8], '_');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & VariableIndex/4 (/7 e.Accum/14 )/8 '-'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '-', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '-'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_VariableIndexTail]);
    refalrts::reinit_char(context[8], '-');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & VariableIndex/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Expected variable name"/11 )/13 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Expected variable name", 22);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_VariableIndex("VariableIndex", COOKIE1_, COOKIE2_, func_VariableIndex);


static refalrts::FnResult func_DirectiveTail(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DirectiveTail/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DirectiveTail/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DirectiveTail/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'A'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'A', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'A'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'A');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'B'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'B', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'B'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'B');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'C'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'C', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'C'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'C');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'D'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'D', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'D'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'D');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'E'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'E', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'E'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'E');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'F'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'F', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'F'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'F');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'G'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'G', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'G'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'G');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'H'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'H', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'H'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'H');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'I'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'I', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'I'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'I');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'J'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'J', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'J'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'J');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'K'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'K', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'K'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'K');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'L'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'L', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'L'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'L');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'M'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'M', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'M'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'M');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'N'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'N', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'N'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'N');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'O'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'O', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'O'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'O');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'P'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'P', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'P'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'P');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'Q'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Q', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Q'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'Q');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'R'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'R', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'R'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'R');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'S'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'S', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'S'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'S');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'T'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'T', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'T'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'T');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'U'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'U', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'U'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'U');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'V'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'V', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'V'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'V');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'W'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'W', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'W'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'W');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'X'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'X', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'X'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'X');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'Y'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Y', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Y'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'Y');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DirectiveTail/4 (/7 e.Accum/14 )/8 'Z'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( 'Z', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DirectiveTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Z'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::reinit_char(context[8], 'Z');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DirectiveTail/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkDirective/10 Tile{ AsIs: e.Accum/5 } )/11 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkDirective]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DirectiveTail("DirectiveTail", COOKIE1_, COOKIE2_, func_DirectiveTail);


static refalrts::FnResult func_StringLiteral(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & StringLiteral/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StringLiteral/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StringLiteral/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & StringLiteral/4 (/7 e.Accum/14 )/8 '\\'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\\', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 e.Accum/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escape]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral/4 (/7 e.new7/14 )/8 '\''/13 e.new6/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\'', context[13] ) )
        continue;
      // closed e.new7 as range 14
      // closed e.new6 as range 16
      do {
        // </0 & StringLiteral/4 (/7 e.Accum/18 )/8 '\''/13 '\''/22 e./20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = refalrts::char_left( '\'', context[20], context[21] );
        if( ! context[22] )
          continue;
        // closed e.Accum as range 18
        // closed e. as range 20
        //DEBUG: e.Accum: 18
        //DEBUG: e.: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} e.Accum/18 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-Char/4 HalfReuse: '\''/7 } )/23 </24 Tile{ HalfReuse: & StringLiteral/8 HalfReuse: (/13 HalfReuse: )/22 AsIs: e./20 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_Char]);
        refalrts::reinit_char(context[7], '\'');
        refalrts::reinit_name(context[8], functions[efunc_StringLiteral]);
        refalrts::reinit_open_bracket(context[13]);
        refalrts::reinit_close_bracket(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[13], context[22] );
        refalrts::link_brackets( context[0], context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[23], context[24] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & StringLiteral/4 (/7 e.Accum/18 )/8 '\''/13 e.Text/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Accum as range 18
      // closed e.Text as range 20
      //DEBUG: e.Accum: 18
      //DEBUG: e.Text: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 e.Accum/18 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Main/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/20 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Main]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & StringLiteral/4 (/7 e.Accum/14 )/8 '\n'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '\n', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Accum/14 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'U'/7 }"nclosed quote"/18 )/20 </21 & Main/22 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[18], context[19], "nclosed quote", 13);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Main]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::update_name(context[4], functions[efunc_TokenError]);
    refalrts::reinit_char(context[7], 'U');
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & StringLiteral/4 (/7 e.Accum/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Accum as range 9
    //DEBUG: e.Accum: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Accum/9 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'U'/7 }"nexpected EOF in string litera"/11 Tile{ HalfReuse: 'l'/8 HalfReuse: )/1 ]] }
    refalrts::alloc_chars(vm, context[11], context[12], "nexpected EOF in string litera", 30);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::update_name(context[4], functions[efunc_TokenError]);
    refalrts::reinit_char(context[7], 'U');
    refalrts::reinit_char(context[8], 'l');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StringLiteral/4 (/7 e.Accum/5 )/8 s.Any/9 e.Text/2 >/1
  // closed e.Accum as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: s.Any: 9
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/10 # TkLiteral-Char/11 Tile{ AsIs: e.Accum/5 } Tile{ AsIs: s.Any/9 } Tile{ AsIs: )/8 } Tile{ AsIs: </0 AsIs: & StringLiteral/4 AsIs: (/7 } )/12 Tile{ AsIs: e.Text/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_ident(vm, context[11], identifiers[ident_TkLiteralm_Char]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::link_brackets( context[10], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StringLiteral("StringLiteral", COOKIE1_, COOKIE2_, func_StringLiteral);


static refalrts::FnResult func_Compoundm_Escape(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Compound-Escape/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Compound-Escape/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Compound-Escape/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '7');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 'n'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'n', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'n'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'n');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 'r'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'r', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'r'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 't'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 't', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 't'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 't');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 'a'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'a', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'a'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'a');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 'b'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'b', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'b'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'b');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 'f'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'f', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'f'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'f');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 'v'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'v', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'v'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'v');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '\\'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\\', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '\\'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '\''/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\'', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '\''/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '\'');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '\"'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\"', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '\"'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '\"');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.new7/14 )/8 'd'/13 e.new6/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'd', context[13] ) )
        continue;
      // closed e.new7 as range 14
      // closed e.new6 as range 16
      do {
        // </0 & Compound-Escape/4 (/7 e.new10/18 )/8 'd'/13 s.new8/22 e.new9/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        // closed e.new10 as range 18
        if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
          continue;
        // closed e.new9 as range 20
        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '0'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '0', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'd'/8 Reuse: '0'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'd');
          refalrts::update_char(context[13], '0');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '1'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '1', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'd'/8 Reuse: '1'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'd');
          refalrts::update_char(context[13], '1');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '2'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '2', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'd'/8 Reuse: '2'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'd');
          refalrts::update_char(context[13], '2');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '3'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '3', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'd'/8 Reuse: '3'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'd');
          refalrts::update_char(context[13], '3');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '4'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '4', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'd'/8 Reuse: '4'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'd');
          refalrts::update_char(context[13], '4');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '5'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '5', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'd'/8 Reuse: '5'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'd');
          refalrts::update_char(context[13], '5');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '6'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '6', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'd'/8 Reuse: '6'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'd');
          refalrts::update_char(context[13], '6');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '7'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '7', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'd'/8 Reuse: '7'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'd');
          refalrts::update_char(context[13], '7');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '8'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '8', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'd'/8 Reuse: '8'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'd');
          refalrts::update_char(context[13], '8');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '9'/22 e./25 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[21];
        if( ! refalrts::char_term( '9', context[22] ) )
          continue;
        // closed e.Accum as range 23
        // closed e. as range 25
        //DEBUG: e.Accum: 23
        //DEBUG: e.: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'd'/8 Reuse: '9'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
        refalrts::reinit_char(context[8], 'd');
        refalrts::update_char(context[13], '9');
        refalrts::reinit_close_bracket(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[22] );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Compound-Escape/4 (/7 e.Accum/18 )/8 'd'/13 e.Text/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Accum as range 18
      // closed e.Text as range 20
      //DEBUG: e.Accum: 18
      //DEBUG: e.Text: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Accum/18 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'E'/7 }"xpected decimal digit"/22 )/24 </25 & CompoundSymbol/26 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/20 AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[22], context[23], "xpected decimal digit", 21);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_CompoundSymbol]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_name(context[4], functions[efunc_TokenError]);
      refalrts::reinit_char(context[7], 'E');
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.new7/14 )/8 'D'/13 e.new6/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'D', context[13] ) )
        continue;
      // closed e.new7 as range 14
      // closed e.new6 as range 16
      do {
        // </0 & Compound-Escape/4 (/7 e.new10/18 )/8 'D'/13 s.new8/22 e.new9/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        // closed e.new10 as range 18
        if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
          continue;
        // closed e.new9 as range 20
        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '0'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '0', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'D'/8 Reuse: '0'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'D');
          refalrts::update_char(context[13], '0');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '1'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '1', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'D'/8 Reuse: '1'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'D');
          refalrts::update_char(context[13], '1');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '2'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '2', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'D'/8 Reuse: '2'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'D');
          refalrts::update_char(context[13], '2');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '3'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '3', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'D'/8 Reuse: '3'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'D');
          refalrts::update_char(context[13], '3');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '4'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '4', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'D'/8 Reuse: '4'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'D');
          refalrts::update_char(context[13], '4');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '5'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '5', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'D'/8 Reuse: '5'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'D');
          refalrts::update_char(context[13], '5');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '6'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '6', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'D'/8 Reuse: '6'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'D');
          refalrts::update_char(context[13], '6');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '7'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '7', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'D'/8 Reuse: '7'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'D');
          refalrts::update_char(context[13], '7');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '8'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '8', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'D'/8 Reuse: '8'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
          refalrts::reinit_char(context[8], 'D');
          refalrts::update_char(context[13], '8');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[22] );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Compound-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '9'/22 e./25 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[21];
        if( ! refalrts::char_term( '9', context[22] ) )
          continue;
        // closed e.Accum as range 23
        // closed e. as range 25
        //DEBUG: e.Accum: 23
        //DEBUG: e.: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/23 HalfReuse: 'D'/8 Reuse: '9'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
        refalrts::reinit_char(context[8], 'D');
        refalrts::update_char(context[13], '9');
        refalrts::reinit_close_bracket(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[22] );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Compound-Escape/4 (/7 e.Accum/18 )/8 'D'/13 e.Text/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Accum as range 18
      // closed e.Text as range 20
      //DEBUG: e.Accum: 18
      //DEBUG: e.Text: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Accum/18 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'E'/7 }"xpected decimal digit"/22 )/24 </25 & CompoundSymbol/26 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/20 AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[22], context[23], "xpected decimal digit", 21);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_CompoundSymbol]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_name(context[4], functions[efunc_TokenError]);
      refalrts::reinit_char(context[7], 'E');
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 'x'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'x', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Compound-Escape-Hex/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'x'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Compoundm_Escapem_Hex]);
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 'X'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'X', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Compound-Escape-Hex/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'X'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Compoundm_Escapem_Hex]);
      refalrts::reinit_char(context[8], 'X');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Compound-Escape/4 (/7 e.Accum/14 )/8 '\n'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '\n', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Accum/14 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'U'/7 }"nclosed quote"/18 )/20 </21 & Main/22 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[18], context[19], "nclosed quote", 13);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Main]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::update_name(context[4], functions[efunc_TokenError]);
    refalrts::reinit_char(context[7], 'U');
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Compound-Escape/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Unexpected escape sequence"/11 )/13 Tile{ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Unexpected escape sequence", 26);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Compoundm_Escape("Compound-Escape", COOKIE1_, COOKIE2_, func_Compoundm_Escape);


static refalrts::FnResult func_CComment(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & CComment/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CComment/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & CComment/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & CComment/4 (/7 e.new7/14 )/8 '/'/13 e.new6/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '/', context[13] ) )
        continue;
      // closed e.new7 as range 14
      // closed e.new6 as range 16
      do {
        // </0 & CComment/4 (/7 e.Accum/18 )/8 '/'/13 '*'/22 e./20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = refalrts::char_left( '*', context[20], context[21] );
        if( ! context[22] )
          continue;
        // closed e.Accum as range 18
        // closed e. as range 20
        //DEBUG: e.Accum: 18
        //DEBUG: e.: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} e.Accum/18 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'N'/7 }"ested comments is disabled"/23 )/25 </26 Tile{ HalfReuse: & CComment/8 HalfReuse: (/13 HalfReuse: )/22 AsIs: e./20 AsIs: >/1 ]] }
        refalrts::alloc_chars(vm, context[23], context[24], "ested comments is disabled", 26);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::update_name(context[4], functions[efunc_TokenError]);
        refalrts::reinit_char(context[7], 'N');
        refalrts::reinit_name(context[8], functions[efunc_CComment]);
        refalrts::reinit_open_bracket(context[13]);
        refalrts::reinit_close_bracket(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[13], context[22] );
        refalrts::link_brackets( context[0], context[25] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[23], context[26] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CComment/4 (/7 e.Accum/18 )/8 '/'/13 e.Text/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Accum as range 18
      // closed e.Text as range 20
      //DEBUG: e.Accum: 18
      //DEBUG: e.Text: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Accum/18 )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CComment/4 AsIs: (/7 } Tile{ HalfReuse: )/13 AsIs: e.Text/20 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CComment/4 (/7 e.new7/14 )/8 '*'/13 e.new6/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '*', context[13] ) )
        continue;
      // closed e.new7 as range 14
      // closed e.new6 as range 16
      do {
        // </0 & CComment/4 (/7 e.Accum/18 )/8 '*'/13 '/'/22 e./20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = refalrts::char_left( '/', context[20], context[21] );
        if( ! context[22] )
          continue;
        // closed e.Accum as range 18
        // closed e. as range 20
        //DEBUG: e.Accum: 18
        //DEBUG: e.: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & CComment/4 (/7 e.Accum/18 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Main/8 HalfReuse: (/13 HalfReuse: )/22 AsIs: e./20 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_Main]);
        refalrts::reinit_open_bracket(context[13]);
        refalrts::reinit_close_bracket(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CComment/4 (/7 e.Accum/18 )/8 '*'/13 e.Text/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Accum as range 18
      // closed e.Text as range 20
      //DEBUG: e.Accum: 18
      //DEBUG: e.Text: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Accum/18 )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CComment/4 AsIs: (/7 } Tile{ HalfReuse: )/13 AsIs: e.Text/20 AsIs: >/1 ]] }
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CComment/4 (/7 e.Accum/14 )/8 '\n'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\n', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 } # TkNewLine/18 Tile{ AsIs: e.Accum/14 } '\n'/19 )/20 Tile{ AsIs: </0 AsIs: & CComment/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[18], identifiers[ident_TkNewLine]);
      refalrts::alloc_char(vm, context[19], '\n');
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[7] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CComment/4 (/7 e.Accum/14 )/8 s.Any/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: s.Any: 13
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Accum/14 {REMOVED TILE} s.Any/13 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & CComment/4 AsIs: (/7 } Tile{ AsIs: )/8 } Tile{ AsIs: e.Text/16 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CComment/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Unexpected EOF: unclosed comment"/11 )/13 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Unexpected EOF: unclosed comment", 32);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CComment("CComment", COOKIE1_, COOKIE2_, func_CComment);


static refalrts::FnResult func_CppComment(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & CppComment/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CppComment/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & CppComment/4 (/7 e.Accum/9 )/8 '\n'/13 e.Text/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_left( '\n', context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.Accum as range 9
    // closed e.Text as range 11
    //DEBUG: e.Accum: 9
    //DEBUG: e.Text: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkNewLine/4 } Tile{ AsIs: e.Accum/9 } '\n'/14 Tile{ HalfReuse: )/7 } </15 & Root/16 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/11 AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[14], '\n');
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_Root]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_TkNewLine]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CppComment/4 (/7 e.Accum/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Accum as range 9
    //DEBUG: e.Accum: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # TkEOF/7 AsIs: e.Accum/9 AsIs: )/8 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[7], identifiers[ident_TkEOF]);
    refalrts::link_brackets( context[4], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[4], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CppComment/4 (/7 e.Accum/5 )/8 s.Any/9 e.Text/2 >/1
  // closed e.Accum as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: s.Any: 9
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} e.Accum/5 {REMOVED TILE} s.Any/9 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & CppComment/4 AsIs: (/7 } Tile{ AsIs: )/8 } Tile{ AsIs: e.Text/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CppComment("CppComment", COOKIE1_, COOKIE2_, func_CppComment);


static refalrts::FnResult func_Nativem_CheckEnd(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Native-CheckEnd/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Native-CheckEnd/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Native-CheckEnd/4 (/7 e.Accum/9 )/8 '%'/13 e.Text/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_left( '%', context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.Accum as range 9
    // closed e.Text as range 11
    //DEBUG: e.Accum: 9
    //DEBUG: e.Text: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Native-CheckEnd2/4 AsIs: (/7 AsIs: e.Accum/9 HalfReuse: '%'/8 HalfReuse: )/13 AsIs: e.Text/11 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_Nativem_CheckEnd2]);
    refalrts::reinit_char(context[8], '%');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Native-CheckEnd/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Native/4 AsIs: (/7 AsIs: e.Accum/5 AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Native]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Nativem_CheckEnd("Native-CheckEnd", COOKIE1_, COOKIE2_, func_Nativem_CheckEnd);


static refalrts::FnResult func_Native(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Native/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Native/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Native/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Native/4 (/7 e.Accum/14 )/8 '\n'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\n', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkNativeLine/4 } Tile{ AsIs: e.Accum/14 } '\n'/18 Tile{ HalfReuse: )/7 } </19 & Native-Begin/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], '\n');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_Nativem_Begin]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkNativeLine]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Native/4 (/7 e.Accum/14 )/8 s.Any/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: s.Any: 13
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Any/13 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Native/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: s.Any13 /8 } )/18 Tile{ AsIs: e.Text/16 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::reinit_svar( context[8], context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Native/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Unexpected EOF: unclosed native insertion"/11 )/13 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Unexpected EOF: unclosed native insertion", 41);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Native("Native", COOKIE1_, COOKIE2_, func_Native);


static refalrts::FnResult func_VariableIndexTail(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & VariableIndexTail/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & VariableIndexTail/4 (/9 e.new1/7 )/10 s.new2/11 e.new3/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
      continue;
    // closed e.new3 as range 5
    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 '0'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '0', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '0'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '0');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 '1'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '1', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '1'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '1');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 '2'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '2', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '2'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '2');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 '3'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '3', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '3'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '3');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 '4'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '4', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '4'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '4');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 '5'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '5', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '5'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '5');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 '6'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '6', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '6'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '6');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 '7'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '7', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '7'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '7');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 '8'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '8', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '8'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '8');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 '9'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '9', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: '9'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], '9');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'a'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'a', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'a'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'a');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'b'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'b', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'b'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'b');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'c'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'c', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'c'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'c');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'd'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'd', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'd'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'd');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'e'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'e', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'e'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'e');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'f'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'f', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'f'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'f');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'g'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'g', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'g'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'g');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'h'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'h', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'h'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'h');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'i'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'i', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'i'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'i');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'j'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'j', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'j'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'j');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'k'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'k', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'k'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'k');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'l'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'l', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'l'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'l');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'm'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'm', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'm'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'm');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'n'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'n', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'n'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'n');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'o'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'o', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'o'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'o');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'p'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'p', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'p'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'p');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'q'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'q', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'q'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'q');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'r'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'r', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'r'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 's'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 's', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 's'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 's');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 't'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 't', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 't'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 't');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'u'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'u', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'u'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'u');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'v'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'v', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'v'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'v');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'w'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'w', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'w'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'w');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'x'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'x', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'x'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'y'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'y', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'y'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'y');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'z'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'z', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'z'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'z');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'A'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'A', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'A'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'A');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'B'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'B', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'B'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'B');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'C'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'C', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'C'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'C');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'D'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'D', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'D'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'D');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'E'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'E', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'E'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'E');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'F'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'F', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'F'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'F');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'G'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'G', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'G'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'G');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'H'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'H', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'H'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'H');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'I'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'I', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'I'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'I');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'J'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'J', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'J'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'J');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'K'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'K', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'K'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'K');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'L'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'L', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'L'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'L');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'M'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'M', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'M'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'M');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'N'/11 e.Text/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( 'N', context[11] ) )
        continue;
      // closed e.Accum as range 12
      // closed e.Text as range 14
      //DEBUG: e.Accum: 12
      //DEBUG: e.Text: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'N'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], 'N');
      refalrts::reinit_close_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[11] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & VariableIndexTail/4 (/9 e.Accum/12 )/10 'O'/11 e.Text/14 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::char_term( 'O', context[11] ) )
      continue;
    // closed e.Accum as range 12
    // closed e.Text as range 14
    //DEBUG: e.Accum: 12
    //DEBUG: e.Text: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/9 AsIs: e.Accum/12 HalfReuse: 'O'/10 HalfReuse: )/11 AsIs: e.Text/14 AsIs: >/1 ]] }
    refalrts::reinit_char(context[10], 'O');
    refalrts::reinit_close_bracket(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[11] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & VariableIndexTail/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & VariableIndexTail/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'P'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'P', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'P'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'P');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'Q'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Q', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Q'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'Q');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'R'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'R', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'R'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'R');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'S'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'S', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'S'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'S');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'T'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'T', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'T'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'T');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'U'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'U', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'U'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'U');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'V'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'V', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'V'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'V');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'W'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'W', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'W'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'W');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'X'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'X', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'X'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'X');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'Y'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Y', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Y'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'Y');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 'Z'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'Z', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'Z'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'Z');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 '_'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '_', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '_'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '_');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & VariableIndexTail/4 (/7 e.Accum/14 )/8 '-'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '-', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & VariableIndexTail/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '-'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::reinit_char(context[8], '-');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & VariableIndexTail/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkVariable/10 Tile{ AsIs: e.Accum/5 } )/11 Tile{ AsIs: </0 Reuse: & Main/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkVariable]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_VariableIndexTail("VariableIndexTail", COOKIE1_, COOKIE2_, func_VariableIndexTail);


static refalrts::FnResult func_StringLiteralm_Escape(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & StringLiteral-Escape/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StringLiteral-Escape/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StringLiteral-Escape/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 'n'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'n', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-NewLine/4 } Tile{ AsIs: e.Accum/14 } 'n'/18 Tile{ HalfReuse: )/7 } </19 & StringLiteral/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], 'n');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_NewLine]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 'r'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'r', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-CarriageReturn/4 } Tile{ AsIs: e.Accum/14 } 'r'/18 Tile{ HalfReuse: )/7 } </19 & StringLiteral/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], 'r');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_CarriageReturn]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 't'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 't', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-Tab/4 } Tile{ AsIs: e.Accum/14 } 't'/18 Tile{ HalfReuse: )/7 } </19 & StringLiteral/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], 't');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_Tab]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 'a'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'a', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-Bell/4 } Tile{ AsIs: e.Accum/14 } 'a'/18 Tile{ HalfReuse: )/7 } </19 & StringLiteral/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], 'a');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_Bell]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 'b'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'b', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-BS/4 } Tile{ AsIs: e.Accum/14 } 'b'/18 Tile{ HalfReuse: )/7 } </19 & StringLiteral/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], 'b');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_BS]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 'f'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'f', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-FF/4 } Tile{ AsIs: e.Accum/14 } 'f'/18 Tile{ HalfReuse: )/7 } </19 & StringLiteral/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], 'f');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_FF]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 'v'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'v', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-VT/4 } Tile{ AsIs: e.Accum/14 } 'v'/18 Tile{ HalfReuse: )/7 } </19 & StringLiteral/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], 'v');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_VT]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '\\'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\\', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-Char/4 } Tile{ AsIs: e.Accum/14 } '\\'/18 Tile{ HalfReuse: )/7 } </19 & StringLiteral/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], '\\');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_Char]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '\''/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\'', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-Char/4 } Tile{ AsIs: e.Accum/14 } '\''/18 Tile{ HalfReuse: )/7 } </19 & StringLiteral/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], '\'');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_Char]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '\"'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\"', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-Char/4 } Tile{ AsIs: e.Accum/14 } '\"'/18 Tile{ HalfReuse: )/7 } </19 & StringLiteral/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[18], '\"');
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_Char]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.new7/14 )/8 'd'/13 e.new6/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'd', context[13] ) )
        continue;
      // closed e.new7 as range 14
      // closed e.new6 as range 16
      do {
        // </0 & StringLiteral-Escape/4 (/7 e.new10/18 )/8 'd'/13 s.new8/22 e.new9/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        // closed e.new10 as range 18
        if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
          continue;
        // closed e.new9 as range 20
        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '0'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '0', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '0'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '0');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '1'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '1', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '1'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '1');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '2'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '2', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '2'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '2');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '3'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '3', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '3'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '3');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '4'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '4', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '4'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '4');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '5'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '5', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '5'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '5');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '6'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '6', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '6'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '6');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '7'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '7', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '7'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '7');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '8'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '8', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '8'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '8');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'd'/13 '9'/22 e./25 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[21];
        if( ! refalrts::char_term( '9', context[22] ) )
          continue;
        // closed e.Accum as range 23
        // closed e. as range 25
        //DEBUG: e.Accum: 23
        //DEBUG: e.: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '9'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
        refalrts::reinit_open_bracket(context[8]);
        refalrts::update_char(context[13], '9');
        refalrts::reinit_close_bracket(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[8], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & StringLiteral-Escape/4 (/7 e.Accum/18 )/8 'd'/13 e.Text/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Accum as range 18
      // closed e.Text as range 20
      //DEBUG: e.Accum: 18
      //DEBUG: e.Text: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Accum/18 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'E'/7 }"xpected decimal digit"/22 )/24 </25 & StringLiteral/26 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/20 AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[22], context[23], "xpected decimal digit", 21);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_name(context[4], functions[efunc_TokenError]);
      refalrts::reinit_char(context[7], 'E');
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.new7/14 )/8 'D'/13 e.new6/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'D', context[13] ) )
        continue;
      // closed e.new7 as range 14
      // closed e.new6 as range 16
      do {
        // </0 & StringLiteral-Escape/4 (/7 e.new10/18 )/8 'D'/13 s.new8/22 e.new9/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        // closed e.new10 as range 18
        if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
          continue;
        // closed e.new9 as range 20
        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '0'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '0', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '0'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '0');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '1'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '1', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '1'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '1');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '2'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '2', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '2'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '2');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '3'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '3', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '3'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '3');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '4'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '4', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '4'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '4');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '5'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '5', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '5'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '5');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '6'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '6', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '6'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '6');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '7'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '7', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '7'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '7');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '8'/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::char_term( '8', context[22] ) )
            continue;
          // closed e.Accum as range 23
          // closed e. as range 25
          //DEBUG: e.Accum: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '8'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_char(context[13], '8');
          refalrts::reinit_close_bracket(context[22]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & StringLiteral-Escape/4 (/7 e.Accum/23 )/8 'D'/13 '9'/22 e./25 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[21];
        if( ! refalrts::char_term( '9', context[22] ) )
          continue;
        // closed e.Accum as range 23
        // closed e. as range 25
        //DEBUG: e.Accum: 23
        //DEBUG: e.: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/7 e.Accum/23 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 } Tile{ HalfReuse: (/8 Reuse: '9'/13 HalfReuse: )/22 AsIs: e./25 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
        refalrts::reinit_open_bracket(context[8]);
        refalrts::update_char(context[13], '9');
        refalrts::reinit_close_bracket(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[8], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & StringLiteral-Escape/4 (/7 e.Accum/18 )/8 'D'/13 e.Text/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Accum as range 18
      // closed e.Text as range 20
      //DEBUG: e.Accum: 18
      //DEBUG: e.Text: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Accum/18 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'E'/7 }"xpected decimal digit"/22 )/24 </25 & StringLiteral/26 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/20 AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[22], context[23], "xpected decimal digit", 21);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_StringLiteral]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_name(context[4], functions[efunc_TokenError]);
      refalrts::reinit_char(context[7], 'E');
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::link_brackets( context[0], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_OCode]);
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_OCode]);
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_OCode]);
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_OCode]);
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_OCode]);
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_OCode]);
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_OCode]);
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_OCode]);
      refalrts::reinit_char(context[8], '7');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 'x'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'x', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 e.Accum/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-XCode/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_XCode]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 'X'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'X', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 e.Accum/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-XCode/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_XCode]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & StringLiteral-Escape/4 (/7 e.Accum/14 )/8 '\n'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '\n', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Accum/14 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'U'/7 }"nclosed quote"/18 )/20 </21 & Main/22 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[18], context[19], "nclosed quote", 13);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Main]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::update_name(context[4], functions[efunc_TokenError]);
    refalrts::reinit_char(context[7], 'U');
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StringLiteral-Escape/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Unexpected escape sequence"/11 )/13 Tile{ AsIs: </0 Reuse: & StringLiteral/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Unexpected escape sequence", 26);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_StringLiteral]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StringLiteralm_Escape("StringLiteral-Escape", COOKIE1_, COOKIE2_, func_StringLiteralm_Escape);


static refalrts::FnResult func_StringLiteralm_Quote(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & StringLiteral-Quote/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StringLiteral-Quote/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StringLiteral-Quote/4 (/7 e.Accum/9 )/8 '\''/13 e.Text/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_left( '\'', context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.Accum as range 9
    // closed e.Text as range 11
    //DEBUG: e.Accum: 9
    //DEBUG: e.Text: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkLiteral-Char/4 } Tile{ AsIs: e.Accum/9 } '\''/14 Tile{ HalfReuse: )/7 } </15 & StringLiteral/16 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/11 AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[14], '\'');
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_StringLiteral]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_TkLiteralm_Char]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StringLiteral-Quote/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Main/4 AsIs: (/7 AsIs: e.Accum/5 AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Main]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StringLiteralm_Quote("StringLiteral-Quote", COOKIE1_, COOKIE2_, func_StringLiteralm_Quote);


static refalrts::FnResult func_Compoundm_Escapem_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Compound-Escape-Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Compound-Escape-Dec/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Compound-Escape-Dec/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Compound-Escape-Dec/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Dec/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Dec/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Dec/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Dec/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Dec/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Dec/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Dec/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '7');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Dec/4 (/7 e.Accum/14 )/8 '8'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '8', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '8'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '8');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Compound-Escape-Dec/4 (/7 e.Accum/14 )/8 '9'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '9', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '9'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
    refalrts::reinit_char(context[8], '9');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Compound-Escape-Dec/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Expected decimal digit"/11 )/13 Tile{ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Expected decimal digit", 22);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Compoundm_Escapem_Dec("Compound-Escape-Dec", COOKIE1_, COOKIE2_, func_Compoundm_Escapem_Dec);


static refalrts::FnResult func_Compoundm_Escapem_Hex(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Compound-Escape-Hex/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Compound-Escape-Hex/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Compound-Escape-Hex/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '7');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 '8'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '8', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '8'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '8');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 '9'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '9', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '9'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], '9');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'A'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'A', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'A'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'A');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'B'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'B', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'B'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'B');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'C'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'C', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'C'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'C');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'D'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'D', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'D'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'D');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'E'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'E', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'E'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'E');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'F'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'F', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'F'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'F');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'a'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'a', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'a'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'a');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'b'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'b', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'b'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'b');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'c'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'c', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'c'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'c');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'd'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'd', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'd'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'd');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'e'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'e', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'e'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
      refalrts::reinit_char(context[8], 'e');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Compound-Escape-Hex/4 (/7 e.Accum/14 )/8 'f'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( 'f', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'f'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
    refalrts::reinit_char(context[8], 'f');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Compound-Escape-Hex/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Expected hexadecimal digit"/11 )/13 Tile{ AsIs: </0 Reuse: & CompoundSymbol/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Expected hexadecimal digit", 26);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_CompoundSymbol]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Compoundm_Escapem_Hex("Compound-Escape-Hex", COOKIE1_, COOKIE2_, func_Compoundm_Escapem_Hex);


static refalrts::FnResult func_CCommentm_CheckNested(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & CComment-CheckNested/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CComment-CheckNested/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & CComment-CheckNested/4 (/7 e.Accum/9 )/8 '*'/13 e.Text/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_left( '*', context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.Accum as range 9
    // closed e.Text as range 11
    //DEBUG: e.Accum: 9
    //DEBUG: e.Text: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.Accum/9 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 Reuse: & TokenError/4 HalfReuse: 'N'/7 }"ested comments is disabled"/14 )/16 </17 & CComment/18 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/11 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[14], context[15], "ested comments is disabled", 26);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_CComment]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::update_name(context[4], functions[efunc_TokenError]);
    refalrts::reinit_char(context[7], 'N');
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[14], context[18] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CComment-CheckNested/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CComment/4 AsIs: (/7 AsIs: e.Accum/5 AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_CComment]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CCommentm_CheckNested("CComment-CheckNested", COOKIE1_, COOKIE2_, func_CCommentm_CheckNested);


static refalrts::FnResult func_CCommentm_CheckEnd(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & CComment-CheckEnd/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CComment-CheckEnd/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & CComment-CheckEnd/4 (/7 e.Accum/9 )/8 '/'/13 e.Text/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::char_left( '/', context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.Accum as range 9
    // closed e.Text as range 11
    //DEBUG: e.Accum: 9
    //DEBUG: e.Text: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 e.Accum/9 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Main/4 } Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/11 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_Main]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CComment-CheckEnd/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CComment/4 AsIs: (/7 AsIs: e.Accum/5 AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_CComment]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CCommentm_CheckEnd("CComment-CheckEnd", COOKIE1_, COOKIE2_, func_CCommentm_CheckEnd);


static refalrts::FnResult func_Nativem_CheckEnd2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Native-CheckEnd2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Native-CheckEnd2/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Native-CheckEnd2/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Native-CheckEnd2/4 (/7 e.Accum/14 )/8 '\r'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '\r', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Native-CheckEnd2/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '\r'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '\r');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Native-CheckEnd2/4 (/7 e.Accum/14 )/8 '\n'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '\n', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkNewLine/4 } Tile{ AsIs: e.Accum/14 } '\n'/18 Tile{ HalfReuse: )/7 } </19 & Main/20 Tile{ HalfReuse: (/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[18], '\n');
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_Main]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_TkNewLine]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Native-CheckEnd2/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Native/4 AsIs: (/7 AsIs: e.Accum/5 AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Native]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Nativem_CheckEnd2("Native-CheckEnd2", COOKIE1_, COOKIE2_, func_Nativem_CheckEnd2);


static refalrts::FnResult func_StringLiteralm_Escapem_DCode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & StringLiteral-Escape-DCode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StringLiteral-Escape-DCode/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StringLiteral-Escape-DCode/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
      refalrts::reinit_char(context[8], '7');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/14 )/8 '8'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '8', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '8'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
      refalrts::reinit_char(context[8], '8');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/14 )/8 '9'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '9', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '9'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_DNext]);
    refalrts::reinit_char(context[8], '9');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StringLiteral-Escape-DCode/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Expected decimal digit"/11 )/13 Tile{ AsIs: </0 Reuse: & StringLiteral/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Expected decimal digit", 22);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_StringLiteral]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StringLiteralm_Escapem_DCode("StringLiteral-Escape-DCode", COOKIE1_, COOKIE2_, func_StringLiteralm_Escapem_DCode);


static refalrts::FnResult func_StringLiteralm_Escapem_OCode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & StringLiteral-Escape-OCode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StringLiteral-Escape-OCode/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StringLiteral-Escape-OCode/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & StringLiteral-Escape-OCode/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-OCode/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-OCode/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-OCode/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-OCode/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-OCode/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-OCode/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & StringLiteral-Escape-OCode/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '7', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-OCode/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::reinit_char(context[8], '7');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StringLiteral-Escape-OCode/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkLiteral-OCode/10 Tile{ AsIs: e.Accum/5 } )/11 Tile{ AsIs: </0 Reuse: & StringLiteral/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkLiteralm_OCode]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_StringLiteral]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StringLiteralm_Escapem_OCode("StringLiteral-Escape-OCode", COOKIE1_, COOKIE2_, func_StringLiteralm_Escapem_OCode);


static refalrts::FnResult func_StringLiteralm_Escapem_XCode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & StringLiteral-Escape-XCode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StringLiteral-Escape-XCode/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StringLiteral-Escape-XCode/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], '7');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 '8'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '8', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '8'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], '8');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 '9'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '9', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '9'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], '9');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'A'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'A', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'A'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'A');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'B'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'B', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'B'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'B');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'C'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'C', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'C'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'C');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'D'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'D', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'D'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'D');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'E'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'E', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'E'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'E');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'F'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'F', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'F'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'F');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'a'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'a', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'a'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'a');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'b'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'b', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'b'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'b');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'c'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'c', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'c'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'c');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'd'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'd', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'd'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'd');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'e'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'e', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'e'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
      refalrts::reinit_char(context[8], 'e');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/14 )/8 'f'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( 'f', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'f'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_StringLiteralm_Escapem_Xnext]);
    refalrts::reinit_char(context[8], 'f');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StringLiteral-Escape-XCode/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Accum/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 & TokenError/10"Expected hexadecimal digit"/11 )/13 Tile{ AsIs: </0 Reuse: & StringLiteral/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_TokenError]);
  refalrts::alloc_chars(vm, context[11], context[12], "Expected hexadecimal digit", 26);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_StringLiteral]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StringLiteralm_Escapem_XCode("StringLiteral-Escape-XCode", COOKIE1_, COOKIE2_, func_StringLiteralm_Escapem_XCode);


static refalrts::FnResult func_StringLiteralm_Escapem_DNext(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & StringLiteral-Escape-DNext/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StringLiteral-Escape-DNext/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StringLiteral-Escape-DNext/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '7');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/14 )/8 '8'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '8', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '8'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '8');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/14 )/8 '9'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '9', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-DNext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '9'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::reinit_char(context[8], '9');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StringLiteral-Escape-DNext/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkLiteral-Code/10 Tile{ AsIs: e.Accum/5 } )/11 Tile{ AsIs: </0 Reuse: & StringLiteral/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkLiteralm_Code]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_StringLiteral]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StringLiteralm_Escapem_DNext("StringLiteral-Escape-DNext", COOKIE1_, COOKIE2_, func_StringLiteralm_Escapem_DNext);


static refalrts::FnResult func_StringLiteralm_Escapem_Xnext(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & StringLiteral-Escape-Xnext/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StringLiteral-Escape-Xnext/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & StringLiteral-Escape-Xnext/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 '0'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '0'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '0');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 '1'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '1'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '1');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 '2'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '2'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '2');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 '3'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '3'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '3');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 '4'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '4'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '4');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 '5'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '5'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '5');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 '6'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '6'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '6');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 '7'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '7'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '7');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 '8'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '8', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '8'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '8');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 '9'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '9', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: '9'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '9');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'A'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'A', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'A'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'A');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'B'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'B', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'B'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'B');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'C'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'C', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'C'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'C');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'D'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'D', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'D'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'D');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'E'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'E', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'E'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'E');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'F'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'F', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'F'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'F');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'a'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'a', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'a'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'a');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'b'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'b', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'b'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'b');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'c'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'c', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'c'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'c');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'd'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'd', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'd'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'd');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'e'/13 e.Text/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( 'e', context[13] ) )
        continue;
      // closed e.Accum as range 14
      // closed e.Text as range 16
      //DEBUG: e.Accum: 14
      //DEBUG: e.Text: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'e'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], 'e');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/14 )/8 'f'/13 e.Text/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( 'f', context[13] ) )
      continue;
    // closed e.Accum as range 14
    // closed e.Text as range 16
    //DEBUG: e.Accum: 14
    //DEBUG: e.Text: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & StringLiteral-Escape-Xnext/4 AsIs: (/7 AsIs: e.Accum/14 HalfReuse: 'f'/8 HalfReuse: )/13 AsIs: e.Text/16 AsIs: >/1 ]] }
    refalrts::reinit_char(context[8], 'f');
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StringLiteral-Escape-Xnext/4 (/7 e.Accum/5 )/8 e.Text/2 >/1
  // closed e.Accum as range 5
  // closed e.Text as range 2
  //DEBUG: e.Accum: 5
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/9 # TkLiteral-XCode/10 Tile{ AsIs: e.Accum/5 } )/11 Tile{ AsIs: </0 Reuse: & StringLiteral/4 AsIs: (/7 } Tile{ AsIs: )/8 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkLiteralm_XCode]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_StringLiteral]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[9], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StringLiteralm_Escapem_Xnext("StringLiteral-Escape-Xnext", COOKIE1_, COOKIE2_, func_StringLiteralm_Escapem_Xnext);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@1/4 (/7 e./11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e. as range 11
      // closed e.Tail as range 9
      //DEBUG: e.: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} & Map@1/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e./11 } Tile{ HalfReuse: '\n'/7 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_char(context[7], '\n');
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadSource\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@1/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_LoadSource_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & LoadSource\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_LoadSource_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@2/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@2/4 s.Char/7 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_term( context[7], context[7] ) )
        continue;
      // closed e.Tail as range 9
      //DEBUG: s.Char: 7
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkChar/4 AsIs: s.Char/7 } )/11 </12 & Map@2/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[11]);
      refalrts::alloc_open_call(vm, context[12]);
      refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z2]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkChar]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[12] );
      refalrts::link_brackets( context[0], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[11], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@2/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ValidDirective$10\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@2/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_gen_ValidDirective_S10L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ValidDirective$10\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ValidDirective_S10L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@3/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@3/4 s.Char/7 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_term( context[7], context[7] ) )
        continue;
      // closed e.Tail as range 9
      //DEBUG: s.Char: 7
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkChar/4 AsIs: s.Char/7 } )/11 </12 & Map@3/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[11]);
      refalrts::alloc_open_call(vm, context[12]);
      refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z3]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkChar]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[12] );
      refalrts::link_brackets( context[0], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[11], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & NormalizeToken$4\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@3/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z3]);
    refalrts::update_name(context[4], functions[efunc_gen_NormalizeToken_S4L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & NormalizeToken$4\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_NormalizeToken_S4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@4/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@4/4 s.Char/7 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_term( context[7], context[7] ) )
        continue;
      // closed e.Tail as range 9
      //DEBUG: s.Char: 7
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkChar/4 AsIs: s.Char/7 } )/11 </12 & Map@4/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[11]);
      refalrts::alloc_open_call(vm, context[12]);
      refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z4]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_TkChar]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[12] );
      refalrts::link_brackets( context[0], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[11], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & NormalizeToken$6\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@4/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_gen_NormalizeToken_S6L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & NormalizeToken$6\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_NormalizeToken_S6L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_CollectNativeLinesm_Aux_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & CollectNativeLines-Aux@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CollectNativeLines-Aux@1/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & CollectNativeLines-Aux@1/4 s.LineNumber0/5 (/8 e.Line0/10 )/9 (/16 # TkNativeLine/18 s.LineNumber/19 e.Line/14 )/17 e.Tail/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    context[18] = refalrts::ident_left( identifiers[ident_TkNativeLine], context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.Line0 as range 10
    // closed e.Tail as range 12
    if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
      continue;
    // closed e.Line as range 14
    //DEBUG: s.LineNumber0: 5
    //DEBUG: e.Line0: 10
    //DEBUG: e.Tail: 12
    //DEBUG: s.LineNumber: 19
    //DEBUG: e.Line: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LineNumber/19 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CollectNativeLines-Aux@2/4 AsIs: s.LineNumber0/5 AsIs: (/8 } (/20 Tile{ AsIs: e.Line0/10 } Tile{ HalfReuse: )/18 } Tile{ AsIs: )/9 AsIs: (/16 } Tile{ AsIs: e.Line/14 } Tile{ AsIs: )/17 AsIs: e.Tail/12 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_CollectNativeLinesm_Aux_Z2]);
    refalrts::reinit_close_bracket(context[18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[20], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[9], context[16] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CollectNativeLines-Aux@1/4 s.LineNumber0/5 (/8 e.Line0/10 )/9 e.Tail/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Line0 as range 10
    // closed e.Tail as range 12
    //DEBUG: s.LineNumber0: 5
    //DEBUG: e.Line0: 10
    //DEBUG: e.Tail: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkNativeBlock/4 AsIs: s.LineNumber0/5 AsIs: (/8 AsIs: e.Line0/10 AsIs: )/9 } )/14 </15 & CollectNativeLines/16 Tile{ AsIs: e.Tail/12 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_CollectNativeLines]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_TkNativeBlock]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[0], context[14] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[14], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CollectNativeLines-Aux@1/4 s.LineNumber0/5 (/8 e.Line0/6 )/9 e.dyn1/2 >/1
  // closed e.Line0 as range 6
  // closed e.dyn1 as range 2
  //DEBUG: s.LineNumber0: 5
  //DEBUG: e.Line0: 6
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CollectNativeLines-Aux@0/4 AsIs: s.LineNumber0/5 AsIs: (/8 } (/10 Tile{ AsIs: e.Line0/6 } )/11 Tile{ AsIs: )/9 AsIs: e.dyn1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_CollectNativeLinesm_Aux_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CollectNativeLinesm_Aux_Z1("CollectNativeLines-Aux@1", COOKIE1_, COOKIE2_, func_gen_CollectNativeLinesm_Aux_Z1);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@5/4 t.Next/7 e.Tail/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail as range 5
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & NormalizeToken/4 AsIs: t.Next/7 } >/9 </10 & Map@5/11 Tile{ AsIs: e.Tail/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z5]);
    refalrts::update_name(context[4], functions[efunc_NormalizeToken]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & NormalizeToken@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_NormalizeToken_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_Fetch_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Fetch@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@1/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@2/4 } </7 & DoMapAccum@1/8 1/9 (/10 )/11 Tile{ AsIs: e.Argument/5 } >/12 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[8], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::alloc_number(vm, context[9], 1UL);
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@1/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: [*]/1 } & Pipe$2\1@0/5 (/6 & MapAccum@0/7 & AddLineNumber@0/8 1/9 )/10 (/11 & DelAccumulator@0/12 & CollectNativeLines@0/13 )/14 {*}/15 >/16 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_MapAccum_Z0]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_AddLineNumber_Z0]);
  refalrts::alloc_number(vm, context[9], 1UL);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DelAccumulator_Z0]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_CollectNativeLines_Z0]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[1]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[1]);
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[6], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[15] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z1("Fetch@1", COOKIE1_, COOKIE2_, func_gen_Fetch_Z1);


static refalrts::FnResult func_gen_CollectNativeLinesm_Aux_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & CollectNativeLines-Aux@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CollectNativeLines-Aux@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & CollectNativeLines-Aux@2/4 s.X/5 (/8 e.X/14 )/9 (/12 e.X0/16 )/13 (/22 # TkNativeLine/24 s.LineNumber/25 e.Line/20 )/23 e.Tail/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    context[24] = refalrts::ident_left( identifiers[ident_TkNativeLine], context[20], context[21] );
    if( ! context[24] )
      continue;
    // closed e.X as range 14
    // closed e.X0 as range 16
    // closed e.Tail as range 18
    if( ! refalrts::svar_left( context[25], context[20], context[21] ) )
      continue;
    // closed e.Line as range 20
    //DEBUG: s.X: 5
    //DEBUG: e.X: 14
    //DEBUG: e.X0: 16
    //DEBUG: e.Tail: 18
    //DEBUG: s.LineNumber: 25
    //DEBUG: e.Line: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LineNumber/25 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & CollectNativeLines-Aux@2/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.X/14 HalfReuse: (/9 } Tile{ AsIs: e.X0/16 } Tile{ HalfReuse: )/24 } Tile{ AsIs: )/13 AsIs: (/22 } Tile{ AsIs: e.Line/20 } Tile{ AsIs: )/23 AsIs: e.Tail/18 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_close_bracket(context[24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[8], context[13] );
    refalrts::link_brackets( context[9], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[23];
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[13], context[22] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CollectNativeLines-Aux@2/4 s.X/5 (/8 e.X/14 )/9 (/12 e.X0/16 )/13 e.Tail/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.X as range 14
    // closed e.X0 as range 16
    // closed e.Tail as range 18
    //DEBUG: s.X: 5
    //DEBUG: e.X: 14
    //DEBUG: e.X0: 16
    //DEBUG: e.Tail: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # TkNativeBlock/4 AsIs: s.X/5 } Tile{ AsIs: e.X/14 } Tile{ AsIs: (/8 } Tile{ AsIs: e.X0/16 } Tile{ AsIs: )/9 HalfReuse: )/12 } </20 Tile{ HalfReuse: & CollectNativeLines/13 AsIs: e.Tail/18 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_TkNativeBlock]);
    refalrts::reinit_close_bracket(context[12]);
    refalrts::reinit_name(context[13], functions[efunc_CollectNativeLines]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[0], context[12] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[9], context[12] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CollectNativeLines-Aux@2/4 s.X/5 (/8 e.X/6 )/9 (/12 e.X0/10 )/13 e.dyn1/2 >/1
  // closed e.X as range 6
  // closed e.X0 as range 10
  // closed e.dyn1 as range 2
  //DEBUG: s.X: 5
  //DEBUG: e.X: 6
  //DEBUG: e.X0: 10
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CollectNativeLines-Aux@0/4 AsIs: s.X/5 AsIs: (/8 AsIs: e.X/6 HalfReuse: (/9 } Tile{ AsIs: e.X0/10 } Tile{ HalfReuse: )/12 } Tile{ AsIs: )/13 AsIs: e.dyn1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CollectNativeLinesm_Aux_Z0]);
  refalrts::reinit_open_bracket(context[9]);
  refalrts::reinit_close_bracket(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[13] );
  refalrts::link_brackets( context[9], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CollectNativeLinesm_Aux_Z2("CollectNativeLines-Aux@2", COOKIE1_, COOKIE2_, func_gen_CollectNativeLinesm_Aux_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@1/4 s.new8/5 (/9 e.new12/17 )/10 (/15 s.new9/23 e.new10/21 )/16 e.new11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.new12 as range 17
      // closed e.new11 as range 19
      if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
        continue;
      // closed e.new10 as range 21
      do {
        // </0 & DoMapAccum@1/4 s.LineNumber/5 (/9 e.Scanned/24 )/10 (/15 # TkNewLine/23 )/16 e.Tail/26 >/1
        context[24] = context[17];
        context[25] = context[18];
        context[26] = context[19];
        context[27] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_TkNewLine], context[23] ) )
          continue;
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Scanned as range 24
        // closed e.Tail as range 26
        //DEBUG: s.LineNumber: 5
        //DEBUG: e.Scanned: 24
        //DEBUG: e.Tail: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/24 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/26 } Tile{ AsIs: )/16 } </28 Tile{ HalfReuse: & Add/23 } 1/29 Tile{ AsIs: s.LineNumber/5 } >/30 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[28]);
        refalrts::alloc_number(vm, context[29], 1UL);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
        refalrts::reinit_name(context[23], functions[efunc_Add]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_elem( res, context[5] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoMapAccum@1/4 s.LineNumber/5 (/9 e.Scanned/24 )/10 (/15 # TkNativeLine/23 e.0/26 )/16 e.Tail/28 >/1
        context[24] = context[17];
        context[25] = context[18];
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[19];
        context[29] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_TkNativeLine], context[23] ) )
          continue;
        // closed e.Scanned as range 24
        // closed e.0 as range 26
        // closed e.Tail as range 28
        //DEBUG: s.LineNumber: 5
        //DEBUG: e.Scanned: 24
        //DEBUG: e.0: 26
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/24 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/28 } )/30 </31 & Add/32 1/33 Tile{ AsIs: s.LineNumber/5 } >/34 (/35 # TkNativeLine/36 Tile{ HalfReuse: s.LineNumber5 /23 AsIs: e.0/26 AsIs: )/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[33], 1UL);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::alloc_open_bracket(vm, context[35]);
        refalrts::alloc_ident(vm, context[36], identifiers[ident_TkNativeLine]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
        refalrts::reinit_svar( context[23], context[5] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[35], context[16] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[15], context[30] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[16] );
        res = refalrts::splice_evar( res, context[34], context[36] );
        res = refalrts::splice_elem( res, context[5] );
        res = refalrts::splice_evar( res, context[30], context[33] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 s.LineNumber/5 (/9 e.Scanned/24 )/10 (/15 s.TokType/23 e.0/26 )/16 e.Tail/28 >/1
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[19];
      context[29] = context[20];
      // closed e.Scanned as range 24
      // closed e.0 as range 26
      // closed e.Tail as range 28
      //DEBUG: s.LineNumber: 5
      //DEBUG: s.TokType: 23
      //DEBUG: e.Scanned: 24
      //DEBUG: e.0: 26
      //DEBUG: e.Tail: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.TokType/23 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: s.LineNumber/5 AsIs: (/9 AsIs: e.Scanned/24 HalfReuse: (/10 HalfReuse: s.TokType23 /15 } s.LineNumber/5/30 Tile{ AsIs: e.0/26 } )/31 Tile{ AsIs: )/16 AsIs: e.Tail/28 AsIs: >/1 ]] }
      refalrts::copy_stvar(vm, context[30], context[5]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_svar( context[15], context[23] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[16] );
      refalrts::link_brackets( context[10], context[31] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::splice_to_freelist_open( vm, context[15], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & AddLineNumber*3/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_AddLineNumber_D3]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & AddLineNumber@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_AddLineNumber_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_Fetch_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Fetch@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@2/4 t./7 e./5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e. as range 5
    //DEBUG: t.: 7
    //DEBUG: e.: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t./7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CollectNativeLines/4 } Tile{ AsIs: e./5 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_CollectNativeLines]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@2/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 & Fetch@3/8 Tile{ AsIs: </0 Reuse: & DelAccumulator*1/4 AsIs: e.Argument/5 AsIs: >/1 } >/9 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[8], functions[efunc_gen_Fetch_Z3]);
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_gen_DelAccumulator_D1]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@2/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: [*]/1 } & Pipe$2\1@0/5 & DelAccumulator@0/6 (/7 & CollectNativeLines@0/8 )/9 {*}/10 >/11 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_gen_Pipe_S2L1Z0]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DelAccumulator_Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_CollectNativeLines_Z0]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_unwrapped_closure(vm, context[10], context[1]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_closure_head(context[1]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[10] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z2("Fetch@2", COOKIE1_, COOKIE2_, func_gen_Fetch_Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & AddLineNumber@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_AddLineNumber_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_Fetch_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@3/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CollectNativeLines/4 AsIs: e.Argument/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_CollectNativeLines]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@3/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: & CollectNativeLines@0/1 } >/5 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[5]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_name(context[1], functions[efunc_gen_CollectNativeLines_Z0]);
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z3("Fetch@3", COOKIE1_, COOKIE2_, func_gen_Fetch_Z3);


//End of file
