// This file automatically generated from 'OptTree-Spec.ref'
// Don't edit! Edit 'OptTree-Spec.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_529868761_884624408
#define COOKIE1_ 529868761U
#define COOKIE2_ 884624408U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_Preparem_Aux = 18,
  efunc_gen_Fetch_Z1 = 19,
  efunc_gen_Preparem_Aux_A1L1Z1 = 20,
  efunc_gen_Preparem_Aux_A1Z1 = 21,
  efunc_gen_Map_Z4 = 22,
  efunc_gen_Preparem_Aux_A4 = 23,
  efunc_gen_Map_Z1 = 24,
  efunc_gen_Preparem_Aux_A3 = 25,
  efunc_gen_Preparem_Aux_A2 = 26,
  efunc_gen_Map_Z2 = 27,
  efunc_gen_Preparem_Aux_A1L1S1C1 = 28,
  efunc_gen_Map_Z3 = 29,
  efunc_ExtractVariablesm_Expr = 30,
  efunc_Logm_PutLine = 31,
  efunc_DisplayName = 32,
  efunc_Logm_InlineExpr = 33,
  efunc_gen_TrivialHistory_A1 = 34,
  efunc_AddSuffix = 35,
  efunc_gen_Preparem_Aux_A1L1S2A1D1 = 36,
  efunc_gen_Preparem_Aux_A1 = 37,
  efunc_gen_Preparem_Aux_A1L1 = 38,
  efunc_gen_TrivialHistory_A1L1S1C1 = 39,
  efunc_IsSpecStaticVar = 40,
  efunc_CreateRemainderFunctionsm_OneFunction = 41,
  efunc_gen_Drop_D1 = 42,
  efunc_gen_CreateRemainderFunctionsm_OneFunction_S2A1Z1 = 43,
  efunc_gen_CreateRemainderFunctionsm_OneFunction_Z1 = 44,
  efunc_gen_CreateRemainderFunctionsm_OneFunction_S2A1 = 45,
  efunc_gen_Map_Z5 = 46,
  efunc_gen_Map_Z6 = 47,
  efunc_gen_DoMapAccum_Z1 = 48,
  efunc_gen_OptTreem_Spec_S2A1 = 49,
  efunc_gen_Map_Z8 = 50,
  efunc_gen_Map_Z7 = 51,
  efunc_gen_PrintSignatureItem_D1 = 52,
  efunc_gen_SpecUnit_S1A1 = 53,
  efunc_gen_DoMapAccum_Z2 = 54,
  efunc_gen_SpecUnit_S2A1 = 55,
  efunc_gen_SpecResult_A1 = 56,
  efunc_gen_SpecSentence_A2 = 57,
  efunc_gen_DoMapAccum_Z3 = 58,
  efunc_gen_SpecSentence_A1 = 59,
  efunc_gen_DoMapAccum_Z4 = 60,
  efunc_gen_DoMapAccum_Z5 = 61,
  efunc_gen_DoMapAccum_Z6 = 62,
  efunc_TrySpecCall = 63,
  efunc_gen_SpecTerm_S2A2 = 64,
  efunc_gen_SpecTerm_S2A2B1D2 = 65,
  efunc_gen_SpecTerm_S4A3 = 66,
  efunc_gen_SpecTerm_S4A2 = 67,
  efunc_gen_SpecTerm_S4A2B1D2 = 68,
  efunc_gen_SpecTerm_S1C1 = 69,
  efunc_ReplaceToGuards = 70,
  efunc_gen_SpecTerm_S2A1 = 71,
  efunc_gen_SpecTerm_S3A1 = 72,
  efunc_gen_SpecTerm_S4A1 = 73,
  efunc_gen_SpecTerm_S5A1 = 74,
  efunc_gen_SpecTerm_S6A1 = 75,
  efunc_gen_ReplaceToGuards_L1S1C1 = 76,
  efunc_gen_Map_Z9 = 77,
  efunc_gen_TrySpecCall_S1A1 = 78,
  efunc_SpecCall = 79,
  efunc_SpecCallm_Matches = 80,
  efunc_gen_SpecCall_S1C1 = 81,
  efunc_GenericMatchm_Wrapper = 82,
  efunc_gen_SpecCall_S1A2 = 83,
  efunc_gen_SpecCallm_Matches_S1C1 = 84,
  efunc_ExtractCalls = 85,
  efunc_gen_SpecCallm_Matches_S1C2 = 86,
  efunc_PrepareSignature = 87,
  efunc_gen_SpecCallm_Matches_S1C3 = 88,
  efunc_IsTrivialSubstitutions = 89,
  efunc_SpecCallm_Aux = 90,
  efunc_gen_SpecCallm_Aux_B1S2B1S2B1S1A1 = 91,
  efunc_gen_IsSoundBody_B1 = 92,
  efunc_gen_Map_Z10 = 93,
  efunc_gen_SpecCallm_Aux_B1S2B1S2B1 = 94,
  efunc_gen_MakeGeneralization_A1 = 95,
  efunc_GetSignaturesGeneralization = 96,
  efunc_gen_PrepareSpecializedFuncBody_A1 = 97,
  efunc_ExtractVariables = 98,
  efunc_gen_SpecCallm_Aux_B1S2B1S2A1 = 99,
  efunc_OptTreem_CanonizeTuple = 100,
  efunc_gen_SpecCallm_Aux_B1S2A1 = 101,
  efunc_HasHigmanKruskalRelation = 102,
  efunc_gen_SpecCallm_Aux_B1S2A1B1D2 = 103,
  efunc_Specm_FindInSignatures = 104,
  efunc_gen_SpecCallm_Aux_B1 = 105,
  efunc_gen_Map_Z11 = 106,
  efunc_gen_SpecCallm_Aux_A2 = 107,
  efunc_gen_SpecCallm_Aux_A1 = 108,
  efunc_gen_PrepareArgOrPattern_A1 = 109,
  efunc_gen_DoMapAccum_Z8 = 110,
  efunc_gen_ExtractCalls_A2 = 111,
  efunc_gen_ExtractCalls_A1 = 112,
  efunc_gen_Map_Z12 = 113,
  efunc_gen_DoMapAccum_Z7 = 114,
  efunc_NewVarName = 115,
  efunc_gen_ExtractCallsm_Term_S1A1 = 116,
  efunc_gen_ExtractCallsm_Term_S2A1 = 117,
  efunc_gen_ExtractCallsm_Term_S3A1 = 118,
  efunc_gen_Map_Z14 = 119,
  efunc_gen_DoMapAccum_Z9 = 120,
  efunc_gen_RenameSignatureVars_A3 = 121,
  efunc_gen_PrepareSignature_A2 = 122,
  efunc_gen_PrepareSignaturem_SortVars_A1 = 123,
  efunc_gen_DoMapAccum_Z10 = 124,
  efunc_gen_PrepareSignature_A1 = 125,
  efunc_gen_DoMapAccum_Z11 = 126,
  efunc_gen_RenameSignatureVarsm_Term_S1C1 = 127,
  efunc_gen_RenameSignatureVarsm_Term_S2A1 = 128,
  efunc_Symb = 129,
  efunc_gen_RenameSignatureVarsm_Term_S3C1 = 130,
  efunc_OneOf = 131,
  efunc_gen_RenameSignatureVarsm_Term_S3A2 = 132,
  efunc_RenameSignatureVarsm_Expr = 133,
  efunc_gen_RenameSignatureVarsm_Term_S4A1 = 134,
  efunc_gen_Map_Z15 = 135,
  efunc_gen_ApplySubstm_Expr_L1S1C1 = 136,
  efunc_gen_Reduce_Z1 = 137,
  efunc_RemoveLastGhostBracket = 138,
  efunc_gen_PrepareArgOrPattern_A2L1S1L1S1C1 = 139,
  efunc_gen_PrepareArgOrPattern_A2L1S1C1 = 140,
  efunc_gen_MapAccum_Z1 = 141,
  efunc_gen_PrepareArgOrPattern_A2L1S2C1 = 142,
  efunc_WrapVar = 143,
  efunc_gen_PrepareArgOrPattern_A2 = 144,
  efunc_gen_DoMapAccum_Z12 = 145,
  efunc_gen_Map_Z16 = 146,
  efunc_gen_DoMapAccum_Z13 = 147,
  efunc_gen_RenameGenericMatch_A3 = 148,
  efunc_Unique = 149,
  efunc_gen_RenameGenericMatch_A2 = 150,
  efunc_gen_Map_Z17 = 151,
  efunc_gen_RenameGenericMatch_A1 = 152,
  efunc_gen_Map_Z18 = 153,
  efunc_gen_PrepareSpecializedFuncBody_A2 = 154,
  efunc_gen_PrepareSpecSentence_A6 = 155,
  efunc_gen_PrepareSpecSentence_A5 = 156,
  efunc_gen_Map_Z19 = 157,
  efunc_gen_PrepareSpecSentence_A4 = 158,
  efunc_gen_PrepareSpecSentence_A3 = 159,
  efunc_gen_MapGenericMatches_A1 = 160,
  efunc_gen_Reduce_Z2 = 161,
  efunc_gen_PrepareSpecSentence_A2 = 162,
  efunc_gen_GenericMatchm_Wrapper_B1 = 163,
  efunc_GenericMatch = 164,
  efunc_gen_PrepareSpecSentence_A1 = 165,
  efunc_gen_GenericMatchm_Wrapper_B1S1A1L1S1C1 = 166,
  efunc_gen_GenericMatchm_Wrapper_B1S1A1L1S1C2 = 167,
  efunc_gen_DoMapAccum_Z14 = 168,
  efunc_gen_GenericMatchm_Wrapper_B1S1A1 = 169,
  efunc_Type = 170,
  efunc_gen_IsSpecStaticVar_B1 = 171,
  efunc_gen_HasHigmanKruskalRelation_S1C1 = 172,
  efunc_SourceNameOfInstance = 173,
  efunc_gen_HasHigmanKruskalRelation_S1C2 = 174,
  efunc_OptTreem_CheckTupleStopRelation = 175,
  efunc_gen_MakeGeneralization_A10 = 176,
  efunc_gen_MakeGeneralization_A9 = 177,
  efunc_gen_MakeGeneralization_A8 = 178,
  efunc_gen_MakeGeneralization_A7B1 = 179,
  efunc_gen_MakeGeneralization_A7 = 180,
  efunc_GetRealSubst = 181,
  efunc_gen_MakeGeneralization_A6 = 182,
  efunc_GetSignaturesGeneralizationMatches = 183,
  efunc_gen_MakeGeneralization_A5 = 184,
  efunc_gen_MakeGeneralization_A4 = 185,
  efunc_gen_NameSignatureVars_A1 = 186,
  efunc_gen_DoMapAccum_Z15 = 187,
  efunc_gen_MakeGeneralization_A3 = 188,
  efunc_gen_MakeGeneralization_A2 = 189,
  efunc_gen_DoMapAccum_Z16 = 190,
  efunc_gen_NameSignatureVarsm_Term_S1A1 = 191,
  efunc_gen_NameSignatureVarsm_Term_S2C1 = 192,
  efunc_gen_NameSignatureVarsm_Term_S2A2 = 193,
  efunc_NameSignatureVarsm_Expr = 194,
  efunc_gen_NameSignatureVarsm_Term_S3A1 = 195,
  efunc_GlobalGen = 196,
  efunc_gen_GetSignaturesGeneralizationMatches_S1B1S1C1 = 197,
  efunc_gen_GetSignaturesGeneralizationMatches_S1B1Z1 = 198,
  efunc_gen_GetSignaturesGeneralizationMatches_S1B1 = 199,
  efunc_gen_IsSpecStaticVar_D1 = 200,
  efunc_gen_GetRealSubst_S1B1 = 201,
  efunc_Mu = 202,
  efunc_Up = 203,
  efunc_Evm_met = 204,
  efunc_Residue = 205,
  efunc_u_u_Metau_Residue = 206,
  efunc_MapAccum = 207,
  efunc_UnBracket = 208,
  efunc_DelAccumulator = 209,
  efunc_Inc = 210,
  efunc_Dec = 211,
  efunc_OptTreem_Specm_Prepare = 212,
  efunc_TrivialHistory = 213,
  efunc_AddGuardSentences = 214,
  efunc_AddGuardEnums = 215,
  efunc_GuardEnumName = 216,
  efunc_MakeGuardEnum = 217,
  efunc_CreateRemainderFunctions = 218,
  efunc_Drop = 219,
  efunc_OptTreem_Spec = 220,
  efunc_ColdAll = 221,
  efunc_PrintHistories = 222,
  efunc_PrintHistory = 223,
  efunc_PrintSignature = 224,
  efunc_PrintSignatureItem = 225,
  efunc_SpecUnit = 226,
  efunc_SpecSentence = 227,
  efunc_SpecResult = 228,
  efunc_SpecResultm_Pass = 229,
  efunc_SpecTerm = 230,
  efunc_SkipSpecCall = 231,
  efunc_ExtractCallsm_Expr = 232,
  efunc_ExtractCallsm_Term = 233,
  efunc_IsSoundBody = 234,
  efunc_FindClosuresInPatternsm_Body = 235,
  efunc_FindClosuresInPatternsm_Pattern = 236,
  efunc_FindClosuresInPatternsm_Term = 237,
  efunc_PrepareSignaturem_SortVars = 238,
  efunc_RenameSignatureVars = 239,
  efunc_RenameSignatureVarsm_Term = 240,
  efunc_ApplySubstm_Subst = 241,
  efunc_ApplySubstm_Expr = 242,
  efunc_PrepareArgOrPattern = 243,
  efunc_RenameGenericMatch = 244,
  efunc_PrepareSpecializedFuncBody = 245,
  efunc_PrepareSpecSentence = 246,
  efunc_PrepareSpecConditions = 247,
  efunc_MapGenericMatches = 248,
  efunc_MakeGeneralization = 249,
  efunc_NameSignatureVars = 250,
  efunc_NameSignatureVarsm_Term = 251,
  efunc_gen_Apply_Z4 = 252,
  efunc_gen_Map_Z0 = 253,
  efunc_gen_AddGuardEnums_L1Z0 = 254,
  efunc_gen_AddGuardSentences_L1A1 = 255,
  efunc_gen_AddGuardSentences_L1D1 = 256,
  efunc_gen_AddGuardSentences_L1Z0 = 257,
  efunc_gen_TrivialHistory_A1L1 = 258,
  efunc_gen_TrivialHistory_A1L1Z0 = 259,
  efunc_gen_CreateRemainderFunctionsm_OneFunction_Z0 = 260,
  efunc_gen_ColdAll_L1Z0 = 261,
  efunc_gen_PrintHistory_D1 = 262,
  efunc_gen_PrintHistory_Z0 = 263,
  efunc_gen_DoMapAccum_S1A1Z1 = 264,
  efunc_gen_DoMapAccum_Z0 = 265,
  efunc_gen_SpecUnit_Z0 = 266,
  efunc_gen_PrintSignature_S2L1Z0 = 267,
  efunc_gen_PrintSignature_D2 = 268,
  efunc_gen_PrintHistory_L1D1 = 269,
  efunc_gen_PrintHistory_L1Z0 = 270,
  efunc_gen_DoMapAccum_S1A1Z2 = 271,
  efunc_gen_SpecSentence_D1 = 272,
  efunc_gen_SpecSentence_Z0 = 273,
  efunc_gen_SpecTerm_Z1 = 274,
  efunc_gen_DoMapAccum_S1A1Z3 = 275,
  efunc_gen_SpecResultm_Pass_L1D1 = 276,
  efunc_gen_SpecResultm_Pass_L1Z0 = 277,
  efunc_gen_DoMapAccum_S1A1Z4 = 278,
  efunc_gen_SpecSentence_A1L1A1 = 279,
  efunc_gen_SpecSentence_A1L1D1 = 280,
  efunc_gen_SpecSentence_A1L1Z0 = 281,
  efunc_gen_SpecTerm_Z2 = 282,
  efunc_gen_DoMapAccum_S1A1Z5 = 283,
  efunc_gen_DoMapAccum_S1A1Z6 = 284,
  efunc_gen_ReplaceToGuards_L1 = 285,
  efunc_gen_ReplaceToGuards_L1Z0 = 286,
  efunc_gen_FindClosuresInPatternsm_Pattern_Z1 = 287,
  efunc_gen_Map_Z13 = 288,
  efunc_gen_FindClosuresInPatternsm_Body_L1D1 = 289,
  efunc_gen_FindClosuresInPatternsm_Body_L1Z0 = 290,
  efunc_gen_ApplySubstm_Expr_L1 = 291,
  efunc_gen_ApplySubstm_Expr_L1Z0 = 292,
  efunc_gen_DoMapAccum_S1A1Z7 = 293,
  efunc_gen_ExtractCallsm_Term_D4 = 294,
  efunc_gen_ExtractCallsm_Term_Z0 = 295,
  efunc_gen_DoMapAccum_S1A1Z8 = 296,
  efunc_gen_ExtractCalls_A2L1A1 = 297,
  efunc_gen_ExtractCalls_A2L1D1 = 298,
  efunc_gen_ExtractCalls_A2L1Z0 = 299,
  efunc_gen_ExtractCalls_A1L1D1 = 300,
  efunc_gen_ExtractCalls_A1L1Z0 = 301,
  efunc_gen_FindClosuresInPatternsm_Body_L1L1D1 = 302,
  efunc_gen_FindClosuresInPatternsm_Body_L1L1Z0 = 303,
  efunc_gen_FindClosuresInPatternsm_Pattern_Z0 = 304,
  efunc_gen_FindClosuresInPatternsm_Term_D5 = 305,
  efunc_gen_FindClosuresInPatternsm_Term_Z0 = 306,
  efunc_gen_DoMapAccum_S1A1Z9 = 307,
  efunc_gen_RenameSignatureVars_A3L1A1 = 308,
  efunc_gen_RenameSignatureVars_A3L1D1 = 309,
  efunc_gen_RenameSignatureVars_A3L1Z0 = 310,
  efunc_gen_PrepareSignaturem_SortVars_A1L1 = 311,
  efunc_gen_DoMapAccum_S1A1Z10 = 312,
  efunc_gen_PrepareSignaturem_SortVars_A1L1Z0 = 313,
  efunc_gen_DoMapAccum_S1A1Z11 = 314,
  efunc_gen_RenameSignatureVarsm_Term_Z0 = 315,
  efunc_gen_ApplySubstm_Subst_L1D1 = 316,
  efunc_gen_ApplySubstm_Subst_L1Z0 = 317,
  efunc_gen_Reduce_S1A1Z1 = 318,
  efunc_gen_IsTrivialSubstitutions_L1D4 = 319,
  efunc_gen_Reduce_Z0 = 320,
  efunc_gen_IsTrivialSubstitutions_L1Z0 = 321,
  efunc_gen_DoMapAccum_Z17 = 322,
  efunc_gen_MapAccum_Z0 = 323,
  efunc_gen_PrepareArgOrPattern_A2L1S1L1Z0 = 324,
  efunc_gen_PrepareArgOrPattern_A2L1 = 325,
  efunc_gen_DoMapAccum_S1A1Z12 = 326,
  efunc_gen_PrepareArgOrPattern_A2L1Z0 = 327,
  efunc_gen_RemoveLastGhostBracket_S1L1Z0 = 328,
  efunc_gen_DoMapAccum_S1A1Z13 = 329,
  efunc_gen_RenameGenericMatch_A3L1A1 = 330,
  efunc_gen_RenameGenericMatch_A3L1D1 = 331,
  efunc_gen_RenameGenericMatch_A3L1Z0 = 332,
  efunc_gen_RenameGenericMatch_A1L1D1 = 333,
  efunc_gen_RenameGenericMatch_A1L1Z0 = 334,
  efunc_gen_PrepareSpecSentence_D1 = 335,
  efunc_gen_PrepareSpecSentence_Z0 = 336,
  efunc_gen_PrepareSpecConditions_L1D1 = 337,
  efunc_gen_PrepareSpecConditions_L1Z0 = 338,
  efunc_gen_Reduce_S1A1Z2 = 339,
  efunc_gen_MapGenericMatches_A1L1 = 340,
  efunc_gen_MapGenericMatches_A1L1Z0 = 341,
  efunc_gen_GenericMatchm_Wrapper_B1S1A1L1 = 342,
  efunc_gen_DoMapAccum_S1A1Z14 = 343,
  efunc_gen_GenericMatchm_Wrapper_B1S1A1L1Z0 = 344,
  efunc_gen_DoMapAccum_S1A1Z15 = 345,
  efunc_gen_NameSignatureVars_A1L1A1 = 346,
  efunc_gen_NameSignatureVars_A1L1D1 = 347,
  efunc_gen_NameSignatureVars_A1L1Z0 = 348,
  efunc_gen_DoMapAccum_S1A1Z16 = 349,
  efunc_gen_NameSignatureVarsm_Term_D1 = 350,
  efunc_gen_NameSignatureVarsm_Term_Z0 = 351,
  efunc_gen_GetSignaturesGeneralizationMatches_S1B1Z1S1C1 = 352,
  efunc_gen_GetSignaturesGeneralizationMatches_S1B1Z0 = 353,
  efunc_gen_NameSignatureVarsm_Term_D1S2C1 = 354,
  efunc_gen_Preparem_Aux_A2Z1 = 355,
  efunc_gen_Preparem_Aux_A1Z0 = 356,
  efunc_gen_Preparem_Aux_A1L2 = 357,
  efunc_gen_Preparem_Aux_A1L2Z0 = 358,
  efunc_gen_Fetch_Z0 = 359,
  efunc_gen_CreateRemainderFunctionsm_OneFunction_S2A1Z0 = 360,
  efunc_gen_DoMapAccum_S1A1Z0 = 361,
  efunc_gen_SpecTerm_Z1S1C1 = 362,
  efunc_gen_SpecTerm_S2A1Z1 = 363,
  efunc_gen_SpecTerm_S4A1Z1 = 364,
  efunc_gen_SpecTerm_Z0 = 365,
  efunc_gen_SpecTerm_Z2S1C1 = 366,
  efunc_gen_SpecTerm_S2A1Z2 = 367,
  efunc_gen_SpecTerm_S4A1Z2 = 368,
  efunc_gen_Reduce_S1A1Z0 = 369,
  efunc_gen_PrepareArgOrPattern_A2L1S1L1 = 370,
  efunc_gen_DoMapAccum_S1A1Z17 = 371,
  efunc_gen_Preparem_Aux_A1L1Z1S1C1 = 372,
  efunc_gen_Preparem_Aux_A1L1Z0 = 373,
  efunc_gen_Preparem_Aux_A3Z1 = 374,
  efunc_gen_Preparem_Aux_A2Z0 = 375,
  efunc_gen_SpecTerm_S2A1Z0 = 376,
  efunc_gen_SpecTerm_S4A1Z0 = 377,
  efunc_gen_Preparem_Aux_A4Z1 = 378,
  efunc_gen_Preparem_Aux_A3Z0 = 379,
  efunc_gen_Preparem_Aux_A4Z0 = 380,
};


enum ident {
  ident_NoOpt = 0,
  ident_OptSpec = 1,
  ident_SpecInfo = 2,
  ident_Spec = 3,
  ident_Function = 4,
  ident_Sentences = 5,
  ident_True = 6,
  ident_Var = 7,
  ident_CallBrackets = 8,
  ident_Symbol = 9,
  ident_Name = 10,
  ident_GNm_Local = 11,
  ident_ColdFunction = 12,
  ident_SPEC = 13,
  ident_Condition = 14,
  ident_Functions = 15,
  ident_Closures = 16,
  ident_ClosureBrackets = 17,
  ident_Brackets = 18,
  ident_ADTm_Brackets = 19,
  ident_Clear = 20,
  ident_False = 21,
  ident_Found = 22,
  ident_NotFound = 23,
  ident_GhostBrackets = 24,
  ident_SUF = 25,
  ident_Mu = 26,
  ident_Up = 27,
  ident_Evm_met = 28,
  ident_Residue = 29,
  ident_u_u_Metau_Residue = 30,
  ident_Apply = 31,
  ident_Map = 32,
  ident_Reduce = 33,
  ident_Fetch = 34,
  ident_MapAccum = 35,
  ident_DoMapAccum = 36,
  ident_UnBracket = 37,
  ident_DelAccumulator = 38,
  ident_Inc = 39,
  ident_Dec = 40,
  ident_Pipe = 41,
  ident_OptTreem_Specm_Prepare = 42,
  ident_Preparem_Aux = 43,
  ident_TrivialHistory = 44,
  ident_AddGuardSentences = 45,
  ident_AddGuardEnums = 46,
  ident_GuardEnumName = 47,
  ident_MakeGuardEnum = 48,
  ident_CreateRemainderFunctions = 49,
  ident_CreateRemainderFunctionsm_OneFunction = 50,
  ident_Drop = 51,
  ident_OptTreem_Spec = 52,
  ident_ColdAll = 53,
  ident_PrintHistories = 54,
  ident_PrintHistory = 55,
  ident_PrintSignature = 56,
  ident_PrintSignatureItem = 57,
  ident_SpecUnit = 58,
  ident_SpecSentence = 59,
  ident_SpecResult = 60,
  ident_SpecResultm_Pass = 61,
  ident_SpecTerm = 62,
  ident_ReplaceToGuards = 63,
  ident_TrySpecCall = 64,
  ident_SkipSpecCall = 65,
  ident_SpecCall = 66,
  ident_SpecCallm_Matches = 67,
  ident_SpecCallm_Aux = 68,
  ident_ExtractCalls = 69,
  ident_ExtractCallsm_Expr = 70,
  ident_ExtractCallsm_Term = 71,
  ident_IsSoundBody = 72,
  ident_FindClosuresInPatternsm_Body = 73,
  ident_FindClosuresInPatternsm_Pattern = 74,
  ident_FindClosuresInPatternsm_Term = 75,
  ident_PrepareSignature = 76,
  ident_PrepareSignaturem_SortVars = 77,
  ident_RenameSignatureVars = 78,
  ident_RenameSignatureVarsm_Expr = 79,
  ident_RenameSignatureVarsm_Term = 80,
  ident_ApplySubstm_Subst = 81,
  ident_ApplySubstm_Expr = 82,
  ident_Specm_FindInSignatures = 83,
  ident_IsTrivialSubstitutions = 84,
  ident_PrepareArgOrPattern = 85,
  ident_WrapVar = 86,
  ident_RemoveLastGhostBracket = 87,
  ident_RenameGenericMatch = 88,
  ident_PrepareSpecializedFuncBody = 89,
  ident_PrepareSpecSentence = 90,
  ident_PrepareSpecConditions = 91,
  ident_GenericMatchm_Wrapper = 92,
  ident_IsSpecStaticVar = 93,
  ident_MapGenericMatches = 94,
  ident_HasHigmanKruskalRelation = 95,
  ident_SourceNameOfInstance = 96,
  ident_MakeGeneralization = 97,
  ident_NameSignatureVars = 98,
  ident_NameSignatureVarsm_Expr = 99,
  ident_NameSignatureVarsm_Term = 100,
  ident_GetSignaturesGeneralization = 101,
  ident_GetSignaturesGeneralizationMatches = 102,
  ident_GetRealSubst = 103,
  ident_Declaration = 104,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_OptTreem_Specm_Prepare(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & OptTree-Spec-Prepare/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptTree-Spec-Prepare/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & OptTree-Spec-Prepare/4 # NoOpt/5 e.AST/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[5] ) )
      continue;
    // closed e.AST as range 6
    //DEBUG: e.AST: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptTree-Spec-Prepare/4 # NoOpt/5 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.AST/6 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptTree-Spec-Prepare/4 # OptSpec/5 e.new3/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_OptSpec], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & OptTree-Spec-Prepare/4 # OptSpec/5 e.AST-B/8 (/14 # SpecInfo/16 e.SpecInfo/12 )/15 e.AST-E/10 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      context[14] = refalrts::brackets_left( context[12], context[13], context[10], context[11] );
      if( ! context[14] )
        continue;
      refalrts::bracket_pointers(context[14], context[15]);
      context[16] = refalrts::ident_left( identifiers[ident_SpecInfo], context[12], context[13] );
      if( ! context[16] )
        continue;
      // closed e.SpecInfo as range 12
      // closed e.AST-E as range 10
      //DEBUG: e.AST-B: 8
      //DEBUG: e.SpecInfo: 12
      //DEBUG: e.AST-E: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 # SpecInfo/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prepare-Aux/4 HalfReuse: (/5 } Tile{ AsIs: e.SpecInfo/12 } Tile{ AsIs: )/15 } Tile{ AsIs: e.AST-B/8 } Tile{ AsIs: e.AST-E/10 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Preparem_Aux]);
      refalrts::reinit_open_bracket(context[5]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptTree-Spec-Prepare/4 # OptSpec/5 e.AST/2 >/1
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prepare-Aux=1@1/4 HalfReuse: </5 } & Fetch@1/6 </7 & DoMapAccum/8 & Prepare-Aux=1\1@1/9 (/10 (/11 )/12 (/13 )/14 )/15 (/16 )/17 Tile{ AsIs: e.AST/2 } >/18 >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Fetch_Z1]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_DoMapAccum]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_Preparem_Aux_A1L1Z1]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_Preparem_Aux_A1Z1]);
  refalrts::reinit_open_call(context[5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[10], context[15] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptTreem_Specm_Prepare("OptTree-Spec-Prepare", 0U, 0U, func_OptTreem_Specm_Prepare);


static refalrts::FnResult func_gen_Preparem_Aux_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Prepare-Aux=4/4 (/7 e.KnownNames/5 )/8 (/11 e.NewNames/9 )/12 (/15 e.KnownInfo/13 )/16 (/19 e.KnownHistories/17 )/20 (/23 e.NewHistories/21 )/24 (/27 e.AST$b/25 )/28 e.NewInfo$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownNames as range 5
  // closed e.NewNames as range 9
  // closed e.KnownInfo as range 13
  // closed e.KnownHistories as range 17
  // closed e.NewHistories as range 21
  // closed e.AST$b as range 25
  // closed e.NewInfo$b as range 2
  //DEBUG: e.KnownNames: 5
  //DEBUG: e.NewNames: 9
  //DEBUG: e.KnownInfo: 13
  //DEBUG: e.KnownHistories: 17
  //DEBUG: e.NewHistories: 21
  //DEBUG: e.AST$b: 25
  //DEBUG: e.NewInfo$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/28 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # SpecInfo/4 AsIs: (/7 } Tile{ AsIs: e.KnownNames/5 } Tile{ AsIs: e.NewNames/9 } Tile{ AsIs: )/20 } Tile{ AsIs: e.KnownInfo/13 } Tile{ AsIs: e.NewInfo$b/2 } Tile{ AsIs: (/23 } Tile{ AsIs: e.KnownHistories/17 } Tile{ AsIs: e.NewHistories/21 } Tile{ AsIs: )/24 HalfReuse: )/27 } Tile{ AsIs: e.AST$b/25 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_SpecInfo]);
  refalrts::reinit_close_bracket(context[27]);
  refalrts::link_brackets( context[0], context[27] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[7], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A4("Prepare-Aux=4", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A4);


static refalrts::FnResult func_gen_Preparem_Aux_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Prepare-Aux=3/4 (/7 e.KnownNames/5 )/8 (/11 e.NewNames/9 )/12 (/15 e.KnownInfo/13 )/16 (/19 e.KnownHistories/17 )/20 (/23 e.NewHistories/21 )/24 (/27 e.NewInfo$a/25 )/28 e.AST$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownNames as range 5
  // closed e.NewNames as range 9
  // closed e.KnownInfo as range 13
  // closed e.KnownHistories as range 17
  // closed e.NewHistories as range 21
  // closed e.NewInfo$a as range 25
  // closed e.AST$b as range 2
  //DEBUG: e.KnownNames: 5
  //DEBUG: e.NewNames: 9
  //DEBUG: e.KnownInfo: 13
  //DEBUG: e.KnownHistories: 17
  //DEBUG: e.NewHistories: 21
  //DEBUG: e.NewInfo$a: 25
  //DEBUG: e.AST$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prepare-Aux=4/4 AsIs: (/7 AsIs: e.KnownNames/5 AsIs: )/8 AsIs: (/11 AsIs: e.NewNames/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownInfo/13 AsIs: )/16 AsIs: (/19 AsIs: e.KnownHistories/17 AsIs: )/20 AsIs: (/23 AsIs: e.NewHistories/21 AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.AST$b/2 } Tile{ AsIs: )/28 } </29 & Map@4/30 Tile{ AsIs: e.NewInfo$a/25 } >/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_Map_Z4]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_Preparem_Aux_A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A3("Prepare-Aux=3", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A3);


static refalrts::FnResult func_gen_Preparem_Aux_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Prepare-Aux=2/4 (/7 e.KnownNames/5 )/8 (/11 e.NewNames/9 )/12 (/15 e.KnownInfo/13 )/16 (/19 e.KnownHistories/17 )/20 (/23 e.NewHistories/21 )/24 (/27 e.AST$a/25 )/28 e.NewInfo$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownNames as range 5
  // closed e.NewNames as range 9
  // closed e.KnownInfo as range 13
  // closed e.KnownHistories as range 17
  // closed e.NewHistories as range 21
  // closed e.AST$a as range 25
  // closed e.NewInfo$a as range 2
  //DEBUG: e.KnownNames: 5
  //DEBUG: e.NewNames: 9
  //DEBUG: e.KnownInfo: 13
  //DEBUG: e.KnownHistories: 17
  //DEBUG: e.NewHistories: 21
  //DEBUG: e.AST$a: 25
  //DEBUG: e.NewInfo$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prepare-Aux=3/4 AsIs: (/7 AsIs: e.KnownNames/5 AsIs: )/8 AsIs: (/11 AsIs: e.NewNames/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownInfo/13 AsIs: )/16 AsIs: (/19 AsIs: e.KnownHistories/17 AsIs: )/20 AsIs: (/23 AsIs: e.NewHistories/21 AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.NewInfo$a/2 } Tile{ AsIs: )/28 } </29 & Map@1/30 Tile{ AsIs: e.AST$a/25 } >/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_Map_Z1]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_Preparem_Aux_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A2("Prepare-Aux=2", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A2);


static refalrts::FnResult func_gen_Preparem_Aux_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Prepare-Aux=1/4 (/7 e.KnownNames/5 )/8 (/11 e.KnownInfo/9 )/12 (/15 e.KnownHistories/13 )/16 (/19 (/23 e.NewNames/21 )/24 e.NewInfo/17 (/27 e.NewHistories/25 )/28 )/20 e.AST$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[17], context[18] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[17], context[18] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownNames as range 5
  // closed e.KnownInfo as range 9
  // closed e.KnownHistories as range 13
  // closed e.NewNames as range 21
  // closed e.NewInfo as range 17
  // closed e.NewHistories as range 25
  // closed e.AST$a as range 2
  //DEBUG: e.KnownNames: 5
  //DEBUG: e.KnownInfo: 9
  //DEBUG: e.KnownHistories: 13
  //DEBUG: e.NewNames: 21
  //DEBUG: e.NewInfo: 17
  //DEBUG: e.NewHistories: 25
  //DEBUG: e.AST$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prepare-Aux=2/4 AsIs: (/7 } Tile{ AsIs: e.KnownNames/5 } )/29 Tile{ AsIs: (/23 } Tile{ AsIs: e.NewNames/21 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.KnownInfo/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownHistories/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.NewHistories/25 } Tile{ AsIs: )/28 HalfReuse: (/20 AsIs: e.AST$a/2 HalfReuse: )/1 } </30 Tile{ HalfReuse: & Map@2/24 AsIs: e.NewInfo/17 HalfReuse: >/27 } >/31 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_Preparem_Aux_A2]);
  refalrts::reinit_open_bracket(context[20]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::reinit_name(context[24], functions[efunc_gen_Map_Z2]);
  refalrts::reinit_close_call(context[27]);
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[30] );
  refalrts::link_brackets( context[20], context[1] );
  refalrts::link_brackets( context[19], context[28] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[23], context[8] );
  refalrts::link_brackets( context[7], context[29] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[28], context[1] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[8], context[19] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A1("Prepare-Aux=1", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A1);


static refalrts::FnResult func_gen_Preparem_Aux_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 90 elems
  refalrts::Iter context[90];
  refalrts::zeros( context, 90 );
  // </0 & Prepare-Aux=1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Prepare-Aux=1\1/4 (/7 e.new1/5 )/8 (/11 (/15 e.new2/13 )/16 e.new3/9 (/19 e.new4/17 )/20 )/12 t.new5/21 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[9], context[10] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 13
  // closed e.new3 as range 9
  // closed e.new4 as range 17
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Prepare-Aux=1\1/4 (/7 e.new8/23 )/8 (/11 (/15 e.new10/25 )/16 e.new9/27 (/19 e.new11/29 )/20 )/12 (/21 # Spec/33 t.new6/34 e.new7/31 )/22 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = 0;
    context[32] = 0;
    if( ! refalrts::brackets_term( context[31], context[32], context[21] ) )
      continue;
    context[33] = refalrts::ident_left( identifiers[ident_Spec], context[31], context[32] );
    if( ! context[33] )
      continue;
    // closed e.new8 as range 23
    // closed e.new10 as range 25
    // closed e.new9 as range 27
    // closed e.new11 as range 29
    context[35] = refalrts::tvar_left( context[34], context[31], context[32] );
    if( ! context[35] )
      continue;
    // closed e.new7 as range 31
    do {
      // </0 & Prepare-Aux=1\1/4 (/7 e.KnownNames/36 )/8 (/11 (/15 e.Names/38 )/16 e.Info/40 (/19 e.Histories/42 )/20 )/12 (/21 # Spec/33 t.Name/34 e.Pattern/44 )/22 >/1
      context[36] = context[23];
      context[37] = context[24];
      context[38] = context[25];
      context[39] = context[26];
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[32];
      // closed e.KnownNames as range 36
      // closed e.Names as range 38
      // closed e.Info as range 40
      // closed e.Histories as range 42
      // closed e.Pattern as range 44
      //DEBUG: t.Name: 34
      //DEBUG: e.KnownNames: 36
      //DEBUG: e.Names: 38
      //DEBUG: e.Info: 40
      //DEBUG: e.Histories: 42
      //DEBUG: e.Pattern: 44
      //34: t.Name
      //36: e.KnownNames
      //38: e.Names
      //40: e.Info
      //42: e.Histories
      //44: e.Pattern
      //49: e.KnownNames

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[48], functions[efunc_gen_Preparem_Aux_A1L1S1C1]);
      refalrts::copy_evar(vm, context[49], context[50], context[36], context[37]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[46] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[46] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </46 & Prepare-Aux=1\1$1?1/50 e._B/51 t.Name/55 e._E/53 >/47
        context[48] = 0;
        context[49] = 0;
        context[50] = refalrts::call_left( context[48], context[49], context[46], context[47] );
        context[51] = 0;
        context[52] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[53] = context[48];
          context[54] = context[49];
          context[56] = refalrts::repeated_stvar_left( vm, context[55], context[34], context[53], context[54] );
          if( ! context[56] )
            continue;
          // closed e._E as range 53
          //DEBUG: t.Name: 34
          //DEBUG: e.KnownNames: 36
          //DEBUG: e.Names: 38
          //DEBUG: e.Info: 40
          //DEBUG: e.Histories: 42
          //DEBUG: e.Pattern: 44
          //DEBUG: e._B: 51
          //DEBUG: e._E: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Prepare-Aux=1\1/4 (/7 e.KnownNames/36 )/8 {REMOVED TILE} (/21 # Spec/33 t.Name/34 e.Pattern/44 )/22 </46 & Prepare-Aux=1\1$1?1/50 e._B/51 t.Name/55 e._E/53 >/47 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: (/15 AsIs: e.Names/38 AsIs: )/16 AsIs: e.Info/40 AsIs: (/19 AsIs: e.Histories/42 AsIs: )/20 AsIs: )/12 } Tile{ ]] }
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[19], context[20] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[11], context[12] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[51], context[52], context[48], context[49] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[46], context[47]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Prepare-Aux=1\1/4 (/7 e.KnownNames/36 )/8 (/11 (/15 e.Names/38 )/16 e.Info/40 (/19 e.Histories/42 )/20 )/12 (/21 # Spec/33 (/34 e./46 )/35 e.Pattern/44 )/22 >/1
      context[36] = context[23];
      context[37] = context[24];
      context[38] = context[25];
      context[39] = context[26];
      context[40] = context[27];
      context[41] = context[28];
      context[42] = context[29];
      context[43] = context[30];
      context[44] = context[31];
      context[45] = context[32];
      context[46] = 0;
      context[47] = 0;
      if( ! refalrts::brackets_term( context[46], context[47], context[34] ) )
        continue;
      // closed e.KnownNames as range 36
      // closed e.Names as range 38
      // closed e.Info as range 40
      // closed e.Histories as range 42
      // closed e. as range 46
      // closed e.Pattern as range 44
      //DEBUG: e.KnownNames: 36
      //DEBUG: e.Names: 38
      //DEBUG: e.Info: 40
      //DEBUG: e.Histories: 42
      //DEBUG: e.: 46
      //DEBUG: e.Pattern: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.KnownNames/36 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: (/15 AsIs: e.Names/38 HalfReuse: (/16 } e./46/48 Tile{ AsIs: )/20 } Tile{ AsIs: )/8 } Tile{ AsIs: e.Info/40 } Tile{ AsIs: (/19 } (/50 e./46/51 )/53 (/54 Tile{ AsIs: e.Pattern/44 } )/55 )/56 (/57 Tile{ AsIs: e.Histories/42 } Tile{ AsIs: </0 Reuse: & TrivialHistory=1/4 AsIs: (/7 } e./46/58 Tile{ AsIs: )/12 AsIs: (/21 HalfReuse: </33 HalfReuse: & AddSuffix/34 AsIs: e./46 HalfReuse: (/35 } '@'/60 0/61 )/62 >/63 )/64 </65 & Map@3/66 </67 & ExtractVariables-Expr/68 e.Pattern/44/69 >/71 >/72 >/73 )/74 )/75 </76 & Log-PutLine/77"New $SPEC function: "/78 </80 & DisplayName/81 e./46/82 >/84 ' '/85 </86 & Log-InlineExpr/87 e.Pattern/44/88 Tile{ HalfReuse: >/22 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[48], context[49], context[46], context[47]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::copy_evar(vm, context[51], context[52], context[46], context[47]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::copy_evar(vm, context[58], context[59], context[46], context[47]);
      refalrts::alloc_char(vm, context[60], '@');
      refalrts::alloc_number(vm, context[61], 0UL);
      refalrts::alloc_close_bracket(vm, context[62]);
      refalrts::alloc_close_call(vm, context[63]);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::alloc_open_call(vm, context[65]);
      refalrts::alloc_name(vm, context[66], functions[efunc_gen_Map_Z3]);
      refalrts::alloc_open_call(vm, context[67]);
      refalrts::alloc_name(vm, context[68], functions[efunc_ExtractVariablesm_Expr]);
      refalrts::copy_evar(vm, context[69], context[70], context[44], context[45]);
      refalrts::alloc_close_call(vm, context[71]);
      refalrts::alloc_close_call(vm, context[72]);
      refalrts::alloc_close_call(vm, context[73]);
      refalrts::alloc_close_bracket(vm, context[74]);
      refalrts::alloc_close_bracket(vm, context[75]);
      refalrts::alloc_open_call(vm, context[76]);
      refalrts::alloc_name(vm, context[77], functions[efunc_Logm_PutLine]);
      refalrts::alloc_chars(vm, context[78], context[79], "New $SPEC function: ", 20);
      refalrts::alloc_open_call(vm, context[80]);
      refalrts::alloc_name(vm, context[81], functions[efunc_DisplayName]);
      refalrts::copy_evar(vm, context[82], context[83], context[46], context[47]);
      refalrts::alloc_close_call(vm, context[84]);
      refalrts::alloc_char(vm, context[85], ' ');
      refalrts::alloc_open_call(vm, context[86]);
      refalrts::alloc_name(vm, context[87], functions[efunc_Logm_InlineExpr]);
      refalrts::copy_evar(vm, context[88], context[89], context[44], context[45]);
      refalrts::reinit_open_bracket(context[16]);
      refalrts::update_name(context[4], functions[efunc_gen_TrivialHistory_A1]);
      refalrts::reinit_open_call(context[33]);
      refalrts::reinit_name(context[34], functions[efunc_AddSuffix]);
      refalrts::reinit_open_bracket(context[35]);
      refalrts::reinit_close_call(context[22]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[76] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[86] );
      refalrts::push_stack( vm, context[84] );
      refalrts::push_stack( vm, context[80] );
      refalrts::link_brackets( context[11], context[75] );
      refalrts::link_brackets( context[57], context[74] );
      refalrts::push_stack( vm, context[73] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[72] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[71] );
      refalrts::push_stack( vm, context[67] );
      refalrts::link_brackets( context[21], context[64] );
      refalrts::push_stack( vm, context[63] );
      refalrts::push_stack( vm, context[33] );
      refalrts::link_brackets( context[35], context[62] );
      refalrts::link_brackets( context[7], context[12] );
      refalrts::link_brackets( context[19], context[56] );
      refalrts::link_brackets( context[54], context[55] );
      refalrts::link_brackets( context[50], context[53] );
      refalrts::link_brackets( context[15], context[8] );
      refalrts::link_brackets( context[16], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[22];
      res = refalrts::splice_evar( res, context[88], context[89] );
      res = refalrts::splice_evar( res, context[60], context[87] );
      res = refalrts::splice_evar( res, context[12], context[35] );
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[55], context[57] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[50], context[54] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[11], context[16] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Prepare-Aux=1\1/4 (/7 e.KnownNames/36 )/8 (/11 (/15 e.Names/38 )/16 e.Info/40 (/19 e.Histories/42 )/20 )/12 (/21 # Spec/33 t.Name/34 e.Pattern/44 )/22 >/1
    context[36] = context[23];
    context[37] = context[24];
    context[38] = context[25];
    context[39] = context[26];
    context[40] = context[27];
    context[41] = context[28];
    context[42] = context[29];
    context[43] = context[30];
    context[44] = context[31];
    context[45] = context[32];
    // closed e.KnownNames as range 36
    // closed e.Names as range 38
    // closed e.Info as range 40
    // closed e.Histories as range 42
    // closed e.Pattern as range 44
    //DEBUG: t.Name: 34
    //DEBUG: e.KnownNames: 36
    //DEBUG: e.Names: 38
    //DEBUG: e.Info: 40
    //DEBUG: e.Histories: 42
    //DEBUG: e.Pattern: 44

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Prepare-Aux=1\1/4 {REMOVED TILE} e.KnownNames/36 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Spec/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Prepare-Aux=1\1$2=1*1/11 AsIs: (/15 AsIs: e.Names/38 AsIs: )/16 } Tile{ AsIs: t.Name/34 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Info/40 } Tile{ AsIs: )/12 AsIs: (/21 } Tile{ AsIs: e.Pattern/44 } Tile{ AsIs: )/22 } Tile{ AsIs: (/19 AsIs: e.Histories/42 AsIs: )/20 } t.Name/34/46 Tile{ AsIs: >/1 ]] }
    refalrts::copy_evar(vm, context[46], context[47], context[34], context[35]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[11], functions[efunc_gen_Preparem_Aux_A1L1S2A1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[12], context[21] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Prepare-Aux=1\1/4 (/7 e.KnownNames/5 )/8 (/11 (/15 e.Names/13 )/16 e.Info/9 (/19 e.Histories/17 )/20 )/12 t.Other/21 >/1
  // closed e.KnownNames as range 5
  // closed e.Names as range 13
  // closed e.Info as range 9
  // closed e.Histories as range 17
  //DEBUG: t.Other: 21
  //DEBUG: e.KnownNames: 5
  //DEBUG: e.Names: 13
  //DEBUG: e.Info: 9
  //DEBUG: e.Histories: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Prepare-Aux=1\1/4 (/7 e.KnownNames/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: (/15 AsIs: e.Names/13 AsIs: )/16 AsIs: e.Info/9 AsIs: (/19 AsIs: e.Histories/17 AsIs: )/20 AsIs: )/12 AsIs: t.Other/21 } Tile{ ]] }
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[11], context[22] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A1L1("Prepare-Aux=1\\1", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A1L1);


static refalrts::FnResult func_gen_Preparem_Aux_A1L2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & Prepare-Aux=1\2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Prepare-Aux=1\2/4 (/7 (/11 e.new1/9 )/12 e.new2/5 )/8 t.new3/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 9
  // closed e.new2 as range 5
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Prepare-Aux=1\2/4 (/7 (/11 e.Names/15 )/12 e.Info-B/30 (/36 t.Name/42 (/40 e.Pattern/38 )/41 )/37 e.Info-E/32 (/24 e.Histories/22 )/25 )/8 (/13 # Function/21 s.ScopeClass/26 t.Name/27 # Sentences/29 e.Body/19 )/14 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = 0;
    context[20] = 0;
    if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
      continue;
    context[21] = refalrts::ident_left( identifiers[ident_Function], context[19], context[20] );
    if( ! context[21] )
      continue;
    context[22] = 0;
    context[23] = 0;
    context[24] = refalrts::brackets_right( context[22], context[23], context[17], context[18] );
    if( ! context[24] )
      continue;
    refalrts::bracket_pointers(context[24], context[25]);
    // closed e.Names as range 15
    // closed e.Histories as range 22
    if( ! refalrts::svar_left( context[26], context[19], context[20] ) )
      continue;
    context[28] = refalrts::tvar_left( context[27], context[19], context[20] );
    if( ! context[28] )
      continue;
    context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[19], context[20] );
    if( ! context[29] )
      continue;
    // closed e.Body as range 19
    context[30] = 0;
    context[31] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[32] = context[17];
      context[33] = context[18];
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = 0;
      context[39] = 0;
      context[40] = refalrts::brackets_right( context[38], context[39], context[34], context[35] );
      if( ! context[40] )
        continue;
      refalrts::bracket_pointers(context[40], context[41]);
      context[43] = refalrts::repeated_stvar_left( vm, context[42], context[27], context[34], context[35] );
      if( ! context[43] )
        continue;
      if( ! refalrts::empty_seq( context[34], context[35] ) )
        continue;
      // closed e.Pattern as range 38
      // closed e.Info-E as range 32
      //DEBUG: e.Names: 15
      //DEBUG: e.Histories: 22
      //DEBUG: s.ScopeClass: 26
      //DEBUG: t.Name: 27
      //DEBUG: e.Body: 19
      //DEBUG: e.Info-B: 30
      //DEBUG: e.Pattern: 38
      //DEBUG: e.Info-E: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.Names/15 AsIs: )/12 AsIs: e.Info-B/30 AsIs: (/36 AsIs: t.Name/42 AsIs: (/40 } Tile{ AsIs: e.Pattern/38 } Tile{ HalfReuse: )/0 HalfReuse: (/4 } e.Body/19/44 Tile{ HalfReuse: )/1 } Tile{ HalfReuse: 1/41 AsIs: )/37 AsIs: e.Info-E/32 AsIs: (/24 AsIs: e.Histories/22 AsIs: )/25 AsIs: )/8 AsIs: (/13 AsIs: # Function/21 AsIs: s.ScopeClass/26 AsIs: t.Name/27 AsIs: # Sentences/29 AsIs: e.Body/19 AsIs: )/14 } Tile{ ]] }
      refalrts::copy_evar(vm, context[44], context[45], context[19], context[20]);
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_number(context[41], 1UL);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[36], context[37] );
      refalrts::link_brackets( context[4], context[1] );
      refalrts::link_brackets( context[40], context[0] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[41], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[7], context[40] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[30], context[31], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Prepare-Aux=1\2/4 (/7 (/11 e.Names/9 )/12 e.Info/5 )/8 t.Other/13 >/1
  // closed e.Names as range 9
  // closed e.Info as range 5
  //DEBUG: t.Other: 13
  //DEBUG: e.Names: 9
  //DEBUG: e.Info: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Prepare-Aux=1\2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.Names/9 AsIs: )/12 AsIs: e.Info/5 AsIs: )/8 AsIs: t.Other/13 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[14] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A1L2("Prepare-Aux=1\\2", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A1L2);


static refalrts::FnResult func_Preparem_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & Prepare-Aux/4 (/7 (/11 e.KnownNames/9 )/12 e.KnownInfo/5 (/15 e.KnownHistories/13 )/16 )/8 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.KnownNames as range 9
  // closed e.KnownInfo as range 5
  // closed e.KnownHistories as range 13
  // closed e.AST as range 2
  //DEBUG: e.KnownNames: 9
  //DEBUG: e.KnownInfo: 5
  //DEBUG: e.KnownHistories: 13
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & Prepare-Aux=1/18 (/19 e.KnownNames/9/20 )/22 (/23 Tile{ AsIs: e.KnownInfo/5 } )/24 Tile{ AsIs: (/15 AsIs: e.KnownHistories/13 AsIs: )/16 HalfReuse: </8 } & Fetch@1/25 </26 Tile{ HalfReuse: & DoMapAccum/0 HalfReuse: [*]/4 HalfReuse: & Prepare-Aux=1\1/7 AsIs: (/11 AsIs: e.KnownNames/9 AsIs: )/12 } {*}/27 (/28 (/29 )/30 (/31 )/32 )/33 (/34 )/35 Tile{ AsIs: e.AST/2 } >/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Preparem_Aux_A1]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::copy_evar(vm, context[20], context[21], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_Fetch_Z1]);
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_unwrapped_closure(vm, context[27], context[4]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_open_bracket(vm, context[34]);
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[0], functions[efunc_DoMapAccum]);
  refalrts::reinit_closure_head(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_Preparem_Aux_A1L1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[26] );
  refalrts::link_brackets( context[34], context[35] );
  refalrts::link_brackets( context[28], context[33] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[36], context[37] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[27], context[35] );
  res = refalrts::splice_evar( res, context[0], context[12] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[15], context[8] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[23] );
  refalrts::use( res );
  refalrts::wrap_closure( context[27] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Preparem_Aux("Prepare-Aux", COOKIE1_, COOKIE2_, func_Preparem_Aux);


static refalrts::FnResult func_gen_TrivialHistory_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & TrivialHistory=1/4 (/7 e.Name/5 )/8 e.HistoryRecord/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Name as range 5
  // closed e.HistoryRecord as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.HistoryRecord: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 } Tile{ HalfReuse: (/0 } Tile{ AsIs: e.HistoryRecord/2 } )/9 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[0], context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_TrivialHistory_A1("TrivialHistory=1", COOKIE1_, COOKIE2_, func_gen_TrivialHistory_A1);


static refalrts::FnResult func_gen_TrivialHistory_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & TrivialHistory=1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & TrivialHistory=1\1/4 (/7 s.new1/9 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 5
  do {
    // </0 & TrivialHistory=1\1/4 (/7 s.Mode/9 e.Index/10 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    // closed e.Index as range 10
    //DEBUG: s.Mode: 9
    //DEBUG: e.Index: 10
    //9: s.Mode
    //10: e.Index
    //18: s.Mode
    //19: e.Index

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_TrivialHistory_A1L1S1C1]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_IsSpecStaticVar]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::copy_stvar(vm, context[18], context[9]);
    refalrts::copy_evar(vm, context[19], context[20], context[10], context[11]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[15] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::link_brackets( context[17], context[21] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_stvar( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_elem( res, context[12] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </12 & TrivialHistory=1\1$1?1/16 # True/17 >/13
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::call_left( context[14], context[15], context[12], context[13] );
      context[17] = refalrts::ident_left( identifiers[ident_True], context[14], context[15] );
      if( ! context[17] )
        continue;
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      //DEBUG: s.Mode: 9
      //DEBUG: e.Index: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & TrivialHistory=1\1$1?1/16 # True/17 >/13 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 HalfReuse: # Var/7 AsIs: s.Mode/9 AsIs: e.Index/10 AsIs: )/8 HalfReuse: )/12 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_ident(context[7], identifiers[ident_Var]);
      refalrts::reinit_close_bracket(context[12]);
      refalrts::link_brackets( context[0], context[12] );
      refalrts::link_brackets( context[4], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, context[12], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[12], context[13]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & TrivialHistory=1\1/4 (/7 s.Mode/9 e.Index/5 )/8 >/1
  // closed e.Index as range 5
  //DEBUG: s.Mode: 9
  //DEBUG: e.Index: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & TrivialHistory=1\1/4 (/7 s.Mode/9 e.Index/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_TrivialHistory_A1L1("TrivialHistory=1\\1", COOKIE1_, COOKIE2_, func_gen_TrivialHistory_A1L1);


static refalrts::FnResult func_TrivialHistory(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & TrivialHistory/4 e.Name/2 (/7 e.Pattern/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Name as range 2
  // closed e.Pattern as range 5
  //DEBUG: e.Name: 2
  //DEBUG: e.Pattern: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & TrivialHistory=1/10 (/11 e.Name/2/12 )/14 (/15 Tile{ AsIs: </0 Reuse: & AddSuffix/4 AsIs: e.Name/2 AsIs: (/7 } '@'/16 0/17 )/18 >/19 )/20 </21 & Map@3/22 </23 & ExtractVariables-Expr/24 Tile{ AsIs: e.Pattern/5 } >/25 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_TrivialHistory_A1]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::copy_evar(vm, context[12], context[13], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_char(vm, context[16], '@');
  refalrts::alloc_number(vm, context[17], 0UL);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z3]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_ExtractVariablesm_Expr]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_AddSuffix]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[15], context[20] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[18] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[16], context[24] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TrivialHistory("TrivialHistory", COOKIE1_, COOKIE2_, func_TrivialHistory);


static refalrts::FnResult func_gen_AddGuardSentences_L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & AddGuardSentences\1=1/4 (/7 e.Name/5 )/8 (/11 e.SpecPattern/9 )/12 (/15 e.Sentences/13 )/16 (/19 e.Signatures/17 )/20 e.GuardName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Name as range 5
  // closed e.SpecPattern as range 9
  // closed e.Sentences as range 13
  // closed e.Signatures as range 17
  // closed e.GuardName as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.SpecPattern: 9
  //DEBUG: e.Sentences: 13
  //DEBUG: e.Signatures: 17
  //DEBUG: e.GuardName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 AsIs: (/11 AsIs: e.SpecPattern/9 AsIs: )/12 AsIs: (/15 AsIs: e.Sentences/13 HalfReuse: (/16 AsIs: (/19 } e.SpecPattern/9/21 )/23 Tile{ HalfReuse: (/0 } (/24 # CallBrackets/25 (/26 # Symbol/27 Tile{ HalfReuse: # Name/20 AsIs: e.GuardName/2 HalfReuse: )/1 } e.SpecPattern/9/28 )/30 )/31 )/32 )/33 Tile{ AsIs: e.Signatures/17 } )/34 Tile{ ]] }
  refalrts::copy_evar(vm, context[21], context[22], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_ident(vm, context[25], identifiers[ident_CallBrackets]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_ident(vm, context[27], identifiers[ident_Symbol]);
  refalrts::copy_evar(vm, context[28], context[29], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_open_bracket(context[16]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[20], identifiers[ident_Name]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[34] );
  refalrts::link_brackets( context[15], context[33] );
  refalrts::link_brackets( context[16], context[32] );
  refalrts::link_brackets( context[0], context[31] );
  refalrts::link_brackets( context[24], context[30] );
  refalrts::link_brackets( context[26], context[1] );
  refalrts::link_brackets( context[19], context[23] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[34] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[20], context[1] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[4], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddGuardSentences_L1A1("AddGuardSentences\\1=1", COOKIE1_, COOKIE2_, func_gen_AddGuardSentences_L1A1);


static refalrts::FnResult func_AddGuardSentences(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & AddGuardSentences/4 e.Info/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Info as range 2
  //DEBUG: e.Info: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@2/4 AsIs: e.Info/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AddGuardSentences("AddGuardSentences", COOKIE1_, COOKIE2_, func_AddGuardSentences);


static refalrts::FnResult func_AddGuardEnums(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & AddGuardEnums/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@1/4 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AddGuardEnums("AddGuardEnums", COOKIE1_, COOKIE2_, func_AddGuardEnums);


static refalrts::FnResult func_GuardEnumName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & GuardEnumName/4 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & AddSuffix/4 AsIs: e.Name/2 HalfReuse: (/1 } '@'/5 0/6 )/7 >/8 Tile{ ]] }
  refalrts::alloc_char(vm, context[5], '@');
  refalrts::alloc_number(vm, context[6], 0UL);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_AddSuffix]);
  refalrts::reinit_open_bracket(context[1]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[1], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GuardEnumName("GuardEnumName", COOKIE1_, COOKIE2_, func_GuardEnumName);


static refalrts::FnResult func_MakeGuardEnum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & MakeGuardEnum/4 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/5 # Function/6 # GN-Local/7 (/8 Tile{ AsIs: </0 Reuse: & AddSuffix/4 AsIs: e.Name/2 HalfReuse: (/1 } '@'/9 0/10 )/11 >/12 )/13 # Sentences/14 )/15 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_ident(vm, context[6], identifiers[ident_Function]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Local]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_char(vm, context[9], '@');
  refalrts::alloc_number(vm, context[10], 0UL);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Sentences]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_AddSuffix]);
  refalrts::reinit_open_bracket(context[1]);
  refalrts::link_brackets( context[5], context[15] );
  refalrts::link_brackets( context[8], context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[1], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[15] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeGuardEnum("MakeGuardEnum", COOKIE1_, COOKIE2_, func_MakeGuardEnum);


static refalrts::FnResult func_CreateRemainderFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CreateRemainderFunctions/4 e.Info/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Info as range 2
  //DEBUG: e.Info: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 AsIs: e.Info/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CreateRemainderFunctions("CreateRemainderFunctions", COOKIE1_, COOKIE2_, func_CreateRemainderFunctions);


static refalrts::FnResult func_gen_CreateRemainderFunctionsm_OneFunction_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & CreateRemainderFunctions-OneFunction$2=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateRemainderFunctions-OneFunction$2=1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 s.new3/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & CreateRemainderFunctions-OneFunction$2=1/4 (/7 e.SpecPattern/18 )/8 (/11 t./26 e./20 )/12 s.Count/13 (/16 e.Name/22 )/17 e.RemainderName/24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.SpecPattern as range 18
    // closed e.Name as range 22
    // closed e.RemainderName as range 24
    context[27] = refalrts::tvar_left( context[26], context[20], context[21] );
    if( ! context[27] )
      continue;
    // closed e. as range 20
    //DEBUG: s.Count: 13
    //DEBUG: e.SpecPattern: 18
    //DEBUG: e.Name: 22
    //DEBUG: e.RemainderName: 24
    //DEBUG: t.: 26
    //DEBUG: e.: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } (/28 Tile{ AsIs: e.RemainderName/24 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.SpecPattern/18 AsIs: )/8 AsIs: (/11 AsIs: t./26 AsIs: e./20 AsIs: )/12 } 1/29 )/30 </31 & CreateRemainderFunctions-OneFunction/32 </33 & Add/34 1/35 Tile{ AsIs: s.Count/13 } >/36 (/37 Tile{ AsIs: (/16 AsIs: e.Name/22 AsIs: )/17 } (/38 e.SpecPattern/18/39 )/41 (/42 e./20/43 )/45 1/46 )/47 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::alloc_number(vm, context[29], 1UL);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_CreateRemainderFunctionsm_OneFunction]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::copy_evar(vm, context[39], context[40], context[18], context[19]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::copy_evar(vm, context[43], context[44], context[20], context[21]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_number(vm, context[46], 1UL);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[37], context[47] );
    refalrts::link_brackets( context[42], context[45] );
    refalrts::link_brackets( context[38], context[41] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[0], context[30] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[28], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[47] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[29], context[35] );
    res = refalrts::splice_evar( res, context[4], context[12] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateRemainderFunctions-OneFunction$2=1/4 (/7 e.SpecPattern/5 )/8 (/11 e.Sentences/9 )/12 s.Count/13 (/16 e.Name/14 )/17 e.RemainderName/2 >/1
  // closed e.SpecPattern as range 5
  // closed e.Sentences as range 9
  // closed e.Name as range 14
  // closed e.RemainderName as range 2
  //DEBUG: s.Count: 13
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.Sentences: 9
  //DEBUG: e.Name: 14
  //DEBUG: e.RemainderName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } (/18 Tile{ AsIs: e.RemainderName/2 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.SpecPattern/5 AsIs: )/8 AsIs: (/11 AsIs: e.Sentences/9 AsIs: )/12 } 1/19 )/20 </21 & CreateRemainderFunctions-OneFunction/22 </23 & Add/24 1/25 Tile{ AsIs: s.Count/13 } >/26 (/27 Tile{ AsIs: (/16 AsIs: e.Name/14 AsIs: )/17 } (/28 e.SpecPattern/5/29 )/31 (/32 </33 & Drop*1/34 e.Sentences/9/35 >/37 )/38 1/39 )/40 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_number(vm, context[19], 1UL);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_CreateRemainderFunctionsm_OneFunction]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[25], 1UL);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::copy_evar(vm, context[29], context[30], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_gen_Drop_D1]);
  refalrts::copy_evar(vm, context[35], context[36], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::alloc_number(vm, context[39], 1UL);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[27], context[40] );
  refalrts::link_brackets( context[32], context[38] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[33] );
  refalrts::link_brackets( context[28], context[31] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[0], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[18], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[28], context[40] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[19], context[25] );
  res = refalrts::splice_evar( res, context[4], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CreateRemainderFunctionsm_OneFunction_S2A1("CreateRemainderFunctions-OneFunction$2=1", COOKIE1_, COOKIE2_, func_gen_CreateRemainderFunctionsm_OneFunction_S2A1);


static refalrts::FnResult func_CreateRemainderFunctionsm_OneFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 63 elems
  refalrts::Iter context[63];
  refalrts::zeros( context, 63 );
  // </0 & CreateRemainderFunctions-OneFunction/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateRemainderFunctions-OneFunction/4 s.new1/22 (/7 (/12 e.new2/10 )/13 (/16 e.new3/14 )/17 (/20 e.new4/18 )/21 1/9 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = refalrts::number_right( 1UL, context[5], context[6] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[5], context[6] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[5], context[6] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[5], context[6] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 10
  // closed e.new3 as range 14
  // closed e.new4 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CreateRemainderFunctions-OneFunction/4 s.new5/22 (/7 (/12 e.new6/23 )/13 (/16 e.new7/25 )/17 (/20 t.new8/29 e.new9/27 )/21 1/9 )/8 >/1
    context[23] = context[10];
    context[24] = context[11];
    context[25] = context[14];
    context[26] = context[15];
    context[27] = context[18];
    context[28] = context[19];
    // closed e.new6 as range 23
    // closed e.new7 as range 25
    context[30] = refalrts::tvar_left( context[29], context[27], context[28] );
    if( ! context[30] )
      continue;
    // closed e.new9 as range 27
    do {
      // </0 & CreateRemainderFunctions-OneFunction/4 s.Count/22 (/7 (/12 e.Name/31 )/13 (/16 e.SpecPattern/33 )/17 (/20 (/29 e.GuardSentence/35 )/30 )/21 1/9 )/8 >/1
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = 0;
      context[36] = 0;
      if( ! refalrts::brackets_term( context[35], context[36], context[29] ) )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.Name as range 31
      // closed e.SpecPattern as range 33
      // closed e.GuardSentence as range 35
      //DEBUG: s.Count: 22
      //DEBUG: e.Name: 31
      //DEBUG: e.SpecPattern: 33
      //DEBUG: e.GuardSentence: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CreateRemainderFunctions-OneFunction/4 s.Count/22 (/7 (/12 e.Name/31 )/13 (/16 e.SpecPattern/33 )/17 (/20 (/29 e.GuardSentence/35 )/30 )/21 1/9 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CreateRemainderFunctions-OneFunction/4 0/22 (/7 (/12 e.new10/31 )/13 (/16 e.new11/33 )/17 (/20 t.new12/29 e.new13/35 )/21 1/9 )/8 >/1
    context[31] = context[23];
    context[32] = context[24];
    context[33] = context[25];
    context[34] = context[26];
    context[35] = context[27];
    context[36] = context[28];
    if( ! refalrts::number_term( 0UL, context[22] ) )
      continue;
    // closed e.new10 as range 31
    // closed e.new11 as range 33
    // closed e.new13 as range 35
    do {
      // </0 & CreateRemainderFunctions-OneFunction/4 0/22 (/7 (/12 e.Name/37 )/13 (/16 e.SpecPattern/39 )/17 (/20 t./29 (/45 e.1/43 )/46 )/21 1/9 )/8 >/1
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = context[34];
      context[41] = context[35];
      context[42] = context[36];
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_left( context[43], context[44], context[41], context[42] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      if( ! refalrts::empty_seq( context[41], context[42] ) )
        continue;
      // closed e.Name as range 37
      // closed e.SpecPattern as range 39
      // closed e.1 as range 43
      //DEBUG: t.: 29
      //DEBUG: e.Name: 37
      //DEBUG: e.SpecPattern: 39
      //DEBUG: e.1: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CreateRemainderFunctions-OneFunction/4 0/22 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/12 AsIs: e.Name/37 AsIs: )/13 AsIs: (/16 AsIs: e.SpecPattern/39 AsIs: )/17 AsIs: (/20 AsIs: t./29 AsIs: (/45 AsIs: e.1/43 AsIs: )/46 AsIs: )/21 AsIs: 1/9 AsIs: )/8 } Tile{ ]] }
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[45], context[46] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CreateRemainderFunctions-OneFunction/4 0/22 (/7 (/12 e.Name/37 )/13 (/16 e.SpecPattern/39 )/17 (/20 t./29 e./41 )/21 1/9 )/8 >/1
    context[37] = context[31];
    context[38] = context[32];
    context[39] = context[33];
    context[40] = context[34];
    context[41] = context[35];
    context[42] = context[36];
    // closed e.Name as range 37
    // closed e.SpecPattern as range 39
    // closed e. as range 41
    //DEBUG: t.: 29
    //DEBUG: e.Name: 37
    //DEBUG: e.SpecPattern: 39
    //DEBUG: e.: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/12 AsIs: e.Name/37 AsIs: )/13 AsIs: (/16 AsIs: e.SpecPattern/39 AsIs: )/17 AsIs: (/20 AsIs: t./29 AsIs: e./41 AsIs: )/21 AsIs: 1/9 AsIs: )/8 HalfReuse: </1 } & CreateRemainderFunctions-OneFunction$2=1@1/43 (/44 e.SpecPattern/39/45 )/47 (/48 e./41/49 )/51 (/52 e.Name/37/53 )/55 Tile{ AsIs: </0 Reuse: & AddSuffix/4 } e.Name/37/56 (/58 '*'/59 Tile{ Reuse: 1/22 } )/60 >/61 >/62 Tile{ ]] }
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_CreateRemainderFunctionsm_OneFunction_S2A1Z1]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::copy_evar(vm, context[45], context[46], context[39], context[40]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_open_bracket(vm, context[48]);
    refalrts::copy_evar(vm, context[49], context[50], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_open_bracket(vm, context[52]);
    refalrts::copy_evar(vm, context[53], context[54], context[37], context[38]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::copy_evar(vm, context[56], context[57], context[37], context[38]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::alloc_char(vm, context[59], '*');
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::reinit_open_call(context[1]);
    refalrts::update_name(context[4], functions[efunc_AddSuffix]);
    refalrts::update_number(context[22], 1UL);
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[58], context[60] );
    refalrts::link_brackets( context[52], context[55] );
    refalrts::link_brackets( context[48], context[51] );
    refalrts::link_brackets( context[44], context[47] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[60], context[62] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[43], context[55] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateRemainderFunctions-OneFunction/4 0/22 (/7 (/12 e.Name/23 )/13 (/16 e.SpecPattern/25 )/17 (/20 e.Sentences/27 )/21 1/9 )/8 >/1
    context[23] = context[10];
    context[24] = context[11];
    context[25] = context[14];
    context[26] = context[15];
    context[27] = context[18];
    context[28] = context[19];
    if( ! refalrts::number_term( 0UL, context[22] ) )
      continue;
    // closed e.Name as range 23
    // closed e.SpecPattern as range 25
    // closed e.Sentences as range 27
    //DEBUG: e.Name: 23
    //DEBUG: e.SpecPattern: 25
    //DEBUG: e.Sentences: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/12 AsIs: e.Name/23 AsIs: )/13 AsIs: (/16 AsIs: e.SpecPattern/25 AsIs: )/17 AsIs: (/20 AsIs: e.Sentences/27 AsIs: )/21 AsIs: 1/9 AsIs: )/8 HalfReuse: </1 } & CreateRemainderFunctions-OneFunction@1/29 Tile{ HalfReuse: (/22 } e.Name/23/30 )/32 (/33 e.SpecPattern/25/34 )/36 Tile{ AsIs: </0 Reuse: & Drop*1/4 } e.Sentences/27/37 >/39 >/40 Tile{ ]] }
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_CreateRemainderFunctionsm_OneFunction_Z1]);
    refalrts::copy_evar(vm, context[30], context[31], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::copy_evar(vm, context[37], context[38], context[27], context[28]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::reinit_open_call(context[1]);
    refalrts::reinit_open_bracket(context[22]);
    refalrts::update_name(context[4], functions[efunc_gen_Drop_D1]);
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::link_brackets( context[22], context[32] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[32], context[36] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateRemainderFunctions-OneFunction/4 s.Count/22 (/7 (/12 e.Name/10 )/13 (/16 e.SpecPattern/14 )/17 (/20 e.Sentences/18 )/21 1/9 )/8 >/1
  // closed e.Name as range 10
  // closed e.SpecPattern as range 14
  // closed e.Sentences as range 18
  //DEBUG: s.Count: 22
  //DEBUG: e.Name: 10
  //DEBUG: e.SpecPattern: 14
  //DEBUG: e.Sentences: 18

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 Tile{ HalfReuse: & CreateRemainderFunctions-OneFunction$2=1/13 AsIs: (/16 AsIs: e.SpecPattern/14 AsIs: )/17 AsIs: (/20 AsIs: e.Sentences/18 AsIs: )/21 HalfReuse: s.Count22 /9 HalfReuse: (/8 } Tile{ AsIs: e.Name/10 } )/24 </25 & AddSuffix/26 e.Name/10/27 Tile{ HalfReuse: (/0 HalfReuse: '*'/4 AsIs: s.Count/22 HalfReuse: )/7 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_AddSuffix]);
  refalrts::copy_evar(vm, context[27], context[28], context[10], context[11]);
  refalrts::reinit_name(context[13], functions[efunc_gen_CreateRemainderFunctionsm_OneFunction_S2A1]);
  refalrts::reinit_svar( context[9], context[22] );
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_char(context[4], '*');
  refalrts::reinit_close_bracket(context[7]);
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[0], context[7] );
  refalrts::link_brackets( context[8], context[24] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[12] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[24], context[26] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[13], context[8] );
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CreateRemainderFunctionsm_OneFunction("CreateRemainderFunctions-OneFunction", COOKIE1_, COOKIE2_, func_CreateRemainderFunctionsm_OneFunction);


static refalrts::FnResult func_Drop(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Drop/4 t.First/5 e.Rest/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Rest as range 2
  //DEBUG: t.First: 5
  //DEBUG: e.Rest: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Drop/4 t.First/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Rest/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Drop("Drop", COOKIE1_, COOKIE2_, func_Drop);


static refalrts::FnResult func_gen_OptTreem_Spec_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & OptTree-Spec$2=1/4 (/7 e.Names/5 )/8 (/11 e.SpecInfo$a/9 (/19 e.Histories$a/17 )/20 (/15 e.NewFunctions/13 )/16 )/12 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[9], context[10] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Names as range 5
  // closed e.SpecInfo$a as range 9
  // closed e.Histories$a as range 17
  // closed e.NewFunctions as range 13
  // closed e.AST as range 2
  //DEBUG: e.Names: 5
  //DEBUG: e.SpecInfo$a: 9
  //DEBUG: e.Histories$a: 17
  //DEBUG: e.NewFunctions: 13
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} )/16 )/12 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # SpecInfo/4 AsIs: (/7 } Tile{ AsIs: e.Names/5 } Tile{ HalfReuse: )/11 AsIs: e.SpecInfo$a/9 AsIs: (/19 AsIs: e.Histories$a/17 AsIs: )/20 HalfReuse: )/15 } Tile{ AsIs: e.AST/2 } Tile{ AsIs: e.NewFunctions/13 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_SpecInfo]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::link_brackets( context[0], context[15] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptTreem_Spec_S2A1("OptTree-Spec$2=1", COOKIE1_, COOKIE2_, func_gen_OptTreem_Spec_S2A1);


static refalrts::FnResult func_OptTreem_Spec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & OptTree-Spec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptTree-Spec/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & OptTree-Spec/4 # NoOpt/5 e.AST/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[5] ) )
      continue;
    // closed e.AST as range 6
    //DEBUG: e.AST: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Map@5/5 AsIs: e.AST/6 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_gen_Map_Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptTree-Spec/4 # OptSpec/5 e.AST-B/6 (/12 # SpecInfo/14 (/17 e.Names/15 )/18 e.SpecInfo/10 (/21 e.Histories/19 )/22 )/13 e.AST-E/8 >/1
  if( ! refalrts::ident_term( identifiers[ident_OptSpec], context[5] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[8] = context[2];
    context[9] = context[3];
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[8], context[9] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    context[14] = refalrts::ident_left( identifiers[ident_SpecInfo], context[10], context[11] );
    if( ! context[14] )
      continue;
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[10], context[11] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_right( context[19], context[20], context[10], context[11] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.Names as range 15
    // closed e.SpecInfo as range 10
    // closed e.Histories as range 19
    // closed e.AST-E as range 8
    //DEBUG: e.AST-B: 6
    //DEBUG: e.Names: 15
    //DEBUG: e.SpecInfo: 10
    //DEBUG: e.Histories: 19
    //DEBUG: e.AST-E: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptTree-Spec$2=1/4 HalfReuse: (/5 } Tile{ AsIs: e.Names/15 } )/23 </24 & Map@6/25 e.Histories/19/26 >/28 </29 & DoMapAccum@1/30 Tile{ HalfReuse: (/18 AsIs: e.SpecInfo/10 AsIs: (/21 AsIs: e.Histories/19 AsIs: )/22 HalfReuse: (/13 } Tile{ HalfReuse: )/12 HalfReuse: )/14 AsIs: (/17 } )/31 Tile{ AsIs: e.AST-B/6 } Tile{ AsIs: e.AST-E/8 } >/32 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_Map_Z6]);
    refalrts::copy_evar(vm, context[26], context[27], context[19], context[20]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_gen_OptTreem_Spec_S2A1]);
    refalrts::reinit_open_bracket(context[5]);
    refalrts::reinit_open_bracket(context[18]);
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_close_bracket(context[12]);
    refalrts::reinit_close_bracket(context[14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[17], context[31] );
    refalrts::link_brackets( context[18], context[14] );
    refalrts::link_brackets( context[13], context[12] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[5], context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_evar( res, context[12], context[17] );
    res = refalrts::splice_evar( res, context[18], context[13] );
    res = refalrts::splice_evar( res, context[23], context[30] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[6], context[7], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_OptTreem_Spec("OptTree-Spec", 0U, 0U, func_OptTreem_Spec);


static refalrts::FnResult func_ColdAll(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & ColdAll/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@5/4 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ColdAll("ColdAll", COOKIE1_, COOKIE2_, func_ColdAll);


static refalrts::FnResult func_PrintHistories(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & PrintHistories/4 e.Histories/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Histories as range 2
  //DEBUG: e.Histories: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@6/4 AsIs: e.Histories/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintHistories("PrintHistories", COOKIE1_, COOKIE2_, func_PrintHistories);


static refalrts::FnResult func_PrintHistory(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & PrintHistory/4 (/7 (/11 e.Function/9 )/12 e.History/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Function as range 9
  // closed e.History as range 5
  //DEBUG: e.Function: 9
  //DEBUG: e.History: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Log-PutLine/4 HalfReuse: 'H'/7 HalfReuse: 'i'/11 }"story of "/13 </15 & DisplayName/16 Tile{ AsIs: e.Function/9 } >/17 '\n'/18 </19 Tile{ HalfReuse: & Map@8/12 AsIs: e.History/5 HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[13], context[14], "story of ", 9);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_DisplayName]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_char(vm, context[18], '\n');
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_Logm_PutLine]);
  refalrts::reinit_char(context[7], 'H');
  refalrts::reinit_char(context[11], 'i');
  refalrts::reinit_name(context[12], functions[efunc_gen_Map_Z8]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintHistory("PrintHistory", COOKIE1_, COOKIE2_, func_PrintHistory);


static refalrts::FnResult func_PrintSignature(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & PrintSignature/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PrintSignature/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PrintSignature/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintSignature/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & PrintSignature/4 (/5 e./9 )/6 e.Last/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[9] = 0;
    context[10] = 0;
    if( ! refalrts::brackets_term( context[9], context[10], context[5] ) )
      continue;
    // closed e. as range 9
    // closed e.Last as range 7
    //DEBUG: e.: 9
    //DEBUG: e.Last: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Log-InlineExpr/4 } Tile{ AsIs: e./9 } Tile{ HalfReuse: >/5 } </11 Tile{ HalfReuse: & Map@7/6 AsIs: e.Last/7 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_Logm_InlineExpr]);
    refalrts::reinit_close_call(context[5]);
    refalrts::reinit_name(context[6], functions[efunc_gen_Map_Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[5] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[6];
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintSignature/4 t.First/5 e.Last/2 >/1
  // closed e.Last as range 2
  //DEBUG: t.First: 5
  //DEBUG: e.Last: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintSignatureItem*1/4 AsIs: t.First/5 } >/7 </8 & Map@7/9 Tile{ AsIs: e.Last/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z7]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintSignatureItem_D1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintSignature("PrintSignature", COOKIE1_, COOKIE2_, func_PrintSignature);


static refalrts::FnResult func_PrintSignatureItem(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & PrintSignatureItem/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Log-InlineExpr/4 } Tile{ AsIs: e.Expr/5 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Logm_InlineExpr]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintSignatureItem("PrintSignatureItem", COOKIE1_, COOKIE2_, func_PrintSignatureItem);


static refalrts::FnResult func_gen_SpecUnit_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & SpecUnit$1=1/4 s.ScopeClass/5 t.Name/6 (/10 e.SpecInfo$a/8 (/22 e.Histories/20 )/23 (/18 e.History$a/16 )/19 (/14 e.NewFunctions$a/12 )/15 )/11 e.Sentences$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_right( context[12], context[13], context[8], context[9] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_right( context[16], context[17], context[8], context[9] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_right( context[20], context[21], context[8], context[9] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.SpecInfo$a as range 8
  // closed e.Histories as range 20
  // closed e.History$a as range 16
  // closed e.NewFunctions$a as range 12
  // closed e.Sentences$a as range 2
  //DEBUG: s.ScopeClass: 5
  //DEBUG: t.Name: 6
  //DEBUG: e.SpecInfo$a: 8
  //DEBUG: e.Histories: 20
  //DEBUG: e.History$a: 16
  //DEBUG: e.NewFunctions$a: 12
  //DEBUG: e.Sentences$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.History$a/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/10 AsIs: e.SpecInfo$a/8 AsIs: (/22 AsIs: e.Histories/20 AsIs: )/23 AsIs: (/18 } Tile{ AsIs: e.NewFunctions$a/12 } Tile{ AsIs: )/15 } Tile{ AsIs: )/19 AsIs: (/14 } Tile{ HalfReuse: # ColdFunction/0 HalfReuse: # SPEC/4 AsIs: s.ScopeClass/5 AsIs: t.Name/6 } Tile{ HalfReuse: # Sentences/11 AsIs: e.Sentences$a/2 HalfReuse: )/1 ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_ColdFunction]);
  refalrts::reinit_ident(context[4], identifiers[ident_SPEC]);
  refalrts::reinit_ident(context[11], identifiers[ident_Sentences]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[14], context[1] );
  refalrts::link_brackets( context[10], context[19] );
  refalrts::link_brackets( context[18], context[15] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[19], context[14] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[10], context[18] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecUnit_S1A1("SpecUnit$1=1", COOKIE1_, COOKIE2_, func_gen_SpecUnit_S1A1);


static refalrts::FnResult func_gen_SpecUnit_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & SpecUnit$2=1/4 s.ScopeClass/5 t.Name/6 (/10 e.SpecInfo$a/8 (/22 e.Histories$a/20 )/23 (/18 e.History/16 )/19 (/14 e.NewFunctions$a/12 )/15 )/11 e.Sentences$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_right( context[12], context[13], context[8], context[9] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_right( context[16], context[17], context[8], context[9] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_right( context[20], context[21], context[8], context[9] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.SpecInfo$a as range 8
  // closed e.Histories$a as range 20
  // closed e.History as range 16
  // closed e.NewFunctions$a as range 12
  // closed e.Sentences$a as range 2
  //DEBUG: s.ScopeClass: 5
  //DEBUG: t.Name: 6
  //DEBUG: e.SpecInfo$a: 8
  //DEBUG: e.Histories$a: 20
  //DEBUG: e.History: 16
  //DEBUG: e.NewFunctions$a: 12
  //DEBUG: e.Sentences$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.History/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/10 AsIs: e.SpecInfo$a/8 AsIs: (/22 AsIs: e.Histories$a/20 AsIs: )/23 AsIs: (/18 } Tile{ AsIs: e.NewFunctions$a/12 } Tile{ AsIs: )/15 } Tile{ AsIs: )/19 AsIs: (/14 } Tile{ HalfReuse: # ColdFunction/0 HalfReuse: # SPEC/4 AsIs: s.ScopeClass/5 AsIs: t.Name/6 } Tile{ HalfReuse: # Sentences/11 AsIs: e.Sentences$a/2 HalfReuse: )/1 ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_ColdFunction]);
  refalrts::reinit_ident(context[4], identifiers[ident_SPEC]);
  refalrts::reinit_ident(context[11], identifiers[ident_Sentences]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[14], context[1] );
  refalrts::link_brackets( context[10], context[19] );
  refalrts::link_brackets( context[18], context[15] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[19], context[14] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[10], context[18] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecUnit_S2A1("SpecUnit$2=1", COOKIE1_, COOKIE2_, func_gen_SpecUnit_S2A1);


static refalrts::FnResult func_SpecUnit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & SpecUnit/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecUnit/4 (/7 e.new1/5 (/15 e.new2/13 )/16 (/11 e.new3/9 )/12 )/8 t.new4/17 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 13
  // closed e.new3 as range 9
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & SpecUnit/4 (/7 e.new8/19 (/15 e.new10/21 )/16 (/11 e.new9/23 )/12 )/8 (/17 # Function/27 s.new5/28 t.new6/29 # Sentences/31 e.new7/25 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = 0;
    context[26] = 0;
    if( ! refalrts::brackets_term( context[25], context[26], context[17] ) )
      continue;
    context[27] = refalrts::ident_left( identifiers[ident_Function], context[25], context[26] );
    if( ! context[27] )
      continue;
    // closed e.new8 as range 19
    // closed e.new10 as range 21
    // closed e.new9 as range 23
    if( ! refalrts::svar_left( context[28], context[25], context[26] ) )
      continue;
    context[30] = refalrts::tvar_left( context[29], context[25], context[26] );
    if( ! context[30] )
      continue;
    context[31] = refalrts::ident_left( identifiers[ident_Sentences], context[25], context[26] );
    if( ! context[31] )
      continue;
    // closed e.new7 as range 25
    do {
      // </0 & SpecUnit/4 (/7 e.SpecInfo/32 (/15 e.Histories-B/40 (/46 t.Name/48 e.History/44 )/47 e.Histories-E/42 )/16 (/11 e.NewFunctions/36 )/12 )/8 (/17 # Function/27 s.ScopeClass/28 t.Name/29 # Sentences/31 e.Sentences/38 )/18 >/1
      context[32] = context[19];
      context[33] = context[20];
      context[34] = context[21];
      context[35] = context[22];
      context[36] = context[23];
      context[37] = context[24];
      context[38] = context[25];
      context[39] = context[26];
      // closed e.SpecInfo as range 32
      // closed e.NewFunctions as range 36
      // closed e.Sentences as range 38
      context[40] = 0;
      context[41] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[42] = context[34];
        context[43] = context[35];
        context[44] = 0;
        context[45] = 0;
        context[46] = refalrts::brackets_left( context[44], context[45], context[42], context[43] );
        if( ! context[46] )
          continue;
        refalrts::bracket_pointers(context[46], context[47]);
        context[49] = refalrts::repeated_stvar_left( vm, context[48], context[29], context[44], context[45] );
        if( ! context[49] )
          continue;
        // closed e.History as range 44
        // closed e.Histories-E as range 42
        //DEBUG: t.Name: 29
        //DEBUG: s.ScopeClass: 28
        //DEBUG: e.SpecInfo: 32
        //DEBUG: e.NewFunctions: 36
        //DEBUG: e.Sentences: 38
        //DEBUG: e.Histories-B: 40
        //DEBUG: e.History: 44
        //DEBUG: e.Histories-E: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </50 Tile{ HalfReuse: & SpecUnit$1=1/27 AsIs: s.ScopeClass/28 AsIs: t.Name/29 } Tile{ AsIs: </0 Reuse: & DoMapAccum@2/4 AsIs: (/7 AsIs: e.SpecInfo/32 AsIs: (/15 AsIs: e.Histories-B/40 AsIs: (/46 AsIs: t.Name/48 AsIs: e.History/44 AsIs: )/47 AsIs: e.Histories-E/42 AsIs: )/16 AsIs: (/11 } e.History/44/51 )/53 (/54 Tile{ AsIs: e.NewFunctions/36 } Tile{ AsIs: )/12 AsIs: )/8 AsIs: (/17 } Tile{ HalfReuse: )/31 AsIs: e.Sentences/38 HalfReuse: >/18 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::copy_evar(vm, context[51], context[52], context[44], context[45]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::reinit_name(context[27], functions[efunc_gen_SpecUnit_S1A1]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::reinit_close_call(context[18]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[31] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[54], context[12] );
        refalrts::link_brackets( context[11], context[53] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[46], context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[12], context[17] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_evar( res, context[27], context[30] );
        res = refalrts::splice_elem( res, context[50] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[40], context[41], context[34], context[35] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SpecUnit/4 (/7 e.SpecInfo/32 (/15 e.Histories/34 )/16 (/11 e.NewFunctions/36 )/12 )/8 (/17 # Function/27 s.ScopeClass/28 t.Name/29 # Sentences/31 e.Sentences/38 )/18 >/1
    context[32] = context[19];
    context[33] = context[20];
    context[34] = context[21];
    context[35] = context[22];
    context[36] = context[23];
    context[37] = context[24];
    context[38] = context[25];
    context[39] = context[26];
    // closed e.SpecInfo as range 32
    // closed e.Histories as range 34
    // closed e.NewFunctions as range 36
    // closed e.Sentences as range 38
    //DEBUG: t.Name: 29
    //DEBUG: s.ScopeClass: 28
    //DEBUG: e.SpecInfo: 32
    //DEBUG: e.Histories: 34
    //DEBUG: e.NewFunctions: 36
    //DEBUG: e.Sentences: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </40 Tile{ HalfReuse: & SpecUnit$2=1/27 AsIs: s.ScopeClass/28 AsIs: t.Name/29 } Tile{ AsIs: </0 Reuse: & DoMapAccum@2/4 AsIs: (/7 AsIs: e.SpecInfo/32 AsIs: (/15 AsIs: e.Histories/34 AsIs: )/16 AsIs: (/11 } )/41 (/42 Tile{ AsIs: e.NewFunctions/36 } Tile{ AsIs: )/12 AsIs: )/8 AsIs: (/17 } Tile{ HalfReuse: )/31 AsIs: e.Sentences/38 HalfReuse: >/18 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::reinit_name(context[27], functions[efunc_gen_SpecUnit_S2A1]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::reinit_close_bracket(context[31]);
    refalrts::reinit_close_call(context[18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[31] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[42], context[12] );
    refalrts::link_brackets( context[11], context[41] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[31];
    res = refalrts::splice_evar( res, context[12], context[17] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecUnit/4 (/7 e.SpecInfo/5 (/15 e.Histories/13 )/16 (/11 e.NewFunctions/9 )/12 )/8 t.Other/17 >/1
  // closed e.SpecInfo as range 5
  // closed e.Histories as range 13
  // closed e.NewFunctions as range 9
  //DEBUG: t.Other: 17
  //DEBUG: e.SpecInfo: 5
  //DEBUG: e.Histories: 13
  //DEBUG: e.NewFunctions: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SpecUnit/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.SpecInfo/5 AsIs: (/15 AsIs: e.Histories/13 AsIs: )/16 AsIs: (/11 AsIs: e.NewFunctions/9 AsIs: )/12 AsIs: )/8 AsIs: t.Other/17 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[18] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SpecUnit("SpecUnit", COOKIE1_, COOKIE2_, func_SpecUnit);


static refalrts::FnResult func_gen_SpecSentence_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & SpecSentence=2/4 (/7 e.Pattern/5 )/8 (/11 e.Conditions$a/9 )/12 (/15 e.SpecInfo$b/13 (/27 e.Histories$b/25 )/28 (/23 e.History$b/21 )/24 (/19 e.NewFunctions$b/17 )/20 )/16 e.Result$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[13], context[14] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[13], context[14] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[13], context[14] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.Pattern as range 5
  // closed e.Conditions$a as range 9
  // closed e.SpecInfo$b as range 13
  // closed e.Histories$b as range 25
  // closed e.History$b as range 21
  // closed e.NewFunctions$b as range 17
  // closed e.Result$a as range 2
  //DEBUG: e.Pattern: 5
  //DEBUG: e.Conditions$a: 9
  //DEBUG: e.SpecInfo$b: 13
  //DEBUG: e.Histories$b: 25
  //DEBUG: e.History$b: 21
  //DEBUG: e.NewFunctions$b: 17
  //DEBUG: e.Result$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/15 AsIs: e.SpecInfo$b/13 AsIs: (/27 AsIs: e.Histories$b/25 AsIs: )/28 AsIs: (/23 AsIs: e.History$b/21 AsIs: )/24 AsIs: (/19 AsIs: e.NewFunctions$b/17 AsIs: )/20 AsIs: )/16 } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Pattern/5 AsIs: )/8 } Tile{ AsIs: e.Conditions$a/9 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Result$a/2 } Tile{ AsIs: )/12 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecSentence_A2("SpecSentence=2", COOKIE1_, COOKIE2_, func_gen_SpecSentence_A2);


static refalrts::FnResult func_gen_SpecSentence_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & SpecSentence=1/4 (/7 e.Pattern/5 )/8 (/11 e.Result/9 )/12 (/15 e.SpecInfo$a/13 (/27 e.Histories$a/25 )/28 (/23 e.History$a/21 )/24 (/19 e.NewFunctions$a/17 )/20 )/16 e.Conditions$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[13], context[14] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[13], context[14] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[13], context[14] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.Pattern as range 5
  // closed e.Result as range 9
  // closed e.SpecInfo$a as range 13
  // closed e.Histories$a as range 25
  // closed e.History$a as range 21
  // closed e.NewFunctions$a as range 17
  // closed e.Conditions$a as range 2
  //DEBUG: e.Pattern: 5
  //DEBUG: e.Result: 9
  //DEBUG: e.SpecInfo$a: 13
  //DEBUG: e.Histories$a: 25
  //DEBUG: e.History$a: 21
  //DEBUG: e.NewFunctions$a: 17
  //DEBUG: e.Conditions$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecSentence=2/4 AsIs: (/7 AsIs: e.Pattern/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Conditions$a/2 } )/29 </30 & SpecResult=1/31 </32 Tile{ HalfReuse: & DoMapAccum@3/12 AsIs: (/15 AsIs: e.SpecInfo$a/13 AsIs: (/27 AsIs: e.Histories$a/25 AsIs: )/28 AsIs: (/23 AsIs: e.History$a/21 AsIs: )/24 AsIs: (/19 AsIs: e.NewFunctions$a/17 AsIs: )/20 AsIs: )/16 } (/33 )/34 Tile{ AsIs: e.Result/9 } >/35 >/36 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_gen_SpecResult_A1]);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_close_call(vm, context[35]);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecSentence_A2]);
  refalrts::reinit_name(context[12], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[32] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[11], context[29] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_evar( res, context[29], context[32] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecSentence_A1("SpecSentence=1", COOKIE1_, COOKIE2_, func_gen_SpecSentence_A1);


static refalrts::FnResult func_gen_SpecSentence_A1L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & SpecSentence=1\1=1/4 (/7 e.Name/5 )/8 (/11 e.ConditionPattern/9 )/12 (/15 e.SpecInfo$b/13 (/27 e.Histories$b/25 )/28 (/23 e.History$b/21 )/24 (/19 e.NewFunctions$b/17 )/20 )/16 e.ConditionResult$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[13], context[14] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[13], context[14] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[13], context[14] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.Name as range 5
  // closed e.ConditionPattern as range 9
  // closed e.SpecInfo$b as range 13
  // closed e.Histories$b as range 25
  // closed e.History$b as range 21
  // closed e.NewFunctions$b as range 17
  // closed e.ConditionResult$a as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.ConditionPattern: 9
  //DEBUG: e.SpecInfo$b: 13
  //DEBUG: e.Histories$b: 25
  //DEBUG: e.History$b: 21
  //DEBUG: e.NewFunctions$b: 17
  //DEBUG: e.ConditionResult$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/15 AsIs: e.SpecInfo$b/13 AsIs: (/27 AsIs: e.Histories$b/25 AsIs: )/28 AsIs: (/23 AsIs: e.History$b/21 AsIs: )/24 AsIs: (/19 AsIs: e.NewFunctions$b/17 AsIs: )/20 AsIs: )/16 } Tile{ HalfReuse: (/0 HalfReuse: # Condition/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.ConditionResult$a/2 } Tile{ AsIs: )/12 } (/29 Tile{ AsIs: e.ConditionPattern/9 } )/30 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Condition]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecSentence_A1L1A1("SpecSentence=1\\1=1", COOKIE1_, COOKIE2_, func_gen_SpecSentence_A1L1A1);


static refalrts::FnResult func_SpecSentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & SpecSentence/4 (/7 e.SpecInfo/5 (/27 e.Histories/25 )/28 (/23 e.History/21 )/24 (/19 e.NewFunctions/17 )/20 )/8 (/11 (/15 e.Pattern/13 )/16 e.Conditions/9 (/31 e.Result/29 )/32 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[5], context[6] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[5], context[6] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_right( context[29], context[30], context[9], context[10] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.SpecInfo as range 5
  // closed e.Histories as range 25
  // closed e.History as range 21
  // closed e.NewFunctions as range 17
  // closed e.Pattern as range 13
  // closed e.Conditions as range 9
  // closed e.Result as range 29
  //DEBUG: e.SpecInfo: 5
  //DEBUG: e.Histories: 25
  //DEBUG: e.History: 21
  //DEBUG: e.NewFunctions: 17
  //DEBUG: e.Pattern: 13
  //DEBUG: e.Conditions: 9
  //DEBUG: e.Result: 29

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </33 & SpecSentence=1/34 (/35 Tile{ AsIs: e.Pattern/13 } Tile{ AsIs: )/16 } Tile{ AsIs: (/31 AsIs: e.Result/29 AsIs: )/32 } Tile{ AsIs: </0 Reuse: & DoMapAccum@4/4 AsIs: (/7 AsIs: e.SpecInfo/5 AsIs: (/27 AsIs: e.Histories/25 AsIs: )/28 AsIs: (/23 AsIs: e.History/21 AsIs: )/24 AsIs: (/19 AsIs: e.NewFunctions/17 AsIs: )/20 AsIs: )/8 AsIs: (/11 HalfReuse: )/15 } Tile{ AsIs: e.Conditions/9 } Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_gen_SpecSentence_A1]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[35], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[15] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[33], context[35] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SpecSentence("SpecSentence", COOKIE1_, COOKIE2_, func_SpecSentence);


static refalrts::FnResult func_gen_SpecResult_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & SpecResult=1/4 (/7 e.SpecInfo$a/5 (/19 e.Histories$a/17 )/20 (/15 e.History$a/13 )/16 (/11 e.NewFunctions$a/9 )/12 )/8 e.Result$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.SpecInfo$a as range 5
  // closed e.Histories$a as range 17
  // closed e.History$a as range 13
  // closed e.NewFunctions$a as range 9
  // closed e.Result$a as range 2
  //DEBUG: e.SpecInfo$a: 5
  //DEBUG: e.Histories$a: 17
  //DEBUG: e.History$a: 13
  //DEBUG: e.NewFunctions$a: 9
  //DEBUG: e.Result$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: (/7 AsIs: e.SpecInfo$a/5 AsIs: (/19 AsIs: e.Histories$a/17 AsIs: )/20 AsIs: (/15 AsIs: e.History$a/13 AsIs: )/16 AsIs: (/11 AsIs: e.NewFunctions$a/9 AsIs: )/12 AsIs: )/8 } (/21 )/22 Tile{ AsIs: e.Result$a/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecResult_A1("SpecResult=1", COOKIE1_, COOKIE2_, func_gen_SpecResult_A1);


static refalrts::FnResult func_SpecResult(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & SpecResult/4 (/7 e.SpecInfo/5 (/19 e.Histories/17 )/20 (/15 e.History/13 )/16 (/11 e.NewFunctions/9 )/12 )/8 e.Result/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.SpecInfo as range 5
  // closed e.Histories as range 17
  // closed e.History as range 13
  // closed e.NewFunctions as range 9
  // closed e.Result as range 2
  //DEBUG: e.SpecInfo: 5
  //DEBUG: e.Histories: 17
  //DEBUG: e.History: 13
  //DEBUG: e.NewFunctions: 9
  //DEBUG: e.Result: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & SpecResult=1/22 Tile{ AsIs: </0 Reuse: & DoMapAccum@3/4 AsIs: (/7 AsIs: e.SpecInfo/5 AsIs: (/19 AsIs: e.Histories/17 AsIs: )/20 AsIs: (/15 AsIs: e.History/13 AsIs: )/16 AsIs: (/11 AsIs: e.NewFunctions/9 AsIs: )/12 AsIs: )/8 } (/23 )/24 Tile{ AsIs: e.Result/2 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_SpecResult_A1]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SpecResult("SpecResult", COOKIE1_, COOKIE2_, func_SpecResult);


static refalrts::FnResult func_SpecResultm_Pass(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & SpecResult-Pass/4 s.Pass/5 (/8 e.SpecInfo/6 (/20 e.Histories/18 )/21 (/16 e.History/14 )/17 (/12 e.NewFunctions/10 )/13 )/9 e.Result/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_right( context[10], context[11], context[6], context[7] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_right( context[14], context[15], context[6], context[7] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_right( context[18], context[19], context[6], context[7] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.SpecInfo as range 6
  // closed e.Histories as range 18
  // closed e.History as range 14
  // closed e.NewFunctions as range 10
  // closed e.Result as range 2
  //DEBUG: s.Pass: 5
  //DEBUG: e.SpecInfo: 6
  //DEBUG: e.Histories: 18
  //DEBUG: e.History: 14
  //DEBUG: e.NewFunctions: 10
  //DEBUG: e.Result: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: s.Pass/5 AsIs: (/8 AsIs: e.SpecInfo/6 AsIs: (/20 AsIs: e.Histories/18 AsIs: )/21 AsIs: (/16 AsIs: e.History/14 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions/10 AsIs: )/13 AsIs: )/9 } (/22 )/23 Tile{ AsIs: e.Result/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SpecResultm_Pass("SpecResult-Pass", COOKIE1_, COOKIE2_, func_SpecResultm_Pass);


static refalrts::FnResult func_gen_SpecTerm_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & SpecTerm$2=2/4 (/7 e.SpecInfo$a/5 )/8 (/11 e.Histories$a/9 )/12 (/15 e.History$a/13 )/16 (/19 e.NewFunctions$a/17 )/20 (/23 e.Name/21 )/24 (/27 e.Expression$a/25 )/28 s.TrySpecCall/29 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.SpecInfo$a as range 5
  // closed e.Histories$a as range 9
  // closed e.History$a as range 13
  // closed e.NewFunctions$a as range 17
  // closed e.Name as range 21
  // closed e.Expression$a as range 25
  if( ! refalrts::svar_left( context[29], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.SpecInfo$a: 5
  //DEBUG: e.Histories$a: 9
  //DEBUG: e.History$a: 13
  //DEBUG: e.NewFunctions$a: 17
  //DEBUG: e.Name: 21
  //DEBUG: e.Expression$a: 25
  //DEBUG: s.TrySpecCall: 29

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.TrySpecCall/29 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 HalfReuse: s.TrySpecCall29 /4 AsIs: (/7 } Tile{ AsIs: e.SpecInfo$a/5 } Tile{ AsIs: (/11 AsIs: e.Histories$a/9 AsIs: )/12 AsIs: (/15 AsIs: e.History$a/13 AsIs: )/16 AsIs: (/19 AsIs: e.NewFunctions$a/17 AsIs: )/20 HalfReuse: )/23 } Tile{ HalfReuse: (/8 } # CallBrackets/30 (/31 Tile{ HalfReuse: # Symbol/24 } # Name/32 Tile{ AsIs: e.Name/21 } Tile{ HalfReuse: )/27 AsIs: e.Expression$a/25 AsIs: )/28 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[30], identifiers[ident_CallBrackets]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_ident(vm, context[32], identifiers[ident_Name]);
  refalrts::reinit_svar( context[4], context[29] );
  refalrts::reinit_close_bracket(context[23]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[24], identifiers[ident_Symbol]);
  refalrts::reinit_close_bracket(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[28] );
  refalrts::link_brackets( context[31], context[27] );
  refalrts::link_brackets( context[7], context[23] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[11], context[23] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S2A2("SpecTerm$2=2", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S2A2);


static refalrts::FnResult func_gen_SpecTerm_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & SpecTerm$2=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecTerm$2=1/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 (/24 e.new4/22 )/25 (/20 e.new5/18 )/21 (/16 e.new6/14 )/17 )/13 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_right( context[14], context[15], context[10], context[11] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_right( context[18], context[19], context[10], context[11] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_right( context[22], context[23], context[10], context[11] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new3 as range 10
  // closed e.new4 as range 22
  // closed e.new5 as range 18
  // closed e.new6 as range 14
  // closed e.new7 as range 2
  do {
    // </0 & SpecTerm$2=1/4 (/7 e.Name/26 )/8 # Functions/9 (/12 e.SpecInfo$a/28 (/24 e.Histories$a/30 )/25 (/20 e.History$a/32 )/21 (/16 e.NewFunctions$a/34 )/17 )/13 e.Expression$a/36 >/1
    context[26] = context[5];
    context[27] = context[6];
    context[28] = context[10];
    context[29] = context[11];
    context[30] = context[22];
    context[31] = context[23];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[14];
    context[35] = context[15];
    context[36] = context[2];
    context[37] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Functions], context[9] ) )
      continue;
    // closed e.Name as range 26
    // closed e.SpecInfo$a as range 28
    // closed e.Histories$a as range 30
    // closed e.History$a as range 32
    // closed e.NewFunctions$a as range 34
    // closed e.Expression$a as range 36
    //DEBUG: e.Name: 26
    //DEBUG: e.SpecInfo$a: 28
    //DEBUG: e.Histories$a: 30
    //DEBUG: e.History$a: 32
    //DEBUG: e.NewFunctions$a: 34
    //DEBUG: e.Expression$a: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & TrySpecCall/9 AsIs: (/12 AsIs: e.SpecInfo$a/28 AsIs: (/24 AsIs: e.Histories$a/30 AsIs: )/25 AsIs: (/20 AsIs: e.History$a/32 AsIs: )/21 AsIs: (/16 AsIs: e.NewFunctions$a/34 AsIs: )/17 AsIs: )/13 } Tile{ HalfReuse: (/0 HalfReuse: # CallBrackets/4 AsIs: (/7 } # Symbol/38 # Name/39 Tile{ AsIs: e.Name/26 } )/40 Tile{ AsIs: e.Expression$a/36 } )/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[38], identifiers[ident_Symbol]);
    refalrts::alloc_ident(vm, context[39], identifiers[ident_Name]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[9], functions[efunc_TrySpecCall]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[0], context[41] );
    refalrts::link_brackets( context[7], context[40] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SpecTerm$2=1/4 (/7 e.Name/26 )/8 # Closures/9 (/12 e.SpecInfo$a/28 (/24 e.Histories$a/30 )/25 (/20 e.History$a/32 )/21 (/16 e.NewFunctions$a/34 )/17 )/13 e.Expression$a/36 >/1
    context[26] = context[5];
    context[27] = context[6];
    context[28] = context[10];
    context[29] = context[11];
    context[30] = context[22];
    context[31] = context[23];
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[14];
    context[35] = context[15];
    context[36] = context[2];
    context[37] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Closures], context[9] ) )
      continue;
    // closed e.Name as range 26
    // closed e.SpecInfo$a as range 28
    // closed e.Histories$a as range 30
    // closed e.History$a as range 32
    // closed e.NewFunctions$a as range 34
    // closed e.Expression$a as range 36
    //DEBUG: e.Name: 26
    //DEBUG: e.SpecInfo$a: 28
    //DEBUG: e.Histories$a: 30
    //DEBUG: e.History$a: 32
    //DEBUG: e.NewFunctions$a: 34
    //DEBUG: e.Expression$a: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/12 AsIs: e.SpecInfo$a/28 AsIs: (/24 AsIs: e.Histories$a/30 AsIs: )/25 AsIs: (/20 AsIs: e.History$a/32 AsIs: )/21 AsIs: (/16 AsIs: e.NewFunctions$a/34 AsIs: )/17 AsIs: )/13 } (/38 Tile{ Reuse: # CallBrackets/9 } Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Name/7 AsIs: e.Name/26 AsIs: )/8 } Tile{ AsIs: e.Expression$a/36 } Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::update_ident(context[9], identifiers[ident_CallBrackets]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[7], identifiers[ident_Name]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[38], context[1] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecTerm$2=1/4 (/7 e.Name/5 )/8 s.Pass/9 (/12 e.SpecInfo$a/10 (/24 e.Histories$a/22 )/25 (/20 e.History$a/18 )/21 (/16 e.NewFunctions$a/14 )/17 )/13 e.Expression$a/2 >/1
  // closed e.Name as range 5
  // closed e.SpecInfo$a as range 10
  // closed e.Histories$a as range 22
  // closed e.History$a as range 18
  // closed e.NewFunctions$a as range 14
  // closed e.Expression$a as range 2
  //DEBUG: s.Pass: 9
  //DEBUG: e.Name: 5
  //DEBUG: e.SpecInfo$a: 10
  //DEBUG: e.Histories$a: 22
  //DEBUG: e.History$a: 18
  //DEBUG: e.NewFunctions$a: 14
  //DEBUG: e.Expression$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$2=2/4 AsIs: (/7 } Tile{ AsIs: e.SpecInfo$a/10 } )/26 Tile{ AsIs: (/24 AsIs: e.Histories$a/22 AsIs: )/25 AsIs: (/20 AsIs: e.History$a/18 AsIs: )/21 AsIs: (/16 AsIs: e.NewFunctions$a/14 AsIs: )/17 HalfReuse: (/13 } Tile{ AsIs: e.Name/5 } )/27 (/28 Tile{ AsIs: e.Expression$a/2 } )/29 </30 Tile{ HalfReuse: & SpecTerm$2=2:1*2/8 AsIs: s.Pass/9 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S2A2]);
  refalrts::reinit_open_bracket(context[13]);
  refalrts::reinit_name(context[8], functions[efunc_gen_SpecTerm_S2A2B1D2]);
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[30] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[13], context[27] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[7], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[24], context[13] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S2A1("SpecTerm$2=1", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S2A1);


static refalrts::FnResult func_gen_SpecTerm_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & SpecTerm$3=1/4 (/7 e.SpecInfo$a/5 (/19 e.Histories$a/17 )/20 (/15 e.History$a/13 )/16 (/11 e.NewFunctions$a/9 )/12 )/8 e.Expression$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.SpecInfo$a as range 5
  // closed e.Histories$a as range 17
  // closed e.History$a as range 13
  // closed e.NewFunctions$a as range 9
  // closed e.Expression$a as range 2
  //DEBUG: e.SpecInfo$a: 5
  //DEBUG: e.Histories$a: 17
  //DEBUG: e.History$a: 13
  //DEBUG: e.NewFunctions$a: 9
  //DEBUG: e.Expression$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.SpecInfo$a/5 AsIs: (/19 AsIs: e.Histories$a/17 AsIs: )/20 AsIs: (/15 AsIs: e.History$a/13 AsIs: )/16 AsIs: (/11 AsIs: e.NewFunctions$a/9 AsIs: )/12 AsIs: )/8 } Tile{ HalfReuse: (/0 HalfReuse: # CallBrackets/4 } Tile{ AsIs: e.Expression$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S3A1("SpecTerm$3=1", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S3A1);


static refalrts::FnResult func_gen_SpecTerm_S4A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & SpecTerm$4=3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecTerm$4=3/4 (/7 e.new1/5 (/24 e.new2/22 )/25 (/20 e.new3/18 )/21 (/16 e.new4/14 )/17 )/8 (/11 # CallBrackets/13 e.new5/9 (/28 # Var/30 'e'/31 '@'/32 )/29 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = refalrts::ident_left( identifiers[ident_CallBrackets], context[9], context[10] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_right( context[14], context[15], context[5], context[6] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_right( context[18], context[19], context[5], context[6] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_right( context[22], context[23], context[5], context[6] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_right( context[26], context[27], context[9], context[10] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = refalrts::ident_left( identifiers[ident_Var], context[26], context[27] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  context[31] = refalrts::char_left( 'e', context[26], context[27] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  context[32] = refalrts::char_left( '@', context[26], context[27] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[26], context[27] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 22
  // closed e.new3 as range 18
  // closed e.new4 as range 14
  // closed e.new5 as range 9
  do {
    // </0 & SpecTerm$4=3/4 (/7 e.SpecInfo$b/33 (/24 e.Histories$b/35 )/25 (/20 e.History$b/37 )/21 (/16 e.NewFunctions$b/39 )/17 )/8 (/11 # CallBrackets/13 (/45 # Symbol/47 # Name/48 e.2/43 )/46 (/28 # Var/30 'e'/31 '@'/32 )/29 )/12 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[22];
    context[36] = context[23];
    context[37] = context[18];
    context[38] = context[19];
    context[39] = context[14];
    context[40] = context[15];
    context[41] = context[9];
    context[42] = context[10];
    context[43] = 0;
    context[44] = 0;
    context[45] = refalrts::brackets_left( context[43], context[44], context[41], context[42] );
    if( ! context[45] )
      continue;
    refalrts::bracket_pointers(context[45], context[46]);
    context[47] = refalrts::ident_left( identifiers[ident_Symbol], context[43], context[44] );
    if( ! context[47] )
      continue;
    context[48] = refalrts::ident_left( identifiers[ident_Name], context[43], context[44] );
    if( ! context[48] )
      continue;
    if( ! refalrts::empty_seq( context[41], context[42] ) )
      continue;
    // closed e.SpecInfo$b as range 33
    // closed e.Histories$b as range 35
    // closed e.History$b as range 37
    // closed e.NewFunctions$b as range 39
    // closed e.2 as range 43
    //DEBUG: e.SpecInfo$b: 33
    //DEBUG: e.Histories$b: 35
    //DEBUG: e.History$b: 37
    //DEBUG: e.NewFunctions$b: 39
    //DEBUG: e.2: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SpecTerm$4=3/4 {REMOVED TILE} # Symbol/47 # Name/48 {REMOVED TILE} )/46 (/28 # Var/30 'e'/31 '@'/32 )/29 )/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.SpecInfo$b/33 AsIs: (/24 AsIs: e.Histories$b/35 AsIs: )/25 AsIs: (/20 AsIs: e.History$b/37 AsIs: )/21 AsIs: (/16 AsIs: e.NewFunctions$b/39 AsIs: )/17 AsIs: )/8 AsIs: (/11 Reuse: # Symbol/13 HalfReuse: # Name/45 } Tile{ AsIs: e.2/43 } Tile{ HalfReuse: )/1 ]] }
    refalrts::update_ident(context[13], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[45], identifiers[ident_Name]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[7], context[45] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecTerm$4=3/4 (/7 e.SpecInfo$b/5 (/24 e.Histories$b/22 )/25 (/20 e.History$b/18 )/21 (/16 e.NewFunctions$b/14 )/17 )/8 (/11 # CallBrackets/13 e.ClosureContent$b/9 (/28 # Var/30 'e'/31 '@'/32 )/29 )/12 >/1
  // closed e.SpecInfo$b as range 5
  // closed e.Histories$b as range 22
  // closed e.History$b as range 18
  // closed e.NewFunctions$b as range 14
  // closed e.ClosureContent$b as range 9
  //DEBUG: e.SpecInfo$b: 5
  //DEBUG: e.Histories$b: 22
  //DEBUG: e.History$b: 18
  //DEBUG: e.NewFunctions$b: 14
  //DEBUG: e.ClosureContent$b: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SpecTerm$4=3/4 {REMOVED TILE} # Var/30 'e'/31 '@'/32 )/29 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.SpecInfo$b/5 AsIs: (/24 AsIs: e.Histories$b/22 AsIs: )/25 AsIs: (/20 AsIs: e.History$b/18 AsIs: )/21 AsIs: (/16 AsIs: e.NewFunctions$b/14 AsIs: )/17 AsIs: )/8 AsIs: (/11 Reuse: # ClosureBrackets/13 AsIs: e.ClosureContent$b/9 HalfReuse: )/28 } Tile{ ]] }
  refalrts::update_ident(context[13], identifiers[ident_ClosureBrackets]);
  refalrts::reinit_close_bracket(context[28]);
  refalrts::link_brackets( context[11], context[28] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[28] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S4A3("SpecTerm$4=3", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S4A3);


static refalrts::FnResult func_gen_SpecTerm_S4A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & SpecTerm$4=2/4 (/7 e.SpecInfo$a/5 )/8 (/11 e.Histories$a/9 )/12 (/15 e.History$a/13 )/16 (/19 e.NewFunctions$a/17 )/20 (/23 e.ClosureContent$a/21 )/24 s.TrySpecCall/25 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.SpecInfo$a as range 5
  // closed e.Histories$a as range 9
  // closed e.History$a as range 13
  // closed e.NewFunctions$a as range 17
  // closed e.ClosureContent$a as range 21
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.SpecInfo$a: 5
  //DEBUG: e.Histories$a: 9
  //DEBUG: e.History$a: 13
  //DEBUG: e.NewFunctions$a: 17
  //DEBUG: e.ClosureContent$a: 21
  //DEBUG: s.TrySpecCall: 25

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$4=3/4 HalfReuse: </7 } Tile{ AsIs: s.TrySpecCall/25 } (/26 Tile{ AsIs: e.SpecInfo$a/5 } Tile{ AsIs: (/11 AsIs: e.Histories$a/9 AsIs: )/12 AsIs: (/15 AsIs: e.History$a/13 AsIs: )/16 AsIs: (/19 AsIs: e.NewFunctions$a/17 AsIs: )/20 HalfReuse: )/23 } (/27 # CallBrackets/28 Tile{ AsIs: e.ClosureContent$a/21 } (/29 # Var/30"e@"/31 Tile{ AsIs: )/24 } Tile{ AsIs: )/8 } >/33 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_ident(vm, context[28], identifiers[ident_CallBrackets]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_ident(vm, context[30], identifiers[ident_Var]);
  refalrts::alloc_chars(vm, context[31], context[32], "e@", 2);
  refalrts::alloc_close_call(vm, context[33]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S4A3]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_close_bracket(context[23]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[27], context[8] );
  refalrts::link_brackets( context[29], context[24] );
  refalrts::link_brackets( context[26], context[23] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[29], context[32] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[11], context[23] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S4A2("SpecTerm$4=2", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S4A2);


static refalrts::FnResult func_gen_SpecTerm_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & SpecTerm$4=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecTerm$4=1/4 s.new1/5 (/8 e.new2/6 (/20 e.new3/18 )/21 (/16 e.new4/14 )/17 (/12 e.new5/10 )/13 )/9 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_right( context[10], context[11], context[6], context[7] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_right( context[14], context[15], context[6], context[7] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_right( context[18], context[19], context[6], context[7] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 18
  // closed e.new4 as range 14
  // closed e.new5 as range 10
  // closed e.new6 as range 2
  do {
    // </0 & SpecTerm$4=1/4 # Functions/5 (/8 e.new8/22 (/20 e.new11/24 )/21 (/16 e.new10/26 )/17 (/12 e.new9/28 )/13 )/9 e.new7/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[10];
    context[29] = context[11];
    context[30] = context[2];
    context[31] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Functions], context[5] ) )
      continue;
    // closed e.new8 as range 22
    // closed e.new11 as range 24
    // closed e.new10 as range 26
    // closed e.new9 as range 28
    // closed e.new7 as range 30
    do {
      // </0 & SpecTerm$4=1/4 # Functions/5 (/8 e.SpecInfo$a/32 (/20 e.Histories$a/34 )/21 (/16 e.History$a/36 )/17 (/12 e.NewFunctions$a/38 )/13 )/9 (/44 # Symbol/46 # Name/47 e.2/42 )/45 >/1
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = context[27];
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_left( context[42], context[43], context[40], context[41] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = refalrts::ident_left( identifiers[ident_Symbol], context[42], context[43] );
      if( ! context[46] )
        continue;
      context[47] = refalrts::ident_left( identifiers[ident_Name], context[42], context[43] );
      if( ! context[47] )
        continue;
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      // closed e.SpecInfo$a as range 32
      // closed e.Histories$a as range 34
      // closed e.History$a as range 36
      // closed e.NewFunctions$a as range 38
      // closed e.2 as range 42
      //DEBUG: e.SpecInfo$a: 32
      //DEBUG: e.Histories$a: 34
      //DEBUG: e.History$a: 36
      //DEBUG: e.NewFunctions$a: 38
      //DEBUG: e.2: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & SpecTerm$4=1/4 # Functions/5 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.SpecInfo$a/32 AsIs: (/20 AsIs: e.Histories$a/34 AsIs: )/21 AsIs: (/16 AsIs: e.History$a/36 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions$a/38 AsIs: )/13 AsIs: )/9 AsIs: (/44 AsIs: # Symbol/46 AsIs: # Name/47 AsIs: e.2/42 AsIs: )/45 } Tile{ ]] }
      refalrts::link_brackets( context[44], context[45] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[8], context[45] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SpecTerm$4=1/4 # Functions/5 (/8 e.SpecInfo$a/32 (/20 e.Histories$a/34 )/21 (/16 e.History$a/36 )/17 (/12 e.NewFunctions$a/38 )/13 )/9 e.ClosureContent$a/40 >/1
    context[32] = context[22];
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    context[37] = context[27];
    context[38] = context[28];
    context[39] = context[29];
    context[40] = context[30];
    context[41] = context[31];
    // closed e.SpecInfo$a as range 32
    // closed e.Histories$a as range 34
    // closed e.History$a as range 36
    // closed e.NewFunctions$a as range 38
    // closed e.ClosureContent$a as range 40
    //DEBUG: e.SpecInfo$a: 32
    //DEBUG: e.Histories$a: 34
    //DEBUG: e.History$a: 36
    //DEBUG: e.NewFunctions$a: 38
    //DEBUG: e.ClosureContent$a: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.SpecInfo$a/32 AsIs: (/20 AsIs: e.Histories$a/34 AsIs: )/21 AsIs: (/16 AsIs: e.History$a/36 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions$a/38 AsIs: )/13 AsIs: )/9 } Tile{ HalfReuse: (/4 Reuse: # ClosureBrackets/5 } Tile{ AsIs: e.ClosureContent$a/40 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::update_ident(context[5], identifiers[ident_ClosureBrackets]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[4], context[1] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[4], context[5] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SpecTerm$4=1/4 # Closures/5 (/8 e.SpecInfo$a/22 (/20 e.Histories$a/24 )/21 (/16 e.History$a/26 )/17 (/12 e.NewFunctions$a/28 )/13 )/9 e.ClosureContent$a/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[10];
    context[29] = context[11];
    context[30] = context[2];
    context[31] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Closures], context[5] ) )
      continue;
    // closed e.SpecInfo$a as range 22
    // closed e.Histories$a as range 24
    // closed e.History$a as range 26
    // closed e.NewFunctions$a as range 28
    // closed e.ClosureContent$a as range 30
    //DEBUG: e.SpecInfo$a: 22
    //DEBUG: e.Histories$a: 24
    //DEBUG: e.History$a: 26
    //DEBUG: e.NewFunctions$a: 28
    //DEBUG: e.ClosureContent$a: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </32 Tile{ HalfReuse: & SpecTerm$4=3/0 HalfReuse: </4 HalfReuse: & TrySpecCall/5 AsIs: (/8 AsIs: e.SpecInfo$a/22 AsIs: (/20 AsIs: e.Histories$a/24 AsIs: )/21 AsIs: (/16 AsIs: e.History$a/26 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions$a/28 AsIs: )/13 AsIs: )/9 } (/33 # CallBrackets/34 Tile{ AsIs: e.ClosureContent$a/30 } (/35 # Var/36"e@"/37 )/39 )/40 >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_ident(vm, context[34], identifiers[ident_CallBrackets]);
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::alloc_ident(vm, context[36], identifiers[ident_Var]);
    refalrts::alloc_chars(vm, context[37], context[38], "e@", 2);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::reinit_name(context[0], functions[efunc_gen_SpecTerm_S4A3]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_TrySpecCall]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[33], context[40] );
    refalrts::link_brackets( context[35], context[39] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[41] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecTerm$4=1/4 s.Pass/5 (/8 e.SpecInfo$a/6 (/20 e.Histories$a/18 )/21 (/16 e.History$a/14 )/17 (/12 e.NewFunctions$a/10 )/13 )/9 e.ClosureContent$a/2 >/1
  // closed e.SpecInfo$a as range 6
  // closed e.Histories$a as range 18
  // closed e.History$a as range 14
  // closed e.NewFunctions$a as range 10
  // closed e.ClosureContent$a as range 2
  //DEBUG: s.Pass: 5
  //DEBUG: e.SpecInfo$a: 6
  //DEBUG: e.Histories$a: 18
  //DEBUG: e.History$a: 14
  //DEBUG: e.NewFunctions$a: 10
  //DEBUG: e.ClosureContent$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 & SpecTerm$4=2/23 (/24 Tile{ AsIs: e.SpecInfo$a/6 } )/25 Tile{ AsIs: (/20 AsIs: e.Histories$a/18 AsIs: )/21 AsIs: (/16 AsIs: e.History$a/14 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions$a/10 AsIs: )/13 HalfReuse: (/9 AsIs: e.ClosureContent$a/2 HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & SpecTerm$4=2:1*2/4 AsIs: s.Pass/5 HalfReuse: >/8 } >/26 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_SpecTerm_S4A2]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::reinit_open_bracket(context[9]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S4A2B1D2]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[1] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[20], context[1] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[22], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S4A1("SpecTerm$4=1", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S4A1);


static refalrts::FnResult func_gen_SpecTerm_S5A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & SpecTerm$5=1/4 (/7 e.SpecInfo$a/5 (/19 e.Histories$a/17 )/20 (/15 e.History$a/13 )/16 (/11 e.NewFunctions$a/9 )/12 )/8 e.Expression$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.SpecInfo$a as range 5
  // closed e.Histories$a as range 17
  // closed e.History$a as range 13
  // closed e.NewFunctions$a as range 9
  // closed e.Expression$a as range 2
  //DEBUG: e.SpecInfo$a: 5
  //DEBUG: e.Histories$a: 17
  //DEBUG: e.History$a: 13
  //DEBUG: e.NewFunctions$a: 9
  //DEBUG: e.Expression$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.SpecInfo$a/5 AsIs: (/19 AsIs: e.Histories$a/17 AsIs: )/20 AsIs: (/15 AsIs: e.History$a/13 AsIs: )/16 AsIs: (/11 AsIs: e.NewFunctions$a/9 AsIs: )/12 AsIs: )/8 } Tile{ HalfReuse: (/0 HalfReuse: # Brackets/4 } Tile{ AsIs: e.Expression$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S5A1("SpecTerm$5=1", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S5A1);


static refalrts::FnResult func_gen_SpecTerm_S6A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & SpecTerm$6=1/4 (/7 e.Name/5 )/8 (/11 e.SpecInfo$a/9 (/23 e.Histories$a/21 )/24 (/19 e.History$a/17 )/20 (/15 e.NewFunctions$a/13 )/16 )/12 e.Expression$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[9], context[10] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[9], context[10] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.Name as range 5
  // closed e.SpecInfo$a as range 9
  // closed e.Histories$a as range 21
  // closed e.History$a as range 17
  // closed e.NewFunctions$a as range 13
  // closed e.Expression$a as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.SpecInfo$a: 9
  //DEBUG: e.Histories$a: 21
  //DEBUG: e.History$a: 17
  //DEBUG: e.NewFunctions$a: 13
  //DEBUG: e.Expression$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.SpecInfo$a/9 AsIs: (/23 AsIs: e.Histories$a/21 AsIs: )/24 AsIs: (/19 AsIs: e.History$a/17 AsIs: )/20 AsIs: (/15 AsIs: e.NewFunctions$a/13 AsIs: )/16 AsIs: )/12 } Tile{ HalfReuse: (/0 HalfReuse: # ADT-Brackets/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 } Tile{ AsIs: e.Expression$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_ADTm_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S6A1("SpecTerm$6=1", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S6A1);


static refalrts::FnResult func_SpecTerm(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 80 elems
  refalrts::Iter context[80];
  refalrts::zeros( context, 80 );
  // </0 & SpecTerm/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecTerm/4 s.new1/5 (/8 e.new2/6 (/20 e.new3/18 )/21 (/16 e.new4/14 )/17 (/12 e.new5/10 )/13 )/9 t.new6/22 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_right( context[10], context[11], context[6], context[7] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_right( context[14], context[15], context[6], context[7] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_right( context[18], context[19], context[6], context[7] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 18
  // closed e.new4 as range 14
  // closed e.new5 as range 10
  context[23] = refalrts::tvar_left( context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & SpecTerm/4 s.new7/5 (/8 e.new10/24 (/20 e.new13/26 )/21 (/16 e.new12/28 )/17 (/12 e.new11/30 )/13 )/9 (/22 s.new8/34 e.new9/32 )/23 >/1
    context[24] = context[6];
    context[25] = context[7];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[14];
    context[29] = context[15];
    context[30] = context[10];
    context[31] = context[11];
    context[32] = 0;
    context[33] = 0;
    if( ! refalrts::brackets_term( context[32], context[33], context[22] ) )
      continue;
    // closed e.new10 as range 24
    // closed e.new13 as range 26
    // closed e.new12 as range 28
    // closed e.new11 as range 30
    if( ! refalrts::svar_left( context[34], context[32], context[33] ) )
      continue;
    // closed e.new9 as range 32
    do {
      // </0 & SpecTerm/4 s.new14/5 (/8 e.new16/35 (/20 e.new19/37 )/21 (/16 e.new18/39 )/17 (/12 e.new17/41 )/13 )/9 (/22 # CallBrackets/34 e.new15/43 )/23 >/1
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[34] ) )
        continue;
      // closed e.new16 as range 35
      // closed e.new19 as range 37
      // closed e.new18 as range 39
      // closed e.new17 as range 41
      // closed e.new15 as range 43
      do {
        // </0 & SpecTerm/4 s.new20/5 (/8 e.new23/45 (/20 e.new26/47 )/21 (/16 e.new25/49 )/17 (/12 e.new24/51 )/13 )/9 (/22 # CallBrackets/34 (/57 # Symbol/59 # Name/60 e.new21/55 )/58 e.new22/53 )/23 >/1
        context[45] = context[35];
        context[46] = context[36];
        context[47] = context[37];
        context[48] = context[38];
        context[49] = context[39];
        context[50] = context[40];
        context[51] = context[41];
        context[52] = context[42];
        context[53] = context[43];
        context[54] = context[44];
        context[55] = 0;
        context[56] = 0;
        context[57] = refalrts::brackets_left( context[55], context[56], context[53], context[54] );
        if( ! context[57] )
          continue;
        refalrts::bracket_pointers(context[57], context[58]);
        context[59] = refalrts::ident_left( identifiers[ident_Symbol], context[55], context[56] );
        if( ! context[59] )
          continue;
        context[60] = refalrts::ident_left( identifiers[ident_Name], context[55], context[56] );
        if( ! context[60] )
          continue;
        // closed e.new23 as range 45
        // closed e.new26 as range 47
        // closed e.new25 as range 49
        // closed e.new24 as range 51
        // closed e.new21 as range 55
        // closed e.new22 as range 53
        do {
          // </0 & SpecTerm/4 s.Pass/5 (/8 e.SpecInfo/61 (/20 e.Histories/63 )/21 (/16 e.History/65 )/17 (/12 e.NewFunctions/67 )/13 )/9 (/22 # CallBrackets/34 (/57 # Symbol/59 # Name/60 e.Name/69 )/58 e.Expression/71 )/23 >/1
          context[61] = context[45];
          context[62] = context[46];
          context[63] = context[47];
          context[64] = context[48];
          context[65] = context[49];
          context[66] = context[50];
          context[67] = context[51];
          context[68] = context[52];
          context[69] = context[55];
          context[70] = context[56];
          context[71] = context[53];
          context[72] = context[54];
          // closed e.SpecInfo as range 61
          // closed e.Histories as range 63
          // closed e.History as range 65
          // closed e.NewFunctions as range 67
          // closed e.Name as range 69
          // closed e.Expression as range 71
          //DEBUG: s.Pass: 5
          //DEBUG: e.SpecInfo: 61
          //DEBUG: e.Histories: 63
          //DEBUG: e.History: 65
          //DEBUG: e.NewFunctions: 67
          //DEBUG: e.Name: 69
          //DEBUG: e.Expression: 71
          //5: s.Pass
          //61: e.SpecInfo
          //63: e.Histories
          //65: e.History
          //67: e.NewFunctions
          //69: e.Name
          //71: e.Expression
          //76: e.Name

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[73]);
          refalrts::alloc_name(vm, context[75], functions[efunc_gen_SpecTerm_S1C1]);
          refalrts::copy_evar(vm, context[76], context[77], context[69], context[70]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[73] );
          res = refalrts::splice_elem( res, context[74] );
          res = refalrts::splice_evar( res, context[76], context[77] );
          res = refalrts::splice_elem( res, context[75] );
          res = refalrts::splice_elem( res, context[73] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </73 & SpecTerm$1?1/77 e._/75 '@'/79 0/78 >/74
            context[75] = 0;
            context[76] = 0;
            context[77] = refalrts::call_left( context[75], context[76], context[73], context[74] );
            context[78] = refalrts::number_right( 0UL, context[75], context[76] );
            if( ! context[78] )
              continue;
            context[79] = refalrts::char_right( '@', context[75], context[76] );
            if( ! context[79] )
              continue;
            // closed e._ as range 75
            //DEBUG: s.Pass: 5
            //DEBUG: e.SpecInfo: 61
            //DEBUG: e.Histories: 63
            //DEBUG: e.History: 65
            //DEBUG: e.NewFunctions: 67
            //DEBUG: e.Name: 69
            //DEBUG: e.Expression: 71
            //DEBUG: e._: 75

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & SpecTerm/4 s.Pass/5 {REMOVED TILE} {REMOVED TILE} )/23 {REMOVED TILE} e._/75 '@'/79 0/78 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.SpecInfo/61 AsIs: (/20 AsIs: e.Histories/63 AsIs: )/21 AsIs: (/16 AsIs: e.History/65 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions/67 AsIs: )/13 AsIs: )/9 AsIs: (/22 AsIs: # CallBrackets/34 AsIs: (/57 AsIs: # Symbol/59 AsIs: # Name/60 AsIs: e.Name/69 AsIs: )/58 } Tile{ AsIs: </73 Reuse: & ReplaceToGuards/77 } Tile{ AsIs: e.Expression/71 } Tile{ AsIs: >/74 HalfReuse: )/1 ]] }
            refalrts::update_name(context[77], functions[efunc_ReplaceToGuards]);
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[22], context[1] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[73] );
            refalrts::link_brackets( context[57], context[58] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::link_brackets( context[12], context[13] );
            refalrts::link_brackets( context[16], context[17] );
            refalrts::link_brackets( context[20], context[21] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[74];
            res = refalrts::splice_evar( res, context[71], context[72] );
            res = refalrts::splice_evar( res, context[73], context[77] );
            res = refalrts::splice_evar( res, context[8], context[58] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[73], context[74]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & SpecTerm/4 s.Pass/5 (/8 e.SpecInfo/61 (/20 e.Histories/63 )/21 (/16 e.History/65 )/17 (/12 e.NewFunctions/67 )/13 )/9 (/22 # CallBrackets/34 (/57 # Symbol/59 # Name/60 e.Name/69 )/58 e.Expression/71 )/23 >/1
        context[61] = context[45];
        context[62] = context[46];
        context[63] = context[47];
        context[64] = context[48];
        context[65] = context[49];
        context[66] = context[50];
        context[67] = context[51];
        context[68] = context[52];
        context[69] = context[55];
        context[70] = context[56];
        context[71] = context[53];
        context[72] = context[54];
        // closed e.SpecInfo as range 61
        // closed e.Histories as range 63
        // closed e.History as range 65
        // closed e.NewFunctions as range 67
        // closed e.Name as range 69
        // closed e.Expression as range 71
        //DEBUG: s.Pass: 5
        //DEBUG: e.SpecInfo: 61
        //DEBUG: e.Histories: 63
        //DEBUG: e.History: 65
        //DEBUG: e.NewFunctions: 67
        //DEBUG: e.Name: 69
        //DEBUG: e.Expression: 71

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </57 HalfReuse: & SpecTerm$2=1/59 HalfReuse: (/60 AsIs: e.Name/69 AsIs: )/58 } s.Pass/5/73 Tile{ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: s.Pass/5 AsIs: (/8 AsIs: e.SpecInfo/61 AsIs: (/20 AsIs: e.Histories/63 AsIs: )/21 AsIs: (/16 AsIs: e.History/65 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions/67 AsIs: )/13 AsIs: )/9 AsIs: (/22 HalfReuse: )/34 } Tile{ AsIs: e.Expression/71 } Tile{ HalfReuse: >/23 AsIs: >/1 ]] }
        refalrts::copy_stvar(vm, context[73], context[5]);
        refalrts::reinit_open_call(context[57]);
        refalrts::reinit_name(context[59], functions[efunc_gen_SpecTerm_S2A1]);
        refalrts::reinit_open_bracket(context[60]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
        refalrts::reinit_close_bracket(context[34]);
        refalrts::reinit_close_call(context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[22], context[34] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::link_brackets( context[60], context[58] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[23];
        res = refalrts::splice_evar( res, context[71], context[72] );
        res = refalrts::splice_evar( res, context[0], context[34] );
        res = refalrts::splice_elem( res, context[73] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & SpecTerm/4 s.Pass/5 (/8 e.SpecInfo/45 (/20 e.Histories/47 )/21 (/16 e.History/49 )/17 (/12 e.NewFunctions/51 )/13 )/9 (/22 # CallBrackets/34 e.Expression/53 )/23 >/1
      context[45] = context[35];
      context[46] = context[36];
      context[47] = context[37];
      context[48] = context[38];
      context[49] = context[39];
      context[50] = context[40];
      context[51] = context[41];
      context[52] = context[42];
      context[53] = context[43];
      context[54] = context[44];
      // closed e.SpecInfo as range 45
      // closed e.Histories as range 47
      // closed e.History as range 49
      // closed e.NewFunctions as range 51
      // closed e.Expression as range 53
      //DEBUG: s.Pass: 5
      //DEBUG: e.SpecInfo: 45
      //DEBUG: e.Histories: 47
      //DEBUG: e.History: 49
      //DEBUG: e.NewFunctions: 51
      //DEBUG: e.Expression: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </55 & SpecTerm$3=1/56 Tile{ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: s.Pass/5 AsIs: (/8 AsIs: e.SpecInfo/45 AsIs: (/20 AsIs: e.Histories/47 AsIs: )/21 AsIs: (/16 AsIs: e.History/49 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions/51 AsIs: )/13 AsIs: )/9 AsIs: (/22 HalfReuse: )/34 AsIs: e.Expression/53 HalfReuse: >/23 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_name(vm, context[56], functions[efunc_gen_SpecTerm_S3A1]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
      refalrts::reinit_close_bracket(context[34]);
      refalrts::reinit_close_call(context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[22], context[34] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[55], context[56] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SpecTerm/4 s.Pass/5 (/8 e.SpecInfo/35 (/20 e.Histories/37 )/21 (/16 e.History/39 )/17 (/12 e.NewFunctions/41 )/13 )/9 (/22 # ClosureBrackets/34 e.ClosureContent/43 )/23 >/1
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[34] ) )
        continue;
      // closed e.SpecInfo as range 35
      // closed e.Histories as range 37
      // closed e.History as range 39
      // closed e.NewFunctions as range 41
      // closed e.ClosureContent as range 43
      //DEBUG: s.Pass: 5
      //DEBUG: e.SpecInfo: 35
      //DEBUG: e.Histories: 37
      //DEBUG: e.History: 39
      //DEBUG: e.NewFunctions: 41
      //DEBUG: e.ClosureContent: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & SpecTerm$4=1/46 s.Pass/5/47 Tile{ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: s.Pass/5 AsIs: (/8 AsIs: e.SpecInfo/35 AsIs: (/20 AsIs: e.Histories/37 AsIs: )/21 AsIs: (/16 AsIs: e.History/39 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions/41 AsIs: )/13 AsIs: )/9 AsIs: (/22 HalfReuse: )/34 AsIs: e.ClosureContent/43 HalfReuse: >/23 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_gen_SpecTerm_S4A1]);
      refalrts::copy_stvar(vm, context[47], context[5]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
      refalrts::reinit_close_bracket(context[34]);
      refalrts::reinit_close_call(context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[22], context[34] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[45], context[47] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SpecTerm/4 s.Pass/5 (/8 e.SpecInfo/35 (/20 e.Histories/37 )/21 (/16 e.History/39 )/17 (/12 e.NewFunctions/41 )/13 )/9 (/22 # Brackets/34 e.Expression/43 )/23 >/1
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[34] ) )
        continue;
      // closed e.SpecInfo as range 35
      // closed e.Histories as range 37
      // closed e.History as range 39
      // closed e.NewFunctions as range 41
      // closed e.Expression as range 43
      //DEBUG: s.Pass: 5
      //DEBUG: e.SpecInfo: 35
      //DEBUG: e.Histories: 37
      //DEBUG: e.History: 39
      //DEBUG: e.NewFunctions: 41
      //DEBUG: e.Expression: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & SpecTerm$5=1/46 Tile{ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: s.Pass/5 AsIs: (/8 AsIs: e.SpecInfo/35 AsIs: (/20 AsIs: e.Histories/37 AsIs: )/21 AsIs: (/16 AsIs: e.History/39 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions/41 AsIs: )/13 AsIs: )/9 AsIs: (/22 HalfReuse: )/34 AsIs: e.Expression/43 HalfReuse: >/23 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_gen_SpecTerm_S5A1]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
      refalrts::reinit_close_bracket(context[34]);
      refalrts::reinit_close_call(context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[22], context[34] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[45], context[46] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SpecTerm/4 s.Pass/5 (/8 e.SpecInfo/35 (/20 e.Histories/37 )/21 (/16 e.History/39 )/17 (/12 e.NewFunctions/41 )/13 )/9 (/22 # ADT-Brackets/34 (/47 e.Name/45 )/48 e.Expression/43 )/23 >/1
    context[35] = context[24];
    context[36] = context[25];
    context[37] = context[26];
    context[38] = context[27];
    context[39] = context[28];
    context[40] = context[29];
    context[41] = context[30];
    context[42] = context[31];
    context[43] = context[32];
    context[44] = context[33];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[34] ) )
      continue;
    context[45] = 0;
    context[46] = 0;
    context[47] = refalrts::brackets_left( context[45], context[46], context[43], context[44] );
    if( ! context[47] )
      continue;
    refalrts::bracket_pointers(context[47], context[48]);
    // closed e.SpecInfo as range 35
    // closed e.Histories as range 37
    // closed e.History as range 39
    // closed e.NewFunctions as range 41
    // closed e.Name as range 45
    // closed e.Expression as range 43
    //DEBUG: s.Pass: 5
    //DEBUG: e.SpecInfo: 35
    //DEBUG: e.Histories: 37
    //DEBUG: e.History: 39
    //DEBUG: e.NewFunctions: 41
    //DEBUG: e.Name: 45
    //DEBUG: e.Expression: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </49 & SpecTerm$6=1/50 Tile{ AsIs: (/47 AsIs: e.Name/45 AsIs: )/48 } Tile{ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: s.Pass/5 AsIs: (/8 AsIs: e.SpecInfo/35 AsIs: (/20 AsIs: e.Histories/37 AsIs: )/21 AsIs: (/16 AsIs: e.History/39 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions/41 AsIs: )/13 AsIs: )/9 AsIs: (/22 HalfReuse: )/34 } Tile{ AsIs: e.Expression/43 } Tile{ HalfReuse: >/23 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_gen_SpecTerm_S6A1]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
    refalrts::reinit_close_bracket(context[34]);
    refalrts::reinit_close_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[22], context[34] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[47], context[48] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[23];
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[0], context[34] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecTerm/4 s.Pass/5 (/8 e.SpecInfo/6 (/20 e.Histories/18 )/21 (/16 e.History/14 )/17 (/12 e.NewFunctions/10 )/13 )/9 t.Other/22 >/1
  // closed e.SpecInfo as range 6
  // closed e.Histories as range 18
  // closed e.History as range 14
  // closed e.NewFunctions as range 10
  //DEBUG: t.Other: 22
  //DEBUG: s.Pass: 5
  //DEBUG: e.SpecInfo: 6
  //DEBUG: e.Histories: 18
  //DEBUG: e.History: 14
  //DEBUG: e.NewFunctions: 10

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SpecTerm/4 s.Pass/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.SpecInfo/6 AsIs: (/20 AsIs: e.Histories/18 AsIs: )/21 AsIs: (/16 AsIs: e.History/14 AsIs: )/17 AsIs: (/12 AsIs: e.NewFunctions/10 AsIs: )/13 AsIs: )/9 AsIs: t.Other/22 } Tile{ ]] }
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[23] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SpecTerm("SpecTerm", COOKIE1_, COOKIE2_, func_SpecTerm);


static refalrts::FnResult func_gen_ReplaceToGuards_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & ReplaceToGuards\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ReplaceToGuards\1/4 t.new1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ReplaceToGuards\1/4 (/5 s.new2/9 e.new3/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    // closed e.new3 as range 7
    do {
      // </0 & ReplaceToGuards\1/4 (/5 s.Brackets/9 e.Nested/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      // closed e.Nested as range 10
      //DEBUG: s.Brackets: 9
      //DEBUG: e.Nested: 10
      //9: s.Brackets
      //10: e.Nested

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[12]);
      refalrts::alloc_name(vm, context[14], functions[efunc_gen_ReplaceToGuards_L1S1C1]);
      refalrts::alloc_ident(vm, context[15], identifiers[ident_Brackets]);
      refalrts::alloc_ident(vm, context[16], identifiers[ident_CallBrackets]);
      refalrts::alloc_ident(vm, context[17], identifiers[ident_ClosureBrackets]);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[12] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[12] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </12 & ReplaceToGuards\1$1?1/16 e._/17 s.Brackets/21 e._0/19 >/13
        context[14] = 0;
        context[15] = 0;
        context[16] = refalrts::call_left( context[14], context[15], context[12], context[13] );
        context[17] = 0;
        context[18] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[19] = context[14];
          context[20] = context[15];
          if( ! refalrts::repeated_stvar_left( vm, context[21], context[9], context[19], context[20] ) )
            continue;
          // closed e._0 as range 19
          //DEBUG: s.Brackets: 9
          //DEBUG: e.Nested: 10
          //DEBUG: e._: 17
          //DEBUG: e._0: 19

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} & ReplaceToGuards\1/4 (/5 s.Brackets/9 {REMOVED TILE} {REMOVED TILE} e._/17 s.Brackets/21 e._0/19 {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: s.Brackets21 /6 AsIs: </12 Reuse: & ReplaceToGuards/16 } Tile{ AsIs: e.Nested/10 } Tile{ AsIs: >/13 HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_svar( context[6], context[21] );
          refalrts::update_name(context[16], functions[efunc_ReplaceToGuards]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[0], context[1] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[13];
          res = refalrts::splice_evar( res, context[10], context[11] );
          res = refalrts::splice_evar( res, context[6], context[16] );
          refalrts::splice_to_freelist_open( vm, context[0], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[17], context[18], context[14], context[15] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[12], context[13]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ReplaceToGuards\1/4 (/5 s.new4/9 t.new5/12 e.new6/10 )/6 >/1
    context[10] = context[7];
    context[11] = context[8];
    context[13] = refalrts::tvar_left( context[12], context[10], context[11] );
    if( ! context[13] )
      continue;
    // closed e.new6 as range 10
    do {
      // </0 & ReplaceToGuards\1/4 (/5 # ADT-Brackets/9 (/12 e.Name/16 )/13 e.Nested/14 )/6 >/1
      context[14] = context[10];
      context[15] = context[11];
      context[16] = 0;
      context[17] = 0;
      if( ! refalrts::brackets_term( context[16], context[17], context[12] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[9] ) )
        continue;
      // closed e.Name as range 16
      // closed e.Nested as range 14
      //DEBUG: e.Name: 16
      //DEBUG: e.Nested: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/5 AsIs: # ADT-Brackets/9 AsIs: (/12 AsIs: e.Name/16 AsIs: )/13 } Tile{ AsIs: </0 Reuse: & Map@9/4 } Tile{ AsIs: e.Nested/14 } Tile{ HalfReuse: >/6 HalfReuse: )/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
      refalrts::reinit_close_call(context[6]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[5], context[1] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[6];
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[5], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ReplaceToGuards\1/4 (/5 # Symbol/9 # Name/12 e.new7/14 )/6 >/1
    context[14] = context[10];
    context[15] = context[11];
    if( ! refalrts::ident_term( identifiers[ident_Name], context[12] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Symbol], context[9] ) )
      continue;
    // closed e.new7 as range 14
    do {
      // </0 & ReplaceToGuards\1/4 (/5 # Symbol/9 # Name/12 e.Name/16 '@'/19 0/18 )/6 >/1
      context[16] = context[14];
      context[17] = context[15];
      context[18] = refalrts::number_right( 0UL, context[16], context[17] );
      if( ! context[18] )
        continue;
      context[19] = refalrts::char_right( '@', context[16], context[17] );
      if( ! context[19] )
        continue;
      // closed e.Name as range 16
      //DEBUG: e.Name: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ReplaceToGuards\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/5 AsIs: # Symbol/9 AsIs: # Name/12 AsIs: e.Name/16 AsIs: '@'/19 AsIs: 0/18 AsIs: )/6 } Tile{ ]] }
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ReplaceToGuards\1/4 (/5 # Symbol/9 # Name/12 e.Name/16 )/6 >/1
    context[16] = context[14];
    context[17] = context[15];
    // closed e.Name as range 16
    //DEBUG: e.Name: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Name/5 HalfReuse: </9 HalfReuse: & AddSuffix/12 AsIs: e.Name/16 HalfReuse: (/6 HalfReuse: '@'/1 } 0/18 )/19 >/20 )/21 Tile{ ]] }
    refalrts::alloc_number(vm, context[18], 0UL);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[5], identifiers[ident_Name]);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[12], functions[efunc_AddSuffix]);
    refalrts::reinit_open_bracket(context[6]);
    refalrts::reinit_char(context[1], '@');
    refalrts::link_brackets( context[0], context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[6], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReplaceToGuards\1/4 t.Other/5 >/1
  //DEBUG: t.Other: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ReplaceToGuards\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Other/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ReplaceToGuards_L1("ReplaceToGuards\\1", COOKIE1_, COOKIE2_, func_gen_ReplaceToGuards_L1);


static refalrts::FnResult func_ReplaceToGuards(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & ReplaceToGuards/4 e.Expression/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Expression as range 2
  //DEBUG: e.Expression: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@9/4 AsIs: e.Expression/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ReplaceToGuards("ReplaceToGuards", COOKIE1_, COOKIE2_, func_ReplaceToGuards);


static refalrts::FnResult func_gen_TrySpecCall_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & TrySpecCall$1=1/4 (/7 e.Name/5 )/8 (/11 e.SpecInfo-B/9 )/12 (/15 e.SpecInfo-E/13 )/16 (/19 e.Histories/17 )/20 (/23 e.History/21 )/24 (/27 e.NewFunctions/25 )/28 (/31 e.Info$a/29 )/32 t.NewCall/37 e.NewFunction/2 (/35 e.NewHistory/33 )/36 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_right( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.Name as range 5
  // closed e.SpecInfo-B as range 9
  // closed e.SpecInfo-E as range 13
  // closed e.Histories as range 17
  // closed e.History as range 21
  // closed e.NewFunctions as range 25
  // closed e.Info$a as range 29
  // closed e.NewHistory as range 33
  context[38] = refalrts::tvar_left( context[37], context[2], context[3] );
  if( ! context[38] )
    return refalrts::cRecognitionImpossible;
  // closed e.NewFunction as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.SpecInfo-B: 9
  //DEBUG: e.SpecInfo-E: 13
  //DEBUG: e.Histories: 17
  //DEBUG: e.History: 21
  //DEBUG: e.NewFunctions: 25
  //DEBUG: e.Info$a: 29
  //DEBUG: e.NewHistory: 33
  //DEBUG: t.NewCall: 37
  //DEBUG: e.NewFunction: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 } Tile{ AsIs: e.Info$a/29 } Tile{ AsIs: )/28 } Tile{ AsIs: e.SpecInfo-B/9 } Tile{ AsIs: e.SpecInfo-E/13 } Tile{ AsIs: (/35 } Tile{ AsIs: e.Histories/17 } Tile{ AsIs: e.NewHistory/33 } Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.History/21 AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.NewFunctions/25 } Tile{ AsIs: e.NewFunction/2 } Tile{ AsIs: )/36 } Tile{ AsIs: )/32 AsIs: t.NewCall/37 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::link_brackets( context[0], context[32] );
  refalrts::link_brackets( context[27], context[36] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[35], context[20] );
  refalrts::link_brackets( context[4], context[28] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[32], context[38] );
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[20], context[27] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[35] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::splice_to_freelist_open( vm, context[8], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_TrySpecCall_S1A1("TrySpecCall$1=1", COOKIE1_, COOKIE2_, func_gen_TrySpecCall_S1A1);


static refalrts::FnResult func_TrySpecCall(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & TrySpecCall/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & TrySpecCall/4 (/7 e.new1/5 (/30 e.new2/28 )/31 (/26 e.new3/24 )/27 (/22 e.new4/20 )/23 )/8 (/11 # CallBrackets/13 (/16 # Symbol/18 # Name/19 e.new5/14 )/17 e.new6/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = refalrts::ident_left( identifiers[ident_CallBrackets], context[9], context[10] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[9], context[10] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = refalrts::ident_left( identifiers[ident_Symbol], context[14], context[15] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = refalrts::ident_left( identifiers[ident_Name], context[14], context[15] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_right( context[20], context[21], context[5], context[6] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_right( context[24], context[25], context[5], context[6] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_right( context[28], context[29], context[5], context[6] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 28
  // closed e.new3 as range 24
  // closed e.new4 as range 20
  // closed e.new5 as range 14
  // closed e.new6 as range 9
  do {
    // </0 & TrySpecCall/4 (/7 e.SpecInfo-B/44 (/50 (/54 e.Name/56 )/55 e.Info/48 )/51 e.SpecInfo-E/46 (/30 e.Histories/34 )/31 (/26 e.History/36 )/27 (/22 e.NewFunctions/38 )/23 )/8 (/11 # CallBrackets/13 (/16 # Symbol/18 # Name/19 e.Name/40 )/17 e.Expression/42 )/12 >/1
    context[32] = context[5];
    context[33] = context[6];
    context[34] = context[28];
    context[35] = context[29];
    context[36] = context[24];
    context[37] = context[25];
    context[38] = context[20];
    context[39] = context[21];
    context[40] = context[14];
    context[41] = context[15];
    context[42] = context[9];
    context[43] = context[10];
    // closed e.Histories as range 34
    // closed e.History as range 36
    // closed e.NewFunctions as range 38
    // closed e.Name as range 40
    // closed e.Expression as range 42
    context[44] = 0;
    context[45] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[46] = context[32];
      context[47] = context[33];
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_left( context[48], context[49], context[46], context[47] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      context[52] = 0;
      context[53] = 0;
      context[54] = refalrts::brackets_left( context[52], context[53], context[48], context[49] );
      if( ! context[54] )
        continue;
      refalrts::bracket_pointers(context[54], context[55]);
      if( ! refalrts::repeated_evar_left( vm, context[56], context[57], context[40], context[41], context[52], context[53] ) )
        continue;
      if( ! refalrts::empty_seq( context[52], context[53] ) )
        continue;
      // closed e.Info as range 48
      // closed e.SpecInfo-E as range 46
      //DEBUG: e.Histories: 34
      //DEBUG: e.History: 36
      //DEBUG: e.NewFunctions: 38
      //DEBUG: e.Name: 40
      //DEBUG: e.Expression: 42
      //DEBUG: e.SpecInfo-B: 44
      //DEBUG: e.Info: 48
      //DEBUG: e.SpecInfo-E: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & TrySpecCall$1=1/4 AsIs: (/7 } Tile{ AsIs: e.Name/56 } Tile{ HalfReuse: )/50 AsIs: (/54 } Tile{ AsIs: e.SpecInfo-B/44 } Tile{ AsIs: )/51 } Tile{ AsIs: (/16 } Tile{ AsIs: e.SpecInfo-E/46 } Tile{ AsIs: )/55 } Tile{ AsIs: (/30 AsIs: e.Histories/34 AsIs: )/31 AsIs: (/26 AsIs: e.History/36 AsIs: )/27 AsIs: (/22 AsIs: e.NewFunctions/38 AsIs: )/23 HalfReuse: </8 HalfReuse: & SpecCall/11 HalfReuse: (/13 } Tile{ AsIs: e.Name/40 } )/58 Tile{ AsIs: e.Info/48 } Tile{ HalfReuse: (/17 AsIs: e.Expression/42 AsIs: )/12 HalfReuse: (/1 } e.History/36/59 )/61 Tile{ HalfReuse: >/18 HalfReuse: >/19 } Tile{ ]] }
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::copy_evar(vm, context[59], context[60], context[36], context[37]);
      refalrts::alloc_close_bracket(vm, context[61]);
      refalrts::update_name(context[4], functions[efunc_gen_TrySpecCall_S1A1]);
      refalrts::reinit_close_bracket(context[50]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[11], functions[efunc_SpecCall]);
      refalrts::reinit_open_bracket(context[13]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[19]);
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[8] );
      refalrts::link_brackets( context[1], context[61] );
      refalrts::link_brackets( context[17], context[12] );
      refalrts::link_brackets( context[13], context[58] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[16], context[55] );
      refalrts::link_brackets( context[54], context[51] );
      refalrts::link_brackets( context[7], context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_elem( res, context[61] );
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[30], context[13] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[50], context[54] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[44], context[45], context[32], context[33] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & TrySpecCall/4 (/7 e.SpecInfo/5 (/30 e.Histories/28 )/31 (/26 e.History/24 )/27 (/22 e.NewFunctions/20 )/23 )/8 (/11 # CallBrackets/13 (/16 # Symbol/18 # Name/19 e.Name/14 )/17 e.Expression/9 )/12 >/1
  // closed e.SpecInfo as range 5
  // closed e.Histories as range 28
  // closed e.History as range 24
  // closed e.NewFunctions as range 20
  // closed e.Name as range 14
  // closed e.Expression as range 9
  //DEBUG: e.SpecInfo: 5
  //DEBUG: e.Histories: 28
  //DEBUG: e.History: 24
  //DEBUG: e.NewFunctions: 20
  //DEBUG: e.Name: 14
  //DEBUG: e.Expression: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & TrySpecCall/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.SpecInfo/5 AsIs: (/30 AsIs: e.Histories/28 AsIs: )/31 AsIs: (/26 AsIs: e.History/24 AsIs: )/27 AsIs: (/22 AsIs: e.NewFunctions/20 AsIs: )/23 AsIs: )/8 AsIs: (/11 AsIs: # CallBrackets/13 AsIs: (/16 AsIs: # Symbol/18 AsIs: # Name/19 AsIs: e.Name/14 AsIs: )/17 AsIs: e.Expression/9 AsIs: )/12 } Tile{ ]] }
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TrySpecCall("TrySpecCall", COOKIE1_, COOKIE2_, func_TrySpecCall);


static refalrts::FnResult func_SkipSpecCall(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & SkipSpecCall/4 (/7 e.SpecInfo/5 (/19 e.Histories/17 )/20 (/15 e.History/13 )/16 (/11 e.NewFunctions/9 )/12 )/8 t.CallTerm/21 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.SpecInfo as range 5
  // closed e.Histories as range 17
  // closed e.History as range 13
  // closed e.NewFunctions as range 9
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.SpecInfo: 5
  //DEBUG: e.Histories: 17
  //DEBUG: e.History: 13
  //DEBUG: e.NewFunctions: 9
  //DEBUG: t.CallTerm: 21

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SkipSpecCall/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.SpecInfo/5 AsIs: (/19 AsIs: e.Histories/17 AsIs: )/20 AsIs: (/15 AsIs: e.History/13 AsIs: )/16 AsIs: (/11 AsIs: e.NewFunctions/9 AsIs: )/12 AsIs: )/8 AsIs: t.CallTerm/21 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[22] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SkipSpecCall("SkipSpecCall", COOKIE1_, COOKIE2_, func_SkipSpecCall);


static refalrts::FnResult func_gen_SpecCall_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & SpecCall$1=2/4 (/7 e.Name/5 )/8 (/11 e.SpecPattern/9 )/12 (/15 e.Body/13 )/16 s.NextNumber/17 (/20 e.Signatures/18 )/21 (/24 e.Argument/22 )/25 (/28 e.StaticMatches/26 )/29 (/32 e.DynamicMatches/30 )/33 (/36 e.History/34 )/37 s.NeedRelationCheck/38 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Name as range 5
  // closed e.SpecPattern as range 9
  // closed e.Body as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  // closed e.Signatures as range 18
  // closed e.Argument as range 22
  // closed e.StaticMatches as range 26
  // closed e.DynamicMatches as range 30
  // closed e.History as range 34
  if( ! refalrts::svar_left( context[38], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Name: 5
  //DEBUG: e.SpecPattern: 9
  //DEBUG: e.Body: 13
  //DEBUG: s.NextNumber: 17
  //DEBUG: e.Signatures: 18
  //DEBUG: e.Argument: 22
  //DEBUG: e.StaticMatches: 26
  //DEBUG: e.DynamicMatches: 30
  //DEBUG: e.History: 34
  //DEBUG: s.NeedRelationCheck: 38

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/20 {REMOVED TILE} )/21 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecCall-Matches/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 AsIs: (/11 AsIs: e.SpecPattern/9 AsIs: )/12 AsIs: (/15 AsIs: e.Body/13 AsIs: )/16 AsIs: s.NextNumber/17 } Tile{ AsIs: e.Signatures/18 } Tile{ AsIs: (/24 AsIs: e.Argument/22 AsIs: )/25 AsIs: (/28 AsIs: e.StaticMatches/26 AsIs: )/29 AsIs: (/32 AsIs: e.DynamicMatches/30 AsIs: )/33 AsIs: (/36 AsIs: e.History/34 AsIs: )/37 AsIs: s.NeedRelationCheck/38 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_SpecCallm_Matches]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[24];
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::splice_to_freelist_open( vm, context[17], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecCall_S1A2("SpecCall$1=2", COOKIE1_, COOKIE2_, func_gen_SpecCall_S1A2);


static refalrts::FnResult func_SpecCall(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & SpecCall/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecCall/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 s.new4/25 e.new5/2 (/23 e.new6/21 )/24 (/19 e.new7/17 )/20 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new6 as range 21
  // closed e.new7 as range 17
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & SpecCall/4 (/7 e.Name/26 )/8 (/11 e.SpecPattern/28 )/12 (/15 e.Body/30 )/16 s.NextNumber/25 e.Signatures/32 (/23 e.Argument/34 )/24 (/19 e.History/36 )/20 >/1
    context[26] = context[5];
    context[27] = context[6];
    context[28] = context[9];
    context[29] = context[10];
    context[30] = context[13];
    context[31] = context[14];
    context[32] = context[2];
    context[33] = context[3];
    context[34] = context[21];
    context[35] = context[22];
    context[36] = context[17];
    context[37] = context[18];
    // closed e.Name as range 26
    // closed e.SpecPattern as range 28
    // closed e.Body as range 30
    // closed e.Signatures as range 32
    // closed e.Argument as range 34
    // closed e.History as range 36
    //DEBUG: s.NextNumber: 25
    //DEBUG: e.Name: 26
    //DEBUG: e.SpecPattern: 28
    //DEBUG: e.Body: 30
    //DEBUG: e.Signatures: 32
    //DEBUG: e.Argument: 34
    //DEBUG: e.History: 36
    //25: s.NextNumber
    //26: e.Name
    //28: e.SpecPattern
    //30: e.Body
    //32: e.Signatures
    //34: e.Argument
    //36: e.History
    //44: e.Argument
    //48: e.SpecPattern

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_SpecCall_S1C1]);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_GenericMatchm_Wrapper]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::copy_evar(vm, context[44], context[45], context[34], context[35]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::copy_evar(vm, context[48], context[49], context[28], context[29]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[38] );
    res = refalrts::splice_elem( res, context[39] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[41] );
    res = refalrts::splice_elem( res, context[51] );
    refalrts::link_brackets( context[47], context[50] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_elem( res, context[47] );
    refalrts::link_brackets( context[43], context[46] );
    res = refalrts::splice_elem( res, context[46] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_elem( res, context[38] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </38 & SpecCall$1?1/42 # Clear/43 (/46 e.StaticMatches/44 )/47 (/50 e.DynamicMatches/48 )/51 >/39
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::call_left( context[40], context[41], context[38], context[39] );
      context[43] = refalrts::ident_left( identifiers[ident_Clear], context[40], context[41] );
      if( ! context[43] )
        continue;
      context[44] = 0;
      context[45] = 0;
      context[46] = refalrts::brackets_left( context[44], context[45], context[40], context[41] );
      if( ! context[46] )
        continue;
      refalrts::bracket_pointers(context[46], context[47]);
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_left( context[48], context[49], context[40], context[41] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      // closed e.StaticMatches as range 44
      // closed e.DynamicMatches as range 48
      //DEBUG: s.NextNumber: 25
      //DEBUG: e.Name: 26
      //DEBUG: e.SpecPattern: 28
      //DEBUG: e.Body: 30
      //DEBUG: e.Signatures: 32
      //DEBUG: e.Argument: 34
      //DEBUG: e.History: 36
      //DEBUG: e.StaticMatches: 44
      //DEBUG: e.DynamicMatches: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & SpecCall$1?1/42 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecCall$1=2/4 AsIs: (/7 AsIs: e.Name/26 AsIs: )/8 AsIs: (/11 AsIs: e.SpecPattern/28 AsIs: )/12 AsIs: (/15 AsIs: e.Body/30 AsIs: )/16 AsIs: s.NextNumber/25 } Tile{ AsIs: (/23 } Tile{ AsIs: e.Signatures/32 } Tile{ AsIs: )/24 AsIs: (/19 } Tile{ AsIs: e.Argument/34 } Tile{ HalfReuse: )/43 AsIs: (/46 AsIs: e.StaticMatches/44 AsIs: )/47 AsIs: (/50 AsIs: e.DynamicMatches/48 AsIs: )/51 HalfReuse: (/39 } Tile{ AsIs: e.History/36 } Tile{ AsIs: )/20 HalfReuse: # True/38 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_SpecCall_S1A2]);
      refalrts::reinit_close_bracket(context[43]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_ident(context[38], identifiers[ident_True]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[39], context[20] );
      refalrts::link_brackets( context[50], context[51] );
      refalrts::link_brackets( context[46], context[47] );
      refalrts::link_brackets( context[19], context[43] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[38] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[43], context[39] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[24], context[19] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[38], context[39]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecCall/4 (/7 e.Name/5 )/8 (/11 e.SpecPattern/9 )/12 (/15 e.Body/13 )/16 s.NextNumber/25 e.Signatures/2 (/23 e.Argument/21 )/24 (/19 e.History/17 )/20 >/1
  // closed e.Name as range 5
  // closed e.SpecPattern as range 9
  // closed e.Body as range 13
  // closed e.Signatures as range 2
  // closed e.Argument as range 21
  // closed e.History as range 17
  //DEBUG: s.NextNumber: 25
  //DEBUG: e.Name: 5
  //DEBUG: e.SpecPattern: 9
  //DEBUG: e.Body: 13
  //DEBUG: e.Signatures: 2
  //DEBUG: e.Argument: 21
  //DEBUG: e.History: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.History/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.SpecPattern/9 AsIs: )/12 AsIs: (/15 AsIs: e.Body/13 AsIs: )/16 AsIs: s.NextNumber/25 AsIs: e.Signatures/2 HalfReuse: )/23 } Tile{ HalfReuse: (/0 HalfReuse: # CallBrackets/4 AsIs: (/7 } # Symbol/26 # Name/27 Tile{ AsIs: e.Name/5 } Tile{ AsIs: )/20 } Tile{ AsIs: e.Argument/21 } Tile{ AsIs: )/24 AsIs: (/19 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[26], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[27], identifiers[ident_Name]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[23]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[19], context[1] );
  refalrts::link_brackets( context[0], context[24] );
  refalrts::link_brackets( context[7], context[20] );
  refalrts::link_brackets( context[8], context[23] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[24], context[19] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[8], context[23] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SpecCall("SpecCall", COOKIE1_, COOKIE2_, func_SpecCall);


static refalrts::FnResult func_SpecCallm_Matches(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & SpecCall-Matches/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecCall-Matches/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 s.new4/17 e.new5/2 (/33 e.new6/31 )/34 (/29 e.new7/27 )/30 (/25 e.new8/23 )/26 (/21 e.new9/19 )/22 s.new10/18 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_right( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_right( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_right( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_right( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new5 as range 2
  // closed e.new6 as range 31
  // closed e.new7 as range 27
  // closed e.new8 as range 23
  // closed e.new9 as range 19
  do {
    // </0 & SpecCall-Matches/4 (/7 e.Name/35 )/8 (/11 e.SpecPattern/37 )/12 (/15 e.Body/39 )/16 s.NextNumber/17 e.Signatures/41 (/33 e.Argument/43 )/34 (/29 e.StaticMatches/45 )/30 (/25 e.DynamicMatches/47 )/26 (/21 e.History/49 )/22 s.NeedRelationCheck/18 >/1
    context[35] = context[5];
    context[36] = context[6];
    context[37] = context[9];
    context[38] = context[10];
    context[39] = context[13];
    context[40] = context[14];
    context[41] = context[2];
    context[42] = context[3];
    context[43] = context[31];
    context[44] = context[32];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[23];
    context[48] = context[24];
    context[49] = context[19];
    context[50] = context[20];
    // closed e.Name as range 35
    // closed e.SpecPattern as range 37
    // closed e.Body as range 39
    // closed e.Signatures as range 41
    // closed e.Argument as range 43
    // closed e.StaticMatches as range 45
    // closed e.DynamicMatches as range 47
    // closed e.History as range 49
    //DEBUG: s.NextNumber: 17
    //DEBUG: s.NeedRelationCheck: 18
    //DEBUG: e.Name: 35
    //DEBUG: e.SpecPattern: 37
    //DEBUG: e.Body: 39
    //DEBUG: e.Signatures: 41
    //DEBUG: e.Argument: 43
    //DEBUG: e.StaticMatches: 45
    //DEBUG: e.DynamicMatches: 47
    //DEBUG: e.History: 49
    //17: s.NextNumber
    //18: s.NeedRelationCheck
    //35: e.Name
    //37: e.SpecPattern
    //39: e.Body
    //41: e.Signatures
    //43: e.Argument
    //45: e.StaticMatches
    //47: e.DynamicMatches
    //49: e.History
    //56: e.StaticMatches

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[53], functions[efunc_gen_SpecCallm_Matches_S1C1]);
    refalrts::alloc_open_call(vm, context[54]);
    refalrts::alloc_name(vm, context[55], functions[efunc_ExtractCalls]);
    refalrts::copy_evar(vm, context[56], context[57], context[45], context[46]);
    refalrts::alloc_close_call(vm, context[58]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[51] );
    res = refalrts::splice_elem( res, context[52] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[54] );
    res = refalrts::splice_elem( res, context[58] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_elem( res, context[55] );
    res = refalrts::splice_elem( res, context[54] );
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_elem( res, context[51] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </51 & SpecCall-Matches$1?1/55 (/58 e.Calls/56 )/59 e.StaticMatches$a/53 >/52
      context[53] = 0;
      context[54] = 0;
      context[55] = refalrts::call_left( context[53], context[54], context[51], context[52] );
      context[56] = 0;
      context[57] = 0;
      context[58] = refalrts::brackets_left( context[56], context[57], context[53], context[54] );
      if( ! context[58] )
        continue;
      refalrts::bracket_pointers(context[58], context[59]);
      // closed e.Calls as range 56
      // closed e.StaticMatches$a as range 53
      //DEBUG: s.NextNumber: 17
      //DEBUG: s.NeedRelationCheck: 18
      //DEBUG: e.Name: 35
      //DEBUG: e.SpecPattern: 37
      //DEBUG: e.Body: 39
      //DEBUG: e.Signatures: 41
      //DEBUG: e.Argument: 43
      //DEBUG: e.StaticMatches: 45
      //DEBUG: e.DynamicMatches: 47
      //DEBUG: e.History: 49
      //DEBUG: e.Calls: 56
      //DEBUG: e.StaticMatches$a: 53
      //17: s.NextNumber
      //18: s.NeedRelationCheck
      //35: e.Name
      //37: e.SpecPattern
      //39: e.Body
      //41: e.Signatures
      //43: e.Argument
      //45: e.StaticMatches
      //47: e.DynamicMatches
      //49: e.History
      //53: e.StaticMatches$a
      //56: e.Calls
      //65: e.StaticMatches$a
      //68: e.SpecPattern

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[60]);
      refalrts::alloc_name(vm, context[62], functions[efunc_gen_SpecCallm_Matches_S1C2]);
      refalrts::alloc_open_call(vm, context[63]);
      refalrts::alloc_name(vm, context[64], functions[efunc_PrepareSignature]);
      refalrts::copy_evar(vm, context[65], context[66], context[53], context[54]);
      refalrts::alloc_open_bracket(vm, context[67]);
      refalrts::copy_evar(vm, context[68], context[69], context[37], context[38]);
      refalrts::alloc_close_bracket(vm, context[70]);
      refalrts::alloc_close_call(vm, context[71]);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[60] );
      res = refalrts::splice_elem( res, context[61] );
      refalrts::push_stack( vm, context[71] );
      refalrts::push_stack( vm, context[63] );
      res = refalrts::splice_elem( res, context[71] );
      refalrts::link_brackets( context[67], context[70] );
      res = refalrts::splice_elem( res, context[70] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_evar( res, context[65], context[66] );
      res = refalrts::splice_elem( res, context[64] );
      res = refalrts::splice_elem( res, context[63] );
      res = refalrts::splice_elem( res, context[62] );
      res = refalrts::splice_elem( res, context[60] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </60 & SpecCall-Matches$1?2/64 e.Signature/62 >/61
        context[62] = 0;
        context[63] = 0;
        context[64] = refalrts::call_left( context[62], context[63], context[60], context[61] );
        // closed e.Signature as range 62
        //DEBUG: s.NextNumber: 17
        //DEBUG: s.NeedRelationCheck: 18
        //DEBUG: e.Name: 35
        //DEBUG: e.SpecPattern: 37
        //DEBUG: e.Body: 39
        //DEBUG: e.Signatures: 41
        //DEBUG: e.Argument: 43
        //DEBUG: e.StaticMatches: 45
        //DEBUG: e.DynamicMatches: 47
        //DEBUG: e.History: 49
        //DEBUG: e.Calls: 56
        //DEBUG: e.StaticMatches$a: 53
        //DEBUG: e.Signature: 62
        //17: s.NextNumber
        //18: s.NeedRelationCheck
        //35: e.Name
        //37: e.SpecPattern
        //39: e.Body
        //41: e.Signatures
        //43: e.Argument
        //45: e.StaticMatches
        //47: e.DynamicMatches
        //49: e.History
        //53: e.StaticMatches$a
        //56: e.Calls
        //62: e.Signature
        //70: e.StaticMatches$a

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[65]);
        refalrts::alloc_name(vm, context[67], functions[efunc_gen_SpecCallm_Matches_S1C3]);
        refalrts::alloc_open_call(vm, context[68]);
        refalrts::alloc_name(vm, context[69], functions[efunc_IsTrivialSubstitutions]);
        refalrts::copy_evar(vm, context[70], context[71], context[53], context[54]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_close_call(vm, context[66]);
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[65] );
        res = refalrts::splice_elem( res, context[66] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[68] );
        res = refalrts::splice_elem( res, context[72] );
        res = refalrts::splice_evar( res, context[70], context[71] );
        res = refalrts::splice_elem( res, context[69] );
        res = refalrts::splice_elem( res, context[68] );
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_elem( res, context[65] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </65 & SpecCall-Matches$1?3/69 # False/70 >/66
          context[67] = 0;
          context[68] = 0;
          context[69] = refalrts::call_left( context[67], context[68], context[65], context[66] );
          context[70] = refalrts::ident_left( identifiers[ident_False], context[67], context[68] );
          if( ! context[70] )
            continue;
          if( ! refalrts::empty_seq( context[67], context[68] ) )
            continue;
          //DEBUG: s.NextNumber: 17
          //DEBUG: s.NeedRelationCheck: 18
          //DEBUG: e.Name: 35
          //DEBUG: e.SpecPattern: 37
          //DEBUG: e.Body: 39
          //DEBUG: e.Signatures: 41
          //DEBUG: e.Argument: 43
          //DEBUG: e.StaticMatches: 45
          //DEBUG: e.DynamicMatches: 47
          //DEBUG: e.History: 49
          //DEBUG: e.Calls: 56
          //DEBUG: e.StaticMatches$a: 53
          //DEBUG: e.Signature: 62

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} e.StaticMatches/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & SpecCall-Matches$1?1/55 (/58 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/61 </65 & SpecCall-Matches$1?3/69 # False/70 >/66 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecCall-Aux/4 AsIs: (/7 AsIs: e.Name/35 AsIs: )/8 AsIs: (/11 AsIs: e.SpecPattern/37 AsIs: )/12 AsIs: (/15 AsIs: e.Body/39 AsIs: )/16 AsIs: s.NextNumber/17 AsIs: e.Signatures/41 AsIs: (/33 AsIs: e.Argument/43 AsIs: )/34 AsIs: (/29 } Tile{ AsIs: e.Signature/62 } Tile{ HalfReuse: )/64 } Tile{ HalfReuse: (/59 AsIs: e.StaticMatches$a/53 HalfReuse: )/52 HalfReuse: (/60 } Tile{ AsIs: e.DynamicMatches/47 } Tile{ AsIs: )/30 AsIs: (/25 } Tile{ AsIs: e.Calls/56 } Tile{ AsIs: )/26 AsIs: (/21 AsIs: e.History/49 AsIs: )/22 AsIs: s.NeedRelationCheck/18 HalfReuse: >/51 } Tile{ ]] }
          refalrts::update_name(context[4], functions[efunc_SpecCallm_Aux]);
          refalrts::reinit_close_bracket(context[64]);
          refalrts::reinit_open_bracket(context[59]);
          refalrts::reinit_close_bracket(context[52]);
          refalrts::reinit_open_bracket(context[60]);
          refalrts::reinit_close_call(context[51]);
          refalrts::push_stack( vm, context[51] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[21], context[22] );
          refalrts::link_brackets( context[25], context[26] );
          refalrts::link_brackets( context[60], context[30] );
          refalrts::link_brackets( context[59], context[52] );
          refalrts::link_brackets( context[29], context[64] );
          refalrts::link_brackets( context[33], context[34] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[51] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          res = refalrts::splice_evar( res, context[30], context[25] );
          res = refalrts::splice_evar( res, context[47], context[48] );
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_elem( res, context[64] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          refalrts::splice_to_freelist_open( vm, context[29], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[65], context[66]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[60], context[61]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[51], context[52]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecCall-Matches/4 (/7 e.Name/5 )/8 (/11 e.SpecPattern/9 )/12 (/15 e.Body/13 )/16 s.NextNumber/17 e.Signatures/2 (/33 e.Argument/31 )/34 (/29 e.StaticMatches/27 )/30 (/25 e.DynamicMatches/23 )/26 (/21 e.History/19 )/22 s.NeedRelationCheck/18 >/1
  // closed e.Name as range 5
  // closed e.SpecPattern as range 9
  // closed e.Body as range 13
  // closed e.Signatures as range 2
  // closed e.Argument as range 31
  // closed e.StaticMatches as range 27
  // closed e.DynamicMatches as range 23
  // closed e.History as range 19
  //DEBUG: s.NextNumber: 17
  //DEBUG: s.NeedRelationCheck: 18
  //DEBUG: e.Name: 5
  //DEBUG: e.SpecPattern: 9
  //DEBUG: e.Body: 13
  //DEBUG: e.Signatures: 2
  //DEBUG: e.Argument: 31
  //DEBUG: e.StaticMatches: 27
  //DEBUG: e.DynamicMatches: 23
  //DEBUG: e.History: 19

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.StaticMatches/27 )/30 (/25 e.DynamicMatches/23 {REMOVED TILE} e.History/19 {REMOVED TILE} s.NeedRelationCheck/18 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.SpecPattern/9 AsIs: )/12 AsIs: (/15 AsIs: e.Body/13 AsIs: )/16 AsIs: s.NextNumber/17 AsIs: e.Signatures/2 HalfReuse: )/33 } Tile{ HalfReuse: (/0 HalfReuse: # CallBrackets/4 AsIs: (/7 } Tile{ HalfReuse: # Symbol/34 HalfReuse: # Name/29 } Tile{ AsIs: e.Name/5 } Tile{ AsIs: )/22 } Tile{ AsIs: e.Argument/31 } Tile{ AsIs: )/26 AsIs: (/21 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[33]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
  refalrts::reinit_ident(context[34], identifiers[ident_Symbol]);
  refalrts::reinit_ident(context[29], identifiers[ident_Name]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[21], context[1] );
  refalrts::link_brackets( context[0], context[26] );
  refalrts::link_brackets( context[7], context[22] );
  refalrts::link_brackets( context[8], context[33] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[26], context[21] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[34], context[29] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[8], context[33] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SpecCallm_Matches("SpecCall-Matches", COOKIE1_, COOKIE2_, func_SpecCallm_Matches);


static refalrts::FnResult func_gen_SpecCallm_Aux_B1S2B1S2B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 65 elems
  refalrts::Iter context[65];
  refalrts::zeros( context, 65 );
  // </0 & SpecCall-Aux:1$2:1$2:1$1=1/4 (/7 e.SpecPattern/5 )/8 (/11 e.Body/9 )/12 s.NextNumber/13 (/16 e.Signatures$a/14 )/17 (/20 e.Signature/18 )/21 (/24 e.SpecializedFuncArgument$a/22 )/25 (/28 e.SpecializedFuncBody/26 )/29 (/32 e.History/30 )/33 e.InstanceName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.SpecPattern as range 5
  // closed e.Body as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.Signatures$a as range 14
  // closed e.Signature as range 18
  // closed e.SpecializedFuncArgument$a as range 22
  // closed e.SpecializedFuncBody as range 26
  // closed e.History as range 30
  // closed e.InstanceName as range 2
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.Body: 9
  //DEBUG: s.NextNumber: 13
  //DEBUG: e.Signatures$a: 14
  //DEBUG: e.Signature: 18
  //DEBUG: e.SpecializedFuncArgument$a: 22
  //DEBUG: e.SpecializedFuncBody: 26
  //DEBUG: e.History: 30
  //DEBUG: e.InstanceName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.SpecPattern/5 AsIs: )/8 AsIs: (/11 AsIs: e.Body/9 AsIs: )/12 } Tile{ AsIs: </0 } & Add/34 1/35 Tile{ AsIs: s.NextNumber/13 HalfReuse: >/16 AsIs: e.Signatures$a/14 HalfReuse: (/17 AsIs: (/20 } e.InstanceName/2/36 )/38 Tile{ AsIs: e.Signature/18 } )/39 Tile{ AsIs: )/21 AsIs: (/24 } # CallBrackets/40 (/41 # Symbol/42 Tile{ HalfReuse: # Name/33 AsIs: e.InstanceName/2 HalfReuse: )/1 } Tile{ AsIs: e.SpecializedFuncArgument$a/22 } )/43 (/44 # Function/45 # GN-Local/46 (/47 e.InstanceName/2/48 Tile{ AsIs: )/25 HalfReuse: # Sentences/28 AsIs: e.SpecializedFuncBody/26 AsIs: )/29 AsIs: (/32 } (/50 (/51 e.InstanceName/2/52 )/54 Tile{ AsIs: e.History/30 } (/55 (/56 e.InstanceName/2/57 )/59 e.Signature/18/60 )/62 )/63 )/64 Tile{ ]] }
  refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[35], 1UL);
  refalrts::copy_evar(vm, context[36], context[37], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_ident(vm, context[40], identifiers[ident_CallBrackets]);
  refalrts::alloc_open_bracket(vm, context[41]);
  refalrts::alloc_ident(vm, context[42], identifiers[ident_Symbol]);
  refalrts::alloc_close_bracket(vm, context[43]);
  refalrts::alloc_open_bracket(vm, context[44]);
  refalrts::alloc_ident(vm, context[45], identifiers[ident_Function]);
  refalrts::alloc_ident(vm, context[46], identifiers[ident_GNm_Local]);
  refalrts::alloc_open_bracket(vm, context[47]);
  refalrts::copy_evar(vm, context[48], context[49], context[2], context[3]);
  refalrts::alloc_open_bracket(vm, context[50]);
  refalrts::alloc_open_bracket(vm, context[51]);
  refalrts::copy_evar(vm, context[52], context[53], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[54]);
  refalrts::alloc_open_bracket(vm, context[55]);
  refalrts::alloc_open_bracket(vm, context[56]);
  refalrts::copy_evar(vm, context[57], context[58], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[59]);
  refalrts::copy_evar(vm, context[60], context[61], context[18], context[19]);
  refalrts::alloc_close_bracket(vm, context[62]);
  refalrts::alloc_close_bracket(vm, context[63]);
  refalrts::alloc_close_bracket(vm, context[64]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_call(context[16]);
  refalrts::reinit_open_bracket(context[17]);
  refalrts::reinit_ident(context[33], identifiers[ident_Name]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::reinit_ident(context[28], identifiers[ident_Sentences]);
  refalrts::link_brackets( context[32], context[64] );
  refalrts::link_brackets( context[50], context[63] );
  refalrts::link_brackets( context[55], context[62] );
  refalrts::link_brackets( context[56], context[59] );
  refalrts::link_brackets( context[51], context[54] );
  refalrts::link_brackets( context[44], context[29] );
  refalrts::link_brackets( context[47], context[25] );
  refalrts::link_brackets( context[24], context[43] );
  refalrts::link_brackets( context[41], context[1] );
  refalrts::link_brackets( context[4], context[21] );
  refalrts::link_brackets( context[17], context[39] );
  refalrts::link_brackets( context[20], context[38] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[55], context[64] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[50], context[54] );
  res = refalrts::splice_evar( res, context[25], context[32] );
  res = refalrts::splice_evar( res, context[48], context[49] );
  res = refalrts::splice_evar( res, context[43], context[47] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[33], context[1] );
  res = refalrts::splice_evar( res, context[40], context[42] );
  res = refalrts::splice_evar( res, context[21], context[24] );
  res = refalrts::splice_elem( res, context[39] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[38] );
  res = refalrts::splice_evar( res, context[36], context[37] );
  res = refalrts::splice_evar( res, context[13], context[20] );
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecCallm_Aux_B1S2B1S2B1S1A1("SpecCall-Aux:1$2:1$2:1$1=1", COOKIE1_, COOKIE2_, func_gen_SpecCallm_Aux_B1S2B1S2B1S1A1);


static refalrts::FnResult func_gen_SpecCallm_Aux_B1S2B1S2B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 63 elems
  refalrts::Iter context[63];
  refalrts::zeros( context, 63 );
  // </0 & SpecCall-Aux:1$2:1$2:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecCall-Aux:1$2:1$2:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 s.new3/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 (/24 e.new6/22 )/25 (/28 e.new7/26 )/29 (/32 e.new8/30 )/33 (/36 e.new9/34 )/37 (/40 e.new10/38 )/41 s.new11/42 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 22
  // closed e.new7 as range 26
  // closed e.new8 as range 30
  // closed e.new9 as range 34
  // closed e.new10 as range 38
  if( ! refalrts::svar_left( context[42], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & SpecCall-Aux:1$2:1$2:1/4 (/7 e.SpecPattern/43 )/8 (/11 e.Body/45 )/12 s.NextNumber/13 (/16 e.Signatures$a/47 )/17 (/20 e.Signature/49 )/21 (/24 e.SpecializedFuncArgument$a/51 )/25 (/28 e.SpecializedFuncBody/53 )/29 (/32 e.History/55 )/33 (/36 e.Name/57 )/37 (/40 e.Argument/59 )/41 # True/42 >/1
    context[43] = context[5];
    context[44] = context[6];
    context[45] = context[9];
    context[46] = context[10];
    context[47] = context[14];
    context[48] = context[15];
    context[49] = context[18];
    context[50] = context[19];
    context[51] = context[22];
    context[52] = context[23];
    context[53] = context[26];
    context[54] = context[27];
    context[55] = context[30];
    context[56] = context[31];
    context[57] = context[34];
    context[58] = context[35];
    context[59] = context[38];
    context[60] = context[39];
    if( ! refalrts::ident_term( identifiers[ident_True], context[42] ) )
      continue;
    // closed e.SpecPattern as range 43
    // closed e.Body as range 45
    // closed e.Signatures$a as range 47
    // closed e.Signature as range 49
    // closed e.SpecializedFuncArgument$a as range 51
    // closed e.SpecializedFuncBody as range 53
    // closed e.History as range 55
    // closed e.Name as range 57
    // closed e.Argument as range 59
    //DEBUG: s.NextNumber: 13
    //DEBUG: e.SpecPattern: 43
    //DEBUG: e.Body: 45
    //DEBUG: e.Signatures$a: 47
    //DEBUG: e.Signature: 49
    //DEBUG: e.SpecializedFuncArgument$a: 51
    //DEBUG: e.SpecializedFuncBody: 53
    //DEBUG: e.History: 55
    //DEBUG: e.Name: 57
    //DEBUG: e.Argument: 59

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Argument/59 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecCall-Aux:1$2:1$2:1$1=1/4 AsIs: (/7 AsIs: e.SpecPattern/43 AsIs: )/8 AsIs: (/11 AsIs: e.Body/45 AsIs: )/12 AsIs: s.NextNumber/13 AsIs: (/16 AsIs: e.Signatures$a/47 AsIs: )/17 AsIs: (/20 AsIs: e.Signature/49 AsIs: )/21 AsIs: (/24 AsIs: e.SpecializedFuncArgument$a/51 AsIs: )/25 AsIs: (/28 AsIs: e.SpecializedFuncBody/53 AsIs: )/29 AsIs: (/32 AsIs: e.History/55 AsIs: )/33 HalfReuse: </36 } Tile{ HalfReuse: & AddSuffix/37 } Tile{ AsIs: e.Name/57 } Tile{ AsIs: (/40 } '@'/61 s.NextNumber/13/62 Tile{ AsIs: )/41 HalfReuse: >/42 AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[61], '@');
    refalrts::copy_stvar(vm, context[62], context[13]);
    refalrts::update_name(context[4], functions[efunc_gen_SpecCallm_Aux_B1S2B1S2B1S1A1]);
    refalrts::reinit_open_call(context[36]);
    refalrts::reinit_name(context[37], functions[efunc_AddSuffix]);
    refalrts::reinit_close_call(context[42]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[40], context[41] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[41];
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_elem( res, context[37] );
    refalrts::splice_to_freelist_open( vm, context[36], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecCall-Aux:1$2:1$2:1/4 (/7 e.SpecPattern/5 )/8 (/11 e.Body/9 )/12 s.NextNumber/13 (/16 e.Signatures$a/14 )/17 (/20 e.Signature/18 )/21 (/24 e.SpecializedFuncArgument$a/22 )/25 (/28 e.SpecializedFuncBody/26 )/29 (/32 e.History/30 )/33 (/36 e.Name/34 )/37 (/40 e.Argument/38 )/41 # False/42 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[42] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.SpecPattern as range 5
  // closed e.Body as range 9
  // closed e.Signatures$a as range 14
  // closed e.Signature as range 18
  // closed e.SpecializedFuncArgument$a as range 22
  // closed e.SpecializedFuncBody as range 26
  // closed e.History as range 30
  // closed e.Name as range 34
  // closed e.Argument as range 38
  //DEBUG: s.NextNumber: 13
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.Body: 9
  //DEBUG: e.Signatures$a: 14
  //DEBUG: e.Signature: 18
  //DEBUG: e.SpecializedFuncArgument$a: 22
  //DEBUG: e.SpecializedFuncBody: 26
  //DEBUG: e.History: 30
  //DEBUG: e.Name: 34
  //DEBUG: e.Argument: 38

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} (/16 {REMOVED TILE} )/17 (/20 e.Signature/18 {REMOVED TILE} e.SpecializedFuncArgument$a/22 )/25 (/28 e.SpecializedFuncBody/26 {REMOVED TILE} e.History/30 {REMOVED TILE} {REMOVED TILE} )/37 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.SpecPattern/5 AsIs: )/8 AsIs: (/11 AsIs: e.Body/9 AsIs: )/12 AsIs: s.NextNumber/13 } Tile{ AsIs: e.Signatures$a/14 } Tile{ AsIs: )/33 AsIs: (/36 } Tile{ HalfReuse: # CallBrackets/29 AsIs: (/32 } Tile{ HalfReuse: # Symbol/21 HalfReuse: # Name/24 } Tile{ AsIs: e.Name/34 } Tile{ HalfReuse: )/40 AsIs: e.Argument/38 AsIs: )/41 HalfReuse: (/42 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[29], identifiers[ident_CallBrackets]);
  refalrts::reinit_ident(context[21], identifiers[ident_Symbol]);
  refalrts::reinit_ident(context[24], identifiers[ident_Name]);
  refalrts::reinit_close_bracket(context[40]);
  refalrts::reinit_open_bracket(context[42]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[42], context[1] );
  refalrts::link_brackets( context[36], context[41] );
  refalrts::link_brackets( context[32], context[40] );
  refalrts::link_brackets( context[4], context[33] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[40];
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_evar( res, context[21], context[24] );
  res = refalrts::splice_evar( res, context[29], context[32] );
  res = refalrts::splice_evar( res, context[33], context[36] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[4], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecCallm_Aux_B1S2B1S2B1("SpecCall-Aux:1$2:1$2:1", COOKIE1_, COOKIE2_, func_gen_SpecCallm_Aux_B1S2B1S2B1);


static refalrts::FnResult func_gen_SpecCallm_Aux_B1S2B1S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & SpecCall-Aux:1$2:1$2=1/4 (/7 e.SpecPattern/5 )/8 (/11 e.Body/9 )/12 s.NextNumber/13 (/16 e.Signatures$a/14 )/17 (/20 e.Signature/18 )/21 (/24 e.SpecializedFuncArgument$a/22 )/25 (/28 e.History/26 )/29 (/32 e.Name/30 )/33 (/36 e.Argument/34 )/37 e.SpecializedFuncBody/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.SpecPattern as range 5
  // closed e.Body as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  // closed e.Signatures$a as range 14
  // closed e.Signature as range 18
  // closed e.SpecializedFuncArgument$a as range 22
  // closed e.History as range 26
  // closed e.Name as range 30
  // closed e.Argument as range 34
  // closed e.SpecializedFuncBody as range 2
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.Body: 9
  //DEBUG: s.NextNumber: 13
  //DEBUG: e.Signatures$a: 14
  //DEBUG: e.Signature: 18
  //DEBUG: e.SpecializedFuncArgument$a: 22
  //DEBUG: e.History: 26
  //DEBUG: e.Name: 30
  //DEBUG: e.Argument: 34
  //DEBUG: e.SpecializedFuncBody: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecCall-Aux:1$2:1$2:1/4 AsIs: (/7 AsIs: e.SpecPattern/5 AsIs: )/8 AsIs: (/11 AsIs: e.Body/9 AsIs: )/12 AsIs: s.NextNumber/13 AsIs: (/16 AsIs: e.Signatures$a/14 AsIs: )/17 AsIs: (/20 AsIs: e.Signature/18 AsIs: )/21 AsIs: (/24 AsIs: e.SpecializedFuncArgument$a/22 AsIs: )/25 AsIs: (/28 } e.SpecializedFuncBody/2/38 )/40 (/41 Tile{ AsIs: e.History/26 } Tile{ AsIs: )/29 AsIs: (/32 AsIs: e.Name/30 AsIs: )/33 AsIs: (/36 AsIs: e.Argument/34 AsIs: )/37 } </42 & IsSoundBody:1/43 </44 & Map@10/45 Tile{ AsIs: e.SpecializedFuncBody/2 } >/46 >/47 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[38], context[39], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_open_bracket(vm, context[41]);
  refalrts::alloc_open_call(vm, context[42]);
  refalrts::alloc_name(vm, context[43], functions[efunc_gen_IsSoundBody_B1]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_name(vm, context[45], functions[efunc_gen_Map_Z10]);
  refalrts::alloc_close_call(vm, context[46]);
  refalrts::alloc_close_call(vm, context[47]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecCallm_Aux_B1S2B1S2B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[47] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[46] );
  refalrts::push_stack( vm, context[44] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[41], context[29] );
  refalrts::link_brackets( context[28], context[40] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[46], context[47] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[42], context[45] );
  res = refalrts::splice_evar( res, context[29], context[37] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[40], context[41] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecCallm_Aux_B1S2B1S2A1("SpecCall-Aux:1$2:1$2=1", COOKIE1_, COOKIE2_, func_gen_SpecCallm_Aux_B1S2B1S2A1);


static refalrts::FnResult func_gen_SpecCallm_Aux_B1S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 108 elems
  refalrts::Iter context[108];
  refalrts::zeros( context, 108 );
  // </0 & SpecCall-Aux:1$2=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecCall-Aux:1$2=1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 s.new7/29 (/32 e.new8/30 )/33 (/36 e.new9/34 )/37 (/40 e.new10/38 )/41 (/44 e.new11/42 )/45 (/48 e.new12/46 )/49 e.new13/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  if( ! refalrts::svar_left( context[29], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  context[42] = 0;
  context[43] = 0;
  context[44] = refalrts::brackets_left( context[42], context[43], context[2], context[3] );
  if( ! context[44] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[44], context[45]);
  context[46] = 0;
  context[47] = 0;
  context[48] = refalrts::brackets_left( context[46], context[47], context[2], context[3] );
  if( ! context[48] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[48], context[49]);
  // closed e.new8 as range 30
  // closed e.new9 as range 34
  // closed e.new10 as range 38
  // closed e.new11 as range 42
  // closed e.new12 as range 46
  // closed e.new13 as range 2
  do {
    // </0 & SpecCall-Aux:1$2=1/4 (/7 e.new17/50 )/8 (/11 e.new18/52 )/12 (/15 e.new19/54 )/16 (/19 e.new20/56 )/20 (/23 e.new21/58 )/24 (/27 e.new22/60 )/28 s.new14/29 (/32 e.new23/62 )/33 (/36 e.new24/64 )/37 (/40 e.new25/66 )/41 (/44 e.new26/68 )/45 (/48 e.new27/70 )/49 s.new15/74 e.new16/72 >/1
    context[50] = context[5];
    context[51] = context[6];
    context[52] = context[9];
    context[53] = context[10];
    context[54] = context[13];
    context[55] = context[14];
    context[56] = context[17];
    context[57] = context[18];
    context[58] = context[21];
    context[59] = context[22];
    context[60] = context[25];
    context[61] = context[26];
    context[62] = context[30];
    context[63] = context[31];
    context[64] = context[34];
    context[65] = context[35];
    context[66] = context[38];
    context[67] = context[39];
    context[68] = context[42];
    context[69] = context[43];
    context[70] = context[46];
    context[71] = context[47];
    context[72] = context[2];
    context[73] = context[3];
    // closed e.new17 as range 50
    // closed e.new18 as range 52
    // closed e.new19 as range 54
    // closed e.new20 as range 56
    // closed e.new21 as range 58
    // closed e.new22 as range 60
    // closed e.new23 as range 62
    // closed e.new24 as range 64
    // closed e.new25 as range 66
    // closed e.new26 as range 68
    // closed e.new27 as range 70
    if( ! refalrts::svar_left( context[74], context[72], context[73] ) )
      continue;
    // closed e.new16 as range 72
    do {
      // </0 & SpecCall-Aux:1$2=1/4 (/7 e.Signature/75 )/8 (/11 e.Argument/77 )/12 (/15 e.SpecPattern/79 )/16 (/19 e.StaticMatches/81 )/20 (/23 e.Name/83 )/24 (/27 e.Body/85 )/28 s.NextNumber/29 (/32 e.Signatures$a/87 )/33 (/36 e.DynamicMatches/89 )/37 (/40 e.History/91 )/41 (/44 e.Calls/93 )/45 (/48 e.SpecializedFuncArgument$a/95 )/49 # True/74 e./97 >/1
      context[75] = context[50];
      context[76] = context[51];
      context[77] = context[52];
      context[78] = context[53];
      context[79] = context[54];
      context[80] = context[55];
      context[81] = context[56];
      context[82] = context[57];
      context[83] = context[58];
      context[84] = context[59];
      context[85] = context[60];
      context[86] = context[61];
      context[87] = context[62];
      context[88] = context[63];
      context[89] = context[64];
      context[90] = context[65];
      context[91] = context[66];
      context[92] = context[67];
      context[93] = context[68];
      context[94] = context[69];
      context[95] = context[70];
      context[96] = context[71];
      context[97] = context[72];
      context[98] = context[73];
      if( ! refalrts::ident_term( identifiers[ident_True], context[74] ) )
        continue;
      // closed e.Signature as range 75
      // closed e.Argument as range 77
      // closed e.SpecPattern as range 79
      // closed e.StaticMatches as range 81
      // closed e.Name as range 83
      // closed e.Body as range 85
      // closed e.Signatures$a as range 87
      // closed e.DynamicMatches as range 89
      // closed e.History as range 91
      // closed e.Calls as range 93
      // closed e.SpecializedFuncArgument$a as range 95
      // closed e. as range 97
      //DEBUG: s.NextNumber: 29
      //DEBUG: e.Signature: 75
      //DEBUG: e.Argument: 77
      //DEBUG: e.SpecPattern: 79
      //DEBUG: e.StaticMatches: 81
      //DEBUG: e.Name: 83
      //DEBUG: e.Body: 85
      //DEBUG: e.Signatures$a: 87
      //DEBUG: e.DynamicMatches: 89
      //DEBUG: e.History: 91
      //DEBUG: e.Calls: 93
      //DEBUG: e.SpecializedFuncArgument$a: 95
      //DEBUG: e.: 97

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.SpecializedFuncArgument$a/95 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 } Tile{ HalfReuse: & MakeGeneralization=1/12 AsIs: (/15 } Tile{ AsIs: e.Calls/93 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Name/83 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.SpecPattern/79 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.Body/85 AsIs: )/28 AsIs: s.NextNumber/29 AsIs: (/32 AsIs: e.Signatures$a/87 AsIs: )/33 AsIs: (/36 } Tile{ AsIs: e.Argument/77 } Tile{ AsIs: )/45 AsIs: (/48 } Tile{ AsIs: e.DynamicMatches/89 } Tile{ AsIs: )/37 AsIs: (/40 AsIs: e.History/91 AsIs: )/41 AsIs: (/44 } Tile{ AsIs: e.StaticMatches/81 } Tile{ AsIs: )/49 } Tile{ AsIs: </0 Reuse: & GetSignaturesGeneralization/4 AsIs: (/7 AsIs: e.Signature/75 AsIs: )/8 } Tile{ AsIs: e./97 } Tile{ HalfReuse: >/74 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[12], functions[efunc_gen_MakeGeneralization_A1]);
      refalrts::update_name(context[4], functions[efunc_GetSignaturesGeneralization]);
      refalrts::reinit_close_call(context[74]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[74] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[44], context[49] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[48], context[37] );
      refalrts::link_brackets( context[36], context[45] );
      refalrts::link_brackets( context[32], context[33] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[74] );
      res = refalrts::splice_evar( res, context[97], context[98] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_evar( res, context[81], context[82] );
      res = refalrts::splice_evar( res, context[37], context[44] );
      res = refalrts::splice_evar( res, context[89], context[90] );
      res = refalrts::splice_evar( res, context[45], context[48] );
      res = refalrts::splice_evar( res, context[77], context[78] );
      res = refalrts::splice_evar( res, context[24], context[36] );
      res = refalrts::splice_evar( res, context[79], context[80] );
      res = refalrts::splice_evar( res, context[20], context[23] );
      res = refalrts::splice_evar( res, context[83], context[84] );
      res = refalrts::splice_evar( res, context[16], context[19] );
      res = refalrts::splice_evar( res, context[93], context[94] );
      res = refalrts::splice_evar( res, context[12], context[15] );
      res = refalrts::splice_elem( res, context[11] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SpecCall-Aux:1$2=1/4 (/7 e.Signature/75 )/8 (/11 e.Argument/77 )/12 (/15 e.SpecPattern/79 )/16 (/19 e.StaticMatches/81 )/20 (/23 e.Name/83 )/24 (/27 e.Body/85 )/28 s.NextNumber/29 (/32 e.Signatures$a/87 )/33 (/36 e.DynamicMatches/89 )/37 (/40 e.History/91 )/41 (/44 e.Calls/93 )/45 (/48 e.SpecializedFuncArgument$a/95 )/49 # False/74 >/1
    context[75] = context[50];
    context[76] = context[51];
    context[77] = context[52];
    context[78] = context[53];
    context[79] = context[54];
    context[80] = context[55];
    context[81] = context[56];
    context[82] = context[57];
    context[83] = context[58];
    context[84] = context[59];
    context[85] = context[60];
    context[86] = context[61];
    context[87] = context[62];
    context[88] = context[63];
    context[89] = context[64];
    context[90] = context[65];
    context[91] = context[66];
    context[92] = context[67];
    context[93] = context[68];
    context[94] = context[69];
    context[95] = context[70];
    context[96] = context[71];
    if( ! refalrts::ident_term( identifiers[ident_False], context[74] ) )
      continue;
    if( ! refalrts::empty_seq( context[72], context[73] ) )
      continue;
    // closed e.Signature as range 75
    // closed e.Argument as range 77
    // closed e.SpecPattern as range 79
    // closed e.StaticMatches as range 81
    // closed e.Name as range 83
    // closed e.Body as range 85
    // closed e.Signatures$a as range 87
    // closed e.DynamicMatches as range 89
    // closed e.History as range 91
    // closed e.Calls as range 93
    // closed e.SpecializedFuncArgument$a as range 95
    //DEBUG: s.NextNumber: 29
    //DEBUG: e.Signature: 75
    //DEBUG: e.Argument: 77
    //DEBUG: e.SpecPattern: 79
    //DEBUG: e.StaticMatches: 81
    //DEBUG: e.Name: 83
    //DEBUG: e.Body: 85
    //DEBUG: e.Signatures$a: 87
    //DEBUG: e.DynamicMatches: 89
    //DEBUG: e.History: 91
    //DEBUG: e.Calls: 93
    //DEBUG: e.SpecializedFuncArgument$a: 95

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.DynamicMatches/89 {REMOVED TILE} e.Calls/93 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecCall-Aux:1$2:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.SpecPattern/79 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.Body/85 AsIs: )/28 AsIs: s.NextNumber/29 AsIs: (/32 AsIs: e.Signatures$a/87 AsIs: )/33 AsIs: (/36 } Tile{ AsIs: e.Signature/75 } Tile{ AsIs: )/45 AsIs: (/48 } Tile{ AsIs: e.SpecializedFuncArgument$a/95 } Tile{ AsIs: )/37 AsIs: (/40 AsIs: e.History/91 AsIs: )/41 AsIs: (/44 } Tile{ AsIs: e.Name/83 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Argument/77 AsIs: )/12 HalfReuse: </15 } & PrepareSpecializedFuncBody=1/97 (/98 e.SpecPattern/79/99 )/101 (/102 e.Body/85/103 Tile{ AsIs: )/16 AsIs: (/19 AsIs: e.StaticMatches/81 AsIs: )/20 HalfReuse: </23 } & ExtractVariables/105 e.Body/85/106 Tile{ HalfReuse: >/49 HalfReuse: >/74 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[97], functions[efunc_gen_PrepareSpecializedFuncBody_A1]);
    refalrts::alloc_open_bracket(vm, context[98]);
    refalrts::copy_evar(vm, context[99], context[100], context[79], context[80]);
    refalrts::alloc_close_bracket(vm, context[101]);
    refalrts::alloc_open_bracket(vm, context[102]);
    refalrts::copy_evar(vm, context[103], context[104], context[85], context[86]);
    refalrts::alloc_name(vm, context[105], functions[efunc_ExtractVariables]);
    refalrts::copy_evar(vm, context[106], context[107], context[85], context[86]);
    refalrts::update_name(context[4], functions[efunc_gen_SpecCallm_Aux_B1S2B1S2A1]);
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_open_call(context[23]);
    refalrts::reinit_close_call(context[49]);
    refalrts::reinit_close_call(context[74]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[74] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[102], context[16] );
    refalrts::link_brackets( context[98], context[101] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[44], context[8] );
    refalrts::link_brackets( context[40], context[41] );
    refalrts::link_brackets( context[48], context[37] );
    refalrts::link_brackets( context[36], context[45] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[49];
    res = refalrts::splice_evar( res, context[106], context[107] );
    res = refalrts::splice_elem( res, context[105] );
    res = refalrts::splice_evar( res, context[16], context[23] );
    res = refalrts::splice_evar( res, context[103], context[104] );
    res = refalrts::splice_evar( res, context[97], context[102] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    res = refalrts::splice_evar( res, context[83], context[84] );
    res = refalrts::splice_evar( res, context[37], context[44] );
    res = refalrts::splice_evar( res, context[95], context[96] );
    res = refalrts::splice_evar( res, context[45], context[48] );
    res = refalrts::splice_evar( res, context[75], context[76] );
    res = refalrts::splice_evar( res, context[24], context[36] );
    res = refalrts::splice_evar( res, context[79], context[80] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecCall-Aux:1$2=1/4 (/7 e.Signature/5 )/8 (/11 e.Argument/9 )/12 (/15 e.SpecPattern/13 )/16 (/19 e.StaticMatches/17 )/20 (/23 e.Name/21 )/24 (/27 e.Body/25 )/28 s.NextNumber/29 (/32 e.Signatures$a/30 )/33 (/36 e.DynamicMatches/34 )/37 (/40 e.History/38 )/41 (/44 e.Calls/42 )/45 (/48 e.SpecializedFuncArgument$a/46 )/49 e.RelationCheckResult/2 >/1
  // closed e.Signature as range 5
  // closed e.Argument as range 9
  // closed e.SpecPattern as range 13
  // closed e.StaticMatches as range 17
  // closed e.Name as range 21
  // closed e.Body as range 25
  // closed e.Signatures$a as range 30
  // closed e.DynamicMatches as range 34
  // closed e.History as range 38
  // closed e.Calls as range 42
  // closed e.SpecializedFuncArgument$a as range 46
  // closed e.RelationCheckResult as range 2
  //DEBUG: s.NextNumber: 29
  //DEBUG: e.Signature: 5
  //DEBUG: e.Argument: 9
  //DEBUG: e.SpecPattern: 13
  //DEBUG: e.StaticMatches: 17
  //DEBUG: e.Name: 21
  //DEBUG: e.Body: 25
  //DEBUG: e.Signatures$a: 30
  //DEBUG: e.DynamicMatches: 34
  //DEBUG: e.History: 38
  //DEBUG: e.Calls: 42
  //DEBUG: e.SpecializedFuncArgument$a: 46
  //DEBUG: e.RelationCheckResult: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 e.Signature/5 )/8 {REMOVED TILE} {REMOVED TILE} )/16 (/19 e.StaticMatches/17 )/20 (/23 {REMOVED TILE} {REMOVED TILE} (/32 {REMOVED TILE} )/33 (/36 e.DynamicMatches/34 {REMOVED TILE} e.History/38 {REMOVED TILE} e.Calls/42 {REMOVED TILE} e.SpecializedFuncArgument$a/46 )/49 e.RelationCheckResult/2 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.SpecPattern/13 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.Body/25 AsIs: )/28 AsIs: s.NextNumber/29 } Tile{ AsIs: e.Signatures$a/30 } Tile{ AsIs: )/41 AsIs: (/44 } Tile{ HalfReuse: # CallBrackets/45 AsIs: (/48 } Tile{ HalfReuse: # Symbol/37 HalfReuse: # Name/40 } Tile{ AsIs: e.Name/21 } Tile{ HalfReuse: )/11 AsIs: e.Argument/9 AsIs: )/12 AsIs: (/15 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[45], identifiers[ident_CallBrackets]);
  refalrts::reinit_ident(context[37], identifiers[ident_Symbol]);
  refalrts::reinit_ident(context[40], identifiers[ident_Name]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[15], context[1] );
  refalrts::link_brackets( context[44], context[12] );
  refalrts::link_brackets( context[48], context[11] );
  refalrts::link_brackets( context[0], context[41] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[4], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[15] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[37], context[40] );
  res = refalrts::splice_evar( res, context[45], context[48] );
  res = refalrts::splice_evar( res, context[41], context[44] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[24], context[29] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecCallm_Aux_B1S2A1("SpecCall-Aux:1$2=1", COOKIE1_, COOKIE2_, func_gen_SpecCallm_Aux_B1S2A1);


static refalrts::FnResult func_gen_SpecCallm_Aux_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 86 elems
  refalrts::Iter context[86];
  refalrts::zeros( context, 86 );
  // </0 & SpecCall-Aux:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecCall-Aux:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 s.new3/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 (/24 e.new6/22 )/25 (/28 e.new7/26 )/29 (/32 e.new8/30 )/33 (/36 e.new9/34 )/37 (/40 e.new10/38 )/41 (/44 e.new11/42 )/45 s.new12/46 s.new13/47 e.new14/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  context[42] = 0;
  context[43] = 0;
  context[44] = refalrts::brackets_left( context[42], context[43], context[2], context[3] );
  if( ! context[44] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[44], context[45]);
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 22
  // closed e.new7 as range 26
  // closed e.new8 as range 30
  // closed e.new9 as range 34
  // closed e.new10 as range 38
  // closed e.new11 as range 42
  if( ! refalrts::svar_left( context[46], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[47], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new14 as range 2
  do {
    // </0 & SpecCall-Aux:1/4 (/7 e.SpecPattern/48 )/8 (/11 e.Body/50 )/12 s.NextNumber/13 (/16 e.SpecializedFuncArgument$a/52 )/17 (/20 e.Signature/54 )/21 (/24 e.Argument/56 )/25 (/28 e.StaticMatches/58 )/29 (/32 e.Name/60 )/33 (/36 e.DynamicMatches/62 )/37 (/40 e.History/64 )/41 (/44 e.Calls/66 )/45 s.NeedRelationCheck/46 # Found/47 e.InstanceName/68 (/72 e.Signatures$a/70 )/73 >/1
    context[48] = context[5];
    context[49] = context[6];
    context[50] = context[9];
    context[51] = context[10];
    context[52] = context[14];
    context[53] = context[15];
    context[54] = context[18];
    context[55] = context[19];
    context[56] = context[22];
    context[57] = context[23];
    context[58] = context[26];
    context[59] = context[27];
    context[60] = context[30];
    context[61] = context[31];
    context[62] = context[34];
    context[63] = context[35];
    context[64] = context[38];
    context[65] = context[39];
    context[66] = context[42];
    context[67] = context[43];
    context[68] = context[2];
    context[69] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Found], context[47] ) )
      continue;
    context[70] = 0;
    context[71] = 0;
    context[72] = refalrts::brackets_right( context[70], context[71], context[68], context[69] );
    if( ! context[72] )
      continue;
    refalrts::bracket_pointers(context[72], context[73]);
    // closed e.SpecPattern as range 48
    // closed e.Body as range 50
    // closed e.SpecializedFuncArgument$a as range 52
    // closed e.Signature as range 54
    // closed e.Argument as range 56
    // closed e.StaticMatches as range 58
    // closed e.Name as range 60
    // closed e.DynamicMatches as range 62
    // closed e.History as range 64
    // closed e.Calls as range 66
    // closed e.InstanceName as range 68
    // closed e.Signatures$a as range 70
    //DEBUG: s.NextNumber: 13
    //DEBUG: s.NeedRelationCheck: 46
    //DEBUG: e.SpecPattern: 48
    //DEBUG: e.Body: 50
    //DEBUG: e.SpecializedFuncArgument$a: 52
    //DEBUG: e.Signature: 54
    //DEBUG: e.Argument: 56
    //DEBUG: e.StaticMatches: 58
    //DEBUG: e.Name: 60
    //DEBUG: e.DynamicMatches: 62
    //DEBUG: e.History: 64
    //DEBUG: e.Calls: 66
    //DEBUG: e.InstanceName: 68
    //DEBUG: e.Signatures$a: 70

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} e.Signature/54 )/21 (/24 e.Argument/56 )/25 (/28 e.StaticMatches/58 )/29 (/32 e.Name/60 {REMOVED TILE} e.DynamicMatches/62 {REMOVED TILE} e.History/64 {REMOVED TILE} e.Calls/66 )/45 s.NeedRelationCheck/46 # Found/47 {REMOVED TILE} (/72 {REMOVED TILE} )/73 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.SpecPattern/48 AsIs: )/8 AsIs: (/11 AsIs: e.Body/50 AsIs: )/12 AsIs: s.NextNumber/13 } Tile{ AsIs: e.Signatures$a/70 } Tile{ AsIs: )/37 AsIs: (/40 } Tile{ HalfReuse: # CallBrackets/41 AsIs: (/44 } Tile{ HalfReuse: # Symbol/33 HalfReuse: # Name/36 } Tile{ AsIs: e.InstanceName/68 } Tile{ HalfReuse: )/16 AsIs: e.SpecializedFuncArgument$a/52 AsIs: )/17 AsIs: (/20 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[41], identifiers[ident_CallBrackets]);
    refalrts::reinit_ident(context[33], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[36], identifiers[ident_Name]);
    refalrts::reinit_close_bracket(context[16]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[20], context[1] );
    refalrts::link_brackets( context[40], context[17] );
    refalrts::link_brackets( context[44], context[16] );
    refalrts::link_brackets( context[4], context[37] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[20] );
    res = refalrts::splice_evar( res, context[68], context[69] );
    res = refalrts::splice_evar( res, context[33], context[36] );
    res = refalrts::splice_evar( res, context[41], context[44] );
    res = refalrts::splice_evar( res, context[37], context[40] );
    res = refalrts::splice_evar( res, context[70], context[71] );
    res = refalrts::splice_evar( res, context[4], context[13] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecCall-Aux:1/4 (/7 e.new18/5 )/8 (/11 e.new19/9 )/12 s.new15/13 (/16 e.new20/14 )/17 (/20 e.new21/18 )/21 (/24 e.new22/22 )/25 (/28 e.new23/26 )/29 (/32 e.new24/30 )/33 (/36 e.new25/34 )/37 (/40 e.new26/38 )/41 (/44 e.new27/42 )/45 s.new16/46 # NotFound/47 e.new17/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_NotFound], context[47] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new18 as range 5
  // closed e.new19 as range 9
  // closed e.new20 as range 14
  // closed e.new21 as range 18
  // closed e.new22 as range 22
  // closed e.new23 as range 26
  // closed e.new24 as range 30
  // closed e.new25 as range 34
  // closed e.new26 as range 38
  // closed e.new27 as range 42
  // closed e.new17 as range 2
  do {
    // </0 & SpecCall-Aux:1/4 (/7 e.SpecPattern/48 )/8 (/11 e.Body/50 )/12 s.NextNumber/13 (/16 e.SpecializedFuncArgument$a/52 )/17 (/20 e.Signature/54 )/21 (/24 e.Argument/56 )/25 (/28 e.StaticMatches/58 )/29 (/32 e.Name/60 )/33 (/36 e.DynamicMatches/62 )/37 (/40 e.History/64 )/41 (/44 e.Calls/66 )/45 # True/46 # NotFound/47 e.Signatures$a/68 >/1
    context[48] = context[5];
    context[49] = context[6];
    context[50] = context[9];
    context[51] = context[10];
    context[52] = context[14];
    context[53] = context[15];
    context[54] = context[18];
    context[55] = context[19];
    context[56] = context[22];
    context[57] = context[23];
    context[58] = context[26];
    context[59] = context[27];
    context[60] = context[30];
    context[61] = context[31];
    context[62] = context[34];
    context[63] = context[35];
    context[64] = context[38];
    context[65] = context[39];
    context[66] = context[42];
    context[67] = context[43];
    context[68] = context[2];
    context[69] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_True], context[46] ) )
      continue;
    // closed e.SpecPattern as range 48
    // closed e.Body as range 50
    // closed e.SpecializedFuncArgument$a as range 52
    // closed e.Signature as range 54
    // closed e.Argument as range 56
    // closed e.StaticMatches as range 58
    // closed e.Name as range 60
    // closed e.DynamicMatches as range 62
    // closed e.History as range 64
    // closed e.Calls as range 66
    // closed e.Signatures$a as range 68
    //DEBUG: s.NextNumber: 13
    //DEBUG: e.SpecPattern: 48
    //DEBUG: e.Body: 50
    //DEBUG: e.SpecializedFuncArgument$a: 52
    //DEBUG: e.Signature: 54
    //DEBUG: e.Argument: 56
    //DEBUG: e.StaticMatches: 58
    //DEBUG: e.Name: 60
    //DEBUG: e.DynamicMatches: 62
    //DEBUG: e.History: 64
    //DEBUG: e.Calls: 66
    //DEBUG: e.Signatures$a: 68

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </47 } Tile{ HalfReuse: & SpecCall-Aux:1$2=1/17 AsIs: (/20 AsIs: e.Signature/54 AsIs: )/21 AsIs: (/24 AsIs: e.Argument/56 AsIs: )/25 AsIs: (/28 } Tile{ AsIs: e.SpecPattern/48 } )/70 (/71 Tile{ AsIs: e.StaticMatches/58 } Tile{ AsIs: )/29 AsIs: (/32 } Tile{ AsIs: e.Name/60 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Body/50 AsIs: )/12 AsIs: s.NextNumber/13 AsIs: (/16 } Tile{ AsIs: e.Signatures$a/68 } Tile{ AsIs: )/33 AsIs: (/36 AsIs: e.DynamicMatches/62 AsIs: )/37 AsIs: (/40 AsIs: e.History/64 AsIs: )/41 AsIs: (/44 AsIs: e.Calls/66 AsIs: )/45 HalfReuse: (/46 } Tile{ AsIs: e.SpecializedFuncArgument$a/52 } )/72 Tile{ AsIs: </0 Reuse: & HasHigmanKruskalRelation/4 AsIs: (/7 } e.Name/60/73 )/75 (/76 </77 & OptTree-CanonizeTuple/78 e.Signature/54/79 >/81 )/82 e.History/64/83 >/85 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[70]);
    refalrts::alloc_open_bracket(vm, context[71]);
    refalrts::alloc_close_bracket(vm, context[72]);
    refalrts::copy_evar(vm, context[73], context[74], context[60], context[61]);
    refalrts::alloc_close_bracket(vm, context[75]);
    refalrts::alloc_open_bracket(vm, context[76]);
    refalrts::alloc_open_call(vm, context[77]);
    refalrts::alloc_name(vm, context[78], functions[efunc_OptTreem_CanonizeTuple]);
    refalrts::copy_evar(vm, context[79], context[80], context[54], context[55]);
    refalrts::alloc_close_call(vm, context[81]);
    refalrts::alloc_close_bracket(vm, context[82]);
    refalrts::copy_evar(vm, context[83], context[84], context[64], context[65]);
    refalrts::alloc_close_call(vm, context[85]);
    refalrts::reinit_open_call(context[47]);
    refalrts::reinit_name(context[17], functions[efunc_gen_SpecCallm_Aux_B1S2A1]);
    refalrts::reinit_open_bracket(context[46]);
    refalrts::update_name(context[4], functions[efunc_HasHigmanKruskalRelation]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[85] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[76], context[82] );
    refalrts::push_stack( vm, context[81] );
    refalrts::push_stack( vm, context[77] );
    refalrts::link_brackets( context[7], context[75] );
    refalrts::link_brackets( context[46], context[72] );
    refalrts::link_brackets( context[44], context[45] );
    refalrts::link_brackets( context[40], context[41] );
    refalrts::link_brackets( context[36], context[37] );
    refalrts::link_brackets( context[16], context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[32], context[8] );
    refalrts::link_brackets( context[71], context[29] );
    refalrts::link_brackets( context[28], context[70] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[75], context[85] );
    res = refalrts::splice_evar( res, context[73], context[74] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[72] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[33], context[46] );
    res = refalrts::splice_evar( res, context[68], context[69] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[70], context[71] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[17], context[28] );
    res = refalrts::splice_elem( res, context[47] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SpecCall-Aux:1/4 (/7 e.SpecPattern/48 )/8 (/11 e.Body/50 )/12 s.NextNumber/13 (/16 e.SpecializedFuncArgument$a/52 )/17 (/20 e.Signature/54 )/21 (/24 e.Argument/56 )/25 (/28 e.StaticMatches/58 )/29 (/32 e.Name/60 )/33 (/36 e.DynamicMatches/62 )/37 (/40 e.History/64 )/41 (/44 e.Calls/66 )/45 # False/46 # NotFound/47 e.Signatures$a/68 >/1
    context[48] = context[5];
    context[49] = context[6];
    context[50] = context[9];
    context[51] = context[10];
    context[52] = context[14];
    context[53] = context[15];
    context[54] = context[18];
    context[55] = context[19];
    context[56] = context[22];
    context[57] = context[23];
    context[58] = context[26];
    context[59] = context[27];
    context[60] = context[30];
    context[61] = context[31];
    context[62] = context[34];
    context[63] = context[35];
    context[64] = context[38];
    context[65] = context[39];
    context[66] = context[42];
    context[67] = context[43];
    context[68] = context[2];
    context[69] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_False], context[46] ) )
      continue;
    // closed e.SpecPattern as range 48
    // closed e.Body as range 50
    // closed e.SpecializedFuncArgument$a as range 52
    // closed e.Signature as range 54
    // closed e.Argument as range 56
    // closed e.StaticMatches as range 58
    // closed e.Name as range 60
    // closed e.DynamicMatches as range 62
    // closed e.History as range 64
    // closed e.Calls as range 66
    // closed e.Signatures$a as range 68
    //DEBUG: s.NextNumber: 13
    //DEBUG: e.SpecPattern: 48
    //DEBUG: e.Body: 50
    //DEBUG: e.SpecializedFuncArgument$a: 52
    //DEBUG: e.Signature: 54
    //DEBUG: e.Argument: 56
    //DEBUG: e.StaticMatches: 58
    //DEBUG: e.Name: 60
    //DEBUG: e.DynamicMatches: 62
    //DEBUG: e.History: 64
    //DEBUG: e.Calls: 66
    //DEBUG: e.Signatures$a: 68

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.DynamicMatches/62 {REMOVED TILE} e.Calls/66 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecCall-Aux:1$2:1$2=1/4 AsIs: (/7 AsIs: e.SpecPattern/48 AsIs: )/8 AsIs: (/11 AsIs: e.Body/50 AsIs: )/12 AsIs: s.NextNumber/13 AsIs: (/16 } Tile{ AsIs: e.Signatures$a/68 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.Signature/54 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.SpecializedFuncArgument$a/52 } Tile{ AsIs: )/37 AsIs: (/40 AsIs: e.History/64 AsIs: )/41 AsIs: (/44 } Tile{ AsIs: e.Name/60 } )/70 (/71 Tile{ AsIs: e.Argument/56 } Tile{ AsIs: )/45 HalfReuse: </46 HalfReuse: & PrepareSpecializedFuncBody=1/47 } (/72 e.SpecPattern/48/73 Tile{ AsIs: )/33 AsIs: (/36 } e.Body/50/75 Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.StaticMatches/58 AsIs: )/29 HalfReuse: </32 } & ExtractVariables/77 e.Body/50/78 >/80 >/81 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[70]);
    refalrts::alloc_open_bracket(vm, context[71]);
    refalrts::alloc_open_bracket(vm, context[72]);
    refalrts::copy_evar(vm, context[73], context[74], context[48], context[49]);
    refalrts::copy_evar(vm, context[75], context[76], context[50], context[51]);
    refalrts::alloc_name(vm, context[77], functions[efunc_ExtractVariables]);
    refalrts::copy_evar(vm, context[78], context[79], context[50], context[51]);
    refalrts::alloc_close_call(vm, context[80]);
    refalrts::alloc_close_call(vm, context[81]);
    refalrts::update_name(context[4], functions[efunc_gen_SpecCallm_Aux_B1S2B1S2A1]);
    refalrts::reinit_open_call(context[46]);
    refalrts::reinit_name(context[47], functions[efunc_gen_PrepareSpecializedFuncBody_A1]);
    refalrts::reinit_open_call(context[32]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[81] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[80] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[36], context[25] );
    refalrts::link_brackets( context[72], context[33] );
    refalrts::link_brackets( context[71], context[45] );
    refalrts::link_brackets( context[44], context[70] );
    refalrts::link_brackets( context[40], context[41] );
    refalrts::link_brackets( context[24], context[37] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[77], context[81] );
    res = refalrts::splice_evar( res, context[25], context[32] );
    res = refalrts::splice_evar( res, context[75], context[76] );
    res = refalrts::splice_evar( res, context[33], context[36] );
    res = refalrts::splice_evar( res, context[73], context[74] );
    res = refalrts::splice_elem( res, context[72] );
    res = refalrts::splice_evar( res, context[45], context[47] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[70], context[71] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[37], context[44] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[17], context[24] );
    res = refalrts::splice_evar( res, context[68], context[69] );
    refalrts::splice_to_freelist_open( vm, context[16], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecCall-Aux:1/4 (/7 e.SpecPattern/5 )/8 (/11 e.Body/9 )/12 s.NextNumber/13 (/16 e.SpecializedFuncArgument$a/14 )/17 (/20 e.Signature/18 )/21 (/24 e.Argument/22 )/25 (/28 e.StaticMatches/26 )/29 (/32 e.Name/30 )/33 (/36 e.DynamicMatches/34 )/37 (/40 e.History/38 )/41 (/44 e.Calls/42 )/45 s.NeedRelationCheck/46 # NotFound/47 e.Signatures$a/2 >/1
  // closed e.SpecPattern as range 5
  // closed e.Body as range 9
  // closed e.SpecializedFuncArgument$a as range 14
  // closed e.Signature as range 18
  // closed e.Argument as range 22
  // closed e.StaticMatches as range 26
  // closed e.Name as range 30
  // closed e.DynamicMatches as range 34
  // closed e.History as range 38
  // closed e.Calls as range 42
  // closed e.Signatures$a as range 2
  //DEBUG: s.NextNumber: 13
  //DEBUG: s.NeedRelationCheck: 46
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.Body: 9
  //DEBUG: e.SpecializedFuncArgument$a: 14
  //DEBUG: e.Signature: 18
  //DEBUG: e.Argument: 22
  //DEBUG: e.StaticMatches: 26
  //DEBUG: e.Name: 30
  //DEBUG: e.DynamicMatches: 34
  //DEBUG: e.History: 38
  //DEBUG: e.Calls: 42
  //DEBUG: e.Signatures$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </48 Tile{ HalfReuse: & SpecCall-Aux:1$2=1/17 AsIs: (/20 AsIs: e.Signature/18 AsIs: )/21 AsIs: (/24 AsIs: e.Argument/22 AsIs: )/25 AsIs: (/28 } Tile{ AsIs: e.SpecPattern/5 } )/49 (/50 Tile{ AsIs: e.StaticMatches/26 } Tile{ AsIs: )/29 AsIs: (/32 } Tile{ AsIs: e.Name/30 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Body/9 AsIs: )/12 AsIs: s.NextNumber/13 AsIs: (/16 } Tile{ AsIs: e.Signatures$a/2 } Tile{ AsIs: )/33 AsIs: (/36 AsIs: e.DynamicMatches/34 AsIs: )/37 AsIs: (/40 AsIs: e.History/38 AsIs: )/41 AsIs: (/44 AsIs: e.Calls/42 AsIs: )/45 } (/51 Tile{ AsIs: e.SpecializedFuncArgument$a/14 } )/52 Tile{ AsIs: </0 Reuse: & SpecCall-Aux:1$2=1:1*2/4 AsIs: (/7 } e.Name/30/53 )/55 (/56 e.Signature/18/57 )/59 (/60 e.History/38/61 )/63 Tile{ AsIs: s.NeedRelationCheck/46 HalfReuse: >/47 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[48]);
  refalrts::alloc_close_bracket(vm, context[49]);
  refalrts::alloc_open_bracket(vm, context[50]);
  refalrts::alloc_open_bracket(vm, context[51]);
  refalrts::alloc_close_bracket(vm, context[52]);
  refalrts::copy_evar(vm, context[53], context[54], context[30], context[31]);
  refalrts::alloc_close_bracket(vm, context[55]);
  refalrts::alloc_open_bracket(vm, context[56]);
  refalrts::copy_evar(vm, context[57], context[58], context[18], context[19]);
  refalrts::alloc_close_bracket(vm, context[59]);
  refalrts::alloc_open_bracket(vm, context[60]);
  refalrts::copy_evar(vm, context[61], context[62], context[38], context[39]);
  refalrts::alloc_close_bracket(vm, context[63]);
  refalrts::reinit_name(context[17], functions[efunc_gen_SpecCallm_Aux_B1S2A1]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecCallm_Aux_B1S2A1B1D2]);
  refalrts::reinit_close_call(context[47]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[47] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[60], context[63] );
  refalrts::link_brackets( context[56], context[59] );
  refalrts::link_brackets( context[7], context[55] );
  refalrts::link_brackets( context[51], context[52] );
  refalrts::link_brackets( context[44], context[45] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[16], context[33] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[32], context[8] );
  refalrts::link_brackets( context[50], context[29] );
  refalrts::link_brackets( context[28], context[49] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[46], context[47] );
  res = refalrts::splice_evar( res, context[55], context[63] );
  res = refalrts::splice_evar( res, context[53], context[54] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[52] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[51] );
  res = refalrts::splice_evar( res, context[33], context[45] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[29], context[32] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[49], context[50] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[28] );
  res = refalrts::splice_elem( res, context[48] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecCallm_Aux_B1("SpecCall-Aux:1", COOKIE1_, COOKIE2_, func_gen_SpecCallm_Aux_B1);


static refalrts::FnResult func_gen_SpecCallm_Aux_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & SpecCall-Aux=2/4 (/7 e.SpecPattern/5 )/8 (/11 e.Body/9 )/12 s.NextNumber/13 (/16 e.Signature/14 )/17 (/20 e.Argument/18 )/21 (/24 e.StaticMatches/22 )/25 (/28 e.Name/26 )/29 (/32 e.DynamicMatches/30 )/33 (/36 e.History/34 )/37 (/40 e.Calls/38 )/41 s.NeedRelationCheck/42 (/45 e.Signatures/43 )/46 e.SpecializedFuncArgument$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.SpecPattern as range 5
  // closed e.Body as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  // closed e.Signature as range 14
  // closed e.Argument as range 18
  // closed e.StaticMatches as range 22
  // closed e.Name as range 26
  // closed e.DynamicMatches as range 30
  // closed e.History as range 34
  // closed e.Calls as range 38
  if( ! refalrts::svar_left( context[42], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[43] = 0;
  context[44] = 0;
  context[45] = refalrts::brackets_left( context[43], context[44], context[2], context[3] );
  if( ! context[45] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[45], context[46]);
  // closed e.Signatures as range 43
  // closed e.SpecializedFuncArgument$a as range 2
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.Body: 9
  //DEBUG: s.NextNumber: 13
  //DEBUG: e.Signature: 14
  //DEBUG: e.Argument: 18
  //DEBUG: e.StaticMatches: 22
  //DEBUG: e.Name: 26
  //DEBUG: e.DynamicMatches: 30
  //DEBUG: e.History: 34
  //DEBUG: e.Calls: 38
  //DEBUG: s.NeedRelationCheck: 42
  //DEBUG: e.Signatures: 43
  //DEBUG: e.SpecializedFuncArgument$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecCall-Aux:1/4 AsIs: (/7 AsIs: e.SpecPattern/5 AsIs: )/8 AsIs: (/11 AsIs: e.Body/9 AsIs: )/12 AsIs: s.NextNumber/13 } (/47 Tile{ AsIs: e.SpecializedFuncArgument$a/2 } Tile{ AsIs: )/46 } Tile{ AsIs: (/16 AsIs: e.Signature/14 AsIs: )/17 AsIs: (/20 AsIs: e.Argument/18 AsIs: )/21 AsIs: (/24 AsIs: e.StaticMatches/22 AsIs: )/25 AsIs: (/28 AsIs: e.Name/26 AsIs: )/29 AsIs: (/32 AsIs: e.DynamicMatches/30 AsIs: )/33 AsIs: (/36 AsIs: e.History/34 AsIs: )/37 AsIs: (/40 AsIs: e.Calls/38 AsIs: )/41 AsIs: s.NeedRelationCheck/42 HalfReuse: </45 } & Spec-FindInSignatures/48 (/49 e.Signature/14/50 )/52 Tile{ AsIs: e.Signatures/43 } >/53 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[47]);
  refalrts::alloc_name(vm, context[48], functions[efunc_Specm_FindInSignatures]);
  refalrts::alloc_open_bracket(vm, context[49]);
  refalrts::copy_evar(vm, context[50], context[51], context[14], context[15]);
  refalrts::alloc_close_bracket(vm, context[52]);
  refalrts::alloc_close_call(vm, context[53]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecCallm_Aux_B1]);
  refalrts::reinit_open_call(context[45]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[53] );
  refalrts::push_stack( vm, context[45] );
  refalrts::link_brackets( context[49], context[52] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[47], context[46] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[53] );
  res = refalrts::splice_evar( res, context[43], context[44] );
  res = refalrts::splice_evar( res, context[48], context[52] );
  res = refalrts::splice_evar( res, context[16], context[45] );
  res = refalrts::splice_elem( res, context[46] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[47] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecCallm_Aux_A2("SpecCall-Aux=2", COOKIE1_, COOKIE2_, func_gen_SpecCallm_Aux_A2);


static refalrts::FnResult func_gen_SpecCallm_Aux_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & SpecCall-Aux=1/4 (/7 e.SpecPattern/5 )/8 (/11 e.Body/9 )/12 s.NextNumber/13 (/16 e.Signature/14 )/17 (/20 e.Argument/18 )/21 (/24 e.StaticMatches/22 )/25 (/28 e.Name/26 )/29 (/32 e.DynamicMatches/30 )/33 (/36 e.History/34 )/37 (/40 e.Calls/38 )/41 s.NeedRelationCheck/42 (/45 e.Signatures/43 )/46 e.SpecializedFuncArgument/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.SpecPattern as range 5
  // closed e.Body as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  // closed e.Signature as range 14
  // closed e.Argument as range 18
  // closed e.StaticMatches as range 22
  // closed e.Name as range 26
  // closed e.DynamicMatches as range 30
  // closed e.History as range 34
  // closed e.Calls as range 38
  if( ! refalrts::svar_left( context[42], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[43] = 0;
  context[44] = 0;
  context[45] = refalrts::brackets_left( context[43], context[44], context[2], context[3] );
  if( ! context[45] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[45], context[46]);
  // closed e.Signatures as range 43
  // closed e.SpecializedFuncArgument as range 2
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.Body: 9
  //DEBUG: s.NextNumber: 13
  //DEBUG: e.Signature: 14
  //DEBUG: e.Argument: 18
  //DEBUG: e.StaticMatches: 22
  //DEBUG: e.Name: 26
  //DEBUG: e.DynamicMatches: 30
  //DEBUG: e.History: 34
  //DEBUG: e.Calls: 38
  //DEBUG: s.NeedRelationCheck: 42
  //DEBUG: e.Signatures: 43
  //DEBUG: e.SpecializedFuncArgument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecCall-Aux=2/4 AsIs: (/7 AsIs: e.SpecPattern/5 AsIs: )/8 AsIs: (/11 AsIs: e.Body/9 AsIs: )/12 AsIs: s.NextNumber/13 AsIs: (/16 AsIs: e.Signature/14 AsIs: )/17 AsIs: (/20 AsIs: e.Argument/18 AsIs: )/21 AsIs: (/24 AsIs: e.StaticMatches/22 AsIs: )/25 AsIs: (/28 AsIs: e.Name/26 AsIs: )/29 AsIs: (/32 AsIs: e.DynamicMatches/30 AsIs: )/33 AsIs: (/36 AsIs: e.History/34 AsIs: )/37 AsIs: (/40 AsIs: e.Calls/38 AsIs: )/41 AsIs: s.NeedRelationCheck/42 AsIs: (/45 AsIs: e.Signatures/43 AsIs: )/46 } </47 & Map@11/48 (/49 e.Calls/38/50 )/52 Tile{ AsIs: e.SpecializedFuncArgument/2 } >/53 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[47]);
  refalrts::alloc_name(vm, context[48], functions[efunc_gen_Map_Z11]);
  refalrts::alloc_open_bracket(vm, context[49]);
  refalrts::copy_evar(vm, context[50], context[51], context[38], context[39]);
  refalrts::alloc_close_bracket(vm, context[52]);
  refalrts::alloc_close_call(vm, context[53]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecCallm_Aux_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[53] );
  refalrts::push_stack( vm, context[47] );
  refalrts::link_brackets( context[49], context[52] );
  refalrts::link_brackets( context[45], context[46] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[53] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[47], context[52] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecCallm_Aux_A1("SpecCall-Aux=1", COOKIE1_, COOKIE2_, func_gen_SpecCallm_Aux_A1);


static refalrts::FnResult func_SpecCallm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  // </0 & SpecCall-Aux/4 (/7 e.Name/5 )/8 (/11 e.SpecPattern/9 )/12 (/15 e.Body/13 )/16 s.NextNumber/17 e.Signatures/2 (/41 e.Argument/39 )/42 (/37 e.Signature/35 )/38 (/33 e.StaticMatches/31 )/34 (/29 e.DynamicMatches/27 )/30 (/25 e.Calls/23 )/26 (/21 e.History/19 )/22 s.NeedRelationCheck/18 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Name as range 5
  // closed e.SpecPattern as range 9
  // closed e.Body as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_right( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_right( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_right( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_right( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_right( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_right( context[39], context[40], context[2], context[3] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  // closed e.Signatures as range 2
  // closed e.Argument as range 39
  // closed e.Signature as range 35
  // closed e.StaticMatches as range 31
  // closed e.DynamicMatches as range 27
  // closed e.Calls as range 23
  // closed e.History as range 19
  //DEBUG: e.Name: 5
  //DEBUG: e.SpecPattern: 9
  //DEBUG: e.Body: 13
  //DEBUG: s.NextNumber: 17
  //DEBUG: s.NeedRelationCheck: 18
  //DEBUG: e.Signatures: 2
  //DEBUG: e.Argument: 39
  //DEBUG: e.Signature: 35
  //DEBUG: e.StaticMatches: 31
  //DEBUG: e.DynamicMatches: 27
  //DEBUG: e.Calls: 23
  //DEBUG: e.History: 19

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & SpecCall-Aux=1/8 AsIs: (/11 AsIs: e.SpecPattern/9 AsIs: )/12 AsIs: (/15 AsIs: e.Body/13 AsIs: )/16 AsIs: s.NextNumber/17 } (/43 Tile{ AsIs: e.Signature/35 } )/44 Tile{ AsIs: (/41 AsIs: e.Argument/39 AsIs: )/42 AsIs: (/37 } e.StaticMatches/31/45 Tile{ HalfReuse: )/4 AsIs: (/7 } Tile{ AsIs: e.Name/5 } )/47 (/48 e.DynamicMatches/27/49 Tile{ AsIs: )/26 AsIs: (/21 AsIs: e.History/19 AsIs: )/22 } (/51 Tile{ AsIs: e.Calls/23 } )/52 Tile{ AsIs: s.NeedRelationCheck/18 } (/53 Tile{ AsIs: e.Signatures/2 } )/54 </55 Tile{ HalfReuse: & PrepareArgOrPattern=1/38 AsIs: (/33 AsIs: e.StaticMatches/31 AsIs: )/34 AsIs: (/29 AsIs: e.DynamicMatches/27 AsIs: )/30 HalfReuse: </25 } & ExtractVariables-Expr/56 e.SpecPattern/9/57 >/59 >/60 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[43]);
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::copy_evar(vm, context[45], context[46], context[31], context[32]);
  refalrts::alloc_close_bracket(vm, context[47]);
  refalrts::alloc_open_bracket(vm, context[48]);
  refalrts::copy_evar(vm, context[49], context[50], context[27], context[28]);
  refalrts::alloc_open_bracket(vm, context[51]);
  refalrts::alloc_close_bracket(vm, context[52]);
  refalrts::alloc_open_bracket(vm, context[53]);
  refalrts::alloc_close_bracket(vm, context[54]);
  refalrts::alloc_open_call(vm, context[55]);
  refalrts::alloc_name(vm, context[56], functions[efunc_ExtractVariablesm_Expr]);
  refalrts::copy_evar(vm, context[57], context[58], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[59]);
  refalrts::alloc_close_call(vm, context[60]);
  refalrts::reinit_name(context[8], functions[efunc_gen_SpecCallm_Aux_A1]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_name(context[38], functions[efunc_gen_PrepareArgOrPattern_A1]);
  refalrts::reinit_open_call(context[25]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[60] );
  refalrts::push_stack( vm, context[55] );
  refalrts::push_stack( vm, context[59] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[53], context[54] );
  refalrts::link_brackets( context[51], context[52] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[48], context[26] );
  refalrts::link_brackets( context[7], context[47] );
  refalrts::link_brackets( context[37], context[4] );
  refalrts::link_brackets( context[41], context[42] );
  refalrts::link_brackets( context[43], context[44] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[56], context[60] );
  res = refalrts::splice_evar( res, context[38], context[25] );
  res = refalrts::splice_evar( res, context[54], context[55] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[53] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_elem( res, context[52] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_elem( res, context[51] );
  res = refalrts::splice_evar( res, context[26], context[22] );
  res = refalrts::splice_evar( res, context[49], context[50] );
  res = refalrts::splice_evar( res, context[47], context[48] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[4], context[7] );
  res = refalrts::splice_evar( res, context[45], context[46] );
  res = refalrts::splice_evar( res, context[41], context[37] );
  res = refalrts::splice_elem( res, context[44] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_elem( res, context[43] );
  res = refalrts::splice_evar( res, context[8], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SpecCallm_Aux("SpecCall-Aux", COOKIE1_, COOKIE2_, func_SpecCallm_Aux);


static refalrts::FnResult func_gen_ExtractCalls_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ExtractCalls=2/4 (/7 e.Calls/5 (/11 e.UsedVars$a/9 )/12 )/8 e.StaticMatches$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Calls as range 5
  // closed e.UsedVars$a as range 9
  // closed e.StaticMatches$a as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.UsedVars$a: 9
  //DEBUG: e.StaticMatches$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ExtractCalls=2/4 {REMOVED TILE} e.UsedVars$a/9 )/12 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Calls/5 HalfReuse: )/11 } Tile{ AsIs: e.StaticMatches$a/2 } Tile{ ]] }
  refalrts::reinit_close_bracket(context[11]);
  refalrts::link_brackets( context[7], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractCalls_A2("ExtractCalls=2", COOKIE1_, COOKIE2_, func_gen_ExtractCalls_A2);


static refalrts::FnResult func_gen_ExtractCalls_A2L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & ExtractCalls=2\1=1/4 t.Var/5 (/9 e.Calls$a/7 (/13 e.UsedVars$b/11 )/14 )/10 e.Expr$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_right( context[11], context[12], context[7], context[8] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Calls$a as range 7
  // closed e.UsedVars$b as range 11
  // closed e.Expr$a as range 2
  //DEBUG: t.Var: 5
  //DEBUG: e.Calls$a: 7
  //DEBUG: e.UsedVars$b: 11
  //DEBUG: e.Expr$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Calls$a/7 AsIs: (/13 AsIs: e.UsedVars$b/11 AsIs: )/14 AsIs: )/10 } Tile{ HalfReuse: (/0 } Tile{ AsIs: e.Expr$a/2 } Tile{ HalfReuse: ':'/4 AsIs: t.Var/5 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_char(context[4], ':');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[4], context[6] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractCalls_A2L1A1("ExtractCalls=2\\1=1", COOKIE1_, COOKIE2_, func_gen_ExtractCalls_A2L1A1);


static refalrts::FnResult func_gen_ExtractCalls_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & ExtractCalls=1/4 (/7 e.StaticMatches/5 )/8 e.UsedVars/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.StaticMatches as range 5
  // closed e.UsedVars as range 2
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.UsedVars: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractCalls=2/4 HalfReuse: </7 } & DoMapAccum@8/9 (/10 (/11 Tile{ AsIs: e.UsedVars/2 } Tile{ AsIs: )/8 } )/12 (/13 )/14 Tile{ AsIs: e.StaticMatches/5 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_DoMapAccum_Z8]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractCalls_A2]);
  refalrts::reinit_open_call(context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[10], context[12] );
  refalrts::link_brackets( context[11], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[12], context[14] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractCalls_A1("ExtractCalls=1", COOKIE1_, COOKIE2_, func_gen_ExtractCalls_A1);


static refalrts::FnResult func_ExtractCalls(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & ExtractCalls/4 e.StaticMatches/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.StaticMatches as range 2
  //DEBUG: e.StaticMatches: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & ExtractCalls=1/6 (/7 e.StaticMatches/2/8 )/10 Tile{ AsIs: </0 Reuse: & Map@12/4 AsIs: e.StaticMatches/2 AsIs: >/1 } >/11 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_ExtractCalls_A1]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::copy_evar(vm, context[8], context[9], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z12]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractCalls("ExtractCalls", COOKIE1_, COOKIE2_, func_ExtractCalls);


static refalrts::FnResult func_ExtractCallsm_Expr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & ExtractCalls-Expr/4 (/7 e.Calls/5 (/11 e.UsedVars/9 )/12 )/8 e.Expr/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Calls as range 5
  // closed e.UsedVars as range 9
  // closed e.Expr as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.UsedVars: 9
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.Calls/5 AsIs: (/11 AsIs: e.UsedVars/9 AsIs: )/12 AsIs: )/8 } (/13 )/14 Tile{ AsIs: e.Expr/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractCallsm_Expr("ExtractCalls-Expr", COOKIE1_, COOKIE2_, func_ExtractCallsm_Expr);


static refalrts::FnResult func_gen_ExtractCallsm_Term_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & ExtractCalls-Term$1=1/4 (/7 e.Calls/5 )/8 (/11 e.Expr/9 )/12 (/15 e.UsedVars$a/13 )/16 e.NewVar/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Calls as range 5
  // closed e.Expr as range 9
  // closed e.UsedVars$a as range 13
  // closed e.NewVar as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.Expr: 9
  //DEBUG: e.UsedVars$a: 13
  //DEBUG: e.NewVar: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Calls/5 HalfReuse: (/8 AsIs: (/11 } # CallBrackets/17 Tile{ AsIs: e.Expr/9 } )/18 Tile{ HalfReuse: ':'/0 HalfReuse: (/4 } e.NewVar/2/19 )/21 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.UsedVars$a/13 AsIs: )/16 } )/22 (/23 # Var/24 Tile{ AsIs: e.NewVar/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[17], identifiers[ident_CallBrackets]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::copy_evar(vm, context[19], context[20], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_ident(vm, context[24], identifiers[ident_Var]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_char(context[0], ':');
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[23], context[1] );
  refalrts::link_brackets( context[7], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::link_brackets( context[4], context[21] );
  refalrts::link_brackets( context[11], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[24] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractCallsm_Term_S1A1("ExtractCalls-Term$1=1", COOKIE1_, COOKIE2_, func_gen_ExtractCallsm_Term_S1A1);


static refalrts::FnResult func_gen_ExtractCallsm_Term_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ExtractCalls-Term$2=1/4 (/7 e.Calls$a/5 (/11 e.UsedVars$a/9 )/12 )/8 e.Expr$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Calls$a as range 5
  // closed e.UsedVars$a as range 9
  // closed e.Expr$a as range 2
  //DEBUG: e.Calls$a: 5
  //DEBUG: e.UsedVars$a: 9
  //DEBUG: e.Expr$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Calls$a/5 AsIs: (/11 AsIs: e.UsedVars$a/9 AsIs: )/12 AsIs: )/8 } Tile{ HalfReuse: (/0 HalfReuse: # Brackets/4 } Tile{ AsIs: e.Expr$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractCallsm_Term_S2A1("ExtractCalls-Term$2=1", COOKIE1_, COOKIE2_, func_gen_ExtractCallsm_Term_S2A1);


static refalrts::FnResult func_gen_ExtractCallsm_Term_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & ExtractCalls-Term$3=1/4 (/7 e.Name/5 )/8 (/11 e.Calls$a/9 (/15 e.UsedVars$a/13 )/16 )/12 e.Expr$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Name as range 5
  // closed e.Calls$a as range 9
  // closed e.UsedVars$a as range 13
  // closed e.Expr$a as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.Calls$a: 9
  //DEBUG: e.UsedVars$a: 13
  //DEBUG: e.Expr$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.Calls$a/9 AsIs: (/15 AsIs: e.UsedVars$a/13 AsIs: )/16 AsIs: )/12 } Tile{ HalfReuse: (/0 HalfReuse: # ADT-Brackets/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 } Tile{ AsIs: e.Expr$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_ADTm_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractCallsm_Term_S3A1("ExtractCalls-Term$3=1", COOKIE1_, COOKIE2_, func_gen_ExtractCallsm_Term_S3A1);


static refalrts::FnResult func_ExtractCallsm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & ExtractCalls-Term/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ExtractCalls-Term/4 (/7 e.new1/5 (/11 e.new2/9 )/12 )/8 t.new3/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ExtractCalls-Term/4 (/7 e.new6/15 (/11 e.new7/17 )/12 )/8 (/13 s.new4/21 e.new5/19 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    context[19] = 0;
    context[20] = 0;
    if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
      continue;
    // closed e.new6 as range 15
    // closed e.new7 as range 17
    if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
      continue;
    // closed e.new5 as range 19
    do {
      // </0 & ExtractCalls-Term/4 (/7 e.Calls/22 (/11 e.UsedVars/24 )/12 )/8 (/13 # CallBrackets/21 e.Expr/26 )/14 >/1
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[21] ) )
        continue;
      // closed e.Calls as range 22
      // closed e.UsedVars as range 24
      // closed e.Expr as range 26
      //DEBUG: e.Calls: 22
      //DEBUG: e.UsedVars: 24
      //DEBUG: e.Expr: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractCalls-Term$1=1/4 AsIs: (/7 AsIs: e.Calls/22 HalfReuse: )/11 } Tile{ HalfReuse: (/21 AsIs: e.Expr/26 AsIs: )/14 HalfReuse: </1 } & NewVarName/28 (/29 Tile{ AsIs: e.UsedVars/24 } Tile{ AsIs: )/12 HalfReuse: 'e'/8 HalfReuse: 'C'/13 }"all"/30 >/32 >/33 Tile{ ]] }
      refalrts::alloc_name(vm, context[28], functions[efunc_NewVarName]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "all", 3);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::update_name(context[4], functions[efunc_gen_ExtractCallsm_Term_S1A1]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::reinit_open_call(context[1]);
      refalrts::reinit_char(context[8], 'e');
      refalrts::reinit_char(context[13], 'C');
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[1] );
      refalrts::link_brackets( context[29], context[12] );
      refalrts::link_brackets( context[21], context[14] );
      refalrts::link_brackets( context[7], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[21], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ExtractCalls-Term/4 (/7 e.Calls/22 (/11 e.UsedVars/24 )/12 )/8 (/13 # Brackets/21 e.Expr/26 )/14 >/1
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[21] ) )
        continue;
      // closed e.Calls as range 22
      // closed e.UsedVars as range 24
      // closed e.Expr as range 26
      //DEBUG: e.Calls: 22
      //DEBUG: e.UsedVars: 24
      //DEBUG: e.Expr: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </28 & ExtractCalls-Term$2=1/29 Tile{ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.Calls/22 AsIs: (/11 AsIs: e.UsedVars/24 AsIs: )/12 AsIs: )/8 AsIs: (/13 HalfReuse: )/21 AsIs: e.Expr/26 HalfReuse: >/14 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_ExtractCallsm_Term_S2A1]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
      refalrts::reinit_close_bracket(context[21]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[21] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ExtractCalls-Term/4 (/7 e.Calls/22 (/11 e.UsedVars/24 )/12 )/8 (/13 # ADT-Brackets/21 (/30 e.Name/28 )/31 e.Expr/26 )/14 >/1
    context[22] = context[15];
    context[23] = context[16];
    context[24] = context[17];
    context[25] = context[18];
    context[26] = context[19];
    context[27] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[21] ) )
      continue;
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.Calls as range 22
    // closed e.UsedVars as range 24
    // closed e.Name as range 28
    // closed e.Expr as range 26
    //DEBUG: e.Calls: 22
    //DEBUG: e.UsedVars: 24
    //DEBUG: e.Name: 28
    //DEBUG: e.Expr: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </32 & ExtractCalls-Term$3=1/33 Tile{ AsIs: (/30 AsIs: e.Name/28 AsIs: )/31 } Tile{ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: (/7 AsIs: e.Calls/22 AsIs: (/11 AsIs: e.UsedVars/24 AsIs: )/12 AsIs: )/8 AsIs: (/13 HalfReuse: )/21 } Tile{ AsIs: e.Expr/26 } Tile{ HalfReuse: >/14 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_ExtractCallsm_Term_S3A1]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
    refalrts::reinit_close_bracket(context[21]);
    refalrts::reinit_close_call(context[14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[21] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[0], context[21] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractCalls-Term/4 (/7 e.Calls/5 (/11 e.UsedVars/9 )/12 )/8 t.OtherTerm/13 >/1
  // closed e.Calls as range 5
  // closed e.UsedVars as range 9
  //DEBUG: t.OtherTerm: 13
  //DEBUG: e.Calls: 5
  //DEBUG: e.UsedVars: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ExtractCalls-Term/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Calls/5 AsIs: (/11 AsIs: e.UsedVars/9 AsIs: )/12 AsIs: )/8 AsIs: t.OtherTerm/13 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[14] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractCallsm_Term("ExtractCalls-Term", COOKIE1_, COOKIE2_, func_ExtractCallsm_Term);


static refalrts::FnResult func_gen_IsSoundBody_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & IsSoundBody:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & IsSoundBody:1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & IsSoundBody:1/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsSoundBody:1/4 e.FoundClosures/2 >/1
  // closed e.FoundClosures as range 2
  //DEBUG: e.FoundClosures: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsSoundBody:1/4 e.FoundClosures/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsSoundBody_B1("IsSoundBody:1", COOKIE1_, COOKIE2_, func_gen_IsSoundBody_B1);


static refalrts::FnResult func_IsSoundBody(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & IsSoundBody/4 e.Body/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Body as range 2
  //DEBUG: e.Body: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & IsSoundBody:1/6 Tile{ AsIs: </0 Reuse: & Map@10/4 AsIs: e.Body/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_IsSoundBody_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsSoundBody("IsSoundBody", COOKIE1_, COOKIE2_, func_IsSoundBody);


static refalrts::FnResult func_FindClosuresInPatternsm_Body(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & FindClosuresInPatterns-Body/4 e.Body/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Body as range 2
  //DEBUG: e.Body: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@10/4 AsIs: e.Body/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindClosuresInPatternsm_Body("FindClosuresInPatterns-Body", COOKIE1_, COOKIE2_, func_FindClosuresInPatternsm_Body);


static refalrts::FnResult func_FindClosuresInPatternsm_Pattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & FindClosuresInPatterns-Pattern/4 e.Pattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Pattern as range 2
  //DEBUG: e.Pattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@14/4 AsIs: e.Pattern/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindClosuresInPatternsm_Pattern("FindClosuresInPatterns-Pattern", COOKIE1_, COOKIE2_, func_FindClosuresInPatternsm_Pattern);


static refalrts::FnResult func_FindClosuresInPatternsm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & FindClosuresInPatterns-Term/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindClosuresInPatterns-Term/4 (/7 s.new1/9 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 5
  do {
    // </0 & FindClosuresInPatterns-Term/4 (/7 s.new3/9 s.new4/12 e.new5/10 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    // closed e.new5 as range 10
    do {
      // </0 & FindClosuresInPatterns-Term/4 (/7 # Symbol/9 s.Type/12 e.Info/13 )/8 >/1
      context[13] = context[10];
      context[14] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[9] ) )
        continue;
      // closed e.Info as range 13
      //DEBUG: s.Type: 12
      //DEBUG: e.Info: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FindClosuresInPatterns-Term/4 (/7 # Symbol/9 s.Type/12 e.Info/13 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & FindClosuresInPatterns-Term/4 (/7 # Var/9 s.Type/12 e.Index/13 )/8 >/1
    context[13] = context[10];
    context[14] = context[11];
    if( ! refalrts::ident_term( identifiers[ident_Var], context[9] ) )
      continue;
    // closed e.Index as range 13
    //DEBUG: s.Type: 12
    //DEBUG: e.Index: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & FindClosuresInPatterns-Term/4 (/7 # Var/9 s.Type/12 e.Index/13 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FindClosuresInPatterns-Term/4 (/7 # Brackets/9 e.Pattern/10 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Brackets], context[9] ) )
      continue;
    // closed e.Pattern as range 10
    //DEBUG: e.Pattern: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 # Brackets/9 {REMOVED TILE} )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@14/4 } Tile{ AsIs: e.Pattern/10 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FindClosuresInPatterns-Term/4 (/7 # ADT-Brackets/9 (/14 e.Name/12 )/15 e.Pattern/10 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[9] ) )
      continue;
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[10], context[11] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    // closed e.Name as range 12
    // closed e.Pattern as range 10
    //DEBUG: e.Name: 12
    //DEBUG: e.Pattern: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 # ADT-Brackets/9 (/14 e.Name/12 )/15 {REMOVED TILE} )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@14/4 } Tile{ AsIs: e.Pattern/10 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindClosuresInPatterns-Term/4 (/7 # ClosureBrackets/9 e.Context/5 )/8 >/1
  if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Context as range 5
  //DEBUG: e.Context: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FindClosuresInPatterns-Term/4 (/7 # ClosureBrackets/9 e.Context/5 )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Found/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Found]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindClosuresInPatternsm_Term("FindClosuresInPatterns-Term", COOKIE1_, COOKIE2_, func_FindClosuresInPatternsm_Term);


static refalrts::FnResult func_gen_PrepareSignature_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & PrepareSignature=2/4 e.ExprList/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.ExprList as range 2
  //DEBUG: e.ExprList: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & RenameSignatureVars=3/4 } </5 & DoMapAccum@9/6 (/7 0/8 )/9 (/10 )/11 Tile{ AsIs: e.ExprList/2 } >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z9]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_number(vm, context[8], 0UL);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameSignatureVars_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSignature_A2("PrepareSignature=2", COOKIE1_, COOKIE2_, func_gen_PrepareSignature_A2);


static refalrts::FnResult func_gen_PrepareSignature_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & PrepareSignature=1/4 (/7 e.StaticMatches/5 )/8 e.SpecVars/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.StaticMatches as range 5
  // closed e.SpecVars as range 2
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.SpecVars: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & PrepareSignature=2/10 </11 & PrepareSignature-SortVars=1/12 Tile{ AsIs: </0 Reuse: & DoMapAccum@10/4 AsIs: (/7 AsIs: e.StaticMatches/5 AsIs: )/8 } (/13 )/14 Tile{ AsIs: e.SpecVars/2 } >/15 >/16 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_PrepareSignature_A2]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_PrepareSignaturem_SortVars_A1]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSignature_A1("PrepareSignature=1", COOKIE1_, COOKIE2_, func_gen_PrepareSignature_A1);


static refalrts::FnResult func_PrepareSignature(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & PrepareSignature/4 e.StaticMatches/2 (/7 e.SpecPattern/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.StaticMatches as range 2
  // closed e.SpecPattern as range 5
  //DEBUG: e.StaticMatches: 2
  //DEBUG: e.SpecPattern: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareSignature=1/4 } (/9 Tile{ AsIs: e.StaticMatches/2 } )/10 </11 Tile{ HalfReuse: & ExtractVariables-Expr/7 AsIs: e.SpecPattern/5 HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSignature_A1]);
  refalrts::reinit_name(context[7], functions[efunc_ExtractVariablesm_Expr]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrepareSignature("PrepareSignature", COOKIE1_, COOKIE2_, func_PrepareSignature);


static refalrts::FnResult func_gen_PrepareSignaturem_SortVars_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & PrepareSignature-SortVars=1/4 (/7 )/8 e.SigValues/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.SigValues as range 2
  //DEBUG: e.SigValues: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & PrepareSignature-SortVars=1/4 (/7 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.SigValues/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSignaturem_SortVars_A1("PrepareSignature-SortVars=1", COOKIE1_, COOKIE2_, func_gen_PrepareSignaturem_SortVars_A1);


static refalrts::FnResult func_gen_PrepareSignaturem_SortVars_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & PrepareSignature-SortVars=1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrepareSignature-SortVars=1\1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  do {
    // </0 & PrepareSignature-SortVars=1\1/4 (/7 e.Vars-B/17 (/23 e.Val/21 ':'/30 (/27 # Var/29 e.Index/31 )/28 )/24 e.Vars-E/19 )/8 (/11 e.Index/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    // closed e.Index as range 15
    context[17] = 0;
    context[18] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_right( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Var], context[25], context[26] );
      if( ! context[29] )
        continue;
      context[30] = refalrts::char_right( ':', context[21], context[22] );
      if( ! context[30] )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[31], context[32], context[15], context[16], context[25], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      // closed e.Val as range 21
      // closed e.Vars-E as range 19
      //DEBUG: e.Index: 15
      //DEBUG: e.Vars-B: 17
      //DEBUG: e.Val: 21
      //DEBUG: e.Vars-E: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & PrepareSignature-SortVars=1\1/4 (/7 {REMOVED TILE} {REMOVED TILE} (/27 # Var/29 e.Index/31 )/28 )/24 {REMOVED TILE} )/8 (/11 e.Index/15 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Vars-B/17 } Tile{ AsIs: e.Vars-E/19 } Tile{ AsIs: )/12 } Tile{ AsIs: (/23 AsIs: e.Val/21 HalfReuse: )/30 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[30]);
      refalrts::link_brackets( context[23], context[30] );
      refalrts::link_brackets( context[0], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[30] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[17], context[18], context[13], context[14] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrepareSignature-SortVars=1\1/4 (/7 e.Variables/5 )/8 (/11 e.Index/9 )/12 >/1
  // closed e.Variables as range 5
  // closed e.Index as range 9
  //DEBUG: e.Variables: 5
  //DEBUG: e.Index: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & PrepareSignature-SortVars=1\1/4 {REMOVED TILE} (/11 e.Index/9 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Variables/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSignaturem_SortVars_A1L1("PrepareSignature-SortVars=1\\1", COOKIE1_, COOKIE2_, func_gen_PrepareSignaturem_SortVars_A1L1);


static refalrts::FnResult func_PrepareSignaturem_SortVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & PrepareSignature-SortVars/4 e.StaticMatches/2 (/7 e.SpecPatternVars/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.StaticMatches as range 2
  // closed e.SpecPatternVars as range 5
  //DEBUG: e.StaticMatches: 2
  //DEBUG: e.SpecPatternVars: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareSignature-SortVars=1/4 } </9 & DoMapAccum@10/10 (/11 Tile{ AsIs: e.StaticMatches/2 } )/12 (/13 Tile{ HalfReuse: )/7 AsIs: e.SpecPatternVars/5 HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DoMapAccum_Z10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSignaturem_SortVars_A1]);
  refalrts::reinit_close_bracket(context[7]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[13], context[7] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrepareSignaturem_SortVars("PrepareSignature-SortVars", COOKIE1_, COOKIE2_, func_PrepareSignaturem_SortVars);


static refalrts::FnResult func_gen_RenameSignatureVars_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & RenameSignatureVars=3/4 (/7 e.KnownVars$a/5 s.NextId$a/9 )/8 e.Signature$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Signature$a as range 2
  if( ! refalrts::svar_right( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.KnownVars$a as range 5
  //DEBUG: e.Signature$a: 2
  //DEBUG: s.NextId$a: 9
  //DEBUG: e.KnownVars$a: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & RenameSignatureVars=3/4 (/7 e.KnownVars$a/5 s.NextId$a/9 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Signature$a/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameSignatureVars_A3("RenameSignatureVars=3", COOKIE1_, COOKIE2_, func_gen_RenameSignatureVars_A3);


static refalrts::FnResult func_gen_RenameSignatureVars_A3L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & RenameSignatureVars=3\1=1/4 (/7 e.KnownVars$b/5 s.NextId$b/9 )/8 e.SignaturePart$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.SignaturePart$a as range 2
  if( ! refalrts::svar_right( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.KnownVars$b as range 5
  //DEBUG: e.SignaturePart$a: 2
  //DEBUG: s.NextId$b: 9
  //DEBUG: e.KnownVars$b: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.KnownVars$b/5 AsIs: s.NextId$b/9 AsIs: )/8 } Tile{ HalfReuse: (/4 } Tile{ AsIs: e.SignaturePart$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameSignatureVars_A3L1A1("RenameSignatureVars=3\\1=1", COOKIE1_, COOKIE2_, func_gen_RenameSignatureVars_A3L1A1);


static refalrts::FnResult func_RenameSignatureVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & RenameSignatureVars/4 e.Signature/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Signature as range 2
  //DEBUG: e.Signature: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & RenameSignatureVars=3/4 } </5 & DoMapAccum@9/6 (/7 0/8 )/9 (/10 )/11 Tile{ AsIs: e.Signature/2 } >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z9]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_number(vm, context[8], 0UL);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameSignatureVars_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RenameSignatureVars("RenameSignatureVars", COOKIE1_, COOKIE2_, func_RenameSignatureVars);


static refalrts::FnResult func_RenameSignatureVarsm_Expr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & RenameSignatureVars-Expr/4 t.State/5 e.Expr/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 2
  //DEBUG: t.State: 5
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@11/4 AsIs: t.State/5 } (/7 )/8 Tile{ AsIs: e.Expr/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RenameSignatureVarsm_Expr("RenameSignatureVars-Expr", COOKIE1_, COOKIE2_, func_RenameSignatureVarsm_Expr);


static refalrts::FnResult func_gen_RenameSignatureVarsm_Term_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & RenameSignatureVars-Term$2=1/4 (/7 e.KnownVariables/5 )/8 s.Mode/9 (/12 e.OldIndex/10 )/13 s.NextId/14 e.NewIndex/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.KnownVariables as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.OldIndex as range 10
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NewIndex as range 2
  //DEBUG: e.KnownVariables: 5
  //DEBUG: s.Mode: 9
  //DEBUG: e.OldIndex: 10
  //DEBUG: s.NextId: 14
  //DEBUG: e.NewIndex: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.KnownVariables/5 HalfReuse: (/8 AsIs: s.Mode/9 } Tile{ AsIs: e.OldIndex/10 } Tile{ AsIs: (/12 } Tile{ AsIs: e.NewIndex/2 } )/15 )/16 Tile{ AsIs: </0 Reuse: & Add/4 } Tile{ HalfReuse: 1/13 AsIs: s.NextId/14 } >/17 )/18 (/19 # Var/20 s.Mode/9/21 e.NewIndex/2/22 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_ident(vm, context[20], identifiers[ident_Var]);
  refalrts::copy_stvar(vm, context[21], context[9]);
  refalrts::copy_evar(vm, context[22], context[23], context[2], context[3]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_number(context[13], 1UL);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[19], context[1] );
  refalrts::link_brackets( context[7], context[18] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[16] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[17], context[21] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[7], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameSignatureVarsm_Term_S2A1("RenameSignatureVars-Term$2=1", COOKIE1_, COOKIE2_, func_gen_RenameSignatureVarsm_Term_S2A1);


static refalrts::FnResult func_gen_RenameSignatureVarsm_Term_S3A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & RenameSignatureVars-Term$3=2/4 s.BracketsTag/5 t.State$a/6 e.Expr$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr$a as range 2
  //DEBUG: s.BracketsTag: 5
  //DEBUG: t.State$a: 6
  //DEBUG: e.Expr$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.State$a/6 } Tile{ HalfReuse: (/4 AsIs: s.BracketsTag/5 } Tile{ AsIs: e.Expr$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[4], context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameSignatureVarsm_Term_S3A2("RenameSignatureVars-Term$3=2", COOKIE1_, COOKIE2_, func_gen_RenameSignatureVarsm_Term_S3A2);


static refalrts::FnResult func_gen_RenameSignatureVarsm_Term_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & RenameSignatureVars-Term$4=1/4 (/7 e.Name/5 )/8 t.State$a/9 e.Expr$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Name as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr$a as range 2
  //DEBUG: e.Name: 5
  //DEBUG: t.State$a: 9
  //DEBUG: e.Expr$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.State$a/9 } Tile{ HalfReuse: (/0 HalfReuse: # ADT-Brackets/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 } Tile{ AsIs: e.Expr$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_ADTm_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameSignatureVarsm_Term_S4A1("RenameSignatureVars-Term$4=1", COOKIE1_, COOKIE2_, func_gen_RenameSignatureVarsm_Term_S4A1);


static refalrts::FnResult func_RenameSignatureVarsm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & RenameSignatureVars-Term/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & RenameSignatureVars-Term/4 t.new1/5 t.new2/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & RenameSignatureVars-Term/4 t.new3/5 (/7 s.new4/11 e.new5/9 )/8 >/1
    context[9] = 0;
    context[10] = 0;
    if( ! refalrts::brackets_term( context[9], context[10], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
      continue;
    // closed e.new5 as range 9
    do {
      // </0 & RenameSignatureVars-Term/4 (/5 e.new6/14 s.new7/17 )/6 (/7 # Var/11 s.new8/16 e.new9/12 )/8 >/1
      context[12] = context[9];
      context[13] = context[10];
      context[14] = 0;
      context[15] = 0;
      if( ! refalrts::brackets_term( context[14], context[15], context[5] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Var], context[11] ) )
        continue;
      if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
        continue;
      // closed e.new9 as range 12
      if( ! refalrts::svar_right( context[17], context[14], context[15] ) )
        continue;
      // closed e.new6 as range 14
      do {
        // </0 & RenameSignatureVars-Term/4 (/5 e.KnownVariables/18 s.NextId/17 )/6 (/7 # Var/11 s.Mode/16 e.OldIndex/20 )/8 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[12];
        context[21] = context[13];
        // closed e.KnownVariables as range 18
        // closed e.OldIndex as range 20
        //DEBUG: s.NextId: 17
        //DEBUG: s.Mode: 16
        //DEBUG: e.KnownVariables: 18
        //DEBUG: e.OldIndex: 20
        //16: s.Mode
        //17: s.NextId
        //18: e.KnownVariables
        //20: e.OldIndex
        //25: e.KnownVariables

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[24], functions[efunc_gen_RenameSignatureVarsm_Term_S1C1]);
        refalrts::copy_evar(vm, context[25], context[26], context[18], context[19]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[22] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </22 & RenameSignatureVars-Term$1?1/26 e._B/27 (/33 s.Mode/39 e.OldIndex/40 (/37 e.NewIndex/35 )/38 )/34 e._E/29 >/23
          context[24] = 0;
          context[25] = 0;
          context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
          context[27] = 0;
          context[28] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[29] = context[24];
            context[30] = context[25];
            context[31] = 0;
            context[32] = 0;
            context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
            if( ! context[33] )
              continue;
            refalrts::bracket_pointers(context[33], context[34]);
            context[35] = 0;
            context[36] = 0;
            context[37] = refalrts::brackets_right( context[35], context[36], context[31], context[32] );
            if( ! context[37] )
              continue;
            refalrts::bracket_pointers(context[37], context[38]);
            if( ! refalrts::repeated_stvar_left( vm, context[39], context[16], context[31], context[32] ) )
              continue;
            if( ! refalrts::repeated_evar_left( vm, context[40], context[41], context[20], context[21], context[31], context[32] ) )
              continue;
            if( ! refalrts::empty_seq( context[31], context[32] ) )
              continue;
            // closed e.NewIndex as range 35
            // closed e._E as range 29
            //DEBUG: s.NextId: 17
            //DEBUG: s.Mode: 16
            //DEBUG: e.KnownVariables: 18
            //DEBUG: e.OldIndex: 20
            //DEBUG: e._B: 27
            //DEBUG: e.NewIndex: 35
            //DEBUG: e._E: 29

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & RenameSignatureVars-Term/4 {REMOVED TILE} e.OldIndex/20 )/8 </22 & RenameSignatureVars-Term$1?1/26 e._B/27 (/33 s.Mode/39 e.OldIndex/40 (/37 {REMOVED TILE} )/38 )/34 e._E/29 >/23 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/5 AsIs: e.KnownVariables/18 AsIs: s.NextId/17 AsIs: )/6 AsIs: (/7 AsIs: # Var/11 AsIs: s.Mode/16 } Tile{ AsIs: e.NewIndex/35 } Tile{ HalfReuse: )/1 ]] }
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[7], context[1] );
            refalrts::link_brackets( context[5], context[6] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[35], context[36] );
            res = refalrts::splice_evar( res, context[5], context[16] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[27], context[28], context[24], context[25] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[22], context[23]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & RenameSignatureVars-Term/4 (/5 e.KnownVariables/18 s.NextId/17 )/6 (/7 # Var/11 s.Mode/16 e.OldIndex/20 )/8 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[12];
      context[21] = context[13];
      // closed e.KnownVariables as range 18
      // closed e.OldIndex as range 20
      //DEBUG: s.NextId: 17
      //DEBUG: s.Mode: 16
      //DEBUG: e.KnownVariables: 18
      //DEBUG: e.OldIndex: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & RenameSignatureVars-Term$2=1/4 AsIs: (/5 } Tile{ AsIs: e.KnownVariables/18 } )/22 Tile{ AsIs: s.Mode/16 } (/23 Tile{ AsIs: e.OldIndex/20 } )/24 Tile{ AsIs: s.NextId/17 HalfReuse: </6 HalfReuse: & Symb/7 HalfReuse: s.NextId17 /11 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_bracket(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_RenameSignatureVarsm_Term_S2A1]);
      refalrts::reinit_open_call(context[6]);
      refalrts::reinit_name(context[7], functions[efunc_Symb]);
      refalrts::reinit_svar( context[11], context[17] );
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[6] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[5], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[17], context[11] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & RenameSignatureVars-Term/4 t.State/5 (/7 s.BracketsTag/11 e.Expr/12 )/8 >/1
      context[12] = context[9];
      context[13] = context[10];
      // closed e.Expr as range 12
      //DEBUG: t.State: 5
      //DEBUG: s.BracketsTag: 11
      //DEBUG: e.Expr: 12
      //5: t.State
      //11: s.BracketsTag
      //12: e.Expr
      //19: s.BracketsTag

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[16], functions[efunc_gen_RenameSignatureVarsm_Term_S3C1]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_OneOf]);
      refalrts::copy_stvar(vm, context[19], context[11]);
      refalrts::alloc_ident(vm, context[20], identifiers[ident_CallBrackets]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_ClosureBrackets]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Brackets]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_stvar( res, context[19] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[14] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </14 & RenameSignatureVars-Term$3?1/18 # True/19 >/15
        context[16] = 0;
        context[17] = 0;
        context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
        context[19] = refalrts::ident_left( identifiers[ident_True], context[16], context[17] );
        if( ! context[19] )
          continue;
        if( ! refalrts::empty_seq( context[16], context[17] ) )
          continue;
        //DEBUG: t.State: 5
        //DEBUG: s.BracketsTag: 11
        //DEBUG: e.Expr: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 s.BracketsTag/11 {REMOVED TILE} {REMOVED TILE} # True/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & RenameSignatureVars-Term$3=2/4 } Tile{ HalfReuse: s.BracketsTag11 /8 AsIs: </14 Reuse: & RenameSignatureVars-Expr/18 } Tile{ AsIs: t.State/5 } Tile{ AsIs: e.Expr/12 } Tile{ AsIs: >/15 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_RenameSignatureVarsm_Term_S3A2]);
        refalrts::reinit_svar( context[8], context[11] );
        refalrts::update_name(context[18], functions[efunc_RenameSignatureVarsm_Expr]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[8], context[18] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[14], context[15]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & RenameSignatureVars-Term/4 t.State/5 (/7 # ADT-Brackets/11 (/16 e.Name/14 )/17 e.Expr/12 )/8 >/1
    context[12] = context[9];
    context[13] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[11] ) )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.Name as range 14
    // closed e.Expr as range 12
    //DEBUG: t.State: 5
    //DEBUG: e.Name: 14
    //DEBUG: e.Expr: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </18 Tile{ HalfReuse: & RenameSignatureVars-Term$4=1/11 AsIs: (/16 } Tile{ AsIs: e.Name/14 } )/19 Tile{ AsIs: </0 Reuse: & DoMapAccum@11/4 AsIs: t.State/5 AsIs: (/7 } Tile{ AsIs: )/17 AsIs: e.Expr/12 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::reinit_name(context[11], functions[efunc_gen_RenameSignatureVarsm_Term_S4A1]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[17] );
    refalrts::link_brackets( context[16], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[11], context[16] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & RenameSignatureVars-Term/4 t.State/5 t.OtherTerm/7 >/1
  //DEBUG: t.State: 5
  //DEBUG: t.OtherTerm: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & RenameSignatureVars-Term/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.State/5 AsIs: t.OtherTerm/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RenameSignatureVarsm_Term("RenameSignatureVars-Term", COOKIE1_, COOKIE2_, func_RenameSignatureVarsm_Term);


static refalrts::FnResult func_ApplySubstm_Subst(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ApplySubst-Subst/4 (/7 e.FromSubstitution/5 )/8 e.ToSubstitution/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.FromSubstitution as range 5
  // closed e.ToSubstitution as range 2
  //DEBUG: e.FromSubstitution: 5
  //DEBUG: e.ToSubstitution: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@15/4 AsIs: (/7 AsIs: e.FromSubstitution/5 AsIs: )/8 AsIs: e.ToSubstitution/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplySubstm_Subst("ApplySubst-Subst", COOKIE1_, COOKIE2_, func_ApplySubstm_Subst);


static refalrts::FnResult func_gen_ApplySubstm_Expr_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & ApplySubst-Expr\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ApplySubst-Expr\1/4 (/7 e.new1/5 )/8 t.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ApplySubst-Expr\1/4 (/7 e.new5/11 )/8 (/9 s.new3/15 e.new4/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new5 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new4 as range 13
    do {
      // </0 & ApplySubst-Expr\1/4 (/7 e.Substitution/16 )/8 (/9 # Var/15 e.ModeIndex/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Var], context[15] ) )
        continue;
      // closed e.Substitution as range 16
      // closed e.ModeIndex as range 18
      //DEBUG: e.Substitution: 16
      //DEBUG: e.ModeIndex: 18
      //16: e.Substitution
      //18: e.ModeIndex
      //23: e.Substitution

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_ApplySubstm_Expr_L1S1C1]);
      refalrts::copy_evar(vm, context[23], context[24], context[16], context[17]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[20] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </20 & ApplySubst-Expr\1$1?1/24 e.Subst-B/25 (/31 e.Value/29 ':'/37 (/35 e.ModeIndex/38 )/36 )/32 e.Subst-E/27 >/21
        context[22] = 0;
        context[23] = 0;
        context[24] = refalrts::call_left( context[22], context[23], context[20], context[21] );
        context[25] = 0;
        context[26] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[27] = context[22];
          context[28] = context[23];
          context[29] = 0;
          context[30] = 0;
          context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
          if( ! context[31] )
            continue;
          refalrts::bracket_pointers(context[31], context[32]);
          context[33] = 0;
          context[34] = 0;
          context[35] = refalrts::brackets_right( context[33], context[34], context[29], context[30] );
          if( ! context[35] )
            continue;
          refalrts::bracket_pointers(context[35], context[36]);
          context[37] = refalrts::char_right( ':', context[29], context[30] );
          if( ! context[37] )
            continue;
          if( ! refalrts::repeated_evar_left( vm, context[38], context[39], context[18], context[19], context[33], context[34] ) )
            continue;
          if( ! refalrts::empty_seq( context[33], context[34] ) )
            continue;
          // closed e.Value as range 29
          // closed e.Subst-E as range 27
          //DEBUG: e.Substitution: 16
          //DEBUG: e.ModeIndex: 18
          //DEBUG: e.Subst-B: 25
          //DEBUG: e.Value: 29
          //DEBUG: e.Subst-E: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & ApplySubst-Expr\1/4 (/7 e.Substitution/16 )/8 (/9 # Var/15 e.ModeIndex/18 )/10 </20 & ApplySubst-Expr\1$1?1/24 e.Subst-B/25 (/31 {REMOVED TILE} ':'/37 (/35 e.ModeIndex/38 )/36 )/32 e.Subst-E/27 >/21 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: e.Value/29 } Tile{ ]] }
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[29], context[30] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[25], context[26], context[22], context[23] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[20], context[21]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplySubst-Expr\1/4 (/7 e.Substitution/16 )/8 (/9 # Brackets/15 e.Nested/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[15] ) )
        continue;
      // closed e.Substitution as range 16
      // closed e.Nested as range 18
      //DEBUG: e.Substitution: 16
      //DEBUG: e.Nested: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Brackets/15 } Tile{ AsIs: </0 Reuse: & Map@11/4 AsIs: (/7 AsIs: e.Substitution/16 AsIs: )/8 } Tile{ AsIs: e.Nested/18 } Tile{ HalfReuse: >/10 HalfReuse: )/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplySubst-Expr\1/4 (/7 e.Substitution/16 )/8 (/9 # ADT-Brackets/15 (/22 e.Name/20 )/23 e.Nested/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[15] ) )
        continue;
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
      if( ! context[22] )
        continue;
      refalrts::bracket_pointers(context[22], context[23]);
      // closed e.Substitution as range 16
      // closed e.Name as range 20
      // closed e.Nested as range 18
      //DEBUG: e.Substitution: 16
      //DEBUG: e.Name: 20
      //DEBUG: e.Nested: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ADT-Brackets/15 AsIs: (/22 AsIs: e.Name/20 AsIs: )/23 } Tile{ AsIs: </0 Reuse: & Map@11/4 AsIs: (/7 AsIs: e.Substitution/16 AsIs: )/8 } Tile{ AsIs: e.Nested/18 } Tile{ HalfReuse: >/10 HalfReuse: )/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[9], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplySubst-Expr\1/4 (/7 e.Substitution/16 )/8 (/9 # CallBrackets/15 e.Nested/18 )/10 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[15] ) )
        continue;
      // closed e.Substitution as range 16
      // closed e.Nested as range 18
      //DEBUG: e.Substitution: 16
      //DEBUG: e.Nested: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # CallBrackets/15 } Tile{ AsIs: </0 Reuse: & Map@11/4 AsIs: (/7 AsIs: e.Substitution/16 AsIs: )/8 } Tile{ AsIs: e.Nested/18 } Tile{ HalfReuse: >/10 HalfReuse: )/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ApplySubst-Expr\1/4 (/7 e.Substitution/16 )/8 (/9 # ClosureBrackets/15 e.ClosureContent/18 )/10 >/1
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    context[19] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[15] ) )
      continue;
    // closed e.Substitution as range 16
    // closed e.ClosureContent as range 18
    //DEBUG: e.Substitution: 16
    //DEBUG: e.ClosureContent: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ClosureBrackets/15 } Tile{ AsIs: </0 Reuse: & Map@11/4 AsIs: (/7 AsIs: e.Substitution/16 AsIs: )/8 } Tile{ AsIs: e.ClosureContent/18 } Tile{ HalfReuse: >/10 HalfReuse: )/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplySubst-Expr\1/4 (/7 e.Substitution/5 )/8 t.OtherTerm/9 >/1
  // closed e.Substitution as range 5
  //DEBUG: t.OtherTerm: 9
  //DEBUG: e.Substitution: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ApplySubst-Expr\1/4 (/7 e.Substitution/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.OtherTerm/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ApplySubstm_Expr_L1("ApplySubst-Expr\\1", COOKIE1_, COOKIE2_, func_gen_ApplySubstm_Expr_L1);


static refalrts::FnResult func_ApplySubstm_Expr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ApplySubst-Expr/4 (/7 e.Substitution/5 )/8 e.Expression/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Substitution as range 5
  // closed e.Expression as range 2
  //DEBUG: e.Substitution: 5
  //DEBUG: e.Expression: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@11/4 AsIs: (/7 AsIs: e.Substitution/5 AsIs: )/8 AsIs: e.Expression/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplySubstm_Expr("ApplySubst-Expr", COOKIE1_, COOKIE2_, func_ApplySubstm_Expr);


static refalrts::FnResult func_Specm_FindInSignatures(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Spec-FindInSignatures/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Spec-FindInSignatures/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Spec-FindInSignatures/4 (/7 e.Signature/9 )/8 e.Signatures-B/13 (/19 (/23 e.InstanceName/21 )/24 e.Signature/25 )/20 e.Signatures-E/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Signature as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[17], context[18] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      if( ! refalrts::repeated_evar_left( vm, context[25], context[26], context[9], context[10], context[17], context[18] ) )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.InstanceName as range 21
      // closed e.Signatures-E as range 15
      //DEBUG: e.Signature: 9
      //DEBUG: e.Signatures-B: 13
      //DEBUG: e.InstanceName: 21
      //DEBUG: e.Signatures-E: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & Spec-FindInSignatures/4 {REMOVED TILE} e.Signature/9 )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Found/0 } e.InstanceName/21/27 Tile{ AsIs: (/7 } Tile{ AsIs: (/19 AsIs: (/23 AsIs: e.InstanceName/21 AsIs: )/24 AsIs: e.Signature/25 AsIs: )/20 } Tile{ AsIs: e.Signatures-B/13 } Tile{ AsIs: e.Signatures-E/15 } Tile{ HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[21], context[22]);
      refalrts::reinit_ident(context[0], identifiers[ident_Found]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Spec-FindInSignatures/4 (/7 e.Signature/5 )/8 e.Signatures/2 >/1
  // closed e.Signature as range 5
  // closed e.Signatures as range 2
  //DEBUG: e.Signature: 5
  //DEBUG: e.Signatures: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Spec-FindInSignatures/4 (/7 e.Signature/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # NotFound/0 } Tile{ AsIs: e.Signatures/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_NotFound]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Specm_FindInSignatures("Spec-FindInSignatures", COOKIE1_, COOKIE2_, func_Specm_FindInSignatures);


static refalrts::FnResult func_IsTrivialSubstitutions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & IsTrivialSubstitutions/4 e.StaticMatches/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.StaticMatches as range 2
  //DEBUG: e.StaticMatches: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Reduce@1/0 HalfReuse: # True/4 AsIs: e.StaticMatches/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z1]);
  refalrts::reinit_ident(context[4], identifiers[ident_True]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsTrivialSubstitutions("IsTrivialSubstitutions", COOKIE1_, COOKIE2_, func_IsTrivialSubstitutions);


static refalrts::FnResult func_gen_PrepareArgOrPattern_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & PrepareArgOrPattern=2/4 (/7 e.KnownVarsFromStatic/5 )/8 e.NewArgOrPattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.KnownVarsFromStatic as range 5
  // closed e.NewArgOrPattern as range 2
  //DEBUG: e.KnownVarsFromStatic: 5
  //DEBUG: e.NewArgOrPattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & PrepareArgOrPattern=2/4 (/7 e.KnownVarsFromStatic/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & RemoveLastGhostBracket/8 AsIs: e.NewArgOrPattern/2 AsIs: >/1 ]] }
  refalrts::reinit_name(context[8], functions[efunc_RemoveLastGhostBracket]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareArgOrPattern_A2("PrepareArgOrPattern=2", COOKIE1_, COOKIE2_, func_gen_PrepareArgOrPattern_A2);


static refalrts::FnResult func_gen_PrepareArgOrPattern_A2L1S1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & PrepareArgOrPattern=2\1$1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrepareArgOrPattern=2\1$1\1/4 (/7 e.new1/5 )/8 (/11 s.new2/13 e.new3/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 9
  do {
    // </0 & PrepareArgOrPattern=2\1$1\1/4 (/7 e.KnownVarsFromStatic$a/14 )/8 (/11 s.Mode$a/13 e.Index$a/16 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    // closed e.KnownVarsFromStatic$a as range 14
    // closed e.Index$a as range 16
    //DEBUG: s.Mode$a: 13
    //DEBUG: e.KnownVarsFromStatic$a: 14
    //DEBUG: e.Index$a: 16
    //13: s.Mode$a
    //14: e.KnownVarsFromStatic$a
    //16: e.Index$a
    //21: e.KnownVarsFromStatic$a

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_PrepareArgOrPattern_A2L1S1L1S1C1]);
    refalrts::copy_evar(vm, context[21], context[22], context[14], context[15]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </18 & PrepareArgOrPattern=2\1$1\1$1?1/22 e._B1/23 (/29 s.Mode$a/31 e.Index$a/32 )/30 e._E1/25 >/19
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::call_left( context[20], context[21], context[18], context[19] );
      context[23] = 0;
      context[24] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[25] = context[20];
        context[26] = context[21];
        context[27] = 0;
        context[28] = 0;
        context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
        if( ! context[29] )
          continue;
        refalrts::bracket_pointers(context[29], context[30]);
        if( ! refalrts::repeated_stvar_left( vm, context[31], context[13], context[27], context[28] ) )
          continue;
        if( ! refalrts::repeated_evar_left( vm, context[32], context[33], context[16], context[17], context[27], context[28] ) )
          continue;
        if( ! refalrts::empty_seq( context[27], context[28] ) )
          continue;
        // closed e._E1 as range 25
        //DEBUG: s.Mode$a: 13
        //DEBUG: e.KnownVarsFromStatic$a: 14
        //DEBUG: e.Index$a: 16
        //DEBUG: e._B1: 23
        //DEBUG: e._E1: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & PrepareArgOrPattern=2\1$1\1/4 {REMOVED TILE} (/11 s.Mode$a/13 e.Index$a/16 )/12 </18 & PrepareArgOrPattern=2\1$1\1$1?1/22 e._B1/23 (/29 s.Mode$a/31 e.Index$a/32 )/30 e._E1/25 >/19 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.KnownVarsFromStatic$a/14 AsIs: )/8 } Tile{ ]] }
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[23], context[24], context[20], context[21] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[18], context[19]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrepareArgOrPattern=2\1$1\1/4 (/7 e.KnownVarsFromStatic$a/14 )/8 (/11 'e'/13 e.Index$a/16 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::char_term( 'e', context[13] ) )
      continue;
    // closed e.KnownVarsFromStatic$a as range 14
    // closed e.Index$a as range 16
    //DEBUG: e.KnownVarsFromStatic$a: 14
    //DEBUG: e.Index$a: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/18 Tile{ AsIs: e.KnownVarsFromStatic$a/14 } (/19 'e'/20 e.Index$a/16/21 Tile{ HalfReuse: )/0 HalfReuse: )/4 AsIs: (/7 } # GhostBrackets/23 Tile{ HalfReuse: (/8 HalfReuse: # Var/11 AsIs: 'e'/13 AsIs: e.Index$a/16 AsIs: )/12 HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_char(vm, context[20], 'e');
    refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
    refalrts::alloc_ident(vm, context[23], identifiers[ident_GhostBrackets]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_ident(context[11], identifiers[ident_Var]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[8], context[12] );
    refalrts::link_brackets( context[18], context[4] );
    refalrts::link_brackets( context[19], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrepareArgOrPattern=2\1$1\1/4 (/7 e.KnownVarsFromStatic$a/5 )/8 (/11 s.Mode$a/13 e.Index$a/9 )/12 >/1
  // closed e.KnownVarsFromStatic$a as range 5
  // closed e.Index$a as range 9
  //DEBUG: s.Mode$a: 13
  //DEBUG: e.KnownVarsFromStatic$a: 5
  //DEBUG: e.Index$a: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.KnownVarsFromStatic$a/5 } Tile{ AsIs: (/11 AsIs: s.Mode$a/13 AsIs: e.Index$a/9 AsIs: )/12 HalfReuse: )/1 } Tile{ AsIs: (/7 } Tile{ HalfReuse: # Var/4 } s.Mode$a/13/14 e.Index$a/9/15 Tile{ AsIs: )/8 } Tile{ ]] }
  refalrts::copy_stvar(vm, context[14], context[13]);
  refalrts::copy_evar(vm, context[15], context[16], context[9], context[10]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::reinit_ident(context[4], identifiers[ident_Var]);
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[4] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareArgOrPattern_A2L1S1L1("PrepareArgOrPattern=2\\1$1\\1", COOKIE1_, COOKIE2_, func_gen_PrepareArgOrPattern_A2L1S1L1);


static refalrts::FnResult func_gen_PrepareArgOrPattern_A2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & PrepareArgOrPattern=2\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrepareArgOrPattern=2\1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 s.new4/21 e.new5/17 )/20 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 17
  do {
    // </0 & PrepareArgOrPattern=2\1/4 (/7 e.StaticMatches/22 )/8 (/11 e.DynamicMatches/24 )/12 (/15 e.KnownVarsFromStatic/26 )/16 (/19 s.Mode/21 e.Index/28 )/20 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[13];
    context[27] = context[14];
    context[28] = context[17];
    context[29] = context[18];
    // closed e.StaticMatches as range 22
    // closed e.DynamicMatches as range 24
    // closed e.KnownVarsFromStatic as range 26
    // closed e.Index as range 28
    //DEBUG: s.Mode: 21
    //DEBUG: e.StaticMatches: 22
    //DEBUG: e.DynamicMatches: 24
    //DEBUG: e.KnownVarsFromStatic: 26
    //DEBUG: e.Index: 28
    //21: s.Mode
    //22: e.StaticMatches
    //24: e.DynamicMatches
    //26: e.KnownVarsFromStatic
    //28: e.Index
    //33: e.StaticMatches

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_PrepareArgOrPattern_A2L1S1C1]);
    refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[30] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_elem( res, context[30] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </30 & PrepareArgOrPattern=2\1$1?1/34 e._B/35 (/41 e.Expr/39 ':'/48 (/45 # Var/47 s.Mode/49 e.Index/50 )/46 )/42 e._E/37 >/31
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::call_left( context[32], context[33], context[30], context[31] );
      context[35] = 0;
      context[36] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[37] = context[32];
        context[38] = context[33];
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[37], context[38] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = 0;
        context[44] = 0;
        context[45] = refalrts::brackets_right( context[43], context[44], context[39], context[40] );
        if( ! context[45] )
          continue;
        refalrts::bracket_pointers(context[45], context[46]);
        context[47] = refalrts::ident_left( identifiers[ident_Var], context[43], context[44] );
        if( ! context[47] )
          continue;
        context[48] = refalrts::char_right( ':', context[39], context[40] );
        if( ! context[48] )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[49], context[21], context[43], context[44] ) )
          continue;
        if( ! refalrts::repeated_evar_left( vm, context[50], context[51], context[28], context[29], context[43], context[44] ) )
          continue;
        if( ! refalrts::empty_seq( context[43], context[44] ) )
          continue;
        // closed e.Expr as range 39
        // closed e._E as range 37
        //DEBUG: s.Mode: 21
        //DEBUG: e.StaticMatches: 22
        //DEBUG: e.DynamicMatches: 24
        //DEBUG: e.KnownVarsFromStatic: 26
        //DEBUG: e.Index: 28
        //DEBUG: e._B: 35
        //DEBUG: e.Expr: 39
        //DEBUG: e._E: 37

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & PrepareArgOrPattern=2\1/4 (/7 e.StaticMatches/22 )/8 (/11 e.DynamicMatches/24 {REMOVED TILE} s.Mode/21 e.Index/28 )/20 </30 {REMOVED TILE} e._B/35 (/41 {REMOVED TILE} ':'/48 (/45 # Var/47 s.Mode/49 e.Index/50 )/46 )/42 e._E/37 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & MapAccum@1/12 AsIs: (/15 AsIs: e.KnownVarsFromStatic/26 AsIs: )/16 HalfReuse: </19 } Tile{ Reuse: & ExtractVariables-Expr/34 } Tile{ AsIs: e.Expr/39 } Tile{ AsIs: >/31 AsIs: >/1 ]] }
        refalrts::reinit_name(context[12], functions[efunc_gen_MapAccum_Z1]);
        refalrts::reinit_open_call(context[19]);
        refalrts::update_name(context[34], functions[efunc_ExtractVariablesm_Expr]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_evar( res, context[12], context[19] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[35], context[36], context[32], context[33] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[30], context[31]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrepareArgOrPattern=2\1/4 (/7 e.StaticMatches/5 )/8 (/11 e.DynamicMatches/9 )/12 (/15 e.KnownVarsFromStatic/13 )/16 (/19 s.Mode/21 e.Index/17 )/20 >/1
  // closed e.StaticMatches as range 5
  // closed e.DynamicMatches as range 9
  // closed e.KnownVarsFromStatic as range 13
  // closed e.Index as range 17
  //DEBUG: s.Mode: 21
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.DynamicMatches: 9
  //DEBUG: e.KnownVarsFromStatic: 13
  //DEBUG: e.Index: 17
  //5: e.StaticMatches
  //9: e.DynamicMatches
  //13: e.KnownVarsFromStatic
  //17: e.Index
  //21: s.Mode
  //25: e.DynamicMatches

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_PrepareArgOrPattern_A2L1S2C1]);
  refalrts::copy_evar(vm, context[25], context[26], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[22] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </22 & PrepareArgOrPattern=2\1$2?1/26 e._B/27 (/33 e.Expr/31 ':'/40 (/37 # Var/39 s.Mode/41 e.Index/42 )/38 )/34 e._E/29 >/23
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
    context[27] = 0;
    context[28] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[29] = context[24];
      context[30] = context[25];
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_right( context[35], context[36], context[31], context[32] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_Var], context[35], context[36] );
      if( ! context[39] )
        continue;
      context[40] = refalrts::char_right( ':', context[31], context[32] );
      if( ! context[40] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[41], context[21], context[35], context[36] ) )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[42], context[43], context[17], context[18], context[35], context[36] ) )
        continue;
      if( ! refalrts::empty_seq( context[35], context[36] ) )
        continue;
      // closed e.Expr as range 31
      // closed e._E as range 29
      //DEBUG: s.Mode: 21
      //DEBUG: e.StaticMatches: 5
      //DEBUG: e.DynamicMatches: 9
      //DEBUG: e.KnownVarsFromStatic: 13
      //DEBUG: e.Index: 17
      //DEBUG: e._B: 27
      //DEBUG: e.Expr: 31
      //DEBUG: e._E: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & PrepareArgOrPattern=2\1/4 (/7 e.StaticMatches/5 )/8 (/11 e.DynamicMatches/9 )/12 {REMOVED TILE} s.Mode/21 e.Index/17 )/20 </22 & PrepareArgOrPattern=2\1$2?1/26 e._B/27 (/33 {REMOVED TILE} ':'/40 (/37 {REMOVED TILE} e.Index/42 )/38 )/34 e._E/29 >/23 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/15 AsIs: e.KnownVarsFromStatic/13 AsIs: )/16 HalfReuse: </19 } Tile{ HalfReuse: & WrapVar/39 AsIs: s.Mode/41 } Tile{ AsIs: e.Expr/31 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[39], functions[efunc_WrapVar]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[39], context[41] );
      res = refalrts::splice_evar( res, context[15], context[19] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[27], context[28], context[24], context[25] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[22], context[23]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_PrepareArgOrPattern_A2L1("PrepareArgOrPattern=2\\1", COOKIE1_, COOKIE2_, func_gen_PrepareArgOrPattern_A2L1);


static refalrts::FnResult func_gen_PrepareArgOrPattern_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & PrepareArgOrPattern=1/4 (/7 e.StaticMatches/5 )/8 (/11 e.DynamicMatches/9 )/12 e.SpecVars/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.StaticMatches as range 5
  // closed e.DynamicMatches as range 9
  // closed e.SpecVars as range 2
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.DynamicMatches: 9
  //DEBUG: e.SpecVars: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & PrepareArgOrPattern=2/14 Tile{ AsIs: </0 Reuse: & DoMapAccum@12/4 AsIs: (/7 AsIs: e.StaticMatches/5 AsIs: )/8 AsIs: (/11 AsIs: e.DynamicMatches/9 AsIs: )/12 } (/15 )/16 (/17 )/18 Tile{ AsIs: e.SpecVars/2 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_PrepareArgOrPattern_A2]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  res = refalrts::splice_evar( res, context[0], context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareArgOrPattern_A1("PrepareArgOrPattern=1", COOKIE1_, COOKIE2_, func_gen_PrepareArgOrPattern_A1);


static refalrts::FnResult func_PrepareArgOrPattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & PrepareArgOrPattern/4 (/7 e.StaticMatches/5 )/8 (/11 e.DynamicMatches/9 )/12 e.SpecPattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.StaticMatches as range 5
  // closed e.DynamicMatches as range 9
  // closed e.SpecPattern as range 2
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.DynamicMatches: 9
  //DEBUG: e.SpecPattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareArgOrPattern=1/4 AsIs: (/7 AsIs: e.StaticMatches/5 AsIs: )/8 AsIs: (/11 AsIs: e.DynamicMatches/9 AsIs: )/12 } </13 & ExtractVariables-Expr/14 Tile{ AsIs: e.SpecPattern/2 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_ExtractVariablesm_Expr]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareArgOrPattern_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrepareArgOrPattern("PrepareArgOrPattern", COOKIE1_, COOKIE2_, func_PrepareArgOrPattern);


static refalrts::FnResult func_WrapVar(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & WrapVar/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & WrapVar/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & WrapVar/4 'e'/5 e.Expr/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::char_term( 'e', context[5] ) )
      continue;
    // closed e.Expr as range 6
    //DEBUG: e.Expr: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # GhostBrackets/5 AsIs: e.Expr/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[5], identifiers[ident_GhostBrackets]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[4], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & WrapVar/4 s.Mode/5 e.Expr/2 >/1
  // closed e.Expr as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & WrapVar/4 s.Mode/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_WrapVar("WrapVar", COOKIE1_, COOKIE2_, func_WrapVar);


static refalrts::FnResult func_RemoveLastGhostBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & RemoveLastGhostBracket/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & RemoveLastGhostBracket/4 e.new1/5 t.new2/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_right( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new1 as range 5
    do {
      // </0 & RemoveLastGhostBracket/4 e.NewArgOrPattern/9 (/7 # GhostBrackets/13 e.LastEValue/11 )/8 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_GhostBrackets], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.NewArgOrPattern as range 9
      // closed e.LastEValue as range 11
      //DEBUG: e.NewArgOrPattern: 9
      //DEBUG: e.LastEValue: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} # GhostBrackets/13 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@16/4 AsIs: e.NewArgOrPattern/9 HalfReuse: >/7 } Tile{ AsIs: e.LastEValue/11 } Tile{ ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & RemoveLastGhostBracket/4 e.NewArgOrPattern/9 t.STValue/7 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.NewArgOrPattern as range 9
    //DEBUG: t.STValue: 7
    //DEBUG: e.NewArgOrPattern: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & RemoveLastGhostBracket/4 } Tile{ AsIs: e.NewArgOrPattern/9 } Tile{ AsIs: >/1 } Tile{ AsIs: t.STValue/7 } Tile{ ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & RemoveLastGhostBracket/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & RemoveLastGhostBracket/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemoveLastGhostBracket("RemoveLastGhostBracket", COOKIE1_, COOKIE2_, func_RemoveLastGhostBracket);


static refalrts::FnResult func_gen_RenameGenericMatch_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & RenameGenericMatch=3/4 (/7 e.StaticMatches/5 )/8 (/11 e.VarsFromBody$a/9 )/12 e.Renames/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.StaticMatches as range 5
  // closed e.VarsFromBody$a as range 9
  // closed e.Renames as range 2
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.VarsFromBody$a: 9
  //DEBUG: e.Renames: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 e.VarsFromBody$a/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@15/4 AsIs: (/7 } Tile{ AsIs: e.Renames/2 } Tile{ AsIs: )/12 } Tile{ AsIs: e.StaticMatches/5 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameGenericMatch_A3("RenameGenericMatch=3", COOKIE1_, COOKIE2_, func_gen_RenameGenericMatch_A3);


static refalrts::FnResult func_gen_RenameGenericMatch_A3L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & RenameGenericMatch=3\1=1/4 (/7 e.CurrentVarName/5 )/8 (/11 e.VarsFromBody$b/9 )/12 e.NewVarName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.CurrentVarName as range 5
  // closed e.VarsFromBody$b as range 9
  // closed e.NewVarName as range 2
  //DEBUG: e.CurrentVarName: 5
  //DEBUG: e.VarsFromBody$b: 9
  //DEBUG: e.NewVarName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/13 Tile{ AsIs: e.VarsFromBody$b/9 } Tile{ AsIs: )/12 } (/14 (/15 Tile{ HalfReuse: # Var/1 } Tile{ AsIs: e.NewVarName/2 } Tile{ HalfReuse: )/0 HalfReuse: ':'/4 AsIs: (/7 AsIs: e.CurrentVarName/5 AsIs: )/8 HalfReuse: )/11 } Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::reinit_ident(context[1], identifiers[ident_Var]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_char(context[4], ':');
  refalrts::reinit_close_bracket(context[11]);
  refalrts::link_brackets( context[14], context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::link_brackets( context[13], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameGenericMatch_A3L1A1("RenameGenericMatch=3\\1=1", COOKIE1_, COOKIE2_, func_gen_RenameGenericMatch_A3L1A1);


static refalrts::FnResult func_gen_RenameGenericMatch_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & RenameGenericMatch=2/4 (/7 e.StaticMatches/5 )/8 (/11 e.VarsFromBody/9 )/12 e.VarsFromMatch$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.StaticMatches as range 5
  // closed e.VarsFromBody as range 9
  // closed e.VarsFromMatch$a as range 2
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.VarsFromBody: 9
  //DEBUG: e.VarsFromMatch$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & RenameGenericMatch=3/4 AsIs: (/7 AsIs: e.StaticMatches/5 AsIs: )/8 HalfReuse: </11 } & DoMapAccum@13/13 (/14 Tile{ AsIs: e.VarsFromBody/9 } )/15 (/16 Tile{ AsIs: )/12 AsIs: e.VarsFromMatch$a/2 AsIs: >/1 } >/17 Tile{ ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_DoMapAccum_Z13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameGenericMatch_A3]);
  refalrts::reinit_open_call(context[11]);
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[16], context[12] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameGenericMatch_A2("RenameGenericMatch=2", COOKIE1_, COOKIE2_, func_gen_RenameGenericMatch_A2);


static refalrts::FnResult func_gen_RenameGenericMatch_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & RenameGenericMatch=1/4 (/7 e.StaticMatches/5 )/8 (/11 e.VarsFromBody/9 )/12 e.VarsFromMatch/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.StaticMatches as range 5
  // closed e.VarsFromBody as range 9
  // closed e.VarsFromMatch as range 2
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.VarsFromBody: 9
  //DEBUG: e.VarsFromMatch: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & RenameGenericMatch=2/4 AsIs: (/7 AsIs: e.StaticMatches/5 AsIs: )/8 AsIs: (/11 AsIs: e.VarsFromBody/9 AsIs: )/12 } </13 & Unique/14 Tile{ AsIs: e.VarsFromMatch/2 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Unique]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameGenericMatch_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameGenericMatch_A1("RenameGenericMatch=1", COOKIE1_, COOKIE2_, func_gen_RenameGenericMatch_A1);


static refalrts::FnResult func_RenameGenericMatch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & RenameGenericMatch/4 (/7 e.SpecPattern/5 )/8 (/11 e.StaticMatches/9 )/12 e.VarsFromBody/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.SpecPattern as range 5
  // closed e.StaticMatches as range 9
  // closed e.VarsFromBody as range 2
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.StaticMatches: 9
  //DEBUG: e.VarsFromBody: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} e.SpecPattern/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & RenameGenericMatch=1/4 AsIs: (/7 } Tile{ AsIs: e.StaticMatches/9 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.VarsFromBody/2 } Tile{ AsIs: )/12 } </13 & Map@17/14 e.StaticMatches/9/15 >/17 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Map_Z17]);
  refalrts::copy_evar(vm, context[15], context[16], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameGenericMatch_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[17] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RenameGenericMatch("RenameGenericMatch", COOKIE1_, COOKIE2_, func_RenameGenericMatch);


static refalrts::FnResult func_gen_PrepareSpecializedFuncBody_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & PrepareSpecializedFuncBody=2/4 (/7 e.SpecPattern/5 )/8 (/11 e.Body/9 )/12 e.StaticMatches$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.SpecPattern as range 5
  // closed e.Body as range 9
  // closed e.StaticMatches$a as range 2
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.Body: 9
  //DEBUG: e.StaticMatches$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@18/4 AsIs: (/7 AsIs: e.SpecPattern/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.StaticMatches$a/2 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Body/9 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z18]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSpecializedFuncBody_A2("PrepareSpecializedFuncBody=2", COOKIE1_, COOKIE2_, func_gen_PrepareSpecializedFuncBody_A2);


static refalrts::FnResult func_gen_PrepareSpecializedFuncBody_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & PrepareSpecializedFuncBody=1/4 (/7 e.SpecPattern/5 )/8 (/11 e.Body/9 )/12 (/15 e.StaticMatches/13 )/16 e.BodyVariables/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.SpecPattern as range 5
  // closed e.Body as range 9
  // closed e.StaticMatches as range 13
  // closed e.BodyVariables as range 2
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.Body: 9
  //DEBUG: e.StaticMatches: 13
  //DEBUG: e.BodyVariables: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareSpecializedFuncBody=2/4 AsIs: (/7 AsIs: e.SpecPattern/5 AsIs: )/8 AsIs: (/11 AsIs: e.Body/9 AsIs: )/12 HalfReuse: </15 } & RenameGenericMatch=1/17 (/18 Tile{ AsIs: e.StaticMatches/13 } Tile{ AsIs: )/16 } (/19 Tile{ AsIs: e.BodyVariables/2 } )/20 </21 & Map@17/22 e.StaticMatches/13/23 >/25 >/26 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_RenameGenericMatch_A1]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z17]);
  refalrts::copy_evar(vm, context[23], context[24], context[13], context[14]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSpecializedFuncBody_A2]);
  refalrts::reinit_open_call(context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[18], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSpecializedFuncBody_A1("PrepareSpecializedFuncBody=1", COOKIE1_, COOKIE2_, func_gen_PrepareSpecializedFuncBody_A1);


static refalrts::FnResult func_PrepareSpecializedFuncBody(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & PrepareSpecializedFuncBody/4 (/7 e.SpecPattern/5 )/8 (/11 e.StaticMatches/9 )/12 e.Body/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.SpecPattern as range 5
  // closed e.StaticMatches as range 9
  // closed e.Body as range 2
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.StaticMatches: 9
  //DEBUG: e.Body: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareSpecializedFuncBody=1/4 AsIs: (/7 AsIs: e.SpecPattern/5 AsIs: )/8 AsIs: (/11 } e.Body/2/13 )/15 (/16 Tile{ AsIs: e.StaticMatches/9 } )/17 </18 Tile{ HalfReuse: & ExtractVariables/12 AsIs: e.Body/2 AsIs: >/1 } >/19 Tile{ ]] }
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSpecializedFuncBody_A1]);
  refalrts::reinit_name(context[12], functions[efunc_ExtractVariables]);
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrepareSpecializedFuncBody("PrepareSpecializedFuncBody", COOKIE1_, COOKIE2_, func_PrepareSpecializedFuncBody);


static refalrts::FnResult func_gen_PrepareSpecSentence_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & PrepareSpecSentence=6/4 (/7 e.Pattern$a/5 )/8 (/11 e.Conditions$a/9 )/12 e.Result$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Pattern$a as range 5
  // closed e.Conditions$a as range 9
  // closed e.Result$a as range 2
  //DEBUG: e.Pattern$a: 5
  //DEBUG: e.Conditions$a: 9
  //DEBUG: e.Result$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Pattern$a/5 AsIs: )/8 } Tile{ AsIs: e.Conditions$a/9 } Tile{ HalfReuse: (/12 AsIs: e.Result$a/2 HalfReuse: )/1 } Tile{ HalfReuse: )/11 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_open_bracket(context[12]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::link_brackets( context[4], context[11] );
  refalrts::link_brackets( context[12], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSpecSentence_A6("PrepareSpecSentence=6", COOKIE1_, COOKIE2_, func_gen_PrepareSpecSentence_A6);


static refalrts::FnResult func_gen_PrepareSpecSentence_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & PrepareSpecSentence=5/4 (/7 e.Pattern$a/5 )/8 (/11 e.StaticSubstitutions/9 )/12 (/15 e.Result/13 )/16 e.Conditions$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Pattern$a as range 5
  // closed e.StaticSubstitutions as range 9
  // closed e.Result as range 13
  // closed e.Conditions$a as range 2
  //DEBUG: e.Pattern$a: 5
  //DEBUG: e.StaticSubstitutions: 9
  //DEBUG: e.Result: 13
  //DEBUG: e.Conditions$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareSpecSentence=6/4 AsIs: (/7 AsIs: e.Pattern$a/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Conditions$a/2 } Tile{ AsIs: )/12 } </17 & Map@11/18 (/19 Tile{ AsIs: e.StaticSubstitutions/9 } Tile{ HalfReuse: )/15 AsIs: e.Result/13 HalfReuse: >/16 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Map_Z11]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSpecSentence_A6]);
  refalrts::reinit_close_bracket(context[15]);
  refalrts::reinit_close_call(context[16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[19], context[15] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSpecSentence_A5("PrepareSpecSentence=5", COOKIE1_, COOKIE2_, func_gen_PrepareSpecSentence_A5);


static refalrts::FnResult func_gen_PrepareSpecSentence_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & PrepareSpecSentence=4/4 (/7 e.StaticSubstitutions/5 )/8 (/11 e.Result/9 )/12 (/15 e.Conditions/13 )/16 e.Pattern$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.StaticSubstitutions as range 5
  // closed e.Result as range 9
  // closed e.Conditions as range 13
  // closed e.Pattern$a as range 2
  //DEBUG: e.StaticSubstitutions: 5
  //DEBUG: e.Result: 9
  //DEBUG: e.Conditions: 13
  //DEBUG: e.Pattern$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } & PrepareSpecSentence=5/17 (/18 Tile{ AsIs: e.Pattern$a/2 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.StaticSubstitutions/5 AsIs: )/8 AsIs: (/11 AsIs: e.Result/9 AsIs: )/12 HalfReuse: </15 } & Map@19/19 (/20 e.StaticSubstitutions/5/21 Tile{ AsIs: )/16 } Tile{ AsIs: e.Conditions/13 } >/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_PrepareSpecSentence_A5]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_Map_Z19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::copy_evar(vm, context[21], context[22], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_open_call(context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[20], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[18], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[4], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSpecSentence_A4("PrepareSpecSentence=4", COOKIE1_, COOKIE2_, func_gen_PrepareSpecSentence_A4);


static refalrts::FnResult func_gen_PrepareSpecSentence_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & PrepareSpecSentence=3/4 (/7 e.StaticSubstitutions/5 )/8 (/11 e.Result/9 )/12 (/15 e.Conditions/13 )/16 (/19 e.CallStaticMatches/17 )/20 (/23 e.SpecPattern/21 )/24 e.PatternDynamicMatches$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.StaticSubstitutions as range 5
  // closed e.Result as range 9
  // closed e.Conditions as range 13
  // closed e.CallStaticMatches as range 17
  // closed e.SpecPattern as range 21
  // closed e.PatternDynamicMatches$a as range 2
  //DEBUG: e.StaticSubstitutions: 5
  //DEBUG: e.Result: 9
  //DEBUG: e.Conditions: 13
  //DEBUG: e.CallStaticMatches: 17
  //DEBUG: e.SpecPattern: 21
  //DEBUG: e.PatternDynamicMatches$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareSpecSentence=4/4 AsIs: (/7 AsIs: e.StaticSubstitutions/5 AsIs: )/8 AsIs: (/11 AsIs: e.Result/9 AsIs: )/12 AsIs: (/15 AsIs: e.Conditions/13 AsIs: )/16 HalfReuse: </19 } & PrepareArgOrPattern=1/25 (/26 Tile{ AsIs: e.CallStaticMatches/17 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.PatternDynamicMatches$a/2 } Tile{ AsIs: )/24 } </27 & ExtractVariables-Expr/28 Tile{ AsIs: e.SpecPattern/21 } >/29 >/30 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_PrepareArgOrPattern_A1]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_ExtractVariablesm_Expr]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSpecSentence_A4]);
  refalrts::reinit_open_call(context[19]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[26], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSpecSentence_A3("PrepareSpecSentence=3", COOKIE1_, COOKIE2_, func_gen_PrepareSpecSentence_A3);


static refalrts::FnResult func_gen_PrepareSpecSentence_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & PrepareSpecSentence=2/4 (/7 e.Result/5 )/8 (/11 e.Conditions/9 )/12 (/15 e.CallStaticMatches/13 )/16 (/19 e.SpecPattern/17 )/20 (/23 e.PatternDynamicMatches/21 )/24 e.StaticSubstitutions/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.Result as range 5
  // closed e.Conditions as range 9
  // closed e.CallStaticMatches as range 13
  // closed e.SpecPattern as range 17
  // closed e.PatternDynamicMatches as range 21
  // closed e.StaticSubstitutions as range 2
  //DEBUG: e.Result: 5
  //DEBUG: e.Conditions: 9
  //DEBUG: e.CallStaticMatches: 13
  //DEBUG: e.SpecPattern: 17
  //DEBUG: e.PatternDynamicMatches: 21
  //DEBUG: e.StaticSubstitutions: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } & PrepareSpecSentence=3/25 (/26 Tile{ AsIs: e.StaticSubstitutions/2 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Result/5 AsIs: )/8 AsIs: (/11 AsIs: e.Conditions/9 AsIs: )/12 AsIs: (/15 AsIs: e.CallStaticMatches/13 AsIs: )/16 AsIs: (/19 AsIs: e.SpecPattern/17 AsIs: )/20 HalfReuse: </23 } & Map@15/27 (/28 e.StaticSubstitutions/2/29 Tile{ AsIs: )/24 } Tile{ AsIs: e.PatternDynamicMatches/21 } >/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_PrepareSpecSentence_A3]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z15]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::copy_evar(vm, context[29], context[30], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_open_call(context[23]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[28], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[26], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[4], context[23] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSpecSentence_A2("PrepareSpecSentence=2", COOKIE1_, COOKIE2_, func_gen_PrepareSpecSentence_A2);


static refalrts::FnResult func_gen_PrepareSpecSentence_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & PrepareSpecSentence=1/4 (/7 e.Result/5 )/8 (/11 e.Conditions/9 )/12 (/15 e.CallStaticMatches/13 )/16 (/19 e.SpecPattern/17 )/20 # Clear/21 (/24 e.PatternStaticMatches/22 )/25 (/28 e.PatternDynamicMatches/26 )/29 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = refalrts::ident_left( identifiers[ident_Clear], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Result as range 5
  // closed e.Conditions as range 9
  // closed e.CallStaticMatches as range 13
  // closed e.SpecPattern as range 17
  // closed e.PatternStaticMatches as range 22
  // closed e.PatternDynamicMatches as range 26
  //DEBUG: e.Result: 5
  //DEBUG: e.Conditions: 9
  //DEBUG: e.CallStaticMatches: 13
  //DEBUG: e.SpecPattern: 17
  //DEBUG: e.PatternStaticMatches: 22
  //DEBUG: e.PatternDynamicMatches: 26

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareSpecSentence=2/4 AsIs: (/7 AsIs: e.Result/5 AsIs: )/8 AsIs: (/11 AsIs: e.Conditions/9 AsIs: )/12 AsIs: (/15 AsIs: e.CallStaticMatches/13 AsIs: )/16 AsIs: (/19 AsIs: e.SpecPattern/17 AsIs: )/20 HalfReuse: (/21 } Tile{ AsIs: e.PatternDynamicMatches/26 } )/30 </31 & MapGenericMatches=1/32 </33 & Reduce@2/34 Tile{ AsIs: (/24 } (/35 e.CallStaticMatches/13/36 Tile{ AsIs: )/25 AsIs: (/28 } )/38 )/39 Tile{ AsIs: e.PatternStaticMatches/22 } >/40 Tile{ HalfReuse: >/29 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_open_call(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_gen_MapGenericMatches_A1]);
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_gen_Reduce_Z2]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::copy_evar(vm, context[36], context[37], context[13], context[14]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_call(vm, context[40]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSpecSentence_A2]);
  refalrts::reinit_open_bracket(context[21]);
  refalrts::reinit_close_call(context[29]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[33] );
  refalrts::link_brackets( context[24], context[39] );
  refalrts::link_brackets( context[28], context[38] );
  refalrts::link_brackets( context[35], context[25] );
  refalrts::link_brackets( context[21], context[30] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[29];
  res = refalrts::splice_elem( res, context[40] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[25], context[28] );
  res = refalrts::splice_evar( res, context[36], context[37] );
  res = refalrts::splice_elem( res, context[35] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[30], context[34] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrepareSpecSentence_A1("PrepareSpecSentence=1", COOKIE1_, COOKIE2_, func_gen_PrepareSpecSentence_A1);


static refalrts::FnResult func_PrepareSpecSentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & PrepareSpecSentence/4 (/7 e.SpecPattern/5 )/8 (/11 e.CallStaticMatches/9 )/12 (/15 (/19 e.Pattern/17 )/20 e.Conditions/13 (/23 e.Result/21 )/24 )/16 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[13], context[14] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[13], context[14] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.SpecPattern as range 5
  // closed e.CallStaticMatches as range 9
  // closed e.Pattern as range 17
  // closed e.Conditions as range 13
  // closed e.Result as range 21
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.CallStaticMatches: 9
  //DEBUG: e.Pattern: 17
  //DEBUG: e.Conditions: 13
  //DEBUG: e.Result: 21

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareSpecSentence=1/4 AsIs: (/7 } Tile{ AsIs: e.Result/21 } )/25 Tile{ AsIs: (/23 } Tile{ AsIs: e.Conditions/13 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.CallStaticMatches/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.SpecPattern/5 } )/26 </27 & GenericMatch-Wrapper:1/28 </29 & GenericMatch/30 Tile{ AsIs: (/19 AsIs: e.Pattern/17 AsIs: )/20 } (/31 e.SpecPattern/5/32 )/34 Tile{ HalfReuse: >/24 HalfReuse: >/16 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_gen_GenericMatchm_Wrapper_B1]);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_GenericMatch]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::copy_evar(vm, context[32], context[33], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSpecSentence_A1]);
  refalrts::reinit_close_call(context[24]);
  refalrts::reinit_close_call(context[16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[31], context[34] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[26] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[23], context[8] );
  refalrts::link_brackets( context[7], context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[24];
  res = refalrts::splice_evar( res, context[31], context[34] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[26], context[30] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrepareSpecSentence("PrepareSpecSentence", COOKIE1_, COOKIE2_, func_PrepareSpecSentence);


static refalrts::FnResult func_PrepareSpecConditions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & PrepareSpecConditions/4 (/7 e.StaticSubstitutions/5 )/8 e.Conditions/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.StaticSubstitutions as range 5
  // closed e.Conditions as range 2
  //DEBUG: e.StaticSubstitutions: 5
  //DEBUG: e.Conditions: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@19/4 AsIs: (/7 AsIs: e.StaticSubstitutions/5 AsIs: )/8 AsIs: e.Conditions/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z19]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrepareSpecConditions("PrepareSpecConditions", COOKIE1_, COOKIE2_, func_PrepareSpecConditions);


static refalrts::FnResult func_gen_GenericMatchm_Wrapper_B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & GenericMatch-Wrapper:1$1=1/4 (/7 e.StaticMatches/5 )/8 e.DynamicMatches/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.StaticMatches as range 5
  // closed e.DynamicMatches as range 2
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.DynamicMatches: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Clear/4 AsIs: (/7 AsIs: e.StaticMatches/5 AsIs: )/8 } Tile{ HalfReuse: (/0 } Tile{ AsIs: e.DynamicMatches/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_ident(context[4], identifiers[ident_Clear]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenericMatchm_Wrapper_B1S1A1("GenericMatch-Wrapper:1$1=1", COOKIE1_, COOKIE2_, func_gen_GenericMatchm_Wrapper_B1S1A1);


static refalrts::FnResult func_gen_GenericMatchm_Wrapper_B1S1A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & GenericMatch-Wrapper:1$1=1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GenericMatch-Wrapper:1$1=1\1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 ':'/17 (/15 e.new3/13 )/16 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = refalrts::char_right( ':', context[9], context[10] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  do {
    // </0 & GenericMatch-Wrapper:1$1=1\1/4 (/7 e.StaticMatches/18 )/8 (/11 e.Val/20 ':'/17 (/15 e.Var/22 )/16 )/12 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[13];
    context[23] = context[14];
    // closed e.StaticMatches as range 18
    // closed e.Val as range 20
    // closed e.Var as range 22
    //DEBUG: e.StaticMatches: 18
    //DEBUG: e.Val: 20
    //DEBUG: e.Var: 22
    //18: e.StaticMatches
    //20: e.Val
    //22: e.Var
    //27: e.Var

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[26], functions[efunc_gen_GenericMatchm_Wrapper_B1S1A1L1S1C1]);
    refalrts::copy_evar(vm, context[27], context[28], context[22], context[23]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[24] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[24] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </24 & GenericMatch-Wrapper:1$1=1\1$1?1/28 s.Mode/29 e.Index/26 >/25
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::call_left( context[26], context[27], context[24], context[25] );
      if( ! refalrts::svar_left( context[29], context[26], context[27] ) )
        continue;
      // closed e.Index as range 26
      //DEBUG: e.StaticMatches: 18
      //DEBUG: e.Val: 20
      //DEBUG: e.Var: 22
      //DEBUG: s.Mode: 29
      //DEBUG: e.Index: 26
      //18: e.StaticMatches
      //20: e.Val
      //22: e.Var
      //26: e.Index
      //29: s.Mode
      //36: e.Var

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_GenericMatchm_Wrapper_B1S1A1L1S1C2]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_IsSpecStaticVar]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::copy_evar(vm, context[36], context[37], context[22], context[23]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[33] );
      res = refalrts::splice_elem( res, context[39] );
      refalrts::link_brackets( context[35], context[38] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </30 & GenericMatch-Wrapper:1$1=1\1$1?2/34 # True/35 >/31
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::call_left( context[32], context[33], context[30], context[31] );
        context[35] = refalrts::ident_left( identifiers[ident_True], context[32], context[33] );
        if( ! context[35] )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        //DEBUG: e.StaticMatches: 18
        //DEBUG: e.Val: 20
        //DEBUG: e.Var: 22
        //DEBUG: s.Mode: 29
        //DEBUG: e.Index: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & GenericMatch-Wrapper:1$1=1\1/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} & GenericMatch-Wrapper:1$1=1\1$1?1/28 s.Mode/29 e.Index/26 >/25 </30 & GenericMatch-Wrapper:1$1=1\1$1?2/34 {REMOVED TILE} >/31 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.StaticMatches/18 } Tile{ AsIs: (/11 AsIs: e.Val/20 AsIs: ':'/17 AsIs: (/15 } Tile{ Reuse: # Var/35 } Tile{ AsIs: e.Var/22 } Tile{ AsIs: )/16 AsIs: )/12 HalfReuse: )/24 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::update_ident(context[35], identifiers[ident_Var]);
        refalrts::reinit_close_bracket(context[24]);
        refalrts::link_brackets( context[0], context[24] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[24] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[11], context[15] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[30], context[31]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[24], context[25]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenericMatch-Wrapper:1$1=1\1/4 (/7 e.StaticMatches/5 )/8 (/11 e.Val/9 ':'/17 (/15 e.Var/13 )/16 )/12 >/1
  // closed e.StaticMatches as range 5
  // closed e.Val as range 9
  // closed e.Var as range 13
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.Val: 9
  //DEBUG: e.Var: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & GenericMatch-Wrapper:1$1=1\1/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.StaticMatches/5 AsIs: )/8 AsIs: (/11 AsIs: e.Val/9 AsIs: ':'/17 AsIs: (/15 } Tile{ HalfReuse: # Var/16 } Tile{ AsIs: e.Var/13 } Tile{ AsIs: )/12 HalfReuse: )/1 ]] }
  refalrts::reinit_ident(context[16], identifiers[ident_Var]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[11], context[1] );
  refalrts::link_brackets( context[15], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[7], context[15] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenericMatchm_Wrapper_B1S1A1L1("GenericMatch-Wrapper:1$1=1\\1", COOKIE1_, COOKIE2_, func_gen_GenericMatchm_Wrapper_B1S1A1L1);


static refalrts::FnResult func_gen_GenericMatchm_Wrapper_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & GenericMatch-Wrapper:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GenericMatch-Wrapper:1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & GenericMatch-Wrapper:1/4 # Clear/5 e.VarsMatches/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Clear], context[5] ) )
      continue;
    // closed e.VarsMatches as range 6
    //DEBUG: e.VarsMatches: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenericMatch-Wrapper:1$1=1/4 HalfReuse: </5 } & DoMapAccum@14/8 (/9 )/10 (/11 )/12 Tile{ AsIs: e.VarsMatches/6 } >/13 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[8], functions[efunc_gen_DoMapAccum_Z14]);
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_gen_GenericMatchm_Wrapper_B1S1A1]);
    refalrts::reinit_open_call(context[5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[5] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenericMatch-Wrapper:1/4 s.OtherResult/5 e.ResultInfo/2 >/1
  // closed e.ResultInfo as range 2
  //DEBUG: s.OtherResult: 5
  //DEBUG: e.ResultInfo: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & GenericMatch-Wrapper:1/4 s.OtherResult/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: s.OtherResult5 /0 } Tile{ AsIs: e.ResultInfo/2 } Tile{ ]] }
  refalrts::reinit_svar( context[0], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenericMatchm_Wrapper_B1("GenericMatch-Wrapper:1", COOKIE1_, COOKIE2_, func_gen_GenericMatchm_Wrapper_B1);


static refalrts::FnResult func_GenericMatchm_Wrapper(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & GenericMatch-Wrapper/4 (/7 e.Expr/5 )/8 (/11 e.HardExpr/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  // closed e.HardExpr as range 9
  //DEBUG: e.Expr: 5
  //DEBUG: e.HardExpr: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & GenericMatch-Wrapper:1/14 Tile{ AsIs: </0 Reuse: & GenericMatch/4 AsIs: (/7 AsIs: e.Expr/5 AsIs: )/8 AsIs: (/11 AsIs: e.HardExpr/9 AsIs: )/12 AsIs: >/1 } >/15 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_GenericMatchm_Wrapper_B1]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_GenericMatch]);
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenericMatchm_Wrapper("GenericMatch-Wrapper", COOKIE1_, COOKIE2_, func_GenericMatchm_Wrapper);


static refalrts::FnResult func_gen_IsSpecStaticVar_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & IsSpecStaticVar:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & IsSpecStaticVar:1/4 'L'/7 'u'/8 s._/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::char_left( 'L', context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = refalrts::char_left( 'u', context[5], context[6] );
    if( ! context[8] )
      continue;
    if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s._: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & IsSpecStaticVar:1/4 'L'/7 'u'/8 s._/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsSpecStaticVar:1/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsSpecStaticVar:1/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsSpecStaticVar_B1("IsSpecStaticVar:1", COOKIE1_, COOKIE2_, func_gen_IsSpecStaticVar_B1);


static refalrts::FnResult func_IsSpecStaticVar(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & IsSpecStaticVar/4 (/7 s.Mode/9 s.FirstSymbol/10 e.Index/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Index as range 5
  //DEBUG: s.Mode: 9
  //DEBUG: s.FirstSymbol: 10
  //DEBUG: e.Index: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Mode/9 {REMOVED TILE} e.Index/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsSpecStaticVar:1/4 HalfReuse: </7 } & Type/11 Tile{ AsIs: s.FirstSymbol/10 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[11], functions[efunc_Type]);
  refalrts::update_name(context[4], functions[efunc_gen_IsSpecStaticVar_B1]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsSpecStaticVar("IsSpecStaticVar", COOKIE1_, COOKIE2_, func_IsSpecStaticVar);


static refalrts::FnResult func_gen_MapGenericMatches_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & MapGenericMatches=1/4 (/7 (/11 e._/9 )/12 (/15 e.ResultMatches/13 )/16 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e._ as range 9
  // closed e.ResultMatches as range 13
  //DEBUG: e._: 9
  //DEBUG: e.ResultMatches: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MapGenericMatches=1/4 (/7 (/11 e._/9 )/12 (/15 {REMOVED TILE} )/16 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.ResultMatches/13 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MapGenericMatches_A1("MapGenericMatches=1", COOKIE1_, COOKIE2_, func_gen_MapGenericMatches_A1);


static refalrts::FnResult func_gen_MapGenericMatches_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & MapGenericMatches=1\1/4 (/7 (/11 e.ArgStaticMatches-B/30 (/36 e.ArgVal/34 ':'/40 t.SpecVar/38 )/37 e.ArgStaticMatches-E/32 )/12 (/15 e.MappedMatches/13 )/16 )/8 (/19 (/23 # Var/26 s.Mode/27 e.Index/21 )/24 ':'/25 t.SpecVar/28 )/20 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[17], context[18] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = refalrts::char_left( ':', context[17], context[18] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  context[26] = refalrts::ident_left( identifiers[ident_Var], context[21], context[22] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.MappedMatches as range 13
  if( ! refalrts::svar_left( context[27], context[21], context[22] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Index as range 21
  context[29] = refalrts::tvar_left( context[28], context[17], context[18] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[17], context[18] ) )
    return refalrts::cRecognitionImpossible;
  context[30] = 0;
  context[31] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[32] = context[9];
    context[33] = context[10];
    context[34] = 0;
    context[35] = 0;
    context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
    if( ! context[36] )
      continue;
    refalrts::bracket_pointers(context[36], context[37]);
    context[39] = refalrts::repeated_stvar_right( vm, context[38], context[28], context[34], context[35] );
    if( ! context[39] )
      continue;
    context[40] = refalrts::char_right( ':', context[34], context[35] );
    if( ! context[40] )
      continue;
    // closed e.ArgVal as range 34
    // closed e.ArgStaticMatches-E as range 32
    //DEBUG: e.MappedMatches: 13
    //DEBUG: s.Mode: 27
    //DEBUG: e.Index: 21
    //DEBUG: t.SpecVar: 28
    //DEBUG: e.ArgStaticMatches-B: 30
    //DEBUG: e.ArgVal: 34
    //DEBUG: e.ArgStaticMatches-E: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & MapGenericMatches=1\1/4 {REMOVED TILE} )/8 (/19 {REMOVED TILE} t.SpecVar/28 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.ArgStaticMatches-B/30 AsIs: (/36 AsIs: e.ArgVal/34 AsIs: ':'/40 AsIs: t.SpecVar/38 AsIs: )/37 AsIs: e.ArgStaticMatches-E/32 AsIs: )/12 AsIs: (/15 AsIs: e.MappedMatches/13 HalfReuse: (/16 } e.ArgVal/34/41 Tile{ HalfReuse: ':'/23 HalfReuse: (/26 AsIs: s.Mode/27 AsIs: e.Index/21 AsIs: )/24 HalfReuse: )/25 } Tile{ AsIs: )/20 HalfReuse: )/1 ]] }
    refalrts::copy_evar(vm, context[41], context[42], context[34], context[35]);
    refalrts::reinit_open_bracket(context[16]);
    refalrts::reinit_char(context[23], ':');
    refalrts::reinit_open_bracket(context[26]);
    refalrts::reinit_close_bracket(context[25]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[15], context[20] );
    refalrts::link_brackets( context[16], context[25] );
    refalrts::link_brackets( context[26], context[24] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[37] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    res = refalrts::splice_evar( res, context[23], context[25] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[7], context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[30], context[31], context[9], context[10] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_MapGenericMatches_A1L1("MapGenericMatches=1\\1", COOKIE1_, COOKIE2_, func_gen_MapGenericMatches_A1L1);


static refalrts::FnResult func_MapGenericMatches(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & MapGenericMatches/4 (/7 e.ArgStaticMatches/5 )/8 (/11 e.PatternStaticMatches/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ArgStaticMatches as range 5
  // closed e.PatternStaticMatches as range 9
  //DEBUG: e.ArgStaticMatches: 5
  //DEBUG: e.PatternStaticMatches: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & MapGenericMatches=1/14 </15 Tile{ HalfReuse: & Reduce@2/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.ArgStaticMatches/5 AsIs: )/8 AsIs: (/11 } )/16 )/17 Tile{ AsIs: e.PatternStaticMatches/9 } Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_MapGenericMatches_A1]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z2]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[4], context[17] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[13], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapGenericMatches("MapGenericMatches", COOKIE1_, COOKIE2_, func_MapGenericMatches);


static refalrts::FnResult func_HasHigmanKruskalRelation(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & HasHigmanKruskalRelation/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & HasHigmanKruskalRelation/4 (/7 e.new1/5 )/8 e.new2/2 (/11 e.new3/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  // closed e.new3 as range 9
  do {
    // </0 & HasHigmanKruskalRelation/4 (/7 e.new6/13 )/8 (/21 e.new4/19 )/22 e.new5/15 (/11 (/25 e.new7/23 )/26 e.new8/17 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[2];
    context[16] = context[3];
    context[17] = context[9];
    context[18] = context[10];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[15], context[16] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[17], context[18] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    // closed e.new6 as range 13
    // closed e.new4 as range 19
    // closed e.new5 as range 15
    // closed e.new7 as range 23
    // closed e.new8 as range 17
    do {
      // </0 & HasHigmanKruskalRelation/4 (/7 e.Name/27 )/8 (/21 e.Signature/29 )/22 e.History/31 (/11 (/25 e.InstanceName/33 )/26 e.HistorySignature/35 )/12 >/1
      context[27] = context[13];
      context[28] = context[14];
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[15];
      context[32] = context[16];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[17];
      context[36] = context[18];
      // closed e.Name as range 27
      // closed e.Signature as range 29
      // closed e.History as range 31
      // closed e.InstanceName as range 33
      // closed e.HistorySignature as range 35
      //DEBUG: e.Name: 27
      //DEBUG: e.Signature: 29
      //DEBUG: e.History: 31
      //DEBUG: e.InstanceName: 33
      //DEBUG: e.HistorySignature: 35
      //27: e.Name
      //29: e.Signature
      //31: e.History
      //33: e.InstanceName
      //35: e.HistorySignature
      //42: e.InstanceName

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[39], functions[efunc_gen_HasHigmanKruskalRelation_S1C1]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_SourceNameOfInstance]);
      refalrts::copy_evar(vm, context[42], context[43], context[33], context[34]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[37] );
      res = refalrts::splice_elem( res, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </37 & HasHigmanKruskalRelation$1?1/41 e.Name/42 >/38
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::call_left( context[39], context[40], context[37], context[38] );
        if( ! refalrts::repeated_evar_left( vm, context[42], context[43], context[27], context[28], context[39], context[40] ) )
          continue;
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        //DEBUG: e.Name: 27
        //DEBUG: e.Signature: 29
        //DEBUG: e.History: 31
        //DEBUG: e.InstanceName: 33
        //DEBUG: e.HistorySignature: 35
        //27: e.Name
        //29: e.Signature
        //31: e.History
        //33: e.InstanceName
        //35: e.HistorySignature
        //42: e.Name
        //50: e.Signature
        //55: e.HistorySignature

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_HasHigmanKruskalRelation_S1C2]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_OptTreem_CheckTupleStopRelation]);
        refalrts::alloc_open_bracket(vm, context[49]);
        refalrts::copy_evar(vm, context[50], context[51], context[29], context[30]);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::alloc_open_call(vm, context[53]);
        refalrts::alloc_name(vm, context[54], functions[efunc_OptTreem_CanonizeTuple]);
        refalrts::copy_evar(vm, context[55], context[56], context[35], context[36]);
        refalrts::alloc_close_call(vm, context[57]);
        refalrts::alloc_close_call(vm, context[58]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[44] );
        res = refalrts::splice_elem( res, context[45] );
        refalrts::push_stack( vm, context[58] );
        refalrts::push_stack( vm, context[47] );
        res = refalrts::splice_elem( res, context[58] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[53] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_elem( res, context[54] );
        res = refalrts::splice_elem( res, context[53] );
        refalrts::link_brackets( context[49], context[52] );
        res = refalrts::splice_elem( res, context[52] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_elem( res, context[49] );
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </44 & HasHigmanKruskalRelation$1?2/48 # True/49 >/45
          context[46] = 0;
          context[47] = 0;
          context[48] = refalrts::call_left( context[46], context[47], context[44], context[45] );
          context[49] = refalrts::ident_left( identifiers[ident_True], context[46], context[47] );
          if( ! context[49] )
            continue;
          if( ! refalrts::empty_seq( context[46], context[47] ) )
            continue;
          //DEBUG: e.Name: 27
          //DEBUG: e.Signature: 29
          //DEBUG: e.History: 31
          //DEBUG: e.InstanceName: 33
          //DEBUG: e.HistorySignature: 35

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} & HasHigmanKruskalRelation/4 (/7 e.Name/27 )/8 (/21 e.Signature/29 )/22 e.History/31 (/11 (/25 e.InstanceName/33 )/26 {REMOVED TILE} )/12 </37 & HasHigmanKruskalRelation$1?1/41 e.Name/42 >/38 </44 & HasHigmanKruskalRelation$1?2/48 # True/49 >/45 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: # True/0 } Tile{ AsIs: e.HistorySignature/35 } Tile{ ]] }
          refalrts::reinit_ident(context[0], identifiers[ident_True]);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[35], context[36] );
          refalrts::splice_to_freelist_open( vm, context[0], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[44], context[45]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[37], context[38]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & HasHigmanKruskalRelation/4 (/7 e.Name/27 )/8 (/21 e.Signature/29 )/22 e.History/31 (/11 (/25 e.InstanceName/33 )/26 e.HistorySignature/35 )/12 >/1
    context[27] = context[13];
    context[28] = context[14];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[17];
    context[36] = context[18];
    // closed e.Name as range 27
    // closed e.Signature as range 29
    // closed e.History as range 31
    // closed e.InstanceName as range 33
    // closed e.HistorySignature as range 35
    //DEBUG: e.Name: 27
    //DEBUG: e.Signature: 29
    //DEBUG: e.History: 31
    //DEBUG: e.InstanceName: 33
    //DEBUG: e.HistorySignature: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/25 e.InstanceName/33 )/26 e.HistorySignature/35 )/12 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & HasHigmanKruskalRelation/4 AsIs: (/7 AsIs: e.Name/27 AsIs: )/8 AsIs: (/21 AsIs: e.Signature/29 AsIs: )/22 AsIs: e.History/31 HalfReuse: >/11 } Tile{ ]] }
    refalrts::reinit_close_call(context[11]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & HasHigmanKruskalRelation/4 (/7 e.Name/5 )/8 (/11 e.Signature/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 5
  // closed e.Signature as range 9
  //DEBUG: e.Name: 5
  //DEBUG: e.Signature: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & HasHigmanKruskalRelation/4 (/7 e.Name/5 )/8 (/11 e.Signature/9 )/12 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HasHigmanKruskalRelation("HasHigmanKruskalRelation", COOKIE1_, COOKIE2_, func_HasHigmanKruskalRelation);


static refalrts::FnResult func_SourceNameOfInstance(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & SourceNameOfInstance/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SourceNameOfInstance/4 e.new1/2 '@'/6 s.new2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = refalrts::char_right( '@', context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & SourceNameOfInstance/4 e.Name/7 # SUF/9 '@'/6 s._/5 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[9] = refalrts::ident_right( identifiers[ident_SUF], context[7], context[8] );
    if( ! context[9] )
      continue;
    // closed e.Name as range 7
    //DEBUG: s._: 5
    //DEBUG: e.Name: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SourceNameOfInstance/4 {REMOVED TILE} # SUF/9 '@'/6 s._/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/7 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SourceNameOfInstance/4 e.Name/2 '@'/6 s._/5 >/1
  // closed e.Name as range 2
  //DEBUG: s._: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SourceNameOfInstance/4 {REMOVED TILE} '@'/6 s._/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SourceNameOfInstance("SourceNameOfInstance", COOKIE1_, COOKIE2_, func_SourceNameOfInstance);


static refalrts::FnResult func_gen_MakeGeneralization_A10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & MakeGeneralization=10/4 t.Info/5 (/9 e.NewFunc/7 )/10 (/13 e.NewHistory/11 )/14 t.NewCall$b/15 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.NewFunc as range 7
  // closed e.NewHistory as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Info: 5
  //DEBUG: e.NewFunc: 7
  //DEBUG: e.NewHistory: 11
  //DEBUG: t.NewCall$b: 15

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MakeGeneralization=10/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Info/5 } Tile{ AsIs: t.NewCall$b/15 } Tile{ AsIs: e.NewFunc/7 } Tile{ AsIs: (/13 AsIs: e.NewHistory/11 AsIs: )/14 } Tile{ ]] }
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A10("MakeGeneralization=10", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A10);


static refalrts::FnResult func_gen_MakeGeneralization_A9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & MakeGeneralization=9/4 t.Info/5 (/9 e.NewFunc/7 )/10 (/13 e.NewHistory/11 )/14 (/17 e.Calls/15 )/18 t.NewCall$a/19 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.NewFunc as range 7
  // closed e.NewHistory as range 11
  // closed e.Calls as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Info: 5
  //DEBUG: e.NewFunc: 7
  //DEBUG: e.NewHistory: 11
  //DEBUG: e.Calls: 15
  //DEBUG: t.NewCall$a: 19

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeGeneralization=10/4 AsIs: t.Info/5 AsIs: (/9 AsIs: e.NewFunc/7 AsIs: )/10 AsIs: (/13 AsIs: e.NewHistory/11 AsIs: )/14 HalfReuse: </17 } & Map@11/21 (/22 Tile{ AsIs: e.Calls/15 } Tile{ AsIs: )/18 AsIs: t.NewCall$a/19 AsIs: >/1 } >/23 Tile{ ]] }
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_Map_Z11]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeGeneralization_A10]);
  refalrts::reinit_open_call(context[17]);
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[22], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[18], context[1] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A9("MakeGeneralization=9", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A9);


static refalrts::FnResult func_gen_MakeGeneralization_A8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & MakeGeneralization=8/4 (/7 e.Calls/5 )/8 (/11 e.RealSubst/9 )/12 t.Info/17 t.NewCall/19 e.NewFunc/2 (/15 e.NewHistory/13 )/16 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Calls as range 5
  // closed e.RealSubst as range 9
  // closed e.NewHistory as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  // closed e.NewFunc as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.RealSubst: 9
  //DEBUG: e.NewHistory: 13
  //DEBUG: t.Info: 17
  //DEBUG: t.NewCall: 19
  //DEBUG: e.NewFunc: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & MakeGeneralization=9/12 AsIs: t.Info/17 } Tile{ AsIs: (/15 } Tile{ AsIs: e.NewFunc/2 } )/21 (/22 Tile{ AsIs: e.NewHistory/13 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Calls/5 AsIs: )/8 HalfReuse: </11 } & Map@11/23 (/24 Tile{ AsIs: e.RealSubst/9 } )/25 Tile{ AsIs: t.NewCall/19 } Tile{ HalfReuse: >/16 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_Map_Z11]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::reinit_name(context[12], functions[efunc_gen_MakeGeneralization_A9]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_close_call(context[16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[22], context[4] );
  refalrts::link_brackets( context[15], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[4], context[11] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[12], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A8("MakeGeneralization=8", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A8);


static refalrts::FnResult func_gen_MakeGeneralization_A7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & MakeGeneralization=7/4 (/7 e.Calls/5 )/8 (/11 e.RealSubst/9 )/12 (/15 e.Name/13 )/16 (/19 e.SpecPattern/17 )/20 (/23 e.Body/21 )/24 s.NextNumber/25 (/28 e.Signatures/26 )/29 (/32 e.Argument/30 )/33 (/36 e.GenStaticMatches$a/34 )/37 (/40 e.DynamicMatches/38 )/41 (/44 e.History/42 )/45 s.NeedRelationCheck/46 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.Calls as range 5
  // closed e.RealSubst as range 9
  // closed e.Name as range 13
  // closed e.SpecPattern as range 17
  // closed e.Body as range 21
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  context[42] = 0;
  context[43] = 0;
  context[44] = refalrts::brackets_left( context[42], context[43], context[2], context[3] );
  if( ! context[44] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[44], context[45]);
  // closed e.Signatures as range 26
  // closed e.Argument as range 30
  // closed e.GenStaticMatches$a as range 34
  // closed e.DynamicMatches as range 38
  // closed e.History as range 42
  if( ! refalrts::svar_left( context[46], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Calls: 5
  //DEBUG: e.RealSubst: 9
  //DEBUG: e.Name: 13
  //DEBUG: e.SpecPattern: 17
  //DEBUG: e.Body: 21
  //DEBUG: s.NextNumber: 25
  //DEBUG: e.Signatures: 26
  //DEBUG: e.Argument: 30
  //DEBUG: e.GenStaticMatches$a: 34
  //DEBUG: e.DynamicMatches: 38
  //DEBUG: e.History: 42
  //DEBUG: s.NeedRelationCheck: 46

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeGeneralization=8/4 AsIs: (/7 AsIs: e.Calls/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.RealSubst/9 } Tile{ AsIs: )/29 } Tile{ HalfReuse: </28 } Tile{ HalfReuse: & SpecCall-Matches/12 AsIs: (/15 AsIs: e.Name/13 AsIs: )/16 AsIs: (/19 AsIs: e.SpecPattern/17 AsIs: )/20 AsIs: (/23 AsIs: e.Body/21 AsIs: )/24 AsIs: s.NextNumber/25 } Tile{ AsIs: e.Signatures/26 } Tile{ AsIs: (/32 AsIs: e.Argument/30 AsIs: )/33 AsIs: (/36 AsIs: e.GenStaticMatches$a/34 AsIs: )/37 AsIs: (/40 AsIs: e.DynamicMatches/38 AsIs: )/41 AsIs: (/44 AsIs: e.History/42 AsIs: )/45 AsIs: s.NeedRelationCheck/46 AsIs: >/1 } >/47 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[47]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeGeneralization_A8]);
  refalrts::reinit_open_call(context[28]);
  refalrts::reinit_name(context[12], functions[efunc_SpecCallm_Matches]);
  refalrts::push_stack( vm, context[47] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[28] );
  refalrts::link_brackets( context[44], context[45] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[29] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[47] );
  res = refalrts::splice_evar( res, context[32], context[1] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[12], context[25] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A7("MakeGeneralization=7", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A7);


static refalrts::FnResult func_gen_MakeGeneralization_A7B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & MakeGeneralization=7:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MakeGeneralization=7:1/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & MakeGeneralization=7:1/4 # True/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_True], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & MakeGeneralization=7:1/4 # True/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeGeneralization=7:1/4 # False/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MakeGeneralization=7:1/4 # False/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A7B1("MakeGeneralization=7:1", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A7B1);


static refalrts::FnResult func_gen_MakeGeneralization_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & MakeGeneralization=6/4 (/7 e.Calls/5 )/8 (/11 e.Name/9 )/12 (/15 e.SpecPattern/13 )/16 (/19 e.Body/17 )/20 s.NextNumber/21 (/24 e.Signatures/22 )/25 (/28 e.Argument/26 )/29 (/32 e.GenStaticMatches$a/30 )/33 (/36 e.DynamicMatches/34 )/37 (/40 e.History/38 )/41 e.RealSubst/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Calls as range 5
  // closed e.Name as range 9
  // closed e.SpecPattern as range 13
  // closed e.Body as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  // closed e.Signatures as range 22
  // closed e.Argument as range 26
  // closed e.GenStaticMatches$a as range 30
  // closed e.DynamicMatches as range 34
  // closed e.History as range 38
  // closed e.RealSubst as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.Name: 9
  //DEBUG: e.SpecPattern: 13
  //DEBUG: e.Body: 17
  //DEBUG: s.NextNumber: 21
  //DEBUG: e.Signatures: 22
  //DEBUG: e.Argument: 26
  //DEBUG: e.GenStaticMatches$a: 30
  //DEBUG: e.DynamicMatches: 34
  //DEBUG: e.History: 38
  //DEBUG: e.RealSubst: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeGeneralization=7/4 AsIs: (/7 } Tile{ AsIs: e.Calls/5 } )/42 (/43 e.RealSubst/2/44 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Name/9 AsIs: )/12 AsIs: (/15 AsIs: e.SpecPattern/13 AsIs: )/16 AsIs: (/19 AsIs: e.Body/17 AsIs: )/20 AsIs: s.NextNumber/21 AsIs: (/24 AsIs: e.Signatures/22 AsIs: )/25 AsIs: (/28 AsIs: e.Argument/26 AsIs: )/29 AsIs: (/32 AsIs: e.GenStaticMatches$a/30 AsIs: )/33 AsIs: (/36 AsIs: e.DynamicMatches/34 AsIs: )/37 AsIs: (/40 AsIs: e.History/38 AsIs: )/41 } </46 & MakeGeneralization=7:1/47 </48 & Reduce@1/49 # True/50 Tile{ AsIs: e.RealSubst/2 } >/51 >/52 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[42]);
  refalrts::alloc_open_bracket(vm, context[43]);
  refalrts::copy_evar(vm, context[44], context[45], context[2], context[3]);
  refalrts::alloc_open_call(vm, context[46]);
  refalrts::alloc_name(vm, context[47], functions[efunc_gen_MakeGeneralization_A7B1]);
  refalrts::alloc_open_call(vm, context[48]);
  refalrts::alloc_name(vm, context[49], functions[efunc_gen_Reduce_Z1]);
  refalrts::alloc_ident(vm, context[50], identifiers[ident_True]);
  refalrts::alloc_close_call(vm, context[51]);
  refalrts::alloc_close_call(vm, context[52]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeGeneralization_A7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[52] );
  refalrts::push_stack( vm, context[46] );
  refalrts::push_stack( vm, context[51] );
  refalrts::push_stack( vm, context[48] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[43], context[8] );
  refalrts::link_brackets( context[7], context[42] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[51], context[52] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[46], context[50] );
  res = refalrts::splice_evar( res, context[8], context[41] );
  res = refalrts::splice_evar( res, context[44], context[45] );
  res = refalrts::splice_evar( res, context[42], context[43] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A6("MakeGeneralization=6", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A6);


static refalrts::FnResult func_gen_MakeGeneralization_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & MakeGeneralization=5/4 (/7 e.Calls/5 )/8 (/11 e.Name/9 )/12 (/15 e.SpecPattern/13 )/16 (/19 e.Body/17 )/20 s.NextNumber/21 (/24 e.Signatures/22 )/25 (/28 e.Argument/26 )/29 (/32 e.DynamicMatches/30 )/33 (/36 e.History/34 )/37 (/40 e.StaticMatches/38 )/41 e.GenStaticMatches$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Calls as range 5
  // closed e.Name as range 9
  // closed e.SpecPattern as range 13
  // closed e.Body as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  // closed e.Signatures as range 22
  // closed e.Argument as range 26
  // closed e.DynamicMatches as range 30
  // closed e.History as range 34
  // closed e.StaticMatches as range 38
  // closed e.GenStaticMatches$a as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.Name: 9
  //DEBUG: e.SpecPattern: 13
  //DEBUG: e.Body: 17
  //DEBUG: s.NextNumber: 21
  //DEBUG: e.Signatures: 22
  //DEBUG: e.Argument: 26
  //DEBUG: e.DynamicMatches: 30
  //DEBUG: e.History: 34
  //DEBUG: e.StaticMatches: 38
  //DEBUG: e.GenStaticMatches$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeGeneralization=6/4 AsIs: (/7 AsIs: e.Calls/5 AsIs: )/8 AsIs: (/11 AsIs: e.Name/9 AsIs: )/12 AsIs: (/15 AsIs: e.SpecPattern/13 AsIs: )/16 AsIs: (/19 AsIs: e.Body/17 AsIs: )/20 AsIs: s.NextNumber/21 AsIs: (/24 AsIs: e.Signatures/22 AsIs: )/25 AsIs: (/28 AsIs: e.Argument/26 AsIs: )/29 AsIs: (/32 } Tile{ AsIs: e.GenStaticMatches$a/2 } )/42 (/43 Tile{ AsIs: e.DynamicMatches/30 } Tile{ AsIs: )/33 AsIs: (/36 AsIs: e.History/34 AsIs: )/37 HalfReuse: </40 } & GetRealSubst/44 (/45 Tile{ AsIs: e.StaticMatches/38 } Tile{ AsIs: )/41 } (/46 e.GenStaticMatches$a/2/47 )/49 >/50 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[42]);
  refalrts::alloc_open_bracket(vm, context[43]);
  refalrts::alloc_name(vm, context[44], functions[efunc_GetRealSubst]);
  refalrts::alloc_open_bracket(vm, context[45]);
  refalrts::alloc_open_bracket(vm, context[46]);
  refalrts::copy_evar(vm, context[47], context[48], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[49]);
  refalrts::alloc_close_call(vm, context[50]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeGeneralization_A6]);
  refalrts::reinit_open_call(context[40]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[50] );
  refalrts::push_stack( vm, context[40] );
  refalrts::link_brackets( context[46], context[49] );
  refalrts::link_brackets( context[45], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[43], context[33] );
  refalrts::link_brackets( context[32], context[42] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[46], context[50] );
  res = refalrts::splice_elem( res, context[41] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[44], context[45] );
  res = refalrts::splice_evar( res, context[33], context[40] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[42], context[43] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A5("MakeGeneralization=5", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A5);


static refalrts::FnResult func_gen_MakeGeneralization_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & MakeGeneralization=4/4 (/7 e.Calls/5 )/8 (/11 e.Name/9 )/12 (/15 e.SpecPattern/13 )/16 (/19 e.Body/17 )/20 s.NextNumber/21 (/24 e.Signatures/22 )/25 (/28 e.Argument/26 )/29 (/32 e.DynamicMatches/30 )/33 (/36 e.History/34 )/37 (/40 e.StaticMatches/38 )/41 (/44 e.GenStaticMatches/42 )/45 e.SpecPatternVars/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Calls as range 5
  // closed e.Name as range 9
  // closed e.SpecPattern as range 13
  // closed e.Body as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  context[42] = 0;
  context[43] = 0;
  context[44] = refalrts::brackets_left( context[42], context[43], context[2], context[3] );
  if( ! context[44] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[44], context[45]);
  // closed e.Signatures as range 22
  // closed e.Argument as range 26
  // closed e.DynamicMatches as range 30
  // closed e.History as range 34
  // closed e.StaticMatches as range 38
  // closed e.GenStaticMatches as range 42
  // closed e.SpecPatternVars as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.Name: 9
  //DEBUG: e.SpecPattern: 13
  //DEBUG: e.Body: 17
  //DEBUG: s.NextNumber: 21
  //DEBUG: e.Signatures: 22
  //DEBUG: e.Argument: 26
  //DEBUG: e.DynamicMatches: 30
  //DEBUG: e.History: 34
  //DEBUG: e.StaticMatches: 38
  //DEBUG: e.GenStaticMatches: 42
  //DEBUG: e.SpecPatternVars: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeGeneralization=5/4 AsIs: (/7 AsIs: e.Calls/5 AsIs: )/8 AsIs: (/11 AsIs: e.Name/9 AsIs: )/12 AsIs: (/15 AsIs: e.SpecPattern/13 AsIs: )/16 AsIs: (/19 AsIs: e.Body/17 AsIs: )/20 AsIs: s.NextNumber/21 AsIs: (/24 AsIs: e.Signatures/22 AsIs: )/25 AsIs: (/28 AsIs: e.Argument/26 AsIs: )/29 AsIs: (/32 AsIs: e.DynamicMatches/30 AsIs: )/33 AsIs: (/36 AsIs: e.History/34 AsIs: )/37 AsIs: (/40 AsIs: e.StaticMatches/38 AsIs: )/41 HalfReuse: </44 } & GetSignaturesGeneralizationMatches/46 (/47 Tile{ AsIs: e.SpecPatternVars/2 } Tile{ AsIs: )/45 } Tile{ AsIs: e.GenStaticMatches/42 } >/48 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[46], functions[efunc_GetSignaturesGeneralizationMatches]);
  refalrts::alloc_open_bracket(vm, context[47]);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeGeneralization_A5]);
  refalrts::reinit_open_call(context[44]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[44] );
  refalrts::link_brackets( context[47], context[45] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[48] );
  res = refalrts::splice_evar( res, context[42], context[43] );
  res = refalrts::splice_elem( res, context[45] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[46], context[47] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A4("MakeGeneralization=4", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A4);


static refalrts::FnResult func_gen_MakeGeneralization_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & MakeGeneralization=3/4 (/7 e.Calls/5 )/8 (/11 e.Name/9 )/12 (/15 e.SpecPattern/13 )/16 (/19 e.Body/17 )/20 s.NextNumber/21 (/24 e.Signatures/22 )/25 (/28 e.Argument/26 )/29 (/32 e.DynamicMatches/30 )/33 (/36 e.History/34 )/37 (/40 e.StaticMatches/38 )/41 e.GenStaticMatches/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Calls as range 5
  // closed e.Name as range 9
  // closed e.SpecPattern as range 13
  // closed e.Body as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  // closed e.Signatures as range 22
  // closed e.Argument as range 26
  // closed e.DynamicMatches as range 30
  // closed e.History as range 34
  // closed e.StaticMatches as range 38
  // closed e.GenStaticMatches as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.Name: 9
  //DEBUG: e.SpecPattern: 13
  //DEBUG: e.Body: 17
  //DEBUG: s.NextNumber: 21
  //DEBUG: e.Signatures: 22
  //DEBUG: e.Argument: 26
  //DEBUG: e.DynamicMatches: 30
  //DEBUG: e.History: 34
  //DEBUG: e.StaticMatches: 38
  //DEBUG: e.GenStaticMatches: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeGeneralization=4/4 AsIs: (/7 AsIs: e.Calls/5 AsIs: )/8 AsIs: (/11 AsIs: e.Name/9 AsIs: )/12 AsIs: (/15 AsIs: e.SpecPattern/13 AsIs: )/16 AsIs: (/19 AsIs: e.Body/17 AsIs: )/20 AsIs: s.NextNumber/21 AsIs: (/24 AsIs: e.Signatures/22 AsIs: )/25 AsIs: (/28 AsIs: e.Argument/26 AsIs: )/29 AsIs: (/32 AsIs: e.DynamicMatches/30 AsIs: )/33 AsIs: (/36 AsIs: e.History/34 AsIs: )/37 AsIs: (/40 AsIs: e.StaticMatches/38 AsIs: )/41 } (/42 Tile{ AsIs: e.GenStaticMatches/2 } )/43 </44 & ExtractVariables-Expr/45 e.SpecPattern/13/46 >/48 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[42]);
  refalrts::alloc_close_bracket(vm, context[43]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_name(vm, context[45], functions[efunc_ExtractVariablesm_Expr]);
  refalrts::copy_evar(vm, context[46], context[47], context[13], context[14]);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeGeneralization_A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[44] );
  refalrts::link_brackets( context[42], context[43] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[43], context[48] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[42] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A3("MakeGeneralization=3", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A3);


static refalrts::FnResult func_gen_MakeGeneralization_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & MakeGeneralization=2/4 (/7 e.Calls/5 )/8 (/11 e.Name/9 )/12 (/15 e.SpecPattern/13 )/16 (/19 e.Body/17 )/20 s.NextNumber/21 (/24 e.Signatures/22 )/25 (/28 e.Argument/26 )/29 (/32 e.DynamicMatches/30 )/33 (/36 e.History/34 )/37 (/40 e.StaticMatches/38 )/41 (/44 e.GenSignature/42 )/45 e.ArgumentVars/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Calls as range 5
  // closed e.Name as range 9
  // closed e.SpecPattern as range 13
  // closed e.Body as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  context[42] = 0;
  context[43] = 0;
  context[44] = refalrts::brackets_left( context[42], context[43], context[2], context[3] );
  if( ! context[44] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[44], context[45]);
  // closed e.Signatures as range 22
  // closed e.Argument as range 26
  // closed e.DynamicMatches as range 30
  // closed e.History as range 34
  // closed e.StaticMatches as range 38
  // closed e.GenSignature as range 42
  // closed e.ArgumentVars as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.Name: 9
  //DEBUG: e.SpecPattern: 13
  //DEBUG: e.Body: 17
  //DEBUG: s.NextNumber: 21
  //DEBUG: e.Signatures: 22
  //DEBUG: e.Argument: 26
  //DEBUG: e.DynamicMatches: 30
  //DEBUG: e.History: 34
  //DEBUG: e.StaticMatches: 38
  //DEBUG: e.GenSignature: 42
  //DEBUG: e.ArgumentVars: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeGeneralization=3/4 AsIs: (/7 AsIs: e.Calls/5 AsIs: )/8 AsIs: (/11 AsIs: e.Name/9 AsIs: )/12 AsIs: (/15 AsIs: e.SpecPattern/13 AsIs: )/16 AsIs: (/19 AsIs: e.Body/17 AsIs: )/20 AsIs: s.NextNumber/21 AsIs: (/24 AsIs: e.Signatures/22 AsIs: )/25 AsIs: (/28 AsIs: e.Argument/26 AsIs: )/29 AsIs: (/32 AsIs: e.DynamicMatches/30 AsIs: )/33 AsIs: (/36 AsIs: e.History/34 AsIs: )/37 AsIs: (/40 AsIs: e.StaticMatches/38 AsIs: )/41 HalfReuse: </44 } & NameSignatureVars=1/46 </47 & DoMapAccum@15/48 (/49 Tile{ AsIs: e.ArgumentVars/2 } Tile{ AsIs: )/45 } (/50 )/51 Tile{ AsIs: e.GenSignature/42 } >/52 >/53 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[46], functions[efunc_gen_NameSignatureVars_A1]);
  refalrts::alloc_open_call(vm, context[47]);
  refalrts::alloc_name(vm, context[48], functions[efunc_gen_DoMapAccum_Z15]);
  refalrts::alloc_open_bracket(vm, context[49]);
  refalrts::alloc_open_bracket(vm, context[50]);
  refalrts::alloc_close_bracket(vm, context[51]);
  refalrts::alloc_close_call(vm, context[52]);
  refalrts::alloc_close_call(vm, context[53]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeGeneralization_A3]);
  refalrts::reinit_open_call(context[44]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[53] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[52] );
  refalrts::push_stack( vm, context[47] );
  refalrts::link_brackets( context[50], context[51] );
  refalrts::link_brackets( context[49], context[45] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[52], context[53] );
  res = refalrts::splice_evar( res, context[42], context[43] );
  res = refalrts::splice_evar( res, context[50], context[51] );
  res = refalrts::splice_elem( res, context[45] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[46], context[49] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A2("MakeGeneralization=2", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A2);


static refalrts::FnResult func_gen_MakeGeneralization_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & MakeGeneralization=1/4 (/7 e.Calls/5 )/8 (/11 e.Name/9 )/12 (/15 e.SpecPattern/13 )/16 (/19 e.Body/17 )/20 s.NextNumber/21 (/24 e.Signatures/22 )/25 (/28 e.Argument/26 )/29 (/32 e.DynamicMatches/30 )/33 (/36 e.History/34 )/37 (/40 e.StaticMatches/38 )/41 e.GenSignature/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Calls as range 5
  // closed e.Name as range 9
  // closed e.SpecPattern as range 13
  // closed e.Body as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = 0;
  context[39] = 0;
  context[40] = refalrts::brackets_left( context[38], context[39], context[2], context[3] );
  if( ! context[40] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[40], context[41]);
  // closed e.Signatures as range 22
  // closed e.Argument as range 26
  // closed e.DynamicMatches as range 30
  // closed e.History as range 34
  // closed e.StaticMatches as range 38
  // closed e.GenSignature as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.Name: 9
  //DEBUG: e.SpecPattern: 13
  //DEBUG: e.Body: 17
  //DEBUG: s.NextNumber: 21
  //DEBUG: e.Signatures: 22
  //DEBUG: e.Argument: 26
  //DEBUG: e.DynamicMatches: 30
  //DEBUG: e.History: 34
  //DEBUG: e.StaticMatches: 38
  //DEBUG: e.GenSignature: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeGeneralization=2/4 AsIs: (/7 AsIs: e.Calls/5 AsIs: )/8 AsIs: (/11 AsIs: e.Name/9 AsIs: )/12 AsIs: (/15 AsIs: e.SpecPattern/13 AsIs: )/16 AsIs: (/19 AsIs: e.Body/17 AsIs: )/20 AsIs: s.NextNumber/21 AsIs: (/24 AsIs: e.Signatures/22 AsIs: )/25 AsIs: (/28 AsIs: e.Argument/26 AsIs: )/29 AsIs: (/32 AsIs: e.DynamicMatches/30 AsIs: )/33 AsIs: (/36 AsIs: e.History/34 AsIs: )/37 AsIs: (/40 AsIs: e.StaticMatches/38 AsIs: )/41 } (/42 Tile{ AsIs: e.GenSignature/2 } )/43 </44 & ExtractVariables-Expr/45 e.Argument/26/46 >/48 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[42]);
  refalrts::alloc_close_bracket(vm, context[43]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_name(vm, context[45], functions[efunc_ExtractVariablesm_Expr]);
  refalrts::copy_evar(vm, context[46], context[47], context[26], context[27]);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeGeneralization_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[44] );
  refalrts::link_brackets( context[42], context[43] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[43], context[48] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[42] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeGeneralization_A1("MakeGeneralization=1", COOKIE1_, COOKIE2_, func_gen_MakeGeneralization_A1);


static refalrts::FnResult func_MakeGeneralization(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & MakeGeneralization/4 (/7 e.Signature/5 )/8 (/11 e.HistorySignature/9 )/12 (/15 e.Argument/13 )/16 (/19 e.SpecPattern/17 )/20 (/23 e.StaticMatches/21 )/24 (/27 e.Name/25 )/28 (/31 e.Body/29 )/32 s.NextNumber/49 (/47 e.Signatures/45 )/48 (/43 e.DynamicMatches/41 )/44 (/39 e.History/37 )/40 (/35 e.Calls/33 )/36 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_right( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  context[37] = 0;
  context[38] = 0;
  context[39] = refalrts::brackets_right( context[37], context[38], context[2], context[3] );
  if( ! context[39] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[39], context[40]);
  context[41] = 0;
  context[42] = 0;
  context[43] = refalrts::brackets_right( context[41], context[42], context[2], context[3] );
  if( ! context[43] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[43], context[44]);
  context[45] = 0;
  context[46] = 0;
  context[47] = refalrts::brackets_right( context[45], context[46], context[2], context[3] );
  if( ! context[47] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[47], context[48]);
  // closed e.Signature as range 5
  // closed e.HistorySignature as range 9
  // closed e.Argument as range 13
  // closed e.SpecPattern as range 17
  // closed e.StaticMatches as range 21
  // closed e.Name as range 25
  // closed e.Body as range 29
  // closed e.Signatures as range 45
  // closed e.DynamicMatches as range 41
  // closed e.History as range 37
  // closed e.Calls as range 33
  if( ! refalrts::svar_left( context[49], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Signature: 5
  //DEBUG: e.HistorySignature: 9
  //DEBUG: e.Argument: 13
  //DEBUG: e.SpecPattern: 17
  //DEBUG: e.StaticMatches: 21
  //DEBUG: e.Name: 25
  //DEBUG: e.Body: 29
  //DEBUG: e.Signatures: 45
  //DEBUG: e.DynamicMatches: 41
  //DEBUG: e.History: 37
  //DEBUG: e.Calls: 33
  //DEBUG: s.NextNumber: 49

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 } Tile{ HalfReuse: & MakeGeneralization=1/12 AsIs: (/15 } Tile{ AsIs: e.Calls/33 } Tile{ AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.Name/25 } Tile{ AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.SpecPattern/17 } Tile{ AsIs: )/28 AsIs: (/31 AsIs: e.Body/29 AsIs: )/32 AsIs: s.NextNumber/49 AsIs: (/47 AsIs: e.Signatures/45 AsIs: )/48 AsIs: (/43 } Tile{ AsIs: e.Argument/13 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.DynamicMatches/41 } Tile{ AsIs: )/44 AsIs: (/39 AsIs: e.History/37 AsIs: )/40 AsIs: (/35 } Tile{ AsIs: e.StaticMatches/21 } )/50 Tile{ AsIs: </0 Reuse: & GetSignaturesGeneralization/4 AsIs: (/7 AsIs: e.Signature/5 AsIs: )/8 } Tile{ AsIs: e.HistorySignature/9 } Tile{ HalfReuse: >/36 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[50]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_name(context[12], functions[efunc_gen_MakeGeneralization_A1]);
  refalrts::update_name(context[4], functions[efunc_GetSignaturesGeneralization]);
  refalrts::reinit_close_call(context[36]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[35], context[50] );
  refalrts::link_brackets( context[39], context[40] );
  refalrts::link_brackets( context[19], context[44] );
  refalrts::link_brackets( context[43], context[16] );
  refalrts::link_brackets( context[47], context[48] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[23], context[28] );
  refalrts::link_brackets( context[27], context[20] );
  refalrts::link_brackets( context[15], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[36];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[50] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[44], context[35] );
  res = refalrts::splice_evar( res, context[41], context[42] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[28], context[43] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeGeneralization("MakeGeneralization", COOKIE1_, COOKIE2_, func_MakeGeneralization);


static refalrts::FnResult func_gen_NameSignatureVars_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & NameSignatureVars=1/4 (/7 e.KnownVars$a/5 )/8 e.Signature$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.KnownVars$a as range 5
  // closed e.Signature$a as range 2
  //DEBUG: e.KnownVars$a: 5
  //DEBUG: e.Signature$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NameSignatureVars=1/4 (/7 e.KnownVars$a/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Signature$a/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameSignatureVars_A1("NameSignatureVars=1", COOKIE1_, COOKIE2_, func_gen_NameSignatureVars_A1);


static refalrts::FnResult func_gen_NameSignatureVars_A1L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & NameSignatureVars=1\1=1/4 (/7 e.KnownVars$b/5 )/8 e.SignaturePart$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.KnownVars$b as range 5
  // closed e.SignaturePart$a as range 2
  //DEBUG: e.KnownVars$b: 5
  //DEBUG: e.SignaturePart$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.KnownVars$b/5 AsIs: )/8 } Tile{ HalfReuse: (/4 } Tile{ AsIs: e.SignaturePart$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameSignatureVars_A1L1A1("NameSignatureVars=1\\1=1", COOKIE1_, COOKIE2_, func_gen_NameSignatureVars_A1L1A1);


static refalrts::FnResult func_NameSignatureVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & NameSignatureVars/4 (/7 e.KnownVars/5 )/8 e.Signature/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.KnownVars as range 5
  // closed e.Signature as range 2
  //DEBUG: e.KnownVars: 5
  //DEBUG: e.Signature: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & NameSignatureVars=1/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@15/4 AsIs: (/7 AsIs: e.KnownVars/5 AsIs: )/8 } (/11 )/12 Tile{ AsIs: e.Signature/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_NameSignatureVars_A1]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameSignatureVars("NameSignatureVars", COOKIE1_, COOKIE2_, func_NameSignatureVars);


static refalrts::FnResult func_NameSignatureVarsm_Expr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & NameSignatureVars-Expr/4 t.State/5 e.Expr/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 2
  //DEBUG: t.State: 5
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@16/4 AsIs: t.State/5 } (/7 )/8 Tile{ AsIs: e.Expr/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameSignatureVarsm_Expr("NameSignatureVars-Expr", COOKIE1_, COOKIE2_, func_NameSignatureVarsm_Expr);


static refalrts::FnResult func_gen_NameSignatureVarsm_Term_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & NameSignatureVars-Term$1=1/4 (/7 e.KnownVars$a/5 )/8 e.Index/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.KnownVars$a as range 5
  // closed e.Index as range 2
  //DEBUG: e.KnownVars$a: 5
  //DEBUG: e.Index: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.KnownVars$a/5 AsIs: )/8 } Tile{ HalfReuse: (/0 HalfReuse: # Var/4 } Tile{ AsIs: e.Index/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Var]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameSignatureVarsm_Term_S1A1("NameSignatureVars-Term$1=1", COOKIE1_, COOKIE2_, func_gen_NameSignatureVarsm_Term_S1A1);


static refalrts::FnResult func_gen_NameSignatureVarsm_Term_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & NameSignatureVars-Term$2=2/4 s.BracketsTag/5 t.State$a/6 e.Expr$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr$a as range 2
  //DEBUG: s.BracketsTag: 5
  //DEBUG: t.State$a: 6
  //DEBUG: e.Expr$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.State$a/6 } Tile{ HalfReuse: (/4 AsIs: s.BracketsTag/5 } Tile{ AsIs: e.Expr$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[4], context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameSignatureVarsm_Term_S2A2("NameSignatureVars-Term$2=2", COOKIE1_, COOKIE2_, func_gen_NameSignatureVarsm_Term_S2A2);


static refalrts::FnResult func_gen_NameSignatureVarsm_Term_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & NameSignatureVars-Term$3=1/4 (/7 e.Name/5 )/8 t.State$a/9 e.Expr$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Name as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr$a as range 2
  //DEBUG: e.Name: 5
  //DEBUG: t.State$a: 9
  //DEBUG: e.Expr$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.State$a/9 } Tile{ HalfReuse: (/0 HalfReuse: # ADT-Brackets/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 } Tile{ AsIs: e.Expr$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_ADTm_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameSignatureVarsm_Term_S3A1("NameSignatureVars-Term$3=1", COOKIE1_, COOKIE2_, func_gen_NameSignatureVarsm_Term_S3A1);


static refalrts::FnResult func_NameSignatureVarsm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & NameSignatureVars-Term/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & NameSignatureVars-Term/4 t.new1/5 t.new2/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & NameSignatureVars-Term/4 t.new3/5 (/7 s.new4/11 e.new5/9 )/8 >/1
    context[9] = 0;
    context[10] = 0;
    if( ! refalrts::brackets_term( context[9], context[10], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
      continue;
    // closed e.new5 as range 9
    do {
      // </0 & NameSignatureVars-Term/4 (/5 e.KnownVars/14 )/6 (/7 # Var/11 s.Mode/16 )/8 >/1
      context[12] = context[9];
      context[13] = context[10];
      context[14] = 0;
      context[15] = 0;
      if( ! refalrts::brackets_term( context[14], context[15], context[5] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Var], context[11] ) )
        continue;
      // closed e.KnownVars as range 14
      if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
        continue;
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      //DEBUG: e.KnownVars: 14
      //DEBUG: s.Mode: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Mode/16 {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & NameSignatureVars-Term$1=1/18 Tile{ AsIs: </0 Reuse: & NewVarName/4 AsIs: (/5 AsIs: e.KnownVars/14 AsIs: )/6 HalfReuse: s.Mode16 /7 HalfReuse: 'X'/11 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_NameSignatureVarsm_Term_S1A1]);
      refalrts::update_name(context[4], functions[efunc_NewVarName]);
      refalrts::reinit_svar( context[7], context[16] );
      refalrts::reinit_char(context[11], 'X');
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NameSignatureVars-Term/4 t.State/5 (/7 s.BracketsTag/11 e.Expr/12 )/8 >/1
      context[12] = context[9];
      context[13] = context[10];
      // closed e.Expr as range 12
      //DEBUG: t.State: 5
      //DEBUG: s.BracketsTag: 11
      //DEBUG: e.Expr: 12
      //5: t.State
      //11: s.BracketsTag
      //12: e.Expr
      //19: s.BracketsTag

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[16], functions[efunc_gen_NameSignatureVarsm_Term_S2C1]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_OneOf]);
      refalrts::copy_stvar(vm, context[19], context[11]);
      refalrts::alloc_ident(vm, context[20], identifiers[ident_CallBrackets]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_ClosureBrackets]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Brackets]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_stvar( res, context[19] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[14] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </14 & NameSignatureVars-Term$2?1/18 # True/19 >/15
        context[16] = 0;
        context[17] = 0;
        context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
        context[19] = refalrts::ident_left( identifiers[ident_True], context[16], context[17] );
        if( ! context[19] )
          continue;
        if( ! refalrts::empty_seq( context[16], context[17] ) )
          continue;
        //DEBUG: t.State: 5
        //DEBUG: s.BracketsTag: 11
        //DEBUG: e.Expr: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 s.BracketsTag/11 {REMOVED TILE} {REMOVED TILE} # True/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & NameSignatureVars-Term$2=2/4 } Tile{ HalfReuse: s.BracketsTag11 /8 AsIs: </14 Reuse: & NameSignatureVars-Expr/18 } Tile{ AsIs: t.State/5 } Tile{ AsIs: e.Expr/12 } Tile{ AsIs: >/15 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_NameSignatureVarsm_Term_S2A2]);
        refalrts::reinit_svar( context[8], context[11] );
        refalrts::update_name(context[18], functions[efunc_NameSignatureVarsm_Expr]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[8], context[18] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[14], context[15]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NameSignatureVars-Term/4 t.State/5 (/7 # ADT-Brackets/11 (/16 e.Name/14 )/17 e.Expr/12 )/8 >/1
    context[12] = context[9];
    context[13] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[11] ) )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.Name as range 14
    // closed e.Expr as range 12
    //DEBUG: t.State: 5
    //DEBUG: e.Name: 14
    //DEBUG: e.Expr: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </18 Tile{ HalfReuse: & NameSignatureVars-Term$3=1/11 AsIs: (/16 } Tile{ AsIs: e.Name/14 } )/19 Tile{ AsIs: </0 Reuse: & DoMapAccum@16/4 AsIs: t.State/5 AsIs: (/7 } Tile{ AsIs: )/17 AsIs: e.Expr/12 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::reinit_name(context[11], functions[efunc_gen_NameSignatureVarsm_Term_S3A1]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[17] );
    refalrts::link_brackets( context[16], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[11], context[16] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameSignatureVars-Term/4 t.State/5 t.OtherTerm/7 >/1
  //DEBUG: t.State: 5
  //DEBUG: t.OtherTerm: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NameSignatureVars-Term/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.State/5 AsIs: t.OtherTerm/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameSignatureVarsm_Term("NameSignatureVars-Term", COOKIE1_, COOKIE2_, func_NameSignatureVarsm_Term);


static refalrts::FnResult func_GetSignaturesGeneralization(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & GetSignaturesGeneralization/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GetSignaturesGeneralization/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & GetSignaturesGeneralization/4 (/7 t.Sig1-StaticVarPart/13 e.Sig1-Rest/9 )/8 t.Sig2-StaticVarPart/15 e.Sig2-Rest/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[14] = refalrts::tvar_left( context[13], context[9], context[10] );
    if( ! context[14] )
      continue;
    // closed e.Sig1-Rest as range 9
    context[16] = refalrts::tvar_left( context[15], context[11], context[12] );
    if( ! context[16] )
      continue;
    // closed e.Sig2-Rest as range 11
    //DEBUG: t.Sig1-StaticVarPart: 13
    //DEBUG: e.Sig1-Rest: 9
    //DEBUG: t.Sig2-StaticVarPart: 15
    //DEBUG: e.Sig2-Rest: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: </4 HalfReuse: & GlobalGen/7 AsIs: t.Sig1-StaticVarPart/13 } Tile{ AsIs: t.Sig2-StaticVarPart/15 } >/17 Tile{ AsIs: )/8 } </18 & GetSignaturesGeneralization/19 (/20 Tile{ AsIs: e.Sig1-Rest/9 } )/21 Tile{ AsIs: e.Sig2-Rest/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_GetSignaturesGeneralization]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_GlobalGen]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GetSignaturesGeneralization/4 (/7 )/8 >/1
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & GetSignaturesGeneralization/4 (/7 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GetSignaturesGeneralization("GetSignaturesGeneralization", COOKIE1_, COOKIE2_, func_GetSignaturesGeneralization);


static refalrts::FnResult func_gen_GetSignaturesGeneralizationMatches_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & GetSignaturesGeneralizationMatches$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GetSignaturesGeneralizationMatches$1:1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 s.new5/19 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & GetSignaturesGeneralizationMatches$1:1/4 t.Var/5 (/9 e.GenSignature-First/20 )/10 (/13 e.Vars/22 )/14 (/17 e.GenSignature-E/24 )/18 # True/19 >/1
    context[20] = context[7];
    context[21] = context[8];
    context[22] = context[11];
    context[23] = context[12];
    context[24] = context[15];
    context[25] = context[16];
    if( ! refalrts::ident_term( identifiers[ident_True], context[19] ) )
      continue;
    // closed e.GenSignature-First as range 20
    // closed e.Vars as range 22
    // closed e.GenSignature-E as range 24
    //DEBUG: t.Var: 5
    //DEBUG: e.GenSignature-First: 20
    //DEBUG: e.Vars: 22
    //DEBUG: e.GenSignature-E: 24
    //5: t.Var
    //20: e.GenSignature-First
    //22: e.Vars
    //24: e.GenSignature-E
    //29: t.Var

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[28], functions[efunc_gen_GetSignaturesGeneralizationMatches_S1B1S1C1]);
    refalrts::copy_stvar(vm, context[29], context[5]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[26] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_stvar( res, context[29] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_elem( res, context[26] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </26 & GetSignaturesGeneralizationMatches$1:1$1?1/30 (/33 e.VarInner/31 )/34 >/27
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::call_left( context[28], context[29], context[26], context[27] );
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_left( context[31], context[32], context[28], context[29] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      if( ! refalrts::empty_seq( context[28], context[29] ) )
        continue;
      // closed e.VarInner as range 31
      //DEBUG: t.Var: 5
      //DEBUG: e.GenSignature-First: 20
      //DEBUG: e.Vars: 22
      //DEBUG: e.GenSignature-E: 24
      //DEBUG: e.VarInner: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & GetSignaturesGeneralizationMatches$1:1/4 t.Var/5 {REMOVED TILE} {REMOVED TILE} )/14 (/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.GenSignature-First/20 HalfReuse: ':'/10 AsIs: (/13 } Tile{ HalfReuse: # Var/27 } Tile{ AsIs: e.VarInner/31 } Tile{ AsIs: )/18 HalfReuse: )/19 AsIs: </26 Reuse: & GetSignaturesGeneralizationMatches/30 AsIs: (/33 } Tile{ AsIs: e.Vars/22 } Tile{ AsIs: )/34 } Tile{ AsIs: e.GenSignature-E/24 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_char(context[10], ':');
      refalrts::reinit_ident(context[27], identifiers[ident_Var]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::update_name(context[30], functions[efunc_GetSignaturesGeneralizationMatches]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[9], context[19] );
      refalrts::link_brackets( context[13], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[18], context[33] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[26], context[27]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GetSignaturesGeneralizationMatches$1:1/4 t.Var/5 (/9 e.GenSignature-First/7 )/10 (/13 e.Vars/11 )/14 (/17 e.GenSignature-E/15 )/18 # False/19 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[19] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.GenSignature-First as range 7
  // closed e.Vars as range 11
  // closed e.GenSignature-E as range 15
  //DEBUG: t.Var: 5
  //DEBUG: e.GenSignature-First: 7
  //DEBUG: e.Vars: 11
  //DEBUG: e.GenSignature-E: 15

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & GetSignaturesGeneralizationMatches$1:1/4 t.Var/5 (/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # False/19 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & GetSignaturesGeneralizationMatches/10 AsIs: (/13 AsIs: e.Vars/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.GenSignature-First/7 } Tile{ AsIs: )/18 } Tile{ AsIs: e.GenSignature-E/15 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_name(context[10], functions[efunc_GetSignaturesGeneralizationMatches]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[10], context[17] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GetSignaturesGeneralizationMatches_S1B1("GetSignaturesGeneralizationMatches$1:1", COOKIE1_, COOKIE2_, func_gen_GetSignaturesGeneralizationMatches_S1B1);


static refalrts::FnResult func_GetSignaturesGeneralizationMatches(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & GetSignaturesGeneralizationMatches/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & GetSignaturesGeneralizationMatches/4 (/9 t.new1/15 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    // closed e.new3 as range 11
    // closed e.new4 as range 5
    context[16] = refalrts::tvar_left( context[15], context[7], context[8] );
    if( ! context[16] )
      continue;
    // closed e.new2 as range 7
    do {
      // </0 & GetSignaturesGeneralizationMatches/4 (/9 (/15 s.Mode/25 s.FirstSymbol/26 e.1/23 )/16 e.Vars/17 )/10 (/13 e.GenSignature-First/19 )/14 e.GenSignature-E/21 >/1
      context[17] = context[7];
      context[18] = context[8];
      context[19] = context[11];
      context[20] = context[12];
      context[21] = context[5];
      context[22] = context[6];
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e.Vars as range 17
      // closed e.GenSignature-First as range 19
      // closed e.GenSignature-E as range 21
      if( ! refalrts::svar_left( context[25], context[23], context[24] ) )
        continue;
      if( ! refalrts::svar_left( context[26], context[23], context[24] ) )
        continue;
      // closed e.1 as range 23
      //DEBUG: e.Vars: 17
      //DEBUG: e.GenSignature-First: 19
      //DEBUG: e.GenSignature-E: 21
      //DEBUG: s.Mode: 25
      //DEBUG: s.FirstSymbol: 26
      //DEBUG: e.1: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & GetSignaturesGeneralizationMatches$1:1@1/4 HalfReuse: s.Mode25 /9 HalfReuse: s.FirstSymbol26 /15 } (/27 Tile{ AsIs: e.1/23 } Tile{ AsIs: )/10 AsIs: (/13 AsIs: e.GenSignature-First/19 AsIs: )/14 } (/28 Tile{ AsIs: e.Vars/17 } Tile{ AsIs: )/16 } (/29 Tile{ AsIs: e.GenSignature-E/21 } )/30 </31 & IsSpecStaticVar:1/32 </33 & Type/34 Tile{ AsIs: s.FirstSymbol/26 } >/35 >/36 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_IsSpecStaticVar_B1]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::update_name(context[4], functions[efunc_gen_GetSignaturesGeneralizationMatches_S1B1Z1]);
      refalrts::reinit_svar( context[9], context[25] );
      refalrts::reinit_svar( context[15], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[33] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[28], context[16] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[27], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[30], context[34] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[10], context[14] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::splice_to_freelist_open( vm, context[15], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GetSignaturesGeneralizationMatches/4 (/9 t.Var/15 e.Vars/17 )/10 (/13 e.GenSignature-First/19 )/14 e.GenSignature-E/21 >/1
    context[17] = context[7];
    context[18] = context[8];
    context[19] = context[11];
    context[20] = context[12];
    context[21] = context[5];
    context[22] = context[6];
    // closed e.Vars as range 17
    // closed e.GenSignature-First as range 19
    // closed e.GenSignature-E as range 21
    //DEBUG: t.Var: 15
    //DEBUG: e.Vars: 17
    //DEBUG: e.GenSignature-First: 19
    //DEBUG: e.GenSignature-E: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GetSignaturesGeneralizationMatches$1:1/4 } t.Var/15/23 Tile{ AsIs: (/13 AsIs: e.GenSignature-First/19 AsIs: )/14 } (/25 Tile{ AsIs: e.Vars/17 } Tile{ AsIs: )/10 } (/26 Tile{ AsIs: e.GenSignature-E/21 } )/27 </28 Tile{ HalfReuse: & IsSpecStaticVar*1/9 AsIs: t.Var/15 } >/29 Tile{ AsIs: >/1 ]] }
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_gen_GetSignaturesGeneralizationMatches_S1B1]);
    refalrts::reinit_name(context[9], functions[efunc_gen_IsSpecStaticVar_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[25], context[10] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[9], context[16] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GetSignaturesGeneralizationMatches/4 e.OtherExpr/2 >/1
  // closed e.OtherExpr as range 2
  //DEBUG: e.OtherExpr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & GetSignaturesGeneralizationMatches/4 e.OtherExpr/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GetSignaturesGeneralizationMatches("GetSignaturesGeneralizationMatches", COOKIE1_, COOKIE2_, func_GetSignaturesGeneralizationMatches);


static refalrts::FnResult func_gen_GetRealSubst_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & GetRealSubst$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GetRealSubst$1:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & GetRealSubst$1:1/4 (/7 e.StaticMatches-B/21 )/8 (/11 e.StaticMatches-E/23 )/12 (/15 e.GenStaticMatches-B/25 )/16 (/19 e.GenStaticMatches-E/27 )/20 # Clear/31 e.Expr/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    context[31] = refalrts::ident_left( identifiers[ident_Clear], context[29], context[30] );
    if( ! context[31] )
      continue;
    // closed e.StaticMatches-B as range 21
    // closed e.StaticMatches-E as range 23
    // closed e.GenStaticMatches-B as range 25
    // closed e.GenStaticMatches-E as range 27
    // closed e.Expr as range 29
    //DEBUG: e.StaticMatches-B: 21
    //DEBUG: e.StaticMatches-E: 23
    //DEBUG: e.GenStaticMatches-B: 25
    //DEBUG: e.GenStaticMatches-E: 27
    //DEBUG: e.Expr: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Clear/31 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/29 } Tile{ AsIs: </0 Reuse: & GetRealSubst/4 AsIs: (/7 } Tile{ AsIs: e.StaticMatches-B/21 } Tile{ AsIs: e.StaticMatches-E/23 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.GenStaticMatches-B/25 } Tile{ AsIs: e.GenStaticMatches-E/27 } Tile{ AsIs: )/20 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_GetRealSubst]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[7], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GetRealSubst$1:1/4 (/7 e.StaticMatches-B/5 )/8 (/11 e.StaticMatches-E/9 )/12 (/15 e.GenStaticMatches-B/13 )/16 (/19 e.GenStaticMatches-E/17 )/20 e.Other/2 >/1
  // closed e.StaticMatches-B as range 5
  // closed e.StaticMatches-E as range 9
  // closed e.GenStaticMatches-B as range 13
  // closed e.GenStaticMatches-E as range 17
  // closed e.Other as range 2
  //DEBUG: e.StaticMatches-B: 5
  //DEBUG: e.StaticMatches-E: 9
  //DEBUG: e.GenStaticMatches-B: 13
  //DEBUG: e.GenStaticMatches-E: 17
  //DEBUG: e.Other: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/16 (/19 {REMOVED TILE} {REMOVED TILE} e.Other/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GetRealSubst/4 AsIs: (/7 } Tile{ AsIs: e.StaticMatches-B/5 } Tile{ AsIs: e.StaticMatches-E/9 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.GenStaticMatches-B/13 } Tile{ AsIs: e.GenStaticMatches-E/17 } Tile{ AsIs: )/20 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_GetRealSubst]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[20] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GetRealSubst_S1B1("GetRealSubst$1:1", COOKIE1_, COOKIE2_, func_gen_GetRealSubst_S1B1);


static refalrts::FnResult func_GetRealSubst(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & GetRealSubst/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & GetRealSubst/4 (/9 e.StaticMatches-B/15 (/23 e.Val1/21 ':'/30 (/27 # Var/29 e.Var/25 )/28 )/24 e.StaticMatches-E/17 )/10 (/13 e.GenStaticMatches-B/31 (/37 e.Val2/35 ':'/44 (/41 # Var/43 e.Var/45 )/42 )/38 e.GenStaticMatches-E/33 )/14 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[17] = context[7];
      context[18] = context[8];
      context[19] = context[11];
      context[20] = context[12];
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[17], context[18] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_right( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Var], context[25], context[26] );
      if( ! context[29] )
        continue;
      context[30] = refalrts::char_right( ':', context[21], context[22] );
      if( ! context[30] )
        continue;
      // closed e.Val1 as range 21
      // closed e.Var as range 25
      // closed e.StaticMatches-E as range 17
      context[31] = 0;
      context[32] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[33] = context[19];
        context[34] = context[20];
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_right( context[39], context[40], context[35], context[36] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        context[43] = refalrts::ident_left( identifiers[ident_Var], context[39], context[40] );
        if( ! context[43] )
          continue;
        context[44] = refalrts::char_right( ':', context[35], context[36] );
        if( ! context[44] )
          continue;
        if( ! refalrts::repeated_evar_left( vm, context[45], context[46], context[25], context[26], context[39], context[40] ) )
          continue;
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        // closed e.Val2 as range 35
        // closed e.GenStaticMatches-E as range 33
        //DEBUG: e.StaticMatches-B: 15
        //DEBUG: e.Val1: 21
        //DEBUG: e.Var: 25
        //DEBUG: e.StaticMatches-E: 17
        //DEBUG: e.GenStaticMatches-B: 31
        //DEBUG: e.Val2: 35
        //DEBUG: e.GenStaticMatches-E: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Var/29 e.Var/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Var/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & GetRealSubst$1:1/4 AsIs: (/9 } Tile{ AsIs: e.StaticMatches-B/15 } Tile{ AsIs: )/28 HalfReuse: (/24 AsIs: e.StaticMatches-E/17 AsIs: )/10 AsIs: (/13 AsIs: e.GenStaticMatches-B/31 HalfReuse: )/37 } Tile{ HalfReuse: (/38 AsIs: e.GenStaticMatches-E/33 AsIs: )/14 HalfReuse: </1 } Tile{ HalfReuse: & GenericMatch/43 } Tile{ AsIs: (/23 AsIs: e.Val1/21 HalfReuse: )/30 AsIs: (/27 } Tile{ AsIs: e.Val2/35 } Tile{ AsIs: )/42 } Tile{ HalfReuse: >/44 HalfReuse: >/41 } Tile{ ]] }
        refalrts::update_name(context[4], functions[efunc_gen_GetRealSubst_S1B1]);
        refalrts::reinit_open_bracket(context[24]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::reinit_open_bracket(context[38]);
        refalrts::reinit_open_call(context[1]);
        refalrts::reinit_name(context[43], functions[efunc_GenericMatch]);
        refalrts::reinit_close_bracket(context[30]);
        refalrts::reinit_close_call(context[44]);
        refalrts::reinit_close_call(context[41]);
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[1] );
        refalrts::link_brackets( context[27], context[42] );
        refalrts::link_brackets( context[23], context[30] );
        refalrts::link_brackets( context[38], context[14] );
        refalrts::link_brackets( context[13], context[37] );
        refalrts::link_brackets( context[24], context[10] );
        refalrts::link_brackets( context[9], context[28] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[44], context[41] );
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[23], context[27] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[38], context[1] );
        res = refalrts::splice_evar( res, context[28], context[37] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[31], context[32], context[19], context[20] ) );
    } while ( refalrts::open_evar_advance( context[15], context[16], context[7], context[8] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GetRealSubst/4 e.OtherExpr/2 >/1
  // closed e.OtherExpr as range 2
  //DEBUG: e.OtherExpr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & GetRealSubst/4 e.OtherExpr/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GetRealSubst("GetRealSubst", COOKIE1_, COOKIE2_, func_GetRealSubst);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & Map@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@1/4 (/7 s.new3/13 s.new4/14 e.new5/11 )/8 e.new6/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new6 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      // closed e.new5 as range 11
      do {
        // </0 & Map@1/4 (/7 # Function/13 s.ScopeClass/14 (/21 e.3/19 )/22 e.2/15 )/8 e.Tail/17 >/1
        context[15] = context[11];
        context[16] = context[12];
        context[17] = context[9];
        context[18] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Function], context[13] ) )
          continue;
        context[19] = 0;
        context[20] = 0;
        context[21] = refalrts::brackets_left( context[19], context[20], context[15], context[16] );
        if( ! context[21] )
          continue;
        refalrts::bracket_pointers(context[21], context[22]);
        // closed e.3 as range 19
        // closed e.2 as range 15
        // closed e.Tail as range 17
        //DEBUG: s.ScopeClass: 14
        //DEBUG: e.3: 19
        //DEBUG: e.2: 15
        //DEBUG: e.Tail: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass/14 AsIs: (/21 AsIs: e.3/19 AsIs: )/22 AsIs: e.2/15 AsIs: )/8 } (/23 # Function/24 # GN-Local/25 (/26 </27 & AddSuffix/28 e.3/19/29 (/31 '@'/32 0/33 )/34 >/35 )/36 # Sentences/37 )/38 Tile{ AsIs: </0 AsIs: & Map@1/4 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[23]);
        refalrts::alloc_ident(vm, context[24], identifiers[ident_Function]);
        refalrts::alloc_ident(vm, context[25], identifiers[ident_GNm_Local]);
        refalrts::alloc_open_bracket(vm, context[26]);
        refalrts::alloc_open_call(vm, context[27]);
        refalrts::alloc_name(vm, context[28], functions[efunc_AddSuffix]);
        refalrts::copy_evar(vm, context[29], context[30], context[19], context[20]);
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::alloc_char(vm, context[32], '@');
        refalrts::alloc_number(vm, context[33], 0UL);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_close_bracket(vm, context[36]);
        refalrts::alloc_ident(vm, context[37], identifiers[ident_Sentences]);
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[23], context[38] );
        refalrts::link_brackets( context[26], context[36] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[27] );
        refalrts::link_brackets( context[31], context[34] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@1/4 (/7 # Declaration/13 s.ScopeClass/14 e.1/15 )/8 e.Tail/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[9];
      context[18] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Declaration], context[13] ) )
        continue;
      // closed e.1 as range 15
      // closed e.Tail as range 17
      //DEBUG: s.ScopeClass: 14
      //DEBUG: e.1: 15
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Declaration/13 AsIs: s.ScopeClass/14 AsIs: e.1/15 AsIs: )/8 } (/19 # Function/20 # GN-Local/21 (/22 </23 & AddSuffix/24 e.1/15/25 (/27 '@'/28 0/29 )/30 >/31 )/32 # Sentences/33 )/34 Tile{ AsIs: </0 AsIs: & Map@1/4 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_ident(vm, context[20], identifiers[ident_Function]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_GNm_Local]);
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_AddSuffix]);
      refalrts::copy_evar(vm, context[25], context[26], context[15], context[16]);
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_char(vm, context[28], '@');
      refalrts::alloc_number(vm, context[29], 0UL);
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_ident(vm, context[33], identifiers[ident_Sentences]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[34] );
      refalrts::link_brackets( context[22], context[32] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[27], context[30] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[19], context[34] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/7 } Tile{ AsIs: </0 AsIs: & Map@1/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & AddGuardEnums\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_AddGuardEnums_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & Map@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@2/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@2/4 (/7 (/15 e.1/13 )/16 (/19 e.3/17 )/20 (/23 e.5/21 )/24 e.4/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[11], context[12] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[11], context[12] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.1 as range 13
      // closed e.3 as range 17
      // closed e.5 as range 21
      // closed e.4 as range 11
      // closed e.Tail as range 9
      //DEBUG: e.1: 13
      //DEBUG: e.3: 17
      //DEBUG: e.5: 21
      //DEBUG: e.4: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & AddGuardSentences\1=1/7 AsIs: (/15 AsIs: e.1/13 AsIs: )/16 AsIs: (/19 AsIs: e.3/17 AsIs: )/20 AsIs: (/23 AsIs: e.5/21 AsIs: )/24 } (/25 Tile{ AsIs: e.4/11 } )/26 Tile{ AsIs: </0 } & AddSuffix/27 e.1/13/28 (/30 '@'/31 0/32 )/33 >/34 >/35 </36 Tile{ HalfReuse: & Map@2/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_AddSuffix]);
      refalrts::copy_evar(vm, context[28], context[29], context[13], context[14]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_char(vm, context[31], '@');
      refalrts::alloc_number(vm, context[32], 0UL);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_gen_AddGuardSentences_L1A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[30], context[33] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[27], context[36] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[4], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@2/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & AddGuardSentences\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@2/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_gen_AddGuardSentences_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & AddGuardSentences\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_AddGuardSentences_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@3/4 t.Next/7 e.Tail/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail as range 5
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & TrivialHistory=1\1/4 AsIs: t.Next/7 } >/9 </10 & Map@3/11 Tile{ AsIs: e.Tail/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z3]);
    refalrts::update_name(context[4], functions[efunc_gen_TrivialHistory_A1L1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & TrivialHistory=1\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_TrivialHistory_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Map@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@4/4 t.Next/7 e.Tail/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail as range 5
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateRemainderFunctions-OneFunction/4 } 0/9 Tile{ AsIs: t.Next/7 } >/10 </11 & Map@4/12 Tile{ AsIs: e.Tail/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[9], 0UL);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_CreateRemainderFunctionsm_OneFunction]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[10], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Map@0/6 (/7 & CreateRemainderFunctions-OneFunction@0/8 Tile{ HalfReuse: 0/0 HalfReuse: )/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_CreateRemainderFunctionsm_OneFunction_Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_CreateRemainderFunctionsm_OneFunction_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & CreateRemainderFunctions-OneFunction@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateRemainderFunctions-OneFunction@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & CreateRemainderFunctions-OneFunction@1/4 (/7 e.Name0/13 )/8 (/11 e.SpecPattern0/15 )/12 (/21 e.GuardSentence/19 )/22 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.Name0 as range 13
    // closed e.SpecPattern0 as range 15
    // closed e.GuardSentence as range 19
    //DEBUG: e.Name0: 13
    //DEBUG: e.SpecPattern0: 15
    //DEBUG: e.GuardSentence: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateRemainderFunctions-OneFunction@1/4 (/7 e.Name0/13 )/8 (/11 e.SpecPattern0/15 )/12 (/21 e.GuardSentence/19 )/22 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateRemainderFunctions-OneFunction@1/4 (/7 e.Name0/13 )/8 (/11 e.SpecPattern0/15 )/12 e.Sentences/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Name0 as range 13
    // closed e.SpecPattern0 as range 15
    // closed e.Sentences as range 17
    //DEBUG: e.Name0: 13
    //DEBUG: e.SpecPattern0: 15
    //DEBUG: e.Sentences: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateRemainderFunctions-OneFunction$2=1@1/4 AsIs: (/7 } Tile{ AsIs: e.SpecPattern0/15 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Sentences/17 } Tile{ AsIs: )/12 } (/19 Tile{ AsIs: e.Name0/13 } )/20 </21 & AddSuffix/22 e.Name0/13/23 (/25 '*'/26 1/27 )/28 >/29 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_AddSuffix]);
    refalrts::copy_evar(vm, context[23], context[24], context[13], context[14]);
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_char(vm, context[26], '*');
    refalrts::alloc_number(vm, context[27], 1UL);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_gen_CreateRemainderFunctionsm_OneFunction_S2A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[25], context[28] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[20], context[29] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateRemainderFunctions-OneFunction@1/4 (/7 e.Name0/5 )/8 (/11 e.SpecPattern0/9 )/12 e.dyn2/2 >/1
  // closed e.Name0 as range 5
  // closed e.SpecPattern0 as range 9
  // closed e.dyn2 as range 2
  //DEBUG: e.Name0: 5
  //DEBUG: e.SpecPattern0: 9
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & CreateRemainderFunctions-OneFunction@0/14 Tile{ HalfReuse: 1/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.Name0/5 AsIs: )/8 AsIs: (/11 AsIs: e.SpecPattern0/9 AsIs: )/12 } (/15 Tile{ AsIs: e.dyn2/2 } )/16 1/17 )/18 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_CreateRemainderFunctionsm_OneFunction_Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_number(vm, context[17], 1UL);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::reinit_number(context[0], 1UL);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[4], context[18] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[0], context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CreateRemainderFunctionsm_OneFunction_Z1("CreateRemainderFunctions-OneFunction@1", COOKIE1_, COOKIE2_, func_gen_CreateRemainderFunctionsm_OneFunction_Z1);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@5/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@5/4 (/7 # Function/13 s.ScopeClass/14 (/17 e.3/15 )/18 e.2/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Function], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_left( context[15], context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      // closed e.3 as range 15
      // closed e.2 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: s.ScopeClass: 14
      //DEBUG: e.3: 15
      //DEBUG: e.2: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # ColdFunction/7 Reuse: # SPEC/13 AsIs: s.ScopeClass/14 AsIs: (/17 AsIs: e.3/15 AsIs: )/18 AsIs: e.2/11 AsIs: )/8 } Tile{ AsIs: </0 } & Map@5/19 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[19], functions[efunc_gen_Map_Z5]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_ident(context[7], identifiers[ident_ColdFunction]);
      refalrts::update_ident(context[13], identifiers[ident_SPEC]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[4], context[8] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[4], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/7 } Tile{ AsIs: </0 AsIs: & Map@5/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ColdAll\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ColdAll_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Map@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@6/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@6/4 (/7 (/15 e.1/13 )/16 e.0/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      // closed e.1 as range 13
      // closed e.0 as range 11
      // closed e.Tail as range 9
      //DEBUG: e.1: 13
      //DEBUG: e.0: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Log-PutLine/4 HalfReuse: 'H'/7 HalfReuse: 'i'/15 }"st"/17 Tile{ HalfReuse: 'o'/16 }"ry of "/19 </21 & DisplayName/22 Tile{ AsIs: e.1/13 } >/23 '\n'/24 </25 & Map@8/26 Tile{ AsIs: e.0/11 } >/27 >/28 </29 Tile{ HalfReuse: & Map@6/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[17], context[18], "st", 2);
      refalrts::alloc_chars(vm, context[19], context[20], "ry of ", 6);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_DisplayName]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_char(vm, context[24], '\n');
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_gen_Map_Z8]);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Logm_PutLine]);
      refalrts::reinit_char(context[7], 'H');
      refalrts::reinit_char(context[15], 'i');
      refalrts::reinit_char(context[16], 'o');
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[27], context[29] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintHistory*1/4 AsIs: t.Next/7 } >/11 </12 & Map@6/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z6]);
    refalrts::update_name(context[4], functions[efunc_gen_PrintHistory_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & PrintHistory@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintHistory_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & SpecUnit/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_SpecUnit]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & SpecUnit@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecUnit_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_Map_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Map@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@7/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@7/4 (/7 e./11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e. as range 11
      // closed e.Tail as range 9
      //DEBUG: e.: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ }", "/13 </15 & Log-InlineExpr/16 Tile{ AsIs: e./11 } >/17 Tile{ AsIs: </0 AsIs: & Map@7/4 HalfReuse: >/7 } </18 Tile{ HalfReuse: & Map@7/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[13], context[14], ", ", 2);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Logm_InlineExpr]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@7/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }", "/11 Tile{ AsIs: </0 Reuse: & PrintSignatureItem*1/4 AsIs: t.Next/7 } >/13 </14 & Map@7/15 >/16 </17 & Map@7/18 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[11], context[12], ", ", 2);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_Map_Z7]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_gen_Map_Z7]);
    refalrts::update_name(context[4], functions[efunc_gen_PrintSignatureItem_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@7/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@7/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@7/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & PrintSignature$2\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintSignature_S2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z7("Map@7", COOKIE1_, COOKIE2_, func_gen_Map_Z7);


static refalrts::FnResult func_gen_Map_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & Map@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@8/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@8/4 (/7 (/15 e.new3/13 )/16 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      // closed e.new3 as range 13
      // closed e.new4 as range 11
      // closed e.new5 as range 9
      do {
        // </0 & Map@8/4 (/7 (/15 e.1/17 )/16 )/8 e.Tail/19 >/1
        context[17] = context[13];
        context[18] = context[14];
        context[19] = context[9];
        context[20] = context[10];
        if( ! refalrts::empty_seq( context[11], context[12] ) )
          continue;
        // closed e.1 as range 17
        // closed e.Tail as range 19
        //DEBUG: e.1: 17
        //DEBUG: e.Tail: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: ' '/0 HalfReuse: ' '/4 HalfReuse: ' '/7 HalfReuse: ' '/15 } </21 & DisplayName/22 Tile{ AsIs: e.1/17 } >/23": []\n"/24 Tile{ HalfReuse: </16 HalfReuse: & Map@8/8 AsIs: e.Tail/19 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_DisplayName]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_chars(vm, context[24], context[25], ": []\n", 5);
        refalrts::reinit_char(context[0], ' ');
        refalrts::reinit_char(context[4], ' ');
        refalrts::reinit_char(context[7], ' ');
        refalrts::reinit_char(context[15], ' ');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[23], context[25] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 (/7 (/15 e.new8/17 )/16 t.new6/23 e.new7/19 )/8 e.new9/21 >/1
        context[17] = context[13];
        context[18] = context[14];
        context[19] = context[11];
        context[20] = context[12];
        context[21] = context[9];
        context[22] = context[10];
        // closed e.new8 as range 17
        // closed e.new9 as range 21
        context[24] = refalrts::tvar_left( context[23], context[19], context[20] );
        if( ! context[24] )
          continue;
        // closed e.new7 as range 19
        do {
          // </0 & Map@8/4 (/7 (/15 e.1/25 )/16 (/23 e.0/31 )/24 e./27 )/8 e.Tail/29 >/1
          context[25] = context[17];
          context[26] = context[18];
          context[27] = context[19];
          context[28] = context[20];
          context[29] = context[21];
          context[30] = context[22];
          context[31] = 0;
          context[32] = 0;
          if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
            continue;
          // closed e.1 as range 25
          // closed e.0 as range 31
          // closed e. as range 27
          // closed e.Tail as range 29
          //DEBUG: e.1: 25
          //DEBUG: e.0: 31
          //DEBUG: e.: 27
          //DEBUG: e.Tail: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ }"  "/33 Tile{ HalfReuse: ' '/0 HalfReuse: ' '/4 HalfReuse: </7 HalfReuse: & DisplayName/15 AsIs: e.1/25 HalfReuse: >/16 HalfReuse: ':'/23 } ' '/35 Tile{ HalfReuse: '['/24 } </36 & Log-InlineExpr/37 Tile{ AsIs: e.0/31 } >/38 </39 & Map@7/40 Tile{ AsIs: e./27 } >/41"]\n"/42 </44 Tile{ HalfReuse: & Map@8/8 AsIs: e.Tail/29 AsIs: >/1 ]] }
          refalrts::alloc_chars(vm, context[33], context[34], "  ", 2);
          refalrts::alloc_char(vm, context[35], ' ');
          refalrts::alloc_open_call(vm, context[36]);
          refalrts::alloc_name(vm, context[37], functions[efunc_Logm_InlineExpr]);
          refalrts::alloc_close_call(vm, context[38]);
          refalrts::alloc_open_call(vm, context[39]);
          refalrts::alloc_name(vm, context[40], functions[efunc_gen_Map_Z7]);
          refalrts::alloc_close_call(vm, context[41]);
          refalrts::alloc_chars(vm, context[42], context[43], "]\n", 2);
          refalrts::alloc_open_call(vm, context[44]);
          refalrts::reinit_char(context[0], ' ');
          refalrts::reinit_char(context[4], ' ');
          refalrts::reinit_open_call(context[7]);
          refalrts::reinit_name(context[15], functions[efunc_DisplayName]);
          refalrts::reinit_close_call(context[16]);
          refalrts::reinit_char(context[23], ':');
          refalrts::reinit_char(context[24], '[');
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[44] );
          refalrts::push_stack( vm, context[41] );
          refalrts::push_stack( vm, context[39] );
          refalrts::push_stack( vm, context[38] );
          refalrts::push_stack( vm, context[36] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[7] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[41], context[44] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[38], context[40] );
          res = refalrts::splice_evar( res, context[31], context[32] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[0], context[23] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@8/4 (/7 (/15 e.1/25 )/16 t./23 e./27 )/8 e.Tail/29 >/1
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = context[21];
        context[30] = context[22];
        // closed e.1 as range 25
        // closed e. as range 27
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.1: 25
        //DEBUG: e.: 27
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ }"  "/31 Tile{ HalfReuse: ' '/0 HalfReuse: ' '/4 HalfReuse: </7 HalfReuse: & DisplayName/15 AsIs: e.1/25 HalfReuse: >/16 }": ["/33 </35 & PrintSignatureItem*1/36 Tile{ AsIs: t./23 } >/37 </38 & Map@7/39 Tile{ AsIs: e./27 } >/40"]\n"/41 </43 Tile{ HalfReuse: & Map@8/8 AsIs: e.Tail/29 AsIs: >/1 ]] }
        refalrts::alloc_chars(vm, context[31], context[32], "  ", 2);
        refalrts::alloc_chars(vm, context[33], context[34], ": [", 3);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_gen_PrintSignatureItem_D1]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_gen_Map_Z7]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_chars(vm, context[41], context[42], "]\n", 2);
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::reinit_char(context[0], ' ');
        refalrts::reinit_char(context[4], ' ');
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[15], functions[efunc_DisplayName]);
        refalrts::reinit_close_call(context[16]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[40], context[43] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[37], context[39] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[33], context[36] );
        res = refalrts::splice_evar( res, context[0], context[16] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@8/4 (/7 (/15 e.1/17 )/16 e.0/19 )/8 e.Tail/21 >/1
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[11];
      context[20] = context[12];
      context[21] = context[9];
      context[22] = context[10];
      // closed e.1 as range 17
      // closed e.0 as range 19
      // closed e.Tail as range 21
      //DEBUG: e.1: 17
      //DEBUG: e.0: 19
      //DEBUG: e.Tail: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ }"  "/23 Tile{ HalfReuse: ' '/0 HalfReuse: ' '/4 HalfReuse: </7 HalfReuse: & DisplayName/15 AsIs: e.1/17 HalfReuse: >/16 }": ["/25 </27 & PrintSignature*2/28 Tile{ AsIs: e.0/19 } >/29"]\n"/30 </32 Tile{ HalfReuse: & Map@8/8 AsIs: e.Tail/21 AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[23], context[24], "  ", 2);
      refalrts::alloc_chars(vm, context[25], context[26], ": [", 3);
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_gen_PrintSignature_D2]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "]\n", 2);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::reinit_char(context[0], ' ');
      refalrts::reinit_char(context[4], ' ');
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[15], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[25], context[28] );
      res = refalrts::splice_evar( res, context[0], context[16] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@8/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintHistory\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@8/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z8]);
    refalrts::update_name(context[4], functions[efunc_gen_PrintHistory_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@8/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@8/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@8/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & PrintHistory\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintHistory_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z8("Map@8", COOKIE1_, COOKIE2_, func_gen_Map_Z8);


static refalrts::FnResult func_gen_DoMapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & DoMapAccum@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@2/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@2/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@2/4 (/5 e.5/21 (/39 e.6/37 )/40 (/35 e.4/33 )/36 (/31 e.2/29 )/32 )/6 (/9 e.Scanned/17 )/10 (/15 (/27 e.8/25 )/28 e.9/23 (/43 e.00/41 )/44 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_right( context[29], context[30], context[21], context[22] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::brackets_right( context[33], context[34], context[21], context[22] );
      if( ! context[35] )
        continue;
      refalrts::bracket_pointers(context[35], context[36]);
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_right( context[37], context[38], context[21], context[22] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      context[41] = 0;
      context[42] = 0;
      context[43] = refalrts::brackets_right( context[41], context[42], context[23], context[24] );
      if( ! context[43] )
        continue;
      refalrts::bracket_pointers(context[43], context[44]);
      // closed e.5 as range 21
      // closed e.6 as range 37
      // closed e.4 as range 33
      // closed e.2 as range 29
      // closed e.Scanned as range 17
      // closed e.8 as range 25
      // closed e.9 as range 23
      // closed e.00 as range 41
      // closed e.Tail as range 19
      //DEBUG: e.5: 21
      //DEBUG: e.6: 37
      //DEBUG: e.4: 33
      //DEBUG: e.2: 29
      //DEBUG: e.Scanned: 17
      //DEBUG: e.8: 25
      //DEBUG: e.9: 23
      //DEBUG: e.00: 41
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </45 & DoMapAccum$1=1@2/46 (/47 Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: )/16 } (/48 Tile{ AsIs: e.Tail/19 } )/49 Tile{ HalfReuse: </10 HalfReuse: & SpecSentence=1/15 AsIs: (/27 AsIs: e.8/25 AsIs: )/28 } Tile{ AsIs: (/43 AsIs: e.00/41 AsIs: )/44 } Tile{ AsIs: </0 Reuse: & DoMapAccum@4/4 AsIs: (/5 AsIs: e.5/21 AsIs: (/39 AsIs: e.6/37 AsIs: )/40 AsIs: (/35 AsIs: e.4/33 AsIs: )/36 AsIs: (/31 AsIs: e.2/29 AsIs: )/32 AsIs: )/6 AsIs: (/9 } )/50 Tile{ AsIs: e.9/23 } >/51 >/52 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_gen_DoMapAccum_S1A1Z2]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::reinit_open_call(context[10]);
      refalrts::reinit_name(context[15], functions[efunc_gen_SpecSentence_A1]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[50] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[43], context[44] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[48], context[49] );
      refalrts::link_brackets( context[47], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[10], context[28] );
      res = refalrts::splice_elem( res, context[49] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[45], context[47] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & SpecSentence*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_SpecSentence_D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@2/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@2/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & SpecSentence@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecSentence_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z2("DoMapAccum@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoMapAccum@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@3/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@3/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@3/4 (/5 e.4/21 (/33 e.5/31 )/34 (/29 e.3/27 )/30 (/25 e.1/23 )/26 )/6 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_right( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = 0;
      context[28] = 0;
      context[29] = refalrts::brackets_right( context[27], context[28], context[21], context[22] );
      if( ! context[29] )
        continue;
      refalrts::bracket_pointers(context[29], context[30]);
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_right( context[31], context[32], context[21], context[22] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      // closed e.4 as range 21
      // closed e.5 as range 31
      // closed e.3 as range 27
      // closed e.1 as range 23
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      //DEBUG: t.Next: 15
      //DEBUG: e.4: 21
      //DEBUG: e.5: 31
      //DEBUG: e.3: 27
      //DEBUG: e.1: 23
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@3/4 AsIs: (/5 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/26 } </35 & SpecTerm@1/36 Tile{ AsIs: (/25 } Tile{ AsIs: e.4/21 } Tile{ AsIs: )/10 } Tile{ AsIs: (/33 AsIs: e.5/31 AsIs: )/34 AsIs: (/29 AsIs: e.3/27 AsIs: )/30 } Tile{ AsIs: e.1/23 } Tile{ AsIs: t.Next/15 } >/37 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_gen_SpecTerm_Z1]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[35] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[25], context[10] );
      refalrts::link_brackets( context[9], context[26] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[30] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@3/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & SpecResult-Pass\1*1/24 # Functions/25 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/26 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_SpecResultm_Pass_L1D1]);
    refalrts::alloc_ident(vm, context[25], identifiers[ident_Functions]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@3/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@3/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & SpecResult-Pass\1@0/14 Tile{ HalfReuse: # Functions/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_SpecResultm_Pass_L1Z0]);
  refalrts::reinit_ident(context[0], identifiers[ident_Functions]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z3("DoMapAccum@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z3);


static refalrts::FnResult func_gen_DoMapAccum_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 58 elems
  refalrts::Iter context[58];
  refalrts::zeros( context, 58 );
  // </0 & DoMapAccum@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@4/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@4/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@4/4 (/5 e.5/21 (/48 e.6/46 )/49 (/44 e.4/42 )/45 (/40 e.2/38 )/41 )/6 (/9 e.Scanned/17 )/10 (/15 # Condition/25 (/28 e.9/26 )/29 (/32 e.01/30 )/33 (/36 e.03/34 )/37 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      context[25] = refalrts::ident_left( identifiers[ident_Condition], context[23], context[24] );
      if( ! context[25] )
        continue;
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_left( context[26], context[27], context[23], context[24] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[23], context[24] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = 0;
      context[35] = 0;
      context[36] = refalrts::brackets_left( context[34], context[35], context[23], context[24] );
      if( ! context[36] )
        continue;
      refalrts::bracket_pointers(context[36], context[37]);
      context[38] = 0;
      context[39] = 0;
      context[40] = refalrts::brackets_right( context[38], context[39], context[21], context[22] );
      if( ! context[40] )
        continue;
      refalrts::bracket_pointers(context[40], context[41]);
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_right( context[42], context[43], context[21], context[22] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::brackets_right( context[46], context[47], context[21], context[22] );
      if( ! context[48] )
        continue;
      refalrts::bracket_pointers(context[48], context[49]);
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.5 as range 21
      // closed e.6 as range 46
      // closed e.4 as range 42
      // closed e.2 as range 38
      // closed e.Scanned as range 17
      // closed e.9 as range 26
      // closed e.01 as range 30
      // closed e.03 as range 34
      // closed e.Tail as range 19
      //DEBUG: e.5: 21
      //DEBUG: e.6: 46
      //DEBUG: e.4: 42
      //DEBUG: e.2: 38
      //DEBUG: e.Scanned: 17
      //DEBUG: e.9: 26
      //DEBUG: e.01: 30
      //DEBUG: e.03: 34
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </50 & DoMapAccum$1=1@4/51 (/52 Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: )/33 AsIs: (/36 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/10 HalfReuse: </15 HalfReuse: & SpecSentence=1\1=1/25 AsIs: (/28 AsIs: e.9/26 AsIs: )/29 AsIs: (/32 } Tile{ AsIs: e.03/34 } Tile{ AsIs: )/37 HalfReuse: </16 } & SpecResult=1/53 Tile{ AsIs: </0 Reuse: & DoMapAccum@3/4 AsIs: (/5 AsIs: e.5/21 AsIs: (/48 AsIs: e.6/46 AsIs: )/49 AsIs: (/44 AsIs: e.4/42 AsIs: )/45 AsIs: (/40 AsIs: e.2/38 AsIs: )/41 AsIs: )/6 AsIs: (/9 } )/54 Tile{ AsIs: e.01/30 } >/55 >/56 >/57 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_gen_DoMapAccum_S1A1Z4]);
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::alloc_name(vm, context[53], functions[efunc_gen_SpecResult_A1]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[25], functions[efunc_gen_SpecSentence_A1L1A1]);
      refalrts::reinit_open_call(context[16]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[54] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[44], context[45] );
      refalrts::link_brackets( context[48], context[49] );
      refalrts::link_brackets( context[32], context[37] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[36], context[10] );
      refalrts::link_brackets( context[52], context[33] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[55], context[57] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_evar( res, context[37], context[16] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[10], context[32] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[33], context[36] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[50], context[52] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@4/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & SpecSentence=1\1*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_SpecSentence_A1L1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@4/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@4/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@4/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & SpecSentence=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecSentence_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z4("DoMapAccum@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z4);


static refalrts::FnResult func_gen_DoMapAccum_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoMapAccum@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@5/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@5/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@5/4 (/5 e.4/21 (/33 e.5/31 )/34 (/29 e.3/27 )/30 (/25 e.1/23 )/26 )/6 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_right( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = 0;
      context[28] = 0;
      context[29] = refalrts::brackets_right( context[27], context[28], context[21], context[22] );
      if( ! context[29] )
        continue;
      refalrts::bracket_pointers(context[29], context[30]);
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_right( context[31], context[32], context[21], context[22] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      // closed e.4 as range 21
      // closed e.5 as range 31
      // closed e.3 as range 27
      // closed e.1 as range 23
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      //DEBUG: t.Next: 15
      //DEBUG: e.4: 21
      //DEBUG: e.5: 31
      //DEBUG: e.3: 27
      //DEBUG: e.1: 23
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@5/4 AsIs: (/5 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/26 } </35 & SpecTerm@2/36 Tile{ AsIs: (/25 } Tile{ AsIs: e.4/21 } Tile{ AsIs: )/10 } Tile{ AsIs: (/33 AsIs: e.5/31 AsIs: )/34 AsIs: (/29 AsIs: e.3/27 AsIs: )/30 } Tile{ AsIs: e.1/23 } Tile{ AsIs: t.Next/15 } >/37 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_gen_SpecTerm_Z2]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z5]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[35] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[25], context[10] );
      refalrts::link_brackets( context[9], context[26] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[30] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@5/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@5/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & SpecResult-Pass\1*1/24 # Closures/25 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/26 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_SpecResultm_Pass_L1D1]);
    refalrts::alloc_ident(vm, context[25], identifiers[ident_Closures]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@5/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@5/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@5/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & SpecResult-Pass\1@0/14 Tile{ HalfReuse: # Closures/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_SpecResultm_Pass_L1Z0]);
  refalrts::reinit_ident(context[0], identifiers[ident_Closures]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z5("DoMapAccum@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z5);


static refalrts::FnResult func_gen_DoMapAccum_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & DoMapAccum@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@6/4 s.new1/5 t.new2/6 (/10 e.new3/8 )/11 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new3 as range 8
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum@6/4 s.new5/5 t.new6/6 (/10 e.new9/12 )/11 t.new7/16 e.new8/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.new9 as range 12
    context[17] = refalrts::tvar_left( context[16], context[14], context[15] );
    if( ! context[17] )
      continue;
    // closed e.new8 as range 14
    do {
      // </0 & DoMapAccum@6/4 s.Pass/5 (/6 e.4/22 (/34 e.5/32 )/35 (/30 e.3/28 )/31 (/26 e.1/24 )/27 )/7 (/10 e.Scanned/18 )/11 t.Next/16 e.Tail/20 >/1
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[15];
      context[22] = 0;
      context[23] = 0;
      if( ! refalrts::brackets_term( context[22], context[23], context[6] ) )
        continue;
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_right( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_right( context[28], context[29], context[22], context[23] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::brackets_right( context[32], context[33], context[22], context[23] );
      if( ! context[34] )
        continue;
      refalrts::bracket_pointers(context[34], context[35]);
      // closed e.4 as range 22
      // closed e.5 as range 32
      // closed e.3 as range 28
      // closed e.1 as range 24
      // closed e.Scanned as range 18
      // closed e.Tail as range 20
      //DEBUG: t.Next: 16
      //DEBUG: s.Pass: 5
      //DEBUG: e.4: 22
      //DEBUG: e.5: 32
      //DEBUG: e.3: 28
      //DEBUG: e.1: 24
      //DEBUG: e.Scanned: 18
      //DEBUG: e.Tail: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </36 & DoMapAccum$1=1@6/37 s.Pass/5/38 Tile{ AsIs: (/10 AsIs: e.Scanned/18 AsIs: )/11 } (/39 Tile{ AsIs: e.Tail/20 } )/40 Tile{ AsIs: </0 Reuse: & SpecTerm/4 AsIs: s.Pass/5 AsIs: (/6 AsIs: e.4/22 AsIs: (/34 AsIs: e.5/32 AsIs: )/35 AsIs: (/30 AsIs: e.3/28 AsIs: )/31 AsIs: (/26 AsIs: e.1/24 AsIs: )/27 AsIs: )/7 } Tile{ AsIs: t.Next/16 } >/41 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_gen_DoMapAccum_S1A1Z6]);
      refalrts::copy_stvar(vm, context[38], context[5]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_call(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_SpecTerm]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[6], context[7] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[36], context[38] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@6/4 s.Pass/5 t.Acc/6 (/10 e.Scanned/18 )/11 t.Next/16 e.Tail/20 >/1
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[15];
    // closed e.Scanned as range 18
    // closed e.Tail as range 20
    //DEBUG: t.Acc: 6
    //DEBUG: t.Next: 16
    //DEBUG: s.Pass: 5
    //DEBUG: e.Scanned: 18
    //DEBUG: e.Tail: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@6/4 AsIs: s.Pass/5 } Tile{ AsIs: (/10 AsIs: e.Scanned/18 AsIs: )/11 } (/22 Tile{ AsIs: e.Tail/20 } )/23 </24 & SpecResult-Pass\1*1/25 s.Pass/5/26 Tile{ AsIs: t.Acc/6 } Tile{ AsIs: t.Next/16 } >/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_SpecResultm_Pass_L1D1]);
    refalrts::copy_stvar(vm, context[26], context[5]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[23], context[26] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@6/4 s.Pass/5 t.Acc/6 (/10 e.Scanned/12 )/11 >/1
    context[12] = context[8];
    context[13] = context[9];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 12
    //DEBUG: t.Acc: 6
    //DEBUG: s.Pass: 5
    //DEBUG: e.Scanned: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@6/4 s.Pass/5 {REMOVED TILE} (/10 {REMOVED TILE} )/11 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/6 } Tile{ AsIs: e.Scanned/12 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@6/4 s.Pass/5 t.acc/6 (/10 e.scanned/8 )/11 e.items/2 >/1
  // closed e.scanned as range 8
  // closed e.items as range 2
  //DEBUG: t.acc: 6
  //DEBUG: s.Pass: 5
  //DEBUG: e.scanned: 8
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 } [*]/12 & SpecResult-Pass\1@0/13 Tile{ AsIs: s.Pass/5 } {*}/14 Tile{ AsIs: t.acc/6 AsIs: (/10 AsIs: e.scanned/8 AsIs: )/11 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_SpecResultm_Pass_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z6("DoMapAccum@6", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z6);


static refalrts::FnResult func_gen_Map_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@9/4 t.Next/7 e.Tail/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail as range 5
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReplaceToGuards\1/4 AsIs: t.Next/7 } >/9 </10 & Map@9/11 Tile{ AsIs: e.Tail/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z9]);
    refalrts::update_name(context[4], functions[efunc_gen_ReplaceToGuards_L1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@9/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@9/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@9/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ReplaceToGuards\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ReplaceToGuards_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z9("Map@9", COOKIE1_, COOKIE2_, func_gen_Map_Z9);


static refalrts::FnResult func_gen_Map_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Map@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@10/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@10/4 (/7 (/15 e.1/13 )/16 e.2/11 (/19 e.3/17 )/20 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[11], context[12] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      // closed e.1 as range 13
      // closed e.2 as range 11
      // closed e.3 as range 17
      // closed e.Tail as range 9
      //DEBUG: e.1: 13
      //DEBUG: e.2: 11
      //DEBUG: e.3: 17
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.3/17 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & FindClosuresInPatterns-Pattern@1/7 AsIs: (/15 AsIs: e.1/13 AsIs: )/16 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@13/19 } Tile{ AsIs: e.2/11 } >/21 >/22 Tile{ HalfReuse: </20 HalfReuse: & Map@10/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_gen_FindClosuresInPatternsm_Pattern_Z1]);
      refalrts::reinit_name(context[19], functions[efunc_gen_Map_Z13]);
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[4], context[16] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@10/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindClosuresInPatterns-Body\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@10/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z10]);
    refalrts::update_name(context[4], functions[efunc_gen_FindClosuresInPatternsm_Body_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@10/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@10/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@10/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FindClosuresInPatterns-Body\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindClosuresInPatternsm_Body_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z10("Map@10", COOKIE1_, COOKIE2_, func_gen_Map_Z10);


static refalrts::FnResult func_gen_Map_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Map@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@11/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@11/4 (/7 e.Calls/9 )/8 t.Next/13 e.Tail/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Calls as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Tail as range 11
    //DEBUG: e.Calls: 9
    //DEBUG: t.Next: 13
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ApplySubst-Expr\1/4 AsIs: (/7 AsIs: e.Calls/9 AsIs: )/8 AsIs: t.Next/13 } >/15 </16 & Map@11/17 (/18 e.Calls/9/19 )/21 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_gen_Map_Z11]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::copy_evar(vm, context[19], context[20], context[9], context[10]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_ApplySubstm_Expr_L1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@11/4 (/7 e.Calls/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Calls as range 9
    //DEBUG: e.Calls: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@11/4 (/7 e.Calls/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@11/4 (/7 e.Calls/5 )/8 e.items/2 >/1
  // closed e.Calls as range 5
  // closed e.items as range 2
  //DEBUG: e.Calls: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & ApplySubst-Expr\1@0/4 AsIs: (/7 AsIs: e.Calls/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ApplySubstm_Expr_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z11("Map@11", COOKIE1_, COOKIE2_, func_gen_Map_Z11);


static refalrts::FnResult func_gen_DoMapAccum_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & DoMapAccum@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@7/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@7/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@7/4 (/5 e.new8/21 (/25 e.new9/23 )/26 )/6 (/9 e.new12/17 )/10 t.new10/15 e.new11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_right( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      // closed e.new8 as range 21
      // closed e.new9 as range 23
      // closed e.new12 as range 17
      // closed e.new11 as range 19
      do {
        // </0 & DoMapAccum@7/4 (/5 e.new13/27 (/25 e.new14/29 )/26 )/6 (/9 e.new18/31 )/10 (/15 s.new15/37 e.new16/35 )/16 e.new17/33 >/1
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[17];
        context[32] = context[18];
        context[33] = context[19];
        context[34] = context[20];
        context[35] = 0;
        context[36] = 0;
        if( ! refalrts::brackets_term( context[35], context[36], context[15] ) )
          continue;
        // closed e.new13 as range 27
        // closed e.new14 as range 29
        // closed e.new18 as range 31
        // closed e.new17 as range 33
        if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
          continue;
        // closed e.new16 as range 35
        do {
          // </0 & DoMapAccum@7/4 (/5 e.1/38 (/25 e.2/40 )/26 )/6 (/9 e.Scanned/42 )/10 (/15 # CallBrackets/37 e.3/44 )/16 e.Tail/46 >/1
          context[38] = context[27];
          context[39] = context[28];
          context[40] = context[29];
          context[41] = context[30];
          context[42] = context[31];
          context[43] = context[32];
          context[44] = context[35];
          context[45] = context[36];
          context[46] = context[33];
          context[47] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[37] ) )
            continue;
          // closed e.1 as range 38
          // closed e.2 as range 40
          // closed e.Scanned as range 42
          // closed e.3 as range 44
          // closed e.Tail as range 46
          //DEBUG: e.1: 38
          //DEBUG: e.2: 40
          //DEBUG: e.Scanned: 42
          //DEBUG: e.3: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 HalfReuse: & DoMapAccum$1=1@7/6 AsIs: (/9 AsIs: e.Scanned/42 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/46 } )/48 Tile{ AsIs: </0 Reuse: & ExtractCalls-Term$1=1/4 AsIs: (/5 AsIs: e.1/38 HalfReuse: )/25 } Tile{ HalfReuse: (/37 AsIs: e.3/44 AsIs: )/16 } </49 & NewVarName/50 (/51 Tile{ AsIs: e.2/40 } )/52"eCall"/53 >/55 >/56 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[48]);
          refalrts::alloc_open_call(vm, context[49]);
          refalrts::alloc_name(vm, context[50], functions[efunc_NewVarName]);
          refalrts::alloc_open_bracket(vm, context[51]);
          refalrts::alloc_close_bracket(vm, context[52]);
          refalrts::alloc_chars(vm, context[53], context[54], "eCall", 5);
          refalrts::alloc_close_call(vm, context[55]);
          refalrts::alloc_close_call(vm, context[56]);
          refalrts::reinit_open_call(context[26]);
          refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z7]);
          refalrts::update_name(context[4], functions[efunc_gen_ExtractCallsm_Term_S1A1]);
          refalrts::reinit_close_bracket(context[25]);
          refalrts::reinit_open_bracket(context[37]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[55] );
          refalrts::push_stack( vm, context[49] );
          refalrts::link_brackets( context[51], context[52] );
          refalrts::link_brackets( context[37], context[16] );
          refalrts::link_brackets( context[5], context[25] );
          refalrts::link_brackets( context[15], context[48] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[52], context[56] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[49], context[51] );
          res = refalrts::splice_evar( res, context[37], context[16] );
          res = refalrts::splice_evar( res, context[0], context[25] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[26], context[15] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@7/4 (/5 e.1/38 (/25 e.2/40 )/26 )/6 (/9 e.Scanned/42 )/10 (/15 # Brackets/37 e.3/44 )/16 e.Tail/46 >/1
          context[38] = context[27];
          context[39] = context[28];
          context[40] = context[29];
          context[41] = context[30];
          context[42] = context[31];
          context[43] = context[32];
          context[44] = context[35];
          context[45] = context[36];
          context[46] = context[33];
          context[47] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_Brackets], context[37] ) )
            continue;
          // closed e.1 as range 38
          // closed e.2 as range 40
          // closed e.Scanned as range 42
          // closed e.3 as range 44
          // closed e.Tail as range 46
          //DEBUG: e.1: 38
          //DEBUG: e.2: 40
          //DEBUG: e.Scanned: 42
          //DEBUG: e.3: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </48 & DoMapAccum$1=1@7/49 (/50 Tile{ AsIs: e.Scanned/42 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/46 } )/51 </52 & ExtractCalls-Term$2=1/53 Tile{ AsIs: </0 AsIs: & DoMapAccum@7/4 AsIs: (/5 AsIs: e.1/38 AsIs: (/25 AsIs: e.2/40 AsIs: )/26 AsIs: )/6 AsIs: (/9 } Tile{ HalfReuse: )/37 AsIs: e.3/44 HalfReuse: >/16 } >/54 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[48]);
          refalrts::alloc_name(vm, context[49], functions[efunc_gen_DoMapAccum_S1A1Z7]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_call(vm, context[52]);
          refalrts::alloc_name(vm, context[53], functions[efunc_gen_ExtractCallsm_Term_S2A1]);
          refalrts::alloc_close_call(vm, context[54]);
          refalrts::reinit_close_bracket(context[37]);
          refalrts::reinit_close_call(context[16]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[54] );
          refalrts::push_stack( vm, context[52] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[37] );
          refalrts::link_brackets( context[5], context[6] );
          refalrts::link_brackets( context[25], context[26] );
          refalrts::link_brackets( context[15], context[51] );
          refalrts::link_brackets( context[50], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[54] );
          res = refalrts::splice_evar( res, context[37], context[16] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[51], context[53] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[10], context[15] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[48], context[50] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@7/4 (/5 e.1/38 (/25 e.2/40 )/26 )/6 (/9 e.Scanned/42 )/10 (/15 # ADT-Brackets/37 (/50 e.5/48 )/51 e.4/44 )/16 e.Tail/46 >/1
        context[38] = context[27];
        context[39] = context[28];
        context[40] = context[29];
        context[41] = context[30];
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[35];
        context[45] = context[36];
        context[46] = context[33];
        context[47] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[37] ) )
          continue;
        context[48] = 0;
        context[49] = 0;
        context[50] = refalrts::brackets_left( context[48], context[49], context[44], context[45] );
        if( ! context[50] )
          continue;
        refalrts::bracket_pointers(context[50], context[51]);
        // closed e.1 as range 38
        // closed e.2 as range 40
        // closed e.Scanned as range 42
        // closed e.5 as range 48
        // closed e.4 as range 44
        // closed e.Tail as range 46
        //DEBUG: e.1: 38
        //DEBUG: e.2: 40
        //DEBUG: e.Scanned: 42
        //DEBUG: e.5: 48
        //DEBUG: e.4: 44
        //DEBUG: e.Tail: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </52 & DoMapAccum$1=1@7/53 (/54 Tile{ AsIs: e.Scanned/42 } )/55 (/56 Tile{ AsIs: e.Tail/46 } Tile{ AsIs: )/10 HalfReuse: </15 HalfReuse: & ExtractCalls-Term$3=1/37 AsIs: (/50 AsIs: e.5/48 AsIs: )/51 } Tile{ AsIs: </0 AsIs: & DoMapAccum@7/4 AsIs: (/5 AsIs: e.1/38 AsIs: (/25 AsIs: e.2/40 AsIs: )/26 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: )/16 } Tile{ AsIs: e.4/44 } >/57 >/58 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_gen_DoMapAccum_S1A1Z7]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::alloc_close_call(vm, context[57]);
        refalrts::alloc_close_call(vm, context[58]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[37], functions[efunc_gen_ExtractCallsm_Term_S3A1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[58] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[16] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[56], context[10] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[10], context[51] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[52], context[54] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@7/4 (/5 e.0/27 (/25 e.1/29 )/26 )/6 (/9 e.Scanned/31 )/10 t.Next/15 e.Tail/33 >/1
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      // closed e.0 as range 27
      // closed e.1 as range 29
      // closed e.Scanned as range 31
      // closed e.Tail as range 33
      //DEBUG: t.Next: 15
      //DEBUG: e.0: 27
      //DEBUG: e.1: 29
      //DEBUG: e.Scanned: 31
      //DEBUG: e.Tail: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@7/4 AsIs: (/5 AsIs: e.0/27 AsIs: (/25 AsIs: e.1/29 AsIs: )/26 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned/31 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/33 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@7/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & ExtractCalls-Term*4/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_ExtractCallsm_Term_D4]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@7/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@7/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@7/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & ExtractCalls-Term@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractCallsm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z7("DoMapAccum@7", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z7);


static refalrts::FnResult func_gen_DoMapAccum_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & DoMapAccum@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@8/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@8/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@8/4 (/5 e.1/21 (/27 e.2/25 )/28 )/6 (/9 e.Scanned/17 )/10 (/15 e.4/23 ':'/31 t.0/29 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_right( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      // closed e.1 as range 21
      // closed e.2 as range 25
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      context[30] = refalrts::tvar_right( context[29], context[23], context[24] );
      if( ! context[30] )
        continue;
      context[31] = refalrts::char_right( ':', context[23], context[24] );
      if( ! context[31] )
        continue;
      // closed e.4 as range 23
      //DEBUG: e.1: 21
      //DEBUG: e.2: 25
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: t.0: 29
      //DEBUG: e.4: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </32 & DoMapAccum$1=1@8/33 (/34 Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </35 Tile{ HalfReuse: & ExtractCalls=2\1=1/31 AsIs: t.0/29 } Tile{ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: (/5 AsIs: e.1/21 AsIs: (/27 AsIs: e.2/25 AsIs: )/28 AsIs: )/6 AsIs: (/9 } )/36 Tile{ AsIs: e.4/23 } >/37 >/38 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_gen_DoMapAccum_S1A1Z8]);
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::reinit_name(context[31], functions[efunc_gen_ExtractCalls_A2L1A1]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[36] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[34], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[31], context[30] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[32], context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@8/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & ExtractCalls=2\1*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_ExtractCalls_A2L1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@8/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@8/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@8/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & ExtractCalls=2\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractCalls_A2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z8("DoMapAccum@8", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z8);


static refalrts::FnResult func_gen_Map_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Map@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@12/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@12/4 (/7 e.1/11 ':'/15 t./13 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      context[14] = refalrts::tvar_right( context[13], context[11], context[12] );
      if( ! context[14] )
        continue;
      context[15] = refalrts::char_right( ':', context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.1 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: t.: 13
      //DEBUG: e.1: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t./13 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractVariables-Expr/4 } Tile{ AsIs: e.1/11 } Tile{ HalfReuse: >/15 } Tile{ HalfReuse: </7 } Tile{ HalfReuse: & Map@12/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_ExtractVariablesm_Expr]);
      refalrts::reinit_close_call(context[15]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@12/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractCalls=1\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@12/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z12]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractCalls_A1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@12/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@12/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@12/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ExtractCalls=1\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractCalls_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z12("Map@12", COOKIE1_, COOKIE2_, func_gen_Map_Z12);


static refalrts::FnResult func_gen_Map_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Map@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@13/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@13/4 (/7 # Condition/13 (/16 e.2/14 )/17 (/20 e.4/18 )/21 (/24 e.6/22 )/25 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Condition], context[11], context[12] );
      if( ! context[13] )
        continue;
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::brackets_left( context[14], context[15], context[11], context[12] );
      if( ! context[16] )
        continue;
      refalrts::bracket_pointers(context[16], context[17]);
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[11], context[12] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[11], context[12] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.2 as range 14
      // closed e.4 as range 18
      // closed e.6 as range 22
      // closed e.Tail as range 9
      //DEBUG: e.2: 14
      //DEBUG: e.4: 18
      //DEBUG: e.6: 22
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Map@13/4 (/7 # Condition/13 (/16 e.2/14 )/17 (/20 e.4/18 )/21 (/24 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.6/22 } Tile{ HalfReuse: </25 HalfReuse: & Map@13/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[25]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[25];
      res = refalrts::splice_evar( res, context[22], context[23] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@13/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindClosuresInPatterns-Body\1\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@13/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z13]);
    refalrts::update_name(context[4], functions[efunc_gen_FindClosuresInPatternsm_Body_L1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@13/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@13/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@13/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FindClosuresInPatterns-Body\1\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindClosuresInPatternsm_Body_L1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z13("Map@13", COOKIE1_, COOKIE2_, func_gen_Map_Z13);


static refalrts::FnResult func_gen_FindClosuresInPatternsm_Pattern_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & FindClosuresInPatterns-Pattern@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindClosuresInPatterns-Pattern@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & FindClosuresInPatterns-Pattern@1/4 (/7 e.Pattern0/9 )/8 e.Call/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Pattern0 as range 9
    // closed e.Call as range 11
    //DEBUG: e.Pattern0: 9
    //DEBUG: e.Call: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@14/4 } Tile{ AsIs: e.Pattern0/9 } Tile{ AsIs: e.Call/11 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindClosuresInPatterns-Pattern@1/4 (/7 e.Pattern0/5 )/8 e.Call/2 >/1
  // closed e.Pattern0 as range 5
  // closed e.Call as range 2
  //DEBUG: e.Pattern0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindClosuresInPatterns-Pattern@0/4 } Tile{ AsIs: e.Pattern0/5 } Tile{ AsIs: e.Call/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_FindClosuresInPatternsm_Pattern_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindClosuresInPatternsm_Pattern_Z1("FindClosuresInPatterns-Pattern@1", COOKIE1_, COOKIE2_, func_gen_FindClosuresInPatternsm_Pattern_Z1);


static refalrts::FnResult func_gen_Map_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Map@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@14/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@14/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@14/4 (/7 s.new6/13 s.new7/18 e.new8/14 )/8 e.new9/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        // closed e.new9 as range 16
        if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
          continue;
        // closed e.new8 as range 14
        do {
          // </0 & Map@14/4 (/7 # Symbol/13 s.Type/18 e.1/19 )/8 e.Tail/21 >/1
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          context[22] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
            continue;
          // closed e.1 as range 19
          // closed e.Tail as range 21
          //DEBUG: s.Type: 18
          //DEBUG: e.1: 19
          //DEBUG: e.Tail: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} & Map@14/4 (/7 # Symbol/13 s.Type/18 e.1/19 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Map@14/8 AsIs: e.Tail/21 AsIs: >/1 ]] }
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          refalrts::splice_to_freelist_open( vm, context[0], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@14/4 (/7 # Var/13 s.Type/18 e.1/19 )/8 e.Tail/21 >/1
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.1 as range 19
        // closed e.Tail as range 21
        //DEBUG: s.Type: 18
        //DEBUG: e.1: 19
        //DEBUG: e.Tail: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & Map@14/4 (/7 # Var/13 s.Type/18 e.1/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Map@14/8 AsIs: e.Tail/21 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@14/4 (/7 # Brackets/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@14/4 } Tile{ AsIs: e.0/14 } Tile{ HalfReuse: >/7 HalfReuse: </13 } Tile{ HalfReuse: & Map@14/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
        refalrts::reinit_close_call(context[7]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[7], context[13] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@14/4 (/7 # ADT-Brackets/13 (/20 e.2/18 )/21 e.1/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
          continue;
        context[18] = 0;
        context[19] = 0;
        context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
        if( ! context[20] )
          continue;
        refalrts::bracket_pointers(context[20], context[21]);
        // closed e.2 as range 18
        // closed e.1 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.2: 18
        //DEBUG: e.1: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} e.2/18 )/21 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@14/4 } Tile{ AsIs: e.1/14 } Tile{ HalfReuse: >/13 HalfReuse: </20 } Tile{ HalfReuse: & Map@14/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[13], context[20] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@14/4 (/7 # ClosureBrackets/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[13] ) )
        continue;
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 # ClosureBrackets/13 e.0/14 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Found/0 HalfReuse: </4 } Tile{ HalfReuse: & Map@14/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Found]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@14/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindClosuresInPatterns-Term*5/4 AsIs: t.Next/7 } >/11 </12 & Map@14/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z14]);
    refalrts::update_name(context[4], functions[efunc_gen_FindClosuresInPatternsm_Term_D5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@14/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@14/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@14/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FindClosuresInPatterns-Term@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindClosuresInPatternsm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z14("Map@14", COOKIE1_, COOKIE2_, func_gen_Map_Z14);


static refalrts::FnResult func_gen_DoMapAccum_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & DoMapAccum@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@9/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@9/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@9/4 (/5 e.1/21 s.NextId$a/25 )/6 (/9 e.Scanned/17 )/10 (/15 e.0/23 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e.Scanned as range 17
      // closed e.0 as range 23
      // closed e.Tail as range 19
      if( ! refalrts::svar_right( context[25], context[21], context[22] ) )
        continue;
      // closed e.1 as range 21
      //DEBUG: e.Scanned: 17
      //DEBUG: e.0: 23
      //DEBUG: e.Tail: 19
      //DEBUG: s.NextId$a: 25
      //DEBUG: e.1: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </26 & DoMapAccum$1=1@9/27 (/28 Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </29 & RenameSignatureVars=3\1=1/30 Tile{ AsIs: </0 Reuse: & DoMapAccum@11/4 AsIs: (/5 AsIs: e.1/21 AsIs: s.NextId$a/25 AsIs: )/6 AsIs: (/9 } )/31 Tile{ AsIs: e.0/23 } >/32 >/33 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DoMapAccum_S1A1Z9]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_RenameSignatureVars_A3L1A1]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[31] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[28], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[26], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@9/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@9/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & RenameSignatureVars=3\1*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_RenameSignatureVars_A3L1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@9/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@9/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@9/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & RenameSignatureVars=3\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameSignatureVars_A3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z9("DoMapAccum@9", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z9);


static refalrts::FnResult func_gen_DoMapAccum_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@10/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@10/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@10/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & PrepareSignature-SortVars=1\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_PrepareSignaturem_SortVars_A1L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@10/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@10/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@10/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & PrepareSignature-SortVars=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSignaturem_SortVars_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z10("DoMapAccum@10", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z10);


static refalrts::FnResult func_gen_DoMapAccum_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@11/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@11/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@11/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & RenameSignatureVars-Term/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_RenameSignatureVarsm_Term]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@11/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@11/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@11/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & RenameSignatureVars-Term@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameSignatureVarsm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z11("DoMapAccum@11", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z11);


static refalrts::FnResult func_gen_Map_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Map@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@15/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@15/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@15/4 (/7 e.FromSubstitution/15 )/8 (/13 e.1/19 ':'/23 t./21 )/14 e.Tail/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.FromSubstitution as range 15
      // closed e.Tail as range 17
      context[22] = refalrts::tvar_right( context[21], context[19], context[20] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::char_right( ':', context[19], context[20] );
      if( ! context[23] )
        continue;
      // closed e.1 as range 19
      //DEBUG: e.FromSubstitution: 15
      //DEBUG: e.Tail: 17
      //DEBUG: t.: 21
      //DEBUG: e.1: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 } </24 & Map@11/25 (/26 e.FromSubstitution/15/27 )/29 Tile{ AsIs: e.1/19 } >/30 Tile{ AsIs: ':'/23 AsIs: t./21 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.FromSubstitution/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_Map_Z11]);
      refalrts::alloc_open_bracket(vm, context[26]);
      refalrts::copy_evar(vm, context[27], context[28], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[26], context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[23], context[14] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[24], context[29] );
      res = refalrts::splice_elem( res, context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@15/4 (/7 e.FromSubstitution/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.FromSubstitution as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.FromSubstitution: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ApplySubst-Subst\1*1/4 AsIs: (/7 AsIs: e.FromSubstitution/15 AsIs: )/8 AsIs: t.Next/13 } >/19 </20 & Map@15/21 (/22 e.FromSubstitution/15/23 )/25 Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_Map_Z15]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_ApplySubstm_Subst_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@15/4 (/7 e.FromSubstitution/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FromSubstitution as range 9
    //DEBUG: e.FromSubstitution: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@15/4 (/7 e.FromSubstitution/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@15/4 (/7 e.FromSubstitution/5 )/8 e.items/2 >/1
  // closed e.FromSubstitution as range 5
  // closed e.items as range 2
  //DEBUG: e.FromSubstitution: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & ApplySubst-Subst\1@0/4 AsIs: (/7 AsIs: e.FromSubstitution/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ApplySubstm_Subst_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z15("Map@15", COOKIE1_, COOKIE2_, func_gen_Map_Z15);


static refalrts::FnResult func_gen_Reduce_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & Reduce@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@1/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@1/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@1/4 s.new6/5 t.new7/9 e.new8/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.new8 as range 11
      do {
        // </0 & Reduce@1/4 # False/5 t.Next/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::ident_term( identifiers[ident_False], context[5] ) )
          continue;
        // closed e.Tail as range 13
        //DEBUG: t.Next: 9
        //DEBUG: e.Tail: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} t.Next/9 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 AsIs: # False/5 } Tile{ AsIs: e.Tail/13 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@1/4 # True/5 t.new9/9 e.new10/13 >/1
      context[13] = context[11];
      context[14] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_True], context[5] ) )
        continue;
      // closed e.new10 as range 13
      do {
        // </0 & Reduce@1/4 # True/5 (/9 (/21 # Var/24 s.new11/29 e.new12/19 )/22 ':'/23 (/27 s.new13/30 e.new14/25 )/28 )/10 e.new15/15 >/1
        context[15] = context[13];
        context[16] = context[14];
        context[17] = 0;
        context[18] = 0;
        if( ! refalrts::brackets_term( context[17], context[18], context[9] ) )
          continue;
        context[19] = 0;
        context[20] = 0;
        context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
        if( ! context[21] )
          continue;
        refalrts::bracket_pointers(context[21], context[22]);
        context[23] = refalrts::char_left( ':', context[17], context[18] );
        if( ! context[23] )
          continue;
        context[24] = refalrts::ident_left( identifiers[ident_Var], context[19], context[20] );
        if( ! context[24] )
          continue;
        context[25] = 0;
        context[26] = 0;
        context[27] = refalrts::brackets_left( context[25], context[26], context[17], context[18] );
        if( ! context[27] )
          continue;
        refalrts::bracket_pointers(context[27], context[28]);
        if( ! refalrts::empty_seq( context[17], context[18] ) )
          continue;
        // closed e.new15 as range 15
        if( ! refalrts::svar_left( context[29], context[19], context[20] ) )
          continue;
        // closed e.new12 as range 19
        if( ! refalrts::svar_left( context[30], context[25], context[26] ) )
          continue;
        // closed e.new14 as range 25
        do {
          // </0 & Reduce@1/4 # True/5 (/9 (/21 # Var/24 s.Mode/29 e.6/31 )/22 ':'/23 (/27 # Var/30 s.Mode/37 e.8/33 )/28 )/10 e.Tail/35 >/1
          context[31] = context[19];
          context[32] = context[20];
          context[33] = context[25];
          context[34] = context[26];
          context[35] = context[15];
          context[36] = context[16];
          if( ! refalrts::ident_term( identifiers[ident_Var], context[30] ) )
            continue;
          if( ! refalrts::repeated_stvar_left( vm, context[37], context[29], context[33], context[34] ) )
            continue;
          // closed e.6 as range 31
          // closed e.8 as range 33
          // closed e.Tail as range 35
          //DEBUG: s.Mode: 29
          //DEBUG: e.6: 31
          //DEBUG: e.8: 33
          //DEBUG: e.Tail: 35

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/9 (/21 # Var/24 s.Mode/29 e.6/31 )/22 ':'/23 (/27 # Var/30 s.Mode/37 e.8/33 )/28 )/10 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 AsIs: # True/5 } Tile{ AsIs: e.Tail/35 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[35], context[36] );
          refalrts::splice_to_freelist_open( vm, context[5], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Reduce@1/4 # True/5 (/9 (/21 # Var/24 s.Mode/29 e.6/31 )/22 ':'/23 (/27 s.Mode/30 e.7/33 )/28 )/10 e.Tail/35 >/1
        context[31] = context[19];
        context[32] = context[20];
        context[33] = context[25];
        context[34] = context[26];
        context[35] = context[15];
        context[36] = context[16];
        if( ! refalrts::repeated_stvar_term( vm, context[30], context[29] ) )
          continue;
        // closed e.6 as range 31
        // closed e.7 as range 33
        // closed e.Tail as range 35
        //DEBUG: s.Mode: 29
        //DEBUG: e.6: 31
        //DEBUG: e.7: 33
        //DEBUG: e.Tail: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/9 (/21 # Var/24 s.Mode/29 e.6/31 )/22 ':'/23 (/27 s.Mode/30 e.7/33 )/28 )/10 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 AsIs: # True/5 } Tile{ AsIs: e.Tail/35 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@1/4 # True/5 t.Next/9 e.Tail/15 >/1
      context[15] = context[13];
      context[16] = context[14];
      // closed e.Tail as range 15
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 Reuse: # False/5 } Tile{ AsIs: e.Tail/15 } Tile{ AsIs: >/1 ]] }
      refalrts::update_ident(context[5], identifiers[ident_False]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@1/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1@1/14 (/15 Tile{ AsIs: e.Tail/11 } )/16 Tile{ AsIs: </0 Reuse: & IsTrivialSubstitutions\1*4/4 AsIs: t.Acc/5 AsIs: t.Next/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1Z1]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_IsTrivialSubstitutions_L1D4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@1/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@1/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@1/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & Reduce@0/0 Reuse: & IsTrivialSubstitutions\1@0/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_IsTrivialSubstitutions_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z1("Reduce@1", COOKIE1_, COOKIE2_, func_gen_Reduce_Z1);


static refalrts::FnResult func_gen_MapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MapAccum@1/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & MapAccum@1/4 t.Acc/5 e.Tail/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.Tail as range 7
    //DEBUG: t.Acc: 5
    //DEBUG: e.Tail: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@17/4 AsIs: t.Acc/5 } (/9 )/10 Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MapAccum@1/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & MapAccum@0/0 Reuse: & PrepareArgOrPattern=2\1$1\1@0/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_MapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareArgOrPattern_A2L1S1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MapAccum_Z1("MapAccum@1", COOKIE1_, COOKIE2_, func_gen_MapAccum_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & DoMapAccum@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@12/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 t.new3/13 (/17 e.new4/15 )/18 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new4 as range 15
  // closed e.new5 as range 2
  do {
    // </0 & DoMapAccum@12/4 (/7 e.StaticMatches/19 )/8 (/11 e.DynamicMatches/21 )/12 t.Acc/13 (/17 e.Scanned/23 )/18 t.Next/27 e.Tail/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.StaticMatches as range 19
    // closed e.DynamicMatches as range 21
    // closed e.Scanned as range 23
    context[28] = refalrts::tvar_left( context[27], context[25], context[26] );
    if( ! context[28] )
      continue;
    // closed e.Tail as range 25
    //DEBUG: t.Acc: 13
    //DEBUG: e.StaticMatches: 19
    //DEBUG: e.DynamicMatches: 21
    //DEBUG: e.Scanned: 23
    //DEBUG: t.Next: 27
    //DEBUG: e.Tail: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@12/4 AsIs: (/7 AsIs: e.StaticMatches/19 AsIs: )/8 AsIs: (/11 AsIs: e.DynamicMatches/21 AsIs: )/12 } Tile{ AsIs: (/17 AsIs: e.Scanned/23 AsIs: )/18 } (/29 Tile{ AsIs: e.Tail/25 } )/30 </31 & PrepareArgOrPattern=2\1/32 (/33 e.StaticMatches/19/34 )/36 (/37 e.DynamicMatches/21/38 )/40 Tile{ AsIs: t.Acc/13 } Tile{ AsIs: t.Next/27 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_PrepareArgOrPattern_A2L1]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[19], context[20]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::copy_evar(vm, context[38], context[39], context[21], context[22]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[37], context[40] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[30], context[40] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@12/4 (/7 e.StaticMatches/19 )/8 (/11 e.DynamicMatches/21 )/12 t.Acc/13 (/17 e.Scanned/23 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[15];
    context[24] = context[16];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.StaticMatches as range 19
    // closed e.DynamicMatches as range 21
    // closed e.Scanned as range 23
    //DEBUG: t.Acc: 13
    //DEBUG: e.StaticMatches: 19
    //DEBUG: e.DynamicMatches: 21
    //DEBUG: e.Scanned: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@12/4 (/7 e.StaticMatches/19 )/8 (/11 e.DynamicMatches/21 )/12 {REMOVED TILE} (/17 {REMOVED TILE} )/18 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/13 } Tile{ AsIs: e.Scanned/23 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@12/4 (/7 e.StaticMatches/5 )/8 (/11 e.DynamicMatches/9 )/12 t.acc/13 (/17 e.scanned/15 )/18 e.items/2 >/1
  // closed e.StaticMatches as range 5
  // closed e.DynamicMatches as range 9
  // closed e.scanned as range 15
  // closed e.items as range 2
  //DEBUG: t.acc: 13
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.DynamicMatches: 9
  //DEBUG: e.scanned: 15
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </19 & DoMapAccum@0/20 Tile{ HalfReuse: [*]/0 Reuse: & PrepareArgOrPattern=2\1@0/4 AsIs: (/7 AsIs: e.StaticMatches/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.DynamicMatches/9 } )/21 Tile{ HalfReuse: {*}/12 AsIs: t.acc/13 AsIs: (/17 AsIs: e.scanned/15 AsIs: )/18 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareArgOrPattern_A2L1Z0]);
  refalrts::reinit_unwrapped_closure(context[12], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[21] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z12("DoMapAccum@12", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z12);


static refalrts::FnResult func_gen_Map_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@16/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@16/4 (/7 # GhostBrackets/13 e.0/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_GhostBrackets], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.0 as range 11
      // closed e.Tail as range 9
      //DEBUG: e.0: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 Reuse: # Brackets/13 AsIs: e.0/11 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@16/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::update_ident(context[13], identifiers[ident_Brackets]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@16/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/7 } Tile{ AsIs: </0 AsIs: & Map@16/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@16/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@16/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@16/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & RemoveLastGhostBracket$1\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RemoveLastGhostBracket_S1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z16("Map@16", COOKIE1_, COOKIE2_, func_gen_Map_Z16);


static refalrts::FnResult func_gen_DoMapAccum_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DoMapAccum@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@13/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@13/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@13/4 (/5 e./21 )/6 (/9 e.Scanned/17 )/10 (/15 e.0/23 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e. as range 21
      // closed e.Scanned as range 17
      // closed e.0 as range 23
      // closed e.Tail as range 19
      //DEBUG: e.: 21
      //DEBUG: e.Scanned: 17
      //DEBUG: e.0: 23
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </25 & DoMapAccum$1=1@13/26 Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </27 & RenameGenericMatch=3\1=1/28 (/29 e.0/23/30 )/32 Tile{ AsIs: </0 Reuse: & NewVarName/4 AsIs: (/5 AsIs: e./21 AsIs: )/6 } Tile{ AsIs: e.0/23 } >/33 >/34 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_gen_DoMapAccum_S1A1Z13]);
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_gen_RenameGenericMatch_A3L1A1]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::copy_evar(vm, context[30], context[31], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::update_name(context[4], functions[efunc_NewVarName]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[29], context[32] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[27], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@13/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@13/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & RenameGenericMatch=3\1*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_RenameGenericMatch_A3L1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@13/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@13/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@13/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & RenameGenericMatch=3\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameGenericMatch_A3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z13("DoMapAccum@13", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z13);


static refalrts::FnResult func_gen_Map_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Map@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@17/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@17/4 (/7 e.1/11 ':'/15 t./13 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      context[14] = refalrts::tvar_right( context[13], context[11], context[12] );
      if( ! context[14] )
        continue;
      context[15] = refalrts::char_right( ':', context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.1 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: t.: 13
      //DEBUG: e.1: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t./13 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractVariables-Expr/4 } Tile{ AsIs: e.1/11 } Tile{ HalfReuse: >/15 } Tile{ HalfReuse: </7 } Tile{ HalfReuse: & Map@17/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_ExtractVariablesm_Expr]);
      refalrts::reinit_close_call(context[15]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@17/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & RenameGenericMatch=1\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@17/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z17]);
    refalrts::update_name(context[4], functions[efunc_gen_RenameGenericMatch_A1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@17/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@17/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@17/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & RenameGenericMatch=1\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameGenericMatch_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z17("Map@17", COOKIE1_, COOKIE2_, func_gen_Map_Z17);


static refalrts::FnResult func_gen_Map_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 58 elems
  refalrts::Iter context[58];
  refalrts::zeros( context, 58 );
  // </0 & Map@18/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@18/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & Map@18/4 (/7 e.new6/13 )/8 (/11 e.new7/15 )/12 t.new4/19 e.new5/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.new6 as range 13
    // closed e.new7 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.new5 as range 17
    do {
      // </0 & Map@18/4 (/7 e.SpecPattern/21 )/8 (/11 e.StaticMatches$a/23 )/12 (/19 (/31 e.1/29 )/32 e.2/27 (/35 e.3/33 )/36 )/20 e.Tail/25 >/1
      context[21] = context[13];
      context[22] = context[14];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = 0;
      context[28] = 0;
      if( ! refalrts::brackets_term( context[27], context[28], context[19] ) )
        continue;
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::brackets_right( context[33], context[34], context[27], context[28] );
      if( ! context[35] )
        continue;
      refalrts::bracket_pointers(context[35], context[36]);
      // closed e.SpecPattern as range 21
      // closed e.StaticMatches$a as range 23
      // closed e.1 as range 29
      // closed e.2 as range 27
      // closed e.3 as range 33
      // closed e.Tail as range 25
      //DEBUG: e.SpecPattern: 21
      //DEBUG: e.StaticMatches$a: 23
      //DEBUG: e.1: 29
      //DEBUG: e.2: 27
      //DEBUG: e.3: 33
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </37 & PrepareSpecSentence=1/38 Tile{ AsIs: (/35 AsIs: e.3/33 AsIs: )/36 HalfReuse: (/20 } Tile{ AsIs: e.2/27 } )/39 (/40 e.StaticMatches$a/23/41 )/43 (/44 e.SpecPattern/21/45 )/47 </48 & GenericMatch-Wrapper:1/49 </50 Tile{ HalfReuse: & GenericMatch/19 AsIs: (/31 AsIs: e.1/29 AsIs: )/32 } (/51 e.SpecPattern/21/52 )/54 >/55 >/56 >/57 Tile{ AsIs: </0 AsIs: & Map@18/4 AsIs: (/7 AsIs: e.SpecPattern/21 AsIs: )/8 AsIs: (/11 AsIs: e.StaticMatches$a/23 AsIs: )/12 } Tile{ AsIs: e.Tail/25 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_PrepareSpecSentence_A1]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::copy_evar(vm, context[41], context[42], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::copy_evar(vm, context[45], context[46], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_gen_GenericMatchm_Wrapper_B1]);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::copy_evar(vm, context[52], context[53], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::reinit_open_bracket(context[20]);
      refalrts::reinit_name(context[19], functions[efunc_GenericMatch]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[50] );
      refalrts::link_brackets( context[51], context[54] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[44], context[47] );
      refalrts::link_brackets( context[40], context[43] );
      refalrts::link_brackets( context[20], context[39] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[0], context[12] );
      res = refalrts::splice_evar( res, context[51], context[57] );
      res = refalrts::splice_evar( res, context[19], context[32] );
      res = refalrts::splice_evar( res, context[39], context[50] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[35], context[20] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@18/4 (/7 e.SpecPattern/21 )/8 (/11 e.StaticMatches$a/23 )/12 t.Next/19 e.Tail/25 >/1
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    // closed e.SpecPattern as range 21
    // closed e.StaticMatches$a as range 23
    // closed e.Tail as range 25
    //DEBUG: t.Next: 19
    //DEBUG: e.SpecPattern: 21
    //DEBUG: e.StaticMatches$a: 23
    //DEBUG: e.Tail: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareSpecSentence*1/4 AsIs: (/7 AsIs: e.SpecPattern/21 AsIs: )/8 AsIs: (/11 AsIs: e.StaticMatches$a/23 AsIs: )/12 AsIs: t.Next/19 } >/27 </28 & Map@18/29 (/30 e.SpecPattern/21/31 )/33 (/34 e.StaticMatches$a/23/35 )/37 Tile{ AsIs: e.Tail/25 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_Map_Z18]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::copy_evar(vm, context[31], context[32], context[21], context[22]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_bracket(vm, context[34]);
    refalrts::copy_evar(vm, context[35], context[36], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_PrepareSpecSentence_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[34], context[37] );
    refalrts::link_brackets( context[30], context[33] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[27], context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@18/4 (/7 e.SpecPattern/13 )/8 (/11 e.StaticMatches$a/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.SpecPattern as range 13
    // closed e.StaticMatches$a as range 15
    //DEBUG: e.SpecPattern: 13
    //DEBUG: e.StaticMatches$a: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@18/4 (/7 e.SpecPattern/13 )/8 (/11 e.StaticMatches$a/15 )/12 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@18/4 (/7 e.SpecPattern/5 )/8 (/11 e.StaticMatches$a/9 )/12 e.items/2 >/1
  // closed e.SpecPattern as range 5
  // closed e.StaticMatches$a as range 9
  // closed e.items as range 2
  //DEBUG: e.SpecPattern: 5
  //DEBUG: e.StaticMatches$a: 9
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & Map@0/14 Tile{ HalfReuse: (/0 Reuse: & PrepareSpecSentence@0/4 AsIs: (/7 AsIs: e.SpecPattern/5 AsIs: )/8 AsIs: (/11 AsIs: e.StaticMatches$a/9 AsIs: )/12 } )/15 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSpecSentence_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[0], context[15] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[0], context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z18("Map@18", COOKIE1_, COOKIE2_, func_gen_Map_Z18);


static refalrts::FnResult func_gen_Map_Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & Map@19/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@19/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@19/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@19/4 (/7 e.StaticSubstitutions/15 )/8 (/13 # Condition/21 (/24 e.2/22 )/25 (/28 e.4/26 )/29 (/32 e.6/30 )/33 )/14 e.Tail/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = refalrts::ident_left( identifiers[ident_Condition], context[19], context[20] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[19], context[20] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_left( context[26], context[27], context[19], context[20] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[19], context[20] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e.StaticSubstitutions as range 15
      // closed e.2 as range 22
      // closed e.4 as range 26
      // closed e.6 as range 30
      // closed e.Tail as range 17
      //DEBUG: e.StaticSubstitutions: 15
      //DEBUG: e.2: 22
      //DEBUG: e.4: 26
      //DEBUG: e.6: 30
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Condition/21 AsIs: (/24 AsIs: e.2/22 AsIs: )/25 AsIs: (/28 } </34 & Map@11/35 (/36 e.StaticSubstitutions/15/37 Tile{ AsIs: )/29 } Tile{ AsIs: e.4/26 } >/39 )/40 (/41 </42 & Map@11/43 (/44 e.StaticSubstitutions/15/45 Tile{ HalfReuse: )/32 AsIs: e.6/30 HalfReuse: >/33 AsIs: )/14 } )/47 Tile{ AsIs: </0 AsIs: & Map@19/4 AsIs: (/7 AsIs: e.StaticSubstitutions/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z11]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_gen_Map_Z11]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::copy_evar(vm, context[45], context[46], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::reinit_close_bracket(context[32]);
      refalrts::reinit_close_call(context[33]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[13], context[47] );
      refalrts::link_brackets( context[41], context[14] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[42] );
      refalrts::link_brackets( context[44], context[32] );
      refalrts::link_brackets( context[28], context[40] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[34] );
      refalrts::link_brackets( context[36], context[29] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[32], context[14] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[39], context[44] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[13], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@19/4 (/7 e.StaticSubstitutions/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.StaticSubstitutions as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.StaticSubstitutions: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrepareSpecConditions\1*1/4 AsIs: (/7 AsIs: e.StaticSubstitutions/15 AsIs: )/8 AsIs: t.Next/13 } >/19 </20 & Map@19/21 (/22 e.StaticSubstitutions/15/23 )/25 Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_Map_Z19]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_PrepareSpecConditions_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@19/4 (/7 e.StaticSubstitutions/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.StaticSubstitutions as range 9
    //DEBUG: e.StaticSubstitutions: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@19/4 (/7 e.StaticSubstitutions/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@19/4 (/7 e.StaticSubstitutions/5 )/8 e.items/2 >/1
  // closed e.StaticSubstitutions as range 5
  // closed e.items as range 2
  //DEBUG: e.StaticSubstitutions: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & PrepareSpecConditions\1@0/4 AsIs: (/7 AsIs: e.StaticSubstitutions/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSpecConditions_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z19("Map@19", COOKIE1_, COOKIE2_, func_gen_Map_Z19);


static refalrts::FnResult func_gen_Reduce_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@2/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@2/4 t.Acc/5 t.Next/9 e.Tail/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.Tail as range 7
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </11 & Reduce$1=1@2/12 (/13 Tile{ AsIs: e.Tail/7 } )/14 Tile{ AsIs: </0 Reuse: & MapGenericMatches=1\1/4 AsIs: t.Acc/5 AsIs: t.Next/9 } >/15 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_Reduce_S1A1Z2]);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::update_name(context[4], functions[efunc_gen_MapGenericMatches_A1L1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@2/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@2/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@2/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & Reduce@0/0 Reuse: & MapGenericMatches=1\1@0/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_MapGenericMatches_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z2("Reduce@2", COOKIE1_, COOKIE2_, func_gen_Reduce_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@14/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@14/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@14/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & GenericMatch-Wrapper:1$1=1\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_GenericMatchm_Wrapper_B1S1A1L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@14/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@14/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@14/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & GenericMatch-Wrapper:1$1=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GenericMatchm_Wrapper_B1S1A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z14("DoMapAccum@14", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z14);


static refalrts::FnResult func_gen_DoMapAccum_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoMapAccum@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@15/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@15/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@15/4 (/5 e./21 )/6 (/9 e.Scanned/17 )/10 (/15 e.0/23 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e. as range 21
      // closed e.Scanned as range 17
      // closed e.0 as range 23
      // closed e.Tail as range 19
      //DEBUG: e.: 21
      //DEBUG: e.Scanned: 17
      //DEBUG: e.0: 23
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </25 & DoMapAccum$1=1@15/26 (/27 Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </28 & NameSignatureVars=1\1=1/29 Tile{ AsIs: </0 Reuse: & DoMapAccum@16/4 AsIs: (/5 AsIs: e./21 AsIs: )/6 AsIs: (/9 } )/30 Tile{ AsIs: e.0/23 } >/31 >/32 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_gen_DoMapAccum_S1A1Z15]);
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_NameSignatureVars_A1L1A1]);
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[30] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[27], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@15/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@15/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & NameSignatureVars=1\1*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_NameSignatureVars_A1L1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@15/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@15/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@15/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & NameSignatureVars=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_NameSignatureVars_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z15("DoMapAccum@15", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z15);


static refalrts::FnResult func_gen_DoMapAccum_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & DoMapAccum@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@16/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@16/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@16/4 (/5 e./21 )/6 (/9 e.Scanned/17 )/10 (/15 # Var/25 s.Mode/26 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      context[25] = refalrts::ident_left( identifiers[ident_Var], context[23], context[24] );
      if( ! context[25] )
        continue;
      // closed e. as range 21
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[26], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      //DEBUG: e.: 21
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.Mode: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </27 & DoMapAccum$1=1@16/28 (/29 Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } Tile{ HalfReuse: </25 } & NameSignatureVars-Term$1=1/30 Tile{ AsIs: </0 Reuse: & NewVarName/4 AsIs: (/5 AsIs: e./21 AsIs: )/6 HalfReuse: s.Mode26 /9 } 'X'/31 >/32 >/33 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_gen_DoMapAccum_S1A1Z16]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_NameSignatureVarsm_Term_S1A1]);
      refalrts::alloc_char(vm, context[31], 'X');
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::reinit_open_call(context[25]);
      refalrts::update_name(context[4], functions[efunc_NewVarName]);
      refalrts::reinit_svar( context[9], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[33] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[27], context[29] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@16/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@16/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & NameSignatureVars-Term*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_NameSignatureVarsm_Term_D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@16/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@16/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@16/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & NameSignatureVars-Term@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_NameSignatureVarsm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z16("DoMapAccum@16", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z16);


static refalrts::FnResult func_gen_GetSignaturesGeneralizationMatches_S1B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & GetSignaturesGeneralizationMatches$1:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GetSignaturesGeneralizationMatches$1:1@1/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new3 as range 7
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & GetSignaturesGeneralizationMatches$1:1@1/4 s.new8/5 s.new9/6 (/9 e.new11/23 )/10 (/13 e.new12/25 )/14 (/17 e.new13/27 )/18 (/21 e.new14/29 )/22 s.new10/33 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.new11 as range 23
    // closed e.new12 as range 25
    // closed e.new13 as range 27
    // closed e.new14 as range 29
    if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
      continue;
    if( ! refalrts::empty_seq( context[31], context[32] ) )
      continue;
    do {
      // </0 & GetSignaturesGeneralizationMatches$1:1@1/4 s.Mode/5 s.FirstSymbol/6 (/9 e.1/34 )/10 (/13 e.GenSignature-First0/36 )/14 (/17 e.Vars0/38 )/18 (/21 e.GenSignature-E0/40 )/22 # True/33 >/1
      context[34] = context[23];
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      context[41] = context[30];
      if( ! refalrts::ident_term( identifiers[ident_True], context[33] ) )
        continue;
      // closed e.1 as range 34
      // closed e.GenSignature-First0 as range 36
      // closed e.Vars0 as range 38
      // closed e.GenSignature-E0 as range 40
      //DEBUG: s.Mode: 5
      //DEBUG: s.FirstSymbol: 6
      //DEBUG: e.1: 34
      //DEBUG: e.GenSignature-First0: 36
      //DEBUG: e.Vars0: 38
      //DEBUG: e.GenSignature-E0: 40
      //5: s.Mode
      //6: s.FirstSymbol
      //34: e.1
      //36: e.GenSignature-First0
      //38: e.Vars0
      //40: e.GenSignature-E0
      //46: s.Mode
      //47: s.FirstSymbol
      //48: e.1

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_GetSignaturesGeneralizationMatches_S1B1Z1S1C1]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::copy_stvar(vm, context[46], context[5]);
      refalrts::copy_stvar(vm, context[47], context[6]);
      refalrts::copy_evar(vm, context[48], context[49], context[34], context[35]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[42] );
      res = refalrts::splice_elem( res, context[43] );
      refalrts::link_brackets( context[45], context[50] );
      res = refalrts::splice_elem( res, context[50] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_stvar( res, context[47] );
      res = refalrts::splice_stvar( res, context[46] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_elem( res, context[42] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </42 & GetSignaturesGeneralizationMatches$1:1@1$1?1/46 (/49 e.VarInner/47 )/50 >/43
        context[44] = 0;
        context[45] = 0;
        context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
        context[47] = 0;
        context[48] = 0;
        context[49] = refalrts::brackets_left( context[47], context[48], context[44], context[45] );
        if( ! context[49] )
          continue;
        refalrts::bracket_pointers(context[49], context[50]);
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        // closed e.VarInner as range 47
        //DEBUG: s.Mode: 5
        //DEBUG: s.FirstSymbol: 6
        //DEBUG: e.1: 34
        //DEBUG: e.GenSignature-First0: 36
        //DEBUG: e.Vars0: 38
        //DEBUG: e.GenSignature-E0: 40
        //DEBUG: e.VarInner: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & GetSignaturesGeneralizationMatches$1:1@1/4 s.Mode/5 s.FirstSymbol/6 (/9 e.1/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/18 (/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/43 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: e.GenSignature-First0/36 HalfReuse: ':'/14 AsIs: (/17 } Tile{ HalfReuse: # Var/10 } Tile{ AsIs: e.VarInner/47 } Tile{ AsIs: )/22 HalfReuse: )/33 AsIs: </42 Reuse: & GetSignaturesGeneralizationMatches/46 AsIs: (/49 } Tile{ AsIs: e.Vars0/38 } Tile{ AsIs: )/50 } Tile{ AsIs: e.GenSignature-E0/40 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_char(context[14], ':');
        refalrts::reinit_ident(context[10], identifiers[ident_Var]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::update_name(context[46], functions[efunc_GetSignaturesGeneralizationMatches]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[42] );
        refalrts::link_brackets( context[49], context[50] );
        refalrts::link_brackets( context[13], context[33] );
        refalrts::link_brackets( context[17], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_elem( res, context[50] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[22], context[49] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[13], context[17] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[42], context[43]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GetSignaturesGeneralizationMatches$1:1@1/4 s.Mode/5 s.FirstSymbol/6 (/9 e.1/34 )/10 (/13 e.GenSignature-First0/36 )/14 (/17 e.Vars0/38 )/18 (/21 e.GenSignature-E0/40 )/22 # False/33 >/1
    context[34] = context[23];
    context[35] = context[24];
    context[36] = context[25];
    context[37] = context[26];
    context[38] = context[27];
    context[39] = context[28];
    context[40] = context[29];
    context[41] = context[30];
    if( ! refalrts::ident_term( identifiers[ident_False], context[33] ) )
      continue;
    // closed e.1 as range 34
    // closed e.GenSignature-First0 as range 36
    // closed e.Vars0 as range 38
    // closed e.GenSignature-E0 as range 40
    //DEBUG: s.Mode: 5
    //DEBUG: s.FirstSymbol: 6
    //DEBUG: e.1: 34
    //DEBUG: e.GenSignature-First0: 36
    //DEBUG: e.Vars0: 38
    //DEBUG: e.GenSignature-E0: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & GetSignaturesGeneralizationMatches$1:1@1/4 s.Mode/5 s.FirstSymbol/6 (/9 e.1/34 )/10 (/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # False/33 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & GetSignaturesGeneralizationMatches/14 AsIs: (/17 AsIs: e.Vars0/38 AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.GenSignature-First0/36 } Tile{ AsIs: )/22 } Tile{ AsIs: e.GenSignature-E0/40 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_name(context[14], functions[efunc_GetSignaturesGeneralizationMatches]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[14], context[21] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GetSignaturesGeneralizationMatches$1:1@1/4 s.Mode/5 s.FirstSymbol/6 (/9 e.1/7 )/10 (/13 e.GenSignature-First0/11 )/14 (/17 e.Vars0/15 )/18 (/21 e.GenSignature-E0/19 )/22 e.dyn/2 >/1
  // closed e.1 as range 7
  // closed e.GenSignature-First0 as range 11
  // closed e.Vars0 as range 15
  // closed e.GenSignature-E0 as range 19
  // closed e.dyn as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: s.FirstSymbol: 6
  //DEBUG: e.1: 7
  //DEBUG: e.GenSignature-First0: 11
  //DEBUG: e.Vars0: 15
  //DEBUG: e.GenSignature-E0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.FirstSymbol/6 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GetSignaturesGeneralizationMatches$1:1@0/4 } (/23 Tile{ AsIs: s.Mode/5 } Tile{ HalfReuse: s.FirstSymbol6 /9 AsIs: e.1/7 AsIs: )/10 AsIs: (/13 AsIs: e.GenSignature-First0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Vars0/15 AsIs: )/18 AsIs: (/21 AsIs: e.GenSignature-E0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_GetSignaturesGeneralizationMatches_S1B1Z0]);
  refalrts::reinit_svar( context[9], context[6] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[23], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[23] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GetSignaturesGeneralizationMatches_S1B1Z1("GetSignaturesGeneralizationMatches$1:1@1", COOKIE1_, COOKIE2_, func_gen_GetSignaturesGeneralizationMatches_S1B1Z1);


static refalrts::FnResult func_gen_NameSignatureVarsm_Term_D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & NameSignatureVars-Term*1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & NameSignatureVars-Term*1/4 t.new1/5 t.new2/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & NameSignatureVars-Term*1/4 t.new3/5 (/7 s.new4/11 e.new5/9 )/8 >/1
    context[9] = 0;
    context[10] = 0;
    if( ! refalrts::brackets_term( context[9], context[10], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
      continue;
    // closed e.new5 as range 9
    do {
      // </0 & NameSignatureVars-Term*1/4 t.State/5 (/7 s.BracketsTag/11 e.Expr/12 )/8 >/1
      context[12] = context[9];
      context[13] = context[10];
      // closed e.Expr as range 12
      //DEBUG: t.State: 5
      //DEBUG: s.BracketsTag: 11
      //DEBUG: e.Expr: 12
      //5: t.State
      //11: s.BracketsTag
      //12: e.Expr
      //19: s.BracketsTag

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[16], functions[efunc_gen_NameSignatureVarsm_Term_D1S2C1]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_OneOf]);
      refalrts::copy_stvar(vm, context[19], context[11]);
      refalrts::alloc_ident(vm, context[20], identifiers[ident_CallBrackets]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_ClosureBrackets]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Brackets]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_stvar( res, context[19] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[14] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </14 & NameSignatureVars-Term*1$2?1/18 # True/19 >/15
        context[16] = 0;
        context[17] = 0;
        context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
        context[19] = refalrts::ident_left( identifiers[ident_True], context[16], context[17] );
        if( ! context[19] )
          continue;
        if( ! refalrts::empty_seq( context[16], context[17] ) )
          continue;
        //DEBUG: t.State: 5
        //DEBUG: s.BracketsTag: 11
        //DEBUG: e.Expr: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 s.BracketsTag/11 {REMOVED TILE} {REMOVED TILE} # True/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & NameSignatureVars-Term$2=2/4 } Tile{ HalfReuse: s.BracketsTag11 /8 AsIs: </14 Reuse: & NameSignatureVars-Expr/18 } Tile{ AsIs: t.State/5 } Tile{ AsIs: e.Expr/12 } Tile{ AsIs: >/15 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_NameSignatureVarsm_Term_S2A2]);
        refalrts::reinit_svar( context[8], context[11] );
        refalrts::update_name(context[18], functions[efunc_NameSignatureVarsm_Expr]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[8], context[18] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[14], context[15]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NameSignatureVars-Term*1/4 t.State/5 (/7 # ADT-Brackets/11 (/16 e.Name/14 )/17 e.Expr/12 )/8 >/1
    context[12] = context[9];
    context[13] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[11] ) )
      continue;
    context[14] = 0;
    context[15] = 0;
    context[16] = refalrts::brackets_left( context[14], context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    refalrts::bracket_pointers(context[16], context[17]);
    // closed e.Name as range 14
    // closed e.Expr as range 12
    //DEBUG: t.State: 5
    //DEBUG: e.Name: 14
    //DEBUG: e.Expr: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </18 Tile{ HalfReuse: & NameSignatureVars-Term$3=1/11 AsIs: (/16 } Tile{ AsIs: e.Name/14 } )/19 Tile{ AsIs: </0 Reuse: & DoMapAccum@16/4 AsIs: t.State/5 AsIs: (/7 } Tile{ AsIs: )/17 AsIs: e.Expr/12 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::reinit_name(context[11], functions[efunc_gen_NameSignatureVarsm_Term_S3A1]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[17] );
    refalrts::link_brackets( context[16], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[11], context[16] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameSignatureVars-Term*1/4 t.State/5 t.OtherTerm/7 >/1
  //DEBUG: t.State: 5
  //DEBUG: t.OtherTerm: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NameSignatureVars-Term*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.State/5 AsIs: t.OtherTerm/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_NameSignatureVarsm_Term_D1("NameSignatureVars-Term*1", COOKIE1_, COOKIE2_, func_gen_NameSignatureVarsm_Term_D1);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_Preparem_Aux_A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Prepare-Aux=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Prepare-Aux=1@1/4 (/9 (/13 e.NewNames/11 )/14 e.NewInfo/7 (/17 e.NewHistories/15 )/18 )/10 e.AST$a/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[7], context[8] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_right( context[15], context[16], context[7], context[8] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.NewNames as range 11
    // closed e.NewInfo as range 7
    // closed e.NewHistories as range 15
    // closed e.AST$a as range 5
    //DEBUG: e.NewNames: 11
    //DEBUG: e.NewInfo: 7
    //DEBUG: e.NewHistories: 15
    //DEBUG: e.AST$a: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Prepare-Aux=2@1/9 AsIs: (/13 AsIs: e.NewNames/11 AsIs: )/14 } Tile{ AsIs: (/17 AsIs: e.NewHistories/15 AsIs: )/18 HalfReuse: (/10 AsIs: e.AST$a/5 HalfReuse: )/1 } Tile{ AsIs: </0 } & Map@2/19 Tile{ AsIs: e.NewInfo/7 } >/20 >/21 Tile{ ]] }
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Map_Z2]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[9], functions[efunc_gen_Preparem_Aux_A2Z1]);
    refalrts::reinit_open_bracket(context[10]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[1] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[4], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Prepare-Aux=1@1/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Prepare-Aux=1@0/6 (/7 )/8 (/9 )/10 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Preparem_Aux_A1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A1Z1("Prepare-Aux=1@1", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A1Z1);


static refalrts::FnResult func_gen_Fetch_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Fetch@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@1/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & MapAccum/0 Reuse: & Prepare-Aux=1\2/4 AsIs: e.Argument/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::reinit_name(context[0], functions[efunc_MapAccum]);
    refalrts::update_name(context[4], functions[efunc_gen_Preparem_Aux_A1L2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@1/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: (/1 } & MapAccum@0/5 & Prepare-Aux=1\2@0/6 )/7 >/8 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_gen_MapAccum_Z0]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Preparem_Aux_A1L2Z0]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_open_bracket(context[1]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[1], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z1("Fetch@1", COOKIE1_, COOKIE2_, func_gen_Fetch_Z1);


static refalrts::FnResult func_gen_CreateRemainderFunctionsm_OneFunction_S2A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & CreateRemainderFunctions-OneFunction$2=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateRemainderFunctions-OneFunction$2=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & CreateRemainderFunctions-OneFunction$2=1@1/4 (/7 e.SpecPattern0/17 )/8 (/11 t./25 e./19 )/12 (/15 e.Name0/21 )/16 e.RemainderName/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.SpecPattern0 as range 17
    // closed e.Name0 as range 21
    // closed e.RemainderName as range 23
    context[26] = refalrts::tvar_left( context[25], context[19], context[20] );
    if( ! context[26] )
      continue;
    // closed e. as range 19
    //DEBUG: e.SpecPattern0: 17
    //DEBUG: e.Name0: 21
    //DEBUG: e.RemainderName: 23
    //DEBUG: t.: 25
    //DEBUG: e.: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } (/27 Tile{ AsIs: e.RemainderName/23 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.SpecPattern0/17 AsIs: )/8 AsIs: (/11 AsIs: t./25 AsIs: e./19 AsIs: )/12 HalfReuse: 1/15 } Tile{ AsIs: )/16 } </28 & CreateRemainderFunctions-OneFunction/29 2/30 (/31 (/32 Tile{ AsIs: e.Name0/21 } )/33 (/34 e.SpecPattern0/17/35 )/37 (/38 e./19/39 )/41 1/42 )/43 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_CreateRemainderFunctionsm_OneFunction]);
    refalrts::alloc_number(vm, context[30], 2UL);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_bracket(vm, context[34]);
    refalrts::copy_evar(vm, context[35], context[36], context[17], context[18]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::copy_evar(vm, context[39], context[40], context[19], context[20]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_number(context[15], 1UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[31], context[43] );
    refalrts::link_brackets( context[38], context[41] );
    refalrts::link_brackets( context[34], context[37] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[0], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[33], context[43] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[28], context[32] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[4], context[15] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateRemainderFunctions-OneFunction$2=1@1/4 (/7 e.SpecPattern0/17 )/8 (/11 e.Sentences0/19 )/12 (/15 e.Name0/21 )/16 e.RemainderName/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.SpecPattern0 as range 17
    // closed e.Sentences0 as range 19
    // closed e.Name0 as range 21
    // closed e.RemainderName as range 23
    //DEBUG: e.SpecPattern0: 17
    //DEBUG: e.Sentences0: 19
    //DEBUG: e.Name0: 21
    //DEBUG: e.RemainderName: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } (/25 Tile{ AsIs: e.RemainderName/23 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.SpecPattern0/17 AsIs: )/8 AsIs: (/11 AsIs: e.Sentences0/19 AsIs: )/12 HalfReuse: 1/15 } Tile{ AsIs: )/16 } </26 & CreateRemainderFunctions-OneFunction/27 2/28 (/29 (/30 Tile{ AsIs: e.Name0/21 } )/31 (/32 e.SpecPattern0/17/33 )/35 (/36 </37 & Drop*1/38 e.Sentences0/19/39 >/41 )/42 1/43 )/44 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_CreateRemainderFunctionsm_OneFunction]);
    refalrts::alloc_number(vm, context[28], 2UL);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::copy_evar(vm, context[33], context[34], context[17], context[18]);
    refalrts::alloc_close_bracket(vm, context[35]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_gen_Drop_D1]);
    refalrts::copy_evar(vm, context[39], context[40], context[19], context[20]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_number(vm, context[43], 1UL);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_number(context[15], 1UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[29], context[44] );
    refalrts::link_brackets( context[36], context[42] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[32], context[35] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[0], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[25], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[44] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[26], context[30] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[4], context[15] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateRemainderFunctions-OneFunction$2=1@1/4 (/7 e.SpecPattern0/5 )/8 (/11 e.Sentences0/9 )/12 (/15 e.Name0/13 )/16 e.dyn/2 >/1
  // closed e.SpecPattern0 as range 5
  // closed e.Sentences0 as range 9
  // closed e.Name0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.SpecPattern0: 5
  //DEBUG: e.Sentences0: 9
  //DEBUG: e.Name0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateRemainderFunctions-OneFunction$2=1@0/4 AsIs: (/7 AsIs: e.SpecPattern0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Sentences0/9 AsIs: )/12 HalfReuse: 1/15 } (/17 Tile{ AsIs: e.Name0/13 } Tile{ AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_CreateRemainderFunctionsm_OneFunction_S2A1Z0]);
  refalrts::reinit_number(context[15], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CreateRemainderFunctionsm_OneFunction_S2A1Z1("CreateRemainderFunctions-OneFunction$2=1@1", COOKIE1_, COOKIE2_, func_gen_CreateRemainderFunctionsm_OneFunction_S2A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & SpecUnit@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecUnit_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@2/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & SpecSentence@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecSentence_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z2("DoMapAccum$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z2);


static refalrts::FnResult func_gen_SpecTerm_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & SpecTerm@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecTerm@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 t.new5/17 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  context[18] = refalrts::tvar_right( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & SpecTerm@1/4 (/7 e.new9/19 )/8 (/11 e.new10/21 )/12 (/15 e.new11/23 )/16 e.new8/25 (/17 s.new6/29 e.new7/27 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[13];
    context[24] = context[14];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    if( ! refalrts::brackets_term( context[27], context[28], context[17] ) )
      continue;
    // closed e.new9 as range 19
    // closed e.new10 as range 21
    // closed e.new11 as range 23
    // closed e.new8 as range 25
    if( ! refalrts::svar_left( context[29], context[27], context[28] ) )
      continue;
    // closed e.new7 as range 27
    do {
      // </0 & SpecTerm@1/4 (/7 e.new14/30 )/8 (/11 e.new15/32 )/12 (/15 e.new16/34 )/16 e.new13/36 (/17 # CallBrackets/29 e.new12/38 )/18 >/1
      context[30] = context[19];
      context[31] = context[20];
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[29] ) )
        continue;
      // closed e.new14 as range 30
      // closed e.new15 as range 32
      // closed e.new16 as range 34
      // closed e.new13 as range 36
      // closed e.new12 as range 38
      do {
        // </0 & SpecTerm@1/4 (/7 e.new20/40 )/8 (/11 e.new21/42 )/12 (/15 e.new22/44 )/16 e.new19/46 (/17 # CallBrackets/29 (/52 # Symbol/54 # Name/55 e.new17/50 )/53 e.new18/48 )/18 >/1
        context[40] = context[30];
        context[41] = context[31];
        context[42] = context[32];
        context[43] = context[33];
        context[44] = context[34];
        context[45] = context[35];
        context[46] = context[36];
        context[47] = context[37];
        context[48] = context[38];
        context[49] = context[39];
        context[50] = 0;
        context[51] = 0;
        context[52] = refalrts::brackets_left( context[50], context[51], context[48], context[49] );
        if( ! context[52] )
          continue;
        refalrts::bracket_pointers(context[52], context[53]);
        context[54] = refalrts::ident_left( identifiers[ident_Symbol], context[50], context[51] );
        if( ! context[54] )
          continue;
        context[55] = refalrts::ident_left( identifiers[ident_Name], context[50], context[51] );
        if( ! context[55] )
          continue;
        // closed e.new20 as range 40
        // closed e.new21 as range 42
        // closed e.new22 as range 44
        // closed e.new19 as range 46
        // closed e.new17 as range 50
        // closed e.new18 as range 48
        do {
          // </0 & SpecTerm@1/4 (/7 e.4/56 )/8 (/11 e.5/58 )/12 (/15 e.3/60 )/16 e.1/62 (/17 # CallBrackets/29 (/52 # Symbol/54 # Name/55 e.Name/64 )/53 e.Expression/66 )/18 >/1
          context[56] = context[40];
          context[57] = context[41];
          context[58] = context[42];
          context[59] = context[43];
          context[60] = context[44];
          context[61] = context[45];
          context[62] = context[46];
          context[63] = context[47];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[48];
          context[67] = context[49];
          // closed e.4 as range 56
          // closed e.5 as range 58
          // closed e.3 as range 60
          // closed e.1 as range 62
          // closed e.Name as range 64
          // closed e.Expression as range 66
          //DEBUG: e.4: 56
          //DEBUG: e.5: 58
          //DEBUG: e.3: 60
          //DEBUG: e.1: 62
          //DEBUG: e.Name: 64
          //DEBUG: e.Expression: 66
          //56: e.4
          //58: e.5
          //60: e.3
          //62: e.1
          //64: e.Name
          //66: e.Expression
          //71: e.Name

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[68]);
          refalrts::alloc_name(vm, context[70], functions[efunc_gen_SpecTerm_Z1S1C1]);
          refalrts::copy_evar(vm, context[71], context[72], context[64], context[65]);
          refalrts::alloc_close_call(vm, context[69]);
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[68] );
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_elem( res, context[70] );
          res = refalrts::splice_elem( res, context[68] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </68 & SpecTerm@1$1?1/72 e._/70 '@'/74 0/73 >/69
            context[70] = 0;
            context[71] = 0;
            context[72] = refalrts::call_left( context[70], context[71], context[68], context[69] );
            context[73] = refalrts::number_right( 0UL, context[70], context[71] );
            if( ! context[73] )
              continue;
            context[74] = refalrts::char_right( '@', context[70], context[71] );
            if( ! context[74] )
              continue;
            // closed e._ as range 70
            //DEBUG: e.4: 56
            //DEBUG: e.5: 58
            //DEBUG: e.3: 60
            //DEBUG: e.1: 62
            //DEBUG: e.Name: 64
            //DEBUG: e.Expression: 66
            //DEBUG: e._: 70

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} & SpecTerm@1/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._/70 '@'/74 0/73 {REMOVED TILE}
            //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.4/56 } Tile{ AsIs: (/11 AsIs: e.5/58 AsIs: )/12 AsIs: (/15 AsIs: e.3/60 AsIs: )/16 } Tile{ AsIs: (/7 } Tile{ AsIs: e.1/62 } Tile{ AsIs: )/8 } Tile{ AsIs: )/18 } Tile{ AsIs: (/17 AsIs: # CallBrackets/29 AsIs: (/52 AsIs: # Symbol/54 AsIs: # Name/55 AsIs: e.Name/64 AsIs: )/53 } Tile{ AsIs: </68 Reuse: & ReplaceToGuards/72 } Tile{ AsIs: e.Expression/66 } Tile{ AsIs: >/69 HalfReuse: )/1 ]] }
            refalrts::reinit_open_bracket(context[0]);
            refalrts::update_name(context[72], functions[efunc_ReplaceToGuards]);
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[17], context[1] );
            refalrts::push_stack( vm, context[69] );
            refalrts::push_stack( vm, context[68] );
            refalrts::link_brackets( context[52], context[53] );
            refalrts::link_brackets( context[0], context[18] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::link_brackets( context[15], context[16] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[69];
            res = refalrts::splice_evar( res, context[66], context[67] );
            res = refalrts::splice_evar( res, context[68], context[72] );
            res = refalrts::splice_evar( res, context[17], context[53] );
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_elem( res, context[8] );
            res = refalrts::splice_evar( res, context[62], context[63] );
            res = refalrts::splice_elem( res, context[7] );
            res = refalrts::splice_evar( res, context[11], context[16] );
            res = refalrts::splice_evar( res, context[56], context[57] );
            refalrts::splice_to_freelist_open( vm, context[0], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[68], context[69]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & SpecTerm@1/4 (/7 e.4/56 )/8 (/11 e.5/58 )/12 (/15 e.3/60 )/16 e.1/62 (/17 # CallBrackets/29 (/52 # Symbol/54 # Name/55 e.Name/64 )/53 e.Expression/66 )/18 >/1
        context[56] = context[40];
        context[57] = context[41];
        context[58] = context[42];
        context[59] = context[43];
        context[60] = context[44];
        context[61] = context[45];
        context[62] = context[46];
        context[63] = context[47];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[48];
        context[67] = context[49];
        // closed e.4 as range 56
        // closed e.5 as range 58
        // closed e.3 as range 60
        // closed e.1 as range 62
        // closed e.Name as range 64
        // closed e.Expression as range 66
        //DEBUG: e.4: 56
        //DEBUG: e.5: 58
        //DEBUG: e.3: 60
        //DEBUG: e.1: 62
        //DEBUG: e.Name: 64
        //DEBUG: e.Expression: 66

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$2=1@1/4 AsIs: (/7 } Tile{ AsIs: e.Name/64 } Tile{ AsIs: )/8 } Tile{ HalfReuse: </17 HalfReuse: & DoMapAccum@3/29 AsIs: (/52 } Tile{ AsIs: e.4/56 } Tile{ AsIs: (/11 AsIs: e.5/58 AsIs: )/12 AsIs: (/15 AsIs: e.3/60 AsIs: )/16 } (/68 Tile{ AsIs: e.1/62 } Tile{ HalfReuse: )/54 HalfReuse: )/55 } (/69 Tile{ AsIs: )/53 AsIs: e.Expression/66 HalfReuse: >/18 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::alloc_open_bracket(vm, context[69]);
        refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S2A1Z1]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[29], functions[efunc_gen_DoMapAccum_Z3]);
        refalrts::reinit_close_bracket(context[54]);
        refalrts::reinit_close_bracket(context[55]);
        refalrts::reinit_close_call(context[18]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[17] );
        refalrts::link_brackets( context[69], context[53] );
        refalrts::link_brackets( context[52], context[55] );
        refalrts::link_brackets( context[68], context[54] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[53];
        res = refalrts::splice_elem( res, context[69] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_elem( res, context[68] );
        res = refalrts::splice_evar( res, context[11], context[16] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[17], context[52] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & SpecTerm@1/4 (/7 e.4/40 )/8 (/11 e.5/42 )/12 (/15 e.3/44 )/16 e.1/46 (/17 # CallBrackets/29 e.Expression/48 )/18 >/1
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = context[37];
      context[48] = context[38];
      context[49] = context[39];
      // closed e.4 as range 40
      // closed e.5 as range 42
      // closed e.3 as range 44
      // closed e.1 as range 46
      // closed e.Expression as range 48
      //DEBUG: e.4: 40
      //DEBUG: e.5: 42
      //DEBUG: e.3: 44
      //DEBUG: e.1: 46
      //DEBUG: e.Expression: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$3=1/4 HalfReuse: </7 } & DoMapAccum@3/50 (/51 Tile{ AsIs: e.4/40 } Tile{ AsIs: (/11 AsIs: e.5/42 AsIs: )/12 AsIs: (/15 AsIs: e.3/44 AsIs: )/16 } (/52 Tile{ AsIs: e.1/46 } Tile{ AsIs: )/8 } )/53 Tile{ AsIs: (/17 HalfReuse: )/29 AsIs: e.Expression/48 HalfReuse: >/18 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[50], functions[efunc_gen_DoMapAccum_Z3]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S3A1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[17], context[29] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[52], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_evar( res, context[11], context[16] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SpecTerm@1/4 (/7 e.4/30 )/8 (/11 e.5/32 )/12 (/15 e.3/34 )/16 e.1/36 (/17 # ClosureBrackets/29 e.ClosureContent/38 )/18 >/1
      context[30] = context[19];
      context[31] = context[20];
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[29] ) )
        continue;
      // closed e.4 as range 30
      // closed e.5 as range 32
      // closed e.3 as range 34
      // closed e.1 as range 36
      // closed e.ClosureContent as range 38
      //DEBUG: e.4: 30
      //DEBUG: e.5: 32
      //DEBUG: e.3: 34
      //DEBUG: e.1: 36
      //DEBUG: e.ClosureContent: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$4=1@1/4 HalfReuse: </7 } & DoMapAccum@3/40 (/41 Tile{ AsIs: e.4/30 } Tile{ AsIs: (/11 AsIs: e.5/32 AsIs: )/12 AsIs: (/15 AsIs: e.3/34 AsIs: )/16 } (/42 Tile{ AsIs: e.1/36 } Tile{ AsIs: )/8 } )/43 Tile{ AsIs: (/17 HalfReuse: )/29 AsIs: e.ClosureContent/38 HalfReuse: >/18 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[40], functions[efunc_gen_DoMapAccum_Z3]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S4A1Z1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[17], context[29] );
      refalrts::link_brackets( context[41], context[43] );
      refalrts::link_brackets( context[42], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[11], context[16] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SpecTerm@1/4 (/7 e.4/30 )/8 (/11 e.5/32 )/12 (/15 e.3/34 )/16 e.1/36 (/17 # Brackets/29 e.Expression/38 )/18 >/1
      context[30] = context[19];
      context[31] = context[20];
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[29] ) )
        continue;
      // closed e.4 as range 30
      // closed e.5 as range 32
      // closed e.3 as range 34
      // closed e.1 as range 36
      // closed e.Expression as range 38
      //DEBUG: e.4: 30
      //DEBUG: e.5: 32
      //DEBUG: e.3: 34
      //DEBUG: e.1: 36
      //DEBUG: e.Expression: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$5=1/4 HalfReuse: </7 } & DoMapAccum@3/40 (/41 Tile{ AsIs: e.4/30 } Tile{ AsIs: (/11 AsIs: e.5/32 AsIs: )/12 AsIs: (/15 AsIs: e.3/34 AsIs: )/16 } (/42 Tile{ AsIs: e.1/36 } Tile{ AsIs: )/8 } )/43 Tile{ AsIs: (/17 HalfReuse: )/29 AsIs: e.Expression/38 HalfReuse: >/18 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[40], functions[efunc_gen_DoMapAccum_Z3]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S5A1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[17], context[29] );
      refalrts::link_brackets( context[41], context[43] );
      refalrts::link_brackets( context[42], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[11], context[16] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SpecTerm@1/4 (/7 e.4/30 )/8 (/11 e.5/32 )/12 (/15 e.3/34 )/16 e.1/36 (/17 # ADT-Brackets/29 (/42 e.Name/40 )/43 e.Expression/38 )/18 >/1
    context[30] = context[19];
    context[31] = context[20];
    context[32] = context[21];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[24];
    context[36] = context[25];
    context[37] = context[26];
    context[38] = context[27];
    context[39] = context[28];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[29] ) )
      continue;
    context[40] = 0;
    context[41] = 0;
    context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
    if( ! context[42] )
      continue;
    refalrts::bracket_pointers(context[42], context[43]);
    // closed e.4 as range 30
    // closed e.5 as range 32
    // closed e.3 as range 34
    // closed e.1 as range 36
    // closed e.Name as range 40
    // closed e.Expression as range 38
    //DEBUG: e.4: 30
    //DEBUG: e.5: 32
    //DEBUG: e.3: 34
    //DEBUG: e.1: 36
    //DEBUG: e.Name: 40
    //DEBUG: e.Expression: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$6=1/4 AsIs: (/7 } Tile{ AsIs: e.Name/40 } Tile{ AsIs: )/8 } Tile{ HalfReuse: </17 HalfReuse: & DoMapAccum@3/29 AsIs: (/42 } Tile{ AsIs: e.4/30 } Tile{ AsIs: (/11 AsIs: e.5/32 AsIs: )/12 AsIs: (/15 AsIs: e.3/34 AsIs: )/16 } (/44 Tile{ AsIs: e.1/36 } )/45 )/46 (/47 Tile{ AsIs: )/43 AsIs: e.Expression/38 HalfReuse: >/18 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S6A1]);
    refalrts::reinit_open_call(context[17]);
    refalrts::reinit_name(context[29], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::reinit_close_call(context[18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[47], context[43] );
    refalrts::link_brackets( context[42], context[46] );
    refalrts::link_brackets( context[44], context[45] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[43];
    res = refalrts::splice_evar( res, context[45], context[47] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_evar( res, context[11], context[16] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[17], context[42] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SpecTerm@1/4 (/7 e.4/19 )/8 (/11 e.5/21 )/12 (/15 e.3/23 )/16 e.1/25 t.Other/17 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[13];
    context[24] = context[14];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.4 as range 19
    // closed e.5 as range 21
    // closed e.3 as range 23
    // closed e.1 as range 25
    //DEBUG: t.Other: 17
    //DEBUG: e.4: 19
    //DEBUG: e.5: 21
    //DEBUG: e.3: 23
    //DEBUG: e.1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & SpecTerm@1/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.4/19 } Tile{ AsIs: (/11 AsIs: e.5/21 AsIs: )/12 AsIs: (/15 AsIs: e.3/23 AsIs: )/16 } Tile{ AsIs: (/7 } Tile{ AsIs: e.1/25 } Tile{ AsIs: )/8 } Tile{ HalfReuse: )/1 } Tile{ AsIs: t.Other/17 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[11], context[16] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecTerm@1/4 (/7 e.4/5 )/8 (/11 e.5/9 )/12 (/15 e.3/13 )/16 e.1/2 t.dyn0/17 >/1
  // closed e.4 as range 5
  // closed e.5 as range 9
  // closed e.3 as range 13
  // closed e.1 as range 2
  //DEBUG: t.dyn0: 17
  //DEBUG: e.4: 5
  //DEBUG: e.5: 9
  //DEBUG: e.3: 13
  //DEBUG: e.1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm@0/4 HalfReuse: # Functions/7 } (/19 Tile{ AsIs: e.4/5 } Tile{ AsIs: (/11 AsIs: e.5/9 AsIs: )/12 AsIs: (/15 AsIs: e.3/13 AsIs: )/16 } (/20 Tile{ AsIs: e.1/2 } Tile{ AsIs: )/8 } )/21 Tile{ AsIs: t.dyn0/17 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_Z0]);
  refalrts::reinit_ident(context[7], identifiers[ident_Functions]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[21] );
  refalrts::link_brackets( context[20], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_Z1("SpecTerm@1", COOKIE1_, COOKIE2_, func_gen_SpecTerm_Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@3/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & SpecResult-Pass\1@0/16 Tile{ HalfReuse: # Functions/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_SpecResultm_Pass_L1Z0]);
  refalrts::reinit_ident(context[0], identifiers[ident_Functions]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z3("DoMapAccum$1=1@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@4/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@4/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & SpecSentence=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecSentence_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z4("DoMapAccum$1=1@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z4);


static refalrts::FnResult func_gen_SpecTerm_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & SpecTerm@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecTerm@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 t.new5/17 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  context[18] = refalrts::tvar_right( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & SpecTerm@2/4 (/7 e.new9/19 )/8 (/11 e.new10/21 )/12 (/15 e.new11/23 )/16 e.new8/25 (/17 s.new6/29 e.new7/27 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[13];
    context[24] = context[14];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = 0;
    context[28] = 0;
    if( ! refalrts::brackets_term( context[27], context[28], context[17] ) )
      continue;
    // closed e.new9 as range 19
    // closed e.new10 as range 21
    // closed e.new11 as range 23
    // closed e.new8 as range 25
    if( ! refalrts::svar_left( context[29], context[27], context[28] ) )
      continue;
    // closed e.new7 as range 27
    do {
      // </0 & SpecTerm@2/4 (/7 e.new14/30 )/8 (/11 e.new15/32 )/12 (/15 e.new16/34 )/16 e.new13/36 (/17 # CallBrackets/29 e.new12/38 )/18 >/1
      context[30] = context[19];
      context[31] = context[20];
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[29] ) )
        continue;
      // closed e.new14 as range 30
      // closed e.new15 as range 32
      // closed e.new16 as range 34
      // closed e.new13 as range 36
      // closed e.new12 as range 38
      do {
        // </0 & SpecTerm@2/4 (/7 e.new20/40 )/8 (/11 e.new21/42 )/12 (/15 e.new22/44 )/16 e.new19/46 (/17 # CallBrackets/29 (/52 # Symbol/54 # Name/55 e.new17/50 )/53 e.new18/48 )/18 >/1
        context[40] = context[30];
        context[41] = context[31];
        context[42] = context[32];
        context[43] = context[33];
        context[44] = context[34];
        context[45] = context[35];
        context[46] = context[36];
        context[47] = context[37];
        context[48] = context[38];
        context[49] = context[39];
        context[50] = 0;
        context[51] = 0;
        context[52] = refalrts::brackets_left( context[50], context[51], context[48], context[49] );
        if( ! context[52] )
          continue;
        refalrts::bracket_pointers(context[52], context[53]);
        context[54] = refalrts::ident_left( identifiers[ident_Symbol], context[50], context[51] );
        if( ! context[54] )
          continue;
        context[55] = refalrts::ident_left( identifiers[ident_Name], context[50], context[51] );
        if( ! context[55] )
          continue;
        // closed e.new20 as range 40
        // closed e.new21 as range 42
        // closed e.new22 as range 44
        // closed e.new19 as range 46
        // closed e.new17 as range 50
        // closed e.new18 as range 48
        do {
          // </0 & SpecTerm@2/4 (/7 e.4/56 )/8 (/11 e.5/58 )/12 (/15 e.3/60 )/16 e.1/62 (/17 # CallBrackets/29 (/52 # Symbol/54 # Name/55 e.Name/64 )/53 e.Expression/66 )/18 >/1
          context[56] = context[40];
          context[57] = context[41];
          context[58] = context[42];
          context[59] = context[43];
          context[60] = context[44];
          context[61] = context[45];
          context[62] = context[46];
          context[63] = context[47];
          context[64] = context[50];
          context[65] = context[51];
          context[66] = context[48];
          context[67] = context[49];
          // closed e.4 as range 56
          // closed e.5 as range 58
          // closed e.3 as range 60
          // closed e.1 as range 62
          // closed e.Name as range 64
          // closed e.Expression as range 66
          //DEBUG: e.4: 56
          //DEBUG: e.5: 58
          //DEBUG: e.3: 60
          //DEBUG: e.1: 62
          //DEBUG: e.Name: 64
          //DEBUG: e.Expression: 66
          //56: e.4
          //58: e.5
          //60: e.3
          //62: e.1
          //64: e.Name
          //66: e.Expression
          //71: e.Name

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[68]);
          refalrts::alloc_name(vm, context[70], functions[efunc_gen_SpecTerm_Z2S1C1]);
          refalrts::copy_evar(vm, context[71], context[72], context[64], context[65]);
          refalrts::alloc_close_call(vm, context[69]);
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[68] );
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_elem( res, context[70] );
          res = refalrts::splice_elem( res, context[68] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </68 & SpecTerm@2$1?1/72 e._/70 '@'/74 0/73 >/69
            context[70] = 0;
            context[71] = 0;
            context[72] = refalrts::call_left( context[70], context[71], context[68], context[69] );
            context[73] = refalrts::number_right( 0UL, context[70], context[71] );
            if( ! context[73] )
              continue;
            context[74] = refalrts::char_right( '@', context[70], context[71] );
            if( ! context[74] )
              continue;
            // closed e._ as range 70
            //DEBUG: e.4: 56
            //DEBUG: e.5: 58
            //DEBUG: e.3: 60
            //DEBUG: e.1: 62
            //DEBUG: e.Name: 64
            //DEBUG: e.Expression: 66
            //DEBUG: e._: 70

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} & SpecTerm@2/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._/70 '@'/74 0/73 {REMOVED TILE}
            //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.4/56 } Tile{ AsIs: (/11 AsIs: e.5/58 AsIs: )/12 AsIs: (/15 AsIs: e.3/60 AsIs: )/16 } Tile{ AsIs: (/7 } Tile{ AsIs: e.1/62 } Tile{ AsIs: )/8 } Tile{ AsIs: )/18 } Tile{ AsIs: (/17 AsIs: # CallBrackets/29 AsIs: (/52 AsIs: # Symbol/54 AsIs: # Name/55 AsIs: e.Name/64 AsIs: )/53 } Tile{ AsIs: </68 Reuse: & ReplaceToGuards/72 } Tile{ AsIs: e.Expression/66 } Tile{ AsIs: >/69 HalfReuse: )/1 ]] }
            refalrts::reinit_open_bracket(context[0]);
            refalrts::update_name(context[72], functions[efunc_ReplaceToGuards]);
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[17], context[1] );
            refalrts::push_stack( vm, context[69] );
            refalrts::push_stack( vm, context[68] );
            refalrts::link_brackets( context[52], context[53] );
            refalrts::link_brackets( context[0], context[18] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::link_brackets( context[15], context[16] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[69];
            res = refalrts::splice_evar( res, context[66], context[67] );
            res = refalrts::splice_evar( res, context[68], context[72] );
            res = refalrts::splice_evar( res, context[17], context[53] );
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_elem( res, context[8] );
            res = refalrts::splice_evar( res, context[62], context[63] );
            res = refalrts::splice_elem( res, context[7] );
            res = refalrts::splice_evar( res, context[11], context[16] );
            res = refalrts::splice_evar( res, context[56], context[57] );
            refalrts::splice_to_freelist_open( vm, context[0], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[68], context[69]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & SpecTerm@2/4 (/7 e.4/56 )/8 (/11 e.5/58 )/12 (/15 e.3/60 )/16 e.1/62 (/17 # CallBrackets/29 (/52 # Symbol/54 # Name/55 e.Name/64 )/53 e.Expression/66 )/18 >/1
        context[56] = context[40];
        context[57] = context[41];
        context[58] = context[42];
        context[59] = context[43];
        context[60] = context[44];
        context[61] = context[45];
        context[62] = context[46];
        context[63] = context[47];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[48];
        context[67] = context[49];
        // closed e.4 as range 56
        // closed e.5 as range 58
        // closed e.3 as range 60
        // closed e.1 as range 62
        // closed e.Name as range 64
        // closed e.Expression as range 66
        //DEBUG: e.4: 56
        //DEBUG: e.5: 58
        //DEBUG: e.3: 60
        //DEBUG: e.1: 62
        //DEBUG: e.Name: 64
        //DEBUG: e.Expression: 66

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$2=1@2/4 AsIs: (/7 } Tile{ AsIs: e.Name/64 } Tile{ AsIs: )/8 } Tile{ HalfReuse: </17 HalfReuse: & DoMapAccum@5/29 AsIs: (/52 } Tile{ AsIs: e.4/56 } Tile{ AsIs: (/11 AsIs: e.5/58 AsIs: )/12 AsIs: (/15 AsIs: e.3/60 AsIs: )/16 } (/68 Tile{ AsIs: e.1/62 } Tile{ HalfReuse: )/54 HalfReuse: )/55 } (/69 Tile{ AsIs: )/53 AsIs: e.Expression/66 HalfReuse: >/18 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::alloc_open_bracket(vm, context[69]);
        refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S2A1Z2]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[29], functions[efunc_gen_DoMapAccum_Z5]);
        refalrts::reinit_close_bracket(context[54]);
        refalrts::reinit_close_bracket(context[55]);
        refalrts::reinit_close_call(context[18]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[17] );
        refalrts::link_brackets( context[69], context[53] );
        refalrts::link_brackets( context[52], context[55] );
        refalrts::link_brackets( context[68], context[54] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[53];
        res = refalrts::splice_elem( res, context[69] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_elem( res, context[68] );
        res = refalrts::splice_evar( res, context[11], context[16] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[17], context[52] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[64], context[65] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & SpecTerm@2/4 (/7 e.4/40 )/8 (/11 e.5/42 )/12 (/15 e.3/44 )/16 e.1/46 (/17 # CallBrackets/29 e.Expression/48 )/18 >/1
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = context[37];
      context[48] = context[38];
      context[49] = context[39];
      // closed e.4 as range 40
      // closed e.5 as range 42
      // closed e.3 as range 44
      // closed e.1 as range 46
      // closed e.Expression as range 48
      //DEBUG: e.4: 40
      //DEBUG: e.5: 42
      //DEBUG: e.3: 44
      //DEBUG: e.1: 46
      //DEBUG: e.Expression: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$3=1/4 HalfReuse: </7 } & DoMapAccum@5/50 (/51 Tile{ AsIs: e.4/40 } Tile{ AsIs: (/11 AsIs: e.5/42 AsIs: )/12 AsIs: (/15 AsIs: e.3/44 AsIs: )/16 } (/52 Tile{ AsIs: e.1/46 } Tile{ AsIs: )/8 } )/53 Tile{ AsIs: (/17 HalfReuse: )/29 AsIs: e.Expression/48 HalfReuse: >/18 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[50], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S3A1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[17], context[29] );
      refalrts::link_brackets( context[51], context[53] );
      refalrts::link_brackets( context[52], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_elem( res, context[52] );
      res = refalrts::splice_evar( res, context[11], context[16] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SpecTerm@2/4 (/7 e.4/30 )/8 (/11 e.5/32 )/12 (/15 e.3/34 )/16 e.1/36 (/17 # ClosureBrackets/29 e.ClosureContent/38 )/18 >/1
      context[30] = context[19];
      context[31] = context[20];
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[29] ) )
        continue;
      // closed e.4 as range 30
      // closed e.5 as range 32
      // closed e.3 as range 34
      // closed e.1 as range 36
      // closed e.ClosureContent as range 38
      //DEBUG: e.4: 30
      //DEBUG: e.5: 32
      //DEBUG: e.3: 34
      //DEBUG: e.1: 36
      //DEBUG: e.ClosureContent: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$4=1@2/4 HalfReuse: </7 } & DoMapAccum@5/40 (/41 Tile{ AsIs: e.4/30 } Tile{ AsIs: (/11 AsIs: e.5/32 AsIs: )/12 AsIs: (/15 AsIs: e.3/34 AsIs: )/16 } (/42 Tile{ AsIs: e.1/36 } Tile{ AsIs: )/8 } )/43 Tile{ AsIs: (/17 HalfReuse: )/29 AsIs: e.ClosureContent/38 HalfReuse: >/18 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[40], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S4A1Z2]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[17], context[29] );
      refalrts::link_brackets( context[41], context[43] );
      refalrts::link_brackets( context[42], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[11], context[16] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SpecTerm@2/4 (/7 e.4/30 )/8 (/11 e.5/32 )/12 (/15 e.3/34 )/16 e.1/36 (/17 # Brackets/29 e.Expression/38 )/18 >/1
      context[30] = context[19];
      context[31] = context[20];
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[29] ) )
        continue;
      // closed e.4 as range 30
      // closed e.5 as range 32
      // closed e.3 as range 34
      // closed e.1 as range 36
      // closed e.Expression as range 38
      //DEBUG: e.4: 30
      //DEBUG: e.5: 32
      //DEBUG: e.3: 34
      //DEBUG: e.1: 36
      //DEBUG: e.Expression: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$5=1/4 HalfReuse: </7 } & DoMapAccum@5/40 (/41 Tile{ AsIs: e.4/30 } Tile{ AsIs: (/11 AsIs: e.5/32 AsIs: )/12 AsIs: (/15 AsIs: e.3/34 AsIs: )/16 } (/42 Tile{ AsIs: e.1/36 } Tile{ AsIs: )/8 } )/43 Tile{ AsIs: (/17 HalfReuse: )/29 AsIs: e.Expression/38 HalfReuse: >/18 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[40], functions[efunc_gen_DoMapAccum_Z5]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S5A1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_close_bracket(context[29]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[17], context[29] );
      refalrts::link_brackets( context[41], context[43] );
      refalrts::link_brackets( context[42], context[8] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[11], context[16] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SpecTerm@2/4 (/7 e.4/30 )/8 (/11 e.5/32 )/12 (/15 e.3/34 )/16 e.1/36 (/17 # ADT-Brackets/29 (/42 e.Name/40 )/43 e.Expression/38 )/18 >/1
    context[30] = context[19];
    context[31] = context[20];
    context[32] = context[21];
    context[33] = context[22];
    context[34] = context[23];
    context[35] = context[24];
    context[36] = context[25];
    context[37] = context[26];
    context[38] = context[27];
    context[39] = context[28];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[29] ) )
      continue;
    context[40] = 0;
    context[41] = 0;
    context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
    if( ! context[42] )
      continue;
    refalrts::bracket_pointers(context[42], context[43]);
    // closed e.4 as range 30
    // closed e.5 as range 32
    // closed e.3 as range 34
    // closed e.1 as range 36
    // closed e.Name as range 40
    // closed e.Expression as range 38
    //DEBUG: e.4: 30
    //DEBUG: e.5: 32
    //DEBUG: e.3: 34
    //DEBUG: e.1: 36
    //DEBUG: e.Name: 40
    //DEBUG: e.Expression: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$6=1/4 AsIs: (/7 } Tile{ AsIs: e.Name/40 } Tile{ AsIs: )/8 } Tile{ HalfReuse: </17 HalfReuse: & DoMapAccum@5/29 AsIs: (/42 } Tile{ AsIs: e.4/30 } Tile{ AsIs: (/11 AsIs: e.5/32 AsIs: )/12 AsIs: (/15 AsIs: e.3/34 AsIs: )/16 } (/44 Tile{ AsIs: e.1/36 } )/45 )/46 (/47 Tile{ AsIs: )/43 AsIs: e.Expression/38 HalfReuse: >/18 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S6A1]);
    refalrts::reinit_open_call(context[17]);
    refalrts::reinit_name(context[29], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::reinit_close_call(context[18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[47], context[43] );
    refalrts::link_brackets( context[42], context[46] );
    refalrts::link_brackets( context[44], context[45] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[43];
    res = refalrts::splice_evar( res, context[45], context[47] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_evar( res, context[11], context[16] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[17], context[42] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SpecTerm@2/4 (/7 e.4/19 )/8 (/11 e.5/21 )/12 (/15 e.3/23 )/16 e.1/25 t.Other/17 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[13];
    context[24] = context[14];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.4 as range 19
    // closed e.5 as range 21
    // closed e.3 as range 23
    // closed e.1 as range 25
    //DEBUG: t.Other: 17
    //DEBUG: e.4: 19
    //DEBUG: e.5: 21
    //DEBUG: e.3: 23
    //DEBUG: e.1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & SpecTerm@2/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.4/19 } Tile{ AsIs: (/11 AsIs: e.5/21 AsIs: )/12 AsIs: (/15 AsIs: e.3/23 AsIs: )/16 } Tile{ AsIs: (/7 } Tile{ AsIs: e.1/25 } Tile{ AsIs: )/8 } Tile{ HalfReuse: )/1 } Tile{ AsIs: t.Other/17 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[11], context[16] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecTerm@2/4 (/7 e.4/5 )/8 (/11 e.5/9 )/12 (/15 e.3/13 )/16 e.1/2 t.dyn0/17 >/1
  // closed e.4 as range 5
  // closed e.5 as range 9
  // closed e.3 as range 13
  // closed e.1 as range 2
  //DEBUG: t.dyn0: 17
  //DEBUG: e.4: 5
  //DEBUG: e.5: 9
  //DEBUG: e.3: 13
  //DEBUG: e.1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm@0/4 HalfReuse: # Closures/7 } (/19 Tile{ AsIs: e.4/5 } Tile{ AsIs: (/11 AsIs: e.5/9 AsIs: )/12 AsIs: (/15 AsIs: e.3/13 AsIs: )/16 } (/20 Tile{ AsIs: e.1/2 } Tile{ AsIs: )/8 } )/21 Tile{ AsIs: t.dyn0/17 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_Z0]);
  refalrts::reinit_ident(context[7], identifiers[ident_Closures]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[21] );
  refalrts::link_brackets( context[20], context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_Z2("SpecTerm@2", COOKIE1_, COOKIE2_, func_gen_SpecTerm_Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@5/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@5/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@5/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@5/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & SpecResult-Pass\1@0/16 Tile{ HalfReuse: # Closures/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_SpecResultm_Pass_L1Z0]);
  refalrts::reinit_ident(context[0], identifiers[ident_Closures]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z5("DoMapAccum$1=1@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z5);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum$1=1@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@6/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum$1=1@6/4 s.Pass/5 (/8 e.Scanned0/14 )/9 (/12 e.Tail0/16 )/13 t.Acc$a/20 e.StepScanned/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Scanned0 as range 14
    // closed e.Tail0 as range 16
    context[21] = refalrts::tvar_left( context[20], context[18], context[19] );
    if( ! context[21] )
      continue;
    // closed e.StepScanned as range 18
    //DEBUG: s.Pass: 5
    //DEBUG: e.Scanned0: 14
    //DEBUG: e.Tail0: 16
    //DEBUG: t.Acc$a: 20
    //DEBUG: e.StepScanned: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/8 {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: s.Pass/5 } Tile{ AsIs: t.Acc$a/20 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Scanned0/14 } Tile{ AsIs: e.StepScanned/18 } Tile{ AsIs: )/13 } Tile{ AsIs: e.Tail0/16 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@6/4 s.Pass/5 (/8 e.Scanned0/6 )/9 (/12 e.Tail0/10 )/13 e.dyn/2 >/1
  // closed e.Scanned0 as range 6
  // closed e.Tail0 as range 10
  // closed e.dyn as range 2
  //DEBUG: s.Pass: 5
  //DEBUG: e.Scanned0: 6
  //DEBUG: e.Tail0: 10
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 } [*]/14 & SpecResult-Pass\1@0/15 Tile{ AsIs: s.Pass/5 } {*}/16 Tile{ AsIs: (/8 AsIs: e.Scanned0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Tail0/10 AsIs: )/13 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_SpecResultm_Pass_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[16], context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[16] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z6("DoMapAccum$1=1@6", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z6);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@7/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@7/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@7/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@7/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & ExtractCalls-Term@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractCallsm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z7("DoMapAccum$1=1@7", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z7);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@8/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@8/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@8/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@8/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & ExtractCalls=2\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractCalls_A2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z8("DoMapAccum$1=1@8", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z8);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@9/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@9/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@9/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@9/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & RenameSignatureVars=3\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameSignatureVars_A3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z9("DoMapAccum$1=1@9", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z9);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@10/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@10/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@10/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@10/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & PrepareSignature-SortVars=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareSignaturem_SortVars_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z10("DoMapAccum$1=1@10", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z10);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@11/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@11/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@11/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@11/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & RenameSignatureVars-Term@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameSignatureVarsm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z11("DoMapAccum$1=1@11", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z11);


static refalrts::FnResult func_gen_Reduce_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Reduce$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@1/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@1/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@1/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 Tile{ HalfReuse: & Reduce$1=1@0/0 Reuse: & IsTrivialSubstitutions\1@0/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_IsTrivialSubstitutions_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z1("Reduce$1=1@1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@17/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@17/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@17/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & PrepareArgOrPattern=2\1$1\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_PrepareArgOrPattern_A2L1S1L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@17/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@17/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@17/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & PrepareArgOrPattern=2\1$1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareArgOrPattern_A2L1S1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z17("DoMapAccum@17", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z17);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoMapAccum$1=1@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@12/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & DoMapAccum$1=1@12/4 (/7 e.StaticMatches/21 )/8 (/11 e.DynamicMatches/23 )/12 (/15 e.Scanned0/25 )/16 (/19 e.Tail0/27 )/20 t.Acc$a/31 e.StepScanned/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.StaticMatches as range 21
    // closed e.DynamicMatches as range 23
    // closed e.Scanned0 as range 25
    // closed e.Tail0 as range 27
    context[32] = refalrts::tvar_left( context[31], context[29], context[30] );
    if( ! context[32] )
      continue;
    // closed e.StepScanned as range 29
    //DEBUG: e.StaticMatches: 21
    //DEBUG: e.DynamicMatches: 23
    //DEBUG: e.Scanned0: 25
    //DEBUG: e.Tail0: 27
    //DEBUG: t.Acc$a: 31
    //DEBUG: e.StepScanned: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/15 {REMOVED TILE} )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@12/4 AsIs: (/7 AsIs: e.StaticMatches/21 AsIs: )/8 AsIs: (/11 AsIs: e.DynamicMatches/23 AsIs: )/12 } Tile{ AsIs: t.Acc$a/31 } Tile{ AsIs: (/19 } Tile{ AsIs: e.Scanned0/25 } Tile{ AsIs: e.StepScanned/29 } Tile{ AsIs: )/20 } Tile{ AsIs: e.Tail0/27 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, context[12], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@12/4 (/7 e.StaticMatches/5 )/8 (/11 e.DynamicMatches/9 )/12 (/15 e.Scanned0/13 )/16 (/19 e.Tail0/17 )/20 e.dyn/2 >/1
  // closed e.StaticMatches as range 5
  // closed e.DynamicMatches as range 9
  // closed e.Scanned0 as range 13
  // closed e.Tail0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.StaticMatches: 5
  //DEBUG: e.DynamicMatches: 9
  //DEBUG: e.Scanned0: 13
  //DEBUG: e.Tail0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & DoMapAccum$1=1@0/22 Tile{ HalfReuse: [*]/0 Reuse: & PrepareArgOrPattern=2\1@0/4 AsIs: (/7 AsIs: e.StaticMatches/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.DynamicMatches/9 } )/23 Tile{ HalfReuse: {*}/12 AsIs: (/15 AsIs: e.Scanned0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Tail0/17 AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareArgOrPattern_A2L1Z0]);
  refalrts::reinit_unwrapped_closure(context[12], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[23] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z12("DoMapAccum$1=1@12", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z12);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@13/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@13/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@13/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@13/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & RenameGenericMatch=3\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameGenericMatch_A3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z13("DoMapAccum$1=1@13", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z13);


static refalrts::FnResult func_gen_Reduce_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Reduce$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@2/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@2/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@2/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@2/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 Tile{ HalfReuse: & Reduce$1=1@0/0 Reuse: & MapGenericMatches=1\1@0/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_MapGenericMatches_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z2("Reduce$1=1@2", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@14/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@14/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@14/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@14/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & GenericMatch-Wrapper:1$1=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GenericMatchm_Wrapper_B1S1A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z14("DoMapAccum$1=1@14", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z14);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@15/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@15/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@15/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@15/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & NameSignatureVars=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_NameSignatureVars_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z15("DoMapAccum$1=1@15", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z15);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@16/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@16/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@16/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@16/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & NameSignatureVars-Term@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_NameSignatureVarsm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z16("DoMapAccum$1=1@16", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z16);


static refalrts::FnResult func_gen_Preparem_Aux_A1L1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 86 elems
  refalrts::Iter context[86];
  refalrts::zeros( context, 86 );
  // </0 & Prepare-Aux=1\1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Prepare-Aux=1\1@1/4 (/9 (/13 e.new1/11 )/14 e.new2/7 (/17 e.new3/15 )/18 )/10 t.new4/19 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[7], context[8] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_right( context[15], context[16], context[7], context[8] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new1 as range 11
    // closed e.new2 as range 7
    // closed e.new3 as range 15
    context[20] = refalrts::tvar_left( context[19], context[5], context[6] );
    if( ! context[20] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Prepare-Aux=1\1@1/4 (/9 (/13 e.new8/21 )/14 e.new7/23 (/17 e.new9/25 )/18 )/10 (/19 # Spec/29 t.new5/30 e.new6/27 )/20 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[7];
      context[24] = context[8];
      context[25] = context[15];
      context[26] = context[16];
      context[27] = 0;
      context[28] = 0;
      if( ! refalrts::brackets_term( context[27], context[28], context[19] ) )
        continue;
      context[29] = refalrts::ident_left( identifiers[ident_Spec], context[27], context[28] );
      if( ! context[29] )
        continue;
      // closed e.new8 as range 21
      // closed e.new7 as range 23
      // closed e.new9 as range 25
      context[31] = refalrts::tvar_left( context[30], context[27], context[28] );
      if( ! context[31] )
        continue;
      // closed e.new6 as range 27
      do {
        // </0 & Prepare-Aux=1\1@1/4 (/9 (/13 e.Names/32 )/14 e.Info/34 (/17 e.Histories/36 )/18 )/10 (/19 # Spec/29 t.Name/30 e.Pattern/38 )/20 >/1
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        context[35] = context[24];
        context[36] = context[25];
        context[37] = context[26];
        context[38] = context[27];
        context[39] = context[28];
        // closed e.Names as range 32
        // closed e.Info as range 34
        // closed e.Histories as range 36
        // closed e.Pattern as range 38
        //DEBUG: t.Name: 30
        //DEBUG: e.Names: 32
        //DEBUG: e.Info: 34
        //DEBUG: e.Histories: 36
        //DEBUG: e.Pattern: 38
        //30: t.Name
        //32: e.Names
        //34: e.Info
        //36: e.Histories
        //38: e.Pattern

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[40]);
        refalrts::alloc_name(vm, context[42], functions[efunc_gen_Preparem_Aux_A1L1Z1S1C1]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[40] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_elem( res, context[40] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </40 & Prepare-Aux=1\1@1$1?1/44 e._B/45 t.Name/49 e._E/47 >/41
          context[42] = 0;
          context[43] = 0;
          context[44] = refalrts::call_left( context[42], context[43], context[40], context[41] );
          context[45] = 0;
          context[46] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[47] = context[42];
            context[48] = context[43];
            context[50] = refalrts::repeated_stvar_left( vm, context[49], context[30], context[47], context[48] );
            if( ! context[50] )
              continue;
            // closed e._E as range 47
            //DEBUG: t.Name: 30
            //DEBUG: e.Names: 32
            //DEBUG: e.Info: 34
            //DEBUG: e.Histories: 36
            //DEBUG: e.Pattern: 38
            //DEBUG: e._B: 45
            //DEBUG: e._E: 47

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & Prepare-Aux=1\1@1/4 {REMOVED TILE} (/19 # Spec/29 t.Name/30 e.Pattern/38 )/20 </40 & Prepare-Aux=1\1@1$1?1/44 e._B/45 t.Name/49 e._E/47 >/41 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: (/13 AsIs: e.Names/32 AsIs: )/14 AsIs: e.Info/34 AsIs: (/17 AsIs: e.Histories/36 AsIs: )/18 AsIs: )/10 } Tile{ ]] }
            refalrts::link_brackets( context[9], context[10] );
            refalrts::link_brackets( context[17], context[18] );
            refalrts::link_brackets( context[13], context[14] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[9], context[10] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[45], context[46], context[42], context[43] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[40], context[41]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Prepare-Aux=1\1@1/4 (/9 (/13 e.Names/32 )/14 e.Info/34 (/17 e.Histories/36 )/18 )/10 (/19 # Spec/29 (/30 e./40 )/31 e.Pattern/38 )/20 >/1
        context[32] = context[21];
        context[33] = context[22];
        context[34] = context[23];
        context[35] = context[24];
        context[36] = context[25];
        context[37] = context[26];
        context[38] = context[27];
        context[39] = context[28];
        context[40] = 0;
        context[41] = 0;
        if( ! refalrts::brackets_term( context[40], context[41], context[30] ) )
          continue;
        // closed e.Names as range 32
        // closed e.Info as range 34
        // closed e.Histories as range 36
        // closed e. as range 40
        // closed e.Pattern as range 38
        //DEBUG: e.Names: 32
        //DEBUG: e.Info: 34
        //DEBUG: e.Histories: 36
        //DEBUG: e.: 40
        //DEBUG: e.Pattern: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: (/13 AsIs: e.Names/32 HalfReuse: (/14 } e./40/42 )/44 )/45 Tile{ AsIs: e.Info/34 } (/46 (/47 e./40/48 )/50 (/51 e.Pattern/38/52 )/54 )/55 Tile{ AsIs: (/17 AsIs: e.Histories/36 HalfReuse: </18 } & TrivialHistory=1/56 (/57 e./40/58 Tile{ AsIs: )/10 AsIs: (/19 HalfReuse: </29 HalfReuse: & AddSuffix/30 AsIs: e./40 HalfReuse: (/31 } '@'/60 0/61 )/62 >/63 )/64 Tile{ AsIs: </0 Reuse: & Map@3/4 } </65 & ExtractVariables-Expr/66 Tile{ AsIs: e.Pattern/38 } >/67 >/68 >/69 )/70 )/71 </72 & Log-PutLine/73"New $SPEC function: "/74 </76 & DisplayName/77 e./40/78 >/80 ' '/81 </82 & Log-InlineExpr/83 e.Pattern/38/84 Tile{ HalfReuse: >/20 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[42], context[43], context[40], context[41]);
        refalrts::alloc_close_bracket(vm, context[44]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_open_bracket(vm, context[46]);
        refalrts::alloc_open_bracket(vm, context[47]);
        refalrts::copy_evar(vm, context[48], context[49], context[40], context[41]);
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::alloc_open_bracket(vm, context[51]);
        refalrts::copy_evar(vm, context[52], context[53], context[38], context[39]);
        refalrts::alloc_close_bracket(vm, context[54]);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_name(vm, context[56], functions[efunc_gen_TrivialHistory_A1]);
        refalrts::alloc_open_bracket(vm, context[57]);
        refalrts::copy_evar(vm, context[58], context[59], context[40], context[41]);
        refalrts::alloc_char(vm, context[60], '@');
        refalrts::alloc_number(vm, context[61], 0UL);
        refalrts::alloc_close_bracket(vm, context[62]);
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::alloc_close_bracket(vm, context[64]);
        refalrts::alloc_open_call(vm, context[65]);
        refalrts::alloc_name(vm, context[66], functions[efunc_ExtractVariablesm_Expr]);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_close_call(vm, context[68]);
        refalrts::alloc_close_call(vm, context[69]);
        refalrts::alloc_close_bracket(vm, context[70]);
        refalrts::alloc_close_bracket(vm, context[71]);
        refalrts::alloc_open_call(vm, context[72]);
        refalrts::alloc_name(vm, context[73], functions[efunc_Logm_PutLine]);
        refalrts::alloc_chars(vm, context[74], context[75], "New $SPEC function: ", 20);
        refalrts::alloc_open_call(vm, context[76]);
        refalrts::alloc_name(vm, context[77], functions[efunc_DisplayName]);
        refalrts::copy_evar(vm, context[78], context[79], context[40], context[41]);
        refalrts::alloc_close_call(vm, context[80]);
        refalrts::alloc_char(vm, context[81], ' ');
        refalrts::alloc_open_call(vm, context[82]);
        refalrts::alloc_name(vm, context[83], functions[efunc_Logm_InlineExpr]);
        refalrts::copy_evar(vm, context[84], context[85], context[38], context[39]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_open_call(context[29]);
        refalrts::reinit_name(context[30], functions[efunc_AddSuffix]);
        refalrts::reinit_open_bracket(context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z3]);
        refalrts::reinit_close_call(context[20]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[82] );
        refalrts::push_stack( vm, context[80] );
        refalrts::push_stack( vm, context[76] );
        refalrts::link_brackets( context[9], context[71] );
        refalrts::link_brackets( context[17], context[70] );
        refalrts::push_stack( vm, context[69] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[68] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[65] );
        refalrts::link_brackets( context[19], context[64] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[31], context[62] );
        refalrts::link_brackets( context[57], context[10] );
        refalrts::link_brackets( context[46], context[55] );
        refalrts::link_brackets( context[51], context[54] );
        refalrts::link_brackets( context[47], context[50] );
        refalrts::link_brackets( context[13], context[45] );
        refalrts::link_brackets( context[14], context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_evar( res, context[84], context[85] );
        res = refalrts::splice_evar( res, context[67], context[83] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[60], context[64] );
        res = refalrts::splice_evar( res, context[10], context[31] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[46], context[55] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Prepare-Aux=1\1@1/4 (/9 (/13 e.Names/32 )/14 e.Info/34 (/17 e.Histories/36 )/18 )/10 (/19 # Spec/29 t.Name/30 e.Pattern/38 )/20 >/1
      context[32] = context[21];
      context[33] = context[22];
      context[34] = context[23];
      context[35] = context[24];
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      // closed e.Names as range 32
      // closed e.Info as range 34
      // closed e.Histories as range 36
      // closed e.Pattern as range 38
      //DEBUG: t.Name: 30
      //DEBUG: e.Names: 32
      //DEBUG: e.Info: 34
      //DEBUG: e.Histories: 36
      //DEBUG: e.Pattern: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Prepare-Aux=1\1$2=1*1/9 AsIs: (/13 AsIs: e.Names/32 AsIs: )/14 } Tile{ AsIs: t.Name/30 } Tile{ HalfReuse: (/29 } Tile{ AsIs: e.Info/34 } Tile{ AsIs: )/10 AsIs: (/19 } Tile{ AsIs: e.Pattern/38 } Tile{ AsIs: )/20 } Tile{ AsIs: (/17 AsIs: e.Histories/36 AsIs: )/18 } t.Name/30/40 Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[40], context[41], context[30], context[31]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[9], functions[efunc_gen_Preparem_Aux_A1L1S2A1D1]);
      refalrts::reinit_open_bracket(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[29], context[10] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[10], context[19] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[4], context[14] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Prepare-Aux=1\1@1/4 (/9 (/13 e.Names/21 )/14 e.Info/23 (/17 e.Histories/25 )/18 )/10 t.Other/19 >/1
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[15];
    context[26] = context[16];
    // closed e.Names as range 21
    // closed e.Info as range 23
    // closed e.Histories as range 25
    //DEBUG: t.Other: 19
    //DEBUG: e.Names: 21
    //DEBUG: e.Info: 23
    //DEBUG: e.Histories: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Prepare-Aux=1\1@1/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: (/13 AsIs: e.Names/21 AsIs: )/14 AsIs: e.Info/23 AsIs: (/17 AsIs: e.Histories/25 AsIs: )/18 AsIs: )/10 AsIs: t.Other/19 } Tile{ ]] }
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[20] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Prepare-Aux=1\1@1/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Prepare-Aux=1\1@0/6 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Preparem_Aux_A1L1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A1L1Z1("Prepare-Aux=1\\1@1", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A1L1Z1);


static refalrts::FnResult func_gen_Preparem_Aux_A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Prepare-Aux=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Prepare-Aux=2@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & Prepare-Aux=2@1/4 (/7 e.NewNames0/17 )/8 (/11 e.NewHistories0/19 )/12 (/15 e.AST$a0/21 )/16 e.NewInfo$a/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.NewNames0 as range 17
    // closed e.NewHistories0 as range 19
    // closed e.AST$a0 as range 21
    // closed e.NewInfo$a as range 23
    //DEBUG: e.NewNames0: 17
    //DEBUG: e.NewHistories0: 19
    //DEBUG: e.AST$a0: 21
    //DEBUG: e.NewInfo$a: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prepare-Aux=3@1/4 AsIs: (/7 AsIs: e.NewNames0/17 AsIs: )/8 AsIs: (/11 AsIs: e.NewHistories0/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.NewInfo$a/23 } Tile{ AsIs: )/16 } </25 & Map@1/26 Tile{ AsIs: e.AST$a0/21 } >/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_gen_Map_Z1]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_Preparem_Aux_A3Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[25] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Prepare-Aux=2@1/4 (/7 e.NewNames0/5 )/8 (/11 e.NewHistories0/9 )/12 (/15 e.AST$a0/13 )/16 e.dyn/2 >/1
  // closed e.NewNames0 as range 5
  // closed e.NewHistories0 as range 9
  // closed e.AST$a0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.NewNames0: 5
  //DEBUG: e.NewHistories0: 9
  //DEBUG: e.AST$a0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prepare-Aux=2@0/4 AsIs: (/7 } )/17 (/18 Tile{ AsIs: e.NewNames0/5 } )/19 (/20 )/21 (/22 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.NewHistories0/9 AsIs: )/12 AsIs: (/15 AsIs: e.AST$a0/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_Preparem_Aux_A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[22], context[8] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[7], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[19], context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A2Z1("Prepare-Aux=2@1", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A2Z1);


static refalrts::FnResult func_gen_SpecTerm_S2A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & SpecTerm$2=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecTerm$2=1@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & SpecTerm$2=1@1/4 (/7 e.Name0/9 )/8 (/15 e.SpecInfo$a/13 (/27 e.Histories$a/25 )/28 (/23 e.History$a/21 )/24 (/19 e.NewFunctions$a/17 )/20 )/16 e.Expression$a/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_right( context[17], context[18], context[13], context[14] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_right( context[21], context[22], context[13], context[14] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_right( context[25], context[26], context[13], context[14] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Name0 as range 9
    // closed e.SpecInfo$a as range 13
    // closed e.Histories$a as range 25
    // closed e.History$a as range 21
    // closed e.NewFunctions$a as range 17
    // closed e.Expression$a as range 11
    //DEBUG: e.Name0: 9
    //DEBUG: e.SpecInfo$a: 13
    //DEBUG: e.Histories$a: 25
    //DEBUG: e.History$a: 21
    //DEBUG: e.NewFunctions$a: 17
    //DEBUG: e.Expression$a: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & TrySpecCall/8 AsIs: (/15 AsIs: e.SpecInfo$a/13 AsIs: (/27 AsIs: e.Histories$a/25 AsIs: )/28 AsIs: (/23 AsIs: e.History$a/21 AsIs: )/24 AsIs: (/19 AsIs: e.NewFunctions$a/17 AsIs: )/20 AsIs: )/16 } (/29 Tile{ HalfReuse: # CallBrackets/4 AsIs: (/7 } # Symbol/30 # Name/31 Tile{ AsIs: e.Name0/9 } )/32 Tile{ AsIs: e.Expression$a/11 } )/33 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Symbol]);
    refalrts::alloc_ident(vm, context[31], identifiers[ident_Name]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_name(context[8], functions[efunc_TrySpecCall]);
    refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[33] );
    refalrts::link_brackets( context[7], context[32] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecTerm$2=1@1/4 (/7 e.Name0/5 )/8 e.dyn/2 >/1
  // closed e.Name0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Name0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$2=1@0/4 AsIs: (/7 AsIs: e.Name0/5 AsIs: )/8 } # Functions/9 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Functions]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S2A1Z1("SpecTerm$2=1@1", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S2A1Z1);


static refalrts::FnResult func_gen_SpecTerm_S4A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & SpecTerm$4=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & SpecTerm$4=1@1/4 (/9 e.new1/7 (/21 e.new2/19 )/22 (/17 e.new3/15 )/18 (/13 e.new4/11 )/14 )/10 e.new5/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_right( context[11], context[12], context[7], context[8] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_right( context[15], context[16], context[7], context[8] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_right( context[19], context[20], context[7], context[8] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new1 as range 7
    // closed e.new2 as range 19
    // closed e.new3 as range 15
    // closed e.new4 as range 11
    // closed e.new5 as range 5
    do {
      // </0 & SpecTerm$4=1@1/4 (/9 e.SpecInfo$a/23 (/21 e.Histories$a/25 )/22 (/17 e.History$a/27 )/18 (/13 e.NewFunctions$a/29 )/14 )/10 (/35 # Symbol/37 # Name/38 e.2/33 )/36 >/1
      context[23] = context[7];
      context[24] = context[8];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      context[31] = context[5];
      context[32] = context[6];
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
      if( ! context[35] )
        continue;
      refalrts::bracket_pointers(context[35], context[36]);
      context[37] = refalrts::ident_left( identifiers[ident_Symbol], context[33], context[34] );
      if( ! context[37] )
        continue;
      context[38] = refalrts::ident_left( identifiers[ident_Name], context[33], context[34] );
      if( ! context[38] )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      // closed e.SpecInfo$a as range 23
      // closed e.Histories$a as range 25
      // closed e.History$a as range 27
      // closed e.NewFunctions$a as range 29
      // closed e.2 as range 33
      //DEBUG: e.SpecInfo$a: 23
      //DEBUG: e.Histories$a: 25
      //DEBUG: e.History$a: 27
      //DEBUG: e.NewFunctions$a: 29
      //DEBUG: e.2: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & SpecTerm$4=1@1/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.SpecInfo$a/23 AsIs: (/21 AsIs: e.Histories$a/25 AsIs: )/22 AsIs: (/17 AsIs: e.History$a/27 AsIs: )/18 AsIs: (/13 AsIs: e.NewFunctions$a/29 AsIs: )/14 AsIs: )/10 AsIs: (/35 AsIs: # Symbol/37 AsIs: # Name/38 AsIs: e.2/33 AsIs: )/36 } Tile{ ]] }
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[36] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SpecTerm$4=1@1/4 (/9 e.SpecInfo$a/23 (/21 e.Histories$a/25 )/22 (/17 e.History$a/27 )/18 (/13 e.NewFunctions$a/29 )/14 )/10 e.ClosureContent$a/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[5];
    context[32] = context[6];
    // closed e.SpecInfo$a as range 23
    // closed e.Histories$a as range 25
    // closed e.History$a as range 27
    // closed e.NewFunctions$a as range 29
    // closed e.ClosureContent$a as range 31
    //DEBUG: e.SpecInfo$a: 23
    //DEBUG: e.Histories$a: 25
    //DEBUG: e.History$a: 27
    //DEBUG: e.NewFunctions$a: 29
    //DEBUG: e.ClosureContent$a: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.SpecInfo$a/23 AsIs: (/21 AsIs: e.Histories$a/25 AsIs: )/22 AsIs: (/17 AsIs: e.History$a/27 AsIs: )/18 AsIs: (/13 AsIs: e.NewFunctions$a/29 AsIs: )/14 AsIs: )/10 } Tile{ HalfReuse: (/0 HalfReuse: # ClosureBrackets/4 } Tile{ AsIs: e.ClosureContent$a/31 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_ClosureBrackets]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecTerm$4=1@1/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & SpecTerm$4=1@0/0 HalfReuse: # Functions/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_SpecTerm_S4A1Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Functions]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S4A1Z1("SpecTerm$4=1@1", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S4A1Z1);


static refalrts::FnResult func_gen_SpecTerm_S2A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & SpecTerm$2=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SpecTerm$2=1@2/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & SpecTerm$2=1@2/4 (/7 e.Name0/9 )/8 (/15 e.SpecInfo$a/13 (/27 e.Histories$a/25 )/28 (/23 e.History$a/21 )/24 (/19 e.NewFunctions$a/17 )/20 )/16 e.Expression$a/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_right( context[17], context[18], context[13], context[14] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_right( context[21], context[22], context[13], context[14] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_right( context[25], context[26], context[13], context[14] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Name0 as range 9
    // closed e.SpecInfo$a as range 13
    // closed e.Histories$a as range 25
    // closed e.History$a as range 21
    // closed e.NewFunctions$a as range 17
    // closed e.Expression$a as range 11
    //DEBUG: e.Name0: 9
    //DEBUG: e.SpecInfo$a: 13
    //DEBUG: e.Histories$a: 25
    //DEBUG: e.History$a: 21
    //DEBUG: e.NewFunctions$a: 17
    //DEBUG: e.Expression$a: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/15 AsIs: e.SpecInfo$a/13 AsIs: (/27 AsIs: e.Histories$a/25 AsIs: )/28 AsIs: (/23 AsIs: e.History$a/21 AsIs: )/24 AsIs: (/19 AsIs: e.NewFunctions$a/17 AsIs: )/20 AsIs: )/16 } (/29 # CallBrackets/30 Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Name/7 AsIs: e.Name0/9 AsIs: )/8 } Tile{ AsIs: e.Expression$a/11 } Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_CallBrackets]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[7], identifiers[ident_Name]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[29], context[1] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecTerm$2=1@2/4 (/7 e.Name0/5 )/8 e.dyn/2 >/1
  // closed e.Name0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Name0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SpecTerm$2=1@0/4 AsIs: (/7 AsIs: e.Name0/5 AsIs: )/8 } # Closures/9 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Closures]);
  refalrts::update_name(context[4], functions[efunc_gen_SpecTerm_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S2A1Z2("SpecTerm$2=1@2", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S2A1Z2);


static refalrts::FnResult func_gen_SpecTerm_S4A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & SpecTerm$4=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & SpecTerm$4=1@2/4 (/9 e.SpecInfo$a/7 (/21 e.Histories$a/19 )/22 (/17 e.History$a/15 )/18 (/13 e.NewFunctions$a/11 )/14 )/10 e.ClosureContent$a/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_right( context[11], context[12], context[7], context[8] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_right( context[15], context[16], context[7], context[8] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_right( context[19], context[20], context[7], context[8] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.SpecInfo$a as range 7
    // closed e.Histories$a as range 19
    // closed e.History$a as range 15
    // closed e.NewFunctions$a as range 11
    // closed e.ClosureContent$a as range 5
    //DEBUG: e.SpecInfo$a: 7
    //DEBUG: e.Histories$a: 19
    //DEBUG: e.History$a: 15
    //DEBUG: e.NewFunctions$a: 11
    //DEBUG: e.ClosureContent$a: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </23 & SpecTerm$4=3/24 Tile{ AsIs: </0 Reuse: & TrySpecCall/4 AsIs: (/9 AsIs: e.SpecInfo$a/7 AsIs: (/21 AsIs: e.Histories$a/19 AsIs: )/22 AsIs: (/17 AsIs: e.History$a/15 AsIs: )/18 AsIs: (/13 AsIs: e.NewFunctions$a/11 AsIs: )/14 AsIs: )/10 } (/25 # CallBrackets/26 Tile{ AsIs: e.ClosureContent$a/5 } (/27 # Var/28"e@"/29 )/31 )/32 >/33 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_SpecTerm_S4A3]);
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_ident(vm, context[26], identifiers[ident_CallBrackets]);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_ident(vm, context[28], identifiers[ident_Var]);
    refalrts::alloc_chars(vm, context[29], context[30], "e@", 2);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_TrySpecCall]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[25], context[32] );
    refalrts::link_brackets( context[27], context[31] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[33] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SpecTerm$4=1@2/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & SpecTerm$4=1@0/0 HalfReuse: # Closures/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_SpecTerm_S4A1Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Closures]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SpecTerm_S4A1Z2("SpecTerm$4=1@2", COOKIE1_, COOKIE2_, func_gen_SpecTerm_S4A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@17/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@17/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@17/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@17/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & PrepareArgOrPattern=2\1$1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_PrepareArgOrPattern_A2L1S1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z17("DoMapAccum$1=1@17", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z17);


static refalrts::FnResult func_gen_Preparem_Aux_A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Prepare-Aux=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Prepare-Aux=3@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & Prepare-Aux=3@1/4 (/7 e.NewNames0/17 )/8 (/11 e.NewHistories0/19 )/12 (/15 e.NewInfo$a0/21 )/16 e.AST$b/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.NewNames0 as range 17
    // closed e.NewHistories0 as range 19
    // closed e.NewInfo$a0 as range 21
    // closed e.AST$b as range 23
    //DEBUG: e.NewNames0: 17
    //DEBUG: e.NewHistories0: 19
    //DEBUG: e.NewInfo$a0: 21
    //DEBUG: e.AST$b: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prepare-Aux=4@1/4 AsIs: (/7 AsIs: e.NewNames0/17 AsIs: )/8 AsIs: (/11 AsIs: e.NewHistories0/19 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.AST$b/23 } Tile{ AsIs: )/16 } </25 & Map@4/26 Tile{ AsIs: e.NewInfo$a0/21 } >/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_Preparem_Aux_A4Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[25] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Prepare-Aux=3@1/4 (/7 e.NewNames0/5 )/8 (/11 e.NewHistories0/9 )/12 (/15 e.NewInfo$a0/13 )/16 e.dyn/2 >/1
  // closed e.NewNames0 as range 5
  // closed e.NewHistories0 as range 9
  // closed e.NewInfo$a0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.NewNames0: 5
  //DEBUG: e.NewHistories0: 9
  //DEBUG: e.NewInfo$a0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prepare-Aux=3@0/4 AsIs: (/7 } )/17 (/18 Tile{ AsIs: e.NewNames0/5 } )/19 (/20 )/21 (/22 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.NewHistories0/9 AsIs: )/12 AsIs: (/15 AsIs: e.NewInfo$a0/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_Preparem_Aux_A3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[22], context[8] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[7], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[19], context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A3Z1("Prepare-Aux=3@1", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A3Z1);


static refalrts::FnResult func_gen_Preparem_Aux_A4Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Prepare-Aux=4@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Prepare-Aux=4@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & Prepare-Aux=4@1/4 (/7 e.NewNames0/17 )/8 (/11 e.NewHistories0/19 )/12 (/15 e.AST$b0/21 )/16 e.NewInfo$b/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.NewNames0 as range 17
    // closed e.NewHistories0 as range 19
    // closed e.AST$b0 as range 21
    // closed e.NewInfo$b as range 23
    //DEBUG: e.NewNames0: 17
    //DEBUG: e.NewHistories0: 19
    //DEBUG: e.AST$b0: 21
    //DEBUG: e.NewInfo$b: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/16 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # SpecInfo/4 AsIs: (/7 AsIs: e.NewNames0/17 AsIs: )/8 } Tile{ AsIs: e.NewInfo$b/23 } Tile{ AsIs: (/11 AsIs: e.NewHistories0/19 AsIs: )/12 HalfReuse: )/15 } Tile{ AsIs: e.AST$b0/21 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_SpecInfo]);
    refalrts::reinit_close_bracket(context[15]);
    refalrts::link_brackets( context[0], context[15] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Prepare-Aux=4@1/4 (/7 e.NewNames0/5 )/8 (/11 e.NewHistories0/9 )/12 (/15 e.AST$b0/13 )/16 e.dyn/2 >/1
  // closed e.NewNames0 as range 5
  // closed e.NewHistories0 as range 9
  // closed e.AST$b0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.NewNames0: 5
  //DEBUG: e.NewHistories0: 9
  //DEBUG: e.AST$b0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Prepare-Aux=4@0/4 AsIs: (/7 } )/17 (/18 Tile{ AsIs: e.NewNames0/5 } )/19 (/20 )/21 (/22 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.NewHistories0/9 AsIs: )/12 AsIs: (/15 AsIs: e.AST$b0/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_Preparem_Aux_A4Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[22], context[8] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[7], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[19], context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Preparem_Aux_A4Z1("Prepare-Aux=4@1", COOKIE1_, COOKIE2_, func_gen_Preparem_Aux_A4Z1);


//End of file
